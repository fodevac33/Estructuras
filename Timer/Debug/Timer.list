
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002184  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800230c  0800230c  0001230c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800234c  0800234c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800234c  0800234c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800234c  0800234c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002350  08002350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  08002360  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002360  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b578  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a79  00000000  00000000  0002b5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002d030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d2f  00000000  00000000  0002e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7c8  00000000  00000000  00055397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed46e  00000000  00000000  00062b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ffcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef0  00000000  00000000  00150020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022f4 	.word	0x080022f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080022f4 	.word	0x080022f4

080001c8 <main>:
#include "main.h"

extern TIM_HandleTypeDef Tim3;

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_Init();
 80001cc:	f000 f8b6 	bl	800033c <HAL_Init>

	SysConfigClock();
 80001d0:	f001 ffc1 	bl	8002156 <SysConfigClock>

	Global_GPIO_Init();
 80001d4:	f001 ff5e 	bl	8002094 <Global_GPIO_Init>

	GPIO_Led_Init();
 80001d8:	f001 ff98 	bl	800210c <GPIO_Led_Init>

	Timer_Init(100);
 80001dc:	2064      	movs	r0, #100	; 0x64
 80001de:	f002 f801 	bl	80021e4 <Timer_Init>

	HAL_TIM_Base_Start_IT(&Tim3);
 80001e2:	4802      	ldr	r0, [pc, #8]	; (80001ec <main+0x24>)
 80001e4:	f001 fa40 	bl	8001668 <HAL_TIM_Base_Start_IT>

	while (1) {
 80001e8:	e7fe      	b.n	80001e8 <main+0x20>
 80001ea:	bf00      	nop
 80001ec:	2000002c 	.word	0x2000002c

080001f0 <HAL_TIM_PeriodElapsedCallback>:

	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d101      	bne.n	8000206 <HAL_TIM_PeriodElapsedCallback+0x16>
		GPIO_Led_Toggle();
 8000202:	f001 ff9f 	bl	8002144 <GPIO_Led_Toggle>
	}
}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40000400 	.word	0x40000400

08000214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <HAL_MspInit+0x44>)
 800021c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800021e:	4a0e      	ldr	r2, [pc, #56]	; (8000258 <HAL_MspInit+0x44>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	6613      	str	r3, [r2, #96]	; 0x60
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <HAL_MspInit+0x44>)
 8000228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <HAL_MspInit+0x44>)
 8000234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000236:	4a08      	ldr	r2, [pc, #32]	; (8000258 <HAL_MspInit+0x44>)
 8000238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800023c:	6593      	str	r3, [r2, #88]	; 0x58
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <HAL_MspInit+0x44>)
 8000240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000246:	603b      	str	r3, [r7, #0]
 8000248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40021000 	.word	0x40021000

0800025c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000260:	e7fe      	b.n	8000260 <NMI_Handler+0x4>

08000262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000266:	e7fe      	b.n	8000266 <HardFault_Handler+0x4>

08000268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800026c:	e7fe      	b.n	800026c <MemManage_Handler+0x4>

0800026e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000272:	e7fe      	b.n	8000272 <BusFault_Handler+0x4>

08000274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000278:	e7fe      	b.n	8000278 <UsageFault_Handler+0x4>

0800027a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr

08000288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002a8:	f000 f8a4 	bl	80003f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <TIM3_IRQHandler>:

/* USER CODE BEGIN 1 */
extern TIM_HandleTypeDef Tim3;

void TIM3_IRQHandler(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&Tim3);
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <TIM3_IRQHandler+0x10>)
 80002b6:	f001 fa47 	bl	8001748 <HAL_TIM_IRQHandler>
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000002c 	.word	0x2000002c

080002c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <SystemInit+0x20>)
 80002ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <SystemInit+0x20>)
 80002d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80002e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000320 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002ec:	f7ff ffea 	bl	80002c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	; (8000324 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	; (8000328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <LoopForever+0xe>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	; (8000334 <LoopForever+0x16>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000316:	f001 ffc1 	bl	800229c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800031a:	f7ff ff55 	bl	80001c8 <main>

0800031e <LoopForever>:

LoopForever:
    b LoopForever
 800031e:	e7fe      	b.n	800031e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000320:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800032c:	08002354 	.word	0x08002354
  ldr r2, =_sbss
 8000330:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000334:	200000e8 	.word	0x200000e8

08000338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC1_2_IRQHandler>
	...

0800033c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000342:	2300      	movs	r3, #0
 8000344:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <HAL_Init+0x3c>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <HAL_Init+0x3c>)
 800034c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000350:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000352:	2003      	movs	r0, #3
 8000354:	f000 f93e 	bl	80005d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000358:	2000      	movs	r0, #0
 800035a:	f000 f80f 	bl	800037c <HAL_InitTick>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d002      	beq.n	800036a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000364:	2301      	movs	r3, #1
 8000366:	71fb      	strb	r3, [r7, #7]
 8000368:	e001      	b.n	800036e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800036a:	f7ff ff53 	bl	8000214 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800036e:	79fb      	ldrb	r3, [r7, #7]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40022000 	.word	0x40022000

0800037c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000384:	2300      	movs	r3, #0
 8000386:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000388:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <HAL_InitTick+0x6c>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d023      	beq.n	80003d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <HAL_InitTick+0x70>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <HAL_InitTick+0x6c>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	4619      	mov	r1, r3
 800039a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800039e:	fbb3 f3f1 	udiv	r3, r3, r1
 80003a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 f949 	bl	800063e <HAL_SYSTICK_Config>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d10f      	bne.n	80003d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b0f      	cmp	r3, #15
 80003b6:	d809      	bhi.n	80003cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003b8:	2200      	movs	r2, #0
 80003ba:	6879      	ldr	r1, [r7, #4]
 80003bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003c0:	f000 f913 	bl	80005ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80003c4:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <HAL_InitTick+0x74>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6013      	str	r3, [r2, #0]
 80003ca:	e007      	b.n	80003dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80003cc:	2301      	movs	r3, #1
 80003ce:	73fb      	strb	r3, [r7, #15]
 80003d0:	e004      	b.n	80003dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80003d2:	2301      	movs	r3, #1
 80003d4:	73fb      	strb	r3, [r7, #15]
 80003d6:	e001      	b.n	80003dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80003d8:	2301      	movs	r3, #1
 80003da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000008 	.word	0x20000008
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000004 	.word	0x20000004

080003f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <HAL_IncTick+0x20>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_IncTick+0x24>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4413      	add	r3, r2
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_IncTick+0x24>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	20000008 	.word	0x20000008
 8000418:	20000028 	.word	0x20000028

0800041c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  return uwTick;
 8000420:	4b03      	ldr	r3, [pc, #12]	; (8000430 <HAL_GetTick+0x14>)
 8000422:	681b      	ldr	r3, [r3, #0]
}
 8000424:	4618      	mov	r0, r3
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000028 	.word	0x20000028

08000434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <__NVIC_SetPriorityGrouping+0x44>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000450:	4013      	ands	r3, r2
 8000452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800045c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000466:	4a04      	ldr	r2, [pc, #16]	; (8000478 <__NVIC_SetPriorityGrouping+0x44>)
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	60d3      	str	r3, [r2, #12]
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <__NVIC_GetPriorityGrouping+0x18>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	0a1b      	lsrs	r3, r3, #8
 8000486:	f003 0307 	and.w	r3, r3, #7
}
 800048a:	4618      	mov	r0, r3
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	e000ed00 	.word	0xe000ed00

08000498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	db0b      	blt.n	80004c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	f003 021f 	and.w	r2, r3, #31
 80004b0:	4907      	ldr	r1, [pc, #28]	; (80004d0 <__NVIC_EnableIRQ+0x38>)
 80004b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b6:	095b      	lsrs	r3, r3, #5
 80004b8:	2001      	movs	r0, #1
 80004ba:	fa00 f202 	lsl.w	r2, r0, r2
 80004be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000e100 	.word	0xe000e100

080004d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	6039      	str	r1, [r7, #0]
 80004de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	db0a      	blt.n	80004fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	490c      	ldr	r1, [pc, #48]	; (8000520 <__NVIC_SetPriority+0x4c>)
 80004ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f2:	0112      	lsls	r2, r2, #4
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	440b      	add	r3, r1
 80004f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004fc:	e00a      	b.n	8000514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4908      	ldr	r1, [pc, #32]	; (8000524 <__NVIC_SetPriority+0x50>)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	f003 030f 	and.w	r3, r3, #15
 800050a:	3b04      	subs	r3, #4
 800050c:	0112      	lsls	r2, r2, #4
 800050e:	b2d2      	uxtb	r2, r2
 8000510:	440b      	add	r3, r1
 8000512:	761a      	strb	r2, [r3, #24]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	e000e100 	.word	0xe000e100
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000528:	b480      	push	{r7}
 800052a:	b089      	sub	sp, #36	; 0x24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f003 0307 	and.w	r3, r3, #7
 800053a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	f1c3 0307 	rsb	r3, r3, #7
 8000542:	2b04      	cmp	r3, #4
 8000544:	bf28      	it	cs
 8000546:	2304      	movcs	r3, #4
 8000548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	3304      	adds	r3, #4
 800054e:	2b06      	cmp	r3, #6
 8000550:	d902      	bls.n	8000558 <NVIC_EncodePriority+0x30>
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	3b03      	subs	r3, #3
 8000556:	e000      	b.n	800055a <NVIC_EncodePriority+0x32>
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800055c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	43da      	mvns	r2, r3
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	401a      	ands	r2, r3
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	fa01 f303 	lsl.w	r3, r1, r3
 800057a:	43d9      	mvns	r1, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000580:	4313      	orrs	r3, r2
         );
}
 8000582:	4618      	mov	r0, r3
 8000584:	3724      	adds	r7, #36	; 0x24
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3b01      	subs	r3, #1
 800059c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005a0:	d301      	bcc.n	80005a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005a2:	2301      	movs	r3, #1
 80005a4:	e00f      	b.n	80005c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <SysTick_Config+0x40>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005ae:	210f      	movs	r1, #15
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005b4:	f7ff ff8e 	bl	80004d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <SysTick_Config+0x40>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <SysTick_Config+0x40>)
 80005c0:	2207      	movs	r2, #7
 80005c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	e000e010 	.word	0xe000e010

080005d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff ff29 	bl	8000434 <__NVIC_SetPriorityGrouping>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b086      	sub	sp, #24
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	4603      	mov	r3, r0
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	607a      	str	r2, [r7, #4]
 80005f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80005fc:	f7ff ff3e 	bl	800047c <__NVIC_GetPriorityGrouping>
 8000600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	68b9      	ldr	r1, [r7, #8]
 8000606:	6978      	ldr	r0, [r7, #20]
 8000608:	f7ff ff8e 	bl	8000528 <NVIC_EncodePriority>
 800060c:	4602      	mov	r2, r0
 800060e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff5d 	bl	80004d4 <__NVIC_SetPriority>
}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
 8000628:	4603      	mov	r3, r0
 800062a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800062c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff31 	bl	8000498 <__NVIC_EnableIRQ>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff ffa2 	bl	8000590 <SysTick_Config>
 800064c:	4603      	mov	r3, r0
}
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000658:	b480      	push	{r7}
 800065a:	b087      	sub	sp, #28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000666:	e17f      	b.n	8000968 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	2101      	movs	r1, #1
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	fa01 f303 	lsl.w	r3, r1, r3
 8000674:	4013      	ands	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2b00      	cmp	r3, #0
 800067c:	f000 8171 	beq.w	8000962 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	f003 0303 	and.w	r3, r3, #3
 8000688:	2b01      	cmp	r3, #1
 800068a:	d005      	beq.n	8000698 <HAL_GPIO_Init+0x40>
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	f003 0303 	and.w	r3, r3, #3
 8000694:	2b02      	cmp	r3, #2
 8000696:	d130      	bne.n	80006fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	2203      	movs	r2, #3
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	4013      	ands	r3, r2
 80006ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	68da      	ldr	r2, [r3, #12]
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	4313      	orrs	r3, r2
 80006c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	693a      	ldr	r2, [r7, #16]
 80006c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006ce:	2201      	movs	r2, #1
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	43db      	mvns	r3, r3
 80006d8:	693a      	ldr	r2, [r7, #16]
 80006da:	4013      	ands	r3, r2
 80006dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	091b      	lsrs	r3, r3, #4
 80006e4:	f003 0201 	and.w	r2, r3, #1
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	f003 0303 	and.w	r3, r3, #3
 8000702:	2b03      	cmp	r3, #3
 8000704:	d118      	bne.n	8000738 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800070c:	2201      	movs	r2, #1
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	43db      	mvns	r3, r3
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	4013      	ands	r3, r2
 800071a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	08db      	lsrs	r3, r3, #3
 8000722:	f003 0201 	and.w	r2, r3, #1
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	4313      	orrs	r3, r2
 8000730:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f003 0303 	and.w	r3, r3, #3
 8000740:	2b03      	cmp	r3, #3
 8000742:	d017      	beq.n	8000774 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	2203      	movs	r2, #3
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	43db      	mvns	r3, r3
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	4013      	ands	r3, r2
 800075a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	689a      	ldr	r2, [r3, #8]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	4313      	orrs	r3, r2
 800076c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f003 0303 	and.w	r3, r3, #3
 800077c:	2b02      	cmp	r3, #2
 800077e:	d123      	bne.n	80007c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	08da      	lsrs	r2, r3, #3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3208      	adds	r2, #8
 8000788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800078c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	220f      	movs	r2, #15
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	691a      	ldr	r2, [r3, #16]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	693a      	ldr	r2, [r7, #16]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	08da      	lsrs	r2, r3, #3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3208      	adds	r2, #8
 80007c2:	6939      	ldr	r1, [r7, #16]
 80007c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	2203      	movs	r2, #3
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	43db      	mvns	r3, r3
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4013      	ands	r3, r2
 80007de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f003 0203 	and.w	r2, r3, #3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000804:	2b00      	cmp	r3, #0
 8000806:	f000 80ac 	beq.w	8000962 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b5f      	ldr	r3, [pc, #380]	; (8000988 <HAL_GPIO_Init+0x330>)
 800080c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080e:	4a5e      	ldr	r2, [pc, #376]	; (8000988 <HAL_GPIO_Init+0x330>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6613      	str	r3, [r2, #96]	; 0x60
 8000816:	4b5c      	ldr	r3, [pc, #368]	; (8000988 <HAL_GPIO_Init+0x330>)
 8000818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000822:	4a5a      	ldr	r2, [pc, #360]	; (800098c <HAL_GPIO_Init+0x334>)
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	3302      	adds	r3, #2
 800082a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	f003 0303 	and.w	r3, r3, #3
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	220f      	movs	r2, #15
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	4013      	ands	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800084c:	d025      	beq.n	800089a <HAL_GPIO_Init+0x242>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a4f      	ldr	r2, [pc, #316]	; (8000990 <HAL_GPIO_Init+0x338>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d01f      	beq.n	8000896 <HAL_GPIO_Init+0x23e>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a4e      	ldr	r2, [pc, #312]	; (8000994 <HAL_GPIO_Init+0x33c>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d019      	beq.n	8000892 <HAL_GPIO_Init+0x23a>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a4d      	ldr	r2, [pc, #308]	; (8000998 <HAL_GPIO_Init+0x340>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d013      	beq.n	800088e <HAL_GPIO_Init+0x236>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a4c      	ldr	r2, [pc, #304]	; (800099c <HAL_GPIO_Init+0x344>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d00d      	beq.n	800088a <HAL_GPIO_Init+0x232>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a4b      	ldr	r2, [pc, #300]	; (80009a0 <HAL_GPIO_Init+0x348>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d007      	beq.n	8000886 <HAL_GPIO_Init+0x22e>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a4a      	ldr	r2, [pc, #296]	; (80009a4 <HAL_GPIO_Init+0x34c>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_GPIO_Init+0x22a>
 800087e:	2306      	movs	r3, #6
 8000880:	e00c      	b.n	800089c <HAL_GPIO_Init+0x244>
 8000882:	2307      	movs	r3, #7
 8000884:	e00a      	b.n	800089c <HAL_GPIO_Init+0x244>
 8000886:	2305      	movs	r3, #5
 8000888:	e008      	b.n	800089c <HAL_GPIO_Init+0x244>
 800088a:	2304      	movs	r3, #4
 800088c:	e006      	b.n	800089c <HAL_GPIO_Init+0x244>
 800088e:	2303      	movs	r3, #3
 8000890:	e004      	b.n	800089c <HAL_GPIO_Init+0x244>
 8000892:	2302      	movs	r3, #2
 8000894:	e002      	b.n	800089c <HAL_GPIO_Init+0x244>
 8000896:	2301      	movs	r3, #1
 8000898:	e000      	b.n	800089c <HAL_GPIO_Init+0x244>
 800089a:	2300      	movs	r3, #0
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	f002 0203 	and.w	r2, r2, #3
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	4093      	lsls	r3, r2
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008ac:	4937      	ldr	r1, [pc, #220]	; (800098c <HAL_GPIO_Init+0x334>)
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	089b      	lsrs	r3, r3, #2
 80008b2:	3302      	adds	r3, #2
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80008ba:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <HAL_GPIO_Init+0x350>)
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	43db      	mvns	r3, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d003      	beq.n	80008de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4313      	orrs	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80008de:	4a32      	ldr	r2, [pc, #200]	; (80009a8 <HAL_GPIO_Init+0x350>)
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80008e4:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <HAL_GPIO_Init+0x350>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	43db      	mvns	r3, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4013      	ands	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d003      	beq.n	8000908 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000908:	4a27      	ldr	r2, [pc, #156]	; (80009a8 <HAL_GPIO_Init+0x350>)
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800090e:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <HAL_GPIO_Init+0x350>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	43db      	mvns	r3, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4313      	orrs	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000932:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <HAL_GPIO_Init+0x350>)
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HAL_GPIO_Init+0x350>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	43db      	mvns	r3, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000950:	2b00      	cmp	r3, #0
 8000952:	d003      	beq.n	800095c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800095c:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <HAL_GPIO_Init+0x350>)
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa22 f303 	lsr.w	r3, r2, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	f47f ae78 	bne.w	8000668 <HAL_GPIO_Init+0x10>
  }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	371c      	adds	r7, #28
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000
 800098c:	40010000 	.word	0x40010000
 8000990:	48000400 	.word	0x48000400
 8000994:	48000800 	.word	0x48000800
 8000998:	48000c00 	.word	0x48000c00
 800099c:	48001000 	.word	0x48001000
 80009a0:	48001400 	.word	0x48001400
 80009a4:	48001800 	.word	0x48001800
 80009a8:	40010400 	.word	0x40010400

080009ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80009be:	887a      	ldrh	r2, [r7, #2]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4013      	ands	r3, r2
 80009c4:	041a      	lsls	r2, r3, #16
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	43d9      	mvns	r1, r3
 80009ca:	887b      	ldrh	r3, [r7, #2]
 80009cc:	400b      	ands	r3, r1
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	619a      	str	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40007000 	.word	0x40007000

080009fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e3ca      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a0e:	4b97      	ldr	r3, [pc, #604]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 030c 	and.w	r3, r3, #12
 8000a16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a18:	4b94      	ldr	r3, [pc, #592]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0310 	and.w	r3, r3, #16
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f000 80e4 	beq.w	8000bf8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d007      	beq.n	8000a46 <HAL_RCC_OscConfig+0x4a>
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	2b0c      	cmp	r3, #12
 8000a3a:	f040 808b 	bne.w	8000b54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	f040 8087 	bne.w	8000b54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a46:	4b89      	ldr	r3, [pc, #548]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d005      	beq.n	8000a5e <HAL_RCC_OscConfig+0x62>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e3a2      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a1a      	ldr	r2, [r3, #32]
 8000a62:	4b82      	ldr	r3, [pc, #520]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f003 0308 	and.w	r3, r3, #8
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d004      	beq.n	8000a78 <HAL_RCC_OscConfig+0x7c>
 8000a6e:	4b7f      	ldr	r3, [pc, #508]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a76:	e005      	b.n	8000a84 <HAL_RCC_OscConfig+0x88>
 8000a78:	4b7c      	ldr	r3, [pc, #496]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d223      	bcs.n	8000ad0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a1b      	ldr	r3, [r3, #32]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fd1d 	bl	80014cc <RCC_SetFlashLatencyFromMSIRange>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e383      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a9c:	4b73      	ldr	r3, [pc, #460]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a72      	ldr	r2, [pc, #456]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b70      	ldr	r3, [pc, #448]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a1b      	ldr	r3, [r3, #32]
 8000ab4:	496d      	ldr	r1, [pc, #436]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000aba:	4b6c      	ldr	r3, [pc, #432]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	4968      	ldr	r1, [pc, #416]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000aca:	4313      	orrs	r3, r2
 8000acc:	604b      	str	r3, [r1, #4]
 8000ace:	e025      	b.n	8000b1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ad0:	4b66      	ldr	r3, [pc, #408]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a65      	ldr	r2, [pc, #404]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b63      	ldr	r3, [pc, #396]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	4960      	ldr	r1, [pc, #384]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000aea:	4313      	orrs	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000aee:	4b5f      	ldr	r3, [pc, #380]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	495b      	ldr	r1, [pc, #364]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000afe:	4313      	orrs	r3, r2
 8000b00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d109      	bne.n	8000b1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fcdd 	bl	80014cc <RCC_SetFlashLatencyFromMSIRange>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e343      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000b1c:	f000 fc4a 	bl	80013b4 <HAL_RCC_GetSysClockFreq>
 8000b20:	4602      	mov	r2, r0
 8000b22:	4b52      	ldr	r3, [pc, #328]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	091b      	lsrs	r3, r3, #4
 8000b28:	f003 030f 	and.w	r3, r3, #15
 8000b2c:	4950      	ldr	r1, [pc, #320]	; (8000c70 <HAL_RCC_OscConfig+0x274>)
 8000b2e:	5ccb      	ldrb	r3, [r1, r3]
 8000b30:	f003 031f 	and.w	r3, r3, #31
 8000b34:	fa22 f303 	lsr.w	r3, r2, r3
 8000b38:	4a4e      	ldr	r2, [pc, #312]	; (8000c74 <HAL_RCC_OscConfig+0x278>)
 8000b3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000b3c:	4b4e      	ldr	r3, [pc, #312]	; (8000c78 <HAL_RCC_OscConfig+0x27c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fc1b 	bl	800037c <HAL_InitTick>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d052      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	e327      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d032      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000b5c:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a42      	ldr	r2, [pc, #264]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b68:	f7ff fc58 	bl	800041c <HAL_GetTick>
 8000b6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b6e:	e008      	b.n	8000b82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b70:	f7ff fc54 	bl	800041c <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d901      	bls.n	8000b82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e310      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b82:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f0      	beq.n	8000b70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	4931      	ldr	r1, [pc, #196]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bac:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	492c      	ldr	r1, [pc, #176]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	604b      	str	r3, [r1, #4]
 8000bc0:	e01a      	b.n	8000bf8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a29      	ldr	r2, [pc, #164]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000bc8:	f023 0301 	bic.w	r3, r3, #1
 8000bcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000bce:	f7ff fc25 	bl	800041c <HAL_GetTick>
 8000bd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000bd4:	e008      	b.n	8000be8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bd6:	f7ff fc21 	bl	800041c <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d901      	bls.n	8000be8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e2dd      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000be8:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f0      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x1da>
 8000bf4:	e000      	b.n	8000bf8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bf6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d074      	beq.n	8000cee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	d005      	beq.n	8000c16 <HAL_RCC_OscConfig+0x21a>
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	2b0c      	cmp	r3, #12
 8000c0e:	d10e      	bne.n	8000c2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d10b      	bne.n	8000c2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d064      	beq.n	8000cec <HAL_RCC_OscConfig+0x2f0>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d160      	bne.n	8000cec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e2ba      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c36:	d106      	bne.n	8000c46 <HAL_RCC_OscConfig+0x24a>
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	e026      	b.n	8000c94 <HAL_RCC_OscConfig+0x298>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c4e:	d115      	bne.n	8000c7c <HAL_RCC_OscConfig+0x280>
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a02      	ldr	r2, [pc, #8]	; (8000c6c <HAL_RCC_OscConfig+0x270>)
 8000c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	e014      	b.n	8000c94 <HAL_RCC_OscConfig+0x298>
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	0800230c 	.word	0x0800230c
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000004 	.word	0x20000004
 8000c7c:	4ba0      	ldr	r3, [pc, #640]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a9f      	ldr	r2, [pc, #636]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b9d      	ldr	r3, [pc, #628]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a9c      	ldr	r2, [pc, #624]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d013      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fbbe 	bl	800041c <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fbba 	bl	800041c <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e276      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cb6:	4b92      	ldr	r3, [pc, #584]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f0      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x2a8>
 8000cc2:	e014      	b.n	8000cee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fbaa 	bl	800041c <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ccc:	f7ff fba6 	bl	800041c <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b64      	cmp	r3, #100	; 0x64
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e262      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cde:	4b88      	ldr	r3, [pc, #544]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f0      	bne.n	8000ccc <HAL_RCC_OscConfig+0x2d0>
 8000cea:	e000      	b.n	8000cee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d060      	beq.n	8000dbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d005      	beq.n	8000d0c <HAL_RCC_OscConfig+0x310>
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	d119      	bne.n	8000d3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d116      	bne.n	8000d3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d0c:	4b7c      	ldr	r3, [pc, #496]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <HAL_RCC_OscConfig+0x328>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e23f      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d24:	4b76      	ldr	r3, [pc, #472]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	061b      	lsls	r3, r3, #24
 8000d32:	4973      	ldr	r1, [pc, #460]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000d34:	4313      	orrs	r3, r2
 8000d36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d38:	e040      	b.n	8000dbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d023      	beq.n	8000d8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d42:	4b6f      	ldr	r3, [pc, #444]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a6e      	ldr	r2, [pc, #440]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d4e:	f7ff fb65 	bl	800041c <HAL_GetTick>
 8000d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d54:	e008      	b.n	8000d68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d56:	f7ff fb61 	bl	800041c <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d901      	bls.n	8000d68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e21d      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d68:	4b65      	ldr	r3, [pc, #404]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f0      	beq.n	8000d56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d74:	4b62      	ldr	r3, [pc, #392]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	061b      	lsls	r3, r3, #24
 8000d82:	495f      	ldr	r1, [pc, #380]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000d84:	4313      	orrs	r3, r2
 8000d86:	604b      	str	r3, [r1, #4]
 8000d88:	e018      	b.n	8000dbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a5c      	ldr	r2, [pc, #368]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d96:	f7ff fb41 	bl	800041c <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9e:	f7ff fb3d 	bl	800041c <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e1f9      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000db0:	4b53      	ldr	r3, [pc, #332]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f0      	bne.n	8000d9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d03c      	beq.n	8000e42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d01c      	beq.n	8000e0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dd6:	4a4a      	ldr	r2, [pc, #296]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000de0:	f7ff fb1c 	bl	800041c <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de8:	f7ff fb18 	bl	800041c <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e1d4      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000dfa:	4b41      	ldr	r3, [pc, #260]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0ef      	beq.n	8000de8 <HAL_RCC_OscConfig+0x3ec>
 8000e08:	e01b      	b.n	8000e42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e10:	4a3b      	ldr	r2, [pc, #236]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e1a:	f7ff faff 	bl	800041c <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e22:	f7ff fafb 	bl	800041c <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e1b7      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e34:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1ef      	bne.n	8000e22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 80a6 	beq.w	8000f9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e50:	2300      	movs	r3, #0
 8000e52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10d      	bne.n	8000e7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	4a26      	ldr	r2, [pc, #152]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <HAL_RCC_OscConfig+0x508>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d118      	bne.n	8000eba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <HAL_RCC_OscConfig+0x508>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <HAL_RCC_OscConfig+0x508>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e94:	f7ff fac2 	bl	800041c <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9c:	f7ff fabe 	bl	800041c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e17a      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_RCC_OscConfig+0x508>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f0      	beq.n	8000e9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d108      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x4d8>
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ed2:	e029      	b.n	8000f28 <HAL_RCC_OscConfig+0x52c>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	d115      	bne.n	8000f08 <HAL_RCC_OscConfig+0x50c>
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ef2:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <HAL_RCC_OscConfig+0x504>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000efc:	e014      	b.n	8000f28 <HAL_RCC_OscConfig+0x52c>
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40007000 	.word	0x40007000
 8000f08:	4b9c      	ldr	r3, [pc, #624]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8000f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f0e:	4a9b      	ldr	r2, [pc, #620]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8000f10:	f023 0301 	bic.w	r3, r3, #1
 8000f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f18:	4b98      	ldr	r3, [pc, #608]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8000f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f1e:	4a97      	ldr	r2, [pc, #604]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8000f20:	f023 0304 	bic.w	r3, r3, #4
 8000f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d016      	beq.n	8000f5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f30:	f7ff fa74 	bl	800041c <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f36:	e00a      	b.n	8000f4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f38:	f7ff fa70 	bl	800041c <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e12a      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f4e:	4b8b      	ldr	r3, [pc, #556]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8000f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0ed      	beq.n	8000f38 <HAL_RCC_OscConfig+0x53c>
 8000f5c:	e015      	b.n	8000f8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fa5d 	bl	800041c <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f64:	e00a      	b.n	8000f7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f7ff fa59 	bl	800041c <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e113      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f7c:	4b7f      	ldr	r3, [pc, #508]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8000f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1ed      	bne.n	8000f66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f8a:	7ffb      	ldrb	r3, [r7, #31]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d105      	bne.n	8000f9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f90:	4b7a      	ldr	r3, [pc, #488]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8000f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f94:	4a79      	ldr	r2, [pc, #484]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8000f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80fe 	beq.w	80011a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	f040 80d0 	bne.w	8001150 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000fb0:	4b72      	ldr	r3, [pc, #456]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f003 0203 	and.w	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d130      	bne.n	8001026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d127      	bne.n	8001026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d11f      	bne.n	8001026 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000ff0:	2a07      	cmp	r2, #7
 8000ff2:	bf14      	ite	ne
 8000ff4:	2201      	movne	r2, #1
 8000ff6:	2200      	moveq	r2, #0
 8000ff8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d113      	bne.n	8001026 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001008:	085b      	lsrs	r3, r3, #1
 800100a:	3b01      	subs	r3, #1
 800100c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800100e:	429a      	cmp	r2, r3
 8001010:	d109      	bne.n	8001026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	085b      	lsrs	r3, r3, #1
 800101e:	3b01      	subs	r3, #1
 8001020:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001022:	429a      	cmp	r2, r3
 8001024:	d06e      	beq.n	8001104 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	2b0c      	cmp	r3, #12
 800102a:	d069      	beq.n	8001100 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800102c:	4b53      	ldr	r3, [pc, #332]	; (800117c <HAL_RCC_OscConfig+0x780>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d105      	bne.n	8001044 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001038:	4b50      	ldr	r3, [pc, #320]	; (800117c <HAL_RCC_OscConfig+0x780>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0ad      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001048:	4b4c      	ldr	r3, [pc, #304]	; (800117c <HAL_RCC_OscConfig+0x780>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a4b      	ldr	r2, [pc, #300]	; (800117c <HAL_RCC_OscConfig+0x780>)
 800104e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001052:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001054:	f7ff f9e2 	bl	800041c <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105c:	f7ff f9de 	bl	800041c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e09a      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800106e:	4b43      	ldr	r3, [pc, #268]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800107a:	4b40      	ldr	r3, [pc, #256]	; (800117c <HAL_RCC_OscConfig+0x780>)
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	4b40      	ldr	r3, [pc, #256]	; (8001180 <HAL_RCC_OscConfig+0x784>)
 8001080:	4013      	ands	r3, r2
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800108a:	3a01      	subs	r2, #1
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	4311      	orrs	r1, r2
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001094:	0212      	lsls	r2, r2, #8
 8001096:	4311      	orrs	r1, r2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800109c:	0852      	lsrs	r2, r2, #1
 800109e:	3a01      	subs	r2, #1
 80010a0:	0552      	lsls	r2, r2, #21
 80010a2:	4311      	orrs	r1, r2
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010a8:	0852      	lsrs	r2, r2, #1
 80010aa:	3a01      	subs	r2, #1
 80010ac:	0652      	lsls	r2, r2, #25
 80010ae:	4311      	orrs	r1, r2
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80010b4:	0912      	lsrs	r2, r2, #4
 80010b6:	0452      	lsls	r2, r2, #17
 80010b8:	430a      	orrs	r2, r1
 80010ba:	4930      	ldr	r1, [pc, #192]	; (800117c <HAL_RCC_OscConfig+0x780>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_RCC_OscConfig+0x780>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_RCC_OscConfig+0x780>)
 80010c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_RCC_OscConfig+0x780>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	4a2a      	ldr	r2, [pc, #168]	; (800117c <HAL_RCC_OscConfig+0x780>)
 80010d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80010d8:	f7ff f9a0 	bl	800041c <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e0:	f7ff f99c 	bl	800041c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e058      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <HAL_RCC_OscConfig+0x780>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010fe:	e050      	b.n	80011a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e04f      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d148      	bne.n	80011a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8001116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800111a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_RCC_OscConfig+0x780>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	4a16      	ldr	r2, [pc, #88]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8001122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001126:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001128:	f7ff f978 	bl	800041c <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001130:	f7ff f974 	bl	800041c <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e030      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x734>
 800114e:	e028      	b.n	80011a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2b0c      	cmp	r3, #12
 8001154:	d023      	beq.n	800119e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_RCC_OscConfig+0x780>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_RCC_OscConfig+0x780>)
 800115c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001162:	f7ff f95b 	bl	800041c <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001168:	e00c      	b.n	8001184 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116a:	f7ff f957 	bl	800041c <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d905      	bls.n	8001184 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e013      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
 800117c:	40021000 	.word	0x40021000
 8001180:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_RCC_OscConfig+0x7b0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1ec      	bne.n	800116a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_RCC_OscConfig+0x7b0>)
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	4905      	ldr	r1, [pc, #20]	; (80011ac <HAL_RCC_OscConfig+0x7b0>)
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_RCC_OscConfig+0x7b4>)
 8001198:	4013      	ands	r3, r2
 800119a:	60cb      	str	r3, [r1, #12]
 800119c:	e001      	b.n	80011a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	feeefffc 	.word	0xfeeefffc

080011b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0e7      	b.n	8001398 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011c8:	4b75      	ldr	r3, [pc, #468]	; (80013a0 <HAL_RCC_ClockConfig+0x1ec>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d910      	bls.n	80011f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d6:	4b72      	ldr	r3, [pc, #456]	; (80013a0 <HAL_RCC_ClockConfig+0x1ec>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 0207 	bic.w	r2, r3, #7
 80011de:	4970      	ldr	r1, [pc, #448]	; (80013a0 <HAL_RCC_ClockConfig+0x1ec>)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e6:	4b6e      	ldr	r3, [pc, #440]	; (80013a0 <HAL_RCC_ClockConfig+0x1ec>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d001      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e0cf      	b.n	8001398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d010      	beq.n	8001226 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	4b66      	ldr	r3, [pc, #408]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001210:	429a      	cmp	r2, r3
 8001212:	d908      	bls.n	8001226 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001214:	4b63      	ldr	r3, [pc, #396]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4960      	ldr	r1, [pc, #384]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001222:	4313      	orrs	r3, r2
 8001224:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d04c      	beq.n	80012cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d107      	bne.n	800124a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800123a:	4b5a      	ldr	r3, [pc, #360]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d121      	bne.n	800128a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e0a6      	b.n	8001398 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d107      	bne.n	8001262 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001252:	4b54      	ldr	r3, [pc, #336]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d115      	bne.n	800128a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e09a      	b.n	8001398 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800126a:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e08e      	b.n	8001398 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800127a:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e086      	b.n	8001398 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800128a:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f023 0203 	bic.w	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4943      	ldr	r1, [pc, #268]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001298:	4313      	orrs	r3, r2
 800129a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800129c:	f7ff f8be 	bl	800041c <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a2:	e00a      	b.n	80012ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a4:	f7ff f8ba 	bl	800041c <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e06e      	b.n	8001398 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 020c 	and.w	r2, r3, #12
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d1eb      	bne.n	80012a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d010      	beq.n	80012fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d208      	bcs.n	80012fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e8:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	492b      	ldr	r1, [pc, #172]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_RCC_ClockConfig+0x1ec>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d210      	bcs.n	800132a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_RCC_ClockConfig+0x1ec>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 0207 	bic.w	r2, r3, #7
 8001310:	4923      	ldr	r1, [pc, #140]	; (80013a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <HAL_RCC_ClockConfig+0x1ec>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d001      	beq.n	800132a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e036      	b.n	8001398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d008      	beq.n	8001348 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	4918      	ldr	r1, [pc, #96]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001344:	4313      	orrs	r3, r2
 8001346:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d009      	beq.n	8001368 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4910      	ldr	r1, [pc, #64]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001364:	4313      	orrs	r3, r2
 8001366:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001368:	f000 f824 	bl	80013b4 <HAL_RCC_GetSysClockFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	490b      	ldr	r1, [pc, #44]	; (80013a8 <HAL_RCC_ClockConfig+0x1f4>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	4a09      	ldr	r2, [pc, #36]	; (80013ac <HAL_RCC_ClockConfig+0x1f8>)
 8001386:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_RCC_ClockConfig+0x1fc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7fe fff5 	bl	800037c <HAL_InitTick>
 8001392:	4603      	mov	r3, r0
 8001394:	72fb      	strb	r3, [r7, #11]

  return status;
 8001396:	7afb      	ldrb	r3, [r7, #11]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40022000 	.word	0x40022000
 80013a4:	40021000 	.word	0x40021000
 80013a8:	0800230c 	.word	0x0800230c
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c2:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <HAL_RCC_GetSysClockFreq+0x108>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013cc:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <HAL_RCC_GetSysClockFreq+0x108>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_GetSysClockFreq+0x34>
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b0c      	cmp	r3, #12
 80013e0:	d121      	bne.n	8001426 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d11e      	bne.n	8001426 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80013e8:	4b34      	ldr	r3, [pc, #208]	; (80014bc <HAL_RCC_GetSysClockFreq+0x108>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d107      	bne.n	8001404 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80013f4:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_RCC_GetSysClockFreq+0x108>)
 80013f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e005      	b.n	8001410 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001404:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001410:	4a2b      	ldr	r2, [pc, #172]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10d      	bne.n	800143c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001424:	e00a      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d102      	bne.n	8001432 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800142c:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	e004      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	2b08      	cmp	r3, #8
 8001436:	d101      	bne.n	800143c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800143a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d134      	bne.n	80014ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d003      	beq.n	800145a <HAL_RCC_GetSysClockFreq+0xa6>
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d003      	beq.n	8001460 <HAL_RCC_GetSysClockFreq+0xac>
 8001458:	e005      	b.n	8001466 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800145c:	617b      	str	r3, [r7, #20]
      break;
 800145e:	e005      	b.n	800146c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001462:	617b      	str	r3, [r7, #20]
      break;
 8001464:	e002      	b.n	800146c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	617b      	str	r3, [r7, #20]
      break;
 800146a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_RCC_GetSysClockFreq+0x108>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	3301      	adds	r3, #1
 8001478:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_RCC_GetSysClockFreq+0x108>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	fb03 f202 	mul.w	r2, r3, r2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001490:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	0e5b      	lsrs	r3, r3, #25
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	3301      	adds	r3, #1
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80014ac:	69bb      	ldr	r3, [r7, #24]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	0800231c 	.word	0x0800231c
 80014c4:	00f42400 	.word	0x00f42400
 80014c8:	007a1200 	.word	0x007a1200

080014cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80014e4:	f7ff fa7c 	bl	80009e0 <HAL_PWREx_GetVoltageRange>
 80014e8:	6178      	str	r0, [r7, #20]
 80014ea:	e014      	b.n	8001516 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f0:	4a24      	ldr	r2, [pc, #144]	; (8001584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f6:	6593      	str	r3, [r2, #88]	; 0x58
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001504:	f7ff fa6c 	bl	80009e0 <HAL_PWREx_GetVoltageRange>
 8001508:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001514:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151c:	d10b      	bne.n	8001536 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b80      	cmp	r3, #128	; 0x80
 8001522:	d919      	bls.n	8001558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2ba0      	cmp	r3, #160	; 0xa0
 8001528:	d902      	bls.n	8001530 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800152a:	2302      	movs	r3, #2
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	e013      	b.n	8001558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001530:	2301      	movs	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	e010      	b.n	8001558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b80      	cmp	r3, #128	; 0x80
 800153a:	d902      	bls.n	8001542 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800153c:	2303      	movs	r3, #3
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	e00a      	b.n	8001558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b80      	cmp	r3, #128	; 0x80
 8001546:	d102      	bne.n	800154e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001548:	2302      	movs	r3, #2
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	e004      	b.n	8001558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b70      	cmp	r3, #112	; 0x70
 8001552:	d101      	bne.n	8001558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001554:	2301      	movs	r3, #1
 8001556:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 0207 	bic.w	r2, r3, #7
 8001560:	4909      	ldr	r1, [pc, #36]	; (8001588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	429a      	cmp	r2, r3
 8001574:	d001      	beq.n	800157a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	40022000 	.word	0x40022000

0800158c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e054      	b.n	8001648 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d111      	bne.n	80015ce <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fc60 	bl	8001e78 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a23      	ldr	r2, [pc, #140]	; (8001650 <HAL_TIM_Base_Init+0xc4>)
 80015c4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2202      	movs	r2, #2
 80015d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3304      	adds	r3, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	4610      	mov	r0, r2
 80015e2:	f000 fb15 	bl	8001c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	08001655 	.word	0x08001655

08001654 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d001      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e04f      	b.n	8001720 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a23      	ldr	r2, [pc, #140]	; (800172c <HAL_TIM_Base_Start_IT+0xc4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01d      	beq.n	80016de <HAL_TIM_Base_Start_IT+0x76>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016aa:	d018      	beq.n	80016de <HAL_TIM_Base_Start_IT+0x76>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <HAL_TIM_Base_Start_IT+0xc8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_TIM_Base_Start_IT+0x76>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <HAL_TIM_Base_Start_IT+0xcc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00e      	beq.n	80016de <HAL_TIM_Base_Start_IT+0x76>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a1c      	ldr	r2, [pc, #112]	; (8001738 <HAL_TIM_Base_Start_IT+0xd0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d009      	beq.n	80016de <HAL_TIM_Base_Start_IT+0x76>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_TIM_Base_Start_IT+0xd4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d004      	beq.n	80016de <HAL_TIM_Base_Start_IT+0x76>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	; (8001740 <HAL_TIM_Base_Start_IT+0xd8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d115      	bne.n	800170a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_TIM_Base_Start_IT+0xdc>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	d015      	beq.n	800171c <HAL_TIM_Base_Start_IT+0xb4>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f6:	d011      	beq.n	800171c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001708:	e008      	b.n	800171c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0201 	orr.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e000      	b.n	800171e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800171c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40000400 	.word	0x40000400
 8001734:	40000800 	.word	0x40000800
 8001738:	40000c00 	.word	0x40000c00
 800173c:	40013400 	.word	0x40013400
 8001740:	40014000 	.word	0x40014000
 8001744:	00010007 	.word	0x00010007

08001748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b02      	cmp	r3, #2
 800175c:	d128      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b02      	cmp	r3, #2
 800176a:	d121      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0202 	mvn.w	r2, #2
 8001774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
 8001794:	e009      	b.n	80017aa <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d128      	bne.n	8001810 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d121      	bne.n	8001810 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 0204 	mvn.w	r2, #4
 80017d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
 80017f4:	e009      	b.n	800180a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b08      	cmp	r3, #8
 800181c:	d128      	bne.n	8001870 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b08      	cmp	r3, #8
 800182a:	d121      	bne.n	8001870 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f06f 0208 	mvn.w	r2, #8
 8001834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2204      	movs	r2, #4
 800183a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4798      	blx	r3
 8001854:	e009      	b.n	800186a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	2b10      	cmp	r3, #16
 800187c:	d128      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b10      	cmp	r3, #16
 800188a:	d121      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0210 	mvn.w	r2, #16
 8001894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2208      	movs	r2, #8
 800189a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
 80018b4:	e009      	b.n	80018ca <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d110      	bne.n	8001900 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d109      	bne.n	8001900 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0201 	mvn.w	r2, #1
 80018f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190a:	2b80      	cmp	r3, #128	; 0x80
 800190c:	d110      	bne.n	8001930 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001918:	2b80      	cmp	r3, #128	; 0x80
 800191a:	d109      	bne.n	8001930 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800193e:	d110      	bne.n	8001962 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194a:	2b80      	cmp	r3, #128	; 0x80
 800194c:	d109      	bne.n	8001962 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800196c:	2b40      	cmp	r3, #64	; 0x40
 800196e:	d110      	bne.n	8001992 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d109      	bne.n	8001992 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	2b20      	cmp	r3, #32
 800199e:	d110      	bne.n	80019c2 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f003 0320 	and.w	r3, r3, #32
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	d109      	bne.n	80019c2 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f06f 0220 	mvn.w	r2, #32
 80019b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_ConfigClockSource+0x1c>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e0b6      	b.n	8001b54 <HAL_TIM_ConfigClockSource+0x18a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2202      	movs	r2, #2
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a04:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a10:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a22:	d03e      	beq.n	8001aa2 <HAL_TIM_ConfigClockSource+0xd8>
 8001a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a28:	f200 8087 	bhi.w	8001b3a <HAL_TIM_ConfigClockSource+0x170>
 8001a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a30:	f000 8086 	beq.w	8001b40 <HAL_TIM_ConfigClockSource+0x176>
 8001a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a38:	d87f      	bhi.n	8001b3a <HAL_TIM_ConfigClockSource+0x170>
 8001a3a:	2b70      	cmp	r3, #112	; 0x70
 8001a3c:	d01a      	beq.n	8001a74 <HAL_TIM_ConfigClockSource+0xaa>
 8001a3e:	2b70      	cmp	r3, #112	; 0x70
 8001a40:	d87b      	bhi.n	8001b3a <HAL_TIM_ConfigClockSource+0x170>
 8001a42:	2b60      	cmp	r3, #96	; 0x60
 8001a44:	d050      	beq.n	8001ae8 <HAL_TIM_ConfigClockSource+0x11e>
 8001a46:	2b60      	cmp	r3, #96	; 0x60
 8001a48:	d877      	bhi.n	8001b3a <HAL_TIM_ConfigClockSource+0x170>
 8001a4a:	2b50      	cmp	r3, #80	; 0x50
 8001a4c:	d03c      	beq.n	8001ac8 <HAL_TIM_ConfigClockSource+0xfe>
 8001a4e:	2b50      	cmp	r3, #80	; 0x50
 8001a50:	d873      	bhi.n	8001b3a <HAL_TIM_ConfigClockSource+0x170>
 8001a52:	2b40      	cmp	r3, #64	; 0x40
 8001a54:	d058      	beq.n	8001b08 <HAL_TIM_ConfigClockSource+0x13e>
 8001a56:	2b40      	cmp	r3, #64	; 0x40
 8001a58:	d86f      	bhi.n	8001b3a <HAL_TIM_ConfigClockSource+0x170>
 8001a5a:	2b30      	cmp	r3, #48	; 0x30
 8001a5c:	d064      	beq.n	8001b28 <HAL_TIM_ConfigClockSource+0x15e>
 8001a5e:	2b30      	cmp	r3, #48	; 0x30
 8001a60:	d86b      	bhi.n	8001b3a <HAL_TIM_ConfigClockSource+0x170>
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d060      	beq.n	8001b28 <HAL_TIM_ConfigClockSource+0x15e>
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	d867      	bhi.n	8001b3a <HAL_TIM_ConfigClockSource+0x170>
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d05c      	beq.n	8001b28 <HAL_TIM_ConfigClockSource+0x15e>
 8001a6e:	2b10      	cmp	r3, #16
 8001a70:	d05a      	beq.n	8001b28 <HAL_TIM_ConfigClockSource+0x15e>
 8001a72:	e062      	b.n	8001b3a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	6899      	ldr	r1, [r3, #8]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f000 f9d8 	bl	8001e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	609a      	str	r2, [r3, #8]
      break;
 8001aa0:	e04f      	b.n	8001b42 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6899      	ldr	r1, [r3, #8]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f000 f9c1 	bl	8001e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ac4:	609a      	str	r2, [r3, #8]
      break;
 8001ac6:	e03c      	b.n	8001b42 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f000 f935 	bl	8001d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2150      	movs	r1, #80	; 0x50
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f98e 	bl	8001e02 <TIM_ITRx_SetConfig>
      break;
 8001ae6:	e02c      	b.n	8001b42 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	461a      	mov	r2, r3
 8001af6:	f000 f954 	bl	8001da2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2160      	movs	r1, #96	; 0x60
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f97e 	bl	8001e02 <TIM_ITRx_SetConfig>
      break;
 8001b06:	e01c      	b.n	8001b42 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	461a      	mov	r2, r3
 8001b16:	f000 f915 	bl	8001d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2140      	movs	r1, #64	; 0x40
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f96e 	bl	8001e02 <TIM_ITRx_SetConfig>
      break;
 8001b26:	e00c      	b.n	8001b42 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f000 f965 	bl	8001e02 <TIM_ITRx_SetConfig>
      break;
 8001b38:	e003      	b.n	8001b42 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8001b3e:	e000      	b.n	8001b42 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001b40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <TIM_Base_SetConfig+0x114>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2e:	d00f      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3d      	ldr	r2, [pc, #244]	; (8001d28 <TIM_Base_SetConfig+0x118>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00b      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3c      	ldr	r2, [pc, #240]	; (8001d2c <TIM_Base_SetConfig+0x11c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3b      	ldr	r2, [pc, #236]	; (8001d30 <TIM_Base_SetConfig+0x120>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d003      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <TIM_Base_SetConfig+0x124>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d108      	bne.n	8001c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a2f      	ldr	r2, [pc, #188]	; (8001d24 <TIM_Base_SetConfig+0x114>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d01b      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a2c      	ldr	r2, [pc, #176]	; (8001d28 <TIM_Base_SetConfig+0x118>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d017      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <TIM_Base_SetConfig+0x11c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <TIM_Base_SetConfig+0x120>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00f      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <TIM_Base_SetConfig+0x124>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00b      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <TIM_Base_SetConfig+0x128>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d007      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a27      	ldr	r2, [pc, #156]	; (8001d3c <TIM_Base_SetConfig+0x12c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d003      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <TIM_Base_SetConfig+0x130>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d108      	bne.n	8001cbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <TIM_Base_SetConfig+0x114>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00f      	beq.n	8001d08 <TIM_Base_SetConfig+0xf8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <TIM_Base_SetConfig+0x124>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00b      	beq.n	8001d08 <TIM_Base_SetConfig+0xf8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <TIM_Base_SetConfig+0x128>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <TIM_Base_SetConfig+0xf8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <TIM_Base_SetConfig+0x12c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d003      	beq.n	8001d08 <TIM_Base_SetConfig+0xf8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <TIM_Base_SetConfig+0x130>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d103      	bne.n	8001d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	615a      	str	r2, [r3, #20]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40013400 	.word	0x40013400
 8001d38:	40014000 	.word	0x40014000
 8001d3c:	40014400 	.word	0x40014400
 8001d40:	40014800 	.word	0x40014800

08001d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	f023 0201 	bic.w	r2, r3, #1
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f023 030a 	bic.w	r3, r3, #10
 8001d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	621a      	str	r2, [r3, #32]
}
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b087      	sub	sp, #28
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	f023 0210 	bic.w	r2, r3, #16
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	031b      	lsls	r3, r3, #12
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	621a      	str	r2, [r3, #32]
}
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f043 0307 	orr.w	r3, r3, #7
 8001e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	609a      	str	r2, [r3, #8]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	021a      	lsls	r2, r3, #8
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	609a      	str	r2, [r3, #8]
}
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <TIM_ResetCallback+0x84>)
 8001e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <TIM_ResetCallback+0x88>)
 8001e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <TIM_ResetCallback+0x8c>)
 8001e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <TIM_ResetCallback+0x90>)
 8001e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <TIM_ResetCallback+0x94>)
 8001ea4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <TIM_ResetCallback+0x98>)
 8001eac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <TIM_ResetCallback+0x9c>)
 8001eb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <TIM_ResetCallback+0xa0>)
 8001ebc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a16      	ldr	r2, [pc, #88]	; (8001f1c <TIM_ResetCallback+0xa4>)
 8001ec4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <TIM_ResetCallback+0xa8>)
 8001ecc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <TIM_ResetCallback+0xac>)
 8001ed4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <TIM_ResetCallback+0xb0>)
 8001edc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <TIM_ResetCallback+0xb4>)
 8001ee4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <TIM_ResetCallback+0xb8>)
 8001eec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	080001f1 	.word	0x080001f1
 8001f00:	08001b5d 	.word	0x08001b5d
 8001f04:	08001bd5 	.word	0x08001bd5
 8001f08:	08001be9 	.word	0x08001be9
 8001f0c:	08001b85 	.word	0x08001b85
 8001f10:	08001b99 	.word	0x08001b99
 8001f14:	08001b71 	.word	0x08001b71
 8001f18:	08001bad 	.word	0x08001bad
 8001f1c:	08001bc1 	.word	0x08001bc1
 8001f20:	08001bfd 	.word	0x08001bfd
 8001f24:	08002045 	.word	0x08002045
 8001f28:	08002059 	.word	0x08002059
 8001f2c:	0800206d 	.word	0x0800206d
 8001f30:	08002081 	.word	0x08002081

08001f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e068      	b.n	800201e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2e      	ldr	r2, [pc, #184]	; (800202c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d004      	beq.n	8001f80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a2d      	ldr	r2, [pc, #180]	; (8002030 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d108      	bne.n	8001f92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001f86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01d      	beq.n	8001ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbe:	d018      	beq.n	8001ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00e      	beq.n	8001ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d009      	beq.n	8001ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a13      	ldr	r2, [pc, #76]	; (8002030 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d004      	beq.n	8001ff2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10c      	bne.n	800200c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	4313      	orrs	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40013400 	.word	0x40013400
 8002034:	40000400 	.word	0x40000400
 8002038:	40000800 	.word	0x40000800
 800203c:	40000c00 	.word	0x40000c00
 8002040:	40014000 	.word	0x40014000

08002044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <Global_GPIO_Init>:
 *      Author: felipe
 */
#include "GPIO.h"


void Global_GPIO_Init() {
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <Global_GPIO_Init+0x74>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <Global_GPIO_Init+0x74>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <Global_GPIO_Init+0x74>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <Global_GPIO_Init+0x74>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	4a14      	ldr	r2, [pc, #80]	; (8002108 <Global_GPIO_Init+0x74>)
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <Global_GPIO_Init+0x74>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <Global_GPIO_Init+0x74>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <Global_GPIO_Init+0x74>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <Global_GPIO_Init+0x74>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <Global_GPIO_Init+0x74>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <Global_GPIO_Init+0x74>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <Global_GPIO_Init+0x74>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <GPIO_Led_Init>:

//LED

void GPIO_Led_Init(){
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
	//PA5 -> LED -> GPIOA
	GPIO_InitTypeDef gpioInit = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]

	gpioInit.Pin = GPIO_PIN_5;
 8002120:	2320      	movs	r3, #32
 8002122:	607b      	str	r3, [r7, #4]
	gpioInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
	gpioInit.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA, &gpioInit);
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	4619      	mov	r1, r3
 8002134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002138:	f7fe fa8e 	bl	8000658 <HAL_GPIO_Init>
}
 800213c:	bf00      	nop
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <GPIO_Led_Toggle>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}


void GPIO_Led_Toggle(){
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002148:	2120      	movs	r1, #32
 800214a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214e:	f7fe fc2d 	bl	80009ac <HAL_GPIO_TogglePin>
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}

08002156 <SysConfigClock>:
 */

#include "SysConfig.h"


bool SysConfigClock(void){
 8002156:	b580      	push	{r7, lr}
 8002158:	b096      	sub	sp, #88	; 0x58
 800215a:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef oscInit = {0};  //Init oscilator struct
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2244      	movs	r2, #68	; 0x44
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f8bd 	bl	80022e4 <memset>
	RCC_ClkInitTypeDef clkInit = {0};  //Init Clock struct
 800216a:	463b      	mov	r3, r7
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //USes external crystal
 8002178:	2301      	movs	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
	oscInit.HSEState = RCC_HSE_ON;
 800217c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002180:	61bb      	str	r3, [r7, #24]
	oscInit.PLL.PLLState = RCC_PLL_ON;
 8002182:	2302      	movs	r3, #2
 8002184:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002186:	2303      	movs	r3, #3
 8002188:	643b      	str	r3, [r7, #64]	; 0x40
	oscInit.PLL.PLLM = 1;
 800218a:	2301      	movs	r3, #1
 800218c:	647b      	str	r3, [r7, #68]	; 0x44
	oscInit.PLL.PLLN = 20;
 800218e:	2314      	movs	r3, #20
 8002190:	64bb      	str	r3, [r7, #72]	; 0x48
	oscInit.PLL.PLLP = RCC_PLLP_DIV7;
 8002192:	2307      	movs	r3, #7
 8002194:	64fb      	str	r3, [r7, #76]	; 0x4c
	oscInit.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002196:	2302      	movs	r3, #2
 8002198:	653b      	str	r3, [r7, #80]	; 0x50
	oscInit.PLL.PLLR = RCC_PLLR_DIV2;
 800219a:	2302      	movs	r3, #2
 800219c:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_RCC_OscConfig(&oscInit) != HAL_OK) {
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fc2a 	bl	80009fc <HAL_RCC_OscConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <SysConfigClock+0x5c>
		return false;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e014      	b.n	80021dc <SysConfigClock+0x86>
	}

	clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK;
 80021b2:	230f      	movs	r3, #15
 80021b4:	603b      	str	r3, [r7, #0]
	clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b6:	2303      	movs	r3, #3
 80021b8:	607b      	str	r3, [r7, #4]
	clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
	clkInit.APB2CLKDivider = RCC_HCLK_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
	clkInit.APB1CLKDivider = RCC_HCLK_DIV1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]

	if (HAL_RCC_ClockConfig(&clkInit, FLASH_LATENCY_4) != HAL_OK ) {
 80021c6:	463b      	mov	r3, r7
 80021c8:	2104      	movs	r1, #4
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fff2 	bl	80011b4 <HAL_RCC_ClockConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <SysConfigClock+0x84>
		return false;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <SysConfigClock+0x86>
	}

	return true;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3758      	adds	r7, #88	; 0x58
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <Timer_Init>:
#include "Timer.h"


TIM_HandleTypeDef Tim3;

void Timer_Init(uint32_t period) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	// Enable Clock
	__HAL_RCC_TIM3_CLK_ENABLE();
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <Timer_Init+0xac>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	4a27      	ldr	r2, [pc, #156]	; (8002290 <Timer_Init+0xac>)
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	6593      	str	r3, [r2, #88]	; 0x58
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <Timer_Init+0xac>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]

	Tim3.Instance = TIM3;
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <Timer_Init+0xb0>)
 8002206:	4a24      	ldr	r2, [pc, #144]	; (8002298 <Timer_Init+0xb4>)
 8002208:	601a      	str	r2, [r3, #0]
	Tim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <Timer_Init+0xb0>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
	Tim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; //80 MHz
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <Timer_Init+0xb0>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
	Tim3.Init.Period = 8400 - 1;
 8002216:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <Timer_Init+0xb0>)
 8002218:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800221c:	60da      	str	r2, [r3, #12]
	Tim3.Init.Prescaler = period - 1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3b01      	subs	r3, #1
 8002222:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <Timer_Init+0xb0>)
 8002224:	6053      	str	r3, [r2, #4]
	Tim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <Timer_Init+0xb0>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
	Tim3.Init.RepetitionCounter = 0;
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <Timer_Init+0xb0>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]

	HAL_TIM_Base_Init(&Tim3);
 8002232:	4818      	ldr	r0, [pc, #96]	; (8002294 <Timer_Init+0xb0>)
 8002234:	f7ff f9aa 	bl	800158c <HAL_TIM_Base_Init>


	TIM_ClockConfigTypeDef TimClock = {0};
 8002238:	f107 0318 	add.w	r3, r7, #24
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
	TimClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224a:	61bb      	str	r3, [r7, #24]

	HAL_TIM_ConfigClockSource(&Tim3, &TimClock);
 800224c:	f107 0318 	add.w	r3, r7, #24
 8002250:	4619      	mov	r1, r3
 8002252:	4810      	ldr	r0, [pc, #64]	; (8002294 <Timer_Init+0xb0>)
 8002254:	f7ff fbb9 	bl	80019ca <HAL_TIM_ConfigClockSource>


	TIM_MasterConfigTypeDef TimMaster = {0};
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
	TimMaster.MasterSlaveMode = TIM_SLAVEMODE_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
	TimMaster.MasterOutputTrigger = TIM_TRGO_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&Tim3, &TimMaster);
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	4619      	mov	r1, r3
 8002272:	4808      	ldr	r0, [pc, #32]	; (8002294 <Timer_Init+0xb0>)
 8002274:	f7ff fe5e 	bl	8001f34 <HAL_TIMEx_MasterConfigSynchronization>

	HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2105      	movs	r1, #5
 800227c:	201d      	movs	r0, #29
 800227e:	f7fe f9b4 	bl	80005ea <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002282:	201d      	movs	r0, #29
 8002284:	f7fe f9cd 	bl	8000622 <HAL_NVIC_EnableIRQ>

}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	2000002c 	.word	0x2000002c
 8002298:	40000400 	.word	0x40000400

0800229c <__libc_init_array>:
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	4d0d      	ldr	r5, [pc, #52]	; (80022d4 <__libc_init_array+0x38>)
 80022a0:	4c0d      	ldr	r4, [pc, #52]	; (80022d8 <__libc_init_array+0x3c>)
 80022a2:	1b64      	subs	r4, r4, r5
 80022a4:	10a4      	asrs	r4, r4, #2
 80022a6:	2600      	movs	r6, #0
 80022a8:	42a6      	cmp	r6, r4
 80022aa:	d109      	bne.n	80022c0 <__libc_init_array+0x24>
 80022ac:	4d0b      	ldr	r5, [pc, #44]	; (80022dc <__libc_init_array+0x40>)
 80022ae:	4c0c      	ldr	r4, [pc, #48]	; (80022e0 <__libc_init_array+0x44>)
 80022b0:	f000 f820 	bl	80022f4 <_init>
 80022b4:	1b64      	subs	r4, r4, r5
 80022b6:	10a4      	asrs	r4, r4, #2
 80022b8:	2600      	movs	r6, #0
 80022ba:	42a6      	cmp	r6, r4
 80022bc:	d105      	bne.n	80022ca <__libc_init_array+0x2e>
 80022be:	bd70      	pop	{r4, r5, r6, pc}
 80022c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c4:	4798      	blx	r3
 80022c6:	3601      	adds	r6, #1
 80022c8:	e7ee      	b.n	80022a8 <__libc_init_array+0xc>
 80022ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ce:	4798      	blx	r3
 80022d0:	3601      	adds	r6, #1
 80022d2:	e7f2      	b.n	80022ba <__libc_init_array+0x1e>
 80022d4:	0800234c 	.word	0x0800234c
 80022d8:	0800234c 	.word	0x0800234c
 80022dc:	0800234c 	.word	0x0800234c
 80022e0:	08002350 	.word	0x08002350

080022e4 <memset>:
 80022e4:	4402      	add	r2, r0
 80022e6:	4603      	mov	r3, r0
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d100      	bne.n	80022ee <memset+0xa>
 80022ec:	4770      	bx	lr
 80022ee:	f803 1b01 	strb.w	r1, [r3], #1
 80022f2:	e7f9      	b.n	80022e8 <memset+0x4>

080022f4 <_init>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr

08002300 <_fini>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	bf00      	nop
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr
