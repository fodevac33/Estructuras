
Stop_Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001068  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080011f0  080011f0  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001268  08001268  00011270  2**0
                  CONTENTS
  4 .ARM          00000000  08001268  08001268  00011270  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001268  08001270  00011270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001268  08001268  00011268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800126c  0800126c  0001126c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00011270  2**0
                  CONTENTS
 10 .bss          0000004c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011270  2**0
                  CONTENTS, READONLY
 13 .debug_info   000020f1  00000000  00000000  000112a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008ef  00000000  00000000  00013391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000310  00000000  00000000  00013c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002b8  00000000  00000000  00013f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e782  00000000  00000000  00014248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ff6  00000000  00000000  000329ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa699  00000000  00000000  000359c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e0059  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b38  00000000  00000000  000e00ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080011d8 	.word	0x080011d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080011d8 	.word	0x080011d8

080001c8 <main>:
uint8_t* reverse(uint8_t *buffer, uint32_t i, uint32_t j);*/
extern char *	utoa (unsigned, char *, int);
void process_string(uint8_t *buffer);
extern int	abs (int);
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
	LL_Init1msTick(4000000);
 80001ce:	483d      	ldr	r0, [pc, #244]	; (80002c4 <main+0xfc>)
 80001d0:	f000 ff62 	bl	8001098 <LL_Init1msTick>

	Sx_Init();
 80001d4:	f000 fd44 	bl	8000c60 <Sx_Init>
	Dx_Init();
 80001d8:	f000 fd90 	bl	8000cfc <Dx_Init>
	Display_Init();
 80001dc:	f000 fdee 	bl	8000dbc <Display_Init>

	Keypad_Init();
 80001e0:	f000 fb0c 	bl	80007fc <Keypad_Init>

	uint8_t msg[5]="____";
 80001e4:	4a38      	ldr	r2, [pc, #224]	; (80002c8 <main+0x100>)
 80001e6:	f107 0308 	add.w	r3, r7, #8
 80001ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001ee:	6018      	str	r0, [r3, #0]
 80001f0:	3304      	adds	r3, #4
 80001f2:	7019      	strb	r1, [r3, #0]
	uint8_t lap_update =0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	75fb      	strb	r3, [r7, #23]
	uint32_t time = 0,lap_time;
 80001f8:	2300      	movs	r3, #0
 80001fa:	607b      	str	r3, [r7, #4]
	uint8_t flags=0;
 80001fc:	2300      	movs	r3, #0
 80001fe:	70fb      	strb	r3, [r7, #3]
	/* Loop forever */
	for(;;){
		FSM_D4_Blink();
 8000200:	f000 fcfc 	bl	8000bfc <FSM_D4_Blink>

		/*S1_Scan() ? D1_On():D1_Off();
		S2_Scan() ? D2_On():D2_Off();
		S3_Scan() ? D3_On():D3_Off();*/
		Sx_Flags_Update(&flags);
 8000204:	1cfb      	adds	r3, r7, #3
 8000206:	4618      	mov	r0, r3
 8000208:	f000 f860 	bl	80002cc <Sx_Flags_Update>
		uint8_t input = Keypad_Scan();
 800020c:	f000 fb5e 	bl	80008cc <Keypad_Scan>
 8000210:	4603      	mov	r3, r0
 8000212:	73fb      	strb	r3, [r7, #15]

		msg[3] = (input == 0) ? '_' :  input;
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <main+0x56>
 800021a:	7bfb      	ldrb	r3, [r7, #15]
 800021c:	e000      	b.n	8000220 <main+0x58>
 800021e:	235f      	movs	r3, #95	; 0x5f
 8000220:	72fb      	strb	r3, [r7, #11]

		FSM_Stop_Watch(&flags);
 8000222:	1cfb      	adds	r3, r7, #3
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f91d 	bl	8000464 <FSM_Stop_Watch>

		if (flags & SW_INIT){
 800022a:	78fb      	ldrb	r3, [r7, #3]
 800022c:	f003 0308 	and.w	r3, r3, #8
 8000230:	2b00      	cmp	r3, #0
 8000232:	d006      	beq.n	8000242 <main+0x7a>
			flags &= ~SW_INIT;
 8000234:	78fb      	ldrb	r3, [r7, #3]
 8000236:	f023 0308 	bic.w	r3, r3, #8
 800023a:	b2db      	uxtb	r3, r3
 800023c:	70fb      	strb	r3, [r7, #3]
			time = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
		}
		if (flags & SW_COUNT){
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	f003 0310 	and.w	r3, r3, #16
 8000248:	2b00      	cmp	r3, #0
 800024a:	d003      	beq.n	8000254 <main+0x8c>
			FSM_Increase_every_10ms(&time);
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f000 f8ec 	bl	800042c <FSM_Increase_every_10ms>
		}

		if (flags & SW_LAP){
 8000254:	78fb      	ldrb	r3, [r7, #3]
 8000256:	f003 0320 	and.w	r3, r3, #32
 800025a:	2b00      	cmp	r3, #0
 800025c:	d00e      	beq.n	800027c <main+0xb4>
			if (lap_update==0){
 800025e:	7dfb      	ldrb	r3, [r7, #23]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d103      	bne.n	800026c <main+0xa4>
				lap_time = time;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	613b      	str	r3, [r7, #16]
				lap_update = 1;
 8000268:	2301      	movs	r3, #1
 800026a:	75fb      	strb	r3, [r7, #23]
			}
			utoa((unsigned) lap_time, (char *) msg, 10);
 800026c:	f107 0308 	add.w	r3, r7, #8
 8000270:	220a      	movs	r2, #10
 8000272:	4619      	mov	r1, r3
 8000274:	6938      	ldr	r0, [r7, #16]
 8000276:	f000 ffad 	bl	80011d4 <utoa>
 800027a:	e008      	b.n	800028e <main+0xc6>
		}else{
			lap_update=0;
 800027c:	2300      	movs	r3, #0
 800027e:	75fb      	strb	r3, [r7, #23]
			utoa((unsigned) time, (char *) msg, 10);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f107 0108 	add.w	r1, r7, #8
 8000286:	220a      	movs	r2, #10
 8000288:	4618      	mov	r0, r3
 800028a:	f000 ffa3 	bl	80011d4 <utoa>
		}

		if (flags & SW_LAP){
 800028e:	78fb      	ldrb	r3, [r7, #3]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	2b00      	cmp	r3, #0
 8000296:	d006      	beq.n	80002a6 <main+0xde>
			flags &= ~SW_LAP;
 8000298:	78fb      	ldrb	r3, [r7, #3]
 800029a:	f023 0320 	bic.w	r3, r3, #32
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	70fb      	strb	r3, [r7, #3]
			lap_time = time;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	613b      	str	r3, [r7, #16]
		}

		process_string(msg);
 80002a6:	f107 0308 	add.w	r3, r7, #8
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f9a4 	bl	80005f8 <process_string>

		Dx_Update(flags);
 80002b0:	78fb      	ldrb	r3, [r7, #3]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f892 	bl	80003dc <Dx_Update>

		FSM_Write_D4(msg);
 80002b8:	f107 0308 	add.w	r3, r7, #8
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fdaf 	bl	8000e20 <FSM_Write_D4>
	for(;;){
 80002c2:	e79d      	b.n	8000200 <main+0x38>
 80002c4:	003d0900 	.word	0x003d0900
 80002c8:	080011f0 	.word	0x080011f0

080002cc <Sx_Flags_Update>:
	}
}



void Sx_Flags_Update(uint8_t *sx_flags){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	static uint32_t last_tick = 0;
	uint32_t current_tick;
	static uint8_t s1_state = 0,s2_state = 0,s3_state = 0;


	current_tick = Get_Tick();
 80002d4:	f000 feba 	bl	800104c <Get_Tick>
 80002d8:	60f8      	str	r0, [r7, #12]
	if (current_tick-last_tick >= 10){
 80002da:	4b3c      	ldr	r3, [pc, #240]	; (80003cc <Sx_Flags_Update+0x100>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	68fa      	ldr	r2, [r7, #12]
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	2b09      	cmp	r3, #9
 80002e4:	d968      	bls.n	80003b8 <Sx_Flags_Update+0xec>
		last_tick = current_tick;
 80002e6:	4a39      	ldr	r2, [pc, #228]	; (80003cc <Sx_Flags_Update+0x100>)
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	6013      	str	r3, [r2, #0]


		switch(s1_state){
 80002ec:	4b38      	ldr	r3, [pc, #224]	; (80003d0 <Sx_Flags_Update+0x104>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d002      	beq.n	80002fa <Sx_Flags_Update+0x2e>
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d009      	beq.n	800030c <Sx_Flags_Update+0x40>
 80002f8:	e01b      	b.n	8000332 <Sx_Flags_Update+0x66>
		case 0:
			if (S1_Scan())
 80002fa:	f000 fcd1 	bl	8000ca0 <S1_Scan>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d013      	beq.n	800032c <Sx_Flags_Update+0x60>
				s1_state = 1;
 8000304:	4b32      	ldr	r3, [pc, #200]	; (80003d0 <Sx_Flags_Update+0x104>)
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]

			break;
 800030a:	e00f      	b.n	800032c <Sx_Flags_Update+0x60>
		case 1:
			if (!S1_Scan()){
 800030c:	f000 fcc8 	bl	8000ca0 <S1_Scan>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d10c      	bne.n	8000330 <Sx_Flags_Update+0x64>
				s1_state = 0;
 8000316:	4b2e      	ldr	r3, [pc, #184]	; (80003d0 <Sx_Flags_Update+0x104>)
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]
				*sx_flags ^= S1_FLAG;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	f083 0301 	eor.w	r3, r3, #1
 8000324:	b2da      	uxtb	r2, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	701a      	strb	r2, [r3, #0]
			}
			break;
 800032a:	e001      	b.n	8000330 <Sx_Flags_Update+0x64>
			break;
 800032c:	bf00      	nop
 800032e:	e000      	b.n	8000332 <Sx_Flags_Update+0x66>
			break;
 8000330:	bf00      	nop
		}

		switch(s2_state){
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <Sx_Flags_Update+0x108>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d002      	beq.n	8000340 <Sx_Flags_Update+0x74>
 800033a:	2b01      	cmp	r3, #1
 800033c:	d009      	beq.n	8000352 <Sx_Flags_Update+0x86>
 800033e:	e01b      	b.n	8000378 <Sx_Flags_Update+0xac>
		case 0:
			if (S2_Scan())
 8000340:	f000 fcbd 	bl	8000cbe <S2_Scan>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d013      	beq.n	8000372 <Sx_Flags_Update+0xa6>
				s2_state = 1;
 800034a:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <Sx_Flags_Update+0x108>)
 800034c:	2201      	movs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]

			break;
 8000350:	e00f      	b.n	8000372 <Sx_Flags_Update+0xa6>
		case 1:
			if (!S2_Scan()){
 8000352:	f000 fcb4 	bl	8000cbe <S2_Scan>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d10c      	bne.n	8000376 <Sx_Flags_Update+0xaa>
				s2_state = 0;
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <Sx_Flags_Update+0x108>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
				*sx_flags ^= S2_FLAG;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	f083 0302 	eor.w	r3, r3, #2
 800036a:	b2da      	uxtb	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000370:	e001      	b.n	8000376 <Sx_Flags_Update+0xaa>
			break;
 8000372:	bf00      	nop
 8000374:	e000      	b.n	8000378 <Sx_Flags_Update+0xac>
			break;
 8000376:	bf00      	nop
		}
		switch(s3_state){
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <Sx_Flags_Update+0x10c>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d002      	beq.n	8000386 <Sx_Flags_Update+0xba>
 8000380:	2b01      	cmp	r3, #1
 8000382:	d009      	beq.n	8000398 <Sx_Flags_Update+0xcc>
			}
			break;
		}

	}
}
 8000384:	e01d      	b.n	80003c2 <Sx_Flags_Update+0xf6>
			if (S3_Scan())
 8000386:	f000 fca9 	bl	8000cdc <S3_Scan>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d015      	beq.n	80003bc <Sx_Flags_Update+0xf0>
				s3_state = 1;
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <Sx_Flags_Update+0x10c>)
 8000392:	2201      	movs	r2, #1
 8000394:	701a      	strb	r2, [r3, #0]
			break;
 8000396:	e011      	b.n	80003bc <Sx_Flags_Update+0xf0>
			if (!S3_Scan()){
 8000398:	f000 fca0 	bl	8000cdc <S3_Scan>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d10e      	bne.n	80003c0 <Sx_Flags_Update+0xf4>
				s3_state = 0;
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <Sx_Flags_Update+0x10c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
				*sx_flags ^= S3_FLAG;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	f083 0304 	eor.w	r3, r3, #4
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	701a      	strb	r2, [r3, #0]
			break;
 80003b6:	e003      	b.n	80003c0 <Sx_Flags_Update+0xf4>
	}
 80003b8:	bf00      	nop
 80003ba:	e002      	b.n	80003c2 <Sx_Flags_Update+0xf6>
			break;
 80003bc:	bf00      	nop
 80003be:	e000      	b.n	80003c2 <Sx_Flags_Update+0xf6>
			break;
 80003c0:	bf00      	nop
}
 80003c2:	bf00      	nop
 80003c4:	3710      	adds	r7, #16
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000001c 	.word	0x2000001c
 80003d0:	20000020 	.word	0x20000020
 80003d4:	20000021 	.word	0x20000021
 80003d8:	20000022 	.word	0x20000022

080003dc <Dx_Update>:

void Dx_Update(uint8_t flags){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
	(flags & 1) ? D1_On() : D1_Off();
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d002      	beq.n	80003f6 <Dx_Update+0x1a>
 80003f0:	f000 fcae 	bl	8000d50 <D1_On>
 80003f4:	e001      	b.n	80003fa <Dx_Update+0x1e>
 80003f6:	f000 fcc6 	bl	8000d86 <D1_Off>
	(flags & (1<<1)) ? D2_On() : D2_Off();
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	f003 0302 	and.w	r3, r3, #2
 8000400:	2b00      	cmp	r3, #0
 8000402:	d002      	beq.n	800040a <Dx_Update+0x2e>
 8000404:	f000 fcad 	bl	8000d62 <D2_On>
 8000408:	e001      	b.n	800040e <Dx_Update+0x32>
 800040a:	f000 fcc5 	bl	8000d98 <D2_Off>
	(flags & (1<<2)) ? D3_On() : D3_Off();
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	2b00      	cmp	r3, #0
 8000416:	d002      	beq.n	800041e <Dx_Update+0x42>
 8000418:	f000 fcac 	bl	8000d74 <D3_On>
}
 800041c:	e001      	b.n	8000422 <Dx_Update+0x46>
	(flags & (1<<2)) ? D3_On() : D3_Off();
 800041e:	f000 fcc4 	bl	8000daa <D3_Off>
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <FSM_Increase_every_10ms>:
void FSM_Increase_every_10ms(uint32_t *time_10ms){
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	static uint32_t last_tick = 0;
	uint32_t current_tick;

	current_tick = Get_Tick();
 8000434:	f000 fe0a 	bl	800104c <Get_Tick>
 8000438:	60f8      	str	r0, [r7, #12]
	if (current_tick-last_tick >= 10){
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <FSM_Increase_every_10ms+0x34>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	2b09      	cmp	r3, #9
 8000444:	d907      	bls.n	8000456 <FSM_Increase_every_10ms+0x2a>
		last_tick = current_tick;
 8000446:	4a06      	ldr	r2, [pc, #24]	; (8000460 <FSM_Increase_every_10ms+0x34>)
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	6013      	str	r3, [r2, #0]
		*time_10ms += 1;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	1c5a      	adds	r2, r3, #1
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	601a      	str	r2, [r3, #0]
	}
}
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000024 	.word	0x20000024

08000464 <FSM_Stop_Watch>:

enum sw_state_t {INIT,RUN,PAUSE,LAP};
void FSM_Stop_Watch(uint8_t *flags){
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	static uint32_t last_tick = 0;
	uint32_t current_tick;
	static enum sw_state_t sw_state = INIT;


	current_tick = Get_Tick();
 800046c:	f000 fdee 	bl	800104c <Get_Tick>
 8000470:	60f8      	str	r0, [r7, #12]
	if (current_tick-last_tick >= 100){
 8000472:	4b5f      	ldr	r3, [pc, #380]	; (80005f0 <FSM_Stop_Watch+0x18c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	2b63      	cmp	r3, #99	; 0x63
 800047c:	f240 80aa 	bls.w	80005d4 <FSM_Stop_Watch+0x170>
		last_tick = current_tick;
 8000480:	4a5b      	ldr	r2, [pc, #364]	; (80005f0 <FSM_Stop_Watch+0x18c>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6013      	str	r3, [r2, #0]

		switch(sw_state){
 8000486:	4b5b      	ldr	r3, [pc, #364]	; (80005f4 <FSM_Stop_Watch+0x190>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b03      	cmp	r3, #3
 800048c:	f200 80ab 	bhi.w	80005e6 <FSM_Stop_Watch+0x182>
 8000490:	a201      	add	r2, pc, #4	; (adr r2, 8000498 <FSM_Stop_Watch+0x34>)
 8000492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000496:	bf00      	nop
 8000498:	080004a9 	.word	0x080004a9
 800049c:	080004db 	.word	0x080004db
 80004a0:	08000539 	.word	0x08000539
 80004a4:	080005a5 	.word	0x080005a5
		case INIT:
			if (*flags & S1_FLAG){
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	f000 8091 	beq.w	80005d8 <FSM_Stop_Watch+0x174>
				*flags ^= S1_FLAG;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	f083 0301 	eor.w	r3, r3, #1
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	701a      	strb	r2, [r3, #0]
				sw_state = RUN;
 80004c4:	4b4b      	ldr	r3, [pc, #300]	; (80005f4 <FSM_Stop_Watch+0x190>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
				*flags |= SW_COUNT;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	f043 0310 	orr.w	r3, r3, #16
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80004d8:	e07e      	b.n	80005d8 <FSM_Stop_Watch+0x174>
		case RUN:
			if (*flags & S2_FLAG){
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	f003 0302 	and.w	r3, r3, #2
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d010      	beq.n	8000508 <FSM_Stop_Watch+0xa4>
				*flags ^= S2_FLAG;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	f083 0302 	eor.w	r3, r3, #2
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	701a      	strb	r2, [r3, #0]
				sw_state = PAUSE;
 80004f4:	4b3f      	ldr	r3, [pc, #252]	; (80005f4 <FSM_Stop_Watch+0x190>)
 80004f6:	2202      	movs	r2, #2
 80004f8:	701a      	strb	r2, [r3, #0]
				*flags &= ~SW_COUNT;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	f023 0310 	bic.w	r3, r3, #16
 8000502:	b2da      	uxtb	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	701a      	strb	r2, [r3, #0]
			}
			if (*flags & S3_FLAG){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	2b00      	cmp	r3, #0
 8000512:	d063      	beq.n	80005dc <FSM_Stop_Watch+0x178>
				*flags ^= S3_FLAG;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	f083 0304 	eor.w	r3, r3, #4
 800051c:	b2da      	uxtb	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	701a      	strb	r2, [r3, #0]
				sw_state = LAP;
 8000522:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <FSM_Stop_Watch+0x190>)
 8000524:	2203      	movs	r2, #3
 8000526:	701a      	strb	r2, [r3, #0]
				*flags |= SW_LAP;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	f043 0320 	orr.w	r3, r3, #32
 8000530:	b2da      	uxtb	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000536:	e051      	b.n	80005dc <FSM_Stop_Watch+0x178>

		case PAUSE:
			if (*flags & S1_FLAG){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	2b00      	cmp	r3, #0
 8000542:	d010      	beq.n	8000566 <FSM_Stop_Watch+0x102>
				*flags ^= S1_FLAG;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	f083 0301 	eor.w	r3, r3, #1
 800054c:	b2da      	uxtb	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	701a      	strb	r2, [r3, #0]
				sw_state = RUN;
 8000552:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <FSM_Stop_Watch+0x190>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
				*flags |= SW_COUNT;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0310 	orr.w	r3, r3, #16
 8000560:	b2da      	uxtb	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	701a      	strb	r2, [r3, #0]
			}
			if (*flags & S2_FLAG){
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b00      	cmp	r3, #0
 8000570:	d036      	beq.n	80005e0 <FSM_Stop_Watch+0x17c>
				*flags ^= S2_FLAG;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	f083 0302 	eor.w	r3, r3, #2
 800057a:	b2da      	uxtb	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	701a      	strb	r2, [r3, #0]
				sw_state = INIT;
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <FSM_Stop_Watch+0x190>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
				*flags &= ~SW_COUNT;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	f023 0310 	bic.w	r3, r3, #16
 800058e:	b2da      	uxtb	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	701a      	strb	r2, [r3, #0]
				*flags |= SW_INIT;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	b2da      	uxtb	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80005a2:	e01d      	b.n	80005e0 <FSM_Stop_Watch+0x17c>
		case LAP:
					if (*flags & S1_FLAG){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d019      	beq.n	80005e4 <FSM_Stop_Watch+0x180>
						*flags ^= S1_FLAG;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f083 0301 	eor.w	r3, r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	701a      	strb	r2, [r3, #0]
						sw_state = RUN;
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <FSM_Stop_Watch+0x190>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
						*flags &= ~SW_LAP;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f023 0320 	bic.w	r3, r3, #32
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	701a      	strb	r2, [r3, #0]
					}
					break;
 80005d2:	e007      	b.n	80005e4 <FSM_Stop_Watch+0x180>
		}
	}
 80005d4:	bf00      	nop
 80005d6:	e006      	b.n	80005e6 <FSM_Stop_Watch+0x182>
			break;
 80005d8:	bf00      	nop
 80005da:	e004      	b.n	80005e6 <FSM_Stop_Watch+0x182>
			break;
 80005dc:	bf00      	nop
 80005de:	e002      	b.n	80005e6 <FSM_Stop_Watch+0x182>
			break;
 80005e0:	bf00      	nop
 80005e2:	e000      	b.n	80005e6 <FSM_Stop_Watch+0x182>
					break;
 80005e4:	bf00      	nop
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	2000002c 	.word	0x2000002c

080005f8 <process_string>:
	}

	return buffer;
}*/

void process_string(uint8_t *buffer){
 80005f8:	b480      	push	{r7}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	75fb      	strb	r3, [r7, #23]
	while (i<4){
 8000604:	e008      	b.n	8000618 <process_string+0x20>
		if (buffer[i] == '\0'){
 8000606:	7dfb      	ldrb	r3, [r7, #23]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <process_string+0x28>
			break;
		}
		i++;
 8000612:	7dfb      	ldrb	r3, [r7, #23]
 8000614:	3301      	adds	r3, #1
 8000616:	75fb      	strb	r3, [r7, #23]
	while (i<4){
 8000618:	7dfb      	ldrb	r3, [r7, #23]
 800061a:	2b03      	cmp	r3, #3
 800061c:	d9f3      	bls.n	8000606 <process_string+0xe>
 800061e:	e000      	b.n	8000622 <process_string+0x2a>
			break;
 8000620:	bf00      	nop
	}
	if (i<4){
 8000622:	7dfb      	ldrb	r3, [r7, #23]
 8000624:	2b03      	cmp	r3, #3
 8000626:	d828      	bhi.n	800067a <process_string+0x82>
		for (int j=0;j<=i;j++){
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	e010      	b.n	8000650 <process_string+0x58>
			buffer[4-j]=buffer[i-j];
 800062e:	7dfa      	ldrb	r2, [r7, #23]
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	461a      	mov	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	441a      	add	r2, r3
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	f1c3 0304 	rsb	r3, r3, #4
 8000640:	4619      	mov	r1, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	440b      	add	r3, r1
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	701a      	strb	r2, [r3, #0]
		for (int j=0;j<=i;j++){
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	3301      	adds	r3, #1
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	7dfb      	ldrb	r3, [r7, #23]
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	429a      	cmp	r2, r3
 8000656:	ddea      	ble.n	800062e <process_string+0x36>
		}
		for (int j=0;j<4-i;j++){
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	e007      	b.n	800066e <process_string+0x76>
			buffer[j]='=';
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	223d      	movs	r2, #61	; 0x3d
 8000666:	701a      	strb	r2, [r3, #0]
		for (int j=0;j<4-i;j++){
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	3301      	adds	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	7dfb      	ldrb	r3, [r7, #23]
 8000670:	f1c3 0304 	rsb	r3, r3, #4
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	429a      	cmp	r2, r3
 8000678:	dbf1      	blt.n	800065e <process_string+0x66>
		}
	}

}
 800067a:	bf00      	nop
 800067c:	371c      	adds	r7, #28
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
	...

08000688 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000694:	4907      	ldr	r1, [pc, #28]	; (80006b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4313      	orrs	r3, r2
 800069a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800069e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4013      	ands	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000

080006b8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b08b      	sub	sp, #44	; 0x2c
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	fa93 f3a3 	rbit	r3, r3
 80006d2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d101      	bne.n	80006e2 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80006de:	2320      	movs	r3, #32
 80006e0:	e003      	b.n	80006ea <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	fab3 f383 	clz	r3, r3
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	2103      	movs	r1, #3
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43db      	mvns	r3, r3
 80006f4:	401a      	ands	r2, r3
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	fa93 f3a3 	rbit	r3, r3
 8000700:	61fb      	str	r3, [r7, #28]
  return result;
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	2b00      	cmp	r3, #0
 800070a:	d101      	bne.n	8000710 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800070c:	2320      	movs	r3, #32
 800070e:	e003      	b.n	8000718 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	fab3 f383 	clz	r3, r3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	fa01 f303 	lsl.w	r3, r1, r3
 8000720:	431a      	orrs	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	601a      	str	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	372c      	adds	r7, #44	; 0x2c
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000732:	b480      	push	{r7}
 8000734:	b08b      	sub	sp, #44	; 0x2c
 8000736:	af00      	add	r7, sp, #0
 8000738:	60f8      	str	r0, [r7, #12]
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	fa93 f3a3 	rbit	r3, r3
 800074c:	613b      	str	r3, [r7, #16]
  return result;
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000758:	2320      	movs	r3, #32
 800075a:	e003      	b.n	8000764 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fab3 f383 	clz	r3, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	2103      	movs	r1, #3
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	43db      	mvns	r3, r3
 800076e:	401a      	ands	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	fa93 f3a3 	rbit	r3, r3
 800077a:	61fb      	str	r3, [r7, #28]
  return result;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	2b00      	cmp	r3, #0
 8000784:	d101      	bne.n	800078a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000786:	2320      	movs	r3, #32
 8000788:	e003      	b.n	8000792 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	fab3 f383 	clz	r3, r3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	431a      	orrs	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	60da      	str	r2, [r3, #12]
}
 80007a0:	bf00      	nop
 80007a2:	372c      	adds	r7, #44	; 0x2c
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	691b      	ldr	r3, [r3, #16]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	619a      	str	r2, [r3, #24]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <Keypad_Init>:
 */
#include "keypad.h"



void Keypad_Init(void){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	R0_GPIO_CLK_ENABLE();
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff ff41 	bl	8000688 <LL_AHB2_GRP1_EnableClock>
		LL_GPIO_SetPinMode(R0_GPIO_PORT, R0_PIN, LL_GPIO_MODE_INPUT);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f7ff ff52 	bl	80006b8 <LL_GPIO_SetPinMode>
		LL_GPIO_SetPinPull(R0_GPIO_PORT, R0_PIN, LL_GPIO_PULL_UP);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f7ff ff88 	bl	8000732 <LL_GPIO_SetPinPull>

		R1_GPIO_CLK_ENABLE();
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff ff30 	bl	8000688 <LL_AHB2_GRP1_EnableClock>
		LL_GPIO_SetPinMode(R1_GPIO_PORT, R1_PIN, LL_GPIO_MODE_INPUT);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f7ff ff41 	bl	80006b8 <LL_GPIO_SetPinMode>
		LL_GPIO_SetPinPull(R1_GPIO_PORT, R1_PIN, LL_GPIO_PULL_UP);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f7ff ff77 	bl	8000732 <LL_GPIO_SetPinPull>

		R2_GPIO_CLK_ENABLE();
 8000844:	2002      	movs	r0, #2
 8000846:	f7ff ff1f 	bl	8000688 <LL_AHB2_GRP1_EnableClock>
		LL_GPIO_SetPinMode(R2_GPIO_PORT, R2_PIN, LL_GPIO_MODE_INPUT);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000850:	481d      	ldr	r0, [pc, #116]	; (80008c8 <Keypad_Init+0xcc>)
 8000852:	f7ff ff31 	bl	80006b8 <LL_GPIO_SetPinMode>
		LL_GPIO_SetPinPull(R2_GPIO_PORT, R2_PIN, LL_GPIO_PULL_UP);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085c:	481a      	ldr	r0, [pc, #104]	; (80008c8 <Keypad_Init+0xcc>)
 800085e:	f7ff ff68 	bl	8000732 <LL_GPIO_SetPinPull>

		R3_GPIO_CLK_ENABLE();
 8000862:	2002      	movs	r0, #2
 8000864:	f7ff ff10 	bl	8000688 <LL_AHB2_GRP1_EnableClock>
		LL_GPIO_SetPinMode(R3_GPIO_PORT, R3_PIN, LL_GPIO_MODE_INPUT);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086e:	4816      	ldr	r0, [pc, #88]	; (80008c8 <Keypad_Init+0xcc>)
 8000870:	f7ff ff22 	bl	80006b8 <LL_GPIO_SetPinMode>
		LL_GPIO_SetPinPull(R3_GPIO_PORT, R3_PIN, LL_GPIO_PULL_UP);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087a:	4813      	ldr	r0, [pc, #76]	; (80008c8 <Keypad_Init+0xcc>)
 800087c:	f7ff ff59 	bl	8000732 <LL_GPIO_SetPinPull>

		C0_GPIO_CLK_ENABLE();
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff ff01 	bl	8000688 <LL_AHB2_GRP1_EnableClock>
		LL_GPIO_SetPinMode(C0_GPIO_PORT, C0_PIN, LL_GPIO_MODE_OUTPUT);
 8000886:	2201      	movs	r2, #1
 8000888:	2104      	movs	r1, #4
 800088a:	480f      	ldr	r0, [pc, #60]	; (80008c8 <Keypad_Init+0xcc>)
 800088c:	f7ff ff14 	bl	80006b8 <LL_GPIO_SetPinMode>

		C1_GPIO_CLK_ENABLE();
 8000890:	2002      	movs	r0, #2
 8000892:	f7ff fef9 	bl	8000688 <LL_AHB2_GRP1_EnableClock>
		LL_GPIO_SetPinMode(C1_GPIO_PORT, C1_PIN, LL_GPIO_MODE_OUTPUT);
 8000896:	2201      	movs	r2, #1
 8000898:	2102      	movs	r1, #2
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <Keypad_Init+0xcc>)
 800089c:	f7ff ff0c 	bl	80006b8 <LL_GPIO_SetPinMode>

		C2_GPIO_CLK_ENABLE();
 80008a0:	2002      	movs	r0, #2
 80008a2:	f7ff fef1 	bl	8000688 <LL_AHB2_GRP1_EnableClock>
		LL_GPIO_SetPinMode(C2_GPIO_PORT, C2_PIN, LL_GPIO_MODE_OUTPUT);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <Keypad_Init+0xcc>)
 80008ae:	f7ff ff03 	bl	80006b8 <LL_GPIO_SetPinMode>

		C3_GPIO_CLK_ENABLE();
 80008b2:	2002      	movs	r0, #2
 80008b4:	f7ff fee8 	bl	8000688 <LL_AHB2_GRP1_EnableClock>
		LL_GPIO_SetPinMode(C3_GPIO_PORT, C3_PIN, LL_GPIO_MODE_OUTPUT);
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008be:	4802      	ldr	r0, [pc, #8]	; (80008c8 <Keypad_Init+0xcc>)
 80008c0:	f7ff fefa 	bl	80006b8 <LL_GPIO_SetPinMode>


}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	48000400 	.word	0x48000400

080008cc <Keypad_Scan>:

uint8_t Keypad_Scan(void){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(C0_GPIO_PORT, C0_PIN);
 80008d0:	2104      	movs	r1, #4
 80008d2:	4879      	ldr	r0, [pc, #484]	; (8000ab8 <Keypad_Scan+0x1ec>)
 80008d4:	f7ff ff84 	bl	80007e0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(C1_GPIO_PORT, C1_PIN);
 80008d8:	2102      	movs	r1, #2
 80008da:	4877      	ldr	r0, [pc, #476]	; (8000ab8 <Keypad_Scan+0x1ec>)
 80008dc:	f7ff ff72 	bl	80007c4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(C2_GPIO_PORT, C2_PIN);
 80008e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e4:	4874      	ldr	r0, [pc, #464]	; (8000ab8 <Keypad_Scan+0x1ec>)
 80008e6:	f7ff ff6d 	bl	80007c4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(C3_GPIO_PORT, C3_PIN);
 80008ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ee:	4872      	ldr	r0, [pc, #456]	; (8000ab8 <Keypad_Scan+0x1ec>)
 80008f0:	f7ff ff68 	bl	80007c4 <LL_GPIO_SetOutputPin>

		//LL_GPIO_IsInputPinSet(GPIOx, PinMask)
	if ((LL_GPIO_ReadInputPort(R0_GPIO_PORT) & R0_PIN) == 0 )
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f7ff ff58 	bl	80007ac <LL_GPIO_ReadInputPort>
 80008fc:	4603      	mov	r3, r0
 80008fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <Keypad_Scan+0x3e>
		return '1';
 8000906:	2331      	movs	r3, #49	; 0x31
 8000908:	e0d3      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R1_GPIO_PORT) & R1_PIN) == 0 )
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f7ff ff4d 	bl	80007ac <LL_GPIO_ReadInputPort>
 8000912:	4603      	mov	r3, r0
 8000914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <Keypad_Scan+0x54>
		return '4';
 800091c:	2334      	movs	r3, #52	; 0x34
 800091e:	e0c8      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R2_GPIO_PORT) & R2_PIN) == 0 )
 8000920:	4865      	ldr	r0, [pc, #404]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000922:	f7ff ff43 	bl	80007ac <LL_GPIO_ReadInputPort>
 8000926:	4603      	mov	r3, r0
 8000928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <Keypad_Scan+0x68>
		return '7';
 8000930:	2337      	movs	r3, #55	; 0x37
 8000932:	e0be      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R3_GPIO_PORT) & R3_PIN) == 0 )
 8000934:	4860      	ldr	r0, [pc, #384]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000936:	f7ff ff39 	bl	80007ac <LL_GPIO_ReadInputPort>
 800093a:	4603      	mov	r3, r0
 800093c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <Keypad_Scan+0x7c>
		return '*';
 8000944:	232a      	movs	r3, #42	; 0x2a
 8000946:	e0b4      	b.n	8000ab2 <Keypad_Scan+0x1e6>


	LL_GPIO_SetOutputPin(C0_GPIO_PORT, C0_PIN);
 8000948:	2104      	movs	r1, #4
 800094a:	485b      	ldr	r0, [pc, #364]	; (8000ab8 <Keypad_Scan+0x1ec>)
 800094c:	f7ff ff3a 	bl	80007c4 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(C1_GPIO_PORT, C1_PIN);
 8000950:	2102      	movs	r1, #2
 8000952:	4859      	ldr	r0, [pc, #356]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000954:	f7ff ff44 	bl	80007e0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(C2_GPIO_PORT, C2_PIN);
 8000958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095c:	4856      	ldr	r0, [pc, #344]	; (8000ab8 <Keypad_Scan+0x1ec>)
 800095e:	f7ff ff31 	bl	80007c4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(C3_GPIO_PORT, C3_PIN);
 8000962:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000966:	4854      	ldr	r0, [pc, #336]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000968:	f7ff ff2c 	bl	80007c4 <LL_GPIO_SetOutputPin>

	if ((LL_GPIO_ReadInputPort(R0_GPIO_PORT) & R0_PIN) == 0 )
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f7ff ff1c 	bl	80007ac <LL_GPIO_ReadInputPort>
 8000974:	4603      	mov	r3, r0
 8000976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <Keypad_Scan+0xb6>
		return '2';
 800097e:	2332      	movs	r3, #50	; 0x32
 8000980:	e097      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R1_GPIO_PORT) & R1_PIN) == 0 )
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f7ff ff11 	bl	80007ac <LL_GPIO_ReadInputPort>
 800098a:	4603      	mov	r3, r0
 800098c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000990:	2b00      	cmp	r3, #0
 8000992:	d101      	bne.n	8000998 <Keypad_Scan+0xcc>
		return '5';
 8000994:	2335      	movs	r3, #53	; 0x35
 8000996:	e08c      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R2_GPIO_PORT) & R2_PIN) == 0 )
 8000998:	4847      	ldr	r0, [pc, #284]	; (8000ab8 <Keypad_Scan+0x1ec>)
 800099a:	f7ff ff07 	bl	80007ac <LL_GPIO_ReadInputPort>
 800099e:	4603      	mov	r3, r0
 80009a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d101      	bne.n	80009ac <Keypad_Scan+0xe0>
		return '8';
 80009a8:	2338      	movs	r3, #56	; 0x38
 80009aa:	e082      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R3_GPIO_PORT) & R3_PIN) == 0 )
 80009ac:	4842      	ldr	r0, [pc, #264]	; (8000ab8 <Keypad_Scan+0x1ec>)
 80009ae:	f7ff fefd 	bl	80007ac <LL_GPIO_ReadInputPort>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d101      	bne.n	80009c0 <Keypad_Scan+0xf4>
		return '0';
 80009bc:	2330      	movs	r3, #48	; 0x30
 80009be:	e078      	b.n	8000ab2 <Keypad_Scan+0x1e6>



	LL_GPIO_SetOutputPin(C0_GPIO_PORT, C0_PIN);
 80009c0:	2104      	movs	r1, #4
 80009c2:	483d      	ldr	r0, [pc, #244]	; (8000ab8 <Keypad_Scan+0x1ec>)
 80009c4:	f7ff fefe 	bl	80007c4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(C1_GPIO_PORT, C1_PIN);
 80009c8:	2102      	movs	r1, #2
 80009ca:	483b      	ldr	r0, [pc, #236]	; (8000ab8 <Keypad_Scan+0x1ec>)
 80009cc:	f7ff fefa 	bl	80007c4 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(C2_GPIO_PORT, C2_PIN);
 80009d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d4:	4838      	ldr	r0, [pc, #224]	; (8000ab8 <Keypad_Scan+0x1ec>)
 80009d6:	f7ff ff03 	bl	80007e0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(C3_GPIO_PORT, C3_PIN);
 80009da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009de:	4836      	ldr	r0, [pc, #216]	; (8000ab8 <Keypad_Scan+0x1ec>)
 80009e0:	f7ff fef0 	bl	80007c4 <LL_GPIO_SetOutputPin>

	if ((LL_GPIO_ReadInputPort(R0_GPIO_PORT) & R0_PIN) == 0 )
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f7ff fee0 	bl	80007ac <LL_GPIO_ReadInputPort>
 80009ec:	4603      	mov	r3, r0
 80009ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d101      	bne.n	80009fa <Keypad_Scan+0x12e>
		return '3';
 80009f6:	2333      	movs	r3, #51	; 0x33
 80009f8:	e05b      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R1_GPIO_PORT) & R1_PIN) == 0 )
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f7ff fed5 	bl	80007ac <LL_GPIO_ReadInputPort>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d101      	bne.n	8000a10 <Keypad_Scan+0x144>
		return '6';
 8000a0c:	2336      	movs	r3, #54	; 0x36
 8000a0e:	e050      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R2_GPIO_PORT) & R2_PIN) == 0 )
 8000a10:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000a12:	f7ff fecb 	bl	80007ac <LL_GPIO_ReadInputPort>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <Keypad_Scan+0x158>
		return '9';
 8000a20:	2339      	movs	r3, #57	; 0x39
 8000a22:	e046      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R3_GPIO_PORT) & R3_PIN) == 0 )
 8000a24:	4824      	ldr	r0, [pc, #144]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000a26:	f7ff fec1 	bl	80007ac <LL_GPIO_ReadInputPort>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d101      	bne.n	8000a38 <Keypad_Scan+0x16c>
		return '#';
 8000a34:	2323      	movs	r3, #35	; 0x23
 8000a36:	e03c      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	LL_GPIO_SetOutputPin(C0_GPIO_PORT, C0_PIN);
 8000a38:	2104      	movs	r1, #4
 8000a3a:	481f      	ldr	r0, [pc, #124]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000a3c:	f7ff fec2 	bl	80007c4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(C1_GPIO_PORT, C1_PIN);
 8000a40:	2102      	movs	r1, #2
 8000a42:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000a44:	f7ff febe 	bl	80007c4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(C2_GPIO_PORT, C2_PIN);
 8000a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4c:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000a4e:	f7ff feb9 	bl	80007c4 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(C3_GPIO_PORT, C3_PIN);
 8000a52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000a58:	f7ff fec2 	bl	80007e0 <LL_GPIO_ResetOutputPin>

	if ((LL_GPIO_ReadInputPort(R0_GPIO_PORT) & R0_PIN) == 0 )
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f7ff fea4 	bl	80007ac <LL_GPIO_ReadInputPort>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d101      	bne.n	8000a72 <Keypad_Scan+0x1a6>
		return 'A';
 8000a6e:	2341      	movs	r3, #65	; 0x41
 8000a70:	e01f      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R1_GPIO_PORT) & R1_PIN) == 0 )
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f7ff fe99 	bl	80007ac <LL_GPIO_ReadInputPort>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <Keypad_Scan+0x1bc>
		return 'B';
 8000a84:	2342      	movs	r3, #66	; 0x42
 8000a86:	e014      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R2_GPIO_PORT) & R2_PIN) == 0 )
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000a8a:	f7ff fe8f 	bl	80007ac <LL_GPIO_ReadInputPort>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <Keypad_Scan+0x1d0>
		return 'C';
 8000a98:	2343      	movs	r3, #67	; 0x43
 8000a9a:	e00a      	b.n	8000ab2 <Keypad_Scan+0x1e6>

	if ((LL_GPIO_ReadInputPort(R3_GPIO_PORT) & R3_PIN) == 0 )
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <Keypad_Scan+0x1ec>)
 8000a9e:	f7ff fe85 	bl	80007ac <LL_GPIO_ReadInputPort>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <Keypad_Scan+0x1e4>
		return 'D';
 8000aac:	2344      	movs	r3, #68	; 0x44
 8000aae:	e000      	b.n	8000ab2 <Keypad_Scan+0x1e6>


	return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	48000400 	.word	0x48000400

08000abc <LL_AHB2_GRP1_EnableClock>:
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40021000 	.word	0x40021000

08000aec <LL_GPIO_SetPinMode>:
{
 8000aec:	b480      	push	{r7}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa93 f3a3 	rbit	r3, r3
 8000b06:	613b      	str	r3, [r7, #16]
  return result;
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000b12:	2320      	movs	r3, #32
 8000b14:	e003      	b.n	8000b1e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	fab3 f383 	clz	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2103      	movs	r1, #3
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	401a      	ands	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	fa93 f3a3 	rbit	r3, r3
 8000b34:	61fb      	str	r3, [r7, #28]
  return result;
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d101      	bne.n	8000b44 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000b40:	2320      	movs	r3, #32
 8000b42:	e003      	b.n	8000b4c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	fab3 f383 	clz	r3, r3
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	372c      	adds	r7, #44	; 0x2c
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_GPIO_IsInputPinSet>:
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	691a      	ldr	r2, [r3, #16]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	4013      	ands	r3, r2
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d101      	bne.n	8000b82 <LL_GPIO_IsInputPinSet+0x1c>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <LL_GPIO_IsInputPinSet+0x1e>
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_GPIO_SetOutputPin>:
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	619a      	str	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <LL_GPIO_ResetOutputPin>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	041a      	lsls	r2, r3, #16
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	400b      	ands	r3, r1
 8000be8:	431a      	orrs	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	619a      	str	r2, [r3, #24]
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <FSM_D4_Blink>:
		0x0E, 0x55, 0x15, 0x1D, 0x67, 0x73, 0x05, 0x5B, 0x0F, 0x3E, 0x1C, 0x5C,
		/*  x     y     z     */
		0x13, 0x3B, 0x6D
};

void FSM_D4_Blink(void){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
	static uint32_t last_tick = 0;
	uint32_t current_tick;
	static uint8_t estado = 0;

	current_tick = Get_Tick();
 8000c02:	f000 fa23 	bl	800104c <Get_Tick>
 8000c06:	6078      	str	r0, [r7, #4]
	if (current_tick-last_tick >= 500){
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <FSM_D4_Blink+0x58>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c14:	d319      	bcc.n	8000c4a <FSM_D4_Blink+0x4e>
		last_tick = current_tick;
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <FSM_D4_Blink+0x58>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6013      	str	r3, [r2, #0]

		switch(estado){
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <FSM_D4_Blink+0x5c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <FSM_D4_Blink+0x2e>
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d008      	beq.n	8000c3a <FSM_D4_Blink+0x3e>
			LL_GPIO_ResetOutputPin(D4_GPIO_PORT, D4_PIN);
			//Test_Display_Off();
			break;
		}
	}
}
 8000c28:	e010      	b.n	8000c4c <FSM_D4_Blink+0x50>
			estado = 1;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <FSM_D4_Blink+0x5c>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(D4_GPIO_PORT, D4_PIN);
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	480a      	ldr	r0, [pc, #40]	; (8000c5c <FSM_D4_Blink+0x60>)
 8000c34:	f7ff ffac 	bl	8000b90 <LL_GPIO_SetOutputPin>
			break;
 8000c38:	e008      	b.n	8000c4c <FSM_D4_Blink+0x50>
			estado = 0;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <FSM_D4_Blink+0x5c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(D4_GPIO_PORT, D4_PIN);
 8000c40:	2140      	movs	r1, #64	; 0x40
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <FSM_D4_Blink+0x60>)
 8000c44:	f7ff ffb2 	bl	8000bac <LL_GPIO_ResetOutputPin>
			break;
 8000c48:	e000      	b.n	8000c4c <FSM_D4_Blink+0x50>
	}
 8000c4a:	bf00      	nop
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000030 	.word	0x20000030
 8000c58:	20000034 	.word	0x20000034
 8000c5c:	48000400 	.word	0x48000400

08000c60 <Sx_Init>:


void Sx_Init(void){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	S1_GPIO_CLK_ENABLE();
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff ff29 	bl	8000abc <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(S1_GPIO_PORT, S1_PIN, LL_GPIO_MODE_INPUT);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f7ff ff3b 	bl	8000aec <LL_GPIO_SetPinMode>
	S2_GPIO_CLK_ENABLE();
 8000c76:	2001      	movs	r0, #1
 8000c78:	f7ff ff20 	bl	8000abc <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(S2_GPIO_PORT, S2_PIN, LL_GPIO_MODE_INPUT);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c84:	f7ff ff32 	bl	8000aec <LL_GPIO_SetPinMode>
	S3_GPIO_CLK_ENABLE();
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f7ff ff17 	bl	8000abc <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(S3_GPIO_PORT, S3_PIN, LL_GPIO_MODE_INPUT);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2101      	movs	r1, #1
 8000c92:	4802      	ldr	r0, [pc, #8]	; (8000c9c <Sx_Init+0x3c>)
 8000c94:	f7ff ff2a 	bl	8000aec <LL_GPIO_SetPinMode>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	48000400 	.word	0x48000400

08000ca0 <S1_Scan>:



uint32_t S1_Scan(void){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	return !LL_GPIO_IsInputPinSet(S1_GPIO_PORT, S1_PIN);
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f7ff ff5c 	bl	8000b66 <LL_GPIO_IsInputPinSet>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	bf0c      	ite	eq
 8000cb4:	2301      	moveq	r3, #1
 8000cb6:	2300      	movne	r3, #0
 8000cb8:	b2db      	uxtb	r3, r3
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <S2_Scan>:
uint32_t S2_Scan(void){
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
	return !LL_GPIO_IsInputPinSet(S2_GPIO_PORT, S2_PIN);
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f7ff ff4d 	bl	8000b66 <LL_GPIO_IsInputPinSet>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2301      	moveq	r3, #1
 8000cd4:	2300      	movne	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <S3_Scan>:
uint32_t S3_Scan(void){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	return !LL_GPIO_IsInputPinSet(S3_GPIO_PORT, S3_PIN);
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <S3_Scan+0x1c>)
 8000ce4:	f7ff ff3f 	bl	8000b66 <LL_GPIO_IsInputPinSet>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bf0c      	ite	eq
 8000cee:	2301      	moveq	r3, #1
 8000cf0:	2300      	movne	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	48000400 	.word	0x48000400

08000cfc <Dx_Init>:

void Dx_Init(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	D1_GPIO_CLK_ENABLE();
 8000d00:	2001      	movs	r0, #1
 8000d02:	f7ff fedb 	bl	8000abc <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(D1_GPIO_PORT, D1_PIN, LL_GPIO_MODE_OUTPUT);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2120      	movs	r1, #32
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f7ff feed 	bl	8000aec <LL_GPIO_SetPinMode>
	D2_GPIO_CLK_ENABLE();
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff fed2 	bl	8000abc <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(D2_GPIO_PORT, D2_PIN, LL_GPIO_MODE_OUTPUT);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2140      	movs	r1, #64	; 0x40
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f7ff fee4 	bl	8000aec <LL_GPIO_SetPinMode>
	D3_GPIO_CLK_ENABLE();
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fec9 	bl	8000abc <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(D3_GPIO_PORT, D3_PIN, LL_GPIO_MODE_OUTPUT);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f7ff fedb 	bl	8000aec <LL_GPIO_SetPinMode>
	D4_GPIO_CLK_ENABLE();
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff fec0 	bl	8000abc <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(D4_GPIO_PORT, D4_PIN, LL_GPIO_MODE_OUTPUT);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <Dx_Init+0x50>)
 8000d42:	f7ff fed3 	bl	8000aec <LL_GPIO_SetPinMode>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	48000400 	.word	0x48000400

08000d50 <D1_On>:

void D1_On(void){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(D1_GPIO_PORT, D1_PIN);
 8000d54:	2120      	movs	r1, #32
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f7ff ff27 	bl	8000bac <LL_GPIO_ResetOutputPin>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <D2_On>:
void D2_On(void){
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(D2_GPIO_PORT, D2_PIN);
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6c:	f7ff ff1e 	bl	8000bac <LL_GPIO_ResetOutputPin>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <D3_On>:
void D3_On(void){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(D3_GPIO_PORT, D3_PIN);
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f7ff ff15 	bl	8000bac <LL_GPIO_ResetOutputPin>
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <D1_Off>:
void D4_On(void){
	LL_GPIO_ResetOutputPin(D3_GPIO_PORT, D3_PIN);
}

void D1_Off(void){
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(D1_GPIO_PORT, D1_PIN);
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f7ff fefe 	bl	8000b90 <LL_GPIO_SetOutputPin>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <D2_Off>:
void D2_Off(void){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(D2_GPIO_PORT, D2_PIN);
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f7ff fef5 	bl	8000b90 <LL_GPIO_SetOutputPin>
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}

08000daa <D3_Off>:
void D3_Off(void){
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(D3_GPIO_PORT, D3_PIN);
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f7ff feec 	bl	8000b90 <LL_GPIO_SetOutputPin>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <Display_Init>:
void D4_Off(void){
	LL_GPIO_SetOutputPin(D4_GPIO_PORT, D4_PIN);
}


void Display_Init(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	LCLK_GPIO_CLK_ENABLE();
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f7ff fe7b 	bl	8000abc <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(LCLK_GPIO_PORT, LCLK_PIN, LL_GPIO_MODE_OUTPUT);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2120      	movs	r1, #32
 8000dca:	4814      	ldr	r0, [pc, #80]	; (8000e1c <Display_Init+0x60>)
 8000dcc:	f7ff fe8e 	bl	8000aec <LL_GPIO_SetPinMode>
	LL_GPIO_ResetOutputPin(LCLK_GPIO_PORT, LCLK_PIN);
 8000dd0:	2120      	movs	r1, #32
 8000dd2:	4812      	ldr	r0, [pc, #72]	; (8000e1c <Display_Init+0x60>)
 8000dd4:	f7ff feea 	bl	8000bac <LL_GPIO_ResetOutputPin>

	SRCLK_GPIO_CLK_ENABLE();
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff fe6f 	bl	8000abc <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(SRCLK_GPIO_PORT, SRCLK_PIN, LL_GPIO_MODE_OUTPUT);
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f7ff fe80 	bl	8000aec <LL_GPIO_SetPinMode>
	LL_GPIO_ResetOutputPin(SRCLK_GPIO_PORT, SRCLK_PIN);
 8000dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f7ff feda 	bl	8000bac <LL_GPIO_ResetOutputPin>

	SER_GPIO_CLK_ENABLE();
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f7ff fe5f 	bl	8000abc <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(SER_GPIO_PORT, SER_PIN, LL_GPIO_MODE_OUTPUT);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f7ff fe70 	bl	8000aec <LL_GPIO_SetPinMode>
	LL_GPIO_ResetOutputPin(SER_GPIO_PORT, SER_PIN);
 8000e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f7ff feca 	bl	8000bac <LL_GPIO_ResetOutputPin>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	48000400 	.word	0x48000400

08000e20 <FSM_Write_D4>:

}



void FSM_Write_D4( uint8_t *Msg){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	static uint32_t state = 0, next_state = 0;

	static uint8_t i = 0;


	if (  Get_Tick() - last_tick >= 1){
 8000e28:	f000 f910 	bl	800104c <Get_Tick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <FSM_Write_D4+0xdc>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d05e      	beq.n	8000ef4 <FSM_Write_D4+0xd4>
		if (state == 0){
 8000e36:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <FSM_Write_D4+0xe0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d111      	bne.n	8000e62 <FSM_Write_D4+0x42>
			Write_ASCII_D4((Msg[i]- 0x30), 4, seven_seg_digits_decode_abcdefg);
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <FSM_Write_D4+0xe4>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4413      	add	r3, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	3b30      	subs	r3, #48	; 0x30
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <FSM_Write_D4+0xe8>)
 8000e50:	2104      	movs	r1, #4
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f85c 	bl	8000f10 <Write_ASCII_D4>
			next_state = state+1;
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <FSM_Write_D4+0xe0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a2b      	ldr	r2, [pc, #172]	; (8000f0c <FSM_Write_D4+0xec>)
 8000e60:	6013      	str	r3, [r2, #0]
		}
		if (state == 1){
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <FSM_Write_D4+0xe0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d111      	bne.n	8000e8e <FSM_Write_D4+0x6e>
			Write_ASCII_D4((Msg[i+1]- 0x30), 3, seven_seg_digits_decode_abcdefg);
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <FSM_Write_D4+0xe4>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	3b30      	subs	r3, #48	; 0x30
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4a23      	ldr	r2, [pc, #140]	; (8000f08 <FSM_Write_D4+0xe8>)
 8000e7c:	2103      	movs	r1, #3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f846 	bl	8000f10 <Write_ASCII_D4>
			next_state = state+1;
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <FSM_Write_D4+0xe0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <FSM_Write_D4+0xec>)
 8000e8c:	6013      	str	r3, [r2, #0]
		}
		if (state == 2){
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <FSM_Write_D4+0xe0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d111      	bne.n	8000eba <FSM_Write_D4+0x9a>
			Write_ASCII_D4(Msg[i+2]- 0x30, 2, seven_seg_digits_decode_abcdefg);
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <FSM_Write_D4+0xe4>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	3b30      	subs	r3, #48	; 0x30
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <FSM_Write_D4+0xe8>)
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f830 	bl	8000f10 <Write_ASCII_D4>
			next_state = state+1;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <FSM_Write_D4+0xe0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <FSM_Write_D4+0xec>)
 8000eb8:	6013      	str	r3, [r2, #0]
		}
		if (state == 3){
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <FSM_Write_D4+0xe0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d10f      	bne.n	8000ee2 <FSM_Write_D4+0xc2>
			Write_ASCII_D4(Msg[i+3]- 0x30, 1, seven_seg_digits_decode_abcdefg);
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <FSM_Write_D4+0xe4>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3303      	adds	r3, #3
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	3b30      	subs	r3, #48	; 0x30
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <FSM_Write_D4+0xe8>)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f81a 	bl	8000f10 <Write_ASCII_D4>
			next_state = 0;
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <FSM_Write_D4+0xec>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
		}
		state = next_state;
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <FSM_Write_D4+0xec>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <FSM_Write_D4+0xe0>)
 8000ee8:	6013      	str	r3, [r2, #0]
		last_tick = Get_Tick();
 8000eea:	f000 f8af 	bl	800104c <Get_Tick>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a02      	ldr	r2, [pc, #8]	; (8000efc <FSM_Write_D4+0xdc>)
 8000ef2:	6013      	str	r3, [r2, #0]
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000038 	.word	0x20000038
 8000f00:	2000003c 	.word	0x2000003c
 8000f04:	20000040 	.word	0x20000040
 8000f08:	080011f8 	.word	0x080011f8
 8000f0c:	20000044 	.word	0x20000044

08000f10 <Write_ASCII_D4>:

void Write_ASCII_D4( uint8_t letter, uint8_t Digit,const uint8_t *Data ){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	603a      	str	r2, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	71bb      	strb	r3, [r7, #6]

	//  LCLK (PB5) -
	LL_GPIO_ResetOutputPin(LCLK_GPIO_PORT, LCLK_PIN);
 8000f20:	2120      	movs	r1, #32
 8000f22:	483f      	ldr	r0, [pc, #252]	; (8001020 <Write_ASCII_D4+0x110>)
 8000f24:	f7ff fe42 	bl	8000bac <LL_GPIO_ResetOutputPin>

	// SRCLK (PA8) - 16 clock cycles
	LL_GPIO_ResetOutputPin(SRCLK_GPIO_PORT, SRCLK_PIN);
 8000f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f7ff fe3c 	bl	8000bac <LL_GPIO_ResetOutputPin>
	// Dot is set to turn it off
	LL_GPIO_SetOutputPin(SER_GPIO_PORT, SER_PIN);
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3c:	f7ff fe28 	bl	8000b90 <LL_GPIO_SetOutputPin>
	LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f7ff fe3e 	bl	8000bc8 <LL_GPIO_TogglePin>
	LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 8000f4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f7ff fe38 	bl	8000bc8 <LL_GPIO_TogglePin>
	for (int i = 0; i < 7; i++){
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	e027      	b.n	8000fae <Write_ASCII_D4+0x9e>
		// SER (PA9) - set
		//HAL_GPIO_WritePin(SER_GPIO_PORT, SER_PIN,~(Data[letter]>>i)&(1));
		if ((~(Data[letter]>>i)&(1))==1){
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	fa42 f303 	asr.w	r3, r2, r3
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d106      	bne.n	8000f84 <Write_ASCII_D4+0x74>
			LL_GPIO_SetOutputPin(SER_GPIO_PORT, SER_PIN);
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f7ff fe07 	bl	8000b90 <LL_GPIO_SetOutputPin>
 8000f82:	e005      	b.n	8000f90 <Write_ASCII_D4+0x80>
		}
		else{
			LL_GPIO_ResetOutputPin(SER_GPIO_PORT, SER_PIN);
 8000f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f7ff fe0e 	bl	8000bac <LL_GPIO_ResetOutputPin>
		}
		LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 8000f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f7ff fe16 	bl	8000bc8 <LL_GPIO_TogglePin>
		LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 8000f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f7ff fe10 	bl	8000bc8 <LL_GPIO_TogglePin>
	for (int i = 0; i < 7; i++){
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b06      	cmp	r3, #6
 8000fb2:	ddd4      	ble.n	8000f5e <Write_ASCII_D4+0x4e>
	}

	// All the displays are enable
	LL_GPIO_ResetOutputPin(SER_GPIO_PORT, SER_PIN);
 8000fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f7ff fdf6 	bl	8000bac <LL_GPIO_ResetOutputPin>
	for (int i = 0; i < 8; i++){
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	e020      	b.n	8001008 <Write_ASCII_D4+0xf8>
		if (i == Digit+3){
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	3303      	adds	r3, #3
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d106      	bne.n	8000fde <Write_ASCII_D4+0xce>
			LL_GPIO_SetOutputPin(SER_GPIO_PORT, SER_PIN);
 8000fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd8:	f7ff fdda 	bl	8000b90 <LL_GPIO_SetOutputPin>
 8000fdc:	e005      	b.n	8000fea <Write_ASCII_D4+0xda>
		}else{
			LL_GPIO_ResetOutputPin(SER_GPIO_PORT, SER_PIN);
 8000fde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f7ff fde1 	bl	8000bac <LL_GPIO_ResetOutputPin>
		}
		LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f7ff fde9 	bl	8000bc8 <LL_GPIO_TogglePin>
		LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 8000ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffe:	f7ff fde3 	bl	8000bc8 <LL_GPIO_TogglePin>
	for (int i = 0; i < 8; i++){
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	3301      	adds	r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2b07      	cmp	r3, #7
 800100c:	dddb      	ble.n	8000fc6 <Write_ASCII_D4+0xb6>
	};
	//  LCLK (PB5) -
	LL_GPIO_SetOutputPin(LCLK_GPIO_PORT, LCLK_PIN);
 800100e:	2120      	movs	r1, #32
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <Write_ASCII_D4+0x110>)
 8001012:	f7ff fdbd 	bl	8000b90 <LL_GPIO_SetOutputPin>

}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	48000400 	.word	0x48000400

08001024 <SysTick_Handler>:

#include "systick.h"

static uint32_t msTick = 0;

void SysTick_Handler(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	SysTick_Callback();
 8001028:	f000 f802 	bl	8001030 <SysTick_Callback>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <SysTick_Callback>:

void SysTick_Callback(void){
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	msTick++;
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Callback+0x18>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a03      	ldr	r2, [pc, #12]	; (8001048 <SysTick_Callback+0x18>)
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	20000048 	.word	0x20000048

0800104c <Get_Tick>:

uint32_t Get_Tick(void){
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	return msTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <Get_Tick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000048 	.word	0x20000048

08001064 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <LL_InitTick+0x30>)
 8001078:	3b01      	subs	r3, #1
 800107a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <LL_InitTick+0x30>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <LL_InitTick+0x30>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk;                   /* Enable the Systick Timer */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e010 	.word	0xe000e010

08001098 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80010a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffdd 	bl	8001064 <LL_InitTick>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	; (80010f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <LoopForever+0xe>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	; (8001100 <LoopForever+0x16>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010e2:	f000 f811 	bl	8001108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e6:	f7ff f86f 	bl	80001c8 <main>

080010ea <LoopForever>:

LoopForever:
    b LoopForever
 80010ea:	e7fe      	b.n	80010ea <LoopForever>
  ldr   r0, =_estack
 80010ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80010f8:	08001270 	.word	0x08001270
  ldr r2, =_sbss
 80010fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001100:	2000004c 	.word	0x2000004c

08001104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC1_2_IRQHandler>
	...

08001108 <__libc_init_array>:
 8001108:	b570      	push	{r4, r5, r6, lr}
 800110a:	4d0d      	ldr	r5, [pc, #52]	; (8001140 <__libc_init_array+0x38>)
 800110c:	4c0d      	ldr	r4, [pc, #52]	; (8001144 <__libc_init_array+0x3c>)
 800110e:	1b64      	subs	r4, r4, r5
 8001110:	10a4      	asrs	r4, r4, #2
 8001112:	2600      	movs	r6, #0
 8001114:	42a6      	cmp	r6, r4
 8001116:	d109      	bne.n	800112c <__libc_init_array+0x24>
 8001118:	4d0b      	ldr	r5, [pc, #44]	; (8001148 <__libc_init_array+0x40>)
 800111a:	4c0c      	ldr	r4, [pc, #48]	; (800114c <__libc_init_array+0x44>)
 800111c:	f000 f85c 	bl	80011d8 <_init>
 8001120:	1b64      	subs	r4, r4, r5
 8001122:	10a4      	asrs	r4, r4, #2
 8001124:	2600      	movs	r6, #0
 8001126:	42a6      	cmp	r6, r4
 8001128:	d105      	bne.n	8001136 <__libc_init_array+0x2e>
 800112a:	bd70      	pop	{r4, r5, r6, pc}
 800112c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001130:	4798      	blx	r3
 8001132:	3601      	adds	r6, #1
 8001134:	e7ee      	b.n	8001114 <__libc_init_array+0xc>
 8001136:	f855 3b04 	ldr.w	r3, [r5], #4
 800113a:	4798      	blx	r3
 800113c:	3601      	adds	r6, #1
 800113e:	e7f2      	b.n	8001126 <__libc_init_array+0x1e>
 8001140:	08001268 	.word	0x08001268
 8001144:	08001268 	.word	0x08001268
 8001148:	08001268 	.word	0x08001268
 800114c:	0800126c 	.word	0x0800126c

08001150 <__utoa>:
 8001150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001152:	4c1f      	ldr	r4, [pc, #124]	; (80011d0 <__utoa+0x80>)
 8001154:	b08b      	sub	sp, #44	; 0x2c
 8001156:	4605      	mov	r5, r0
 8001158:	460b      	mov	r3, r1
 800115a:	466e      	mov	r6, sp
 800115c:	f104 0c20 	add.w	ip, r4, #32
 8001160:	6820      	ldr	r0, [r4, #0]
 8001162:	6861      	ldr	r1, [r4, #4]
 8001164:	4637      	mov	r7, r6
 8001166:	c703      	stmia	r7!, {r0, r1}
 8001168:	3408      	adds	r4, #8
 800116a:	4564      	cmp	r4, ip
 800116c:	463e      	mov	r6, r7
 800116e:	d1f7      	bne.n	8001160 <__utoa+0x10>
 8001170:	7921      	ldrb	r1, [r4, #4]
 8001172:	7139      	strb	r1, [r7, #4]
 8001174:	1e91      	subs	r1, r2, #2
 8001176:	6820      	ldr	r0, [r4, #0]
 8001178:	6038      	str	r0, [r7, #0]
 800117a:	2922      	cmp	r1, #34	; 0x22
 800117c:	f04f 0100 	mov.w	r1, #0
 8001180:	d904      	bls.n	800118c <__utoa+0x3c>
 8001182:	7019      	strb	r1, [r3, #0]
 8001184:	460b      	mov	r3, r1
 8001186:	4618      	mov	r0, r3
 8001188:	b00b      	add	sp, #44	; 0x2c
 800118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118c:	1e58      	subs	r0, r3, #1
 800118e:	4684      	mov	ip, r0
 8001190:	fbb5 f7f2 	udiv	r7, r5, r2
 8001194:	fb02 5617 	mls	r6, r2, r7, r5
 8001198:	3628      	adds	r6, #40	; 0x28
 800119a:	446e      	add	r6, sp
 800119c:	460c      	mov	r4, r1
 800119e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80011a2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80011a6:	462e      	mov	r6, r5
 80011a8:	42b2      	cmp	r2, r6
 80011aa:	f101 0101 	add.w	r1, r1, #1
 80011ae:	463d      	mov	r5, r7
 80011b0:	d9ee      	bls.n	8001190 <__utoa+0x40>
 80011b2:	2200      	movs	r2, #0
 80011b4:	545a      	strb	r2, [r3, r1]
 80011b6:	1919      	adds	r1, r3, r4
 80011b8:	1aa5      	subs	r5, r4, r2
 80011ba:	42aa      	cmp	r2, r5
 80011bc:	dae3      	bge.n	8001186 <__utoa+0x36>
 80011be:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80011c2:	780e      	ldrb	r6, [r1, #0]
 80011c4:	7006      	strb	r6, [r0, #0]
 80011c6:	3201      	adds	r2, #1
 80011c8:	f801 5901 	strb.w	r5, [r1], #-1
 80011cc:	e7f4      	b.n	80011b8 <__utoa+0x68>
 80011ce:	bf00      	nop
 80011d0:	08001243 	.word	0x08001243

080011d4 <utoa>:
 80011d4:	f7ff bfbc 	b.w	8001150 <__utoa>

080011d8 <_init>:
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	bf00      	nop
 80011dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011de:	bc08      	pop	{r3}
 80011e0:	469e      	mov	lr, r3
 80011e2:	4770      	bx	lr

080011e4 <_fini>:
 80011e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e6:	bf00      	nop
 80011e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ea:	bc08      	pop	{r3}
 80011ec:	469e      	mov	lr, r3
 80011ee:	4770      	bx	lr
