
USART_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08007d40  08007d40  00017d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008254  08008254  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008254  08008254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800825c  0800825c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008260  08008260  00018260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200001e0  08008444  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08008444  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b04e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7c  00000000  00000000  0002b25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002d720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029373  00000000  00000000  0002df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c921  00000000  00000000  000572fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fce6d  00000000  00000000  00063c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160a89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a04  00000000  00000000  00160adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d24 	.word	0x08007d24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007d24 	.word	0x08007d24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:


uint16_t var = 0;

int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  HAL_Init();
 8000ffc:	f000 f986 	bl	800130c <HAL_Init>
  SysConfigClock();
 8001000:	f002 f8a8 	bl	8003154 <SysConfigClock>
  Global_GPIO_Init();
 8001004:	f002 f86a 	bl	80030dc <Global_GPIO_Init>

  USART_Init(115200);
 8001008:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800100c:	f002 f924 	bl	8003258 <USART_Init>
  printf("It works!\r\n");
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <main+0x3c>)
 8001012:	f003 f88b 	bl	800412c <puts>

  while (1)
  {
	  printf("Counting: %d\r\n", var++);
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <main+0x40>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	b291      	uxth	r1, r2
 800101e:	4a06      	ldr	r2, [pc, #24]	; (8001038 <main+0x40>)
 8001020:	8011      	strh	r1, [r2, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <main+0x44>)
 8001026:	f002 fffb 	bl	8004020 <iprintf>
	  HAL_Delay(500);
 800102a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800102e:	f000 f9e9 	bl	8001404 <HAL_Delay>
	  printf("Counting: %d\r\n", var++);
 8001032:	e7f0      	b.n	8001016 <main+0x1e>
 8001034:	08007d40 	.word	0x08007d40
 8001038:	200001fc 	.word	0x200001fc
 800103c:	08007d4c 	.word	0x08007d4c

08001040 <__io_putchar>:

int __io_putchar(int ch);
int _write(int file, char *ptr, int len);


int __io_putchar(int ch) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&USART2_I, &c[0], 1, 100);
 800104e:	f107 010c 	add.w	r1, r7, #12
 8001052:	2364      	movs	r3, #100	; 0x64
 8001054:	2201      	movs	r2, #1
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <__io_putchar+0x28>)
 8001058:	f001 fb44 	bl	80026e4 <HAL_UART_Transmit>
	return ch;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000208 	.word	0x20000208

0800106c <_write>:


int _write(int file, char *ptr, int len) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e009      	b.n	8001092 <_write+0x26>
		__io_putchar(*ptr++);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	60ba      	str	r2, [r7, #8]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ffda 	bl	8001040 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbf1      	blt.n	800107e <_write+0x12>
	}

	return len;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_MspInit+0x44>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <HAL_MspInit+0x44>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6613      	str	r3, [r2, #96]	; 0x60
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_MspInit+0x44>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_MspInit+0x44>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <HAL_MspInit+0x44>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6593      	str	r3, [r2, #88]	; 0x58
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_MspInit+0x44>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <NMI_Handler+0x4>

080010f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <MemManage_Handler+0x4>

080010fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <UsageFault_Handler+0x4>

0800110a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001138:	f000 f944 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return 1;
 8001144:	2301      	movs	r3, #1
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_kill>:

int _kill(int pid, int sig)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800115a:	f002 f8b5 	bl	80032c8 <__errno>
 800115e:	4603      	mov	r3, r0
 8001160:	2216      	movs	r2, #22
 8001162:	601a      	str	r2, [r3, #0]
  return -1;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_exit>:

void _exit (int status)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffe7 	bl	8001150 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001182:	e7fe      	b.n	8001182 <_exit+0x12>

08001184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e00a      	b.n	80011ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001196:	f3af 8000 	nop.w
 800119a:	4601      	mov	r1, r0
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	60ba      	str	r2, [r7, #8]
 80011a2:	b2ca      	uxtb	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dbf0      	blt.n	8001196 <_read+0x12>
  }

  return len;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_close>:
  }
  return len;
}

int _close(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e6:	605a      	str	r2, [r3, #4]
  return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <_isatty>:

int _isatty(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f002 f836 	bl	80032c8 <__errno>
 800125c:	4603      	mov	r3, r0
 800125e:	220c      	movs	r2, #12
 8001260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20018000 	.word	0x20018000
 8001288:	00000400 	.word	0x00000400
 800128c:	20000200 	.word	0x20000200
 8001290:	200002a0 	.word	0x200002a0

08001294 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012bc:	f7ff ffea 	bl	8001294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <LoopForever+0xe>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	; (8001304 <LoopForever+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f001 fff5 	bl	80032d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ea:	f7ff fe85 	bl	8000ff8 <main>

080012ee <LoopForever>:

LoopForever:
    b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80012fc:	08008264 	.word	0x08008264
  ldr r2, =_sbss
 8001300:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001304:	2000029c 	.word	0x2000029c

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_Init+0x3c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_Init+0x3c>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001322:	2003      	movs	r0, #3
 8001324:	f000 f944 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001328:	2000      	movs	r0, #0
 800132a:	f000 f80f 	bl	800134c <HAL_InitTick>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	e001      	b.n	800133e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800133a:	f7ff feb3 	bl	80010a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800133e:	79fb      	ldrb	r3, [r7, #7]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40022000 	.word	0x40022000

0800134c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_InitTick+0x6c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d023      	beq.n	80013a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_InitTick+0x70>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_InitTick+0x6c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f941 	bl	80015fe <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10f      	bne.n	80013a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d809      	bhi.n	800139c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001390:	f000 f919 	bl	80015c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_InitTick+0x74>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e007      	b.n	80013ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e004      	b.n	80013ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	e001      	b.n	80013ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20000204 	.word	0x20000204

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000204 	.word	0x20000204

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157c:	d301      	bcc.n	8001582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <SysTick_Config+0x40>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158a:	210f      	movs	r1, #15
 800158c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001590:	f7ff ff8e 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SysTick_Config+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x40>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff47 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff5c 	bl	8001494 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff8e 	bl	8001504 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5d 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffb0 	bl	800156c <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001626:	e17f      	b.n	8001928 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8171 	beq.w	8001922 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d005      	beq.n	8001658 <HAL_GPIO_Init+0x40>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d130      	bne.n	80016ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800168e:	2201      	movs	r2, #1
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	f003 0201 	and.w	r2, r3, #1
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d118      	bne.n	80016f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016cc:	2201      	movs	r2, #1
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	f003 0201 	and.w	r2, r3, #1
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b03      	cmp	r3, #3
 8001702:	d017      	beq.n	8001734 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d123      	bne.n	8001788 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	08da      	lsrs	r2, r3, #3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3208      	adds	r2, #8
 8001748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	220f      	movs	r2, #15
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	08da      	lsrs	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3208      	adds	r2, #8
 8001782:	6939      	ldr	r1, [r7, #16]
 8001784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0203 	and.w	r2, r3, #3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80ac 	beq.w	8001922 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <HAL_GPIO_Init+0x330>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	4a5e      	ldr	r2, [pc, #376]	; (8001948 <HAL_GPIO_Init+0x330>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6613      	str	r3, [r2, #96]	; 0x60
 80017d6:	4b5c      	ldr	r3, [pc, #368]	; (8001948 <HAL_GPIO_Init+0x330>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017e2:	4a5a      	ldr	r2, [pc, #360]	; (800194c <HAL_GPIO_Init+0x334>)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800180c:	d025      	beq.n	800185a <HAL_GPIO_Init+0x242>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4f      	ldr	r2, [pc, #316]	; (8001950 <HAL_GPIO_Init+0x338>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01f      	beq.n	8001856 <HAL_GPIO_Init+0x23e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4e      	ldr	r2, [pc, #312]	; (8001954 <HAL_GPIO_Init+0x33c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d019      	beq.n	8001852 <HAL_GPIO_Init+0x23a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4d      	ldr	r2, [pc, #308]	; (8001958 <HAL_GPIO_Init+0x340>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0x236>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4c      	ldr	r2, [pc, #304]	; (800195c <HAL_GPIO_Init+0x344>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00d      	beq.n	800184a <HAL_GPIO_Init+0x232>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4b      	ldr	r2, [pc, #300]	; (8001960 <HAL_GPIO_Init+0x348>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0x22e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4a      	ldr	r2, [pc, #296]	; (8001964 <HAL_GPIO_Init+0x34c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_GPIO_Init+0x22a>
 800183e:	2306      	movs	r3, #6
 8001840:	e00c      	b.n	800185c <HAL_GPIO_Init+0x244>
 8001842:	2307      	movs	r3, #7
 8001844:	e00a      	b.n	800185c <HAL_GPIO_Init+0x244>
 8001846:	2305      	movs	r3, #5
 8001848:	e008      	b.n	800185c <HAL_GPIO_Init+0x244>
 800184a:	2304      	movs	r3, #4
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x244>
 800184e:	2303      	movs	r3, #3
 8001850:	e004      	b.n	800185c <HAL_GPIO_Init+0x244>
 8001852:	2302      	movs	r3, #2
 8001854:	e002      	b.n	800185c <HAL_GPIO_Init+0x244>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_GPIO_Init+0x244>
 800185a:	2300      	movs	r3, #0
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	f002 0203 	and.w	r2, r2, #3
 8001862:	0092      	lsls	r2, r2, #2
 8001864:	4093      	lsls	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800186c:	4937      	ldr	r1, [pc, #220]	; (800194c <HAL_GPIO_Init+0x334>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_GPIO_Init+0x350>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800189e:	4a32      	ldr	r2, [pc, #200]	; (8001968 <HAL_GPIO_Init+0x350>)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018a4:	4b30      	ldr	r3, [pc, #192]	; (8001968 <HAL_GPIO_Init+0x350>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018c8:	4a27      	ldr	r2, [pc, #156]	; (8001968 <HAL_GPIO_Init+0x350>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018ce:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_GPIO_Init+0x350>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018f2:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_GPIO_Init+0x350>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_GPIO_Init+0x350>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800191c:	4a12      	ldr	r2, [pc, #72]	; (8001968 <HAL_GPIO_Init+0x350>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	f47f ae78 	bne.w	8001628 <HAL_GPIO_Init+0x10>
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	48000400 	.word	0x48000400
 8001954:	48000800 	.word	0x48000800
 8001958:	48000c00 	.word	0x48000c00
 800195c:	48001000 	.word	0x48001000
 8001960:	48001400 	.word	0x48001400
 8001964:	48001800 	.word	0x48001800
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <HAL_PWREx_GetVoltageRange+0x18>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40007000 	.word	0x40007000

08001988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001996:	d130      	bne.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a4:	d038      	beq.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ae:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2232      	movs	r2, #50	; 0x32
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	0c9b      	lsrs	r3, r3, #18
 80019c8:	3301      	adds	r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019cc:	e002      	b.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e0:	d102      	bne.n	80019e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f2      	bne.n	80019ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f4:	d110      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e00f      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a06:	d007      	beq.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a10:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	431bde83 	.word	0x431bde83

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e3ca      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a46:	4b97      	ldr	r3, [pc, #604]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a50:	4b94      	ldr	r3, [pc, #592]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80e4 	beq.w	8001c30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4a>
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	f040 808b 	bne.w	8001b8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	f040 8087 	bne.w	8001b8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a7e:	4b89      	ldr	r3, [pc, #548]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_RCC_OscConfig+0x62>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e3a2      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	4b82      	ldr	r3, [pc, #520]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x7c>
 8001aa6:	4b7f      	ldr	r3, [pc, #508]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aae:	e005      	b.n	8001abc <HAL_RCC_OscConfig+0x88>
 8001ab0:	4b7c      	ldr	r3, [pc, #496]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d223      	bcs.n	8001b08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 fd55 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e383      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad4:	4b73      	ldr	r3, [pc, #460]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a72      	ldr	r2, [pc, #456]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b70      	ldr	r3, [pc, #448]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	496d      	ldr	r1, [pc, #436]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af2:	4b6c      	ldr	r3, [pc, #432]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	4968      	ldr	r1, [pc, #416]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
 8001b06:	e025      	b.n	8001b54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b08:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4960      	ldr	r1, [pc, #384]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b26:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	495b      	ldr	r1, [pc, #364]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fd15 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e343      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b54:	f000 fc4a 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b52      	ldr	r3, [pc, #328]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	4950      	ldr	r1, [pc, #320]	; (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b70:	4a4e      	ldr	r2, [pc, #312]	; (8001cac <HAL_RCC_OscConfig+0x278>)
 8001b72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b74:	4b4e      	ldr	r3, [pc, #312]	; (8001cb0 <HAL_RCC_OscConfig+0x27c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fbe7 	bl	800134c <HAL_InitTick>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d052      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	e327      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d032      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b94:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a42      	ldr	r2, [pc, #264]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fc24 	bl	80013ec <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fc20 	bl	80013ec <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e310      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bba:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc6:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a36      	ldr	r2, [pc, #216]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4931      	ldr	r1, [pc, #196]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be4:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	492c      	ldr	r1, [pc, #176]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
 8001bf8:	e01a      	b.n	8001c30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fbf1 	bl	80013ec <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fbed 	bl	80013ec <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e2dd      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c20:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x1da>
 8001c2c:	e000      	b.n	8001c30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d074      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x21a>
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d10e      	bne.n	8001c66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d064      	beq.n	8001d24 <HAL_RCC_OscConfig+0x2f0>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d160      	bne.n	8001d24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e2ba      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x24a>
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e026      	b.n	8001ccc <HAL_RCC_OscConfig+0x298>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c86:	d115      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x280>
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a02      	ldr	r2, [pc, #8]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e014      	b.n	8001ccc <HAL_RCC_OscConfig+0x298>
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	08007d5c 	.word	0x08007d5c
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	4ba0      	ldr	r3, [pc, #640]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a9f      	ldr	r2, [pc, #636]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b9d      	ldr	r3, [pc, #628]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a9c      	ldr	r2, [pc, #624]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fb8a 	bl	80013ec <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fb86 	bl	80013ec <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e276      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cee:	4b92      	ldr	r3, [pc, #584]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x2a8>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fb76 	bl	80013ec <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fb72 	bl	80013ec <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e262      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d16:	4b88      	ldr	r3, [pc, #544]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2d0>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d060      	beq.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x310>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d119      	bne.n	8001d72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d116      	bne.n	8001d72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d44:	4b7c      	ldr	r3, [pc, #496]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_OscConfig+0x328>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e23f      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	4973      	ldr	r1, [pc, #460]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d70:	e040      	b.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d023      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7a:	4b6f      	ldr	r3, [pc, #444]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6e      	ldr	r2, [pc, #440]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7ff fb31 	bl	80013ec <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fb2d 	bl	80013ec <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e21d      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da0:	4b65      	ldr	r3, [pc, #404]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b62      	ldr	r3, [pc, #392]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	495f      	ldr	r1, [pc, #380]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	e018      	b.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a5c      	ldr	r2, [pc, #368]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff fb0d 	bl	80013ec <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fb09 	bl	80013ec <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1f9      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01c      	beq.n	8001e42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e08:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0e:	4a4a      	ldr	r2, [pc, #296]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff fae8 	bl	80013ec <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff fae4 	bl	80013ec <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e1d4      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ef      	beq.n	8001e20 <HAL_RCC_OscConfig+0x3ec>
 8001e40:	e01b      	b.n	8001e7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	4a3b      	ldr	r2, [pc, #236]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f023 0301 	bic.w	r3, r3, #1
 8001e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7ff facb 	bl	80013ec <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fac7 	bl	80013ec <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1b7      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e6c:	4b32      	ldr	r3, [pc, #200]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ef      	bne.n	8001e5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80a6 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10d      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d118      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fa8e 	bl	80013ec <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed4:	f7ff fa8a 	bl	80013ec <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e17a      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4d8>
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0a:	e029      	b.n	8001f60 <HAL_RCC_OscConfig+0x52c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d115      	bne.n	8001f40 <HAL_RCC_OscConfig+0x50c>
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f34:	e014      	b.n	8001f60 <HAL_RCC_OscConfig+0x52c>
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	4b9c      	ldr	r3, [pc, #624]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a9b      	ldr	r2, [pc, #620]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f50:	4b98      	ldr	r3, [pc, #608]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a97      	ldr	r2, [pc, #604]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d016      	beq.n	8001f96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7ff fa40 	bl	80013ec <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7ff fa3c 	bl	80013ec <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e12a      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f86:	4b8b      	ldr	r3, [pc, #556]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ed      	beq.n	8001f70 <HAL_RCC_OscConfig+0x53c>
 8001f94:	e015      	b.n	8001fc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7ff fa29 	bl	80013ec <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7ff fa25 	bl	80013ec <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e113      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb4:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ed      	bne.n	8001f9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b7a      	ldr	r3, [pc, #488]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	4a79      	ldr	r2, [pc, #484]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80fe 	beq.w	80021da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	f040 80d0 	bne.w	8002188 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fe8:	4b72      	ldr	r3, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d130      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	3b01      	subs	r3, #1
 8002008:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d127      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d11f      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002028:	2a07      	cmp	r2, #7
 800202a:	bf14      	ite	ne
 800202c:	2201      	movne	r2, #1
 800202e:	2200      	moveq	r2, #0
 8002030:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002032:	4293      	cmp	r3, r2
 8002034:	d113      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	3b01      	subs	r3, #1
 8002044:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d109      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d06e      	beq.n	800213c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d069      	beq.n	8002138 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002064:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002070:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0ad      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002080:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a4b      	ldr	r2, [pc, #300]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800208c:	f7ff f9ae 	bl	80013ec <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff f9aa 	bl	80013ec <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e09a      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a6:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b2:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <HAL_RCC_OscConfig+0x784>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020c2:	3a01      	subs	r2, #1
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	4311      	orrs	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020cc:	0212      	lsls	r2, r2, #8
 80020ce:	4311      	orrs	r1, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020d4:	0852      	lsrs	r2, r2, #1
 80020d6:	3a01      	subs	r2, #1
 80020d8:	0552      	lsls	r2, r2, #21
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020e0:	0852      	lsrs	r2, r2, #1
 80020e2:	3a01      	subs	r2, #1
 80020e4:	0652      	lsls	r2, r2, #25
 80020e6:	4311      	orrs	r1, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020ec:	0912      	lsrs	r2, r2, #4
 80020ee:	0452      	lsls	r2, r2, #17
 80020f0:	430a      	orrs	r2, r1
 80020f2:	4930      	ldr	r1, [pc, #192]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2d      	ldr	r2, [pc, #180]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 80020fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a2a      	ldr	r2, [pc, #168]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 800210a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002110:	f7ff f96c 	bl	80013ec <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff f968 	bl	80013ec <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e058      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002136:	e050      	b.n	80021da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e04f      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d148      	bne.n	80021da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 800214e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002152:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002160:	f7ff f944 	bl	80013ec <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff f940 	bl	80013ec <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e030      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x734>
 8002186:	e028      	b.n	80021da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d023      	beq.n	80021d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002194:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7ff f927 	bl	80013ec <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a0:	e00c      	b.n	80021bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a2:	f7ff f923 	bl	80013ec <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d905      	bls.n	80021bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e013      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
 80021b4:	40021000 	.word	0x40021000
 80021b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_OscConfig+0x7b0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ec      	bne.n	80021a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_RCC_OscConfig+0x7b0>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4905      	ldr	r1, [pc, #20]	; (80021e4 <HAL_RCC_OscConfig+0x7b0>)
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_OscConfig+0x7b4>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
 80021d4:	e001      	b.n	80021da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	feeefffc 	.word	0xfeeefffc

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0e7      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b75      	ldr	r3, [pc, #468]	; (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d910      	bls.n	8002230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b72      	ldr	r3, [pc, #456]	; (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0207 	bic.w	r2, r3, #7
 8002216:	4970      	ldr	r1, [pc, #448]	; (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b6e      	ldr	r3, [pc, #440]	; (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0cf      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d010      	beq.n	800225e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	4b66      	ldr	r3, [pc, #408]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002248:	429a      	cmp	r2, r3
 800224a:	d908      	bls.n	800225e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4960      	ldr	r1, [pc, #384]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d04c      	beq.n	8002304 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	4b5a      	ldr	r3, [pc, #360]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d121      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0a6      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	4b54      	ldr	r3, [pc, #336]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e09a      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a2:	4b4e      	ldr	r3, [pc, #312]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e08e      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b2:	4b4a      	ldr	r3, [pc, #296]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e086      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4943      	ldr	r1, [pc, #268]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d4:	f7ff f88a 	bl	80013ec <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7ff f886 	bl	80013ec <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e06e      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d010      	beq.n	8002332 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231c:	429a      	cmp	r2, r3
 800231e:	d208      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	492b      	ldr	r1, [pc, #172]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d210      	bcs.n	8002362 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 0207 	bic.w	r2, r3, #7
 8002348:	4923      	ldr	r1, [pc, #140]	; (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e036      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236e:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4918      	ldr	r1, [pc, #96]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4910      	ldr	r1, [pc, #64]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023a0:	f000 f824 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	490b      	ldr	r1, [pc, #44]	; (80023e0 <HAL_RCC_ClockConfig+0x1f4>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_ClockConfig+0x1fc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe ffc1 	bl	800134c <HAL_InitTick>
 80023ca:	4603      	mov	r3, r0
 80023cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80023ce:	7afb      	ldrb	r3, [r7, #11]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	08007d5c 	.word	0x08007d5c
 80023e4:	20000000 	.word	0x20000000
 80023e8:	20000004 	.word	0x20000004

080023ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fa:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002404:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x34>
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d121      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d11e      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002420:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800242c:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800242e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002448:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d102      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	e004      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d101      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <HAL_RCC_GetSysClockFreq+0x114>)
 8002472:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d134      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800247a:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0xa6>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d003      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0xac>
 8002490:	e005      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002494:	617b      	str	r3, [r7, #20]
      break;
 8002496:	e005      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_RCC_GetSysClockFreq+0x114>)
 800249a:	617b      	str	r3, [r7, #20]
      break;
 800249c:	e002      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	617b      	str	r3, [r7, #20]
      break;
 80024a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	3301      	adds	r3, #1
 80024b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	fb03 f202 	mul.w	r2, r3, r2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	0e5b      	lsrs	r3, r3, #25
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	3301      	adds	r3, #1
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024e4:	69bb      	ldr	r3, [r7, #24]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08007d74 	.word	0x08007d74
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	007a1200 	.word	0x007a1200

08002504 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_RCC_GetHCLKFreq+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000000 	.word	0x20000000

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002520:	f7ff fff0 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4904      	ldr	r1, [pc, #16]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	08007d6c 	.word	0x08007d6c

08002548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800254c:	f7ff ffda 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	0adb      	lsrs	r3, r3, #11
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4904      	ldr	r1, [pc, #16]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x28>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	08007d6c 	.word	0x08007d6c

08002574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002580:	4b2a      	ldr	r3, [pc, #168]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800258c:	f7ff f9ee 	bl	800196c <HAL_PWREx_GetVoltageRange>
 8002590:	6178      	str	r0, [r7, #20]
 8002592:	e014      	b.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	4a24      	ldr	r2, [pc, #144]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259e:	6593      	str	r3, [r2, #88]	; 0x58
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025ac:	f7ff f9de 	bl	800196c <HAL_PWREx_GetVoltageRange>
 80025b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c4:	d10b      	bne.n	80025de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b80      	cmp	r3, #128	; 0x80
 80025ca:	d919      	bls.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2ba0      	cmp	r3, #160	; 0xa0
 80025d0:	d902      	bls.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d2:	2302      	movs	r3, #2
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	e013      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d8:	2301      	movs	r3, #1
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	e010      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d902      	bls.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025e4:	2303      	movs	r3, #3
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	e00a      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b80      	cmp	r3, #128	; 0x80
 80025ee:	d102      	bne.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f0:	2302      	movs	r3, #2
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e004      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b70      	cmp	r3, #112	; 0x70
 80025fa:	d101      	bne.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 0207 	bic.w	r2, r3, #7
 8002608:	4909      	ldr	r1, [pc, #36]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	40022000 	.word	0x40022000

08002634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e040      	b.n	80026c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f83a 	bl	80026d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8ca 	bl	800280c <UART_SetConfig>
 8002678:	4603      	mov	r3, r0
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e022      	b.n	80026c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fb76 	bl	8002d7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800269e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fbfd 	bl	8002ec0 <UART_CheckIdleState>
 80026c6:	4603      	mov	r3, r0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	f040 8082 	bne.w	8002802 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_UART_Transmit+0x26>
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e07a      	b.n	8002804 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_UART_Transmit+0x38>
 8002718:	2302      	movs	r3, #2
 800271a:	e073      	b.n	8002804 <HAL_UART_Transmit+0x120>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2221      	movs	r2, #33	; 0x21
 8002730:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002732:	f7fe fe5b 	bl	80013ec <HAL_GetTick>
 8002736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	88fa      	ldrh	r2, [r7, #6]
 800273c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	88fa      	ldrh	r2, [r7, #6]
 8002744:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002750:	d108      	bne.n	8002764 <HAL_UART_Transmit+0x80>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	e003      	b.n	800276c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002774:	e02d      	b.n	80027d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2200      	movs	r2, #0
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fbe6 	bl	8002f52 <UART_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e039      	b.n	8002804 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	881a      	ldrh	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a2:	b292      	uxth	r2, r2
 80027a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	3302      	adds	r3, #2
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	e008      	b.n	80027c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b292      	uxth	r2, r2
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1cb      	bne.n	8002776 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2140      	movs	r1, #64	; 0x40
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fbb2 	bl	8002f52 <UART_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e005      	b.n	8002804 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e000      	b.n	8002804 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002802:	2302      	movs	r3, #2
  }
}
 8002804:	4618      	mov	r0, r3
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800280c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002810:	b08a      	sub	sp, #40	; 0x28
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	431a      	orrs	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	431a      	orrs	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	4313      	orrs	r3, r2
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4ba4      	ldr	r3, [pc, #656]	; (8002acc <UART_SetConfig+0x2c0>)
 800283c:	4013      	ands	r3, r2
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002844:	430b      	orrs	r3, r1
 8002846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a99      	ldr	r2, [pc, #612]	; (8002ad0 <UART_SetConfig+0x2c4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002874:	4313      	orrs	r3, r2
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002888:	430a      	orrs	r2, r1
 800288a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a90      	ldr	r2, [pc, #576]	; (8002ad4 <UART_SetConfig+0x2c8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d126      	bne.n	80028e4 <UART_SetConfig+0xd8>
 8002896:	4b90      	ldr	r3, [pc, #576]	; (8002ad8 <UART_SetConfig+0x2cc>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d81b      	bhi.n	80028dc <UART_SetConfig+0xd0>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <UART_SetConfig+0xa0>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028bd 	.word	0x080028bd
 80028b0:	080028cd 	.word	0x080028cd
 80028b4:	080028c5 	.word	0x080028c5
 80028b8:	080028d5 	.word	0x080028d5
 80028bc:	2301      	movs	r3, #1
 80028be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028c2:	e116      	b.n	8002af2 <UART_SetConfig+0x2e6>
 80028c4:	2302      	movs	r3, #2
 80028c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ca:	e112      	b.n	8002af2 <UART_SetConfig+0x2e6>
 80028cc:	2304      	movs	r3, #4
 80028ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028d2:	e10e      	b.n	8002af2 <UART_SetConfig+0x2e6>
 80028d4:	2308      	movs	r3, #8
 80028d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028da:	e10a      	b.n	8002af2 <UART_SetConfig+0x2e6>
 80028dc:	2310      	movs	r3, #16
 80028de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028e2:	e106      	b.n	8002af2 <UART_SetConfig+0x2e6>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a7c      	ldr	r2, [pc, #496]	; (8002adc <UART_SetConfig+0x2d0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d138      	bne.n	8002960 <UART_SetConfig+0x154>
 80028ee:	4b7a      	ldr	r3, [pc, #488]	; (8002ad8 <UART_SetConfig+0x2cc>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d82d      	bhi.n	8002958 <UART_SetConfig+0x14c>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <UART_SetConfig+0xf8>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002939 	.word	0x08002939
 8002908:	08002959 	.word	0x08002959
 800290c:	08002959 	.word	0x08002959
 8002910:	08002959 	.word	0x08002959
 8002914:	08002949 	.word	0x08002949
 8002918:	08002959 	.word	0x08002959
 800291c:	08002959 	.word	0x08002959
 8002920:	08002959 	.word	0x08002959
 8002924:	08002941 	.word	0x08002941
 8002928:	08002959 	.word	0x08002959
 800292c:	08002959 	.word	0x08002959
 8002930:	08002959 	.word	0x08002959
 8002934:	08002951 	.word	0x08002951
 8002938:	2300      	movs	r3, #0
 800293a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800293e:	e0d8      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002940:	2302      	movs	r3, #2
 8002942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002946:	e0d4      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002948:	2304      	movs	r3, #4
 800294a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800294e:	e0d0      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002950:	2308      	movs	r3, #8
 8002952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002956:	e0cc      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002958:	2310      	movs	r3, #16
 800295a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800295e:	e0c8      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a5e      	ldr	r2, [pc, #376]	; (8002ae0 <UART_SetConfig+0x2d4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d125      	bne.n	80029b6 <UART_SetConfig+0x1aa>
 800296a:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <UART_SetConfig+0x2cc>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002970:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002974:	2b30      	cmp	r3, #48	; 0x30
 8002976:	d016      	beq.n	80029a6 <UART_SetConfig+0x19a>
 8002978:	2b30      	cmp	r3, #48	; 0x30
 800297a:	d818      	bhi.n	80029ae <UART_SetConfig+0x1a2>
 800297c:	2b20      	cmp	r3, #32
 800297e:	d00a      	beq.n	8002996 <UART_SetConfig+0x18a>
 8002980:	2b20      	cmp	r3, #32
 8002982:	d814      	bhi.n	80029ae <UART_SetConfig+0x1a2>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <UART_SetConfig+0x182>
 8002988:	2b10      	cmp	r3, #16
 800298a:	d008      	beq.n	800299e <UART_SetConfig+0x192>
 800298c:	e00f      	b.n	80029ae <UART_SetConfig+0x1a2>
 800298e:	2300      	movs	r3, #0
 8002990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002994:	e0ad      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002996:	2302      	movs	r3, #2
 8002998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800299c:	e0a9      	b.n	8002af2 <UART_SetConfig+0x2e6>
 800299e:	2304      	movs	r3, #4
 80029a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029a4:	e0a5      	b.n	8002af2 <UART_SetConfig+0x2e6>
 80029a6:	2308      	movs	r3, #8
 80029a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ac:	e0a1      	b.n	8002af2 <UART_SetConfig+0x2e6>
 80029ae:	2310      	movs	r3, #16
 80029b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029b4:	e09d      	b.n	8002af2 <UART_SetConfig+0x2e6>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a4a      	ldr	r2, [pc, #296]	; (8002ae4 <UART_SetConfig+0x2d8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d125      	bne.n	8002a0c <UART_SetConfig+0x200>
 80029c0:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <UART_SetConfig+0x2cc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80029ca:	2bc0      	cmp	r3, #192	; 0xc0
 80029cc:	d016      	beq.n	80029fc <UART_SetConfig+0x1f0>
 80029ce:	2bc0      	cmp	r3, #192	; 0xc0
 80029d0:	d818      	bhi.n	8002a04 <UART_SetConfig+0x1f8>
 80029d2:	2b80      	cmp	r3, #128	; 0x80
 80029d4:	d00a      	beq.n	80029ec <UART_SetConfig+0x1e0>
 80029d6:	2b80      	cmp	r3, #128	; 0x80
 80029d8:	d814      	bhi.n	8002a04 <UART_SetConfig+0x1f8>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <UART_SetConfig+0x1d8>
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	d008      	beq.n	80029f4 <UART_SetConfig+0x1e8>
 80029e2:	e00f      	b.n	8002a04 <UART_SetConfig+0x1f8>
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ea:	e082      	b.n	8002af2 <UART_SetConfig+0x2e6>
 80029ec:	2302      	movs	r3, #2
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f2:	e07e      	b.n	8002af2 <UART_SetConfig+0x2e6>
 80029f4:	2304      	movs	r3, #4
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fa:	e07a      	b.n	8002af2 <UART_SetConfig+0x2e6>
 80029fc:	2308      	movs	r3, #8
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a02:	e076      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002a04:	2310      	movs	r3, #16
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a0a:	e072      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a35      	ldr	r2, [pc, #212]	; (8002ae8 <UART_SetConfig+0x2dc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d12a      	bne.n	8002a6c <UART_SetConfig+0x260>
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <UART_SetConfig+0x2cc>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a24:	d01a      	beq.n	8002a5c <UART_SetConfig+0x250>
 8002a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a2a:	d81b      	bhi.n	8002a64 <UART_SetConfig+0x258>
 8002a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a30:	d00c      	beq.n	8002a4c <UART_SetConfig+0x240>
 8002a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a36:	d815      	bhi.n	8002a64 <UART_SetConfig+0x258>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <UART_SetConfig+0x238>
 8002a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a40:	d008      	beq.n	8002a54 <UART_SetConfig+0x248>
 8002a42:	e00f      	b.n	8002a64 <UART_SetConfig+0x258>
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a4a:	e052      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a52:	e04e      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002a54:	2304      	movs	r3, #4
 8002a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a5a:	e04a      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a62:	e046      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002a64:	2310      	movs	r3, #16
 8002a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a6a:	e042      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <UART_SetConfig+0x2c4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d13a      	bne.n	8002aec <UART_SetConfig+0x2e0>
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <UART_SetConfig+0x2cc>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a84:	d01a      	beq.n	8002abc <UART_SetConfig+0x2b0>
 8002a86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a8a:	d81b      	bhi.n	8002ac4 <UART_SetConfig+0x2b8>
 8002a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a90:	d00c      	beq.n	8002aac <UART_SetConfig+0x2a0>
 8002a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a96:	d815      	bhi.n	8002ac4 <UART_SetConfig+0x2b8>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <UART_SetConfig+0x298>
 8002a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa0:	d008      	beq.n	8002ab4 <UART_SetConfig+0x2a8>
 8002aa2:	e00f      	b.n	8002ac4 <UART_SetConfig+0x2b8>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aaa:	e022      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002aac:	2302      	movs	r3, #2
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ab2:	e01e      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aba:	e01a      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002abc:	2308      	movs	r3, #8
 8002abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ac2:	e016      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aca:	e012      	b.n	8002af2 <UART_SetConfig+0x2e6>
 8002acc:	efff69f3 	.word	0xefff69f3
 8002ad0:	40008000 	.word	0x40008000
 8002ad4:	40013800 	.word	0x40013800
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40004400 	.word	0x40004400
 8002ae0:	40004800 	.word	0x40004800
 8002ae4:	40004c00 	.word	0x40004c00
 8002ae8:	40005000 	.word	0x40005000
 8002aec:	2310      	movs	r3, #16
 8002aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a9f      	ldr	r2, [pc, #636]	; (8002d74 <UART_SetConfig+0x568>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d17a      	bne.n	8002bf2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002afc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d824      	bhi.n	8002b4e <UART_SetConfig+0x342>
 8002b04:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <UART_SetConfig+0x300>)
 8002b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0a:	bf00      	nop
 8002b0c:	08002b31 	.word	0x08002b31
 8002b10:	08002b4f 	.word	0x08002b4f
 8002b14:	08002b39 	.word	0x08002b39
 8002b18:	08002b4f 	.word	0x08002b4f
 8002b1c:	08002b3f 	.word	0x08002b3f
 8002b20:	08002b4f 	.word	0x08002b4f
 8002b24:	08002b4f 	.word	0x08002b4f
 8002b28:	08002b4f 	.word	0x08002b4f
 8002b2c:	08002b47 	.word	0x08002b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b30:	f7ff fcf4 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8002b34:	61f8      	str	r0, [r7, #28]
        break;
 8002b36:	e010      	b.n	8002b5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b38:	4b8f      	ldr	r3, [pc, #572]	; (8002d78 <UART_SetConfig+0x56c>)
 8002b3a:	61fb      	str	r3, [r7, #28]
        break;
 8002b3c:	e00d      	b.n	8002b5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b3e:	f7ff fc55 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8002b42:	61f8      	str	r0, [r7, #28]
        break;
 8002b44:	e009      	b.n	8002b5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b4a:	61fb      	str	r3, [r7, #28]
        break;
 8002b4c:	e005      	b.n	8002b5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80fb 	beq.w	8002d58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d305      	bcc.n	8002b7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d903      	bls.n	8002b86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b84:	e0e8      	b.n	8002d58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	461c      	mov	r4, r3
 8002b8c:	4615      	mov	r5, r2
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	022b      	lsls	r3, r5, #8
 8002b98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b9c:	0222      	lsls	r2, r4, #8
 8002b9e:	68f9      	ldr	r1, [r7, #12]
 8002ba0:	6849      	ldr	r1, [r1, #4]
 8002ba2:	0849      	lsrs	r1, r1, #1
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	4688      	mov	r8, r1
 8002ba8:	4681      	mov	r9, r0
 8002baa:	eb12 0a08 	adds.w	sl, r2, r8
 8002bae:	eb43 0b09 	adc.w	fp, r3, r9
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bc0:	4650      	mov	r0, sl
 8002bc2:	4659      	mov	r1, fp
 8002bc4:	f7fe f860 	bl	8000c88 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bd6:	d308      	bcc.n	8002bea <UART_SetConfig+0x3de>
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bde:	d204      	bcs.n	8002bea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	e0b6      	b.n	8002d58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002bf0:	e0b2      	b.n	8002d58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfa:	d15e      	bne.n	8002cba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d828      	bhi.n	8002c56 <UART_SetConfig+0x44a>
 8002c04:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <UART_SetConfig+0x400>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c31 	.word	0x08002c31
 8002c10:	08002c39 	.word	0x08002c39
 8002c14:	08002c41 	.word	0x08002c41
 8002c18:	08002c57 	.word	0x08002c57
 8002c1c:	08002c47 	.word	0x08002c47
 8002c20:	08002c57 	.word	0x08002c57
 8002c24:	08002c57 	.word	0x08002c57
 8002c28:	08002c57 	.word	0x08002c57
 8002c2c:	08002c4f 	.word	0x08002c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c30:	f7ff fc74 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8002c34:	61f8      	str	r0, [r7, #28]
        break;
 8002c36:	e014      	b.n	8002c62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c38:	f7ff fc86 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 8002c3c:	61f8      	str	r0, [r7, #28]
        break;
 8002c3e:	e010      	b.n	8002c62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c40:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <UART_SetConfig+0x56c>)
 8002c42:	61fb      	str	r3, [r7, #28]
        break;
 8002c44:	e00d      	b.n	8002c62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c46:	f7ff fbd1 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8002c4a:	61f8      	str	r0, [r7, #28]
        break;
 8002c4c:	e009      	b.n	8002c62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c52:	61fb      	str	r3, [r7, #28]
        break;
 8002c54:	e005      	b.n	8002c62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d077      	beq.n	8002d58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005a      	lsls	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	441a      	add	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d916      	bls.n	8002cb2 <UART_SetConfig+0x4a6>
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8a:	d212      	bcs.n	8002cb2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f023 030f 	bic.w	r3, r3, #15
 8002c94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	8afb      	ldrh	r3, [r7, #22]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	8afa      	ldrh	r2, [r7, #22]
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	e052      	b.n	8002d58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002cb8:	e04e      	b.n	8002d58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d827      	bhi.n	8002d12 <UART_SetConfig+0x506>
 8002cc2:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <UART_SetConfig+0x4bc>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002ced 	.word	0x08002ced
 8002ccc:	08002cf5 	.word	0x08002cf5
 8002cd0:	08002cfd 	.word	0x08002cfd
 8002cd4:	08002d13 	.word	0x08002d13
 8002cd8:	08002d03 	.word	0x08002d03
 8002cdc:	08002d13 	.word	0x08002d13
 8002ce0:	08002d13 	.word	0x08002d13
 8002ce4:	08002d13 	.word	0x08002d13
 8002ce8:	08002d0b 	.word	0x08002d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cec:	f7ff fc16 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8002cf0:	61f8      	str	r0, [r7, #28]
        break;
 8002cf2:	e014      	b.n	8002d1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cf4:	f7ff fc28 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 8002cf8:	61f8      	str	r0, [r7, #28]
        break;
 8002cfa:	e010      	b.n	8002d1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <UART_SetConfig+0x56c>)
 8002cfe:	61fb      	str	r3, [r7, #28]
        break;
 8002d00:	e00d      	b.n	8002d1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d02:	f7ff fb73 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8002d06:	61f8      	str	r0, [r7, #28]
        break;
 8002d08:	e009      	b.n	8002d1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0e:	61fb      	str	r3, [r7, #28]
        break;
 8002d10:	e005      	b.n	8002d1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d1c:	bf00      	nop
    }

    if (pclk != 0U)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d019      	beq.n	8002d58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	085a      	lsrs	r2, r3, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	441a      	add	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2b0f      	cmp	r3, #15
 8002d3c:	d909      	bls.n	8002d52 <UART_SetConfig+0x546>
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d44:	d205      	bcs.n	8002d52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60da      	str	r2, [r3, #12]
 8002d50:	e002      	b.n	8002d58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3728      	adds	r7, #40	; 0x28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d72:	bf00      	nop
 8002d74:	40008000 	.word	0x40008000
 8002d78:	00f42400 	.word	0x00f42400

08002d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01a      	beq.n	8002e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7a:	d10a      	bne.n	8002e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ed0:	f7fe fa8c 	bl	80013ec <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d10e      	bne.n	8002f02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f82d 	bl	8002f52 <UART_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e023      	b.n	8002f4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d10e      	bne.n	8002f2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f817 	bl	8002f52 <UART_WaitOnFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e00d      	b.n	8002f4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b09c      	sub	sp, #112	; 0x70
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f62:	e0a5      	b.n	80030b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6a:	f000 80a1 	beq.w	80030b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7fe fa3d 	bl	80013ec <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <UART_WaitOnFlagUntilTimeout+0x32>
 8002f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d13e      	bne.n	8003002 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f8c:	e853 3f00 	ldrex	r3, [r3]
 8002f90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f98:	667b      	str	r3, [r7, #100]	; 0x64
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fa4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e6      	bne.n	8002f84 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3308      	adds	r3, #8
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8002fd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fde:	e841 2300 	strex	r3, r2, [r1]
 8002fe2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1e5      	bne.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e067      	b.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d04f      	beq.n	80030b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301e:	d147      	bne.n	80030b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003028:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800303e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
 800304a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800304e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e6      	bne.n	800302a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3308      	adds	r3, #8
 8003062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	613b      	str	r3, [r7, #16]
   return(result);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	66bb      	str	r3, [r7, #104]	; 0x68
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3308      	adds	r3, #8
 800307a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800307c:	623a      	str	r2, [r7, #32]
 800307e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003080:	69f9      	ldr	r1, [r7, #28]
 8003082:	6a3a      	ldr	r2, [r7, #32]
 8003084:	e841 2300 	strex	r3, r2, [r1]
 8003088:	61bb      	str	r3, [r7, #24]
   return(result);
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e5      	bne.n	800305c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e010      	b.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4013      	ands	r3, r2
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	f43f af4a 	beq.w	8002f64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3770      	adds	r7, #112	; 0x70
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <Global_GPIO_Init>:
 *      Author: felipe
 */
#include "GPIO.h"


void Global_GPIO_Init() {
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <Global_GPIO_Init+0x74>)
 80030e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e6:	4a1a      	ldr	r2, [pc, #104]	; (8003150 <Global_GPIO_Init+0x74>)
 80030e8:	f043 0304 	orr.w	r3, r3, #4
 80030ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <Global_GPIO_Init+0x74>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030fa:	4b15      	ldr	r3, [pc, #84]	; (8003150 <Global_GPIO_Init+0x74>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fe:	4a14      	ldr	r2, [pc, #80]	; (8003150 <Global_GPIO_Init+0x74>)
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003106:	4b12      	ldr	r3, [pc, #72]	; (8003150 <Global_GPIO_Init+0x74>)
 8003108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <Global_GPIO_Init+0x74>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <Global_GPIO_Init+0x74>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <Global_GPIO_Init+0x74>)
 8003120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <Global_GPIO_Init+0x74>)
 800312c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <Global_GPIO_Init+0x74>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <Global_GPIO_Init+0x74>)
 8003138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000

08003154 <SysConfigClock>:
 */

#include "SysConfig.h"


void SysConfigClock(void){
 8003154:	b580      	push	{r7, lr}
 8003156:	b096      	sub	sp, #88	; 0x58
 8003158:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	2244      	movs	r2, #68	; 0x44
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f8da 	bl	800331c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003168:	463b      	mov	r3, r7
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	609a      	str	r2, [r3, #8]
 8003172:	60da      	str	r2, [r3, #12]
 8003174:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003176:	f44f 7000 	mov.w	r0, #512	; 0x200
 800317a:	f7fe fc05 	bl	8001988 <HAL_PWREx_ControlVoltageScaling>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <SysConfigClock+0x34>
	{
		Error_Handler();
 8003184:	f000 f837 	bl	80031f6 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003188:	2302      	movs	r3, #2
 800318a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800318c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003190:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003192:	2310      	movs	r3, #16
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003196:	2302      	movs	r3, #2
 8003198:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800319a:	2302      	movs	r3, #2
 800319c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80031a2:	230a      	movs	r3, #10
 80031a4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80031a6:	2307      	movs	r3, #7
 80031a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031aa:	2302      	movs	r3, #2
 80031ac:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031ae:	2302      	movs	r3, #2
 80031b0:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fc3c 	bl	8001a34 <HAL_RCC_OscConfig>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <SysConfigClock+0x72>
	{
		Error_Handler();
 80031c2:	f000 f818 	bl	80031f6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c6:	230f      	movs	r3, #15
 80031c8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031ca:	2303      	movs	r3, #3
 80031cc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031da:	463b      	mov	r3, r7
 80031dc:	2104      	movs	r1, #4
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff f804 	bl	80021ec <HAL_RCC_ClockConfig>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <SysConfigClock+0x9a>
	{
		Error_Handler();
 80031ea:	f000 f804 	bl	80031f6 <Error_Handler>
	}
}
 80031ee:	bf00      	nop
 80031f0:	3758      	adds	r7, #88	; 0x58
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <Error_Handler>:



void Error_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031fa:	b672      	cpsid	i
}
 80031fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031fe:	e7fe      	b.n	80031fe <Error_Handler+0x8>

08003200 <USART_Gpio>:
#include "USART.h"


UART_HandleTypeDef USART2_I;

void USART_Gpio(void){
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
	// PA2 -> TX & PA3 -> RX

	GPIO_InitTypeDef GpioInit = {0};
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <USART_Gpio+0x54>)
 8003216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003218:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <USART_Gpio+0x54>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <USART_Gpio+0x54>)
 8003222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	683b      	ldr	r3, [r7, #0]

	GpioInit.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800322c:	230c      	movs	r3, #12
 800322e:	607b      	str	r3, [r7, #4]
	GpioInit.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	60bb      	str	r3, [r7, #8]
	GpioInit.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
	GpioInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8003238:	2302      	movs	r3, #2
 800323a:	613b      	str	r3, [r7, #16]
	GpioInit.Alternate = GPIO_AF7_USART2;
 800323c:	2307      	movs	r3, #7
 800323e:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	4619      	mov	r1, r3
 8003244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003248:	f7fe f9e6 	bl	8001618 <HAL_GPIO_Init>

}
 800324c:	bf00      	nop
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000

08003258 <USART_Init>:

void USART_Init(uint32_t baud){
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	USART_Gpio();
 8003260:	f7ff ffce 	bl	8003200 <USART_Gpio>

	__HAL_RCC_USART2_CLK_ENABLE();
 8003264:	4b15      	ldr	r3, [pc, #84]	; (80032bc <USART_Init+0x64>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <USART_Init+0x64>)
 800326a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326e:	6593      	str	r3, [r2, #88]	; 0x58
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <USART_Init+0x64>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]

	USART2_I.Instance = USART2;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <USART_Init+0x68>)
 800327e:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <USART_Init+0x6c>)
 8003280:	601a      	str	r2, [r3, #0]
	USART2_I.Init.BaudRate = baud;
 8003282:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <USART_Init+0x68>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6053      	str	r3, [r2, #4]
	USART2_I.Init.WordLength = UART_WORDLENGTH_8B;
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <USART_Init+0x68>)
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
	USART2_I.Init.StopBits = UART_STOPBITS_1;
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <USART_Init+0x68>)
 8003290:	2200      	movs	r2, #0
 8003292:	60da      	str	r2, [r3, #12]
	USART2_I.Init.Parity = UART_PARITY_NONE;
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <USART_Init+0x68>)
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
	USART2_I.Init.Mode = UART_MODE_TX_RX;
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <USART_Init+0x68>)
 800329c:	220c      	movs	r2, #12
 800329e:	615a      	str	r2, [r3, #20]
	USART2_I.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032a0:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <USART_Init+0x68>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
	USART2_I.Init.OverSampling = UART_OVERSAMPLING_16;
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <USART_Init+0x68>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&USART2_I);
 80032ac:	4804      	ldr	r0, [pc, #16]	; (80032c0 <USART_Init+0x68>)
 80032ae:	f7ff f9c1 	bl	8002634 <HAL_UART_Init>

}
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
 80032c0:	20000208 	.word	0x20000208
 80032c4:	40004400 	.word	0x40004400

080032c8 <__errno>:
 80032c8:	4b01      	ldr	r3, [pc, #4]	; (80032d0 <__errno+0x8>)
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	2000000c 	.word	0x2000000c

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4d0d      	ldr	r5, [pc, #52]	; (800330c <__libc_init_array+0x38>)
 80032d8:	4c0d      	ldr	r4, [pc, #52]	; (8003310 <__libc_init_array+0x3c>)
 80032da:	1b64      	subs	r4, r4, r5
 80032dc:	10a4      	asrs	r4, r4, #2
 80032de:	2600      	movs	r6, #0
 80032e0:	42a6      	cmp	r6, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	4d0b      	ldr	r5, [pc, #44]	; (8003314 <__libc_init_array+0x40>)
 80032e6:	4c0c      	ldr	r4, [pc, #48]	; (8003318 <__libc_init_array+0x44>)
 80032e8:	f004 fd1c 	bl	8007d24 <_init>
 80032ec:	1b64      	subs	r4, r4, r5
 80032ee:	10a4      	asrs	r4, r4, #2
 80032f0:	2600      	movs	r6, #0
 80032f2:	42a6      	cmp	r6, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032fc:	4798      	blx	r3
 80032fe:	3601      	adds	r6, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	f855 3b04 	ldr.w	r3, [r5], #4
 8003306:	4798      	blx	r3
 8003308:	3601      	adds	r6, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	0800825c 	.word	0x0800825c
 8003310:	0800825c 	.word	0x0800825c
 8003314:	0800825c 	.word	0x0800825c
 8003318:	08008260 	.word	0x08008260

0800331c <memset>:
 800331c:	4402      	add	r2, r0
 800331e:	4603      	mov	r3, r0
 8003320:	4293      	cmp	r3, r2
 8003322:	d100      	bne.n	8003326 <memset+0xa>
 8003324:	4770      	bx	lr
 8003326:	f803 1b01 	strb.w	r1, [r3], #1
 800332a:	e7f9      	b.n	8003320 <memset+0x4>

0800332c <__cvt>:
 800332c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003330:	ec55 4b10 	vmov	r4, r5, d0
 8003334:	2d00      	cmp	r5, #0
 8003336:	460e      	mov	r6, r1
 8003338:	4619      	mov	r1, r3
 800333a:	462b      	mov	r3, r5
 800333c:	bfbb      	ittet	lt
 800333e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003342:	461d      	movlt	r5, r3
 8003344:	2300      	movge	r3, #0
 8003346:	232d      	movlt	r3, #45	; 0x2d
 8003348:	700b      	strb	r3, [r1, #0]
 800334a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800334c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003350:	4691      	mov	r9, r2
 8003352:	f023 0820 	bic.w	r8, r3, #32
 8003356:	bfbc      	itt	lt
 8003358:	4622      	movlt	r2, r4
 800335a:	4614      	movlt	r4, r2
 800335c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003360:	d005      	beq.n	800336e <__cvt+0x42>
 8003362:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003366:	d100      	bne.n	800336a <__cvt+0x3e>
 8003368:	3601      	adds	r6, #1
 800336a:	2102      	movs	r1, #2
 800336c:	e000      	b.n	8003370 <__cvt+0x44>
 800336e:	2103      	movs	r1, #3
 8003370:	ab03      	add	r3, sp, #12
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	ab02      	add	r3, sp, #8
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	ec45 4b10 	vmov	d0, r4, r5
 800337c:	4653      	mov	r3, sl
 800337e:	4632      	mov	r2, r6
 8003380:	f001 fefa 	bl	8005178 <_dtoa_r>
 8003384:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003388:	4607      	mov	r7, r0
 800338a:	d102      	bne.n	8003392 <__cvt+0x66>
 800338c:	f019 0f01 	tst.w	r9, #1
 8003390:	d022      	beq.n	80033d8 <__cvt+0xac>
 8003392:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003396:	eb07 0906 	add.w	r9, r7, r6
 800339a:	d110      	bne.n	80033be <__cvt+0x92>
 800339c:	783b      	ldrb	r3, [r7, #0]
 800339e:	2b30      	cmp	r3, #48	; 0x30
 80033a0:	d10a      	bne.n	80033b8 <__cvt+0x8c>
 80033a2:	2200      	movs	r2, #0
 80033a4:	2300      	movs	r3, #0
 80033a6:	4620      	mov	r0, r4
 80033a8:	4629      	mov	r1, r5
 80033aa:	f7fd fb8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80033ae:	b918      	cbnz	r0, 80033b8 <__cvt+0x8c>
 80033b0:	f1c6 0601 	rsb	r6, r6, #1
 80033b4:	f8ca 6000 	str.w	r6, [sl]
 80033b8:	f8da 3000 	ldr.w	r3, [sl]
 80033bc:	4499      	add	r9, r3
 80033be:	2200      	movs	r2, #0
 80033c0:	2300      	movs	r3, #0
 80033c2:	4620      	mov	r0, r4
 80033c4:	4629      	mov	r1, r5
 80033c6:	f7fd fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80033ca:	b108      	cbz	r0, 80033d0 <__cvt+0xa4>
 80033cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80033d0:	2230      	movs	r2, #48	; 0x30
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	454b      	cmp	r3, r9
 80033d6:	d307      	bcc.n	80033e8 <__cvt+0xbc>
 80033d8:	9b03      	ldr	r3, [sp, #12]
 80033da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033dc:	1bdb      	subs	r3, r3, r7
 80033de:	4638      	mov	r0, r7
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	b004      	add	sp, #16
 80033e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e8:	1c59      	adds	r1, r3, #1
 80033ea:	9103      	str	r1, [sp, #12]
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	e7f0      	b.n	80033d2 <__cvt+0xa6>

080033f0 <__exponent>:
 80033f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033f2:	4603      	mov	r3, r0
 80033f4:	2900      	cmp	r1, #0
 80033f6:	bfb8      	it	lt
 80033f8:	4249      	neglt	r1, r1
 80033fa:	f803 2b02 	strb.w	r2, [r3], #2
 80033fe:	bfb4      	ite	lt
 8003400:	222d      	movlt	r2, #45	; 0x2d
 8003402:	222b      	movge	r2, #43	; 0x2b
 8003404:	2909      	cmp	r1, #9
 8003406:	7042      	strb	r2, [r0, #1]
 8003408:	dd2a      	ble.n	8003460 <__exponent+0x70>
 800340a:	f10d 0407 	add.w	r4, sp, #7
 800340e:	46a4      	mov	ip, r4
 8003410:	270a      	movs	r7, #10
 8003412:	46a6      	mov	lr, r4
 8003414:	460a      	mov	r2, r1
 8003416:	fb91 f6f7 	sdiv	r6, r1, r7
 800341a:	fb07 1516 	mls	r5, r7, r6, r1
 800341e:	3530      	adds	r5, #48	; 0x30
 8003420:	2a63      	cmp	r2, #99	; 0x63
 8003422:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003426:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800342a:	4631      	mov	r1, r6
 800342c:	dcf1      	bgt.n	8003412 <__exponent+0x22>
 800342e:	3130      	adds	r1, #48	; 0x30
 8003430:	f1ae 0502 	sub.w	r5, lr, #2
 8003434:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003438:	1c44      	adds	r4, r0, #1
 800343a:	4629      	mov	r1, r5
 800343c:	4561      	cmp	r1, ip
 800343e:	d30a      	bcc.n	8003456 <__exponent+0x66>
 8003440:	f10d 0209 	add.w	r2, sp, #9
 8003444:	eba2 020e 	sub.w	r2, r2, lr
 8003448:	4565      	cmp	r5, ip
 800344a:	bf88      	it	hi
 800344c:	2200      	movhi	r2, #0
 800344e:	4413      	add	r3, r2
 8003450:	1a18      	subs	r0, r3, r0
 8003452:	b003      	add	sp, #12
 8003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800345a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800345e:	e7ed      	b.n	800343c <__exponent+0x4c>
 8003460:	2330      	movs	r3, #48	; 0x30
 8003462:	3130      	adds	r1, #48	; 0x30
 8003464:	7083      	strb	r3, [r0, #2]
 8003466:	70c1      	strb	r1, [r0, #3]
 8003468:	1d03      	adds	r3, r0, #4
 800346a:	e7f1      	b.n	8003450 <__exponent+0x60>

0800346c <_printf_float>:
 800346c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003470:	ed2d 8b02 	vpush	{d8}
 8003474:	b08d      	sub	sp, #52	; 0x34
 8003476:	460c      	mov	r4, r1
 8003478:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800347c:	4616      	mov	r6, r2
 800347e:	461f      	mov	r7, r3
 8003480:	4605      	mov	r5, r0
 8003482:	f003 f98d 	bl	80067a0 <_localeconv_r>
 8003486:	f8d0 a000 	ldr.w	sl, [r0]
 800348a:	4650      	mov	r0, sl
 800348c:	f7fc fea0 	bl	80001d0 <strlen>
 8003490:	2300      	movs	r3, #0
 8003492:	930a      	str	r3, [sp, #40]	; 0x28
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	9305      	str	r3, [sp, #20]
 8003498:	f8d8 3000 	ldr.w	r3, [r8]
 800349c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80034a0:	3307      	adds	r3, #7
 80034a2:	f023 0307 	bic.w	r3, r3, #7
 80034a6:	f103 0208 	add.w	r2, r3, #8
 80034aa:	f8c8 2000 	str.w	r2, [r8]
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80034b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80034ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80034be:	9307      	str	r3, [sp, #28]
 80034c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80034c4:	ee08 0a10 	vmov	s16, r0
 80034c8:	4b9f      	ldr	r3, [pc, #636]	; (8003748 <_printf_float+0x2dc>)
 80034ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034d2:	f7fd fb2b 	bl	8000b2c <__aeabi_dcmpun>
 80034d6:	bb88      	cbnz	r0, 800353c <_printf_float+0xd0>
 80034d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034dc:	4b9a      	ldr	r3, [pc, #616]	; (8003748 <_printf_float+0x2dc>)
 80034de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034e2:	f7fd fb05 	bl	8000af0 <__aeabi_dcmple>
 80034e6:	bb48      	cbnz	r0, 800353c <_printf_float+0xd0>
 80034e8:	2200      	movs	r2, #0
 80034ea:	2300      	movs	r3, #0
 80034ec:	4640      	mov	r0, r8
 80034ee:	4649      	mov	r1, r9
 80034f0:	f7fd faf4 	bl	8000adc <__aeabi_dcmplt>
 80034f4:	b110      	cbz	r0, 80034fc <_printf_float+0x90>
 80034f6:	232d      	movs	r3, #45	; 0x2d
 80034f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034fc:	4b93      	ldr	r3, [pc, #588]	; (800374c <_printf_float+0x2e0>)
 80034fe:	4894      	ldr	r0, [pc, #592]	; (8003750 <_printf_float+0x2e4>)
 8003500:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003504:	bf94      	ite	ls
 8003506:	4698      	movls	r8, r3
 8003508:	4680      	movhi	r8, r0
 800350a:	2303      	movs	r3, #3
 800350c:	6123      	str	r3, [r4, #16]
 800350e:	9b05      	ldr	r3, [sp, #20]
 8003510:	f023 0204 	bic.w	r2, r3, #4
 8003514:	6022      	str	r2, [r4, #0]
 8003516:	f04f 0900 	mov.w	r9, #0
 800351a:	9700      	str	r7, [sp, #0]
 800351c:	4633      	mov	r3, r6
 800351e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003520:	4621      	mov	r1, r4
 8003522:	4628      	mov	r0, r5
 8003524:	f000 f9d8 	bl	80038d8 <_printf_common>
 8003528:	3001      	adds	r0, #1
 800352a:	f040 8090 	bne.w	800364e <_printf_float+0x1e2>
 800352e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003532:	b00d      	add	sp, #52	; 0x34
 8003534:	ecbd 8b02 	vpop	{d8}
 8003538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353c:	4642      	mov	r2, r8
 800353e:	464b      	mov	r3, r9
 8003540:	4640      	mov	r0, r8
 8003542:	4649      	mov	r1, r9
 8003544:	f7fd faf2 	bl	8000b2c <__aeabi_dcmpun>
 8003548:	b140      	cbz	r0, 800355c <_printf_float+0xf0>
 800354a:	464b      	mov	r3, r9
 800354c:	2b00      	cmp	r3, #0
 800354e:	bfbc      	itt	lt
 8003550:	232d      	movlt	r3, #45	; 0x2d
 8003552:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003556:	487f      	ldr	r0, [pc, #508]	; (8003754 <_printf_float+0x2e8>)
 8003558:	4b7f      	ldr	r3, [pc, #508]	; (8003758 <_printf_float+0x2ec>)
 800355a:	e7d1      	b.n	8003500 <_printf_float+0x94>
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003562:	9206      	str	r2, [sp, #24]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	d13f      	bne.n	80035e8 <_printf_float+0x17c>
 8003568:	2306      	movs	r3, #6
 800356a:	6063      	str	r3, [r4, #4]
 800356c:	9b05      	ldr	r3, [sp, #20]
 800356e:	6861      	ldr	r1, [r4, #4]
 8003570:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003574:	2300      	movs	r3, #0
 8003576:	9303      	str	r3, [sp, #12]
 8003578:	ab0a      	add	r3, sp, #40	; 0x28
 800357a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800357e:	ab09      	add	r3, sp, #36	; 0x24
 8003580:	ec49 8b10 	vmov	d0, r8, r9
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	6022      	str	r2, [r4, #0]
 8003588:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800358c:	4628      	mov	r0, r5
 800358e:	f7ff fecd 	bl	800332c <__cvt>
 8003592:	9b06      	ldr	r3, [sp, #24]
 8003594:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003596:	2b47      	cmp	r3, #71	; 0x47
 8003598:	4680      	mov	r8, r0
 800359a:	d108      	bne.n	80035ae <_printf_float+0x142>
 800359c:	1cc8      	adds	r0, r1, #3
 800359e:	db02      	blt.n	80035a6 <_printf_float+0x13a>
 80035a0:	6863      	ldr	r3, [r4, #4]
 80035a2:	4299      	cmp	r1, r3
 80035a4:	dd41      	ble.n	800362a <_printf_float+0x1be>
 80035a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80035aa:	fa5f fb8b 	uxtb.w	fp, fp
 80035ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80035b2:	d820      	bhi.n	80035f6 <_printf_float+0x18a>
 80035b4:	3901      	subs	r1, #1
 80035b6:	465a      	mov	r2, fp
 80035b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80035bc:	9109      	str	r1, [sp, #36]	; 0x24
 80035be:	f7ff ff17 	bl	80033f0 <__exponent>
 80035c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035c4:	1813      	adds	r3, r2, r0
 80035c6:	2a01      	cmp	r2, #1
 80035c8:	4681      	mov	r9, r0
 80035ca:	6123      	str	r3, [r4, #16]
 80035cc:	dc02      	bgt.n	80035d4 <_printf_float+0x168>
 80035ce:	6822      	ldr	r2, [r4, #0]
 80035d0:	07d2      	lsls	r2, r2, #31
 80035d2:	d501      	bpl.n	80035d8 <_printf_float+0x16c>
 80035d4:	3301      	adds	r3, #1
 80035d6:	6123      	str	r3, [r4, #16]
 80035d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d09c      	beq.n	800351a <_printf_float+0xae>
 80035e0:	232d      	movs	r3, #45	; 0x2d
 80035e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035e6:	e798      	b.n	800351a <_printf_float+0xae>
 80035e8:	9a06      	ldr	r2, [sp, #24]
 80035ea:	2a47      	cmp	r2, #71	; 0x47
 80035ec:	d1be      	bne.n	800356c <_printf_float+0x100>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1bc      	bne.n	800356c <_printf_float+0x100>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e7b9      	b.n	800356a <_printf_float+0xfe>
 80035f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80035fa:	d118      	bne.n	800362e <_printf_float+0x1c2>
 80035fc:	2900      	cmp	r1, #0
 80035fe:	6863      	ldr	r3, [r4, #4]
 8003600:	dd0b      	ble.n	800361a <_printf_float+0x1ae>
 8003602:	6121      	str	r1, [r4, #16]
 8003604:	b913      	cbnz	r3, 800360c <_printf_float+0x1a0>
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	07d0      	lsls	r0, r2, #31
 800360a:	d502      	bpl.n	8003612 <_printf_float+0x1a6>
 800360c:	3301      	adds	r3, #1
 800360e:	440b      	add	r3, r1
 8003610:	6123      	str	r3, [r4, #16]
 8003612:	65a1      	str	r1, [r4, #88]	; 0x58
 8003614:	f04f 0900 	mov.w	r9, #0
 8003618:	e7de      	b.n	80035d8 <_printf_float+0x16c>
 800361a:	b913      	cbnz	r3, 8003622 <_printf_float+0x1b6>
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	07d2      	lsls	r2, r2, #31
 8003620:	d501      	bpl.n	8003626 <_printf_float+0x1ba>
 8003622:	3302      	adds	r3, #2
 8003624:	e7f4      	b.n	8003610 <_printf_float+0x1a4>
 8003626:	2301      	movs	r3, #1
 8003628:	e7f2      	b.n	8003610 <_printf_float+0x1a4>
 800362a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800362e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003630:	4299      	cmp	r1, r3
 8003632:	db05      	blt.n	8003640 <_printf_float+0x1d4>
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	6121      	str	r1, [r4, #16]
 8003638:	07d8      	lsls	r0, r3, #31
 800363a:	d5ea      	bpl.n	8003612 <_printf_float+0x1a6>
 800363c:	1c4b      	adds	r3, r1, #1
 800363e:	e7e7      	b.n	8003610 <_printf_float+0x1a4>
 8003640:	2900      	cmp	r1, #0
 8003642:	bfd4      	ite	le
 8003644:	f1c1 0202 	rsble	r2, r1, #2
 8003648:	2201      	movgt	r2, #1
 800364a:	4413      	add	r3, r2
 800364c:	e7e0      	b.n	8003610 <_printf_float+0x1a4>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	055a      	lsls	r2, r3, #21
 8003652:	d407      	bmi.n	8003664 <_printf_float+0x1f8>
 8003654:	6923      	ldr	r3, [r4, #16]
 8003656:	4642      	mov	r2, r8
 8003658:	4631      	mov	r1, r6
 800365a:	4628      	mov	r0, r5
 800365c:	47b8      	blx	r7
 800365e:	3001      	adds	r0, #1
 8003660:	d12c      	bne.n	80036bc <_printf_float+0x250>
 8003662:	e764      	b.n	800352e <_printf_float+0xc2>
 8003664:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003668:	f240 80e0 	bls.w	800382c <_printf_float+0x3c0>
 800366c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003670:	2200      	movs	r2, #0
 8003672:	2300      	movs	r3, #0
 8003674:	f7fd fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8003678:	2800      	cmp	r0, #0
 800367a:	d034      	beq.n	80036e6 <_printf_float+0x27a>
 800367c:	4a37      	ldr	r2, [pc, #220]	; (800375c <_printf_float+0x2f0>)
 800367e:	2301      	movs	r3, #1
 8003680:	4631      	mov	r1, r6
 8003682:	4628      	mov	r0, r5
 8003684:	47b8      	blx	r7
 8003686:	3001      	adds	r0, #1
 8003688:	f43f af51 	beq.w	800352e <_printf_float+0xc2>
 800368c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003690:	429a      	cmp	r2, r3
 8003692:	db02      	blt.n	800369a <_printf_float+0x22e>
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	07d8      	lsls	r0, r3, #31
 8003698:	d510      	bpl.n	80036bc <_printf_float+0x250>
 800369a:	ee18 3a10 	vmov	r3, s16
 800369e:	4652      	mov	r2, sl
 80036a0:	4631      	mov	r1, r6
 80036a2:	4628      	mov	r0, r5
 80036a4:	47b8      	blx	r7
 80036a6:	3001      	adds	r0, #1
 80036a8:	f43f af41 	beq.w	800352e <_printf_float+0xc2>
 80036ac:	f04f 0800 	mov.w	r8, #0
 80036b0:	f104 091a 	add.w	r9, r4, #26
 80036b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036b6:	3b01      	subs	r3, #1
 80036b8:	4543      	cmp	r3, r8
 80036ba:	dc09      	bgt.n	80036d0 <_printf_float+0x264>
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	079b      	lsls	r3, r3, #30
 80036c0:	f100 8105 	bmi.w	80038ce <_printf_float+0x462>
 80036c4:	68e0      	ldr	r0, [r4, #12]
 80036c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036c8:	4298      	cmp	r0, r3
 80036ca:	bfb8      	it	lt
 80036cc:	4618      	movlt	r0, r3
 80036ce:	e730      	b.n	8003532 <_printf_float+0xc6>
 80036d0:	2301      	movs	r3, #1
 80036d2:	464a      	mov	r2, r9
 80036d4:	4631      	mov	r1, r6
 80036d6:	4628      	mov	r0, r5
 80036d8:	47b8      	blx	r7
 80036da:	3001      	adds	r0, #1
 80036dc:	f43f af27 	beq.w	800352e <_printf_float+0xc2>
 80036e0:	f108 0801 	add.w	r8, r8, #1
 80036e4:	e7e6      	b.n	80036b4 <_printf_float+0x248>
 80036e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	dc39      	bgt.n	8003760 <_printf_float+0x2f4>
 80036ec:	4a1b      	ldr	r2, [pc, #108]	; (800375c <_printf_float+0x2f0>)
 80036ee:	2301      	movs	r3, #1
 80036f0:	4631      	mov	r1, r6
 80036f2:	4628      	mov	r0, r5
 80036f4:	47b8      	blx	r7
 80036f6:	3001      	adds	r0, #1
 80036f8:	f43f af19 	beq.w	800352e <_printf_float+0xc2>
 80036fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003700:	4313      	orrs	r3, r2
 8003702:	d102      	bne.n	800370a <_printf_float+0x29e>
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	07d9      	lsls	r1, r3, #31
 8003708:	d5d8      	bpl.n	80036bc <_printf_float+0x250>
 800370a:	ee18 3a10 	vmov	r3, s16
 800370e:	4652      	mov	r2, sl
 8003710:	4631      	mov	r1, r6
 8003712:	4628      	mov	r0, r5
 8003714:	47b8      	blx	r7
 8003716:	3001      	adds	r0, #1
 8003718:	f43f af09 	beq.w	800352e <_printf_float+0xc2>
 800371c:	f04f 0900 	mov.w	r9, #0
 8003720:	f104 0a1a 	add.w	sl, r4, #26
 8003724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003726:	425b      	negs	r3, r3
 8003728:	454b      	cmp	r3, r9
 800372a:	dc01      	bgt.n	8003730 <_printf_float+0x2c4>
 800372c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800372e:	e792      	b.n	8003656 <_printf_float+0x1ea>
 8003730:	2301      	movs	r3, #1
 8003732:	4652      	mov	r2, sl
 8003734:	4631      	mov	r1, r6
 8003736:	4628      	mov	r0, r5
 8003738:	47b8      	blx	r7
 800373a:	3001      	adds	r0, #1
 800373c:	f43f aef7 	beq.w	800352e <_printf_float+0xc2>
 8003740:	f109 0901 	add.w	r9, r9, #1
 8003744:	e7ee      	b.n	8003724 <_printf_float+0x2b8>
 8003746:	bf00      	nop
 8003748:	7fefffff 	.word	0x7fefffff
 800374c:	08007da8 	.word	0x08007da8
 8003750:	08007dac 	.word	0x08007dac
 8003754:	08007db4 	.word	0x08007db4
 8003758:	08007db0 	.word	0x08007db0
 800375c:	08007db8 	.word	0x08007db8
 8003760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003762:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003764:	429a      	cmp	r2, r3
 8003766:	bfa8      	it	ge
 8003768:	461a      	movge	r2, r3
 800376a:	2a00      	cmp	r2, #0
 800376c:	4691      	mov	r9, r2
 800376e:	dc37      	bgt.n	80037e0 <_printf_float+0x374>
 8003770:	f04f 0b00 	mov.w	fp, #0
 8003774:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003778:	f104 021a 	add.w	r2, r4, #26
 800377c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800377e:	9305      	str	r3, [sp, #20]
 8003780:	eba3 0309 	sub.w	r3, r3, r9
 8003784:	455b      	cmp	r3, fp
 8003786:	dc33      	bgt.n	80037f0 <_printf_float+0x384>
 8003788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800378c:	429a      	cmp	r2, r3
 800378e:	db3b      	blt.n	8003808 <_printf_float+0x39c>
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	07da      	lsls	r2, r3, #31
 8003794:	d438      	bmi.n	8003808 <_printf_float+0x39c>
 8003796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003798:	9a05      	ldr	r2, [sp, #20]
 800379a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800379c:	1a9a      	subs	r2, r3, r2
 800379e:	eba3 0901 	sub.w	r9, r3, r1
 80037a2:	4591      	cmp	r9, r2
 80037a4:	bfa8      	it	ge
 80037a6:	4691      	movge	r9, r2
 80037a8:	f1b9 0f00 	cmp.w	r9, #0
 80037ac:	dc35      	bgt.n	800381a <_printf_float+0x3ae>
 80037ae:	f04f 0800 	mov.w	r8, #0
 80037b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037b6:	f104 0a1a 	add.w	sl, r4, #26
 80037ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	eba3 0309 	sub.w	r3, r3, r9
 80037c4:	4543      	cmp	r3, r8
 80037c6:	f77f af79 	ble.w	80036bc <_printf_float+0x250>
 80037ca:	2301      	movs	r3, #1
 80037cc:	4652      	mov	r2, sl
 80037ce:	4631      	mov	r1, r6
 80037d0:	4628      	mov	r0, r5
 80037d2:	47b8      	blx	r7
 80037d4:	3001      	adds	r0, #1
 80037d6:	f43f aeaa 	beq.w	800352e <_printf_float+0xc2>
 80037da:	f108 0801 	add.w	r8, r8, #1
 80037de:	e7ec      	b.n	80037ba <_printf_float+0x34e>
 80037e0:	4613      	mov	r3, r2
 80037e2:	4631      	mov	r1, r6
 80037e4:	4642      	mov	r2, r8
 80037e6:	4628      	mov	r0, r5
 80037e8:	47b8      	blx	r7
 80037ea:	3001      	adds	r0, #1
 80037ec:	d1c0      	bne.n	8003770 <_printf_float+0x304>
 80037ee:	e69e      	b.n	800352e <_printf_float+0xc2>
 80037f0:	2301      	movs	r3, #1
 80037f2:	4631      	mov	r1, r6
 80037f4:	4628      	mov	r0, r5
 80037f6:	9205      	str	r2, [sp, #20]
 80037f8:	47b8      	blx	r7
 80037fa:	3001      	adds	r0, #1
 80037fc:	f43f ae97 	beq.w	800352e <_printf_float+0xc2>
 8003800:	9a05      	ldr	r2, [sp, #20]
 8003802:	f10b 0b01 	add.w	fp, fp, #1
 8003806:	e7b9      	b.n	800377c <_printf_float+0x310>
 8003808:	ee18 3a10 	vmov	r3, s16
 800380c:	4652      	mov	r2, sl
 800380e:	4631      	mov	r1, r6
 8003810:	4628      	mov	r0, r5
 8003812:	47b8      	blx	r7
 8003814:	3001      	adds	r0, #1
 8003816:	d1be      	bne.n	8003796 <_printf_float+0x32a>
 8003818:	e689      	b.n	800352e <_printf_float+0xc2>
 800381a:	9a05      	ldr	r2, [sp, #20]
 800381c:	464b      	mov	r3, r9
 800381e:	4442      	add	r2, r8
 8003820:	4631      	mov	r1, r6
 8003822:	4628      	mov	r0, r5
 8003824:	47b8      	blx	r7
 8003826:	3001      	adds	r0, #1
 8003828:	d1c1      	bne.n	80037ae <_printf_float+0x342>
 800382a:	e680      	b.n	800352e <_printf_float+0xc2>
 800382c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800382e:	2a01      	cmp	r2, #1
 8003830:	dc01      	bgt.n	8003836 <_printf_float+0x3ca>
 8003832:	07db      	lsls	r3, r3, #31
 8003834:	d538      	bpl.n	80038a8 <_printf_float+0x43c>
 8003836:	2301      	movs	r3, #1
 8003838:	4642      	mov	r2, r8
 800383a:	4631      	mov	r1, r6
 800383c:	4628      	mov	r0, r5
 800383e:	47b8      	blx	r7
 8003840:	3001      	adds	r0, #1
 8003842:	f43f ae74 	beq.w	800352e <_printf_float+0xc2>
 8003846:	ee18 3a10 	vmov	r3, s16
 800384a:	4652      	mov	r2, sl
 800384c:	4631      	mov	r1, r6
 800384e:	4628      	mov	r0, r5
 8003850:	47b8      	blx	r7
 8003852:	3001      	adds	r0, #1
 8003854:	f43f ae6b 	beq.w	800352e <_printf_float+0xc2>
 8003858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800385c:	2200      	movs	r2, #0
 800385e:	2300      	movs	r3, #0
 8003860:	f7fd f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8003864:	b9d8      	cbnz	r0, 800389e <_printf_float+0x432>
 8003866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003868:	f108 0201 	add.w	r2, r8, #1
 800386c:	3b01      	subs	r3, #1
 800386e:	4631      	mov	r1, r6
 8003870:	4628      	mov	r0, r5
 8003872:	47b8      	blx	r7
 8003874:	3001      	adds	r0, #1
 8003876:	d10e      	bne.n	8003896 <_printf_float+0x42a>
 8003878:	e659      	b.n	800352e <_printf_float+0xc2>
 800387a:	2301      	movs	r3, #1
 800387c:	4652      	mov	r2, sl
 800387e:	4631      	mov	r1, r6
 8003880:	4628      	mov	r0, r5
 8003882:	47b8      	blx	r7
 8003884:	3001      	adds	r0, #1
 8003886:	f43f ae52 	beq.w	800352e <_printf_float+0xc2>
 800388a:	f108 0801 	add.w	r8, r8, #1
 800388e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003890:	3b01      	subs	r3, #1
 8003892:	4543      	cmp	r3, r8
 8003894:	dcf1      	bgt.n	800387a <_printf_float+0x40e>
 8003896:	464b      	mov	r3, r9
 8003898:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800389c:	e6dc      	b.n	8003658 <_printf_float+0x1ec>
 800389e:	f04f 0800 	mov.w	r8, #0
 80038a2:	f104 0a1a 	add.w	sl, r4, #26
 80038a6:	e7f2      	b.n	800388e <_printf_float+0x422>
 80038a8:	2301      	movs	r3, #1
 80038aa:	4642      	mov	r2, r8
 80038ac:	e7df      	b.n	800386e <_printf_float+0x402>
 80038ae:	2301      	movs	r3, #1
 80038b0:	464a      	mov	r2, r9
 80038b2:	4631      	mov	r1, r6
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b8      	blx	r7
 80038b8:	3001      	adds	r0, #1
 80038ba:	f43f ae38 	beq.w	800352e <_printf_float+0xc2>
 80038be:	f108 0801 	add.w	r8, r8, #1
 80038c2:	68e3      	ldr	r3, [r4, #12]
 80038c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038c6:	1a5b      	subs	r3, r3, r1
 80038c8:	4543      	cmp	r3, r8
 80038ca:	dcf0      	bgt.n	80038ae <_printf_float+0x442>
 80038cc:	e6fa      	b.n	80036c4 <_printf_float+0x258>
 80038ce:	f04f 0800 	mov.w	r8, #0
 80038d2:	f104 0919 	add.w	r9, r4, #25
 80038d6:	e7f4      	b.n	80038c2 <_printf_float+0x456>

080038d8 <_printf_common>:
 80038d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038dc:	4616      	mov	r6, r2
 80038de:	4699      	mov	r9, r3
 80038e0:	688a      	ldr	r2, [r1, #8]
 80038e2:	690b      	ldr	r3, [r1, #16]
 80038e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038e8:	4293      	cmp	r3, r2
 80038ea:	bfb8      	it	lt
 80038ec:	4613      	movlt	r3, r2
 80038ee:	6033      	str	r3, [r6, #0]
 80038f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038f4:	4607      	mov	r7, r0
 80038f6:	460c      	mov	r4, r1
 80038f8:	b10a      	cbz	r2, 80038fe <_printf_common+0x26>
 80038fa:	3301      	adds	r3, #1
 80038fc:	6033      	str	r3, [r6, #0]
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	0699      	lsls	r1, r3, #26
 8003902:	bf42      	ittt	mi
 8003904:	6833      	ldrmi	r3, [r6, #0]
 8003906:	3302      	addmi	r3, #2
 8003908:	6033      	strmi	r3, [r6, #0]
 800390a:	6825      	ldr	r5, [r4, #0]
 800390c:	f015 0506 	ands.w	r5, r5, #6
 8003910:	d106      	bne.n	8003920 <_printf_common+0x48>
 8003912:	f104 0a19 	add.w	sl, r4, #25
 8003916:	68e3      	ldr	r3, [r4, #12]
 8003918:	6832      	ldr	r2, [r6, #0]
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	42ab      	cmp	r3, r5
 800391e:	dc26      	bgt.n	800396e <_printf_common+0x96>
 8003920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003924:	1e13      	subs	r3, r2, #0
 8003926:	6822      	ldr	r2, [r4, #0]
 8003928:	bf18      	it	ne
 800392a:	2301      	movne	r3, #1
 800392c:	0692      	lsls	r2, r2, #26
 800392e:	d42b      	bmi.n	8003988 <_printf_common+0xb0>
 8003930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003934:	4649      	mov	r1, r9
 8003936:	4638      	mov	r0, r7
 8003938:	47c0      	blx	r8
 800393a:	3001      	adds	r0, #1
 800393c:	d01e      	beq.n	800397c <_printf_common+0xa4>
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	68e5      	ldr	r5, [r4, #12]
 8003942:	6832      	ldr	r2, [r6, #0]
 8003944:	f003 0306 	and.w	r3, r3, #6
 8003948:	2b04      	cmp	r3, #4
 800394a:	bf08      	it	eq
 800394c:	1aad      	subeq	r5, r5, r2
 800394e:	68a3      	ldr	r3, [r4, #8]
 8003950:	6922      	ldr	r2, [r4, #16]
 8003952:	bf0c      	ite	eq
 8003954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003958:	2500      	movne	r5, #0
 800395a:	4293      	cmp	r3, r2
 800395c:	bfc4      	itt	gt
 800395e:	1a9b      	subgt	r3, r3, r2
 8003960:	18ed      	addgt	r5, r5, r3
 8003962:	2600      	movs	r6, #0
 8003964:	341a      	adds	r4, #26
 8003966:	42b5      	cmp	r5, r6
 8003968:	d11a      	bne.n	80039a0 <_printf_common+0xc8>
 800396a:	2000      	movs	r0, #0
 800396c:	e008      	b.n	8003980 <_printf_common+0xa8>
 800396e:	2301      	movs	r3, #1
 8003970:	4652      	mov	r2, sl
 8003972:	4649      	mov	r1, r9
 8003974:	4638      	mov	r0, r7
 8003976:	47c0      	blx	r8
 8003978:	3001      	adds	r0, #1
 800397a:	d103      	bne.n	8003984 <_printf_common+0xac>
 800397c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003984:	3501      	adds	r5, #1
 8003986:	e7c6      	b.n	8003916 <_printf_common+0x3e>
 8003988:	18e1      	adds	r1, r4, r3
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	2030      	movs	r0, #48	; 0x30
 800398e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003992:	4422      	add	r2, r4
 8003994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800399c:	3302      	adds	r3, #2
 800399e:	e7c7      	b.n	8003930 <_printf_common+0x58>
 80039a0:	2301      	movs	r3, #1
 80039a2:	4622      	mov	r2, r4
 80039a4:	4649      	mov	r1, r9
 80039a6:	4638      	mov	r0, r7
 80039a8:	47c0      	blx	r8
 80039aa:	3001      	adds	r0, #1
 80039ac:	d0e6      	beq.n	800397c <_printf_common+0xa4>
 80039ae:	3601      	adds	r6, #1
 80039b0:	e7d9      	b.n	8003966 <_printf_common+0x8e>
	...

080039b4 <_printf_i>:
 80039b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039b8:	7e0f      	ldrb	r7, [r1, #24]
 80039ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039bc:	2f78      	cmp	r7, #120	; 0x78
 80039be:	4691      	mov	r9, r2
 80039c0:	4680      	mov	r8, r0
 80039c2:	460c      	mov	r4, r1
 80039c4:	469a      	mov	sl, r3
 80039c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039ca:	d807      	bhi.n	80039dc <_printf_i+0x28>
 80039cc:	2f62      	cmp	r7, #98	; 0x62
 80039ce:	d80a      	bhi.n	80039e6 <_printf_i+0x32>
 80039d0:	2f00      	cmp	r7, #0
 80039d2:	f000 80d8 	beq.w	8003b86 <_printf_i+0x1d2>
 80039d6:	2f58      	cmp	r7, #88	; 0x58
 80039d8:	f000 80a3 	beq.w	8003b22 <_printf_i+0x16e>
 80039dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039e4:	e03a      	b.n	8003a5c <_printf_i+0xa8>
 80039e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ea:	2b15      	cmp	r3, #21
 80039ec:	d8f6      	bhi.n	80039dc <_printf_i+0x28>
 80039ee:	a101      	add	r1, pc, #4	; (adr r1, 80039f4 <_printf_i+0x40>)
 80039f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039f4:	08003a4d 	.word	0x08003a4d
 80039f8:	08003a61 	.word	0x08003a61
 80039fc:	080039dd 	.word	0x080039dd
 8003a00:	080039dd 	.word	0x080039dd
 8003a04:	080039dd 	.word	0x080039dd
 8003a08:	080039dd 	.word	0x080039dd
 8003a0c:	08003a61 	.word	0x08003a61
 8003a10:	080039dd 	.word	0x080039dd
 8003a14:	080039dd 	.word	0x080039dd
 8003a18:	080039dd 	.word	0x080039dd
 8003a1c:	080039dd 	.word	0x080039dd
 8003a20:	08003b6d 	.word	0x08003b6d
 8003a24:	08003a91 	.word	0x08003a91
 8003a28:	08003b4f 	.word	0x08003b4f
 8003a2c:	080039dd 	.word	0x080039dd
 8003a30:	080039dd 	.word	0x080039dd
 8003a34:	08003b8f 	.word	0x08003b8f
 8003a38:	080039dd 	.word	0x080039dd
 8003a3c:	08003a91 	.word	0x08003a91
 8003a40:	080039dd 	.word	0x080039dd
 8003a44:	080039dd 	.word	0x080039dd
 8003a48:	08003b57 	.word	0x08003b57
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	1d1a      	adds	r2, r3, #4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	602a      	str	r2, [r5, #0]
 8003a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0a3      	b.n	8003ba8 <_printf_i+0x1f4>
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	6829      	ldr	r1, [r5, #0]
 8003a64:	0606      	lsls	r6, r0, #24
 8003a66:	f101 0304 	add.w	r3, r1, #4
 8003a6a:	d50a      	bpl.n	8003a82 <_printf_i+0xce>
 8003a6c:	680e      	ldr	r6, [r1, #0]
 8003a6e:	602b      	str	r3, [r5, #0]
 8003a70:	2e00      	cmp	r6, #0
 8003a72:	da03      	bge.n	8003a7c <_printf_i+0xc8>
 8003a74:	232d      	movs	r3, #45	; 0x2d
 8003a76:	4276      	negs	r6, r6
 8003a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a7c:	485e      	ldr	r0, [pc, #376]	; (8003bf8 <_printf_i+0x244>)
 8003a7e:	230a      	movs	r3, #10
 8003a80:	e019      	b.n	8003ab6 <_printf_i+0x102>
 8003a82:	680e      	ldr	r6, [r1, #0]
 8003a84:	602b      	str	r3, [r5, #0]
 8003a86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a8a:	bf18      	it	ne
 8003a8c:	b236      	sxthne	r6, r6
 8003a8e:	e7ef      	b.n	8003a70 <_printf_i+0xbc>
 8003a90:	682b      	ldr	r3, [r5, #0]
 8003a92:	6820      	ldr	r0, [r4, #0]
 8003a94:	1d19      	adds	r1, r3, #4
 8003a96:	6029      	str	r1, [r5, #0]
 8003a98:	0601      	lsls	r1, r0, #24
 8003a9a:	d501      	bpl.n	8003aa0 <_printf_i+0xec>
 8003a9c:	681e      	ldr	r6, [r3, #0]
 8003a9e:	e002      	b.n	8003aa6 <_printf_i+0xf2>
 8003aa0:	0646      	lsls	r6, r0, #25
 8003aa2:	d5fb      	bpl.n	8003a9c <_printf_i+0xe8>
 8003aa4:	881e      	ldrh	r6, [r3, #0]
 8003aa6:	4854      	ldr	r0, [pc, #336]	; (8003bf8 <_printf_i+0x244>)
 8003aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8003aaa:	bf0c      	ite	eq
 8003aac:	2308      	moveq	r3, #8
 8003aae:	230a      	movne	r3, #10
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ab6:	6865      	ldr	r5, [r4, #4]
 8003ab8:	60a5      	str	r5, [r4, #8]
 8003aba:	2d00      	cmp	r5, #0
 8003abc:	bfa2      	ittt	ge
 8003abe:	6821      	ldrge	r1, [r4, #0]
 8003ac0:	f021 0104 	bicge.w	r1, r1, #4
 8003ac4:	6021      	strge	r1, [r4, #0]
 8003ac6:	b90e      	cbnz	r6, 8003acc <_printf_i+0x118>
 8003ac8:	2d00      	cmp	r5, #0
 8003aca:	d04d      	beq.n	8003b68 <_printf_i+0x1b4>
 8003acc:	4615      	mov	r5, r2
 8003ace:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ad2:	fb03 6711 	mls	r7, r3, r1, r6
 8003ad6:	5dc7      	ldrb	r7, [r0, r7]
 8003ad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003adc:	4637      	mov	r7, r6
 8003ade:	42bb      	cmp	r3, r7
 8003ae0:	460e      	mov	r6, r1
 8003ae2:	d9f4      	bls.n	8003ace <_printf_i+0x11a>
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d10b      	bne.n	8003b00 <_printf_i+0x14c>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	07de      	lsls	r6, r3, #31
 8003aec:	d508      	bpl.n	8003b00 <_printf_i+0x14c>
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	6861      	ldr	r1, [r4, #4]
 8003af2:	4299      	cmp	r1, r3
 8003af4:	bfde      	ittt	le
 8003af6:	2330      	movle	r3, #48	; 0x30
 8003af8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003afc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b00:	1b52      	subs	r2, r2, r5
 8003b02:	6122      	str	r2, [r4, #16]
 8003b04:	f8cd a000 	str.w	sl, [sp]
 8003b08:	464b      	mov	r3, r9
 8003b0a:	aa03      	add	r2, sp, #12
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	4640      	mov	r0, r8
 8003b10:	f7ff fee2 	bl	80038d8 <_printf_common>
 8003b14:	3001      	adds	r0, #1
 8003b16:	d14c      	bne.n	8003bb2 <_printf_i+0x1fe>
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b1c:	b004      	add	sp, #16
 8003b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b22:	4835      	ldr	r0, [pc, #212]	; (8003bf8 <_printf_i+0x244>)
 8003b24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b28:	6829      	ldr	r1, [r5, #0]
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b30:	6029      	str	r1, [r5, #0]
 8003b32:	061d      	lsls	r5, r3, #24
 8003b34:	d514      	bpl.n	8003b60 <_printf_i+0x1ac>
 8003b36:	07df      	lsls	r7, r3, #31
 8003b38:	bf44      	itt	mi
 8003b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8003b3e:	6023      	strmi	r3, [r4, #0]
 8003b40:	b91e      	cbnz	r6, 8003b4a <_printf_i+0x196>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	f023 0320 	bic.w	r3, r3, #32
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	e7b0      	b.n	8003ab0 <_printf_i+0xfc>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	f043 0320 	orr.w	r3, r3, #32
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	2378      	movs	r3, #120	; 0x78
 8003b58:	4828      	ldr	r0, [pc, #160]	; (8003bfc <_printf_i+0x248>)
 8003b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b5e:	e7e3      	b.n	8003b28 <_printf_i+0x174>
 8003b60:	0659      	lsls	r1, r3, #25
 8003b62:	bf48      	it	mi
 8003b64:	b2b6      	uxthmi	r6, r6
 8003b66:	e7e6      	b.n	8003b36 <_printf_i+0x182>
 8003b68:	4615      	mov	r5, r2
 8003b6a:	e7bb      	b.n	8003ae4 <_printf_i+0x130>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	6826      	ldr	r6, [r4, #0]
 8003b70:	6961      	ldr	r1, [r4, #20]
 8003b72:	1d18      	adds	r0, r3, #4
 8003b74:	6028      	str	r0, [r5, #0]
 8003b76:	0635      	lsls	r5, r6, #24
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	d501      	bpl.n	8003b80 <_printf_i+0x1cc>
 8003b7c:	6019      	str	r1, [r3, #0]
 8003b7e:	e002      	b.n	8003b86 <_printf_i+0x1d2>
 8003b80:	0670      	lsls	r0, r6, #25
 8003b82:	d5fb      	bpl.n	8003b7c <_printf_i+0x1c8>
 8003b84:	8019      	strh	r1, [r3, #0]
 8003b86:	2300      	movs	r3, #0
 8003b88:	6123      	str	r3, [r4, #16]
 8003b8a:	4615      	mov	r5, r2
 8003b8c:	e7ba      	b.n	8003b04 <_printf_i+0x150>
 8003b8e:	682b      	ldr	r3, [r5, #0]
 8003b90:	1d1a      	adds	r2, r3, #4
 8003b92:	602a      	str	r2, [r5, #0]
 8003b94:	681d      	ldr	r5, [r3, #0]
 8003b96:	6862      	ldr	r2, [r4, #4]
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f7fc fb20 	bl	80001e0 <memchr>
 8003ba0:	b108      	cbz	r0, 8003ba6 <_printf_i+0x1f2>
 8003ba2:	1b40      	subs	r0, r0, r5
 8003ba4:	6060      	str	r0, [r4, #4]
 8003ba6:	6863      	ldr	r3, [r4, #4]
 8003ba8:	6123      	str	r3, [r4, #16]
 8003baa:	2300      	movs	r3, #0
 8003bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb0:	e7a8      	b.n	8003b04 <_printf_i+0x150>
 8003bb2:	6923      	ldr	r3, [r4, #16]
 8003bb4:	462a      	mov	r2, r5
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	4640      	mov	r0, r8
 8003bba:	47d0      	blx	sl
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d0ab      	beq.n	8003b18 <_printf_i+0x164>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	079b      	lsls	r3, r3, #30
 8003bc4:	d413      	bmi.n	8003bee <_printf_i+0x23a>
 8003bc6:	68e0      	ldr	r0, [r4, #12]
 8003bc8:	9b03      	ldr	r3, [sp, #12]
 8003bca:	4298      	cmp	r0, r3
 8003bcc:	bfb8      	it	lt
 8003bce:	4618      	movlt	r0, r3
 8003bd0:	e7a4      	b.n	8003b1c <_printf_i+0x168>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4632      	mov	r2, r6
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	4640      	mov	r0, r8
 8003bda:	47d0      	blx	sl
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d09b      	beq.n	8003b18 <_printf_i+0x164>
 8003be0:	3501      	adds	r5, #1
 8003be2:	68e3      	ldr	r3, [r4, #12]
 8003be4:	9903      	ldr	r1, [sp, #12]
 8003be6:	1a5b      	subs	r3, r3, r1
 8003be8:	42ab      	cmp	r3, r5
 8003bea:	dcf2      	bgt.n	8003bd2 <_printf_i+0x21e>
 8003bec:	e7eb      	b.n	8003bc6 <_printf_i+0x212>
 8003bee:	2500      	movs	r5, #0
 8003bf0:	f104 0619 	add.w	r6, r4, #25
 8003bf4:	e7f5      	b.n	8003be2 <_printf_i+0x22e>
 8003bf6:	bf00      	nop
 8003bf8:	08007dba 	.word	0x08007dba
 8003bfc:	08007dcb 	.word	0x08007dcb

08003c00 <_scanf_float>:
 8003c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c04:	b087      	sub	sp, #28
 8003c06:	4617      	mov	r7, r2
 8003c08:	9303      	str	r3, [sp, #12]
 8003c0a:	688b      	ldr	r3, [r1, #8]
 8003c0c:	1e5a      	subs	r2, r3, #1
 8003c0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003c12:	bf83      	ittte	hi
 8003c14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003c18:	195b      	addhi	r3, r3, r5
 8003c1a:	9302      	strhi	r3, [sp, #8]
 8003c1c:	2300      	movls	r3, #0
 8003c1e:	bf86      	itte	hi
 8003c20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003c24:	608b      	strhi	r3, [r1, #8]
 8003c26:	9302      	strls	r3, [sp, #8]
 8003c28:	680b      	ldr	r3, [r1, #0]
 8003c2a:	468b      	mov	fp, r1
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003c32:	f84b 3b1c 	str.w	r3, [fp], #28
 8003c36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003c3a:	4680      	mov	r8, r0
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	465e      	mov	r6, fp
 8003c40:	46aa      	mov	sl, r5
 8003c42:	46a9      	mov	r9, r5
 8003c44:	9501      	str	r5, [sp, #4]
 8003c46:	68a2      	ldr	r2, [r4, #8]
 8003c48:	b152      	cbz	r2, 8003c60 <_scanf_float+0x60>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b4e      	cmp	r3, #78	; 0x4e
 8003c50:	d864      	bhi.n	8003d1c <_scanf_float+0x11c>
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d83c      	bhi.n	8003cd0 <_scanf_float+0xd0>
 8003c56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003c5a:	b2c8      	uxtb	r0, r1
 8003c5c:	280e      	cmp	r0, #14
 8003c5e:	d93a      	bls.n	8003cd6 <_scanf_float+0xd6>
 8003c60:	f1b9 0f00 	cmp.w	r9, #0
 8003c64:	d003      	beq.n	8003c6e <_scanf_float+0x6e>
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c6c:	6023      	str	r3, [r4, #0]
 8003c6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003c72:	f1ba 0f01 	cmp.w	sl, #1
 8003c76:	f200 8113 	bhi.w	8003ea0 <_scanf_float+0x2a0>
 8003c7a:	455e      	cmp	r6, fp
 8003c7c:	f200 8105 	bhi.w	8003e8a <_scanf_float+0x28a>
 8003c80:	2501      	movs	r5, #1
 8003c82:	4628      	mov	r0, r5
 8003c84:	b007      	add	sp, #28
 8003c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003c8e:	2a0d      	cmp	r2, #13
 8003c90:	d8e6      	bhi.n	8003c60 <_scanf_float+0x60>
 8003c92:	a101      	add	r1, pc, #4	; (adr r1, 8003c98 <_scanf_float+0x98>)
 8003c94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003c98:	08003dd7 	.word	0x08003dd7
 8003c9c:	08003c61 	.word	0x08003c61
 8003ca0:	08003c61 	.word	0x08003c61
 8003ca4:	08003c61 	.word	0x08003c61
 8003ca8:	08003e37 	.word	0x08003e37
 8003cac:	08003e0f 	.word	0x08003e0f
 8003cb0:	08003c61 	.word	0x08003c61
 8003cb4:	08003c61 	.word	0x08003c61
 8003cb8:	08003de5 	.word	0x08003de5
 8003cbc:	08003c61 	.word	0x08003c61
 8003cc0:	08003c61 	.word	0x08003c61
 8003cc4:	08003c61 	.word	0x08003c61
 8003cc8:	08003c61 	.word	0x08003c61
 8003ccc:	08003d9d 	.word	0x08003d9d
 8003cd0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003cd4:	e7db      	b.n	8003c8e <_scanf_float+0x8e>
 8003cd6:	290e      	cmp	r1, #14
 8003cd8:	d8c2      	bhi.n	8003c60 <_scanf_float+0x60>
 8003cda:	a001      	add	r0, pc, #4	; (adr r0, 8003ce0 <_scanf_float+0xe0>)
 8003cdc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003ce0:	08003d8f 	.word	0x08003d8f
 8003ce4:	08003c61 	.word	0x08003c61
 8003ce8:	08003d8f 	.word	0x08003d8f
 8003cec:	08003e23 	.word	0x08003e23
 8003cf0:	08003c61 	.word	0x08003c61
 8003cf4:	08003d3d 	.word	0x08003d3d
 8003cf8:	08003d79 	.word	0x08003d79
 8003cfc:	08003d79 	.word	0x08003d79
 8003d00:	08003d79 	.word	0x08003d79
 8003d04:	08003d79 	.word	0x08003d79
 8003d08:	08003d79 	.word	0x08003d79
 8003d0c:	08003d79 	.word	0x08003d79
 8003d10:	08003d79 	.word	0x08003d79
 8003d14:	08003d79 	.word	0x08003d79
 8003d18:	08003d79 	.word	0x08003d79
 8003d1c:	2b6e      	cmp	r3, #110	; 0x6e
 8003d1e:	d809      	bhi.n	8003d34 <_scanf_float+0x134>
 8003d20:	2b60      	cmp	r3, #96	; 0x60
 8003d22:	d8b2      	bhi.n	8003c8a <_scanf_float+0x8a>
 8003d24:	2b54      	cmp	r3, #84	; 0x54
 8003d26:	d077      	beq.n	8003e18 <_scanf_float+0x218>
 8003d28:	2b59      	cmp	r3, #89	; 0x59
 8003d2a:	d199      	bne.n	8003c60 <_scanf_float+0x60>
 8003d2c:	2d07      	cmp	r5, #7
 8003d2e:	d197      	bne.n	8003c60 <_scanf_float+0x60>
 8003d30:	2508      	movs	r5, #8
 8003d32:	e029      	b.n	8003d88 <_scanf_float+0x188>
 8003d34:	2b74      	cmp	r3, #116	; 0x74
 8003d36:	d06f      	beq.n	8003e18 <_scanf_float+0x218>
 8003d38:	2b79      	cmp	r3, #121	; 0x79
 8003d3a:	e7f6      	b.n	8003d2a <_scanf_float+0x12a>
 8003d3c:	6821      	ldr	r1, [r4, #0]
 8003d3e:	05c8      	lsls	r0, r1, #23
 8003d40:	d51a      	bpl.n	8003d78 <_scanf_float+0x178>
 8003d42:	9b02      	ldr	r3, [sp, #8]
 8003d44:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003d48:	6021      	str	r1, [r4, #0]
 8003d4a:	f109 0901 	add.w	r9, r9, #1
 8003d4e:	b11b      	cbz	r3, 8003d58 <_scanf_float+0x158>
 8003d50:	3b01      	subs	r3, #1
 8003d52:	3201      	adds	r2, #1
 8003d54:	9302      	str	r3, [sp, #8]
 8003d56:	60a2      	str	r2, [r4, #8]
 8003d58:	68a3      	ldr	r3, [r4, #8]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	60a3      	str	r3, [r4, #8]
 8003d5e:	6923      	ldr	r3, [r4, #16]
 8003d60:	3301      	adds	r3, #1
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	f340 8084 	ble.w	8003e78 <_scanf_float+0x278>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	3301      	adds	r3, #1
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	e766      	b.n	8003c46 <_scanf_float+0x46>
 8003d78:	eb1a 0f05 	cmn.w	sl, r5
 8003d7c:	f47f af70 	bne.w	8003c60 <_scanf_float+0x60>
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003d86:	6022      	str	r2, [r4, #0]
 8003d88:	f806 3b01 	strb.w	r3, [r6], #1
 8003d8c:	e7e4      	b.n	8003d58 <_scanf_float+0x158>
 8003d8e:	6822      	ldr	r2, [r4, #0]
 8003d90:	0610      	lsls	r0, r2, #24
 8003d92:	f57f af65 	bpl.w	8003c60 <_scanf_float+0x60>
 8003d96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d9a:	e7f4      	b.n	8003d86 <_scanf_float+0x186>
 8003d9c:	f1ba 0f00 	cmp.w	sl, #0
 8003da0:	d10e      	bne.n	8003dc0 <_scanf_float+0x1c0>
 8003da2:	f1b9 0f00 	cmp.w	r9, #0
 8003da6:	d10e      	bne.n	8003dc6 <_scanf_float+0x1c6>
 8003da8:	6822      	ldr	r2, [r4, #0]
 8003daa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003dae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003db2:	d108      	bne.n	8003dc6 <_scanf_float+0x1c6>
 8003db4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003db8:	6022      	str	r2, [r4, #0]
 8003dba:	f04f 0a01 	mov.w	sl, #1
 8003dbe:	e7e3      	b.n	8003d88 <_scanf_float+0x188>
 8003dc0:	f1ba 0f02 	cmp.w	sl, #2
 8003dc4:	d055      	beq.n	8003e72 <_scanf_float+0x272>
 8003dc6:	2d01      	cmp	r5, #1
 8003dc8:	d002      	beq.n	8003dd0 <_scanf_float+0x1d0>
 8003dca:	2d04      	cmp	r5, #4
 8003dcc:	f47f af48 	bne.w	8003c60 <_scanf_float+0x60>
 8003dd0:	3501      	adds	r5, #1
 8003dd2:	b2ed      	uxtb	r5, r5
 8003dd4:	e7d8      	b.n	8003d88 <_scanf_float+0x188>
 8003dd6:	f1ba 0f01 	cmp.w	sl, #1
 8003dda:	f47f af41 	bne.w	8003c60 <_scanf_float+0x60>
 8003dde:	f04f 0a02 	mov.w	sl, #2
 8003de2:	e7d1      	b.n	8003d88 <_scanf_float+0x188>
 8003de4:	b97d      	cbnz	r5, 8003e06 <_scanf_float+0x206>
 8003de6:	f1b9 0f00 	cmp.w	r9, #0
 8003dea:	f47f af3c 	bne.w	8003c66 <_scanf_float+0x66>
 8003dee:	6822      	ldr	r2, [r4, #0]
 8003df0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003df4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003df8:	f47f af39 	bne.w	8003c6e <_scanf_float+0x6e>
 8003dfc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003e00:	6022      	str	r2, [r4, #0]
 8003e02:	2501      	movs	r5, #1
 8003e04:	e7c0      	b.n	8003d88 <_scanf_float+0x188>
 8003e06:	2d03      	cmp	r5, #3
 8003e08:	d0e2      	beq.n	8003dd0 <_scanf_float+0x1d0>
 8003e0a:	2d05      	cmp	r5, #5
 8003e0c:	e7de      	b.n	8003dcc <_scanf_float+0x1cc>
 8003e0e:	2d02      	cmp	r5, #2
 8003e10:	f47f af26 	bne.w	8003c60 <_scanf_float+0x60>
 8003e14:	2503      	movs	r5, #3
 8003e16:	e7b7      	b.n	8003d88 <_scanf_float+0x188>
 8003e18:	2d06      	cmp	r5, #6
 8003e1a:	f47f af21 	bne.w	8003c60 <_scanf_float+0x60>
 8003e1e:	2507      	movs	r5, #7
 8003e20:	e7b2      	b.n	8003d88 <_scanf_float+0x188>
 8003e22:	6822      	ldr	r2, [r4, #0]
 8003e24:	0591      	lsls	r1, r2, #22
 8003e26:	f57f af1b 	bpl.w	8003c60 <_scanf_float+0x60>
 8003e2a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003e2e:	6022      	str	r2, [r4, #0]
 8003e30:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e34:	e7a8      	b.n	8003d88 <_scanf_float+0x188>
 8003e36:	6822      	ldr	r2, [r4, #0]
 8003e38:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003e3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003e40:	d006      	beq.n	8003e50 <_scanf_float+0x250>
 8003e42:	0550      	lsls	r0, r2, #21
 8003e44:	f57f af0c 	bpl.w	8003c60 <_scanf_float+0x60>
 8003e48:	f1b9 0f00 	cmp.w	r9, #0
 8003e4c:	f43f af0f 	beq.w	8003c6e <_scanf_float+0x6e>
 8003e50:	0591      	lsls	r1, r2, #22
 8003e52:	bf58      	it	pl
 8003e54:	9901      	ldrpl	r1, [sp, #4]
 8003e56:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003e5a:	bf58      	it	pl
 8003e5c:	eba9 0101 	subpl.w	r1, r9, r1
 8003e60:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003e64:	bf58      	it	pl
 8003e66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003e6a:	6022      	str	r2, [r4, #0]
 8003e6c:	f04f 0900 	mov.w	r9, #0
 8003e70:	e78a      	b.n	8003d88 <_scanf_float+0x188>
 8003e72:	f04f 0a03 	mov.w	sl, #3
 8003e76:	e787      	b.n	8003d88 <_scanf_float+0x188>
 8003e78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003e7c:	4639      	mov	r1, r7
 8003e7e:	4640      	mov	r0, r8
 8003e80:	4798      	blx	r3
 8003e82:	2800      	cmp	r0, #0
 8003e84:	f43f aedf 	beq.w	8003c46 <_scanf_float+0x46>
 8003e88:	e6ea      	b.n	8003c60 <_scanf_float+0x60>
 8003e8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e92:	463a      	mov	r2, r7
 8003e94:	4640      	mov	r0, r8
 8003e96:	4798      	blx	r3
 8003e98:	6923      	ldr	r3, [r4, #16]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	6123      	str	r3, [r4, #16]
 8003e9e:	e6ec      	b.n	8003c7a <_scanf_float+0x7a>
 8003ea0:	1e6b      	subs	r3, r5, #1
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d825      	bhi.n	8003ef2 <_scanf_float+0x2f2>
 8003ea6:	2d02      	cmp	r5, #2
 8003ea8:	d836      	bhi.n	8003f18 <_scanf_float+0x318>
 8003eaa:	455e      	cmp	r6, fp
 8003eac:	f67f aee8 	bls.w	8003c80 <_scanf_float+0x80>
 8003eb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003eb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003eb8:	463a      	mov	r2, r7
 8003eba:	4640      	mov	r0, r8
 8003ebc:	4798      	blx	r3
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	6123      	str	r3, [r4, #16]
 8003ec4:	e7f1      	b.n	8003eaa <_scanf_float+0x2aa>
 8003ec6:	9802      	ldr	r0, [sp, #8]
 8003ec8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ecc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003ed0:	9002      	str	r0, [sp, #8]
 8003ed2:	463a      	mov	r2, r7
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	4798      	blx	r3
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	6123      	str	r3, [r4, #16]
 8003ede:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003ee2:	fa5f fa8a 	uxtb.w	sl, sl
 8003ee6:	f1ba 0f02 	cmp.w	sl, #2
 8003eea:	d1ec      	bne.n	8003ec6 <_scanf_float+0x2c6>
 8003eec:	3d03      	subs	r5, #3
 8003eee:	b2ed      	uxtb	r5, r5
 8003ef0:	1b76      	subs	r6, r6, r5
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	05da      	lsls	r2, r3, #23
 8003ef6:	d52f      	bpl.n	8003f58 <_scanf_float+0x358>
 8003ef8:	055b      	lsls	r3, r3, #21
 8003efa:	d510      	bpl.n	8003f1e <_scanf_float+0x31e>
 8003efc:	455e      	cmp	r6, fp
 8003efe:	f67f aebf 	bls.w	8003c80 <_scanf_float+0x80>
 8003f02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f0a:	463a      	mov	r2, r7
 8003f0c:	4640      	mov	r0, r8
 8003f0e:	4798      	blx	r3
 8003f10:	6923      	ldr	r3, [r4, #16]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	6123      	str	r3, [r4, #16]
 8003f16:	e7f1      	b.n	8003efc <_scanf_float+0x2fc>
 8003f18:	46aa      	mov	sl, r5
 8003f1a:	9602      	str	r6, [sp, #8]
 8003f1c:	e7df      	b.n	8003ede <_scanf_float+0x2de>
 8003f1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003f22:	6923      	ldr	r3, [r4, #16]
 8003f24:	2965      	cmp	r1, #101	; 0x65
 8003f26:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003f2a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8003f2e:	6123      	str	r3, [r4, #16]
 8003f30:	d00c      	beq.n	8003f4c <_scanf_float+0x34c>
 8003f32:	2945      	cmp	r1, #69	; 0x45
 8003f34:	d00a      	beq.n	8003f4c <_scanf_float+0x34c>
 8003f36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f3a:	463a      	mov	r2, r7
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	4798      	blx	r3
 8003f40:	6923      	ldr	r3, [r4, #16]
 8003f42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	1eb5      	subs	r5, r6, #2
 8003f4a:	6123      	str	r3, [r4, #16]
 8003f4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f50:	463a      	mov	r2, r7
 8003f52:	4640      	mov	r0, r8
 8003f54:	4798      	blx	r3
 8003f56:	462e      	mov	r6, r5
 8003f58:	6825      	ldr	r5, [r4, #0]
 8003f5a:	f015 0510 	ands.w	r5, r5, #16
 8003f5e:	d159      	bne.n	8004014 <_scanf_float+0x414>
 8003f60:	7035      	strb	r5, [r6, #0]
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6c:	d11b      	bne.n	8003fa6 <_scanf_float+0x3a6>
 8003f6e:	9b01      	ldr	r3, [sp, #4]
 8003f70:	454b      	cmp	r3, r9
 8003f72:	eba3 0209 	sub.w	r2, r3, r9
 8003f76:	d123      	bne.n	8003fc0 <_scanf_float+0x3c0>
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4659      	mov	r1, fp
 8003f7c:	4640      	mov	r0, r8
 8003f7e:	f000 ff25 	bl	8004dcc <_strtod_r>
 8003f82:	6822      	ldr	r2, [r4, #0]
 8003f84:	9b03      	ldr	r3, [sp, #12]
 8003f86:	f012 0f02 	tst.w	r2, #2
 8003f8a:	ec57 6b10 	vmov	r6, r7, d0
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	d021      	beq.n	8003fd6 <_scanf_float+0x3d6>
 8003f92:	9903      	ldr	r1, [sp, #12]
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	600a      	str	r2, [r1, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	e9c3 6700 	strd	r6, r7, [r3]
 8003f9e:	68e3      	ldr	r3, [r4, #12]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	60e3      	str	r3, [r4, #12]
 8003fa4:	e66d      	b.n	8003c82 <_scanf_float+0x82>
 8003fa6:	9b04      	ldr	r3, [sp, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0e5      	beq.n	8003f78 <_scanf_float+0x378>
 8003fac:	9905      	ldr	r1, [sp, #20]
 8003fae:	230a      	movs	r3, #10
 8003fb0:	462a      	mov	r2, r5
 8003fb2:	3101      	adds	r1, #1
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	f000 ff91 	bl	8004edc <_strtol_r>
 8003fba:	9b04      	ldr	r3, [sp, #16]
 8003fbc:	9e05      	ldr	r6, [sp, #20]
 8003fbe:	1ac2      	subs	r2, r0, r3
 8003fc0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003fc4:	429e      	cmp	r6, r3
 8003fc6:	bf28      	it	cs
 8003fc8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003fcc:	4912      	ldr	r1, [pc, #72]	; (8004018 <_scanf_float+0x418>)
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f000 f8ba 	bl	8004148 <siprintf>
 8003fd4:	e7d0      	b.n	8003f78 <_scanf_float+0x378>
 8003fd6:	9903      	ldr	r1, [sp, #12]
 8003fd8:	f012 0f04 	tst.w	r2, #4
 8003fdc:	f103 0204 	add.w	r2, r3, #4
 8003fe0:	600a      	str	r2, [r1, #0]
 8003fe2:	d1d9      	bne.n	8003f98 <_scanf_float+0x398>
 8003fe4:	f8d3 8000 	ldr.w	r8, [r3]
 8003fe8:	ee10 2a10 	vmov	r2, s0
 8003fec:	ee10 0a10 	vmov	r0, s0
 8003ff0:	463b      	mov	r3, r7
 8003ff2:	4639      	mov	r1, r7
 8003ff4:	f7fc fd9a 	bl	8000b2c <__aeabi_dcmpun>
 8003ff8:	b128      	cbz	r0, 8004006 <_scanf_float+0x406>
 8003ffa:	4808      	ldr	r0, [pc, #32]	; (800401c <_scanf_float+0x41c>)
 8003ffc:	f000 f89e 	bl	800413c <nanf>
 8004000:	ed88 0a00 	vstr	s0, [r8]
 8004004:	e7cb      	b.n	8003f9e <_scanf_float+0x39e>
 8004006:	4630      	mov	r0, r6
 8004008:	4639      	mov	r1, r7
 800400a:	f7fc fded 	bl	8000be8 <__aeabi_d2f>
 800400e:	f8c8 0000 	str.w	r0, [r8]
 8004012:	e7c4      	b.n	8003f9e <_scanf_float+0x39e>
 8004014:	2500      	movs	r5, #0
 8004016:	e634      	b.n	8003c82 <_scanf_float+0x82>
 8004018:	08007ddc 	.word	0x08007ddc
 800401c:	08008250 	.word	0x08008250

08004020 <iprintf>:
 8004020:	b40f      	push	{r0, r1, r2, r3}
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <iprintf+0x2c>)
 8004024:	b513      	push	{r0, r1, r4, lr}
 8004026:	681c      	ldr	r4, [r3, #0]
 8004028:	b124      	cbz	r4, 8004034 <iprintf+0x14>
 800402a:	69a3      	ldr	r3, [r4, #24]
 800402c:	b913      	cbnz	r3, 8004034 <iprintf+0x14>
 800402e:	4620      	mov	r0, r4
 8004030:	f001 ffaa 	bl	8005f88 <__sinit>
 8004034:	ab05      	add	r3, sp, #20
 8004036:	9a04      	ldr	r2, [sp, #16]
 8004038:	68a1      	ldr	r1, [r4, #8]
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	4620      	mov	r0, r4
 800403e:	f003 fb81 	bl	8007744 <_vfiprintf_r>
 8004042:	b002      	add	sp, #8
 8004044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004048:	b004      	add	sp, #16
 800404a:	4770      	bx	lr
 800404c:	2000000c 	.word	0x2000000c

08004050 <_puts_r>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	460e      	mov	r6, r1
 8004054:	4605      	mov	r5, r0
 8004056:	b118      	cbz	r0, 8004060 <_puts_r+0x10>
 8004058:	6983      	ldr	r3, [r0, #24]
 800405a:	b90b      	cbnz	r3, 8004060 <_puts_r+0x10>
 800405c:	f001 ff94 	bl	8005f88 <__sinit>
 8004060:	69ab      	ldr	r3, [r5, #24]
 8004062:	68ac      	ldr	r4, [r5, #8]
 8004064:	b913      	cbnz	r3, 800406c <_puts_r+0x1c>
 8004066:	4628      	mov	r0, r5
 8004068:	f001 ff8e 	bl	8005f88 <__sinit>
 800406c:	4b2c      	ldr	r3, [pc, #176]	; (8004120 <_puts_r+0xd0>)
 800406e:	429c      	cmp	r4, r3
 8004070:	d120      	bne.n	80040b4 <_puts_r+0x64>
 8004072:	686c      	ldr	r4, [r5, #4]
 8004074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004076:	07db      	lsls	r3, r3, #31
 8004078:	d405      	bmi.n	8004086 <_puts_r+0x36>
 800407a:	89a3      	ldrh	r3, [r4, #12]
 800407c:	0598      	lsls	r0, r3, #22
 800407e:	d402      	bmi.n	8004086 <_puts_r+0x36>
 8004080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004082:	f002 fb92 	bl	80067aa <__retarget_lock_acquire_recursive>
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	0719      	lsls	r1, r3, #28
 800408a:	d51d      	bpl.n	80040c8 <_puts_r+0x78>
 800408c:	6923      	ldr	r3, [r4, #16]
 800408e:	b1db      	cbz	r3, 80040c8 <_puts_r+0x78>
 8004090:	3e01      	subs	r6, #1
 8004092:	68a3      	ldr	r3, [r4, #8]
 8004094:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004098:	3b01      	subs	r3, #1
 800409a:	60a3      	str	r3, [r4, #8]
 800409c:	bb39      	cbnz	r1, 80040ee <_puts_r+0x9e>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	da38      	bge.n	8004114 <_puts_r+0xc4>
 80040a2:	4622      	mov	r2, r4
 80040a4:	210a      	movs	r1, #10
 80040a6:	4628      	mov	r0, r5
 80040a8:	f000 ff1a 	bl	8004ee0 <__swbuf_r>
 80040ac:	3001      	adds	r0, #1
 80040ae:	d011      	beq.n	80040d4 <_puts_r+0x84>
 80040b0:	250a      	movs	r5, #10
 80040b2:	e011      	b.n	80040d8 <_puts_r+0x88>
 80040b4:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <_puts_r+0xd4>)
 80040b6:	429c      	cmp	r4, r3
 80040b8:	d101      	bne.n	80040be <_puts_r+0x6e>
 80040ba:	68ac      	ldr	r4, [r5, #8]
 80040bc:	e7da      	b.n	8004074 <_puts_r+0x24>
 80040be:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <_puts_r+0xd8>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	bf08      	it	eq
 80040c4:	68ec      	ldreq	r4, [r5, #12]
 80040c6:	e7d5      	b.n	8004074 <_puts_r+0x24>
 80040c8:	4621      	mov	r1, r4
 80040ca:	4628      	mov	r0, r5
 80040cc:	f000 ff5a 	bl	8004f84 <__swsetup_r>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	d0dd      	beq.n	8004090 <_puts_r+0x40>
 80040d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80040d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040da:	07da      	lsls	r2, r3, #31
 80040dc:	d405      	bmi.n	80040ea <_puts_r+0x9a>
 80040de:	89a3      	ldrh	r3, [r4, #12]
 80040e0:	059b      	lsls	r3, r3, #22
 80040e2:	d402      	bmi.n	80040ea <_puts_r+0x9a>
 80040e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040e6:	f002 fb61 	bl	80067ac <__retarget_lock_release_recursive>
 80040ea:	4628      	mov	r0, r5
 80040ec:	bd70      	pop	{r4, r5, r6, pc}
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da04      	bge.n	80040fc <_puts_r+0xac>
 80040f2:	69a2      	ldr	r2, [r4, #24]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	dc06      	bgt.n	8004106 <_puts_r+0xb6>
 80040f8:	290a      	cmp	r1, #10
 80040fa:	d004      	beq.n	8004106 <_puts_r+0xb6>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	6022      	str	r2, [r4, #0]
 8004102:	7019      	strb	r1, [r3, #0]
 8004104:	e7c5      	b.n	8004092 <_puts_r+0x42>
 8004106:	4622      	mov	r2, r4
 8004108:	4628      	mov	r0, r5
 800410a:	f000 fee9 	bl	8004ee0 <__swbuf_r>
 800410e:	3001      	adds	r0, #1
 8004110:	d1bf      	bne.n	8004092 <_puts_r+0x42>
 8004112:	e7df      	b.n	80040d4 <_puts_r+0x84>
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	250a      	movs	r5, #10
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	6022      	str	r2, [r4, #0]
 800411c:	701d      	strb	r5, [r3, #0]
 800411e:	e7db      	b.n	80040d8 <_puts_r+0x88>
 8004120:	08007fec 	.word	0x08007fec
 8004124:	0800800c 	.word	0x0800800c
 8004128:	08007fcc 	.word	0x08007fcc

0800412c <puts>:
 800412c:	4b02      	ldr	r3, [pc, #8]	; (8004138 <puts+0xc>)
 800412e:	4601      	mov	r1, r0
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	f7ff bf8d 	b.w	8004050 <_puts_r>
 8004136:	bf00      	nop
 8004138:	2000000c 	.word	0x2000000c

0800413c <nanf>:
 800413c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004144 <nanf+0x8>
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	7fc00000 	.word	0x7fc00000

08004148 <siprintf>:
 8004148:	b40e      	push	{r1, r2, r3}
 800414a:	b500      	push	{lr}
 800414c:	b09c      	sub	sp, #112	; 0x70
 800414e:	ab1d      	add	r3, sp, #116	; 0x74
 8004150:	9002      	str	r0, [sp, #8]
 8004152:	9006      	str	r0, [sp, #24]
 8004154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004158:	4809      	ldr	r0, [pc, #36]	; (8004180 <siprintf+0x38>)
 800415a:	9107      	str	r1, [sp, #28]
 800415c:	9104      	str	r1, [sp, #16]
 800415e:	4909      	ldr	r1, [pc, #36]	; (8004184 <siprintf+0x3c>)
 8004160:	f853 2b04 	ldr.w	r2, [r3], #4
 8004164:	9105      	str	r1, [sp, #20]
 8004166:	6800      	ldr	r0, [r0, #0]
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	a902      	add	r1, sp, #8
 800416c:	f003 f9c0 	bl	80074f0 <_svfiprintf_r>
 8004170:	9b02      	ldr	r3, [sp, #8]
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	b01c      	add	sp, #112	; 0x70
 8004178:	f85d eb04 	ldr.w	lr, [sp], #4
 800417c:	b003      	add	sp, #12
 800417e:	4770      	bx	lr
 8004180:	2000000c 	.word	0x2000000c
 8004184:	ffff0208 	.word	0xffff0208

08004188 <sulp>:
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	4604      	mov	r4, r0
 800418c:	460d      	mov	r5, r1
 800418e:	ec45 4b10 	vmov	d0, r4, r5
 8004192:	4616      	mov	r6, r2
 8004194:	f002 ff0a 	bl	8006fac <__ulp>
 8004198:	ec51 0b10 	vmov	r0, r1, d0
 800419c:	b17e      	cbz	r6, 80041be <sulp+0x36>
 800419e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80041a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	dd09      	ble.n	80041be <sulp+0x36>
 80041aa:	051b      	lsls	r3, r3, #20
 80041ac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80041b0:	2400      	movs	r4, #0
 80041b2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80041b6:	4622      	mov	r2, r4
 80041b8:	462b      	mov	r3, r5
 80041ba:	f7fc fa1d 	bl	80005f8 <__aeabi_dmul>
 80041be:	bd70      	pop	{r4, r5, r6, pc}

080041c0 <_strtod_l>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	ed2d 8b02 	vpush	{d8}
 80041c8:	b09d      	sub	sp, #116	; 0x74
 80041ca:	461f      	mov	r7, r3
 80041cc:	2300      	movs	r3, #0
 80041ce:	9318      	str	r3, [sp, #96]	; 0x60
 80041d0:	4ba2      	ldr	r3, [pc, #648]	; (800445c <_strtod_l+0x29c>)
 80041d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	9305      	str	r3, [sp, #20]
 80041d8:	4604      	mov	r4, r0
 80041da:	4618      	mov	r0, r3
 80041dc:	4688      	mov	r8, r1
 80041de:	f7fb fff7 	bl	80001d0 <strlen>
 80041e2:	f04f 0a00 	mov.w	sl, #0
 80041e6:	4605      	mov	r5, r0
 80041e8:	f04f 0b00 	mov.w	fp, #0
 80041ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80041f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041f2:	781a      	ldrb	r2, [r3, #0]
 80041f4:	2a2b      	cmp	r2, #43	; 0x2b
 80041f6:	d04e      	beq.n	8004296 <_strtod_l+0xd6>
 80041f8:	d83b      	bhi.n	8004272 <_strtod_l+0xb2>
 80041fa:	2a0d      	cmp	r2, #13
 80041fc:	d834      	bhi.n	8004268 <_strtod_l+0xa8>
 80041fe:	2a08      	cmp	r2, #8
 8004200:	d834      	bhi.n	800426c <_strtod_l+0xac>
 8004202:	2a00      	cmp	r2, #0
 8004204:	d03e      	beq.n	8004284 <_strtod_l+0xc4>
 8004206:	2300      	movs	r3, #0
 8004208:	930a      	str	r3, [sp, #40]	; 0x28
 800420a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800420c:	7833      	ldrb	r3, [r6, #0]
 800420e:	2b30      	cmp	r3, #48	; 0x30
 8004210:	f040 80b0 	bne.w	8004374 <_strtod_l+0x1b4>
 8004214:	7873      	ldrb	r3, [r6, #1]
 8004216:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800421a:	2b58      	cmp	r3, #88	; 0x58
 800421c:	d168      	bne.n	80042f0 <_strtod_l+0x130>
 800421e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	ab18      	add	r3, sp, #96	; 0x60
 8004224:	9702      	str	r7, [sp, #8]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4a8d      	ldr	r2, [pc, #564]	; (8004460 <_strtod_l+0x2a0>)
 800422a:	ab19      	add	r3, sp, #100	; 0x64
 800422c:	a917      	add	r1, sp, #92	; 0x5c
 800422e:	4620      	mov	r0, r4
 8004230:	f001 ffae 	bl	8006190 <__gethex>
 8004234:	f010 0707 	ands.w	r7, r0, #7
 8004238:	4605      	mov	r5, r0
 800423a:	d005      	beq.n	8004248 <_strtod_l+0x88>
 800423c:	2f06      	cmp	r7, #6
 800423e:	d12c      	bne.n	800429a <_strtod_l+0xda>
 8004240:	3601      	adds	r6, #1
 8004242:	2300      	movs	r3, #0
 8004244:	9617      	str	r6, [sp, #92]	; 0x5c
 8004246:	930a      	str	r3, [sp, #40]	; 0x28
 8004248:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 8590 	bne.w	8004d70 <_strtod_l+0xbb0>
 8004250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004252:	b1eb      	cbz	r3, 8004290 <_strtod_l+0xd0>
 8004254:	4652      	mov	r2, sl
 8004256:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800425a:	ec43 2b10 	vmov	d0, r2, r3
 800425e:	b01d      	add	sp, #116	; 0x74
 8004260:	ecbd 8b02 	vpop	{d8}
 8004264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004268:	2a20      	cmp	r2, #32
 800426a:	d1cc      	bne.n	8004206 <_strtod_l+0x46>
 800426c:	3301      	adds	r3, #1
 800426e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004270:	e7be      	b.n	80041f0 <_strtod_l+0x30>
 8004272:	2a2d      	cmp	r2, #45	; 0x2d
 8004274:	d1c7      	bne.n	8004206 <_strtod_l+0x46>
 8004276:	2201      	movs	r2, #1
 8004278:	920a      	str	r2, [sp, #40]	; 0x28
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	9217      	str	r2, [sp, #92]	; 0x5c
 800427e:	785b      	ldrb	r3, [r3, #1]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1c2      	bne.n	800420a <_strtod_l+0x4a>
 8004284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004286:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 856e 	bne.w	8004d6c <_strtod_l+0xbac>
 8004290:	4652      	mov	r2, sl
 8004292:	465b      	mov	r3, fp
 8004294:	e7e1      	b.n	800425a <_strtod_l+0x9a>
 8004296:	2200      	movs	r2, #0
 8004298:	e7ee      	b.n	8004278 <_strtod_l+0xb8>
 800429a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800429c:	b13a      	cbz	r2, 80042ae <_strtod_l+0xee>
 800429e:	2135      	movs	r1, #53	; 0x35
 80042a0:	a81a      	add	r0, sp, #104	; 0x68
 80042a2:	f002 ff8e 	bl	80071c2 <__copybits>
 80042a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80042a8:	4620      	mov	r0, r4
 80042aa:	f002 fb4d 	bl	8006948 <_Bfree>
 80042ae:	3f01      	subs	r7, #1
 80042b0:	2f04      	cmp	r7, #4
 80042b2:	d806      	bhi.n	80042c2 <_strtod_l+0x102>
 80042b4:	e8df f007 	tbb	[pc, r7]
 80042b8:	1714030a 	.word	0x1714030a
 80042bc:	0a          	.byte	0x0a
 80042bd:	00          	.byte	0x00
 80042be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80042c2:	0728      	lsls	r0, r5, #28
 80042c4:	d5c0      	bpl.n	8004248 <_strtod_l+0x88>
 80042c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80042ca:	e7bd      	b.n	8004248 <_strtod_l+0x88>
 80042cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80042d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80042d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80042da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80042de:	e7f0      	b.n	80042c2 <_strtod_l+0x102>
 80042e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004464 <_strtod_l+0x2a4>
 80042e4:	e7ed      	b.n	80042c2 <_strtod_l+0x102>
 80042e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80042ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80042ee:	e7e8      	b.n	80042c2 <_strtod_l+0x102>
 80042f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	2b30      	cmp	r3, #48	; 0x30
 80042fa:	d0f9      	beq.n	80042f0 <_strtod_l+0x130>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0a3      	beq.n	8004248 <_strtod_l+0x88>
 8004300:	2301      	movs	r3, #1
 8004302:	f04f 0900 	mov.w	r9, #0
 8004306:	9304      	str	r3, [sp, #16]
 8004308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800430a:	9308      	str	r3, [sp, #32]
 800430c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004310:	464f      	mov	r7, r9
 8004312:	220a      	movs	r2, #10
 8004314:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004316:	7806      	ldrb	r6, [r0, #0]
 8004318:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800431c:	b2d9      	uxtb	r1, r3
 800431e:	2909      	cmp	r1, #9
 8004320:	d92a      	bls.n	8004378 <_strtod_l+0x1b8>
 8004322:	9905      	ldr	r1, [sp, #20]
 8004324:	462a      	mov	r2, r5
 8004326:	f003 fb9a 	bl	8007a5e <strncmp>
 800432a:	b398      	cbz	r0, 8004394 <_strtod_l+0x1d4>
 800432c:	2000      	movs	r0, #0
 800432e:	4632      	mov	r2, r6
 8004330:	463d      	mov	r5, r7
 8004332:	9005      	str	r0, [sp, #20]
 8004334:	4603      	mov	r3, r0
 8004336:	2a65      	cmp	r2, #101	; 0x65
 8004338:	d001      	beq.n	800433e <_strtod_l+0x17e>
 800433a:	2a45      	cmp	r2, #69	; 0x45
 800433c:	d118      	bne.n	8004370 <_strtod_l+0x1b0>
 800433e:	b91d      	cbnz	r5, 8004348 <_strtod_l+0x188>
 8004340:	9a04      	ldr	r2, [sp, #16]
 8004342:	4302      	orrs	r2, r0
 8004344:	d09e      	beq.n	8004284 <_strtod_l+0xc4>
 8004346:	2500      	movs	r5, #0
 8004348:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800434c:	f108 0201 	add.w	r2, r8, #1
 8004350:	9217      	str	r2, [sp, #92]	; 0x5c
 8004352:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004356:	2a2b      	cmp	r2, #43	; 0x2b
 8004358:	d075      	beq.n	8004446 <_strtod_l+0x286>
 800435a:	2a2d      	cmp	r2, #45	; 0x2d
 800435c:	d07b      	beq.n	8004456 <_strtod_l+0x296>
 800435e:	f04f 0c00 	mov.w	ip, #0
 8004362:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004366:	2909      	cmp	r1, #9
 8004368:	f240 8082 	bls.w	8004470 <_strtod_l+0x2b0>
 800436c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004370:	2600      	movs	r6, #0
 8004372:	e09d      	b.n	80044b0 <_strtod_l+0x2f0>
 8004374:	2300      	movs	r3, #0
 8004376:	e7c4      	b.n	8004302 <_strtod_l+0x142>
 8004378:	2f08      	cmp	r7, #8
 800437a:	bfd8      	it	le
 800437c:	9907      	ldrle	r1, [sp, #28]
 800437e:	f100 0001 	add.w	r0, r0, #1
 8004382:	bfda      	itte	le
 8004384:	fb02 3301 	mlale	r3, r2, r1, r3
 8004388:	9307      	strle	r3, [sp, #28]
 800438a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800438e:	3701      	adds	r7, #1
 8004390:	9017      	str	r0, [sp, #92]	; 0x5c
 8004392:	e7bf      	b.n	8004314 <_strtod_l+0x154>
 8004394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004396:	195a      	adds	r2, r3, r5
 8004398:	9217      	str	r2, [sp, #92]	; 0x5c
 800439a:	5d5a      	ldrb	r2, [r3, r5]
 800439c:	2f00      	cmp	r7, #0
 800439e:	d037      	beq.n	8004410 <_strtod_l+0x250>
 80043a0:	9005      	str	r0, [sp, #20]
 80043a2:	463d      	mov	r5, r7
 80043a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80043a8:	2b09      	cmp	r3, #9
 80043aa:	d912      	bls.n	80043d2 <_strtod_l+0x212>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e7c2      	b.n	8004336 <_strtod_l+0x176>
 80043b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80043b6:	785a      	ldrb	r2, [r3, #1]
 80043b8:	3001      	adds	r0, #1
 80043ba:	2a30      	cmp	r2, #48	; 0x30
 80043bc:	d0f8      	beq.n	80043b0 <_strtod_l+0x1f0>
 80043be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	f200 84d9 	bhi.w	8004d7a <_strtod_l+0xbba>
 80043c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043ca:	9005      	str	r0, [sp, #20]
 80043cc:	2000      	movs	r0, #0
 80043ce:	9308      	str	r3, [sp, #32]
 80043d0:	4605      	mov	r5, r0
 80043d2:	3a30      	subs	r2, #48	; 0x30
 80043d4:	f100 0301 	add.w	r3, r0, #1
 80043d8:	d014      	beq.n	8004404 <_strtod_l+0x244>
 80043da:	9905      	ldr	r1, [sp, #20]
 80043dc:	4419      	add	r1, r3
 80043de:	9105      	str	r1, [sp, #20]
 80043e0:	462b      	mov	r3, r5
 80043e2:	eb00 0e05 	add.w	lr, r0, r5
 80043e6:	210a      	movs	r1, #10
 80043e8:	4573      	cmp	r3, lr
 80043ea:	d113      	bne.n	8004414 <_strtod_l+0x254>
 80043ec:	182b      	adds	r3, r5, r0
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	f105 0501 	add.w	r5, r5, #1
 80043f4:	4405      	add	r5, r0
 80043f6:	dc1c      	bgt.n	8004432 <_strtod_l+0x272>
 80043f8:	9907      	ldr	r1, [sp, #28]
 80043fa:	230a      	movs	r3, #10
 80043fc:	fb03 2301 	mla	r3, r3, r1, r2
 8004400:	9307      	str	r3, [sp, #28]
 8004402:	2300      	movs	r3, #0
 8004404:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004406:	1c51      	adds	r1, r2, #1
 8004408:	9117      	str	r1, [sp, #92]	; 0x5c
 800440a:	7852      	ldrb	r2, [r2, #1]
 800440c:	4618      	mov	r0, r3
 800440e:	e7c9      	b.n	80043a4 <_strtod_l+0x1e4>
 8004410:	4638      	mov	r0, r7
 8004412:	e7d2      	b.n	80043ba <_strtod_l+0x1fa>
 8004414:	2b08      	cmp	r3, #8
 8004416:	dc04      	bgt.n	8004422 <_strtod_l+0x262>
 8004418:	9e07      	ldr	r6, [sp, #28]
 800441a:	434e      	muls	r6, r1
 800441c:	9607      	str	r6, [sp, #28]
 800441e:	3301      	adds	r3, #1
 8004420:	e7e2      	b.n	80043e8 <_strtod_l+0x228>
 8004422:	f103 0c01 	add.w	ip, r3, #1
 8004426:	f1bc 0f10 	cmp.w	ip, #16
 800442a:	bfd8      	it	le
 800442c:	fb01 f909 	mulle.w	r9, r1, r9
 8004430:	e7f5      	b.n	800441e <_strtod_l+0x25e>
 8004432:	2d10      	cmp	r5, #16
 8004434:	bfdc      	itt	le
 8004436:	230a      	movle	r3, #10
 8004438:	fb03 2909 	mlale	r9, r3, r9, r2
 800443c:	e7e1      	b.n	8004402 <_strtod_l+0x242>
 800443e:	2300      	movs	r3, #0
 8004440:	9305      	str	r3, [sp, #20]
 8004442:	2301      	movs	r3, #1
 8004444:	e77c      	b.n	8004340 <_strtod_l+0x180>
 8004446:	f04f 0c00 	mov.w	ip, #0
 800444a:	f108 0202 	add.w	r2, r8, #2
 800444e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004450:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004454:	e785      	b.n	8004362 <_strtod_l+0x1a2>
 8004456:	f04f 0c01 	mov.w	ip, #1
 800445a:	e7f6      	b.n	800444a <_strtod_l+0x28a>
 800445c:	08008094 	.word	0x08008094
 8004460:	08007de4 	.word	0x08007de4
 8004464:	7ff00000 	.word	0x7ff00000
 8004468:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800446a:	1c51      	adds	r1, r2, #1
 800446c:	9117      	str	r1, [sp, #92]	; 0x5c
 800446e:	7852      	ldrb	r2, [r2, #1]
 8004470:	2a30      	cmp	r2, #48	; 0x30
 8004472:	d0f9      	beq.n	8004468 <_strtod_l+0x2a8>
 8004474:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004478:	2908      	cmp	r1, #8
 800447a:	f63f af79 	bhi.w	8004370 <_strtod_l+0x1b0>
 800447e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004482:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004484:	9206      	str	r2, [sp, #24]
 8004486:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004488:	1c51      	adds	r1, r2, #1
 800448a:	9117      	str	r1, [sp, #92]	; 0x5c
 800448c:	7852      	ldrb	r2, [r2, #1]
 800448e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004492:	2e09      	cmp	r6, #9
 8004494:	d937      	bls.n	8004506 <_strtod_l+0x346>
 8004496:	9e06      	ldr	r6, [sp, #24]
 8004498:	1b89      	subs	r1, r1, r6
 800449a:	2908      	cmp	r1, #8
 800449c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80044a0:	dc02      	bgt.n	80044a8 <_strtod_l+0x2e8>
 80044a2:	4576      	cmp	r6, lr
 80044a4:	bfa8      	it	ge
 80044a6:	4676      	movge	r6, lr
 80044a8:	f1bc 0f00 	cmp.w	ip, #0
 80044ac:	d000      	beq.n	80044b0 <_strtod_l+0x2f0>
 80044ae:	4276      	negs	r6, r6
 80044b0:	2d00      	cmp	r5, #0
 80044b2:	d14d      	bne.n	8004550 <_strtod_l+0x390>
 80044b4:	9904      	ldr	r1, [sp, #16]
 80044b6:	4301      	orrs	r1, r0
 80044b8:	f47f aec6 	bne.w	8004248 <_strtod_l+0x88>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f47f aee1 	bne.w	8004284 <_strtod_l+0xc4>
 80044c2:	2a69      	cmp	r2, #105	; 0x69
 80044c4:	d027      	beq.n	8004516 <_strtod_l+0x356>
 80044c6:	dc24      	bgt.n	8004512 <_strtod_l+0x352>
 80044c8:	2a49      	cmp	r2, #73	; 0x49
 80044ca:	d024      	beq.n	8004516 <_strtod_l+0x356>
 80044cc:	2a4e      	cmp	r2, #78	; 0x4e
 80044ce:	f47f aed9 	bne.w	8004284 <_strtod_l+0xc4>
 80044d2:	499f      	ldr	r1, [pc, #636]	; (8004750 <_strtod_l+0x590>)
 80044d4:	a817      	add	r0, sp, #92	; 0x5c
 80044d6:	f002 f8b3 	bl	8006640 <__match>
 80044da:	2800      	cmp	r0, #0
 80044dc:	f43f aed2 	beq.w	8004284 <_strtod_l+0xc4>
 80044e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b28      	cmp	r3, #40	; 0x28
 80044e6:	d12d      	bne.n	8004544 <_strtod_l+0x384>
 80044e8:	499a      	ldr	r1, [pc, #616]	; (8004754 <_strtod_l+0x594>)
 80044ea:	aa1a      	add	r2, sp, #104	; 0x68
 80044ec:	a817      	add	r0, sp, #92	; 0x5c
 80044ee:	f002 f8bb 	bl	8006668 <__hexnan>
 80044f2:	2805      	cmp	r0, #5
 80044f4:	d126      	bne.n	8004544 <_strtod_l+0x384>
 80044f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80044fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004500:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004504:	e6a0      	b.n	8004248 <_strtod_l+0x88>
 8004506:	210a      	movs	r1, #10
 8004508:	fb01 2e0e 	mla	lr, r1, lr, r2
 800450c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004510:	e7b9      	b.n	8004486 <_strtod_l+0x2c6>
 8004512:	2a6e      	cmp	r2, #110	; 0x6e
 8004514:	e7db      	b.n	80044ce <_strtod_l+0x30e>
 8004516:	4990      	ldr	r1, [pc, #576]	; (8004758 <_strtod_l+0x598>)
 8004518:	a817      	add	r0, sp, #92	; 0x5c
 800451a:	f002 f891 	bl	8006640 <__match>
 800451e:	2800      	cmp	r0, #0
 8004520:	f43f aeb0 	beq.w	8004284 <_strtod_l+0xc4>
 8004524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004526:	498d      	ldr	r1, [pc, #564]	; (800475c <_strtod_l+0x59c>)
 8004528:	3b01      	subs	r3, #1
 800452a:	a817      	add	r0, sp, #92	; 0x5c
 800452c:	9317      	str	r3, [sp, #92]	; 0x5c
 800452e:	f002 f887 	bl	8006640 <__match>
 8004532:	b910      	cbnz	r0, 800453a <_strtod_l+0x37a>
 8004534:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004536:	3301      	adds	r3, #1
 8004538:	9317      	str	r3, [sp, #92]	; 0x5c
 800453a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800476c <_strtod_l+0x5ac>
 800453e:	f04f 0a00 	mov.w	sl, #0
 8004542:	e681      	b.n	8004248 <_strtod_l+0x88>
 8004544:	4886      	ldr	r0, [pc, #536]	; (8004760 <_strtod_l+0x5a0>)
 8004546:	f003 fa2f 	bl	80079a8 <nan>
 800454a:	ec5b ab10 	vmov	sl, fp, d0
 800454e:	e67b      	b.n	8004248 <_strtod_l+0x88>
 8004550:	9b05      	ldr	r3, [sp, #20]
 8004552:	9807      	ldr	r0, [sp, #28]
 8004554:	1af3      	subs	r3, r6, r3
 8004556:	2f00      	cmp	r7, #0
 8004558:	bf08      	it	eq
 800455a:	462f      	moveq	r7, r5
 800455c:	2d10      	cmp	r5, #16
 800455e:	9306      	str	r3, [sp, #24]
 8004560:	46a8      	mov	r8, r5
 8004562:	bfa8      	it	ge
 8004564:	f04f 0810 	movge.w	r8, #16
 8004568:	f7fb ffcc 	bl	8000504 <__aeabi_ui2d>
 800456c:	2d09      	cmp	r5, #9
 800456e:	4682      	mov	sl, r0
 8004570:	468b      	mov	fp, r1
 8004572:	dd13      	ble.n	800459c <_strtod_l+0x3dc>
 8004574:	4b7b      	ldr	r3, [pc, #492]	; (8004764 <_strtod_l+0x5a4>)
 8004576:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800457a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800457e:	f7fc f83b 	bl	80005f8 <__aeabi_dmul>
 8004582:	4682      	mov	sl, r0
 8004584:	4648      	mov	r0, r9
 8004586:	468b      	mov	fp, r1
 8004588:	f7fb ffbc 	bl	8000504 <__aeabi_ui2d>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4650      	mov	r0, sl
 8004592:	4659      	mov	r1, fp
 8004594:	f7fb fe7a 	bl	800028c <__adddf3>
 8004598:	4682      	mov	sl, r0
 800459a:	468b      	mov	fp, r1
 800459c:	2d0f      	cmp	r5, #15
 800459e:	dc38      	bgt.n	8004612 <_strtod_l+0x452>
 80045a0:	9b06      	ldr	r3, [sp, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f43f ae50 	beq.w	8004248 <_strtod_l+0x88>
 80045a8:	dd24      	ble.n	80045f4 <_strtod_l+0x434>
 80045aa:	2b16      	cmp	r3, #22
 80045ac:	dc0b      	bgt.n	80045c6 <_strtod_l+0x406>
 80045ae:	496d      	ldr	r1, [pc, #436]	; (8004764 <_strtod_l+0x5a4>)
 80045b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80045b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045b8:	4652      	mov	r2, sl
 80045ba:	465b      	mov	r3, fp
 80045bc:	f7fc f81c 	bl	80005f8 <__aeabi_dmul>
 80045c0:	4682      	mov	sl, r0
 80045c2:	468b      	mov	fp, r1
 80045c4:	e640      	b.n	8004248 <_strtod_l+0x88>
 80045c6:	9a06      	ldr	r2, [sp, #24]
 80045c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80045cc:	4293      	cmp	r3, r2
 80045ce:	db20      	blt.n	8004612 <_strtod_l+0x452>
 80045d0:	4c64      	ldr	r4, [pc, #400]	; (8004764 <_strtod_l+0x5a4>)
 80045d2:	f1c5 050f 	rsb	r5, r5, #15
 80045d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80045da:	4652      	mov	r2, sl
 80045dc:	465b      	mov	r3, fp
 80045de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045e2:	f7fc f809 	bl	80005f8 <__aeabi_dmul>
 80045e6:	9b06      	ldr	r3, [sp, #24]
 80045e8:	1b5d      	subs	r5, r3, r5
 80045ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80045ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80045f2:	e7e3      	b.n	80045bc <_strtod_l+0x3fc>
 80045f4:	9b06      	ldr	r3, [sp, #24]
 80045f6:	3316      	adds	r3, #22
 80045f8:	db0b      	blt.n	8004612 <_strtod_l+0x452>
 80045fa:	9b05      	ldr	r3, [sp, #20]
 80045fc:	1b9e      	subs	r6, r3, r6
 80045fe:	4b59      	ldr	r3, [pc, #356]	; (8004764 <_strtod_l+0x5a4>)
 8004600:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004604:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004608:	4650      	mov	r0, sl
 800460a:	4659      	mov	r1, fp
 800460c:	f7fc f91e 	bl	800084c <__aeabi_ddiv>
 8004610:	e7d6      	b.n	80045c0 <_strtod_l+0x400>
 8004612:	9b06      	ldr	r3, [sp, #24]
 8004614:	eba5 0808 	sub.w	r8, r5, r8
 8004618:	4498      	add	r8, r3
 800461a:	f1b8 0f00 	cmp.w	r8, #0
 800461e:	dd74      	ble.n	800470a <_strtod_l+0x54a>
 8004620:	f018 030f 	ands.w	r3, r8, #15
 8004624:	d00a      	beq.n	800463c <_strtod_l+0x47c>
 8004626:	494f      	ldr	r1, [pc, #316]	; (8004764 <_strtod_l+0x5a4>)
 8004628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800462c:	4652      	mov	r2, sl
 800462e:	465b      	mov	r3, fp
 8004630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004634:	f7fb ffe0 	bl	80005f8 <__aeabi_dmul>
 8004638:	4682      	mov	sl, r0
 800463a:	468b      	mov	fp, r1
 800463c:	f038 080f 	bics.w	r8, r8, #15
 8004640:	d04f      	beq.n	80046e2 <_strtod_l+0x522>
 8004642:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004646:	dd22      	ble.n	800468e <_strtod_l+0x4ce>
 8004648:	2500      	movs	r5, #0
 800464a:	462e      	mov	r6, r5
 800464c:	9507      	str	r5, [sp, #28]
 800464e:	9505      	str	r5, [sp, #20]
 8004650:	2322      	movs	r3, #34	; 0x22
 8004652:	f8df b118 	ldr.w	fp, [pc, #280]	; 800476c <_strtod_l+0x5ac>
 8004656:	6023      	str	r3, [r4, #0]
 8004658:	f04f 0a00 	mov.w	sl, #0
 800465c:	9b07      	ldr	r3, [sp, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f43f adf2 	beq.w	8004248 <_strtod_l+0x88>
 8004664:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004666:	4620      	mov	r0, r4
 8004668:	f002 f96e 	bl	8006948 <_Bfree>
 800466c:	9905      	ldr	r1, [sp, #20]
 800466e:	4620      	mov	r0, r4
 8004670:	f002 f96a 	bl	8006948 <_Bfree>
 8004674:	4631      	mov	r1, r6
 8004676:	4620      	mov	r0, r4
 8004678:	f002 f966 	bl	8006948 <_Bfree>
 800467c:	9907      	ldr	r1, [sp, #28]
 800467e:	4620      	mov	r0, r4
 8004680:	f002 f962 	bl	8006948 <_Bfree>
 8004684:	4629      	mov	r1, r5
 8004686:	4620      	mov	r0, r4
 8004688:	f002 f95e 	bl	8006948 <_Bfree>
 800468c:	e5dc      	b.n	8004248 <_strtod_l+0x88>
 800468e:	4b36      	ldr	r3, [pc, #216]	; (8004768 <_strtod_l+0x5a8>)
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	2300      	movs	r3, #0
 8004694:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004698:	4650      	mov	r0, sl
 800469a:	4659      	mov	r1, fp
 800469c:	4699      	mov	r9, r3
 800469e:	f1b8 0f01 	cmp.w	r8, #1
 80046a2:	dc21      	bgt.n	80046e8 <_strtod_l+0x528>
 80046a4:	b10b      	cbz	r3, 80046aa <_strtod_l+0x4ea>
 80046a6:	4682      	mov	sl, r0
 80046a8:	468b      	mov	fp, r1
 80046aa:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <_strtod_l+0x5a8>)
 80046ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80046b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80046b4:	4652      	mov	r2, sl
 80046b6:	465b      	mov	r3, fp
 80046b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80046bc:	f7fb ff9c 	bl	80005f8 <__aeabi_dmul>
 80046c0:	4b2a      	ldr	r3, [pc, #168]	; (800476c <_strtod_l+0x5ac>)
 80046c2:	460a      	mov	r2, r1
 80046c4:	400b      	ands	r3, r1
 80046c6:	492a      	ldr	r1, [pc, #168]	; (8004770 <_strtod_l+0x5b0>)
 80046c8:	428b      	cmp	r3, r1
 80046ca:	4682      	mov	sl, r0
 80046cc:	d8bc      	bhi.n	8004648 <_strtod_l+0x488>
 80046ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80046d2:	428b      	cmp	r3, r1
 80046d4:	bf86      	itte	hi
 80046d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004774 <_strtod_l+0x5b4>
 80046da:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80046de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80046e2:	2300      	movs	r3, #0
 80046e4:	9304      	str	r3, [sp, #16]
 80046e6:	e084      	b.n	80047f2 <_strtod_l+0x632>
 80046e8:	f018 0f01 	tst.w	r8, #1
 80046ec:	d005      	beq.n	80046fa <_strtod_l+0x53a>
 80046ee:	9b04      	ldr	r3, [sp, #16]
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f7fb ff80 	bl	80005f8 <__aeabi_dmul>
 80046f8:	2301      	movs	r3, #1
 80046fa:	9a04      	ldr	r2, [sp, #16]
 80046fc:	3208      	adds	r2, #8
 80046fe:	f109 0901 	add.w	r9, r9, #1
 8004702:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004706:	9204      	str	r2, [sp, #16]
 8004708:	e7c9      	b.n	800469e <_strtod_l+0x4de>
 800470a:	d0ea      	beq.n	80046e2 <_strtod_l+0x522>
 800470c:	f1c8 0800 	rsb	r8, r8, #0
 8004710:	f018 020f 	ands.w	r2, r8, #15
 8004714:	d00a      	beq.n	800472c <_strtod_l+0x56c>
 8004716:	4b13      	ldr	r3, [pc, #76]	; (8004764 <_strtod_l+0x5a4>)
 8004718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800471c:	4650      	mov	r0, sl
 800471e:	4659      	mov	r1, fp
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	f7fc f892 	bl	800084c <__aeabi_ddiv>
 8004728:	4682      	mov	sl, r0
 800472a:	468b      	mov	fp, r1
 800472c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004730:	d0d7      	beq.n	80046e2 <_strtod_l+0x522>
 8004732:	f1b8 0f1f 	cmp.w	r8, #31
 8004736:	dd1f      	ble.n	8004778 <_strtod_l+0x5b8>
 8004738:	2500      	movs	r5, #0
 800473a:	462e      	mov	r6, r5
 800473c:	9507      	str	r5, [sp, #28]
 800473e:	9505      	str	r5, [sp, #20]
 8004740:	2322      	movs	r3, #34	; 0x22
 8004742:	f04f 0a00 	mov.w	sl, #0
 8004746:	f04f 0b00 	mov.w	fp, #0
 800474a:	6023      	str	r3, [r4, #0]
 800474c:	e786      	b.n	800465c <_strtod_l+0x49c>
 800474e:	bf00      	nop
 8004750:	08007db5 	.word	0x08007db5
 8004754:	08007df8 	.word	0x08007df8
 8004758:	08007dad 	.word	0x08007dad
 800475c:	08007f3c 	.word	0x08007f3c
 8004760:	08008250 	.word	0x08008250
 8004764:	08008130 	.word	0x08008130
 8004768:	08008108 	.word	0x08008108
 800476c:	7ff00000 	.word	0x7ff00000
 8004770:	7ca00000 	.word	0x7ca00000
 8004774:	7fefffff 	.word	0x7fefffff
 8004778:	f018 0310 	ands.w	r3, r8, #16
 800477c:	bf18      	it	ne
 800477e:	236a      	movne	r3, #106	; 0x6a
 8004780:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004b30 <_strtod_l+0x970>
 8004784:	9304      	str	r3, [sp, #16]
 8004786:	4650      	mov	r0, sl
 8004788:	4659      	mov	r1, fp
 800478a:	2300      	movs	r3, #0
 800478c:	f018 0f01 	tst.w	r8, #1
 8004790:	d004      	beq.n	800479c <_strtod_l+0x5dc>
 8004792:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004796:	f7fb ff2f 	bl	80005f8 <__aeabi_dmul>
 800479a:	2301      	movs	r3, #1
 800479c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80047a0:	f109 0908 	add.w	r9, r9, #8
 80047a4:	d1f2      	bne.n	800478c <_strtod_l+0x5cc>
 80047a6:	b10b      	cbz	r3, 80047ac <_strtod_l+0x5ec>
 80047a8:	4682      	mov	sl, r0
 80047aa:	468b      	mov	fp, r1
 80047ac:	9b04      	ldr	r3, [sp, #16]
 80047ae:	b1c3      	cbz	r3, 80047e2 <_strtod_l+0x622>
 80047b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80047b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	4659      	mov	r1, fp
 80047bc:	dd11      	ble.n	80047e2 <_strtod_l+0x622>
 80047be:	2b1f      	cmp	r3, #31
 80047c0:	f340 8124 	ble.w	8004a0c <_strtod_l+0x84c>
 80047c4:	2b34      	cmp	r3, #52	; 0x34
 80047c6:	bfde      	ittt	le
 80047c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80047cc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80047d0:	fa03 f202 	lslle.w	r2, r3, r2
 80047d4:	f04f 0a00 	mov.w	sl, #0
 80047d8:	bfcc      	ite	gt
 80047da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80047de:	ea02 0b01 	andle.w	fp, r2, r1
 80047e2:	2200      	movs	r2, #0
 80047e4:	2300      	movs	r3, #0
 80047e6:	4650      	mov	r0, sl
 80047e8:	4659      	mov	r1, fp
 80047ea:	f7fc f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d1a2      	bne.n	8004738 <_strtod_l+0x578>
 80047f2:	9b07      	ldr	r3, [sp, #28]
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	9908      	ldr	r1, [sp, #32]
 80047f8:	462b      	mov	r3, r5
 80047fa:	463a      	mov	r2, r7
 80047fc:	4620      	mov	r0, r4
 80047fe:	f002 f90b 	bl	8006a18 <__s2b>
 8004802:	9007      	str	r0, [sp, #28]
 8004804:	2800      	cmp	r0, #0
 8004806:	f43f af1f 	beq.w	8004648 <_strtod_l+0x488>
 800480a:	9b05      	ldr	r3, [sp, #20]
 800480c:	1b9e      	subs	r6, r3, r6
 800480e:	9b06      	ldr	r3, [sp, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	bfb4      	ite	lt
 8004814:	4633      	movlt	r3, r6
 8004816:	2300      	movge	r3, #0
 8004818:	930c      	str	r3, [sp, #48]	; 0x30
 800481a:	9b06      	ldr	r3, [sp, #24]
 800481c:	2500      	movs	r5, #0
 800481e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004822:	9312      	str	r3, [sp, #72]	; 0x48
 8004824:	462e      	mov	r6, r5
 8004826:	9b07      	ldr	r3, [sp, #28]
 8004828:	4620      	mov	r0, r4
 800482a:	6859      	ldr	r1, [r3, #4]
 800482c:	f002 f84c 	bl	80068c8 <_Balloc>
 8004830:	9005      	str	r0, [sp, #20]
 8004832:	2800      	cmp	r0, #0
 8004834:	f43f af0c 	beq.w	8004650 <_strtod_l+0x490>
 8004838:	9b07      	ldr	r3, [sp, #28]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	3202      	adds	r2, #2
 800483e:	f103 010c 	add.w	r1, r3, #12
 8004842:	0092      	lsls	r2, r2, #2
 8004844:	300c      	adds	r0, #12
 8004846:	f002 f831 	bl	80068ac <memcpy>
 800484a:	ec4b ab10 	vmov	d0, sl, fp
 800484e:	aa1a      	add	r2, sp, #104	; 0x68
 8004850:	a919      	add	r1, sp, #100	; 0x64
 8004852:	4620      	mov	r0, r4
 8004854:	f002 fc26 	bl	80070a4 <__d2b>
 8004858:	ec4b ab18 	vmov	d8, sl, fp
 800485c:	9018      	str	r0, [sp, #96]	; 0x60
 800485e:	2800      	cmp	r0, #0
 8004860:	f43f aef6 	beq.w	8004650 <_strtod_l+0x490>
 8004864:	2101      	movs	r1, #1
 8004866:	4620      	mov	r0, r4
 8004868:	f002 f970 	bl	8006b4c <__i2b>
 800486c:	4606      	mov	r6, r0
 800486e:	2800      	cmp	r0, #0
 8004870:	f43f aeee 	beq.w	8004650 <_strtod_l+0x490>
 8004874:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004876:	9904      	ldr	r1, [sp, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	bfab      	itete	ge
 800487c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800487e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004880:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004882:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004886:	bfac      	ite	ge
 8004888:	eb03 0902 	addge.w	r9, r3, r2
 800488c:	1ad7      	sublt	r7, r2, r3
 800488e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004890:	eba3 0801 	sub.w	r8, r3, r1
 8004894:	4490      	add	r8, r2
 8004896:	4ba1      	ldr	r3, [pc, #644]	; (8004b1c <_strtod_l+0x95c>)
 8004898:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800489c:	4598      	cmp	r8, r3
 800489e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80048a2:	f280 80c7 	bge.w	8004a34 <_strtod_l+0x874>
 80048a6:	eba3 0308 	sub.w	r3, r3, r8
 80048aa:	2b1f      	cmp	r3, #31
 80048ac:	eba2 0203 	sub.w	r2, r2, r3
 80048b0:	f04f 0101 	mov.w	r1, #1
 80048b4:	f300 80b1 	bgt.w	8004a1a <_strtod_l+0x85a>
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	930d      	str	r3, [sp, #52]	; 0x34
 80048be:	2300      	movs	r3, #0
 80048c0:	9308      	str	r3, [sp, #32]
 80048c2:	eb09 0802 	add.w	r8, r9, r2
 80048c6:	9b04      	ldr	r3, [sp, #16]
 80048c8:	45c1      	cmp	r9, r8
 80048ca:	4417      	add	r7, r2
 80048cc:	441f      	add	r7, r3
 80048ce:	464b      	mov	r3, r9
 80048d0:	bfa8      	it	ge
 80048d2:	4643      	movge	r3, r8
 80048d4:	42bb      	cmp	r3, r7
 80048d6:	bfa8      	it	ge
 80048d8:	463b      	movge	r3, r7
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bfc2      	ittt	gt
 80048de:	eba8 0803 	subgt.w	r8, r8, r3
 80048e2:	1aff      	subgt	r7, r7, r3
 80048e4:	eba9 0903 	subgt.w	r9, r9, r3
 80048e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	dd17      	ble.n	800491e <_strtod_l+0x75e>
 80048ee:	4631      	mov	r1, r6
 80048f0:	461a      	mov	r2, r3
 80048f2:	4620      	mov	r0, r4
 80048f4:	f002 f9ea 	bl	8006ccc <__pow5mult>
 80048f8:	4606      	mov	r6, r0
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f43f aea8 	beq.w	8004650 <_strtod_l+0x490>
 8004900:	4601      	mov	r1, r0
 8004902:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004904:	4620      	mov	r0, r4
 8004906:	f002 f937 	bl	8006b78 <__multiply>
 800490a:	900b      	str	r0, [sp, #44]	; 0x2c
 800490c:	2800      	cmp	r0, #0
 800490e:	f43f ae9f 	beq.w	8004650 <_strtod_l+0x490>
 8004912:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004914:	4620      	mov	r0, r4
 8004916:	f002 f817 	bl	8006948 <_Bfree>
 800491a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800491c:	9318      	str	r3, [sp, #96]	; 0x60
 800491e:	f1b8 0f00 	cmp.w	r8, #0
 8004922:	f300 808c 	bgt.w	8004a3e <_strtod_l+0x87e>
 8004926:	9b06      	ldr	r3, [sp, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	dd08      	ble.n	800493e <_strtod_l+0x77e>
 800492c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800492e:	9905      	ldr	r1, [sp, #20]
 8004930:	4620      	mov	r0, r4
 8004932:	f002 f9cb 	bl	8006ccc <__pow5mult>
 8004936:	9005      	str	r0, [sp, #20]
 8004938:	2800      	cmp	r0, #0
 800493a:	f43f ae89 	beq.w	8004650 <_strtod_l+0x490>
 800493e:	2f00      	cmp	r7, #0
 8004940:	dd08      	ble.n	8004954 <_strtod_l+0x794>
 8004942:	9905      	ldr	r1, [sp, #20]
 8004944:	463a      	mov	r2, r7
 8004946:	4620      	mov	r0, r4
 8004948:	f002 fa1a 	bl	8006d80 <__lshift>
 800494c:	9005      	str	r0, [sp, #20]
 800494e:	2800      	cmp	r0, #0
 8004950:	f43f ae7e 	beq.w	8004650 <_strtod_l+0x490>
 8004954:	f1b9 0f00 	cmp.w	r9, #0
 8004958:	dd08      	ble.n	800496c <_strtod_l+0x7ac>
 800495a:	4631      	mov	r1, r6
 800495c:	464a      	mov	r2, r9
 800495e:	4620      	mov	r0, r4
 8004960:	f002 fa0e 	bl	8006d80 <__lshift>
 8004964:	4606      	mov	r6, r0
 8004966:	2800      	cmp	r0, #0
 8004968:	f43f ae72 	beq.w	8004650 <_strtod_l+0x490>
 800496c:	9a05      	ldr	r2, [sp, #20]
 800496e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004970:	4620      	mov	r0, r4
 8004972:	f002 fa91 	bl	8006e98 <__mdiff>
 8004976:	4605      	mov	r5, r0
 8004978:	2800      	cmp	r0, #0
 800497a:	f43f ae69 	beq.w	8004650 <_strtod_l+0x490>
 800497e:	68c3      	ldr	r3, [r0, #12]
 8004980:	930b      	str	r3, [sp, #44]	; 0x2c
 8004982:	2300      	movs	r3, #0
 8004984:	60c3      	str	r3, [r0, #12]
 8004986:	4631      	mov	r1, r6
 8004988:	f002 fa6a 	bl	8006e60 <__mcmp>
 800498c:	2800      	cmp	r0, #0
 800498e:	da60      	bge.n	8004a52 <_strtod_l+0x892>
 8004990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004992:	ea53 030a 	orrs.w	r3, r3, sl
 8004996:	f040 8082 	bne.w	8004a9e <_strtod_l+0x8de>
 800499a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d17d      	bne.n	8004a9e <_strtod_l+0x8de>
 80049a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049a6:	0d1b      	lsrs	r3, r3, #20
 80049a8:	051b      	lsls	r3, r3, #20
 80049aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80049ae:	d976      	bls.n	8004a9e <_strtod_l+0x8de>
 80049b0:	696b      	ldr	r3, [r5, #20]
 80049b2:	b913      	cbnz	r3, 80049ba <_strtod_l+0x7fa>
 80049b4:	692b      	ldr	r3, [r5, #16]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	dd71      	ble.n	8004a9e <_strtod_l+0x8de>
 80049ba:	4629      	mov	r1, r5
 80049bc:	2201      	movs	r2, #1
 80049be:	4620      	mov	r0, r4
 80049c0:	f002 f9de 	bl	8006d80 <__lshift>
 80049c4:	4631      	mov	r1, r6
 80049c6:	4605      	mov	r5, r0
 80049c8:	f002 fa4a 	bl	8006e60 <__mcmp>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	dd66      	ble.n	8004a9e <_strtod_l+0x8de>
 80049d0:	9904      	ldr	r1, [sp, #16]
 80049d2:	4a53      	ldr	r2, [pc, #332]	; (8004b20 <_strtod_l+0x960>)
 80049d4:	465b      	mov	r3, fp
 80049d6:	2900      	cmp	r1, #0
 80049d8:	f000 8081 	beq.w	8004ade <_strtod_l+0x91e>
 80049dc:	ea02 010b 	and.w	r1, r2, fp
 80049e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80049e4:	dc7b      	bgt.n	8004ade <_strtod_l+0x91e>
 80049e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80049ea:	f77f aea9 	ble.w	8004740 <_strtod_l+0x580>
 80049ee:	4b4d      	ldr	r3, [pc, #308]	; (8004b24 <_strtod_l+0x964>)
 80049f0:	4650      	mov	r0, sl
 80049f2:	4659      	mov	r1, fp
 80049f4:	2200      	movs	r2, #0
 80049f6:	f7fb fdff 	bl	80005f8 <__aeabi_dmul>
 80049fa:	460b      	mov	r3, r1
 80049fc:	4303      	orrs	r3, r0
 80049fe:	bf08      	it	eq
 8004a00:	2322      	moveq	r3, #34	; 0x22
 8004a02:	4682      	mov	sl, r0
 8004a04:	468b      	mov	fp, r1
 8004a06:	bf08      	it	eq
 8004a08:	6023      	streq	r3, [r4, #0]
 8004a0a:	e62b      	b.n	8004664 <_strtod_l+0x4a4>
 8004a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	ea03 0a0a 	and.w	sl, r3, sl
 8004a18:	e6e3      	b.n	80047e2 <_strtod_l+0x622>
 8004a1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004a1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004a22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004a26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004a2a:	fa01 f308 	lsl.w	r3, r1, r8
 8004a2e:	9308      	str	r3, [sp, #32]
 8004a30:	910d      	str	r1, [sp, #52]	; 0x34
 8004a32:	e746      	b.n	80048c2 <_strtod_l+0x702>
 8004a34:	2300      	movs	r3, #0
 8004a36:	9308      	str	r3, [sp, #32]
 8004a38:	2301      	movs	r3, #1
 8004a3a:	930d      	str	r3, [sp, #52]	; 0x34
 8004a3c:	e741      	b.n	80048c2 <_strtod_l+0x702>
 8004a3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004a40:	4642      	mov	r2, r8
 8004a42:	4620      	mov	r0, r4
 8004a44:	f002 f99c 	bl	8006d80 <__lshift>
 8004a48:	9018      	str	r0, [sp, #96]	; 0x60
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	f47f af6b 	bne.w	8004926 <_strtod_l+0x766>
 8004a50:	e5fe      	b.n	8004650 <_strtod_l+0x490>
 8004a52:	465f      	mov	r7, fp
 8004a54:	d16e      	bne.n	8004b34 <_strtod_l+0x974>
 8004a56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a5c:	b342      	cbz	r2, 8004ab0 <_strtod_l+0x8f0>
 8004a5e:	4a32      	ldr	r2, [pc, #200]	; (8004b28 <_strtod_l+0x968>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d128      	bne.n	8004ab6 <_strtod_l+0x8f6>
 8004a64:	9b04      	ldr	r3, [sp, #16]
 8004a66:	4651      	mov	r1, sl
 8004a68:	b1eb      	cbz	r3, 8004aa6 <_strtod_l+0x8e6>
 8004a6a:	4b2d      	ldr	r3, [pc, #180]	; (8004b20 <_strtod_l+0x960>)
 8004a6c:	403b      	ands	r3, r7
 8004a6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a76:	d819      	bhi.n	8004aac <_strtod_l+0x8ec>
 8004a78:	0d1b      	lsrs	r3, r3, #20
 8004a7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	4299      	cmp	r1, r3
 8004a84:	d117      	bne.n	8004ab6 <_strtod_l+0x8f6>
 8004a86:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <_strtod_l+0x96c>)
 8004a88:	429f      	cmp	r7, r3
 8004a8a:	d102      	bne.n	8004a92 <_strtod_l+0x8d2>
 8004a8c:	3101      	adds	r1, #1
 8004a8e:	f43f addf 	beq.w	8004650 <_strtod_l+0x490>
 8004a92:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <_strtod_l+0x960>)
 8004a94:	403b      	ands	r3, r7
 8004a96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004a9a:	f04f 0a00 	mov.w	sl, #0
 8004a9e:	9b04      	ldr	r3, [sp, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1a4      	bne.n	80049ee <_strtod_l+0x82e>
 8004aa4:	e5de      	b.n	8004664 <_strtod_l+0x4a4>
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aaa:	e7ea      	b.n	8004a82 <_strtod_l+0x8c2>
 8004aac:	4613      	mov	r3, r2
 8004aae:	e7e8      	b.n	8004a82 <_strtod_l+0x8c2>
 8004ab0:	ea53 030a 	orrs.w	r3, r3, sl
 8004ab4:	d08c      	beq.n	80049d0 <_strtod_l+0x810>
 8004ab6:	9b08      	ldr	r3, [sp, #32]
 8004ab8:	b1db      	cbz	r3, 8004af2 <_strtod_l+0x932>
 8004aba:	423b      	tst	r3, r7
 8004abc:	d0ef      	beq.n	8004a9e <_strtod_l+0x8de>
 8004abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ac0:	9a04      	ldr	r2, [sp, #16]
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	b1c3      	cbz	r3, 8004afa <_strtod_l+0x93a>
 8004ac8:	f7ff fb5e 	bl	8004188 <sulp>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	ec51 0b18 	vmov	r0, r1, d8
 8004ad4:	f7fb fbda 	bl	800028c <__adddf3>
 8004ad8:	4682      	mov	sl, r0
 8004ada:	468b      	mov	fp, r1
 8004adc:	e7df      	b.n	8004a9e <_strtod_l+0x8de>
 8004ade:	4013      	ands	r3, r2
 8004ae0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004ae4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004ae8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004aec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004af0:	e7d5      	b.n	8004a9e <_strtod_l+0x8de>
 8004af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004af4:	ea13 0f0a 	tst.w	r3, sl
 8004af8:	e7e0      	b.n	8004abc <_strtod_l+0x8fc>
 8004afa:	f7ff fb45 	bl	8004188 <sulp>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	ec51 0b18 	vmov	r0, r1, d8
 8004b06:	f7fb fbbf 	bl	8000288 <__aeabi_dsub>
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	4682      	mov	sl, r0
 8004b10:	468b      	mov	fp, r1
 8004b12:	f7fb ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d0c1      	beq.n	8004a9e <_strtod_l+0x8de>
 8004b1a:	e611      	b.n	8004740 <_strtod_l+0x580>
 8004b1c:	fffffc02 	.word	0xfffffc02
 8004b20:	7ff00000 	.word	0x7ff00000
 8004b24:	39500000 	.word	0x39500000
 8004b28:	000fffff 	.word	0x000fffff
 8004b2c:	7fefffff 	.word	0x7fefffff
 8004b30:	08007e10 	.word	0x08007e10
 8004b34:	4631      	mov	r1, r6
 8004b36:	4628      	mov	r0, r5
 8004b38:	f002 fb10 	bl	800715c <__ratio>
 8004b3c:	ec59 8b10 	vmov	r8, r9, d0
 8004b40:	ee10 0a10 	vmov	r0, s0
 8004b44:	2200      	movs	r2, #0
 8004b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	f7fb ffd0 	bl	8000af0 <__aeabi_dcmple>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d07a      	beq.n	8004c4a <_strtod_l+0xa8a>
 8004b54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d04a      	beq.n	8004bf0 <_strtod_l+0xa30>
 8004b5a:	4b95      	ldr	r3, [pc, #596]	; (8004db0 <_strtod_l+0xbf0>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004db0 <_strtod_l+0xbf0>
 8004b66:	f04f 0800 	mov.w	r8, #0
 8004b6a:	4b92      	ldr	r3, [pc, #584]	; (8004db4 <_strtod_l+0xbf4>)
 8004b6c:	403b      	ands	r3, r7
 8004b6e:	930d      	str	r3, [sp, #52]	; 0x34
 8004b70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b72:	4b91      	ldr	r3, [pc, #580]	; (8004db8 <_strtod_l+0xbf8>)
 8004b74:	429a      	cmp	r2, r3
 8004b76:	f040 80b0 	bne.w	8004cda <_strtod_l+0xb1a>
 8004b7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b7e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004b82:	ec4b ab10 	vmov	d0, sl, fp
 8004b86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b8a:	f002 fa0f 	bl	8006fac <__ulp>
 8004b8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b92:	ec53 2b10 	vmov	r2, r3, d0
 8004b96:	f7fb fd2f 	bl	80005f8 <__aeabi_dmul>
 8004b9a:	4652      	mov	r2, sl
 8004b9c:	465b      	mov	r3, fp
 8004b9e:	f7fb fb75 	bl	800028c <__adddf3>
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4983      	ldr	r1, [pc, #524]	; (8004db4 <_strtod_l+0xbf4>)
 8004ba6:	4a85      	ldr	r2, [pc, #532]	; (8004dbc <_strtod_l+0xbfc>)
 8004ba8:	4019      	ands	r1, r3
 8004baa:	4291      	cmp	r1, r2
 8004bac:	4682      	mov	sl, r0
 8004bae:	d960      	bls.n	8004c72 <_strtod_l+0xab2>
 8004bb0:	ee18 3a90 	vmov	r3, s17
 8004bb4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d104      	bne.n	8004bc6 <_strtod_l+0xa06>
 8004bbc:	ee18 3a10 	vmov	r3, s16
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f43f ad45 	beq.w	8004650 <_strtod_l+0x490>
 8004bc6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004dc8 <_strtod_l+0xc08>
 8004bca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004bce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f001 feb9 	bl	8006948 <_Bfree>
 8004bd6:	9905      	ldr	r1, [sp, #20]
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f001 feb5 	bl	8006948 <_Bfree>
 8004bde:	4631      	mov	r1, r6
 8004be0:	4620      	mov	r0, r4
 8004be2:	f001 feb1 	bl	8006948 <_Bfree>
 8004be6:	4629      	mov	r1, r5
 8004be8:	4620      	mov	r0, r4
 8004bea:	f001 fead 	bl	8006948 <_Bfree>
 8004bee:	e61a      	b.n	8004826 <_strtod_l+0x666>
 8004bf0:	f1ba 0f00 	cmp.w	sl, #0
 8004bf4:	d11b      	bne.n	8004c2e <_strtod_l+0xa6e>
 8004bf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004bfa:	b9f3      	cbnz	r3, 8004c3a <_strtod_l+0xa7a>
 8004bfc:	4b6c      	ldr	r3, [pc, #432]	; (8004db0 <_strtod_l+0xbf0>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	4640      	mov	r0, r8
 8004c02:	4649      	mov	r1, r9
 8004c04:	f7fb ff6a 	bl	8000adc <__aeabi_dcmplt>
 8004c08:	b9d0      	cbnz	r0, 8004c40 <_strtod_l+0xa80>
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	4b6c      	ldr	r3, [pc, #432]	; (8004dc0 <_strtod_l+0xc00>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	f7fb fcf1 	bl	80005f8 <__aeabi_dmul>
 8004c16:	4680      	mov	r8, r0
 8004c18:	4689      	mov	r9, r1
 8004c1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004c1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004c22:	9315      	str	r3, [sp, #84]	; 0x54
 8004c24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004c28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c2c:	e79d      	b.n	8004b6a <_strtod_l+0x9aa>
 8004c2e:	f1ba 0f01 	cmp.w	sl, #1
 8004c32:	d102      	bne.n	8004c3a <_strtod_l+0xa7a>
 8004c34:	2f00      	cmp	r7, #0
 8004c36:	f43f ad83 	beq.w	8004740 <_strtod_l+0x580>
 8004c3a:	4b62      	ldr	r3, [pc, #392]	; (8004dc4 <_strtod_l+0xc04>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	e78e      	b.n	8004b5e <_strtod_l+0x99e>
 8004c40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004dc0 <_strtod_l+0xc00>
 8004c44:	f04f 0800 	mov.w	r8, #0
 8004c48:	e7e7      	b.n	8004c1a <_strtod_l+0xa5a>
 8004c4a:	4b5d      	ldr	r3, [pc, #372]	; (8004dc0 <_strtod_l+0xc00>)
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	4649      	mov	r1, r9
 8004c50:	2200      	movs	r2, #0
 8004c52:	f7fb fcd1 	bl	80005f8 <__aeabi_dmul>
 8004c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c58:	4680      	mov	r8, r0
 8004c5a:	4689      	mov	r9, r1
 8004c5c:	b933      	cbnz	r3, 8004c6c <_strtod_l+0xaac>
 8004c5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c62:	900e      	str	r0, [sp, #56]	; 0x38
 8004c64:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004c6a:	e7dd      	b.n	8004c28 <_strtod_l+0xa68>
 8004c6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004c70:	e7f9      	b.n	8004c66 <_strtod_l+0xaa6>
 8004c72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004c76:	9b04      	ldr	r3, [sp, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1a8      	bne.n	8004bce <_strtod_l+0xa0e>
 8004c7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c82:	0d1b      	lsrs	r3, r3, #20
 8004c84:	051b      	lsls	r3, r3, #20
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d1a1      	bne.n	8004bce <_strtod_l+0xa0e>
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	f7fc f813 	bl	8000cb8 <__aeabi_d2lz>
 8004c92:	f7fb fc83 	bl	800059c <__aeabi_l2d>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	f7fb faf3 	bl	8000288 <__aeabi_dsub>
 8004ca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ca8:	ea43 030a 	orr.w	r3, r3, sl
 8004cac:	4313      	orrs	r3, r2
 8004cae:	4680      	mov	r8, r0
 8004cb0:	4689      	mov	r9, r1
 8004cb2:	d055      	beq.n	8004d60 <_strtod_l+0xba0>
 8004cb4:	a336      	add	r3, pc, #216	; (adr r3, 8004d90 <_strtod_l+0xbd0>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f7fb ff0f 	bl	8000adc <__aeabi_dcmplt>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f47f acd0 	bne.w	8004664 <_strtod_l+0x4a4>
 8004cc4:	a334      	add	r3, pc, #208	; (adr r3, 8004d98 <_strtod_l+0xbd8>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	4640      	mov	r0, r8
 8004ccc:	4649      	mov	r1, r9
 8004cce:	f7fb ff23 	bl	8000b18 <__aeabi_dcmpgt>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	f43f af7b 	beq.w	8004bce <_strtod_l+0xa0e>
 8004cd8:	e4c4      	b.n	8004664 <_strtod_l+0x4a4>
 8004cda:	9b04      	ldr	r3, [sp, #16]
 8004cdc:	b333      	cbz	r3, 8004d2c <_strtod_l+0xb6c>
 8004cde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ce0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ce4:	d822      	bhi.n	8004d2c <_strtod_l+0xb6c>
 8004ce6:	a32e      	add	r3, pc, #184	; (adr r3, 8004da0 <_strtod_l+0xbe0>)
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	4640      	mov	r0, r8
 8004cee:	4649      	mov	r1, r9
 8004cf0:	f7fb fefe 	bl	8000af0 <__aeabi_dcmple>
 8004cf4:	b1a0      	cbz	r0, 8004d20 <_strtod_l+0xb60>
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	f7fb ff55 	bl	8000ba8 <__aeabi_d2uiz>
 8004cfe:	2801      	cmp	r0, #1
 8004d00:	bf38      	it	cc
 8004d02:	2001      	movcc	r0, #1
 8004d04:	f7fb fbfe 	bl	8000504 <__aeabi_ui2d>
 8004d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d0a:	4680      	mov	r8, r0
 8004d0c:	4689      	mov	r9, r1
 8004d0e:	bb23      	cbnz	r3, 8004d5a <_strtod_l+0xb9a>
 8004d10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d14:	9010      	str	r0, [sp, #64]	; 0x40
 8004d16:	9311      	str	r3, [sp, #68]	; 0x44
 8004d18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d30:	eeb0 0a48 	vmov.f32	s0, s16
 8004d34:	eef0 0a68 	vmov.f32	s1, s17
 8004d38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004d3c:	f002 f936 	bl	8006fac <__ulp>
 8004d40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d44:	ec53 2b10 	vmov	r2, r3, d0
 8004d48:	f7fb fc56 	bl	80005f8 <__aeabi_dmul>
 8004d4c:	ec53 2b18 	vmov	r2, r3, d8
 8004d50:	f7fb fa9c 	bl	800028c <__adddf3>
 8004d54:	4682      	mov	sl, r0
 8004d56:	468b      	mov	fp, r1
 8004d58:	e78d      	b.n	8004c76 <_strtod_l+0xab6>
 8004d5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004d5e:	e7db      	b.n	8004d18 <_strtod_l+0xb58>
 8004d60:	a311      	add	r3, pc, #68	; (adr r3, 8004da8 <_strtod_l+0xbe8>)
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f7fb feb9 	bl	8000adc <__aeabi_dcmplt>
 8004d6a:	e7b2      	b.n	8004cd2 <_strtod_l+0xb12>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004d72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	f7ff ba6b 	b.w	8004250 <_strtod_l+0x90>
 8004d7a:	2a65      	cmp	r2, #101	; 0x65
 8004d7c:	f43f ab5f 	beq.w	800443e <_strtod_l+0x27e>
 8004d80:	2a45      	cmp	r2, #69	; 0x45
 8004d82:	f43f ab5c 	beq.w	800443e <_strtod_l+0x27e>
 8004d86:	2301      	movs	r3, #1
 8004d88:	f7ff bb94 	b.w	80044b4 <_strtod_l+0x2f4>
 8004d8c:	f3af 8000 	nop.w
 8004d90:	94a03595 	.word	0x94a03595
 8004d94:	3fdfffff 	.word	0x3fdfffff
 8004d98:	35afe535 	.word	0x35afe535
 8004d9c:	3fe00000 	.word	0x3fe00000
 8004da0:	ffc00000 	.word	0xffc00000
 8004da4:	41dfffff 	.word	0x41dfffff
 8004da8:	94a03595 	.word	0x94a03595
 8004dac:	3fcfffff 	.word	0x3fcfffff
 8004db0:	3ff00000 	.word	0x3ff00000
 8004db4:	7ff00000 	.word	0x7ff00000
 8004db8:	7fe00000 	.word	0x7fe00000
 8004dbc:	7c9fffff 	.word	0x7c9fffff
 8004dc0:	3fe00000 	.word	0x3fe00000
 8004dc4:	bff00000 	.word	0xbff00000
 8004dc8:	7fefffff 	.word	0x7fefffff

08004dcc <_strtod_r>:
 8004dcc:	4b01      	ldr	r3, [pc, #4]	; (8004dd4 <_strtod_r+0x8>)
 8004dce:	f7ff b9f7 	b.w	80041c0 <_strtod_l>
 8004dd2:	bf00      	nop
 8004dd4:	20000074 	.word	0x20000074

08004dd8 <_strtol_l.constprop.0>:
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dde:	d001      	beq.n	8004de4 <_strtol_l.constprop.0+0xc>
 8004de0:	2b24      	cmp	r3, #36	; 0x24
 8004de2:	d906      	bls.n	8004df2 <_strtol_l.constprop.0+0x1a>
 8004de4:	f7fe fa70 	bl	80032c8 <__errno>
 8004de8:	2316      	movs	r3, #22
 8004dea:	6003      	str	r3, [r0, #0]
 8004dec:	2000      	movs	r0, #0
 8004dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004ed8 <_strtol_l.constprop.0+0x100>
 8004df6:	460d      	mov	r5, r1
 8004df8:	462e      	mov	r6, r5
 8004dfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dfe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004e02:	f017 0708 	ands.w	r7, r7, #8
 8004e06:	d1f7      	bne.n	8004df8 <_strtol_l.constprop.0+0x20>
 8004e08:	2c2d      	cmp	r4, #45	; 0x2d
 8004e0a:	d132      	bne.n	8004e72 <_strtol_l.constprop.0+0x9a>
 8004e0c:	782c      	ldrb	r4, [r5, #0]
 8004e0e:	2701      	movs	r7, #1
 8004e10:	1cb5      	adds	r5, r6, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d05b      	beq.n	8004ece <_strtol_l.constprop.0+0xf6>
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d109      	bne.n	8004e2e <_strtol_l.constprop.0+0x56>
 8004e1a:	2c30      	cmp	r4, #48	; 0x30
 8004e1c:	d107      	bne.n	8004e2e <_strtol_l.constprop.0+0x56>
 8004e1e:	782c      	ldrb	r4, [r5, #0]
 8004e20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004e24:	2c58      	cmp	r4, #88	; 0x58
 8004e26:	d14d      	bne.n	8004ec4 <_strtol_l.constprop.0+0xec>
 8004e28:	786c      	ldrb	r4, [r5, #1]
 8004e2a:	2310      	movs	r3, #16
 8004e2c:	3502      	adds	r5, #2
 8004e2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004e32:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004e36:	f04f 0c00 	mov.w	ip, #0
 8004e3a:	fbb8 f9f3 	udiv	r9, r8, r3
 8004e3e:	4666      	mov	r6, ip
 8004e40:	fb03 8a19 	mls	sl, r3, r9, r8
 8004e44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004e48:	f1be 0f09 	cmp.w	lr, #9
 8004e4c:	d816      	bhi.n	8004e7c <_strtol_l.constprop.0+0xa4>
 8004e4e:	4674      	mov	r4, lr
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	dd24      	ble.n	8004e9e <_strtol_l.constprop.0+0xc6>
 8004e54:	f1bc 0f00 	cmp.w	ip, #0
 8004e58:	db1e      	blt.n	8004e98 <_strtol_l.constprop.0+0xc0>
 8004e5a:	45b1      	cmp	r9, r6
 8004e5c:	d31c      	bcc.n	8004e98 <_strtol_l.constprop.0+0xc0>
 8004e5e:	d101      	bne.n	8004e64 <_strtol_l.constprop.0+0x8c>
 8004e60:	45a2      	cmp	sl, r4
 8004e62:	db19      	blt.n	8004e98 <_strtol_l.constprop.0+0xc0>
 8004e64:	fb06 4603 	mla	r6, r6, r3, r4
 8004e68:	f04f 0c01 	mov.w	ip, #1
 8004e6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e70:	e7e8      	b.n	8004e44 <_strtol_l.constprop.0+0x6c>
 8004e72:	2c2b      	cmp	r4, #43	; 0x2b
 8004e74:	bf04      	itt	eq
 8004e76:	782c      	ldrbeq	r4, [r5, #0]
 8004e78:	1cb5      	addeq	r5, r6, #2
 8004e7a:	e7ca      	b.n	8004e12 <_strtol_l.constprop.0+0x3a>
 8004e7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004e80:	f1be 0f19 	cmp.w	lr, #25
 8004e84:	d801      	bhi.n	8004e8a <_strtol_l.constprop.0+0xb2>
 8004e86:	3c37      	subs	r4, #55	; 0x37
 8004e88:	e7e2      	b.n	8004e50 <_strtol_l.constprop.0+0x78>
 8004e8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004e8e:	f1be 0f19 	cmp.w	lr, #25
 8004e92:	d804      	bhi.n	8004e9e <_strtol_l.constprop.0+0xc6>
 8004e94:	3c57      	subs	r4, #87	; 0x57
 8004e96:	e7db      	b.n	8004e50 <_strtol_l.constprop.0+0x78>
 8004e98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004e9c:	e7e6      	b.n	8004e6c <_strtol_l.constprop.0+0x94>
 8004e9e:	f1bc 0f00 	cmp.w	ip, #0
 8004ea2:	da05      	bge.n	8004eb0 <_strtol_l.constprop.0+0xd8>
 8004ea4:	2322      	movs	r3, #34	; 0x22
 8004ea6:	6003      	str	r3, [r0, #0]
 8004ea8:	4646      	mov	r6, r8
 8004eaa:	b942      	cbnz	r2, 8004ebe <_strtol_l.constprop.0+0xe6>
 8004eac:	4630      	mov	r0, r6
 8004eae:	e79e      	b.n	8004dee <_strtol_l.constprop.0+0x16>
 8004eb0:	b107      	cbz	r7, 8004eb4 <_strtol_l.constprop.0+0xdc>
 8004eb2:	4276      	negs	r6, r6
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	d0f9      	beq.n	8004eac <_strtol_l.constprop.0+0xd4>
 8004eb8:	f1bc 0f00 	cmp.w	ip, #0
 8004ebc:	d000      	beq.n	8004ec0 <_strtol_l.constprop.0+0xe8>
 8004ebe:	1e69      	subs	r1, r5, #1
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	e7f3      	b.n	8004eac <_strtol_l.constprop.0+0xd4>
 8004ec4:	2430      	movs	r4, #48	; 0x30
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1b1      	bne.n	8004e2e <_strtol_l.constprop.0+0x56>
 8004eca:	2308      	movs	r3, #8
 8004ecc:	e7af      	b.n	8004e2e <_strtol_l.constprop.0+0x56>
 8004ece:	2c30      	cmp	r4, #48	; 0x30
 8004ed0:	d0a5      	beq.n	8004e1e <_strtol_l.constprop.0+0x46>
 8004ed2:	230a      	movs	r3, #10
 8004ed4:	e7ab      	b.n	8004e2e <_strtol_l.constprop.0+0x56>
 8004ed6:	bf00      	nop
 8004ed8:	08007e39 	.word	0x08007e39

08004edc <_strtol_r>:
 8004edc:	f7ff bf7c 	b.w	8004dd8 <_strtol_l.constprop.0>

08004ee0 <__swbuf_r>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	460e      	mov	r6, r1
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	b118      	cbz	r0, 8004ef2 <__swbuf_r+0x12>
 8004eea:	6983      	ldr	r3, [r0, #24]
 8004eec:	b90b      	cbnz	r3, 8004ef2 <__swbuf_r+0x12>
 8004eee:	f001 f84b 	bl	8005f88 <__sinit>
 8004ef2:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <__swbuf_r+0x98>)
 8004ef4:	429c      	cmp	r4, r3
 8004ef6:	d12b      	bne.n	8004f50 <__swbuf_r+0x70>
 8004ef8:	686c      	ldr	r4, [r5, #4]
 8004efa:	69a3      	ldr	r3, [r4, #24]
 8004efc:	60a3      	str	r3, [r4, #8]
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	071a      	lsls	r2, r3, #28
 8004f02:	d52f      	bpl.n	8004f64 <__swbuf_r+0x84>
 8004f04:	6923      	ldr	r3, [r4, #16]
 8004f06:	b36b      	cbz	r3, 8004f64 <__swbuf_r+0x84>
 8004f08:	6923      	ldr	r3, [r4, #16]
 8004f0a:	6820      	ldr	r0, [r4, #0]
 8004f0c:	1ac0      	subs	r0, r0, r3
 8004f0e:	6963      	ldr	r3, [r4, #20]
 8004f10:	b2f6      	uxtb	r6, r6
 8004f12:	4283      	cmp	r3, r0
 8004f14:	4637      	mov	r7, r6
 8004f16:	dc04      	bgt.n	8004f22 <__swbuf_r+0x42>
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f000 ffa0 	bl	8005e60 <_fflush_r>
 8004f20:	bb30      	cbnz	r0, 8004f70 <__swbuf_r+0x90>
 8004f22:	68a3      	ldr	r3, [r4, #8]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	60a3      	str	r3, [r4, #8]
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	6022      	str	r2, [r4, #0]
 8004f2e:	701e      	strb	r6, [r3, #0]
 8004f30:	6963      	ldr	r3, [r4, #20]
 8004f32:	3001      	adds	r0, #1
 8004f34:	4283      	cmp	r3, r0
 8004f36:	d004      	beq.n	8004f42 <__swbuf_r+0x62>
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	07db      	lsls	r3, r3, #31
 8004f3c:	d506      	bpl.n	8004f4c <__swbuf_r+0x6c>
 8004f3e:	2e0a      	cmp	r6, #10
 8004f40:	d104      	bne.n	8004f4c <__swbuf_r+0x6c>
 8004f42:	4621      	mov	r1, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	f000 ff8b 	bl	8005e60 <_fflush_r>
 8004f4a:	b988      	cbnz	r0, 8004f70 <__swbuf_r+0x90>
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <__swbuf_r+0x9c>)
 8004f52:	429c      	cmp	r4, r3
 8004f54:	d101      	bne.n	8004f5a <__swbuf_r+0x7a>
 8004f56:	68ac      	ldr	r4, [r5, #8]
 8004f58:	e7cf      	b.n	8004efa <__swbuf_r+0x1a>
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <__swbuf_r+0xa0>)
 8004f5c:	429c      	cmp	r4, r3
 8004f5e:	bf08      	it	eq
 8004f60:	68ec      	ldreq	r4, [r5, #12]
 8004f62:	e7ca      	b.n	8004efa <__swbuf_r+0x1a>
 8004f64:	4621      	mov	r1, r4
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 f80c 	bl	8004f84 <__swsetup_r>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d0cb      	beq.n	8004f08 <__swbuf_r+0x28>
 8004f70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004f74:	e7ea      	b.n	8004f4c <__swbuf_r+0x6c>
 8004f76:	bf00      	nop
 8004f78:	08007fec 	.word	0x08007fec
 8004f7c:	0800800c 	.word	0x0800800c
 8004f80:	08007fcc 	.word	0x08007fcc

08004f84 <__swsetup_r>:
 8004f84:	4b32      	ldr	r3, [pc, #200]	; (8005050 <__swsetup_r+0xcc>)
 8004f86:	b570      	push	{r4, r5, r6, lr}
 8004f88:	681d      	ldr	r5, [r3, #0]
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	b125      	cbz	r5, 8004f9a <__swsetup_r+0x16>
 8004f90:	69ab      	ldr	r3, [r5, #24]
 8004f92:	b913      	cbnz	r3, 8004f9a <__swsetup_r+0x16>
 8004f94:	4628      	mov	r0, r5
 8004f96:	f000 fff7 	bl	8005f88 <__sinit>
 8004f9a:	4b2e      	ldr	r3, [pc, #184]	; (8005054 <__swsetup_r+0xd0>)
 8004f9c:	429c      	cmp	r4, r3
 8004f9e:	d10f      	bne.n	8004fc0 <__swsetup_r+0x3c>
 8004fa0:	686c      	ldr	r4, [r5, #4]
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fa8:	0719      	lsls	r1, r3, #28
 8004faa:	d42c      	bmi.n	8005006 <__swsetup_r+0x82>
 8004fac:	06dd      	lsls	r5, r3, #27
 8004fae:	d411      	bmi.n	8004fd4 <__swsetup_r+0x50>
 8004fb0:	2309      	movs	r3, #9
 8004fb2:	6033      	str	r3, [r6, #0]
 8004fb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fbe:	e03e      	b.n	800503e <__swsetup_r+0xba>
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <__swsetup_r+0xd4>)
 8004fc2:	429c      	cmp	r4, r3
 8004fc4:	d101      	bne.n	8004fca <__swsetup_r+0x46>
 8004fc6:	68ac      	ldr	r4, [r5, #8]
 8004fc8:	e7eb      	b.n	8004fa2 <__swsetup_r+0x1e>
 8004fca:	4b24      	ldr	r3, [pc, #144]	; (800505c <__swsetup_r+0xd8>)
 8004fcc:	429c      	cmp	r4, r3
 8004fce:	bf08      	it	eq
 8004fd0:	68ec      	ldreq	r4, [r5, #12]
 8004fd2:	e7e6      	b.n	8004fa2 <__swsetup_r+0x1e>
 8004fd4:	0758      	lsls	r0, r3, #29
 8004fd6:	d512      	bpl.n	8004ffe <__swsetup_r+0x7a>
 8004fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fda:	b141      	cbz	r1, 8004fee <__swsetup_r+0x6a>
 8004fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fe0:	4299      	cmp	r1, r3
 8004fe2:	d002      	beq.n	8004fea <__swsetup_r+0x66>
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f002 f947 	bl	8007278 <_free_r>
 8004fea:	2300      	movs	r3, #0
 8004fec:	6363      	str	r3, [r4, #52]	; 0x34
 8004fee:	89a3      	ldrh	r3, [r4, #12]
 8004ff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ff4:	81a3      	strh	r3, [r4, #12]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	6063      	str	r3, [r4, #4]
 8004ffa:	6923      	ldr	r3, [r4, #16]
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	f043 0308 	orr.w	r3, r3, #8
 8005004:	81a3      	strh	r3, [r4, #12]
 8005006:	6923      	ldr	r3, [r4, #16]
 8005008:	b94b      	cbnz	r3, 800501e <__swsetup_r+0x9a>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005014:	d003      	beq.n	800501e <__swsetup_r+0x9a>
 8005016:	4621      	mov	r1, r4
 8005018:	4630      	mov	r0, r6
 800501a:	f001 fbed 	bl	80067f8 <__smakebuf_r>
 800501e:	89a0      	ldrh	r0, [r4, #12]
 8005020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005024:	f010 0301 	ands.w	r3, r0, #1
 8005028:	d00a      	beq.n	8005040 <__swsetup_r+0xbc>
 800502a:	2300      	movs	r3, #0
 800502c:	60a3      	str	r3, [r4, #8]
 800502e:	6963      	ldr	r3, [r4, #20]
 8005030:	425b      	negs	r3, r3
 8005032:	61a3      	str	r3, [r4, #24]
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	b943      	cbnz	r3, 800504a <__swsetup_r+0xc6>
 8005038:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800503c:	d1ba      	bne.n	8004fb4 <__swsetup_r+0x30>
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	0781      	lsls	r1, r0, #30
 8005042:	bf58      	it	pl
 8005044:	6963      	ldrpl	r3, [r4, #20]
 8005046:	60a3      	str	r3, [r4, #8]
 8005048:	e7f4      	b.n	8005034 <__swsetup_r+0xb0>
 800504a:	2000      	movs	r0, #0
 800504c:	e7f7      	b.n	800503e <__swsetup_r+0xba>
 800504e:	bf00      	nop
 8005050:	2000000c 	.word	0x2000000c
 8005054:	08007fec 	.word	0x08007fec
 8005058:	0800800c 	.word	0x0800800c
 800505c:	08007fcc 	.word	0x08007fcc

08005060 <quorem>:
 8005060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005064:	6903      	ldr	r3, [r0, #16]
 8005066:	690c      	ldr	r4, [r1, #16]
 8005068:	42a3      	cmp	r3, r4
 800506a:	4607      	mov	r7, r0
 800506c:	f2c0 8081 	blt.w	8005172 <quorem+0x112>
 8005070:	3c01      	subs	r4, #1
 8005072:	f101 0814 	add.w	r8, r1, #20
 8005076:	f100 0514 	add.w	r5, r0, #20
 800507a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005084:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005088:	3301      	adds	r3, #1
 800508a:	429a      	cmp	r2, r3
 800508c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005090:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005094:	fbb2 f6f3 	udiv	r6, r2, r3
 8005098:	d331      	bcc.n	80050fe <quorem+0x9e>
 800509a:	f04f 0e00 	mov.w	lr, #0
 800509e:	4640      	mov	r0, r8
 80050a0:	46ac      	mov	ip, r5
 80050a2:	46f2      	mov	sl, lr
 80050a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80050a8:	b293      	uxth	r3, r2
 80050aa:	fb06 e303 	mla	r3, r6, r3, lr
 80050ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	ebaa 0303 	sub.w	r3, sl, r3
 80050b8:	f8dc a000 	ldr.w	sl, [ip]
 80050bc:	0c12      	lsrs	r2, r2, #16
 80050be:	fa13 f38a 	uxtah	r3, r3, sl
 80050c2:	fb06 e202 	mla	r2, r6, r2, lr
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	9b00      	ldr	r3, [sp, #0]
 80050ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050ce:	b292      	uxth	r2, r2
 80050d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80050dc:	4581      	cmp	r9, r0
 80050de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050e2:	f84c 3b04 	str.w	r3, [ip], #4
 80050e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050ea:	d2db      	bcs.n	80050a4 <quorem+0x44>
 80050ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80050f0:	b92b      	cbnz	r3, 80050fe <quorem+0x9e>
 80050f2:	9b01      	ldr	r3, [sp, #4]
 80050f4:	3b04      	subs	r3, #4
 80050f6:	429d      	cmp	r5, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	d32e      	bcc.n	800515a <quorem+0xfa>
 80050fc:	613c      	str	r4, [r7, #16]
 80050fe:	4638      	mov	r0, r7
 8005100:	f001 feae 	bl	8006e60 <__mcmp>
 8005104:	2800      	cmp	r0, #0
 8005106:	db24      	blt.n	8005152 <quorem+0xf2>
 8005108:	3601      	adds	r6, #1
 800510a:	4628      	mov	r0, r5
 800510c:	f04f 0c00 	mov.w	ip, #0
 8005110:	f858 2b04 	ldr.w	r2, [r8], #4
 8005114:	f8d0 e000 	ldr.w	lr, [r0]
 8005118:	b293      	uxth	r3, r2
 800511a:	ebac 0303 	sub.w	r3, ip, r3
 800511e:	0c12      	lsrs	r2, r2, #16
 8005120:	fa13 f38e 	uxtah	r3, r3, lr
 8005124:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005128:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800512c:	b29b      	uxth	r3, r3
 800512e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005132:	45c1      	cmp	r9, r8
 8005134:	f840 3b04 	str.w	r3, [r0], #4
 8005138:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800513c:	d2e8      	bcs.n	8005110 <quorem+0xb0>
 800513e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005146:	b922      	cbnz	r2, 8005152 <quorem+0xf2>
 8005148:	3b04      	subs	r3, #4
 800514a:	429d      	cmp	r5, r3
 800514c:	461a      	mov	r2, r3
 800514e:	d30a      	bcc.n	8005166 <quorem+0x106>
 8005150:	613c      	str	r4, [r7, #16]
 8005152:	4630      	mov	r0, r6
 8005154:	b003      	add	sp, #12
 8005156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	3b04      	subs	r3, #4
 800515e:	2a00      	cmp	r2, #0
 8005160:	d1cc      	bne.n	80050fc <quorem+0x9c>
 8005162:	3c01      	subs	r4, #1
 8005164:	e7c7      	b.n	80050f6 <quorem+0x96>
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	3b04      	subs	r3, #4
 800516a:	2a00      	cmp	r2, #0
 800516c:	d1f0      	bne.n	8005150 <quorem+0xf0>
 800516e:	3c01      	subs	r4, #1
 8005170:	e7eb      	b.n	800514a <quorem+0xea>
 8005172:	2000      	movs	r0, #0
 8005174:	e7ee      	b.n	8005154 <quorem+0xf4>
	...

08005178 <_dtoa_r>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	ed2d 8b04 	vpush	{d8-d9}
 8005180:	ec57 6b10 	vmov	r6, r7, d0
 8005184:	b093      	sub	sp, #76	; 0x4c
 8005186:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005188:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800518c:	9106      	str	r1, [sp, #24]
 800518e:	ee10 aa10 	vmov	sl, s0
 8005192:	4604      	mov	r4, r0
 8005194:	9209      	str	r2, [sp, #36]	; 0x24
 8005196:	930c      	str	r3, [sp, #48]	; 0x30
 8005198:	46bb      	mov	fp, r7
 800519a:	b975      	cbnz	r5, 80051ba <_dtoa_r+0x42>
 800519c:	2010      	movs	r0, #16
 800519e:	f001 fb6b 	bl	8006878 <malloc>
 80051a2:	4602      	mov	r2, r0
 80051a4:	6260      	str	r0, [r4, #36]	; 0x24
 80051a6:	b920      	cbnz	r0, 80051b2 <_dtoa_r+0x3a>
 80051a8:	4ba7      	ldr	r3, [pc, #668]	; (8005448 <_dtoa_r+0x2d0>)
 80051aa:	21ea      	movs	r1, #234	; 0xea
 80051ac:	48a7      	ldr	r0, [pc, #668]	; (800544c <_dtoa_r+0x2d4>)
 80051ae:	f002 fc89 	bl	8007ac4 <__assert_func>
 80051b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051b6:	6005      	str	r5, [r0, #0]
 80051b8:	60c5      	str	r5, [r0, #12]
 80051ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051bc:	6819      	ldr	r1, [r3, #0]
 80051be:	b151      	cbz	r1, 80051d6 <_dtoa_r+0x5e>
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	604a      	str	r2, [r1, #4]
 80051c4:	2301      	movs	r3, #1
 80051c6:	4093      	lsls	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
 80051ca:	4620      	mov	r0, r4
 80051cc:	f001 fbbc 	bl	8006948 <_Bfree>
 80051d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	1e3b      	subs	r3, r7, #0
 80051d8:	bfaa      	itet	ge
 80051da:	2300      	movge	r3, #0
 80051dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80051e0:	f8c8 3000 	strge.w	r3, [r8]
 80051e4:	4b9a      	ldr	r3, [pc, #616]	; (8005450 <_dtoa_r+0x2d8>)
 80051e6:	bfbc      	itt	lt
 80051e8:	2201      	movlt	r2, #1
 80051ea:	f8c8 2000 	strlt.w	r2, [r8]
 80051ee:	ea33 030b 	bics.w	r3, r3, fp
 80051f2:	d11b      	bne.n	800522c <_dtoa_r+0xb4>
 80051f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005200:	4333      	orrs	r3, r6
 8005202:	f000 8592 	beq.w	8005d2a <_dtoa_r+0xbb2>
 8005206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005208:	b963      	cbnz	r3, 8005224 <_dtoa_r+0xac>
 800520a:	4b92      	ldr	r3, [pc, #584]	; (8005454 <_dtoa_r+0x2dc>)
 800520c:	e022      	b.n	8005254 <_dtoa_r+0xdc>
 800520e:	4b92      	ldr	r3, [pc, #584]	; (8005458 <_dtoa_r+0x2e0>)
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	3308      	adds	r3, #8
 8005214:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	9801      	ldr	r0, [sp, #4]
 800521a:	b013      	add	sp, #76	; 0x4c
 800521c:	ecbd 8b04 	vpop	{d8-d9}
 8005220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005224:	4b8b      	ldr	r3, [pc, #556]	; (8005454 <_dtoa_r+0x2dc>)
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	3303      	adds	r3, #3
 800522a:	e7f3      	b.n	8005214 <_dtoa_r+0x9c>
 800522c:	2200      	movs	r2, #0
 800522e:	2300      	movs	r3, #0
 8005230:	4650      	mov	r0, sl
 8005232:	4659      	mov	r1, fp
 8005234:	f7fb fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 8005238:	ec4b ab19 	vmov	d9, sl, fp
 800523c:	4680      	mov	r8, r0
 800523e:	b158      	cbz	r0, 8005258 <_dtoa_r+0xe0>
 8005240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005242:	2301      	movs	r3, #1
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 856b 	beq.w	8005d24 <_dtoa_r+0xbac>
 800524e:	4883      	ldr	r0, [pc, #524]	; (800545c <_dtoa_r+0x2e4>)
 8005250:	6018      	str	r0, [r3, #0]
 8005252:	1e43      	subs	r3, r0, #1
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	e7df      	b.n	8005218 <_dtoa_r+0xa0>
 8005258:	ec4b ab10 	vmov	d0, sl, fp
 800525c:	aa10      	add	r2, sp, #64	; 0x40
 800525e:	a911      	add	r1, sp, #68	; 0x44
 8005260:	4620      	mov	r0, r4
 8005262:	f001 ff1f 	bl	80070a4 <__d2b>
 8005266:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800526a:	ee08 0a10 	vmov	s16, r0
 800526e:	2d00      	cmp	r5, #0
 8005270:	f000 8084 	beq.w	800537c <_dtoa_r+0x204>
 8005274:	ee19 3a90 	vmov	r3, s19
 8005278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800527c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005280:	4656      	mov	r6, sl
 8005282:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800528a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800528e:	4b74      	ldr	r3, [pc, #464]	; (8005460 <_dtoa_r+0x2e8>)
 8005290:	2200      	movs	r2, #0
 8005292:	4630      	mov	r0, r6
 8005294:	4639      	mov	r1, r7
 8005296:	f7fa fff7 	bl	8000288 <__aeabi_dsub>
 800529a:	a365      	add	r3, pc, #404	; (adr r3, 8005430 <_dtoa_r+0x2b8>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f7fb f9aa 	bl	80005f8 <__aeabi_dmul>
 80052a4:	a364      	add	r3, pc, #400	; (adr r3, 8005438 <_dtoa_r+0x2c0>)
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	f7fa ffef 	bl	800028c <__adddf3>
 80052ae:	4606      	mov	r6, r0
 80052b0:	4628      	mov	r0, r5
 80052b2:	460f      	mov	r7, r1
 80052b4:	f7fb f936 	bl	8000524 <__aeabi_i2d>
 80052b8:	a361      	add	r3, pc, #388	; (adr r3, 8005440 <_dtoa_r+0x2c8>)
 80052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052be:	f7fb f99b 	bl	80005f8 <__aeabi_dmul>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4630      	mov	r0, r6
 80052c8:	4639      	mov	r1, r7
 80052ca:	f7fa ffdf 	bl	800028c <__adddf3>
 80052ce:	4606      	mov	r6, r0
 80052d0:	460f      	mov	r7, r1
 80052d2:	f7fb fc41 	bl	8000b58 <__aeabi_d2iz>
 80052d6:	2200      	movs	r2, #0
 80052d8:	9000      	str	r0, [sp, #0]
 80052da:	2300      	movs	r3, #0
 80052dc:	4630      	mov	r0, r6
 80052de:	4639      	mov	r1, r7
 80052e0:	f7fb fbfc 	bl	8000adc <__aeabi_dcmplt>
 80052e4:	b150      	cbz	r0, 80052fc <_dtoa_r+0x184>
 80052e6:	9800      	ldr	r0, [sp, #0]
 80052e8:	f7fb f91c 	bl	8000524 <__aeabi_i2d>
 80052ec:	4632      	mov	r2, r6
 80052ee:	463b      	mov	r3, r7
 80052f0:	f7fb fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80052f4:	b910      	cbnz	r0, 80052fc <_dtoa_r+0x184>
 80052f6:	9b00      	ldr	r3, [sp, #0]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	9b00      	ldr	r3, [sp, #0]
 80052fe:	2b16      	cmp	r3, #22
 8005300:	d85a      	bhi.n	80053b8 <_dtoa_r+0x240>
 8005302:	9a00      	ldr	r2, [sp, #0]
 8005304:	4b57      	ldr	r3, [pc, #348]	; (8005464 <_dtoa_r+0x2ec>)
 8005306:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	ec51 0b19 	vmov	r0, r1, d9
 8005312:	f7fb fbe3 	bl	8000adc <__aeabi_dcmplt>
 8005316:	2800      	cmp	r0, #0
 8005318:	d050      	beq.n	80053bc <_dtoa_r+0x244>
 800531a:	9b00      	ldr	r3, [sp, #0]
 800531c:	3b01      	subs	r3, #1
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	2300      	movs	r3, #0
 8005322:	930b      	str	r3, [sp, #44]	; 0x2c
 8005324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005326:	1b5d      	subs	r5, r3, r5
 8005328:	1e6b      	subs	r3, r5, #1
 800532a:	9305      	str	r3, [sp, #20]
 800532c:	bf45      	ittet	mi
 800532e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005332:	9304      	strmi	r3, [sp, #16]
 8005334:	2300      	movpl	r3, #0
 8005336:	2300      	movmi	r3, #0
 8005338:	bf4c      	ite	mi
 800533a:	9305      	strmi	r3, [sp, #20]
 800533c:	9304      	strpl	r3, [sp, #16]
 800533e:	9b00      	ldr	r3, [sp, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	db3d      	blt.n	80053c0 <_dtoa_r+0x248>
 8005344:	9b05      	ldr	r3, [sp, #20]
 8005346:	9a00      	ldr	r2, [sp, #0]
 8005348:	920a      	str	r2, [sp, #40]	; 0x28
 800534a:	4413      	add	r3, r2
 800534c:	9305      	str	r3, [sp, #20]
 800534e:	2300      	movs	r3, #0
 8005350:	9307      	str	r3, [sp, #28]
 8005352:	9b06      	ldr	r3, [sp, #24]
 8005354:	2b09      	cmp	r3, #9
 8005356:	f200 8089 	bhi.w	800546c <_dtoa_r+0x2f4>
 800535a:	2b05      	cmp	r3, #5
 800535c:	bfc4      	itt	gt
 800535e:	3b04      	subgt	r3, #4
 8005360:	9306      	strgt	r3, [sp, #24]
 8005362:	9b06      	ldr	r3, [sp, #24]
 8005364:	f1a3 0302 	sub.w	r3, r3, #2
 8005368:	bfcc      	ite	gt
 800536a:	2500      	movgt	r5, #0
 800536c:	2501      	movle	r5, #1
 800536e:	2b03      	cmp	r3, #3
 8005370:	f200 8087 	bhi.w	8005482 <_dtoa_r+0x30a>
 8005374:	e8df f003 	tbb	[pc, r3]
 8005378:	59383a2d 	.word	0x59383a2d
 800537c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005380:	441d      	add	r5, r3
 8005382:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005386:	2b20      	cmp	r3, #32
 8005388:	bfc1      	itttt	gt
 800538a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800538e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005392:	fa0b f303 	lslgt.w	r3, fp, r3
 8005396:	fa26 f000 	lsrgt.w	r0, r6, r0
 800539a:	bfda      	itte	le
 800539c:	f1c3 0320 	rsble	r3, r3, #32
 80053a0:	fa06 f003 	lslle.w	r0, r6, r3
 80053a4:	4318      	orrgt	r0, r3
 80053a6:	f7fb f8ad 	bl	8000504 <__aeabi_ui2d>
 80053aa:	2301      	movs	r3, #1
 80053ac:	4606      	mov	r6, r0
 80053ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80053b2:	3d01      	subs	r5, #1
 80053b4:	930e      	str	r3, [sp, #56]	; 0x38
 80053b6:	e76a      	b.n	800528e <_dtoa_r+0x116>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e7b2      	b.n	8005322 <_dtoa_r+0x1aa>
 80053bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80053be:	e7b1      	b.n	8005324 <_dtoa_r+0x1ac>
 80053c0:	9b04      	ldr	r3, [sp, #16]
 80053c2:	9a00      	ldr	r2, [sp, #0]
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	9304      	str	r3, [sp, #16]
 80053c8:	4253      	negs	r3, r2
 80053ca:	9307      	str	r3, [sp, #28]
 80053cc:	2300      	movs	r3, #0
 80053ce:	930a      	str	r3, [sp, #40]	; 0x28
 80053d0:	e7bf      	b.n	8005352 <_dtoa_r+0x1da>
 80053d2:	2300      	movs	r3, #0
 80053d4:	9308      	str	r3, [sp, #32]
 80053d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d8:	2b00      	cmp	r3, #0
 80053da:	dc55      	bgt.n	8005488 <_dtoa_r+0x310>
 80053dc:	2301      	movs	r3, #1
 80053de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80053e2:	461a      	mov	r2, r3
 80053e4:	9209      	str	r2, [sp, #36]	; 0x24
 80053e6:	e00c      	b.n	8005402 <_dtoa_r+0x28a>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e7f3      	b.n	80053d4 <_dtoa_r+0x25c>
 80053ec:	2300      	movs	r3, #0
 80053ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053f0:	9308      	str	r3, [sp, #32]
 80053f2:	9b00      	ldr	r3, [sp, #0]
 80053f4:	4413      	add	r3, r2
 80053f6:	9302      	str	r3, [sp, #8]
 80053f8:	3301      	adds	r3, #1
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	9303      	str	r3, [sp, #12]
 80053fe:	bfb8      	it	lt
 8005400:	2301      	movlt	r3, #1
 8005402:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005404:	2200      	movs	r2, #0
 8005406:	6042      	str	r2, [r0, #4]
 8005408:	2204      	movs	r2, #4
 800540a:	f102 0614 	add.w	r6, r2, #20
 800540e:	429e      	cmp	r6, r3
 8005410:	6841      	ldr	r1, [r0, #4]
 8005412:	d93d      	bls.n	8005490 <_dtoa_r+0x318>
 8005414:	4620      	mov	r0, r4
 8005416:	f001 fa57 	bl	80068c8 <_Balloc>
 800541a:	9001      	str	r0, [sp, #4]
 800541c:	2800      	cmp	r0, #0
 800541e:	d13b      	bne.n	8005498 <_dtoa_r+0x320>
 8005420:	4b11      	ldr	r3, [pc, #68]	; (8005468 <_dtoa_r+0x2f0>)
 8005422:	4602      	mov	r2, r0
 8005424:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005428:	e6c0      	b.n	80051ac <_dtoa_r+0x34>
 800542a:	2301      	movs	r3, #1
 800542c:	e7df      	b.n	80053ee <_dtoa_r+0x276>
 800542e:	bf00      	nop
 8005430:	636f4361 	.word	0x636f4361
 8005434:	3fd287a7 	.word	0x3fd287a7
 8005438:	8b60c8b3 	.word	0x8b60c8b3
 800543c:	3fc68a28 	.word	0x3fc68a28
 8005440:	509f79fb 	.word	0x509f79fb
 8005444:	3fd34413 	.word	0x3fd34413
 8005448:	08007f46 	.word	0x08007f46
 800544c:	08007f5d 	.word	0x08007f5d
 8005450:	7ff00000 	.word	0x7ff00000
 8005454:	08007f42 	.word	0x08007f42
 8005458:	08007f39 	.word	0x08007f39
 800545c:	08007db9 	.word	0x08007db9
 8005460:	3ff80000 	.word	0x3ff80000
 8005464:	08008130 	.word	0x08008130
 8005468:	08007fb8 	.word	0x08007fb8
 800546c:	2501      	movs	r5, #1
 800546e:	2300      	movs	r3, #0
 8005470:	9306      	str	r3, [sp, #24]
 8005472:	9508      	str	r5, [sp, #32]
 8005474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005478:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	2312      	movs	r3, #18
 8005480:	e7b0      	b.n	80053e4 <_dtoa_r+0x26c>
 8005482:	2301      	movs	r3, #1
 8005484:	9308      	str	r3, [sp, #32]
 8005486:	e7f5      	b.n	8005474 <_dtoa_r+0x2fc>
 8005488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800548e:	e7b8      	b.n	8005402 <_dtoa_r+0x28a>
 8005490:	3101      	adds	r1, #1
 8005492:	6041      	str	r1, [r0, #4]
 8005494:	0052      	lsls	r2, r2, #1
 8005496:	e7b8      	b.n	800540a <_dtoa_r+0x292>
 8005498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800549a:	9a01      	ldr	r2, [sp, #4]
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	2b0e      	cmp	r3, #14
 80054a2:	f200 809d 	bhi.w	80055e0 <_dtoa_r+0x468>
 80054a6:	2d00      	cmp	r5, #0
 80054a8:	f000 809a 	beq.w	80055e0 <_dtoa_r+0x468>
 80054ac:	9b00      	ldr	r3, [sp, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	dd32      	ble.n	8005518 <_dtoa_r+0x3a0>
 80054b2:	4ab7      	ldr	r2, [pc, #732]	; (8005790 <_dtoa_r+0x618>)
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054c0:	9b00      	ldr	r3, [sp, #0]
 80054c2:	05d8      	lsls	r0, r3, #23
 80054c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80054c8:	d516      	bpl.n	80054f8 <_dtoa_r+0x380>
 80054ca:	4bb2      	ldr	r3, [pc, #712]	; (8005794 <_dtoa_r+0x61c>)
 80054cc:	ec51 0b19 	vmov	r0, r1, d9
 80054d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054d4:	f7fb f9ba 	bl	800084c <__aeabi_ddiv>
 80054d8:	f007 070f 	and.w	r7, r7, #15
 80054dc:	4682      	mov	sl, r0
 80054de:	468b      	mov	fp, r1
 80054e0:	2503      	movs	r5, #3
 80054e2:	4eac      	ldr	r6, [pc, #688]	; (8005794 <_dtoa_r+0x61c>)
 80054e4:	b957      	cbnz	r7, 80054fc <_dtoa_r+0x384>
 80054e6:	4642      	mov	r2, r8
 80054e8:	464b      	mov	r3, r9
 80054ea:	4650      	mov	r0, sl
 80054ec:	4659      	mov	r1, fp
 80054ee:	f7fb f9ad 	bl	800084c <__aeabi_ddiv>
 80054f2:	4682      	mov	sl, r0
 80054f4:	468b      	mov	fp, r1
 80054f6:	e028      	b.n	800554a <_dtoa_r+0x3d2>
 80054f8:	2502      	movs	r5, #2
 80054fa:	e7f2      	b.n	80054e2 <_dtoa_r+0x36a>
 80054fc:	07f9      	lsls	r1, r7, #31
 80054fe:	d508      	bpl.n	8005512 <_dtoa_r+0x39a>
 8005500:	4640      	mov	r0, r8
 8005502:	4649      	mov	r1, r9
 8005504:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005508:	f7fb f876 	bl	80005f8 <__aeabi_dmul>
 800550c:	3501      	adds	r5, #1
 800550e:	4680      	mov	r8, r0
 8005510:	4689      	mov	r9, r1
 8005512:	107f      	asrs	r7, r7, #1
 8005514:	3608      	adds	r6, #8
 8005516:	e7e5      	b.n	80054e4 <_dtoa_r+0x36c>
 8005518:	f000 809b 	beq.w	8005652 <_dtoa_r+0x4da>
 800551c:	9b00      	ldr	r3, [sp, #0]
 800551e:	4f9d      	ldr	r7, [pc, #628]	; (8005794 <_dtoa_r+0x61c>)
 8005520:	425e      	negs	r6, r3
 8005522:	4b9b      	ldr	r3, [pc, #620]	; (8005790 <_dtoa_r+0x618>)
 8005524:	f006 020f 	and.w	r2, r6, #15
 8005528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	ec51 0b19 	vmov	r0, r1, d9
 8005534:	f7fb f860 	bl	80005f8 <__aeabi_dmul>
 8005538:	1136      	asrs	r6, r6, #4
 800553a:	4682      	mov	sl, r0
 800553c:	468b      	mov	fp, r1
 800553e:	2300      	movs	r3, #0
 8005540:	2502      	movs	r5, #2
 8005542:	2e00      	cmp	r6, #0
 8005544:	d17a      	bne.n	800563c <_dtoa_r+0x4c4>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1d3      	bne.n	80054f2 <_dtoa_r+0x37a>
 800554a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8082 	beq.w	8005656 <_dtoa_r+0x4de>
 8005552:	4b91      	ldr	r3, [pc, #580]	; (8005798 <_dtoa_r+0x620>)
 8005554:	2200      	movs	r2, #0
 8005556:	4650      	mov	r0, sl
 8005558:	4659      	mov	r1, fp
 800555a:	f7fb fabf 	bl	8000adc <__aeabi_dcmplt>
 800555e:	2800      	cmp	r0, #0
 8005560:	d079      	beq.n	8005656 <_dtoa_r+0x4de>
 8005562:	9b03      	ldr	r3, [sp, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d076      	beq.n	8005656 <_dtoa_r+0x4de>
 8005568:	9b02      	ldr	r3, [sp, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	dd36      	ble.n	80055dc <_dtoa_r+0x464>
 800556e:	9b00      	ldr	r3, [sp, #0]
 8005570:	4650      	mov	r0, sl
 8005572:	4659      	mov	r1, fp
 8005574:	1e5f      	subs	r7, r3, #1
 8005576:	2200      	movs	r2, #0
 8005578:	4b88      	ldr	r3, [pc, #544]	; (800579c <_dtoa_r+0x624>)
 800557a:	f7fb f83d 	bl	80005f8 <__aeabi_dmul>
 800557e:	9e02      	ldr	r6, [sp, #8]
 8005580:	4682      	mov	sl, r0
 8005582:	468b      	mov	fp, r1
 8005584:	3501      	adds	r5, #1
 8005586:	4628      	mov	r0, r5
 8005588:	f7fa ffcc 	bl	8000524 <__aeabi_i2d>
 800558c:	4652      	mov	r2, sl
 800558e:	465b      	mov	r3, fp
 8005590:	f7fb f832 	bl	80005f8 <__aeabi_dmul>
 8005594:	4b82      	ldr	r3, [pc, #520]	; (80057a0 <_dtoa_r+0x628>)
 8005596:	2200      	movs	r2, #0
 8005598:	f7fa fe78 	bl	800028c <__adddf3>
 800559c:	46d0      	mov	r8, sl
 800559e:	46d9      	mov	r9, fp
 80055a0:	4682      	mov	sl, r0
 80055a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80055a6:	2e00      	cmp	r6, #0
 80055a8:	d158      	bne.n	800565c <_dtoa_r+0x4e4>
 80055aa:	4b7e      	ldr	r3, [pc, #504]	; (80057a4 <_dtoa_r+0x62c>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	4640      	mov	r0, r8
 80055b0:	4649      	mov	r1, r9
 80055b2:	f7fa fe69 	bl	8000288 <__aeabi_dsub>
 80055b6:	4652      	mov	r2, sl
 80055b8:	465b      	mov	r3, fp
 80055ba:	4680      	mov	r8, r0
 80055bc:	4689      	mov	r9, r1
 80055be:	f7fb faab 	bl	8000b18 <__aeabi_dcmpgt>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	f040 8295 	bne.w	8005af2 <_dtoa_r+0x97a>
 80055c8:	4652      	mov	r2, sl
 80055ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80055ce:	4640      	mov	r0, r8
 80055d0:	4649      	mov	r1, r9
 80055d2:	f7fb fa83 	bl	8000adc <__aeabi_dcmplt>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	f040 8289 	bne.w	8005aee <_dtoa_r+0x976>
 80055dc:	ec5b ab19 	vmov	sl, fp, d9
 80055e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f2c0 8148 	blt.w	8005878 <_dtoa_r+0x700>
 80055e8:	9a00      	ldr	r2, [sp, #0]
 80055ea:	2a0e      	cmp	r2, #14
 80055ec:	f300 8144 	bgt.w	8005878 <_dtoa_r+0x700>
 80055f0:	4b67      	ldr	r3, [pc, #412]	; (8005790 <_dtoa_r+0x618>)
 80055f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f280 80d5 	bge.w	80057ac <_dtoa_r+0x634>
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f300 80d1 	bgt.w	80057ac <_dtoa_r+0x634>
 800560a:	f040 826f 	bne.w	8005aec <_dtoa_r+0x974>
 800560e:	4b65      	ldr	r3, [pc, #404]	; (80057a4 <_dtoa_r+0x62c>)
 8005610:	2200      	movs	r2, #0
 8005612:	4640      	mov	r0, r8
 8005614:	4649      	mov	r1, r9
 8005616:	f7fa ffef 	bl	80005f8 <__aeabi_dmul>
 800561a:	4652      	mov	r2, sl
 800561c:	465b      	mov	r3, fp
 800561e:	f7fb fa71 	bl	8000b04 <__aeabi_dcmpge>
 8005622:	9e03      	ldr	r6, [sp, #12]
 8005624:	4637      	mov	r7, r6
 8005626:	2800      	cmp	r0, #0
 8005628:	f040 8245 	bne.w	8005ab6 <_dtoa_r+0x93e>
 800562c:	9d01      	ldr	r5, [sp, #4]
 800562e:	2331      	movs	r3, #49	; 0x31
 8005630:	f805 3b01 	strb.w	r3, [r5], #1
 8005634:	9b00      	ldr	r3, [sp, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	e240      	b.n	8005abe <_dtoa_r+0x946>
 800563c:	07f2      	lsls	r2, r6, #31
 800563e:	d505      	bpl.n	800564c <_dtoa_r+0x4d4>
 8005640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005644:	f7fa ffd8 	bl	80005f8 <__aeabi_dmul>
 8005648:	3501      	adds	r5, #1
 800564a:	2301      	movs	r3, #1
 800564c:	1076      	asrs	r6, r6, #1
 800564e:	3708      	adds	r7, #8
 8005650:	e777      	b.n	8005542 <_dtoa_r+0x3ca>
 8005652:	2502      	movs	r5, #2
 8005654:	e779      	b.n	800554a <_dtoa_r+0x3d2>
 8005656:	9f00      	ldr	r7, [sp, #0]
 8005658:	9e03      	ldr	r6, [sp, #12]
 800565a:	e794      	b.n	8005586 <_dtoa_r+0x40e>
 800565c:	9901      	ldr	r1, [sp, #4]
 800565e:	4b4c      	ldr	r3, [pc, #304]	; (8005790 <_dtoa_r+0x618>)
 8005660:	4431      	add	r1, r6
 8005662:	910d      	str	r1, [sp, #52]	; 0x34
 8005664:	9908      	ldr	r1, [sp, #32]
 8005666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800566a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800566e:	2900      	cmp	r1, #0
 8005670:	d043      	beq.n	80056fa <_dtoa_r+0x582>
 8005672:	494d      	ldr	r1, [pc, #308]	; (80057a8 <_dtoa_r+0x630>)
 8005674:	2000      	movs	r0, #0
 8005676:	f7fb f8e9 	bl	800084c <__aeabi_ddiv>
 800567a:	4652      	mov	r2, sl
 800567c:	465b      	mov	r3, fp
 800567e:	f7fa fe03 	bl	8000288 <__aeabi_dsub>
 8005682:	9d01      	ldr	r5, [sp, #4]
 8005684:	4682      	mov	sl, r0
 8005686:	468b      	mov	fp, r1
 8005688:	4649      	mov	r1, r9
 800568a:	4640      	mov	r0, r8
 800568c:	f7fb fa64 	bl	8000b58 <__aeabi_d2iz>
 8005690:	4606      	mov	r6, r0
 8005692:	f7fa ff47 	bl	8000524 <__aeabi_i2d>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4640      	mov	r0, r8
 800569c:	4649      	mov	r1, r9
 800569e:	f7fa fdf3 	bl	8000288 <__aeabi_dsub>
 80056a2:	3630      	adds	r6, #48	; 0x30
 80056a4:	f805 6b01 	strb.w	r6, [r5], #1
 80056a8:	4652      	mov	r2, sl
 80056aa:	465b      	mov	r3, fp
 80056ac:	4680      	mov	r8, r0
 80056ae:	4689      	mov	r9, r1
 80056b0:	f7fb fa14 	bl	8000adc <__aeabi_dcmplt>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d163      	bne.n	8005780 <_dtoa_r+0x608>
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	4936      	ldr	r1, [pc, #216]	; (8005798 <_dtoa_r+0x620>)
 80056be:	2000      	movs	r0, #0
 80056c0:	f7fa fde2 	bl	8000288 <__aeabi_dsub>
 80056c4:	4652      	mov	r2, sl
 80056c6:	465b      	mov	r3, fp
 80056c8:	f7fb fa08 	bl	8000adc <__aeabi_dcmplt>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	f040 80b5 	bne.w	800583c <_dtoa_r+0x6c4>
 80056d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056d4:	429d      	cmp	r5, r3
 80056d6:	d081      	beq.n	80055dc <_dtoa_r+0x464>
 80056d8:	4b30      	ldr	r3, [pc, #192]	; (800579c <_dtoa_r+0x624>)
 80056da:	2200      	movs	r2, #0
 80056dc:	4650      	mov	r0, sl
 80056de:	4659      	mov	r1, fp
 80056e0:	f7fa ff8a 	bl	80005f8 <__aeabi_dmul>
 80056e4:	4b2d      	ldr	r3, [pc, #180]	; (800579c <_dtoa_r+0x624>)
 80056e6:	4682      	mov	sl, r0
 80056e8:	468b      	mov	fp, r1
 80056ea:	4640      	mov	r0, r8
 80056ec:	4649      	mov	r1, r9
 80056ee:	2200      	movs	r2, #0
 80056f0:	f7fa ff82 	bl	80005f8 <__aeabi_dmul>
 80056f4:	4680      	mov	r8, r0
 80056f6:	4689      	mov	r9, r1
 80056f8:	e7c6      	b.n	8005688 <_dtoa_r+0x510>
 80056fa:	4650      	mov	r0, sl
 80056fc:	4659      	mov	r1, fp
 80056fe:	f7fa ff7b 	bl	80005f8 <__aeabi_dmul>
 8005702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005704:	9d01      	ldr	r5, [sp, #4]
 8005706:	930f      	str	r3, [sp, #60]	; 0x3c
 8005708:	4682      	mov	sl, r0
 800570a:	468b      	mov	fp, r1
 800570c:	4649      	mov	r1, r9
 800570e:	4640      	mov	r0, r8
 8005710:	f7fb fa22 	bl	8000b58 <__aeabi_d2iz>
 8005714:	4606      	mov	r6, r0
 8005716:	f7fa ff05 	bl	8000524 <__aeabi_i2d>
 800571a:	3630      	adds	r6, #48	; 0x30
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4640      	mov	r0, r8
 8005722:	4649      	mov	r1, r9
 8005724:	f7fa fdb0 	bl	8000288 <__aeabi_dsub>
 8005728:	f805 6b01 	strb.w	r6, [r5], #1
 800572c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800572e:	429d      	cmp	r5, r3
 8005730:	4680      	mov	r8, r0
 8005732:	4689      	mov	r9, r1
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	d124      	bne.n	8005784 <_dtoa_r+0x60c>
 800573a:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <_dtoa_r+0x630>)
 800573c:	4650      	mov	r0, sl
 800573e:	4659      	mov	r1, fp
 8005740:	f7fa fda4 	bl	800028c <__adddf3>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4640      	mov	r0, r8
 800574a:	4649      	mov	r1, r9
 800574c:	f7fb f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 8005750:	2800      	cmp	r0, #0
 8005752:	d173      	bne.n	800583c <_dtoa_r+0x6c4>
 8005754:	4652      	mov	r2, sl
 8005756:	465b      	mov	r3, fp
 8005758:	4913      	ldr	r1, [pc, #76]	; (80057a8 <_dtoa_r+0x630>)
 800575a:	2000      	movs	r0, #0
 800575c:	f7fa fd94 	bl	8000288 <__aeabi_dsub>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4640      	mov	r0, r8
 8005766:	4649      	mov	r1, r9
 8005768:	f7fb f9b8 	bl	8000adc <__aeabi_dcmplt>
 800576c:	2800      	cmp	r0, #0
 800576e:	f43f af35 	beq.w	80055dc <_dtoa_r+0x464>
 8005772:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005774:	1e6b      	subs	r3, r5, #1
 8005776:	930f      	str	r3, [sp, #60]	; 0x3c
 8005778:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800577c:	2b30      	cmp	r3, #48	; 0x30
 800577e:	d0f8      	beq.n	8005772 <_dtoa_r+0x5fa>
 8005780:	9700      	str	r7, [sp, #0]
 8005782:	e049      	b.n	8005818 <_dtoa_r+0x6a0>
 8005784:	4b05      	ldr	r3, [pc, #20]	; (800579c <_dtoa_r+0x624>)
 8005786:	f7fa ff37 	bl	80005f8 <__aeabi_dmul>
 800578a:	4680      	mov	r8, r0
 800578c:	4689      	mov	r9, r1
 800578e:	e7bd      	b.n	800570c <_dtoa_r+0x594>
 8005790:	08008130 	.word	0x08008130
 8005794:	08008108 	.word	0x08008108
 8005798:	3ff00000 	.word	0x3ff00000
 800579c:	40240000 	.word	0x40240000
 80057a0:	401c0000 	.word	0x401c0000
 80057a4:	40140000 	.word	0x40140000
 80057a8:	3fe00000 	.word	0x3fe00000
 80057ac:	9d01      	ldr	r5, [sp, #4]
 80057ae:	4656      	mov	r6, sl
 80057b0:	465f      	mov	r7, fp
 80057b2:	4642      	mov	r2, r8
 80057b4:	464b      	mov	r3, r9
 80057b6:	4630      	mov	r0, r6
 80057b8:	4639      	mov	r1, r7
 80057ba:	f7fb f847 	bl	800084c <__aeabi_ddiv>
 80057be:	f7fb f9cb 	bl	8000b58 <__aeabi_d2iz>
 80057c2:	4682      	mov	sl, r0
 80057c4:	f7fa feae 	bl	8000524 <__aeabi_i2d>
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	f7fa ff14 	bl	80005f8 <__aeabi_dmul>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80057dc:	f7fa fd54 	bl	8000288 <__aeabi_dsub>
 80057e0:	f805 6b01 	strb.w	r6, [r5], #1
 80057e4:	9e01      	ldr	r6, [sp, #4]
 80057e6:	9f03      	ldr	r7, [sp, #12]
 80057e8:	1bae      	subs	r6, r5, r6
 80057ea:	42b7      	cmp	r7, r6
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	d135      	bne.n	800585e <_dtoa_r+0x6e6>
 80057f2:	f7fa fd4b 	bl	800028c <__adddf3>
 80057f6:	4642      	mov	r2, r8
 80057f8:	464b      	mov	r3, r9
 80057fa:	4606      	mov	r6, r0
 80057fc:	460f      	mov	r7, r1
 80057fe:	f7fb f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8005802:	b9d0      	cbnz	r0, 800583a <_dtoa_r+0x6c2>
 8005804:	4642      	mov	r2, r8
 8005806:	464b      	mov	r3, r9
 8005808:	4630      	mov	r0, r6
 800580a:	4639      	mov	r1, r7
 800580c:	f7fb f95c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005810:	b110      	cbz	r0, 8005818 <_dtoa_r+0x6a0>
 8005812:	f01a 0f01 	tst.w	sl, #1
 8005816:	d110      	bne.n	800583a <_dtoa_r+0x6c2>
 8005818:	4620      	mov	r0, r4
 800581a:	ee18 1a10 	vmov	r1, s16
 800581e:	f001 f893 	bl	8006948 <_Bfree>
 8005822:	2300      	movs	r3, #0
 8005824:	9800      	ldr	r0, [sp, #0]
 8005826:	702b      	strb	r3, [r5, #0]
 8005828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800582a:	3001      	adds	r0, #1
 800582c:	6018      	str	r0, [r3, #0]
 800582e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005830:	2b00      	cmp	r3, #0
 8005832:	f43f acf1 	beq.w	8005218 <_dtoa_r+0xa0>
 8005836:	601d      	str	r5, [r3, #0]
 8005838:	e4ee      	b.n	8005218 <_dtoa_r+0xa0>
 800583a:	9f00      	ldr	r7, [sp, #0]
 800583c:	462b      	mov	r3, r5
 800583e:	461d      	mov	r5, r3
 8005840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005844:	2a39      	cmp	r2, #57	; 0x39
 8005846:	d106      	bne.n	8005856 <_dtoa_r+0x6de>
 8005848:	9a01      	ldr	r2, [sp, #4]
 800584a:	429a      	cmp	r2, r3
 800584c:	d1f7      	bne.n	800583e <_dtoa_r+0x6c6>
 800584e:	9901      	ldr	r1, [sp, #4]
 8005850:	2230      	movs	r2, #48	; 0x30
 8005852:	3701      	adds	r7, #1
 8005854:	700a      	strb	r2, [r1, #0]
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	3201      	adds	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e790      	b.n	8005780 <_dtoa_r+0x608>
 800585e:	4ba6      	ldr	r3, [pc, #664]	; (8005af8 <_dtoa_r+0x980>)
 8005860:	2200      	movs	r2, #0
 8005862:	f7fa fec9 	bl	80005f8 <__aeabi_dmul>
 8005866:	2200      	movs	r2, #0
 8005868:	2300      	movs	r3, #0
 800586a:	4606      	mov	r6, r0
 800586c:	460f      	mov	r7, r1
 800586e:	f7fb f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005872:	2800      	cmp	r0, #0
 8005874:	d09d      	beq.n	80057b2 <_dtoa_r+0x63a>
 8005876:	e7cf      	b.n	8005818 <_dtoa_r+0x6a0>
 8005878:	9a08      	ldr	r2, [sp, #32]
 800587a:	2a00      	cmp	r2, #0
 800587c:	f000 80d7 	beq.w	8005a2e <_dtoa_r+0x8b6>
 8005880:	9a06      	ldr	r2, [sp, #24]
 8005882:	2a01      	cmp	r2, #1
 8005884:	f300 80ba 	bgt.w	80059fc <_dtoa_r+0x884>
 8005888:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800588a:	2a00      	cmp	r2, #0
 800588c:	f000 80b2 	beq.w	80059f4 <_dtoa_r+0x87c>
 8005890:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005894:	9e07      	ldr	r6, [sp, #28]
 8005896:	9d04      	ldr	r5, [sp, #16]
 8005898:	9a04      	ldr	r2, [sp, #16]
 800589a:	441a      	add	r2, r3
 800589c:	9204      	str	r2, [sp, #16]
 800589e:	9a05      	ldr	r2, [sp, #20]
 80058a0:	2101      	movs	r1, #1
 80058a2:	441a      	add	r2, r3
 80058a4:	4620      	mov	r0, r4
 80058a6:	9205      	str	r2, [sp, #20]
 80058a8:	f001 f950 	bl	8006b4c <__i2b>
 80058ac:	4607      	mov	r7, r0
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	dd0c      	ble.n	80058cc <_dtoa_r+0x754>
 80058b2:	9b05      	ldr	r3, [sp, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	dd09      	ble.n	80058cc <_dtoa_r+0x754>
 80058b8:	42ab      	cmp	r3, r5
 80058ba:	9a04      	ldr	r2, [sp, #16]
 80058bc:	bfa8      	it	ge
 80058be:	462b      	movge	r3, r5
 80058c0:	1ad2      	subs	r2, r2, r3
 80058c2:	9204      	str	r2, [sp, #16]
 80058c4:	9a05      	ldr	r2, [sp, #20]
 80058c6:	1aed      	subs	r5, r5, r3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	9305      	str	r3, [sp, #20]
 80058cc:	9b07      	ldr	r3, [sp, #28]
 80058ce:	b31b      	cbz	r3, 8005918 <_dtoa_r+0x7a0>
 80058d0:	9b08      	ldr	r3, [sp, #32]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80af 	beq.w	8005a36 <_dtoa_r+0x8be>
 80058d8:	2e00      	cmp	r6, #0
 80058da:	dd13      	ble.n	8005904 <_dtoa_r+0x78c>
 80058dc:	4639      	mov	r1, r7
 80058de:	4632      	mov	r2, r6
 80058e0:	4620      	mov	r0, r4
 80058e2:	f001 f9f3 	bl	8006ccc <__pow5mult>
 80058e6:	ee18 2a10 	vmov	r2, s16
 80058ea:	4601      	mov	r1, r0
 80058ec:	4607      	mov	r7, r0
 80058ee:	4620      	mov	r0, r4
 80058f0:	f001 f942 	bl	8006b78 <__multiply>
 80058f4:	ee18 1a10 	vmov	r1, s16
 80058f8:	4680      	mov	r8, r0
 80058fa:	4620      	mov	r0, r4
 80058fc:	f001 f824 	bl	8006948 <_Bfree>
 8005900:	ee08 8a10 	vmov	s16, r8
 8005904:	9b07      	ldr	r3, [sp, #28]
 8005906:	1b9a      	subs	r2, r3, r6
 8005908:	d006      	beq.n	8005918 <_dtoa_r+0x7a0>
 800590a:	ee18 1a10 	vmov	r1, s16
 800590e:	4620      	mov	r0, r4
 8005910:	f001 f9dc 	bl	8006ccc <__pow5mult>
 8005914:	ee08 0a10 	vmov	s16, r0
 8005918:	2101      	movs	r1, #1
 800591a:	4620      	mov	r0, r4
 800591c:	f001 f916 	bl	8006b4c <__i2b>
 8005920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	4606      	mov	r6, r0
 8005926:	f340 8088 	ble.w	8005a3a <_dtoa_r+0x8c2>
 800592a:	461a      	mov	r2, r3
 800592c:	4601      	mov	r1, r0
 800592e:	4620      	mov	r0, r4
 8005930:	f001 f9cc 	bl	8006ccc <__pow5mult>
 8005934:	9b06      	ldr	r3, [sp, #24]
 8005936:	2b01      	cmp	r3, #1
 8005938:	4606      	mov	r6, r0
 800593a:	f340 8081 	ble.w	8005a40 <_dtoa_r+0x8c8>
 800593e:	f04f 0800 	mov.w	r8, #0
 8005942:	6933      	ldr	r3, [r6, #16]
 8005944:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005948:	6918      	ldr	r0, [r3, #16]
 800594a:	f001 f8af 	bl	8006aac <__hi0bits>
 800594e:	f1c0 0020 	rsb	r0, r0, #32
 8005952:	9b05      	ldr	r3, [sp, #20]
 8005954:	4418      	add	r0, r3
 8005956:	f010 001f 	ands.w	r0, r0, #31
 800595a:	f000 8092 	beq.w	8005a82 <_dtoa_r+0x90a>
 800595e:	f1c0 0320 	rsb	r3, r0, #32
 8005962:	2b04      	cmp	r3, #4
 8005964:	f340 808a 	ble.w	8005a7c <_dtoa_r+0x904>
 8005968:	f1c0 001c 	rsb	r0, r0, #28
 800596c:	9b04      	ldr	r3, [sp, #16]
 800596e:	4403      	add	r3, r0
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	9b05      	ldr	r3, [sp, #20]
 8005974:	4403      	add	r3, r0
 8005976:	4405      	add	r5, r0
 8005978:	9305      	str	r3, [sp, #20]
 800597a:	9b04      	ldr	r3, [sp, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	dd07      	ble.n	8005990 <_dtoa_r+0x818>
 8005980:	ee18 1a10 	vmov	r1, s16
 8005984:	461a      	mov	r2, r3
 8005986:	4620      	mov	r0, r4
 8005988:	f001 f9fa 	bl	8006d80 <__lshift>
 800598c:	ee08 0a10 	vmov	s16, r0
 8005990:	9b05      	ldr	r3, [sp, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	dd05      	ble.n	80059a2 <_dtoa_r+0x82a>
 8005996:	4631      	mov	r1, r6
 8005998:	461a      	mov	r2, r3
 800599a:	4620      	mov	r0, r4
 800599c:	f001 f9f0 	bl	8006d80 <__lshift>
 80059a0:	4606      	mov	r6, r0
 80059a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d06e      	beq.n	8005a86 <_dtoa_r+0x90e>
 80059a8:	ee18 0a10 	vmov	r0, s16
 80059ac:	4631      	mov	r1, r6
 80059ae:	f001 fa57 	bl	8006e60 <__mcmp>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	da67      	bge.n	8005a86 <_dtoa_r+0x90e>
 80059b6:	9b00      	ldr	r3, [sp, #0]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	ee18 1a10 	vmov	r1, s16
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	220a      	movs	r2, #10
 80059c2:	2300      	movs	r3, #0
 80059c4:	4620      	mov	r0, r4
 80059c6:	f000 ffe1 	bl	800698c <__multadd>
 80059ca:	9b08      	ldr	r3, [sp, #32]
 80059cc:	ee08 0a10 	vmov	s16, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 81b1 	beq.w	8005d38 <_dtoa_r+0xbc0>
 80059d6:	2300      	movs	r3, #0
 80059d8:	4639      	mov	r1, r7
 80059da:	220a      	movs	r2, #10
 80059dc:	4620      	mov	r0, r4
 80059de:	f000 ffd5 	bl	800698c <__multadd>
 80059e2:	9b02      	ldr	r3, [sp, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	4607      	mov	r7, r0
 80059e8:	f300 808e 	bgt.w	8005b08 <_dtoa_r+0x990>
 80059ec:	9b06      	ldr	r3, [sp, #24]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	dc51      	bgt.n	8005a96 <_dtoa_r+0x91e>
 80059f2:	e089      	b.n	8005b08 <_dtoa_r+0x990>
 80059f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059fa:	e74b      	b.n	8005894 <_dtoa_r+0x71c>
 80059fc:	9b03      	ldr	r3, [sp, #12]
 80059fe:	1e5e      	subs	r6, r3, #1
 8005a00:	9b07      	ldr	r3, [sp, #28]
 8005a02:	42b3      	cmp	r3, r6
 8005a04:	bfbf      	itttt	lt
 8005a06:	9b07      	ldrlt	r3, [sp, #28]
 8005a08:	9607      	strlt	r6, [sp, #28]
 8005a0a:	1af2      	sublt	r2, r6, r3
 8005a0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a0e:	bfb6      	itet	lt
 8005a10:	189b      	addlt	r3, r3, r2
 8005a12:	1b9e      	subge	r6, r3, r6
 8005a14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005a16:	9b03      	ldr	r3, [sp, #12]
 8005a18:	bfb8      	it	lt
 8005a1a:	2600      	movlt	r6, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bfb7      	itett	lt
 8005a20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005a24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005a28:	1a9d      	sublt	r5, r3, r2
 8005a2a:	2300      	movlt	r3, #0
 8005a2c:	e734      	b.n	8005898 <_dtoa_r+0x720>
 8005a2e:	9e07      	ldr	r6, [sp, #28]
 8005a30:	9d04      	ldr	r5, [sp, #16]
 8005a32:	9f08      	ldr	r7, [sp, #32]
 8005a34:	e73b      	b.n	80058ae <_dtoa_r+0x736>
 8005a36:	9a07      	ldr	r2, [sp, #28]
 8005a38:	e767      	b.n	800590a <_dtoa_r+0x792>
 8005a3a:	9b06      	ldr	r3, [sp, #24]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	dc18      	bgt.n	8005a72 <_dtoa_r+0x8fa>
 8005a40:	f1ba 0f00 	cmp.w	sl, #0
 8005a44:	d115      	bne.n	8005a72 <_dtoa_r+0x8fa>
 8005a46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a4a:	b993      	cbnz	r3, 8005a72 <_dtoa_r+0x8fa>
 8005a4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a50:	0d1b      	lsrs	r3, r3, #20
 8005a52:	051b      	lsls	r3, r3, #20
 8005a54:	b183      	cbz	r3, 8005a78 <_dtoa_r+0x900>
 8005a56:	9b04      	ldr	r3, [sp, #16]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	9304      	str	r3, [sp, #16]
 8005a5c:	9b05      	ldr	r3, [sp, #20]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	9305      	str	r3, [sp, #20]
 8005a62:	f04f 0801 	mov.w	r8, #1
 8005a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f47f af6a 	bne.w	8005942 <_dtoa_r+0x7ca>
 8005a6e:	2001      	movs	r0, #1
 8005a70:	e76f      	b.n	8005952 <_dtoa_r+0x7da>
 8005a72:	f04f 0800 	mov.w	r8, #0
 8005a76:	e7f6      	b.n	8005a66 <_dtoa_r+0x8ee>
 8005a78:	4698      	mov	r8, r3
 8005a7a:	e7f4      	b.n	8005a66 <_dtoa_r+0x8ee>
 8005a7c:	f43f af7d 	beq.w	800597a <_dtoa_r+0x802>
 8005a80:	4618      	mov	r0, r3
 8005a82:	301c      	adds	r0, #28
 8005a84:	e772      	b.n	800596c <_dtoa_r+0x7f4>
 8005a86:	9b03      	ldr	r3, [sp, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dc37      	bgt.n	8005afc <_dtoa_r+0x984>
 8005a8c:	9b06      	ldr	r3, [sp, #24]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	dd34      	ble.n	8005afc <_dtoa_r+0x984>
 8005a92:	9b03      	ldr	r3, [sp, #12]
 8005a94:	9302      	str	r3, [sp, #8]
 8005a96:	9b02      	ldr	r3, [sp, #8]
 8005a98:	b96b      	cbnz	r3, 8005ab6 <_dtoa_r+0x93e>
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	2205      	movs	r2, #5
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 ff74 	bl	800698c <__multadd>
 8005aa4:	4601      	mov	r1, r0
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	ee18 0a10 	vmov	r0, s16
 8005aac:	f001 f9d8 	bl	8006e60 <__mcmp>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	f73f adbb 	bgt.w	800562c <_dtoa_r+0x4b4>
 8005ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab8:	9d01      	ldr	r5, [sp, #4]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	f04f 0800 	mov.w	r8, #0
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 ff3f 	bl	8006948 <_Bfree>
 8005aca:	2f00      	cmp	r7, #0
 8005acc:	f43f aea4 	beq.w	8005818 <_dtoa_r+0x6a0>
 8005ad0:	f1b8 0f00 	cmp.w	r8, #0
 8005ad4:	d005      	beq.n	8005ae2 <_dtoa_r+0x96a>
 8005ad6:	45b8      	cmp	r8, r7
 8005ad8:	d003      	beq.n	8005ae2 <_dtoa_r+0x96a>
 8005ada:	4641      	mov	r1, r8
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 ff33 	bl	8006948 <_Bfree>
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 ff2f 	bl	8006948 <_Bfree>
 8005aea:	e695      	b.n	8005818 <_dtoa_r+0x6a0>
 8005aec:	2600      	movs	r6, #0
 8005aee:	4637      	mov	r7, r6
 8005af0:	e7e1      	b.n	8005ab6 <_dtoa_r+0x93e>
 8005af2:	9700      	str	r7, [sp, #0]
 8005af4:	4637      	mov	r7, r6
 8005af6:	e599      	b.n	800562c <_dtoa_r+0x4b4>
 8005af8:	40240000 	.word	0x40240000
 8005afc:	9b08      	ldr	r3, [sp, #32]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80ca 	beq.w	8005c98 <_dtoa_r+0xb20>
 8005b04:	9b03      	ldr	r3, [sp, #12]
 8005b06:	9302      	str	r3, [sp, #8]
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	dd05      	ble.n	8005b18 <_dtoa_r+0x9a0>
 8005b0c:	4639      	mov	r1, r7
 8005b0e:	462a      	mov	r2, r5
 8005b10:	4620      	mov	r0, r4
 8005b12:	f001 f935 	bl	8006d80 <__lshift>
 8005b16:	4607      	mov	r7, r0
 8005b18:	f1b8 0f00 	cmp.w	r8, #0
 8005b1c:	d05b      	beq.n	8005bd6 <_dtoa_r+0xa5e>
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fed1 	bl	80068c8 <_Balloc>
 8005b26:	4605      	mov	r5, r0
 8005b28:	b928      	cbnz	r0, 8005b36 <_dtoa_r+0x9be>
 8005b2a:	4b87      	ldr	r3, [pc, #540]	; (8005d48 <_dtoa_r+0xbd0>)
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b32:	f7ff bb3b 	b.w	80051ac <_dtoa_r+0x34>
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	3202      	adds	r2, #2
 8005b3a:	0092      	lsls	r2, r2, #2
 8005b3c:	f107 010c 	add.w	r1, r7, #12
 8005b40:	300c      	adds	r0, #12
 8005b42:	f000 feb3 	bl	80068ac <memcpy>
 8005b46:	2201      	movs	r2, #1
 8005b48:	4629      	mov	r1, r5
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f001 f918 	bl	8006d80 <__lshift>
 8005b50:	9b01      	ldr	r3, [sp, #4]
 8005b52:	f103 0901 	add.w	r9, r3, #1
 8005b56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	9305      	str	r3, [sp, #20]
 8005b5e:	f00a 0301 	and.w	r3, sl, #1
 8005b62:	46b8      	mov	r8, r7
 8005b64:	9304      	str	r3, [sp, #16]
 8005b66:	4607      	mov	r7, r0
 8005b68:	4631      	mov	r1, r6
 8005b6a:	ee18 0a10 	vmov	r0, s16
 8005b6e:	f7ff fa77 	bl	8005060 <quorem>
 8005b72:	4641      	mov	r1, r8
 8005b74:	9002      	str	r0, [sp, #8]
 8005b76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005b7a:	ee18 0a10 	vmov	r0, s16
 8005b7e:	f001 f96f 	bl	8006e60 <__mcmp>
 8005b82:	463a      	mov	r2, r7
 8005b84:	9003      	str	r0, [sp, #12]
 8005b86:	4631      	mov	r1, r6
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f001 f985 	bl	8006e98 <__mdiff>
 8005b8e:	68c2      	ldr	r2, [r0, #12]
 8005b90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005b94:	4605      	mov	r5, r0
 8005b96:	bb02      	cbnz	r2, 8005bda <_dtoa_r+0xa62>
 8005b98:	4601      	mov	r1, r0
 8005b9a:	ee18 0a10 	vmov	r0, s16
 8005b9e:	f001 f95f 	bl	8006e60 <__mcmp>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	9207      	str	r2, [sp, #28]
 8005baa:	f000 fecd 	bl	8006948 <_Bfree>
 8005bae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005bb2:	ea43 0102 	orr.w	r1, r3, r2
 8005bb6:	9b04      	ldr	r3, [sp, #16]
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	464d      	mov	r5, r9
 8005bbc:	d10f      	bne.n	8005bde <_dtoa_r+0xa66>
 8005bbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005bc2:	d02a      	beq.n	8005c1a <_dtoa_r+0xaa2>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	dd02      	ble.n	8005bd0 <_dtoa_r+0xa58>
 8005bca:	9b02      	ldr	r3, [sp, #8]
 8005bcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005bd0:	f88b a000 	strb.w	sl, [fp]
 8005bd4:	e775      	b.n	8005ac2 <_dtoa_r+0x94a>
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	e7ba      	b.n	8005b50 <_dtoa_r+0x9d8>
 8005bda:	2201      	movs	r2, #1
 8005bdc:	e7e2      	b.n	8005ba4 <_dtoa_r+0xa2c>
 8005bde:	9b03      	ldr	r3, [sp, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	db04      	blt.n	8005bee <_dtoa_r+0xa76>
 8005be4:	9906      	ldr	r1, [sp, #24]
 8005be6:	430b      	orrs	r3, r1
 8005be8:	9904      	ldr	r1, [sp, #16]
 8005bea:	430b      	orrs	r3, r1
 8005bec:	d122      	bne.n	8005c34 <_dtoa_r+0xabc>
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	ddee      	ble.n	8005bd0 <_dtoa_r+0xa58>
 8005bf2:	ee18 1a10 	vmov	r1, s16
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f001 f8c1 	bl	8006d80 <__lshift>
 8005bfe:	4631      	mov	r1, r6
 8005c00:	ee08 0a10 	vmov	s16, r0
 8005c04:	f001 f92c 	bl	8006e60 <__mcmp>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	dc03      	bgt.n	8005c14 <_dtoa_r+0xa9c>
 8005c0c:	d1e0      	bne.n	8005bd0 <_dtoa_r+0xa58>
 8005c0e:	f01a 0f01 	tst.w	sl, #1
 8005c12:	d0dd      	beq.n	8005bd0 <_dtoa_r+0xa58>
 8005c14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c18:	d1d7      	bne.n	8005bca <_dtoa_r+0xa52>
 8005c1a:	2339      	movs	r3, #57	; 0x39
 8005c1c:	f88b 3000 	strb.w	r3, [fp]
 8005c20:	462b      	mov	r3, r5
 8005c22:	461d      	mov	r5, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c2a:	2a39      	cmp	r2, #57	; 0x39
 8005c2c:	d071      	beq.n	8005d12 <_dtoa_r+0xb9a>
 8005c2e:	3201      	adds	r2, #1
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	e746      	b.n	8005ac2 <_dtoa_r+0x94a>
 8005c34:	2a00      	cmp	r2, #0
 8005c36:	dd07      	ble.n	8005c48 <_dtoa_r+0xad0>
 8005c38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c3c:	d0ed      	beq.n	8005c1a <_dtoa_r+0xaa2>
 8005c3e:	f10a 0301 	add.w	r3, sl, #1
 8005c42:	f88b 3000 	strb.w	r3, [fp]
 8005c46:	e73c      	b.n	8005ac2 <_dtoa_r+0x94a>
 8005c48:	9b05      	ldr	r3, [sp, #20]
 8005c4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005c4e:	4599      	cmp	r9, r3
 8005c50:	d047      	beq.n	8005ce2 <_dtoa_r+0xb6a>
 8005c52:	ee18 1a10 	vmov	r1, s16
 8005c56:	2300      	movs	r3, #0
 8005c58:	220a      	movs	r2, #10
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 fe96 	bl	800698c <__multadd>
 8005c60:	45b8      	cmp	r8, r7
 8005c62:	ee08 0a10 	vmov	s16, r0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	f04f 020a 	mov.w	r2, #10
 8005c6e:	4641      	mov	r1, r8
 8005c70:	4620      	mov	r0, r4
 8005c72:	d106      	bne.n	8005c82 <_dtoa_r+0xb0a>
 8005c74:	f000 fe8a 	bl	800698c <__multadd>
 8005c78:	4680      	mov	r8, r0
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	f109 0901 	add.w	r9, r9, #1
 8005c80:	e772      	b.n	8005b68 <_dtoa_r+0x9f0>
 8005c82:	f000 fe83 	bl	800698c <__multadd>
 8005c86:	4639      	mov	r1, r7
 8005c88:	4680      	mov	r8, r0
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	220a      	movs	r2, #10
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f000 fe7c 	bl	800698c <__multadd>
 8005c94:	4607      	mov	r7, r0
 8005c96:	e7f1      	b.n	8005c7c <_dtoa_r+0xb04>
 8005c98:	9b03      	ldr	r3, [sp, #12]
 8005c9a:	9302      	str	r3, [sp, #8]
 8005c9c:	9d01      	ldr	r5, [sp, #4]
 8005c9e:	ee18 0a10 	vmov	r0, s16
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	f7ff f9dc 	bl	8005060 <quorem>
 8005ca8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005cac:	9b01      	ldr	r3, [sp, #4]
 8005cae:	f805 ab01 	strb.w	sl, [r5], #1
 8005cb2:	1aea      	subs	r2, r5, r3
 8005cb4:	9b02      	ldr	r3, [sp, #8]
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	dd09      	ble.n	8005cce <_dtoa_r+0xb56>
 8005cba:	ee18 1a10 	vmov	r1, s16
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	220a      	movs	r2, #10
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 fe62 	bl	800698c <__multadd>
 8005cc8:	ee08 0a10 	vmov	s16, r0
 8005ccc:	e7e7      	b.n	8005c9e <_dtoa_r+0xb26>
 8005cce:	9b02      	ldr	r3, [sp, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bfc8      	it	gt
 8005cd4:	461d      	movgt	r5, r3
 8005cd6:	9b01      	ldr	r3, [sp, #4]
 8005cd8:	bfd8      	it	le
 8005cda:	2501      	movle	r5, #1
 8005cdc:	441d      	add	r5, r3
 8005cde:	f04f 0800 	mov.w	r8, #0
 8005ce2:	ee18 1a10 	vmov	r1, s16
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f001 f849 	bl	8006d80 <__lshift>
 8005cee:	4631      	mov	r1, r6
 8005cf0:	ee08 0a10 	vmov	s16, r0
 8005cf4:	f001 f8b4 	bl	8006e60 <__mcmp>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	dc91      	bgt.n	8005c20 <_dtoa_r+0xaa8>
 8005cfc:	d102      	bne.n	8005d04 <_dtoa_r+0xb8c>
 8005cfe:	f01a 0f01 	tst.w	sl, #1
 8005d02:	d18d      	bne.n	8005c20 <_dtoa_r+0xaa8>
 8005d04:	462b      	mov	r3, r5
 8005d06:	461d      	mov	r5, r3
 8005d08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d0c:	2a30      	cmp	r2, #48	; 0x30
 8005d0e:	d0fa      	beq.n	8005d06 <_dtoa_r+0xb8e>
 8005d10:	e6d7      	b.n	8005ac2 <_dtoa_r+0x94a>
 8005d12:	9a01      	ldr	r2, [sp, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d184      	bne.n	8005c22 <_dtoa_r+0xaaa>
 8005d18:	9b00      	ldr	r3, [sp, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	2331      	movs	r3, #49	; 0x31
 8005d20:	7013      	strb	r3, [r2, #0]
 8005d22:	e6ce      	b.n	8005ac2 <_dtoa_r+0x94a>
 8005d24:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <_dtoa_r+0xbd4>)
 8005d26:	f7ff ba95 	b.w	8005254 <_dtoa_r+0xdc>
 8005d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f47f aa6e 	bne.w	800520e <_dtoa_r+0x96>
 8005d32:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <_dtoa_r+0xbd8>)
 8005d34:	f7ff ba8e 	b.w	8005254 <_dtoa_r+0xdc>
 8005d38:	9b02      	ldr	r3, [sp, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	dcae      	bgt.n	8005c9c <_dtoa_r+0xb24>
 8005d3e:	9b06      	ldr	r3, [sp, #24]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	f73f aea8 	bgt.w	8005a96 <_dtoa_r+0x91e>
 8005d46:	e7a9      	b.n	8005c9c <_dtoa_r+0xb24>
 8005d48:	08007fb8 	.word	0x08007fb8
 8005d4c:	08007db8 	.word	0x08007db8
 8005d50:	08007f39 	.word	0x08007f39

08005d54 <__sflush_r>:
 8005d54:	898a      	ldrh	r2, [r1, #12]
 8005d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	0710      	lsls	r0, r2, #28
 8005d5e:	460c      	mov	r4, r1
 8005d60:	d458      	bmi.n	8005e14 <__sflush_r+0xc0>
 8005d62:	684b      	ldr	r3, [r1, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	dc05      	bgt.n	8005d74 <__sflush_r+0x20>
 8005d68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	dc02      	bgt.n	8005d74 <__sflush_r+0x20>
 8005d6e:	2000      	movs	r0, #0
 8005d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	d0f9      	beq.n	8005d6e <__sflush_r+0x1a>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d80:	682f      	ldr	r7, [r5, #0]
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	d032      	beq.n	8005dec <__sflush_r+0x98>
 8005d86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	075a      	lsls	r2, r3, #29
 8005d8c:	d505      	bpl.n	8005d9a <__sflush_r+0x46>
 8005d8e:	6863      	ldr	r3, [r4, #4]
 8005d90:	1ac0      	subs	r0, r0, r3
 8005d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d94:	b10b      	cbz	r3, 8005d9a <__sflush_r+0x46>
 8005d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d98:	1ac0      	subs	r0, r0, r3
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005da0:	6a21      	ldr	r1, [r4, #32]
 8005da2:	4628      	mov	r0, r5
 8005da4:	47b0      	blx	r6
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	d106      	bne.n	8005dba <__sflush_r+0x66>
 8005dac:	6829      	ldr	r1, [r5, #0]
 8005dae:	291d      	cmp	r1, #29
 8005db0:	d82c      	bhi.n	8005e0c <__sflush_r+0xb8>
 8005db2:	4a2a      	ldr	r2, [pc, #168]	; (8005e5c <__sflush_r+0x108>)
 8005db4:	40ca      	lsrs	r2, r1
 8005db6:	07d6      	lsls	r6, r2, #31
 8005db8:	d528      	bpl.n	8005e0c <__sflush_r+0xb8>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	6062      	str	r2, [r4, #4]
 8005dbe:	04d9      	lsls	r1, r3, #19
 8005dc0:	6922      	ldr	r2, [r4, #16]
 8005dc2:	6022      	str	r2, [r4, #0]
 8005dc4:	d504      	bpl.n	8005dd0 <__sflush_r+0x7c>
 8005dc6:	1c42      	adds	r2, r0, #1
 8005dc8:	d101      	bne.n	8005dce <__sflush_r+0x7a>
 8005dca:	682b      	ldr	r3, [r5, #0]
 8005dcc:	b903      	cbnz	r3, 8005dd0 <__sflush_r+0x7c>
 8005dce:	6560      	str	r0, [r4, #84]	; 0x54
 8005dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dd2:	602f      	str	r7, [r5, #0]
 8005dd4:	2900      	cmp	r1, #0
 8005dd6:	d0ca      	beq.n	8005d6e <__sflush_r+0x1a>
 8005dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ddc:	4299      	cmp	r1, r3
 8005dde:	d002      	beq.n	8005de6 <__sflush_r+0x92>
 8005de0:	4628      	mov	r0, r5
 8005de2:	f001 fa49 	bl	8007278 <_free_r>
 8005de6:	2000      	movs	r0, #0
 8005de8:	6360      	str	r0, [r4, #52]	; 0x34
 8005dea:	e7c1      	b.n	8005d70 <__sflush_r+0x1c>
 8005dec:	6a21      	ldr	r1, [r4, #32]
 8005dee:	2301      	movs	r3, #1
 8005df0:	4628      	mov	r0, r5
 8005df2:	47b0      	blx	r6
 8005df4:	1c41      	adds	r1, r0, #1
 8005df6:	d1c7      	bne.n	8005d88 <__sflush_r+0x34>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0c4      	beq.n	8005d88 <__sflush_r+0x34>
 8005dfe:	2b1d      	cmp	r3, #29
 8005e00:	d001      	beq.n	8005e06 <__sflush_r+0xb2>
 8005e02:	2b16      	cmp	r3, #22
 8005e04:	d101      	bne.n	8005e0a <__sflush_r+0xb6>
 8005e06:	602f      	str	r7, [r5, #0]
 8005e08:	e7b1      	b.n	8005d6e <__sflush_r+0x1a>
 8005e0a:	89a3      	ldrh	r3, [r4, #12]
 8005e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e10:	81a3      	strh	r3, [r4, #12]
 8005e12:	e7ad      	b.n	8005d70 <__sflush_r+0x1c>
 8005e14:	690f      	ldr	r7, [r1, #16]
 8005e16:	2f00      	cmp	r7, #0
 8005e18:	d0a9      	beq.n	8005d6e <__sflush_r+0x1a>
 8005e1a:	0793      	lsls	r3, r2, #30
 8005e1c:	680e      	ldr	r6, [r1, #0]
 8005e1e:	bf08      	it	eq
 8005e20:	694b      	ldreq	r3, [r1, #20]
 8005e22:	600f      	str	r7, [r1, #0]
 8005e24:	bf18      	it	ne
 8005e26:	2300      	movne	r3, #0
 8005e28:	eba6 0807 	sub.w	r8, r6, r7
 8005e2c:	608b      	str	r3, [r1, #8]
 8005e2e:	f1b8 0f00 	cmp.w	r8, #0
 8005e32:	dd9c      	ble.n	8005d6e <__sflush_r+0x1a>
 8005e34:	6a21      	ldr	r1, [r4, #32]
 8005e36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e38:	4643      	mov	r3, r8
 8005e3a:	463a      	mov	r2, r7
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	47b0      	blx	r6
 8005e40:	2800      	cmp	r0, #0
 8005e42:	dc06      	bgt.n	8005e52 <__sflush_r+0xfe>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e4a:	81a3      	strh	r3, [r4, #12]
 8005e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e50:	e78e      	b.n	8005d70 <__sflush_r+0x1c>
 8005e52:	4407      	add	r7, r0
 8005e54:	eba8 0800 	sub.w	r8, r8, r0
 8005e58:	e7e9      	b.n	8005e2e <__sflush_r+0xda>
 8005e5a:	bf00      	nop
 8005e5c:	20400001 	.word	0x20400001

08005e60 <_fflush_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	690b      	ldr	r3, [r1, #16]
 8005e64:	4605      	mov	r5, r0
 8005e66:	460c      	mov	r4, r1
 8005e68:	b913      	cbnz	r3, 8005e70 <_fflush_r+0x10>
 8005e6a:	2500      	movs	r5, #0
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
 8005e70:	b118      	cbz	r0, 8005e7a <_fflush_r+0x1a>
 8005e72:	6983      	ldr	r3, [r0, #24]
 8005e74:	b90b      	cbnz	r3, 8005e7a <_fflush_r+0x1a>
 8005e76:	f000 f887 	bl	8005f88 <__sinit>
 8005e7a:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <_fflush_r+0x6c>)
 8005e7c:	429c      	cmp	r4, r3
 8005e7e:	d11b      	bne.n	8005eb8 <_fflush_r+0x58>
 8005e80:	686c      	ldr	r4, [r5, #4]
 8005e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0ef      	beq.n	8005e6a <_fflush_r+0xa>
 8005e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e8c:	07d0      	lsls	r0, r2, #31
 8005e8e:	d404      	bmi.n	8005e9a <_fflush_r+0x3a>
 8005e90:	0599      	lsls	r1, r3, #22
 8005e92:	d402      	bmi.n	8005e9a <_fflush_r+0x3a>
 8005e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e96:	f000 fc88 	bl	80067aa <__retarget_lock_acquire_recursive>
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	f7ff ff59 	bl	8005d54 <__sflush_r>
 8005ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ea4:	07da      	lsls	r2, r3, #31
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	d4e0      	bmi.n	8005e6c <_fflush_r+0xc>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	059b      	lsls	r3, r3, #22
 8005eae:	d4dd      	bmi.n	8005e6c <_fflush_r+0xc>
 8005eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eb2:	f000 fc7b 	bl	80067ac <__retarget_lock_release_recursive>
 8005eb6:	e7d9      	b.n	8005e6c <_fflush_r+0xc>
 8005eb8:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <_fflush_r+0x70>)
 8005eba:	429c      	cmp	r4, r3
 8005ebc:	d101      	bne.n	8005ec2 <_fflush_r+0x62>
 8005ebe:	68ac      	ldr	r4, [r5, #8]
 8005ec0:	e7df      	b.n	8005e82 <_fflush_r+0x22>
 8005ec2:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <_fflush_r+0x74>)
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	bf08      	it	eq
 8005ec8:	68ec      	ldreq	r4, [r5, #12]
 8005eca:	e7da      	b.n	8005e82 <_fflush_r+0x22>
 8005ecc:	08007fec 	.word	0x08007fec
 8005ed0:	0800800c 	.word	0x0800800c
 8005ed4:	08007fcc 	.word	0x08007fcc

08005ed8 <std>:
 8005ed8:	2300      	movs	r3, #0
 8005eda:	b510      	push	{r4, lr}
 8005edc:	4604      	mov	r4, r0
 8005ede:	e9c0 3300 	strd	r3, r3, [r0]
 8005ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ee6:	6083      	str	r3, [r0, #8]
 8005ee8:	8181      	strh	r1, [r0, #12]
 8005eea:	6643      	str	r3, [r0, #100]	; 0x64
 8005eec:	81c2      	strh	r2, [r0, #14]
 8005eee:	6183      	str	r3, [r0, #24]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	305c      	adds	r0, #92	; 0x5c
 8005ef6:	f7fd fa11 	bl	800331c <memset>
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <std+0x38>)
 8005efc:	6263      	str	r3, [r4, #36]	; 0x24
 8005efe:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <std+0x3c>)
 8005f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f02:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <std+0x40>)
 8005f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <std+0x44>)
 8005f08:	6224      	str	r4, [r4, #32]
 8005f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	bf00      	nop
 8005f10:	080079d9 	.word	0x080079d9
 8005f14:	080079fb 	.word	0x080079fb
 8005f18:	08007a33 	.word	0x08007a33
 8005f1c:	08007a57 	.word	0x08007a57

08005f20 <_cleanup_r>:
 8005f20:	4901      	ldr	r1, [pc, #4]	; (8005f28 <_cleanup_r+0x8>)
 8005f22:	f000 b8af 	b.w	8006084 <_fwalk_reent>
 8005f26:	bf00      	nop
 8005f28:	08005e61 	.word	0x08005e61

08005f2c <__sfmoreglue>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	2268      	movs	r2, #104	; 0x68
 8005f30:	1e4d      	subs	r5, r1, #1
 8005f32:	4355      	muls	r5, r2
 8005f34:	460e      	mov	r6, r1
 8005f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f3a:	f001 fa09 	bl	8007350 <_malloc_r>
 8005f3e:	4604      	mov	r4, r0
 8005f40:	b140      	cbz	r0, 8005f54 <__sfmoreglue+0x28>
 8005f42:	2100      	movs	r1, #0
 8005f44:	e9c0 1600 	strd	r1, r6, [r0]
 8005f48:	300c      	adds	r0, #12
 8005f4a:	60a0      	str	r0, [r4, #8]
 8005f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f50:	f7fd f9e4 	bl	800331c <memset>
 8005f54:	4620      	mov	r0, r4
 8005f56:	bd70      	pop	{r4, r5, r6, pc}

08005f58 <__sfp_lock_acquire>:
 8005f58:	4801      	ldr	r0, [pc, #4]	; (8005f60 <__sfp_lock_acquire+0x8>)
 8005f5a:	f000 bc26 	b.w	80067aa <__retarget_lock_acquire_recursive>
 8005f5e:	bf00      	nop
 8005f60:	2000028d 	.word	0x2000028d

08005f64 <__sfp_lock_release>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__sfp_lock_release+0x8>)
 8005f66:	f000 bc21 	b.w	80067ac <__retarget_lock_release_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	2000028d 	.word	0x2000028d

08005f70 <__sinit_lock_acquire>:
 8005f70:	4801      	ldr	r0, [pc, #4]	; (8005f78 <__sinit_lock_acquire+0x8>)
 8005f72:	f000 bc1a 	b.w	80067aa <__retarget_lock_acquire_recursive>
 8005f76:	bf00      	nop
 8005f78:	2000028e 	.word	0x2000028e

08005f7c <__sinit_lock_release>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	; (8005f84 <__sinit_lock_release+0x8>)
 8005f7e:	f000 bc15 	b.w	80067ac <__retarget_lock_release_recursive>
 8005f82:	bf00      	nop
 8005f84:	2000028e 	.word	0x2000028e

08005f88 <__sinit>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	f7ff fff0 	bl	8005f70 <__sinit_lock_acquire>
 8005f90:	69a3      	ldr	r3, [r4, #24]
 8005f92:	b11b      	cbz	r3, 8005f9c <__sinit+0x14>
 8005f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f98:	f7ff bff0 	b.w	8005f7c <__sinit_lock_release>
 8005f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8005fa2:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <__sinit+0x68>)
 8005fa4:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <__sinit+0x6c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005faa:	42a3      	cmp	r3, r4
 8005fac:	bf04      	itt	eq
 8005fae:	2301      	moveq	r3, #1
 8005fb0:	61a3      	streq	r3, [r4, #24]
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 f820 	bl	8005ff8 <__sfp>
 8005fb8:	6060      	str	r0, [r4, #4]
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 f81c 	bl	8005ff8 <__sfp>
 8005fc0:	60a0      	str	r0, [r4, #8]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f818 	bl	8005ff8 <__sfp>
 8005fc8:	2200      	movs	r2, #0
 8005fca:	60e0      	str	r0, [r4, #12]
 8005fcc:	2104      	movs	r1, #4
 8005fce:	6860      	ldr	r0, [r4, #4]
 8005fd0:	f7ff ff82 	bl	8005ed8 <std>
 8005fd4:	68a0      	ldr	r0, [r4, #8]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	2109      	movs	r1, #9
 8005fda:	f7ff ff7d 	bl	8005ed8 <std>
 8005fde:	68e0      	ldr	r0, [r4, #12]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	2112      	movs	r1, #18
 8005fe4:	f7ff ff78 	bl	8005ed8 <std>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	61a3      	str	r3, [r4, #24]
 8005fec:	e7d2      	b.n	8005f94 <__sinit+0xc>
 8005fee:	bf00      	nop
 8005ff0:	08007da4 	.word	0x08007da4
 8005ff4:	08005f21 	.word	0x08005f21

08005ff8 <__sfp>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	4607      	mov	r7, r0
 8005ffc:	f7ff ffac 	bl	8005f58 <__sfp_lock_acquire>
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <__sfp+0x84>)
 8006002:	681e      	ldr	r6, [r3, #0]
 8006004:	69b3      	ldr	r3, [r6, #24]
 8006006:	b913      	cbnz	r3, 800600e <__sfp+0x16>
 8006008:	4630      	mov	r0, r6
 800600a:	f7ff ffbd 	bl	8005f88 <__sinit>
 800600e:	3648      	adds	r6, #72	; 0x48
 8006010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006014:	3b01      	subs	r3, #1
 8006016:	d503      	bpl.n	8006020 <__sfp+0x28>
 8006018:	6833      	ldr	r3, [r6, #0]
 800601a:	b30b      	cbz	r3, 8006060 <__sfp+0x68>
 800601c:	6836      	ldr	r6, [r6, #0]
 800601e:	e7f7      	b.n	8006010 <__sfp+0x18>
 8006020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006024:	b9d5      	cbnz	r5, 800605c <__sfp+0x64>
 8006026:	4b16      	ldr	r3, [pc, #88]	; (8006080 <__sfp+0x88>)
 8006028:	60e3      	str	r3, [r4, #12]
 800602a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800602e:	6665      	str	r5, [r4, #100]	; 0x64
 8006030:	f000 fbba 	bl	80067a8 <__retarget_lock_init_recursive>
 8006034:	f7ff ff96 	bl	8005f64 <__sfp_lock_release>
 8006038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800603c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006040:	6025      	str	r5, [r4, #0]
 8006042:	61a5      	str	r5, [r4, #24]
 8006044:	2208      	movs	r2, #8
 8006046:	4629      	mov	r1, r5
 8006048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800604c:	f7fd f966 	bl	800331c <memset>
 8006050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006058:	4620      	mov	r0, r4
 800605a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800605c:	3468      	adds	r4, #104	; 0x68
 800605e:	e7d9      	b.n	8006014 <__sfp+0x1c>
 8006060:	2104      	movs	r1, #4
 8006062:	4638      	mov	r0, r7
 8006064:	f7ff ff62 	bl	8005f2c <__sfmoreglue>
 8006068:	4604      	mov	r4, r0
 800606a:	6030      	str	r0, [r6, #0]
 800606c:	2800      	cmp	r0, #0
 800606e:	d1d5      	bne.n	800601c <__sfp+0x24>
 8006070:	f7ff ff78 	bl	8005f64 <__sfp_lock_release>
 8006074:	230c      	movs	r3, #12
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	e7ee      	b.n	8006058 <__sfp+0x60>
 800607a:	bf00      	nop
 800607c:	08007da4 	.word	0x08007da4
 8006080:	ffff0001 	.word	0xffff0001

08006084 <_fwalk_reent>:
 8006084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006088:	4606      	mov	r6, r0
 800608a:	4688      	mov	r8, r1
 800608c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006090:	2700      	movs	r7, #0
 8006092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006096:	f1b9 0901 	subs.w	r9, r9, #1
 800609a:	d505      	bpl.n	80060a8 <_fwalk_reent+0x24>
 800609c:	6824      	ldr	r4, [r4, #0]
 800609e:	2c00      	cmp	r4, #0
 80060a0:	d1f7      	bne.n	8006092 <_fwalk_reent+0xe>
 80060a2:	4638      	mov	r0, r7
 80060a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a8:	89ab      	ldrh	r3, [r5, #12]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d907      	bls.n	80060be <_fwalk_reent+0x3a>
 80060ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060b2:	3301      	adds	r3, #1
 80060b4:	d003      	beq.n	80060be <_fwalk_reent+0x3a>
 80060b6:	4629      	mov	r1, r5
 80060b8:	4630      	mov	r0, r6
 80060ba:	47c0      	blx	r8
 80060bc:	4307      	orrs	r7, r0
 80060be:	3568      	adds	r5, #104	; 0x68
 80060c0:	e7e9      	b.n	8006096 <_fwalk_reent+0x12>

080060c2 <rshift>:
 80060c2:	6903      	ldr	r3, [r0, #16]
 80060c4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80060c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060cc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80060d0:	f100 0414 	add.w	r4, r0, #20
 80060d4:	dd45      	ble.n	8006162 <rshift+0xa0>
 80060d6:	f011 011f 	ands.w	r1, r1, #31
 80060da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80060de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80060e2:	d10c      	bne.n	80060fe <rshift+0x3c>
 80060e4:	f100 0710 	add.w	r7, r0, #16
 80060e8:	4629      	mov	r1, r5
 80060ea:	42b1      	cmp	r1, r6
 80060ec:	d334      	bcc.n	8006158 <rshift+0x96>
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	1eea      	subs	r2, r5, #3
 80060f4:	4296      	cmp	r6, r2
 80060f6:	bf38      	it	cc
 80060f8:	2300      	movcc	r3, #0
 80060fa:	4423      	add	r3, r4
 80060fc:	e015      	b.n	800612a <rshift+0x68>
 80060fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006102:	f1c1 0820 	rsb	r8, r1, #32
 8006106:	40cf      	lsrs	r7, r1
 8006108:	f105 0e04 	add.w	lr, r5, #4
 800610c:	46a1      	mov	r9, r4
 800610e:	4576      	cmp	r6, lr
 8006110:	46f4      	mov	ip, lr
 8006112:	d815      	bhi.n	8006140 <rshift+0x7e>
 8006114:	1a9a      	subs	r2, r3, r2
 8006116:	0092      	lsls	r2, r2, #2
 8006118:	3a04      	subs	r2, #4
 800611a:	3501      	adds	r5, #1
 800611c:	42ae      	cmp	r6, r5
 800611e:	bf38      	it	cc
 8006120:	2200      	movcc	r2, #0
 8006122:	18a3      	adds	r3, r4, r2
 8006124:	50a7      	str	r7, [r4, r2]
 8006126:	b107      	cbz	r7, 800612a <rshift+0x68>
 8006128:	3304      	adds	r3, #4
 800612a:	1b1a      	subs	r2, r3, r4
 800612c:	42a3      	cmp	r3, r4
 800612e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006132:	bf08      	it	eq
 8006134:	2300      	moveq	r3, #0
 8006136:	6102      	str	r2, [r0, #16]
 8006138:	bf08      	it	eq
 800613a:	6143      	streq	r3, [r0, #20]
 800613c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006140:	f8dc c000 	ldr.w	ip, [ip]
 8006144:	fa0c fc08 	lsl.w	ip, ip, r8
 8006148:	ea4c 0707 	orr.w	r7, ip, r7
 800614c:	f849 7b04 	str.w	r7, [r9], #4
 8006150:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006154:	40cf      	lsrs	r7, r1
 8006156:	e7da      	b.n	800610e <rshift+0x4c>
 8006158:	f851 cb04 	ldr.w	ip, [r1], #4
 800615c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006160:	e7c3      	b.n	80060ea <rshift+0x28>
 8006162:	4623      	mov	r3, r4
 8006164:	e7e1      	b.n	800612a <rshift+0x68>

08006166 <__hexdig_fun>:
 8006166:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800616a:	2b09      	cmp	r3, #9
 800616c:	d802      	bhi.n	8006174 <__hexdig_fun+0xe>
 800616e:	3820      	subs	r0, #32
 8006170:	b2c0      	uxtb	r0, r0
 8006172:	4770      	bx	lr
 8006174:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006178:	2b05      	cmp	r3, #5
 800617a:	d801      	bhi.n	8006180 <__hexdig_fun+0x1a>
 800617c:	3847      	subs	r0, #71	; 0x47
 800617e:	e7f7      	b.n	8006170 <__hexdig_fun+0xa>
 8006180:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006184:	2b05      	cmp	r3, #5
 8006186:	d801      	bhi.n	800618c <__hexdig_fun+0x26>
 8006188:	3827      	subs	r0, #39	; 0x27
 800618a:	e7f1      	b.n	8006170 <__hexdig_fun+0xa>
 800618c:	2000      	movs	r0, #0
 800618e:	4770      	bx	lr

08006190 <__gethex>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	ed2d 8b02 	vpush	{d8}
 8006198:	b089      	sub	sp, #36	; 0x24
 800619a:	ee08 0a10 	vmov	s16, r0
 800619e:	9304      	str	r3, [sp, #16]
 80061a0:	4bb4      	ldr	r3, [pc, #720]	; (8006474 <__gethex+0x2e4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	4618      	mov	r0, r3
 80061a8:	468b      	mov	fp, r1
 80061aa:	4690      	mov	r8, r2
 80061ac:	f7fa f810 	bl	80001d0 <strlen>
 80061b0:	9b01      	ldr	r3, [sp, #4]
 80061b2:	f8db 2000 	ldr.w	r2, [fp]
 80061b6:	4403      	add	r3, r0
 80061b8:	4682      	mov	sl, r0
 80061ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	1c93      	adds	r3, r2, #2
 80061c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80061c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80061ca:	32fe      	adds	r2, #254	; 0xfe
 80061cc:	18d1      	adds	r1, r2, r3
 80061ce:	461f      	mov	r7, r3
 80061d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80061d4:	9100      	str	r1, [sp, #0]
 80061d6:	2830      	cmp	r0, #48	; 0x30
 80061d8:	d0f8      	beq.n	80061cc <__gethex+0x3c>
 80061da:	f7ff ffc4 	bl	8006166 <__hexdig_fun>
 80061de:	4604      	mov	r4, r0
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d13a      	bne.n	800625a <__gethex+0xca>
 80061e4:	9901      	ldr	r1, [sp, #4]
 80061e6:	4652      	mov	r2, sl
 80061e8:	4638      	mov	r0, r7
 80061ea:	f001 fc38 	bl	8007a5e <strncmp>
 80061ee:	4605      	mov	r5, r0
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d168      	bne.n	80062c6 <__gethex+0x136>
 80061f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80061f8:	eb07 060a 	add.w	r6, r7, sl
 80061fc:	f7ff ffb3 	bl	8006166 <__hexdig_fun>
 8006200:	2800      	cmp	r0, #0
 8006202:	d062      	beq.n	80062ca <__gethex+0x13a>
 8006204:	4633      	mov	r3, r6
 8006206:	7818      	ldrb	r0, [r3, #0]
 8006208:	2830      	cmp	r0, #48	; 0x30
 800620a:	461f      	mov	r7, r3
 800620c:	f103 0301 	add.w	r3, r3, #1
 8006210:	d0f9      	beq.n	8006206 <__gethex+0x76>
 8006212:	f7ff ffa8 	bl	8006166 <__hexdig_fun>
 8006216:	2301      	movs	r3, #1
 8006218:	fab0 f480 	clz	r4, r0
 800621c:	0964      	lsrs	r4, r4, #5
 800621e:	4635      	mov	r5, r6
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	463a      	mov	r2, r7
 8006224:	4616      	mov	r6, r2
 8006226:	3201      	adds	r2, #1
 8006228:	7830      	ldrb	r0, [r6, #0]
 800622a:	f7ff ff9c 	bl	8006166 <__hexdig_fun>
 800622e:	2800      	cmp	r0, #0
 8006230:	d1f8      	bne.n	8006224 <__gethex+0x94>
 8006232:	9901      	ldr	r1, [sp, #4]
 8006234:	4652      	mov	r2, sl
 8006236:	4630      	mov	r0, r6
 8006238:	f001 fc11 	bl	8007a5e <strncmp>
 800623c:	b980      	cbnz	r0, 8006260 <__gethex+0xd0>
 800623e:	b94d      	cbnz	r5, 8006254 <__gethex+0xc4>
 8006240:	eb06 050a 	add.w	r5, r6, sl
 8006244:	462a      	mov	r2, r5
 8006246:	4616      	mov	r6, r2
 8006248:	3201      	adds	r2, #1
 800624a:	7830      	ldrb	r0, [r6, #0]
 800624c:	f7ff ff8b 	bl	8006166 <__hexdig_fun>
 8006250:	2800      	cmp	r0, #0
 8006252:	d1f8      	bne.n	8006246 <__gethex+0xb6>
 8006254:	1bad      	subs	r5, r5, r6
 8006256:	00ad      	lsls	r5, r5, #2
 8006258:	e004      	b.n	8006264 <__gethex+0xd4>
 800625a:	2400      	movs	r4, #0
 800625c:	4625      	mov	r5, r4
 800625e:	e7e0      	b.n	8006222 <__gethex+0x92>
 8006260:	2d00      	cmp	r5, #0
 8006262:	d1f7      	bne.n	8006254 <__gethex+0xc4>
 8006264:	7833      	ldrb	r3, [r6, #0]
 8006266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800626a:	2b50      	cmp	r3, #80	; 0x50
 800626c:	d13b      	bne.n	80062e6 <__gethex+0x156>
 800626e:	7873      	ldrb	r3, [r6, #1]
 8006270:	2b2b      	cmp	r3, #43	; 0x2b
 8006272:	d02c      	beq.n	80062ce <__gethex+0x13e>
 8006274:	2b2d      	cmp	r3, #45	; 0x2d
 8006276:	d02e      	beq.n	80062d6 <__gethex+0x146>
 8006278:	1c71      	adds	r1, r6, #1
 800627a:	f04f 0900 	mov.w	r9, #0
 800627e:	7808      	ldrb	r0, [r1, #0]
 8006280:	f7ff ff71 	bl	8006166 <__hexdig_fun>
 8006284:	1e43      	subs	r3, r0, #1
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b18      	cmp	r3, #24
 800628a:	d82c      	bhi.n	80062e6 <__gethex+0x156>
 800628c:	f1a0 0210 	sub.w	r2, r0, #16
 8006290:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006294:	f7ff ff67 	bl	8006166 <__hexdig_fun>
 8006298:	1e43      	subs	r3, r0, #1
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b18      	cmp	r3, #24
 800629e:	d91d      	bls.n	80062dc <__gethex+0x14c>
 80062a0:	f1b9 0f00 	cmp.w	r9, #0
 80062a4:	d000      	beq.n	80062a8 <__gethex+0x118>
 80062a6:	4252      	negs	r2, r2
 80062a8:	4415      	add	r5, r2
 80062aa:	f8cb 1000 	str.w	r1, [fp]
 80062ae:	b1e4      	cbz	r4, 80062ea <__gethex+0x15a>
 80062b0:	9b00      	ldr	r3, [sp, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf14      	ite	ne
 80062b6:	2700      	movne	r7, #0
 80062b8:	2706      	moveq	r7, #6
 80062ba:	4638      	mov	r0, r7
 80062bc:	b009      	add	sp, #36	; 0x24
 80062be:	ecbd 8b02 	vpop	{d8}
 80062c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c6:	463e      	mov	r6, r7
 80062c8:	4625      	mov	r5, r4
 80062ca:	2401      	movs	r4, #1
 80062cc:	e7ca      	b.n	8006264 <__gethex+0xd4>
 80062ce:	f04f 0900 	mov.w	r9, #0
 80062d2:	1cb1      	adds	r1, r6, #2
 80062d4:	e7d3      	b.n	800627e <__gethex+0xee>
 80062d6:	f04f 0901 	mov.w	r9, #1
 80062da:	e7fa      	b.n	80062d2 <__gethex+0x142>
 80062dc:	230a      	movs	r3, #10
 80062de:	fb03 0202 	mla	r2, r3, r2, r0
 80062e2:	3a10      	subs	r2, #16
 80062e4:	e7d4      	b.n	8006290 <__gethex+0x100>
 80062e6:	4631      	mov	r1, r6
 80062e8:	e7df      	b.n	80062aa <__gethex+0x11a>
 80062ea:	1bf3      	subs	r3, r6, r7
 80062ec:	3b01      	subs	r3, #1
 80062ee:	4621      	mov	r1, r4
 80062f0:	2b07      	cmp	r3, #7
 80062f2:	dc0b      	bgt.n	800630c <__gethex+0x17c>
 80062f4:	ee18 0a10 	vmov	r0, s16
 80062f8:	f000 fae6 	bl	80068c8 <_Balloc>
 80062fc:	4604      	mov	r4, r0
 80062fe:	b940      	cbnz	r0, 8006312 <__gethex+0x182>
 8006300:	4b5d      	ldr	r3, [pc, #372]	; (8006478 <__gethex+0x2e8>)
 8006302:	4602      	mov	r2, r0
 8006304:	21de      	movs	r1, #222	; 0xde
 8006306:	485d      	ldr	r0, [pc, #372]	; (800647c <__gethex+0x2ec>)
 8006308:	f001 fbdc 	bl	8007ac4 <__assert_func>
 800630c:	3101      	adds	r1, #1
 800630e:	105b      	asrs	r3, r3, #1
 8006310:	e7ee      	b.n	80062f0 <__gethex+0x160>
 8006312:	f100 0914 	add.w	r9, r0, #20
 8006316:	f04f 0b00 	mov.w	fp, #0
 800631a:	f1ca 0301 	rsb	r3, sl, #1
 800631e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006322:	f8cd b000 	str.w	fp, [sp]
 8006326:	9306      	str	r3, [sp, #24]
 8006328:	42b7      	cmp	r7, r6
 800632a:	d340      	bcc.n	80063ae <__gethex+0x21e>
 800632c:	9802      	ldr	r0, [sp, #8]
 800632e:	9b00      	ldr	r3, [sp, #0]
 8006330:	f840 3b04 	str.w	r3, [r0], #4
 8006334:	eba0 0009 	sub.w	r0, r0, r9
 8006338:	1080      	asrs	r0, r0, #2
 800633a:	0146      	lsls	r6, r0, #5
 800633c:	6120      	str	r0, [r4, #16]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fbb4 	bl	8006aac <__hi0bits>
 8006344:	1a30      	subs	r0, r6, r0
 8006346:	f8d8 6000 	ldr.w	r6, [r8]
 800634a:	42b0      	cmp	r0, r6
 800634c:	dd63      	ble.n	8006416 <__gethex+0x286>
 800634e:	1b87      	subs	r7, r0, r6
 8006350:	4639      	mov	r1, r7
 8006352:	4620      	mov	r0, r4
 8006354:	f000 ff58 	bl	8007208 <__any_on>
 8006358:	4682      	mov	sl, r0
 800635a:	b1a8      	cbz	r0, 8006388 <__gethex+0x1f8>
 800635c:	1e7b      	subs	r3, r7, #1
 800635e:	1159      	asrs	r1, r3, #5
 8006360:	f003 021f 	and.w	r2, r3, #31
 8006364:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006368:	f04f 0a01 	mov.w	sl, #1
 800636c:	fa0a f202 	lsl.w	r2, sl, r2
 8006370:	420a      	tst	r2, r1
 8006372:	d009      	beq.n	8006388 <__gethex+0x1f8>
 8006374:	4553      	cmp	r3, sl
 8006376:	dd05      	ble.n	8006384 <__gethex+0x1f4>
 8006378:	1eb9      	subs	r1, r7, #2
 800637a:	4620      	mov	r0, r4
 800637c:	f000 ff44 	bl	8007208 <__any_on>
 8006380:	2800      	cmp	r0, #0
 8006382:	d145      	bne.n	8006410 <__gethex+0x280>
 8006384:	f04f 0a02 	mov.w	sl, #2
 8006388:	4639      	mov	r1, r7
 800638a:	4620      	mov	r0, r4
 800638c:	f7ff fe99 	bl	80060c2 <rshift>
 8006390:	443d      	add	r5, r7
 8006392:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006396:	42ab      	cmp	r3, r5
 8006398:	da4c      	bge.n	8006434 <__gethex+0x2a4>
 800639a:	ee18 0a10 	vmov	r0, s16
 800639e:	4621      	mov	r1, r4
 80063a0:	f000 fad2 	bl	8006948 <_Bfree>
 80063a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80063a6:	2300      	movs	r3, #0
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	27a3      	movs	r7, #163	; 0xa3
 80063ac:	e785      	b.n	80062ba <__gethex+0x12a>
 80063ae:	1e73      	subs	r3, r6, #1
 80063b0:	9a05      	ldr	r2, [sp, #20]
 80063b2:	9303      	str	r3, [sp, #12]
 80063b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d019      	beq.n	80063f0 <__gethex+0x260>
 80063bc:	f1bb 0f20 	cmp.w	fp, #32
 80063c0:	d107      	bne.n	80063d2 <__gethex+0x242>
 80063c2:	9b02      	ldr	r3, [sp, #8]
 80063c4:	9a00      	ldr	r2, [sp, #0]
 80063c6:	f843 2b04 	str.w	r2, [r3], #4
 80063ca:	9302      	str	r3, [sp, #8]
 80063cc:	2300      	movs	r3, #0
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	469b      	mov	fp, r3
 80063d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80063d6:	f7ff fec6 	bl	8006166 <__hexdig_fun>
 80063da:	9b00      	ldr	r3, [sp, #0]
 80063dc:	f000 000f 	and.w	r0, r0, #15
 80063e0:	fa00 f00b 	lsl.w	r0, r0, fp
 80063e4:	4303      	orrs	r3, r0
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	f10b 0b04 	add.w	fp, fp, #4
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	e00d      	b.n	800640c <__gethex+0x27c>
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	9a06      	ldr	r2, [sp, #24]
 80063f4:	4413      	add	r3, r2
 80063f6:	42bb      	cmp	r3, r7
 80063f8:	d3e0      	bcc.n	80063bc <__gethex+0x22c>
 80063fa:	4618      	mov	r0, r3
 80063fc:	9901      	ldr	r1, [sp, #4]
 80063fe:	9307      	str	r3, [sp, #28]
 8006400:	4652      	mov	r2, sl
 8006402:	f001 fb2c 	bl	8007a5e <strncmp>
 8006406:	9b07      	ldr	r3, [sp, #28]
 8006408:	2800      	cmp	r0, #0
 800640a:	d1d7      	bne.n	80063bc <__gethex+0x22c>
 800640c:	461e      	mov	r6, r3
 800640e:	e78b      	b.n	8006328 <__gethex+0x198>
 8006410:	f04f 0a03 	mov.w	sl, #3
 8006414:	e7b8      	b.n	8006388 <__gethex+0x1f8>
 8006416:	da0a      	bge.n	800642e <__gethex+0x29e>
 8006418:	1a37      	subs	r7, r6, r0
 800641a:	4621      	mov	r1, r4
 800641c:	ee18 0a10 	vmov	r0, s16
 8006420:	463a      	mov	r2, r7
 8006422:	f000 fcad 	bl	8006d80 <__lshift>
 8006426:	1bed      	subs	r5, r5, r7
 8006428:	4604      	mov	r4, r0
 800642a:	f100 0914 	add.w	r9, r0, #20
 800642e:	f04f 0a00 	mov.w	sl, #0
 8006432:	e7ae      	b.n	8006392 <__gethex+0x202>
 8006434:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006438:	42a8      	cmp	r0, r5
 800643a:	dd72      	ble.n	8006522 <__gethex+0x392>
 800643c:	1b45      	subs	r5, r0, r5
 800643e:	42ae      	cmp	r6, r5
 8006440:	dc36      	bgt.n	80064b0 <__gethex+0x320>
 8006442:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d02a      	beq.n	80064a0 <__gethex+0x310>
 800644a:	2b03      	cmp	r3, #3
 800644c:	d02c      	beq.n	80064a8 <__gethex+0x318>
 800644e:	2b01      	cmp	r3, #1
 8006450:	d11c      	bne.n	800648c <__gethex+0x2fc>
 8006452:	42ae      	cmp	r6, r5
 8006454:	d11a      	bne.n	800648c <__gethex+0x2fc>
 8006456:	2e01      	cmp	r6, #1
 8006458:	d112      	bne.n	8006480 <__gethex+0x2f0>
 800645a:	9a04      	ldr	r2, [sp, #16]
 800645c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	2301      	movs	r3, #1
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	f8c9 3000 	str.w	r3, [r9]
 800646a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800646c:	2762      	movs	r7, #98	; 0x62
 800646e:	601c      	str	r4, [r3, #0]
 8006470:	e723      	b.n	80062ba <__gethex+0x12a>
 8006472:	bf00      	nop
 8006474:	08008094 	.word	0x08008094
 8006478:	08007fb8 	.word	0x08007fb8
 800647c:	0800802c 	.word	0x0800802c
 8006480:	1e71      	subs	r1, r6, #1
 8006482:	4620      	mov	r0, r4
 8006484:	f000 fec0 	bl	8007208 <__any_on>
 8006488:	2800      	cmp	r0, #0
 800648a:	d1e6      	bne.n	800645a <__gethex+0x2ca>
 800648c:	ee18 0a10 	vmov	r0, s16
 8006490:	4621      	mov	r1, r4
 8006492:	f000 fa59 	bl	8006948 <_Bfree>
 8006496:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006498:	2300      	movs	r3, #0
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	2750      	movs	r7, #80	; 0x50
 800649e:	e70c      	b.n	80062ba <__gethex+0x12a>
 80064a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f2      	bne.n	800648c <__gethex+0x2fc>
 80064a6:	e7d8      	b.n	800645a <__gethex+0x2ca>
 80064a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1d5      	bne.n	800645a <__gethex+0x2ca>
 80064ae:	e7ed      	b.n	800648c <__gethex+0x2fc>
 80064b0:	1e6f      	subs	r7, r5, #1
 80064b2:	f1ba 0f00 	cmp.w	sl, #0
 80064b6:	d131      	bne.n	800651c <__gethex+0x38c>
 80064b8:	b127      	cbz	r7, 80064c4 <__gethex+0x334>
 80064ba:	4639      	mov	r1, r7
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 fea3 	bl	8007208 <__any_on>
 80064c2:	4682      	mov	sl, r0
 80064c4:	117b      	asrs	r3, r7, #5
 80064c6:	2101      	movs	r1, #1
 80064c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80064cc:	f007 071f 	and.w	r7, r7, #31
 80064d0:	fa01 f707 	lsl.w	r7, r1, r7
 80064d4:	421f      	tst	r7, r3
 80064d6:	4629      	mov	r1, r5
 80064d8:	4620      	mov	r0, r4
 80064da:	bf18      	it	ne
 80064dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80064e0:	1b76      	subs	r6, r6, r5
 80064e2:	f7ff fdee 	bl	80060c2 <rshift>
 80064e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80064ea:	2702      	movs	r7, #2
 80064ec:	f1ba 0f00 	cmp.w	sl, #0
 80064f0:	d048      	beq.n	8006584 <__gethex+0x3f4>
 80064f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d015      	beq.n	8006526 <__gethex+0x396>
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d017      	beq.n	800652e <__gethex+0x39e>
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d109      	bne.n	8006516 <__gethex+0x386>
 8006502:	f01a 0f02 	tst.w	sl, #2
 8006506:	d006      	beq.n	8006516 <__gethex+0x386>
 8006508:	f8d9 0000 	ldr.w	r0, [r9]
 800650c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006510:	f01a 0f01 	tst.w	sl, #1
 8006514:	d10e      	bne.n	8006534 <__gethex+0x3a4>
 8006516:	f047 0710 	orr.w	r7, r7, #16
 800651a:	e033      	b.n	8006584 <__gethex+0x3f4>
 800651c:	f04f 0a01 	mov.w	sl, #1
 8006520:	e7d0      	b.n	80064c4 <__gethex+0x334>
 8006522:	2701      	movs	r7, #1
 8006524:	e7e2      	b.n	80064ec <__gethex+0x35c>
 8006526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006528:	f1c3 0301 	rsb	r3, r3, #1
 800652c:	9315      	str	r3, [sp, #84]	; 0x54
 800652e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0f0      	beq.n	8006516 <__gethex+0x386>
 8006534:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006538:	f104 0314 	add.w	r3, r4, #20
 800653c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006540:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006544:	f04f 0c00 	mov.w	ip, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f853 2b04 	ldr.w	r2, [r3], #4
 800654e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006552:	d01c      	beq.n	800658e <__gethex+0x3fe>
 8006554:	3201      	adds	r2, #1
 8006556:	6002      	str	r2, [r0, #0]
 8006558:	2f02      	cmp	r7, #2
 800655a:	f104 0314 	add.w	r3, r4, #20
 800655e:	d13f      	bne.n	80065e0 <__gethex+0x450>
 8006560:	f8d8 2000 	ldr.w	r2, [r8]
 8006564:	3a01      	subs	r2, #1
 8006566:	42b2      	cmp	r2, r6
 8006568:	d10a      	bne.n	8006580 <__gethex+0x3f0>
 800656a:	1171      	asrs	r1, r6, #5
 800656c:	2201      	movs	r2, #1
 800656e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006572:	f006 061f 	and.w	r6, r6, #31
 8006576:	fa02 f606 	lsl.w	r6, r2, r6
 800657a:	421e      	tst	r6, r3
 800657c:	bf18      	it	ne
 800657e:	4617      	movne	r7, r2
 8006580:	f047 0720 	orr.w	r7, r7, #32
 8006584:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006586:	601c      	str	r4, [r3, #0]
 8006588:	9b04      	ldr	r3, [sp, #16]
 800658a:	601d      	str	r5, [r3, #0]
 800658c:	e695      	b.n	80062ba <__gethex+0x12a>
 800658e:	4299      	cmp	r1, r3
 8006590:	f843 cc04 	str.w	ip, [r3, #-4]
 8006594:	d8d8      	bhi.n	8006548 <__gethex+0x3b8>
 8006596:	68a3      	ldr	r3, [r4, #8]
 8006598:	459b      	cmp	fp, r3
 800659a:	db19      	blt.n	80065d0 <__gethex+0x440>
 800659c:	6861      	ldr	r1, [r4, #4]
 800659e:	ee18 0a10 	vmov	r0, s16
 80065a2:	3101      	adds	r1, #1
 80065a4:	f000 f990 	bl	80068c8 <_Balloc>
 80065a8:	4681      	mov	r9, r0
 80065aa:	b918      	cbnz	r0, 80065b4 <__gethex+0x424>
 80065ac:	4b1a      	ldr	r3, [pc, #104]	; (8006618 <__gethex+0x488>)
 80065ae:	4602      	mov	r2, r0
 80065b0:	2184      	movs	r1, #132	; 0x84
 80065b2:	e6a8      	b.n	8006306 <__gethex+0x176>
 80065b4:	6922      	ldr	r2, [r4, #16]
 80065b6:	3202      	adds	r2, #2
 80065b8:	f104 010c 	add.w	r1, r4, #12
 80065bc:	0092      	lsls	r2, r2, #2
 80065be:	300c      	adds	r0, #12
 80065c0:	f000 f974 	bl	80068ac <memcpy>
 80065c4:	4621      	mov	r1, r4
 80065c6:	ee18 0a10 	vmov	r0, s16
 80065ca:	f000 f9bd 	bl	8006948 <_Bfree>
 80065ce:	464c      	mov	r4, r9
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065d8:	6122      	str	r2, [r4, #16]
 80065da:	2201      	movs	r2, #1
 80065dc:	615a      	str	r2, [r3, #20]
 80065de:	e7bb      	b.n	8006558 <__gethex+0x3c8>
 80065e0:	6922      	ldr	r2, [r4, #16]
 80065e2:	455a      	cmp	r2, fp
 80065e4:	dd0b      	ble.n	80065fe <__gethex+0x46e>
 80065e6:	2101      	movs	r1, #1
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7ff fd6a 	bl	80060c2 <rshift>
 80065ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065f2:	3501      	adds	r5, #1
 80065f4:	42ab      	cmp	r3, r5
 80065f6:	f6ff aed0 	blt.w	800639a <__gethex+0x20a>
 80065fa:	2701      	movs	r7, #1
 80065fc:	e7c0      	b.n	8006580 <__gethex+0x3f0>
 80065fe:	f016 061f 	ands.w	r6, r6, #31
 8006602:	d0fa      	beq.n	80065fa <__gethex+0x46a>
 8006604:	4453      	add	r3, sl
 8006606:	f1c6 0620 	rsb	r6, r6, #32
 800660a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800660e:	f000 fa4d 	bl	8006aac <__hi0bits>
 8006612:	42b0      	cmp	r0, r6
 8006614:	dbe7      	blt.n	80065e6 <__gethex+0x456>
 8006616:	e7f0      	b.n	80065fa <__gethex+0x46a>
 8006618:	08007fb8 	.word	0x08007fb8

0800661c <L_shift>:
 800661c:	f1c2 0208 	rsb	r2, r2, #8
 8006620:	0092      	lsls	r2, r2, #2
 8006622:	b570      	push	{r4, r5, r6, lr}
 8006624:	f1c2 0620 	rsb	r6, r2, #32
 8006628:	6843      	ldr	r3, [r0, #4]
 800662a:	6804      	ldr	r4, [r0, #0]
 800662c:	fa03 f506 	lsl.w	r5, r3, r6
 8006630:	432c      	orrs	r4, r5
 8006632:	40d3      	lsrs	r3, r2
 8006634:	6004      	str	r4, [r0, #0]
 8006636:	f840 3f04 	str.w	r3, [r0, #4]!
 800663a:	4288      	cmp	r0, r1
 800663c:	d3f4      	bcc.n	8006628 <L_shift+0xc>
 800663e:	bd70      	pop	{r4, r5, r6, pc}

08006640 <__match>:
 8006640:	b530      	push	{r4, r5, lr}
 8006642:	6803      	ldr	r3, [r0, #0]
 8006644:	3301      	adds	r3, #1
 8006646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800664a:	b914      	cbnz	r4, 8006652 <__match+0x12>
 800664c:	6003      	str	r3, [r0, #0]
 800664e:	2001      	movs	r0, #1
 8006650:	bd30      	pop	{r4, r5, pc}
 8006652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006656:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800665a:	2d19      	cmp	r5, #25
 800665c:	bf98      	it	ls
 800665e:	3220      	addls	r2, #32
 8006660:	42a2      	cmp	r2, r4
 8006662:	d0f0      	beq.n	8006646 <__match+0x6>
 8006664:	2000      	movs	r0, #0
 8006666:	e7f3      	b.n	8006650 <__match+0x10>

08006668 <__hexnan>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	680b      	ldr	r3, [r1, #0]
 800666e:	115e      	asrs	r6, r3, #5
 8006670:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006674:	f013 031f 	ands.w	r3, r3, #31
 8006678:	b087      	sub	sp, #28
 800667a:	bf18      	it	ne
 800667c:	3604      	addne	r6, #4
 800667e:	2500      	movs	r5, #0
 8006680:	1f37      	subs	r7, r6, #4
 8006682:	4690      	mov	r8, r2
 8006684:	6802      	ldr	r2, [r0, #0]
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	4682      	mov	sl, r0
 800668a:	f846 5c04 	str.w	r5, [r6, #-4]
 800668e:	46b9      	mov	r9, r7
 8006690:	463c      	mov	r4, r7
 8006692:	9502      	str	r5, [sp, #8]
 8006694:	46ab      	mov	fp, r5
 8006696:	7851      	ldrb	r1, [r2, #1]
 8006698:	1c53      	adds	r3, r2, #1
 800669a:	9303      	str	r3, [sp, #12]
 800669c:	b341      	cbz	r1, 80066f0 <__hexnan+0x88>
 800669e:	4608      	mov	r0, r1
 80066a0:	9205      	str	r2, [sp, #20]
 80066a2:	9104      	str	r1, [sp, #16]
 80066a4:	f7ff fd5f 	bl	8006166 <__hexdig_fun>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d14f      	bne.n	800674c <__hexnan+0xe4>
 80066ac:	9904      	ldr	r1, [sp, #16]
 80066ae:	9a05      	ldr	r2, [sp, #20]
 80066b0:	2920      	cmp	r1, #32
 80066b2:	d818      	bhi.n	80066e6 <__hexnan+0x7e>
 80066b4:	9b02      	ldr	r3, [sp, #8]
 80066b6:	459b      	cmp	fp, r3
 80066b8:	dd13      	ble.n	80066e2 <__hexnan+0x7a>
 80066ba:	454c      	cmp	r4, r9
 80066bc:	d206      	bcs.n	80066cc <__hexnan+0x64>
 80066be:	2d07      	cmp	r5, #7
 80066c0:	dc04      	bgt.n	80066cc <__hexnan+0x64>
 80066c2:	462a      	mov	r2, r5
 80066c4:	4649      	mov	r1, r9
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7ff ffa8 	bl	800661c <L_shift>
 80066cc:	4544      	cmp	r4, r8
 80066ce:	d950      	bls.n	8006772 <__hexnan+0x10a>
 80066d0:	2300      	movs	r3, #0
 80066d2:	f1a4 0904 	sub.w	r9, r4, #4
 80066d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80066da:	f8cd b008 	str.w	fp, [sp, #8]
 80066de:	464c      	mov	r4, r9
 80066e0:	461d      	mov	r5, r3
 80066e2:	9a03      	ldr	r2, [sp, #12]
 80066e4:	e7d7      	b.n	8006696 <__hexnan+0x2e>
 80066e6:	2929      	cmp	r1, #41	; 0x29
 80066e8:	d156      	bne.n	8006798 <__hexnan+0x130>
 80066ea:	3202      	adds	r2, #2
 80066ec:	f8ca 2000 	str.w	r2, [sl]
 80066f0:	f1bb 0f00 	cmp.w	fp, #0
 80066f4:	d050      	beq.n	8006798 <__hexnan+0x130>
 80066f6:	454c      	cmp	r4, r9
 80066f8:	d206      	bcs.n	8006708 <__hexnan+0xa0>
 80066fa:	2d07      	cmp	r5, #7
 80066fc:	dc04      	bgt.n	8006708 <__hexnan+0xa0>
 80066fe:	462a      	mov	r2, r5
 8006700:	4649      	mov	r1, r9
 8006702:	4620      	mov	r0, r4
 8006704:	f7ff ff8a 	bl	800661c <L_shift>
 8006708:	4544      	cmp	r4, r8
 800670a:	d934      	bls.n	8006776 <__hexnan+0x10e>
 800670c:	f1a8 0204 	sub.w	r2, r8, #4
 8006710:	4623      	mov	r3, r4
 8006712:	f853 1b04 	ldr.w	r1, [r3], #4
 8006716:	f842 1f04 	str.w	r1, [r2, #4]!
 800671a:	429f      	cmp	r7, r3
 800671c:	d2f9      	bcs.n	8006712 <__hexnan+0xaa>
 800671e:	1b3b      	subs	r3, r7, r4
 8006720:	f023 0303 	bic.w	r3, r3, #3
 8006724:	3304      	adds	r3, #4
 8006726:	3401      	adds	r4, #1
 8006728:	3e03      	subs	r6, #3
 800672a:	42b4      	cmp	r4, r6
 800672c:	bf88      	it	hi
 800672e:	2304      	movhi	r3, #4
 8006730:	4443      	add	r3, r8
 8006732:	2200      	movs	r2, #0
 8006734:	f843 2b04 	str.w	r2, [r3], #4
 8006738:	429f      	cmp	r7, r3
 800673a:	d2fb      	bcs.n	8006734 <__hexnan+0xcc>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	b91b      	cbnz	r3, 8006748 <__hexnan+0xe0>
 8006740:	4547      	cmp	r7, r8
 8006742:	d127      	bne.n	8006794 <__hexnan+0x12c>
 8006744:	2301      	movs	r3, #1
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	2005      	movs	r0, #5
 800674a:	e026      	b.n	800679a <__hexnan+0x132>
 800674c:	3501      	adds	r5, #1
 800674e:	2d08      	cmp	r5, #8
 8006750:	f10b 0b01 	add.w	fp, fp, #1
 8006754:	dd06      	ble.n	8006764 <__hexnan+0xfc>
 8006756:	4544      	cmp	r4, r8
 8006758:	d9c3      	bls.n	80066e2 <__hexnan+0x7a>
 800675a:	2300      	movs	r3, #0
 800675c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006760:	2501      	movs	r5, #1
 8006762:	3c04      	subs	r4, #4
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	f000 000f 	and.w	r0, r0, #15
 800676a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800676e:	6022      	str	r2, [r4, #0]
 8006770:	e7b7      	b.n	80066e2 <__hexnan+0x7a>
 8006772:	2508      	movs	r5, #8
 8006774:	e7b5      	b.n	80066e2 <__hexnan+0x7a>
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0df      	beq.n	800673c <__hexnan+0xd4>
 800677c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006780:	f1c3 0320 	rsb	r3, r3, #32
 8006784:	fa22 f303 	lsr.w	r3, r2, r3
 8006788:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800678c:	401a      	ands	r2, r3
 800678e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006792:	e7d3      	b.n	800673c <__hexnan+0xd4>
 8006794:	3f04      	subs	r7, #4
 8006796:	e7d1      	b.n	800673c <__hexnan+0xd4>
 8006798:	2004      	movs	r0, #4
 800679a:	b007      	add	sp, #28
 800679c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067a0 <_localeconv_r>:
 80067a0:	4800      	ldr	r0, [pc, #0]	; (80067a4 <_localeconv_r+0x4>)
 80067a2:	4770      	bx	lr
 80067a4:	20000164 	.word	0x20000164

080067a8 <__retarget_lock_init_recursive>:
 80067a8:	4770      	bx	lr

080067aa <__retarget_lock_acquire_recursive>:
 80067aa:	4770      	bx	lr

080067ac <__retarget_lock_release_recursive>:
 80067ac:	4770      	bx	lr

080067ae <__swhatbuf_r>:
 80067ae:	b570      	push	{r4, r5, r6, lr}
 80067b0:	460e      	mov	r6, r1
 80067b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b6:	2900      	cmp	r1, #0
 80067b8:	b096      	sub	sp, #88	; 0x58
 80067ba:	4614      	mov	r4, r2
 80067bc:	461d      	mov	r5, r3
 80067be:	da08      	bge.n	80067d2 <__swhatbuf_r+0x24>
 80067c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	602a      	str	r2, [r5, #0]
 80067c8:	061a      	lsls	r2, r3, #24
 80067ca:	d410      	bmi.n	80067ee <__swhatbuf_r+0x40>
 80067cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067d0:	e00e      	b.n	80067f0 <__swhatbuf_r+0x42>
 80067d2:	466a      	mov	r2, sp
 80067d4:	f001 f9b6 	bl	8007b44 <_fstat_r>
 80067d8:	2800      	cmp	r0, #0
 80067da:	dbf1      	blt.n	80067c0 <__swhatbuf_r+0x12>
 80067dc:	9a01      	ldr	r2, [sp, #4]
 80067de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067e6:	425a      	negs	r2, r3
 80067e8:	415a      	adcs	r2, r3
 80067ea:	602a      	str	r2, [r5, #0]
 80067ec:	e7ee      	b.n	80067cc <__swhatbuf_r+0x1e>
 80067ee:	2340      	movs	r3, #64	; 0x40
 80067f0:	2000      	movs	r0, #0
 80067f2:	6023      	str	r3, [r4, #0]
 80067f4:	b016      	add	sp, #88	; 0x58
 80067f6:	bd70      	pop	{r4, r5, r6, pc}

080067f8 <__smakebuf_r>:
 80067f8:	898b      	ldrh	r3, [r1, #12]
 80067fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067fc:	079d      	lsls	r5, r3, #30
 80067fe:	4606      	mov	r6, r0
 8006800:	460c      	mov	r4, r1
 8006802:	d507      	bpl.n	8006814 <__smakebuf_r+0x1c>
 8006804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	2301      	movs	r3, #1
 800680e:	6163      	str	r3, [r4, #20]
 8006810:	b002      	add	sp, #8
 8006812:	bd70      	pop	{r4, r5, r6, pc}
 8006814:	ab01      	add	r3, sp, #4
 8006816:	466a      	mov	r2, sp
 8006818:	f7ff ffc9 	bl	80067ae <__swhatbuf_r>
 800681c:	9900      	ldr	r1, [sp, #0]
 800681e:	4605      	mov	r5, r0
 8006820:	4630      	mov	r0, r6
 8006822:	f000 fd95 	bl	8007350 <_malloc_r>
 8006826:	b948      	cbnz	r0, 800683c <__smakebuf_r+0x44>
 8006828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800682c:	059a      	lsls	r2, r3, #22
 800682e:	d4ef      	bmi.n	8006810 <__smakebuf_r+0x18>
 8006830:	f023 0303 	bic.w	r3, r3, #3
 8006834:	f043 0302 	orr.w	r3, r3, #2
 8006838:	81a3      	strh	r3, [r4, #12]
 800683a:	e7e3      	b.n	8006804 <__smakebuf_r+0xc>
 800683c:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <__smakebuf_r+0x7c>)
 800683e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	6020      	str	r0, [r4, #0]
 8006844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006848:	81a3      	strh	r3, [r4, #12]
 800684a:	9b00      	ldr	r3, [sp, #0]
 800684c:	6163      	str	r3, [r4, #20]
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	6120      	str	r0, [r4, #16]
 8006852:	b15b      	cbz	r3, 800686c <__smakebuf_r+0x74>
 8006854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006858:	4630      	mov	r0, r6
 800685a:	f001 f985 	bl	8007b68 <_isatty_r>
 800685e:	b128      	cbz	r0, 800686c <__smakebuf_r+0x74>
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	81a3      	strh	r3, [r4, #12]
 800686c:	89a0      	ldrh	r0, [r4, #12]
 800686e:	4305      	orrs	r5, r0
 8006870:	81a5      	strh	r5, [r4, #12]
 8006872:	e7cd      	b.n	8006810 <__smakebuf_r+0x18>
 8006874:	08005f21 	.word	0x08005f21

08006878 <malloc>:
 8006878:	4b02      	ldr	r3, [pc, #8]	; (8006884 <malloc+0xc>)
 800687a:	4601      	mov	r1, r0
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	f000 bd67 	b.w	8007350 <_malloc_r>
 8006882:	bf00      	nop
 8006884:	2000000c 	.word	0x2000000c

08006888 <__ascii_mbtowc>:
 8006888:	b082      	sub	sp, #8
 800688a:	b901      	cbnz	r1, 800688e <__ascii_mbtowc+0x6>
 800688c:	a901      	add	r1, sp, #4
 800688e:	b142      	cbz	r2, 80068a2 <__ascii_mbtowc+0x1a>
 8006890:	b14b      	cbz	r3, 80068a6 <__ascii_mbtowc+0x1e>
 8006892:	7813      	ldrb	r3, [r2, #0]
 8006894:	600b      	str	r3, [r1, #0]
 8006896:	7812      	ldrb	r2, [r2, #0]
 8006898:	1e10      	subs	r0, r2, #0
 800689a:	bf18      	it	ne
 800689c:	2001      	movne	r0, #1
 800689e:	b002      	add	sp, #8
 80068a0:	4770      	bx	lr
 80068a2:	4610      	mov	r0, r2
 80068a4:	e7fb      	b.n	800689e <__ascii_mbtowc+0x16>
 80068a6:	f06f 0001 	mvn.w	r0, #1
 80068aa:	e7f8      	b.n	800689e <__ascii_mbtowc+0x16>

080068ac <memcpy>:
 80068ac:	440a      	add	r2, r1
 80068ae:	4291      	cmp	r1, r2
 80068b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80068b4:	d100      	bne.n	80068b8 <memcpy+0xc>
 80068b6:	4770      	bx	lr
 80068b8:	b510      	push	{r4, lr}
 80068ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068c2:	4291      	cmp	r1, r2
 80068c4:	d1f9      	bne.n	80068ba <memcpy+0xe>
 80068c6:	bd10      	pop	{r4, pc}

080068c8 <_Balloc>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068cc:	4604      	mov	r4, r0
 80068ce:	460d      	mov	r5, r1
 80068d0:	b976      	cbnz	r6, 80068f0 <_Balloc+0x28>
 80068d2:	2010      	movs	r0, #16
 80068d4:	f7ff ffd0 	bl	8006878 <malloc>
 80068d8:	4602      	mov	r2, r0
 80068da:	6260      	str	r0, [r4, #36]	; 0x24
 80068dc:	b920      	cbnz	r0, 80068e8 <_Balloc+0x20>
 80068de:	4b18      	ldr	r3, [pc, #96]	; (8006940 <_Balloc+0x78>)
 80068e0:	4818      	ldr	r0, [pc, #96]	; (8006944 <_Balloc+0x7c>)
 80068e2:	2166      	movs	r1, #102	; 0x66
 80068e4:	f001 f8ee 	bl	8007ac4 <__assert_func>
 80068e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068ec:	6006      	str	r6, [r0, #0]
 80068ee:	60c6      	str	r6, [r0, #12]
 80068f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068f2:	68f3      	ldr	r3, [r6, #12]
 80068f4:	b183      	cbz	r3, 8006918 <_Balloc+0x50>
 80068f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068fe:	b9b8      	cbnz	r0, 8006930 <_Balloc+0x68>
 8006900:	2101      	movs	r1, #1
 8006902:	fa01 f605 	lsl.w	r6, r1, r5
 8006906:	1d72      	adds	r2, r6, #5
 8006908:	0092      	lsls	r2, r2, #2
 800690a:	4620      	mov	r0, r4
 800690c:	f000 fc9d 	bl	800724a <_calloc_r>
 8006910:	b160      	cbz	r0, 800692c <_Balloc+0x64>
 8006912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006916:	e00e      	b.n	8006936 <_Balloc+0x6e>
 8006918:	2221      	movs	r2, #33	; 0x21
 800691a:	2104      	movs	r1, #4
 800691c:	4620      	mov	r0, r4
 800691e:	f000 fc94 	bl	800724a <_calloc_r>
 8006922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006924:	60f0      	str	r0, [r6, #12]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e4      	bne.n	80068f6 <_Balloc+0x2e>
 800692c:	2000      	movs	r0, #0
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	6802      	ldr	r2, [r0, #0]
 8006932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006936:	2300      	movs	r3, #0
 8006938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800693c:	e7f7      	b.n	800692e <_Balloc+0x66>
 800693e:	bf00      	nop
 8006940:	08007f46 	.word	0x08007f46
 8006944:	080080a8 	.word	0x080080a8

08006948 <_Bfree>:
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800694c:	4605      	mov	r5, r0
 800694e:	460c      	mov	r4, r1
 8006950:	b976      	cbnz	r6, 8006970 <_Bfree+0x28>
 8006952:	2010      	movs	r0, #16
 8006954:	f7ff ff90 	bl	8006878 <malloc>
 8006958:	4602      	mov	r2, r0
 800695a:	6268      	str	r0, [r5, #36]	; 0x24
 800695c:	b920      	cbnz	r0, 8006968 <_Bfree+0x20>
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <_Bfree+0x3c>)
 8006960:	4809      	ldr	r0, [pc, #36]	; (8006988 <_Bfree+0x40>)
 8006962:	218a      	movs	r1, #138	; 0x8a
 8006964:	f001 f8ae 	bl	8007ac4 <__assert_func>
 8006968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800696c:	6006      	str	r6, [r0, #0]
 800696e:	60c6      	str	r6, [r0, #12]
 8006970:	b13c      	cbz	r4, 8006982 <_Bfree+0x3a>
 8006972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006974:	6862      	ldr	r2, [r4, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800697c:	6021      	str	r1, [r4, #0]
 800697e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006982:	bd70      	pop	{r4, r5, r6, pc}
 8006984:	08007f46 	.word	0x08007f46
 8006988:	080080a8 	.word	0x080080a8

0800698c <__multadd>:
 800698c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006990:	690d      	ldr	r5, [r1, #16]
 8006992:	4607      	mov	r7, r0
 8006994:	460c      	mov	r4, r1
 8006996:	461e      	mov	r6, r3
 8006998:	f101 0c14 	add.w	ip, r1, #20
 800699c:	2000      	movs	r0, #0
 800699e:	f8dc 3000 	ldr.w	r3, [ip]
 80069a2:	b299      	uxth	r1, r3
 80069a4:	fb02 6101 	mla	r1, r2, r1, r6
 80069a8:	0c1e      	lsrs	r6, r3, #16
 80069aa:	0c0b      	lsrs	r3, r1, #16
 80069ac:	fb02 3306 	mla	r3, r2, r6, r3
 80069b0:	b289      	uxth	r1, r1
 80069b2:	3001      	adds	r0, #1
 80069b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069b8:	4285      	cmp	r5, r0
 80069ba:	f84c 1b04 	str.w	r1, [ip], #4
 80069be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069c2:	dcec      	bgt.n	800699e <__multadd+0x12>
 80069c4:	b30e      	cbz	r6, 8006a0a <__multadd+0x7e>
 80069c6:	68a3      	ldr	r3, [r4, #8]
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	dc19      	bgt.n	8006a00 <__multadd+0x74>
 80069cc:	6861      	ldr	r1, [r4, #4]
 80069ce:	4638      	mov	r0, r7
 80069d0:	3101      	adds	r1, #1
 80069d2:	f7ff ff79 	bl	80068c8 <_Balloc>
 80069d6:	4680      	mov	r8, r0
 80069d8:	b928      	cbnz	r0, 80069e6 <__multadd+0x5a>
 80069da:	4602      	mov	r2, r0
 80069dc:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <__multadd+0x84>)
 80069de:	480d      	ldr	r0, [pc, #52]	; (8006a14 <__multadd+0x88>)
 80069e0:	21b5      	movs	r1, #181	; 0xb5
 80069e2:	f001 f86f 	bl	8007ac4 <__assert_func>
 80069e6:	6922      	ldr	r2, [r4, #16]
 80069e8:	3202      	adds	r2, #2
 80069ea:	f104 010c 	add.w	r1, r4, #12
 80069ee:	0092      	lsls	r2, r2, #2
 80069f0:	300c      	adds	r0, #12
 80069f2:	f7ff ff5b 	bl	80068ac <memcpy>
 80069f6:	4621      	mov	r1, r4
 80069f8:	4638      	mov	r0, r7
 80069fa:	f7ff ffa5 	bl	8006948 <_Bfree>
 80069fe:	4644      	mov	r4, r8
 8006a00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a04:	3501      	adds	r5, #1
 8006a06:	615e      	str	r6, [r3, #20]
 8006a08:	6125      	str	r5, [r4, #16]
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a10:	08007fb8 	.word	0x08007fb8
 8006a14:	080080a8 	.word	0x080080a8

08006a18 <__s2b>:
 8006a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	4615      	mov	r5, r2
 8006a20:	461f      	mov	r7, r3
 8006a22:	2209      	movs	r2, #9
 8006a24:	3308      	adds	r3, #8
 8006a26:	4606      	mov	r6, r0
 8006a28:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	2201      	movs	r2, #1
 8006a30:	429a      	cmp	r2, r3
 8006a32:	db09      	blt.n	8006a48 <__s2b+0x30>
 8006a34:	4630      	mov	r0, r6
 8006a36:	f7ff ff47 	bl	80068c8 <_Balloc>
 8006a3a:	b940      	cbnz	r0, 8006a4e <__s2b+0x36>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	4b19      	ldr	r3, [pc, #100]	; (8006aa4 <__s2b+0x8c>)
 8006a40:	4819      	ldr	r0, [pc, #100]	; (8006aa8 <__s2b+0x90>)
 8006a42:	21ce      	movs	r1, #206	; 0xce
 8006a44:	f001 f83e 	bl	8007ac4 <__assert_func>
 8006a48:	0052      	lsls	r2, r2, #1
 8006a4a:	3101      	adds	r1, #1
 8006a4c:	e7f0      	b.n	8006a30 <__s2b+0x18>
 8006a4e:	9b08      	ldr	r3, [sp, #32]
 8006a50:	6143      	str	r3, [r0, #20]
 8006a52:	2d09      	cmp	r5, #9
 8006a54:	f04f 0301 	mov.w	r3, #1
 8006a58:	6103      	str	r3, [r0, #16]
 8006a5a:	dd16      	ble.n	8006a8a <__s2b+0x72>
 8006a5c:	f104 0909 	add.w	r9, r4, #9
 8006a60:	46c8      	mov	r8, r9
 8006a62:	442c      	add	r4, r5
 8006a64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006a68:	4601      	mov	r1, r0
 8006a6a:	3b30      	subs	r3, #48	; 0x30
 8006a6c:	220a      	movs	r2, #10
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f7ff ff8c 	bl	800698c <__multadd>
 8006a74:	45a0      	cmp	r8, r4
 8006a76:	d1f5      	bne.n	8006a64 <__s2b+0x4c>
 8006a78:	f1a5 0408 	sub.w	r4, r5, #8
 8006a7c:	444c      	add	r4, r9
 8006a7e:	1b2d      	subs	r5, r5, r4
 8006a80:	1963      	adds	r3, r4, r5
 8006a82:	42bb      	cmp	r3, r7
 8006a84:	db04      	blt.n	8006a90 <__s2b+0x78>
 8006a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a8a:	340a      	adds	r4, #10
 8006a8c:	2509      	movs	r5, #9
 8006a8e:	e7f6      	b.n	8006a7e <__s2b+0x66>
 8006a90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a94:	4601      	mov	r1, r0
 8006a96:	3b30      	subs	r3, #48	; 0x30
 8006a98:	220a      	movs	r2, #10
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7ff ff76 	bl	800698c <__multadd>
 8006aa0:	e7ee      	b.n	8006a80 <__s2b+0x68>
 8006aa2:	bf00      	nop
 8006aa4:	08007fb8 	.word	0x08007fb8
 8006aa8:	080080a8 	.word	0x080080a8

08006aac <__hi0bits>:
 8006aac:	0c03      	lsrs	r3, r0, #16
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	b9d3      	cbnz	r3, 8006ae8 <__hi0bits+0x3c>
 8006ab2:	0400      	lsls	r0, r0, #16
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006aba:	bf04      	itt	eq
 8006abc:	0200      	lsleq	r0, r0, #8
 8006abe:	3308      	addeq	r3, #8
 8006ac0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ac4:	bf04      	itt	eq
 8006ac6:	0100      	lsleq	r0, r0, #4
 8006ac8:	3304      	addeq	r3, #4
 8006aca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ace:	bf04      	itt	eq
 8006ad0:	0080      	lsleq	r0, r0, #2
 8006ad2:	3302      	addeq	r3, #2
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	db05      	blt.n	8006ae4 <__hi0bits+0x38>
 8006ad8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006adc:	f103 0301 	add.w	r3, r3, #1
 8006ae0:	bf08      	it	eq
 8006ae2:	2320      	moveq	r3, #32
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	4770      	bx	lr
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e7e4      	b.n	8006ab6 <__hi0bits+0xa>

08006aec <__lo0bits>:
 8006aec:	6803      	ldr	r3, [r0, #0]
 8006aee:	f013 0207 	ands.w	r2, r3, #7
 8006af2:	4601      	mov	r1, r0
 8006af4:	d00b      	beq.n	8006b0e <__lo0bits+0x22>
 8006af6:	07da      	lsls	r2, r3, #31
 8006af8:	d423      	bmi.n	8006b42 <__lo0bits+0x56>
 8006afa:	0798      	lsls	r0, r3, #30
 8006afc:	bf49      	itett	mi
 8006afe:	085b      	lsrmi	r3, r3, #1
 8006b00:	089b      	lsrpl	r3, r3, #2
 8006b02:	2001      	movmi	r0, #1
 8006b04:	600b      	strmi	r3, [r1, #0]
 8006b06:	bf5c      	itt	pl
 8006b08:	600b      	strpl	r3, [r1, #0]
 8006b0a:	2002      	movpl	r0, #2
 8006b0c:	4770      	bx	lr
 8006b0e:	b298      	uxth	r0, r3
 8006b10:	b9a8      	cbnz	r0, 8006b3e <__lo0bits+0x52>
 8006b12:	0c1b      	lsrs	r3, r3, #16
 8006b14:	2010      	movs	r0, #16
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	b90a      	cbnz	r2, 8006b1e <__lo0bits+0x32>
 8006b1a:	3008      	adds	r0, #8
 8006b1c:	0a1b      	lsrs	r3, r3, #8
 8006b1e:	071a      	lsls	r2, r3, #28
 8006b20:	bf04      	itt	eq
 8006b22:	091b      	lsreq	r3, r3, #4
 8006b24:	3004      	addeq	r0, #4
 8006b26:	079a      	lsls	r2, r3, #30
 8006b28:	bf04      	itt	eq
 8006b2a:	089b      	lsreq	r3, r3, #2
 8006b2c:	3002      	addeq	r0, #2
 8006b2e:	07da      	lsls	r2, r3, #31
 8006b30:	d403      	bmi.n	8006b3a <__lo0bits+0x4e>
 8006b32:	085b      	lsrs	r3, r3, #1
 8006b34:	f100 0001 	add.w	r0, r0, #1
 8006b38:	d005      	beq.n	8006b46 <__lo0bits+0x5a>
 8006b3a:	600b      	str	r3, [r1, #0]
 8006b3c:	4770      	bx	lr
 8006b3e:	4610      	mov	r0, r2
 8006b40:	e7e9      	b.n	8006b16 <__lo0bits+0x2a>
 8006b42:	2000      	movs	r0, #0
 8006b44:	4770      	bx	lr
 8006b46:	2020      	movs	r0, #32
 8006b48:	4770      	bx	lr
	...

08006b4c <__i2b>:
 8006b4c:	b510      	push	{r4, lr}
 8006b4e:	460c      	mov	r4, r1
 8006b50:	2101      	movs	r1, #1
 8006b52:	f7ff feb9 	bl	80068c8 <_Balloc>
 8006b56:	4602      	mov	r2, r0
 8006b58:	b928      	cbnz	r0, 8006b66 <__i2b+0x1a>
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <__i2b+0x24>)
 8006b5c:	4805      	ldr	r0, [pc, #20]	; (8006b74 <__i2b+0x28>)
 8006b5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b62:	f000 ffaf 	bl	8007ac4 <__assert_func>
 8006b66:	2301      	movs	r3, #1
 8006b68:	6144      	str	r4, [r0, #20]
 8006b6a:	6103      	str	r3, [r0, #16]
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	bf00      	nop
 8006b70:	08007fb8 	.word	0x08007fb8
 8006b74:	080080a8 	.word	0x080080a8

08006b78 <__multiply>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	4691      	mov	r9, r2
 8006b7e:	690a      	ldr	r2, [r1, #16]
 8006b80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	bfb8      	it	lt
 8006b88:	460b      	movlt	r3, r1
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	bfbc      	itt	lt
 8006b8e:	464c      	movlt	r4, r9
 8006b90:	4699      	movlt	r9, r3
 8006b92:	6927      	ldr	r7, [r4, #16]
 8006b94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b98:	68a3      	ldr	r3, [r4, #8]
 8006b9a:	6861      	ldr	r1, [r4, #4]
 8006b9c:	eb07 060a 	add.w	r6, r7, sl
 8006ba0:	42b3      	cmp	r3, r6
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	bfb8      	it	lt
 8006ba6:	3101      	addlt	r1, #1
 8006ba8:	f7ff fe8e 	bl	80068c8 <_Balloc>
 8006bac:	b930      	cbnz	r0, 8006bbc <__multiply+0x44>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	4b44      	ldr	r3, [pc, #272]	; (8006cc4 <__multiply+0x14c>)
 8006bb2:	4845      	ldr	r0, [pc, #276]	; (8006cc8 <__multiply+0x150>)
 8006bb4:	f240 115d 	movw	r1, #349	; 0x15d
 8006bb8:	f000 ff84 	bl	8007ac4 <__assert_func>
 8006bbc:	f100 0514 	add.w	r5, r0, #20
 8006bc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006bc4:	462b      	mov	r3, r5
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4543      	cmp	r3, r8
 8006bca:	d321      	bcc.n	8006c10 <__multiply+0x98>
 8006bcc:	f104 0314 	add.w	r3, r4, #20
 8006bd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006bd4:	f109 0314 	add.w	r3, r9, #20
 8006bd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006bdc:	9202      	str	r2, [sp, #8]
 8006bde:	1b3a      	subs	r2, r7, r4
 8006be0:	3a15      	subs	r2, #21
 8006be2:	f022 0203 	bic.w	r2, r2, #3
 8006be6:	3204      	adds	r2, #4
 8006be8:	f104 0115 	add.w	r1, r4, #21
 8006bec:	428f      	cmp	r7, r1
 8006bee:	bf38      	it	cc
 8006bf0:	2204      	movcc	r2, #4
 8006bf2:	9201      	str	r2, [sp, #4]
 8006bf4:	9a02      	ldr	r2, [sp, #8]
 8006bf6:	9303      	str	r3, [sp, #12]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d80c      	bhi.n	8006c16 <__multiply+0x9e>
 8006bfc:	2e00      	cmp	r6, #0
 8006bfe:	dd03      	ble.n	8006c08 <__multiply+0x90>
 8006c00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d05a      	beq.n	8006cbe <__multiply+0x146>
 8006c08:	6106      	str	r6, [r0, #16]
 8006c0a:	b005      	add	sp, #20
 8006c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c10:	f843 2b04 	str.w	r2, [r3], #4
 8006c14:	e7d8      	b.n	8006bc8 <__multiply+0x50>
 8006c16:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c1a:	f1ba 0f00 	cmp.w	sl, #0
 8006c1e:	d024      	beq.n	8006c6a <__multiply+0xf2>
 8006c20:	f104 0e14 	add.w	lr, r4, #20
 8006c24:	46a9      	mov	r9, r5
 8006c26:	f04f 0c00 	mov.w	ip, #0
 8006c2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c2e:	f8d9 1000 	ldr.w	r1, [r9]
 8006c32:	fa1f fb82 	uxth.w	fp, r2
 8006c36:	b289      	uxth	r1, r1
 8006c38:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c40:	f8d9 2000 	ldr.w	r2, [r9]
 8006c44:	4461      	add	r1, ip
 8006c46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006c4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c52:	b289      	uxth	r1, r1
 8006c54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c58:	4577      	cmp	r7, lr
 8006c5a:	f849 1b04 	str.w	r1, [r9], #4
 8006c5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c62:	d8e2      	bhi.n	8006c2a <__multiply+0xb2>
 8006c64:	9a01      	ldr	r2, [sp, #4]
 8006c66:	f845 c002 	str.w	ip, [r5, r2]
 8006c6a:	9a03      	ldr	r2, [sp, #12]
 8006c6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c70:	3304      	adds	r3, #4
 8006c72:	f1b9 0f00 	cmp.w	r9, #0
 8006c76:	d020      	beq.n	8006cba <__multiply+0x142>
 8006c78:	6829      	ldr	r1, [r5, #0]
 8006c7a:	f104 0c14 	add.w	ip, r4, #20
 8006c7e:	46ae      	mov	lr, r5
 8006c80:	f04f 0a00 	mov.w	sl, #0
 8006c84:	f8bc b000 	ldrh.w	fp, [ip]
 8006c88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c8c:	fb09 220b 	mla	r2, r9, fp, r2
 8006c90:	4492      	add	sl, r2
 8006c92:	b289      	uxth	r1, r1
 8006c94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006c98:	f84e 1b04 	str.w	r1, [lr], #4
 8006c9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ca0:	f8be 1000 	ldrh.w	r1, [lr]
 8006ca4:	0c12      	lsrs	r2, r2, #16
 8006ca6:	fb09 1102 	mla	r1, r9, r2, r1
 8006caa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006cae:	4567      	cmp	r7, ip
 8006cb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006cb4:	d8e6      	bhi.n	8006c84 <__multiply+0x10c>
 8006cb6:	9a01      	ldr	r2, [sp, #4]
 8006cb8:	50a9      	str	r1, [r5, r2]
 8006cba:	3504      	adds	r5, #4
 8006cbc:	e79a      	b.n	8006bf4 <__multiply+0x7c>
 8006cbe:	3e01      	subs	r6, #1
 8006cc0:	e79c      	b.n	8006bfc <__multiply+0x84>
 8006cc2:	bf00      	nop
 8006cc4:	08007fb8 	.word	0x08007fb8
 8006cc8:	080080a8 	.word	0x080080a8

08006ccc <__pow5mult>:
 8006ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cd0:	4615      	mov	r5, r2
 8006cd2:	f012 0203 	ands.w	r2, r2, #3
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	460f      	mov	r7, r1
 8006cda:	d007      	beq.n	8006cec <__pow5mult+0x20>
 8006cdc:	4c25      	ldr	r4, [pc, #148]	; (8006d74 <__pow5mult+0xa8>)
 8006cde:	3a01      	subs	r2, #1
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ce6:	f7ff fe51 	bl	800698c <__multadd>
 8006cea:	4607      	mov	r7, r0
 8006cec:	10ad      	asrs	r5, r5, #2
 8006cee:	d03d      	beq.n	8006d6c <__pow5mult+0xa0>
 8006cf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006cf2:	b97c      	cbnz	r4, 8006d14 <__pow5mult+0x48>
 8006cf4:	2010      	movs	r0, #16
 8006cf6:	f7ff fdbf 	bl	8006878 <malloc>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	6270      	str	r0, [r6, #36]	; 0x24
 8006cfe:	b928      	cbnz	r0, 8006d0c <__pow5mult+0x40>
 8006d00:	4b1d      	ldr	r3, [pc, #116]	; (8006d78 <__pow5mult+0xac>)
 8006d02:	481e      	ldr	r0, [pc, #120]	; (8006d7c <__pow5mult+0xb0>)
 8006d04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d08:	f000 fedc 	bl	8007ac4 <__assert_func>
 8006d0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d10:	6004      	str	r4, [r0, #0]
 8006d12:	60c4      	str	r4, [r0, #12]
 8006d14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d1c:	b94c      	cbnz	r4, 8006d32 <__pow5mult+0x66>
 8006d1e:	f240 2171 	movw	r1, #625	; 0x271
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7ff ff12 	bl	8006b4c <__i2b>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d2e:	4604      	mov	r4, r0
 8006d30:	6003      	str	r3, [r0, #0]
 8006d32:	f04f 0900 	mov.w	r9, #0
 8006d36:	07eb      	lsls	r3, r5, #31
 8006d38:	d50a      	bpl.n	8006d50 <__pow5mult+0x84>
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f7ff ff1a 	bl	8006b78 <__multiply>
 8006d44:	4639      	mov	r1, r7
 8006d46:	4680      	mov	r8, r0
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f7ff fdfd 	bl	8006948 <_Bfree>
 8006d4e:	4647      	mov	r7, r8
 8006d50:	106d      	asrs	r5, r5, #1
 8006d52:	d00b      	beq.n	8006d6c <__pow5mult+0xa0>
 8006d54:	6820      	ldr	r0, [r4, #0]
 8006d56:	b938      	cbnz	r0, 8006d68 <__pow5mult+0x9c>
 8006d58:	4622      	mov	r2, r4
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f7ff ff0b 	bl	8006b78 <__multiply>
 8006d62:	6020      	str	r0, [r4, #0]
 8006d64:	f8c0 9000 	str.w	r9, [r0]
 8006d68:	4604      	mov	r4, r0
 8006d6a:	e7e4      	b.n	8006d36 <__pow5mult+0x6a>
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d72:	bf00      	nop
 8006d74:	080081f8 	.word	0x080081f8
 8006d78:	08007f46 	.word	0x08007f46
 8006d7c:	080080a8 	.word	0x080080a8

08006d80 <__lshift>:
 8006d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	460c      	mov	r4, r1
 8006d86:	6849      	ldr	r1, [r1, #4]
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d8e:	68a3      	ldr	r3, [r4, #8]
 8006d90:	4607      	mov	r7, r0
 8006d92:	4691      	mov	r9, r2
 8006d94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d98:	f108 0601 	add.w	r6, r8, #1
 8006d9c:	42b3      	cmp	r3, r6
 8006d9e:	db0b      	blt.n	8006db8 <__lshift+0x38>
 8006da0:	4638      	mov	r0, r7
 8006da2:	f7ff fd91 	bl	80068c8 <_Balloc>
 8006da6:	4605      	mov	r5, r0
 8006da8:	b948      	cbnz	r0, 8006dbe <__lshift+0x3e>
 8006daa:	4602      	mov	r2, r0
 8006dac:	4b2a      	ldr	r3, [pc, #168]	; (8006e58 <__lshift+0xd8>)
 8006dae:	482b      	ldr	r0, [pc, #172]	; (8006e5c <__lshift+0xdc>)
 8006db0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006db4:	f000 fe86 	bl	8007ac4 <__assert_func>
 8006db8:	3101      	adds	r1, #1
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	e7ee      	b.n	8006d9c <__lshift+0x1c>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f100 0114 	add.w	r1, r0, #20
 8006dc4:	f100 0210 	add.w	r2, r0, #16
 8006dc8:	4618      	mov	r0, r3
 8006dca:	4553      	cmp	r3, sl
 8006dcc:	db37      	blt.n	8006e3e <__lshift+0xbe>
 8006dce:	6920      	ldr	r0, [r4, #16]
 8006dd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006dd4:	f104 0314 	add.w	r3, r4, #20
 8006dd8:	f019 091f 	ands.w	r9, r9, #31
 8006ddc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006de0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006de4:	d02f      	beq.n	8006e46 <__lshift+0xc6>
 8006de6:	f1c9 0e20 	rsb	lr, r9, #32
 8006dea:	468a      	mov	sl, r1
 8006dec:	f04f 0c00 	mov.w	ip, #0
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	fa02 f209 	lsl.w	r2, r2, r9
 8006df6:	ea42 020c 	orr.w	r2, r2, ip
 8006dfa:	f84a 2b04 	str.w	r2, [sl], #4
 8006dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e02:	4298      	cmp	r0, r3
 8006e04:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e08:	d8f2      	bhi.n	8006df0 <__lshift+0x70>
 8006e0a:	1b03      	subs	r3, r0, r4
 8006e0c:	3b15      	subs	r3, #21
 8006e0e:	f023 0303 	bic.w	r3, r3, #3
 8006e12:	3304      	adds	r3, #4
 8006e14:	f104 0215 	add.w	r2, r4, #21
 8006e18:	4290      	cmp	r0, r2
 8006e1a:	bf38      	it	cc
 8006e1c:	2304      	movcc	r3, #4
 8006e1e:	f841 c003 	str.w	ip, [r1, r3]
 8006e22:	f1bc 0f00 	cmp.w	ip, #0
 8006e26:	d001      	beq.n	8006e2c <__lshift+0xac>
 8006e28:	f108 0602 	add.w	r6, r8, #2
 8006e2c:	3e01      	subs	r6, #1
 8006e2e:	4638      	mov	r0, r7
 8006e30:	612e      	str	r6, [r5, #16]
 8006e32:	4621      	mov	r1, r4
 8006e34:	f7ff fd88 	bl	8006948 <_Bfree>
 8006e38:	4628      	mov	r0, r5
 8006e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e42:	3301      	adds	r3, #1
 8006e44:	e7c1      	b.n	8006dca <__lshift+0x4a>
 8006e46:	3904      	subs	r1, #4
 8006e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e50:	4298      	cmp	r0, r3
 8006e52:	d8f9      	bhi.n	8006e48 <__lshift+0xc8>
 8006e54:	e7ea      	b.n	8006e2c <__lshift+0xac>
 8006e56:	bf00      	nop
 8006e58:	08007fb8 	.word	0x08007fb8
 8006e5c:	080080a8 	.word	0x080080a8

08006e60 <__mcmp>:
 8006e60:	b530      	push	{r4, r5, lr}
 8006e62:	6902      	ldr	r2, [r0, #16]
 8006e64:	690c      	ldr	r4, [r1, #16]
 8006e66:	1b12      	subs	r2, r2, r4
 8006e68:	d10e      	bne.n	8006e88 <__mcmp+0x28>
 8006e6a:	f100 0314 	add.w	r3, r0, #20
 8006e6e:	3114      	adds	r1, #20
 8006e70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e80:	42a5      	cmp	r5, r4
 8006e82:	d003      	beq.n	8006e8c <__mcmp+0x2c>
 8006e84:	d305      	bcc.n	8006e92 <__mcmp+0x32>
 8006e86:	2201      	movs	r2, #1
 8006e88:	4610      	mov	r0, r2
 8006e8a:	bd30      	pop	{r4, r5, pc}
 8006e8c:	4283      	cmp	r3, r0
 8006e8e:	d3f3      	bcc.n	8006e78 <__mcmp+0x18>
 8006e90:	e7fa      	b.n	8006e88 <__mcmp+0x28>
 8006e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e96:	e7f7      	b.n	8006e88 <__mcmp+0x28>

08006e98 <__mdiff>:
 8006e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	4690      	mov	r8, r2
 8006ea6:	f7ff ffdb 	bl	8006e60 <__mcmp>
 8006eaa:	1e05      	subs	r5, r0, #0
 8006eac:	d110      	bne.n	8006ed0 <__mdiff+0x38>
 8006eae:	4629      	mov	r1, r5
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f7ff fd09 	bl	80068c8 <_Balloc>
 8006eb6:	b930      	cbnz	r0, 8006ec6 <__mdiff+0x2e>
 8006eb8:	4b3a      	ldr	r3, [pc, #232]	; (8006fa4 <__mdiff+0x10c>)
 8006eba:	4602      	mov	r2, r0
 8006ebc:	f240 2132 	movw	r1, #562	; 0x232
 8006ec0:	4839      	ldr	r0, [pc, #228]	; (8006fa8 <__mdiff+0x110>)
 8006ec2:	f000 fdff 	bl	8007ac4 <__assert_func>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed0:	bfa4      	itt	ge
 8006ed2:	4643      	movge	r3, r8
 8006ed4:	46a0      	movge	r8, r4
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006edc:	bfa6      	itte	ge
 8006ede:	461c      	movge	r4, r3
 8006ee0:	2500      	movge	r5, #0
 8006ee2:	2501      	movlt	r5, #1
 8006ee4:	f7ff fcf0 	bl	80068c8 <_Balloc>
 8006ee8:	b920      	cbnz	r0, 8006ef4 <__mdiff+0x5c>
 8006eea:	4b2e      	ldr	r3, [pc, #184]	; (8006fa4 <__mdiff+0x10c>)
 8006eec:	4602      	mov	r2, r0
 8006eee:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ef2:	e7e5      	b.n	8006ec0 <__mdiff+0x28>
 8006ef4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ef8:	6926      	ldr	r6, [r4, #16]
 8006efa:	60c5      	str	r5, [r0, #12]
 8006efc:	f104 0914 	add.w	r9, r4, #20
 8006f00:	f108 0514 	add.w	r5, r8, #20
 8006f04:	f100 0e14 	add.w	lr, r0, #20
 8006f08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f10:	f108 0210 	add.w	r2, r8, #16
 8006f14:	46f2      	mov	sl, lr
 8006f16:	2100      	movs	r1, #0
 8006f18:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f20:	fa1f f883 	uxth.w	r8, r3
 8006f24:	fa11 f18b 	uxtah	r1, r1, fp
 8006f28:	0c1b      	lsrs	r3, r3, #16
 8006f2a:	eba1 0808 	sub.w	r8, r1, r8
 8006f2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f36:	fa1f f888 	uxth.w	r8, r8
 8006f3a:	1419      	asrs	r1, r3, #16
 8006f3c:	454e      	cmp	r6, r9
 8006f3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f42:	f84a 3b04 	str.w	r3, [sl], #4
 8006f46:	d8e7      	bhi.n	8006f18 <__mdiff+0x80>
 8006f48:	1b33      	subs	r3, r6, r4
 8006f4a:	3b15      	subs	r3, #21
 8006f4c:	f023 0303 	bic.w	r3, r3, #3
 8006f50:	3304      	adds	r3, #4
 8006f52:	3415      	adds	r4, #21
 8006f54:	42a6      	cmp	r6, r4
 8006f56:	bf38      	it	cc
 8006f58:	2304      	movcc	r3, #4
 8006f5a:	441d      	add	r5, r3
 8006f5c:	4473      	add	r3, lr
 8006f5e:	469e      	mov	lr, r3
 8006f60:	462e      	mov	r6, r5
 8006f62:	4566      	cmp	r6, ip
 8006f64:	d30e      	bcc.n	8006f84 <__mdiff+0xec>
 8006f66:	f10c 0203 	add.w	r2, ip, #3
 8006f6a:	1b52      	subs	r2, r2, r5
 8006f6c:	f022 0203 	bic.w	r2, r2, #3
 8006f70:	3d03      	subs	r5, #3
 8006f72:	45ac      	cmp	ip, r5
 8006f74:	bf38      	it	cc
 8006f76:	2200      	movcc	r2, #0
 8006f78:	441a      	add	r2, r3
 8006f7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f7e:	b17b      	cbz	r3, 8006fa0 <__mdiff+0x108>
 8006f80:	6107      	str	r7, [r0, #16]
 8006f82:	e7a3      	b.n	8006ecc <__mdiff+0x34>
 8006f84:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f88:	fa11 f288 	uxtah	r2, r1, r8
 8006f8c:	1414      	asrs	r4, r2, #16
 8006f8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f92:	b292      	uxth	r2, r2
 8006f94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f98:	f84e 2b04 	str.w	r2, [lr], #4
 8006f9c:	1421      	asrs	r1, r4, #16
 8006f9e:	e7e0      	b.n	8006f62 <__mdiff+0xca>
 8006fa0:	3f01      	subs	r7, #1
 8006fa2:	e7ea      	b.n	8006f7a <__mdiff+0xe2>
 8006fa4:	08007fb8 	.word	0x08007fb8
 8006fa8:	080080a8 	.word	0x080080a8

08006fac <__ulp>:
 8006fac:	b082      	sub	sp, #8
 8006fae:	ed8d 0b00 	vstr	d0, [sp]
 8006fb2:	9b01      	ldr	r3, [sp, #4]
 8006fb4:	4912      	ldr	r1, [pc, #72]	; (8007000 <__ulp+0x54>)
 8006fb6:	4019      	ands	r1, r3
 8006fb8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	dd05      	ble.n	8006fcc <__ulp+0x20>
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	ec43 2b10 	vmov	d0, r2, r3
 8006fc8:	b002      	add	sp, #8
 8006fca:	4770      	bx	lr
 8006fcc:	4249      	negs	r1, r1
 8006fce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006fd2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	da04      	bge.n	8006fea <__ulp+0x3e>
 8006fe0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006fe4:	fa41 f300 	asr.w	r3, r1, r0
 8006fe8:	e7ec      	b.n	8006fc4 <__ulp+0x18>
 8006fea:	f1a0 0114 	sub.w	r1, r0, #20
 8006fee:	291e      	cmp	r1, #30
 8006ff0:	bfda      	itte	le
 8006ff2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006ff6:	fa20 f101 	lsrle.w	r1, r0, r1
 8006ffa:	2101      	movgt	r1, #1
 8006ffc:	460a      	mov	r2, r1
 8006ffe:	e7e1      	b.n	8006fc4 <__ulp+0x18>
 8007000:	7ff00000 	.word	0x7ff00000

08007004 <__b2d>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	6905      	ldr	r5, [r0, #16]
 8007008:	f100 0714 	add.w	r7, r0, #20
 800700c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007010:	1f2e      	subs	r6, r5, #4
 8007012:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007016:	4620      	mov	r0, r4
 8007018:	f7ff fd48 	bl	8006aac <__hi0bits>
 800701c:	f1c0 0320 	rsb	r3, r0, #32
 8007020:	280a      	cmp	r0, #10
 8007022:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80070a0 <__b2d+0x9c>
 8007026:	600b      	str	r3, [r1, #0]
 8007028:	dc14      	bgt.n	8007054 <__b2d+0x50>
 800702a:	f1c0 0e0b 	rsb	lr, r0, #11
 800702e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007032:	42b7      	cmp	r7, r6
 8007034:	ea41 030c 	orr.w	r3, r1, ip
 8007038:	bf34      	ite	cc
 800703a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800703e:	2100      	movcs	r1, #0
 8007040:	3015      	adds	r0, #21
 8007042:	fa04 f000 	lsl.w	r0, r4, r0
 8007046:	fa21 f10e 	lsr.w	r1, r1, lr
 800704a:	ea40 0201 	orr.w	r2, r0, r1
 800704e:	ec43 2b10 	vmov	d0, r2, r3
 8007052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007054:	42b7      	cmp	r7, r6
 8007056:	bf3a      	itte	cc
 8007058:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800705c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007060:	2100      	movcs	r1, #0
 8007062:	380b      	subs	r0, #11
 8007064:	d017      	beq.n	8007096 <__b2d+0x92>
 8007066:	f1c0 0c20 	rsb	ip, r0, #32
 800706a:	fa04 f500 	lsl.w	r5, r4, r0
 800706e:	42be      	cmp	r6, r7
 8007070:	fa21 f40c 	lsr.w	r4, r1, ip
 8007074:	ea45 0504 	orr.w	r5, r5, r4
 8007078:	bf8c      	ite	hi
 800707a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800707e:	2400      	movls	r4, #0
 8007080:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007084:	fa01 f000 	lsl.w	r0, r1, r0
 8007088:	fa24 f40c 	lsr.w	r4, r4, ip
 800708c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007090:	ea40 0204 	orr.w	r2, r0, r4
 8007094:	e7db      	b.n	800704e <__b2d+0x4a>
 8007096:	ea44 030c 	orr.w	r3, r4, ip
 800709a:	460a      	mov	r2, r1
 800709c:	e7d7      	b.n	800704e <__b2d+0x4a>
 800709e:	bf00      	nop
 80070a0:	3ff00000 	.word	0x3ff00000

080070a4 <__d2b>:
 80070a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070a8:	4689      	mov	r9, r1
 80070aa:	2101      	movs	r1, #1
 80070ac:	ec57 6b10 	vmov	r6, r7, d0
 80070b0:	4690      	mov	r8, r2
 80070b2:	f7ff fc09 	bl	80068c8 <_Balloc>
 80070b6:	4604      	mov	r4, r0
 80070b8:	b930      	cbnz	r0, 80070c8 <__d2b+0x24>
 80070ba:	4602      	mov	r2, r0
 80070bc:	4b25      	ldr	r3, [pc, #148]	; (8007154 <__d2b+0xb0>)
 80070be:	4826      	ldr	r0, [pc, #152]	; (8007158 <__d2b+0xb4>)
 80070c0:	f240 310a 	movw	r1, #778	; 0x30a
 80070c4:	f000 fcfe 	bl	8007ac4 <__assert_func>
 80070c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80070cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070d0:	bb35      	cbnz	r5, 8007120 <__d2b+0x7c>
 80070d2:	2e00      	cmp	r6, #0
 80070d4:	9301      	str	r3, [sp, #4]
 80070d6:	d028      	beq.n	800712a <__d2b+0x86>
 80070d8:	4668      	mov	r0, sp
 80070da:	9600      	str	r6, [sp, #0]
 80070dc:	f7ff fd06 	bl	8006aec <__lo0bits>
 80070e0:	9900      	ldr	r1, [sp, #0]
 80070e2:	b300      	cbz	r0, 8007126 <__d2b+0x82>
 80070e4:	9a01      	ldr	r2, [sp, #4]
 80070e6:	f1c0 0320 	rsb	r3, r0, #32
 80070ea:	fa02 f303 	lsl.w	r3, r2, r3
 80070ee:	430b      	orrs	r3, r1
 80070f0:	40c2      	lsrs	r2, r0
 80070f2:	6163      	str	r3, [r4, #20]
 80070f4:	9201      	str	r2, [sp, #4]
 80070f6:	9b01      	ldr	r3, [sp, #4]
 80070f8:	61a3      	str	r3, [r4, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	bf14      	ite	ne
 80070fe:	2202      	movne	r2, #2
 8007100:	2201      	moveq	r2, #1
 8007102:	6122      	str	r2, [r4, #16]
 8007104:	b1d5      	cbz	r5, 800713c <__d2b+0x98>
 8007106:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800710a:	4405      	add	r5, r0
 800710c:	f8c9 5000 	str.w	r5, [r9]
 8007110:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007114:	f8c8 0000 	str.w	r0, [r8]
 8007118:	4620      	mov	r0, r4
 800711a:	b003      	add	sp, #12
 800711c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007124:	e7d5      	b.n	80070d2 <__d2b+0x2e>
 8007126:	6161      	str	r1, [r4, #20]
 8007128:	e7e5      	b.n	80070f6 <__d2b+0x52>
 800712a:	a801      	add	r0, sp, #4
 800712c:	f7ff fcde 	bl	8006aec <__lo0bits>
 8007130:	9b01      	ldr	r3, [sp, #4]
 8007132:	6163      	str	r3, [r4, #20]
 8007134:	2201      	movs	r2, #1
 8007136:	6122      	str	r2, [r4, #16]
 8007138:	3020      	adds	r0, #32
 800713a:	e7e3      	b.n	8007104 <__d2b+0x60>
 800713c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007140:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007144:	f8c9 0000 	str.w	r0, [r9]
 8007148:	6918      	ldr	r0, [r3, #16]
 800714a:	f7ff fcaf 	bl	8006aac <__hi0bits>
 800714e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007152:	e7df      	b.n	8007114 <__d2b+0x70>
 8007154:	08007fb8 	.word	0x08007fb8
 8007158:	080080a8 	.word	0x080080a8

0800715c <__ratio>:
 800715c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007160:	4688      	mov	r8, r1
 8007162:	4669      	mov	r1, sp
 8007164:	4681      	mov	r9, r0
 8007166:	f7ff ff4d 	bl	8007004 <__b2d>
 800716a:	a901      	add	r1, sp, #4
 800716c:	4640      	mov	r0, r8
 800716e:	ec55 4b10 	vmov	r4, r5, d0
 8007172:	f7ff ff47 	bl	8007004 <__b2d>
 8007176:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800717a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800717e:	eba3 0c02 	sub.w	ip, r3, r2
 8007182:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007186:	1a9b      	subs	r3, r3, r2
 8007188:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800718c:	ec51 0b10 	vmov	r0, r1, d0
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfd6      	itet	le
 8007194:	460a      	movle	r2, r1
 8007196:	462a      	movgt	r2, r5
 8007198:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800719c:	468b      	mov	fp, r1
 800719e:	462f      	mov	r7, r5
 80071a0:	bfd4      	ite	le
 80071a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80071a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80071aa:	4620      	mov	r0, r4
 80071ac:	ee10 2a10 	vmov	r2, s0
 80071b0:	465b      	mov	r3, fp
 80071b2:	4639      	mov	r1, r7
 80071b4:	f7f9 fb4a 	bl	800084c <__aeabi_ddiv>
 80071b8:	ec41 0b10 	vmov	d0, r0, r1
 80071bc:	b003      	add	sp, #12
 80071be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071c2 <__copybits>:
 80071c2:	3901      	subs	r1, #1
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	1149      	asrs	r1, r1, #5
 80071c8:	6914      	ldr	r4, [r2, #16]
 80071ca:	3101      	adds	r1, #1
 80071cc:	f102 0314 	add.w	r3, r2, #20
 80071d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80071d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80071d8:	1f05      	subs	r5, r0, #4
 80071da:	42a3      	cmp	r3, r4
 80071dc:	d30c      	bcc.n	80071f8 <__copybits+0x36>
 80071de:	1aa3      	subs	r3, r4, r2
 80071e0:	3b11      	subs	r3, #17
 80071e2:	f023 0303 	bic.w	r3, r3, #3
 80071e6:	3211      	adds	r2, #17
 80071e8:	42a2      	cmp	r2, r4
 80071ea:	bf88      	it	hi
 80071ec:	2300      	movhi	r3, #0
 80071ee:	4418      	add	r0, r3
 80071f0:	2300      	movs	r3, #0
 80071f2:	4288      	cmp	r0, r1
 80071f4:	d305      	bcc.n	8007202 <__copybits+0x40>
 80071f6:	bd70      	pop	{r4, r5, r6, pc}
 80071f8:	f853 6b04 	ldr.w	r6, [r3], #4
 80071fc:	f845 6f04 	str.w	r6, [r5, #4]!
 8007200:	e7eb      	b.n	80071da <__copybits+0x18>
 8007202:	f840 3b04 	str.w	r3, [r0], #4
 8007206:	e7f4      	b.n	80071f2 <__copybits+0x30>

08007208 <__any_on>:
 8007208:	f100 0214 	add.w	r2, r0, #20
 800720c:	6900      	ldr	r0, [r0, #16]
 800720e:	114b      	asrs	r3, r1, #5
 8007210:	4298      	cmp	r0, r3
 8007212:	b510      	push	{r4, lr}
 8007214:	db11      	blt.n	800723a <__any_on+0x32>
 8007216:	dd0a      	ble.n	800722e <__any_on+0x26>
 8007218:	f011 011f 	ands.w	r1, r1, #31
 800721c:	d007      	beq.n	800722e <__any_on+0x26>
 800721e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007222:	fa24 f001 	lsr.w	r0, r4, r1
 8007226:	fa00 f101 	lsl.w	r1, r0, r1
 800722a:	428c      	cmp	r4, r1
 800722c:	d10b      	bne.n	8007246 <__any_on+0x3e>
 800722e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007232:	4293      	cmp	r3, r2
 8007234:	d803      	bhi.n	800723e <__any_on+0x36>
 8007236:	2000      	movs	r0, #0
 8007238:	bd10      	pop	{r4, pc}
 800723a:	4603      	mov	r3, r0
 800723c:	e7f7      	b.n	800722e <__any_on+0x26>
 800723e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007242:	2900      	cmp	r1, #0
 8007244:	d0f5      	beq.n	8007232 <__any_on+0x2a>
 8007246:	2001      	movs	r0, #1
 8007248:	e7f6      	b.n	8007238 <__any_on+0x30>

0800724a <_calloc_r>:
 800724a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800724c:	fba1 2402 	umull	r2, r4, r1, r2
 8007250:	b94c      	cbnz	r4, 8007266 <_calloc_r+0x1c>
 8007252:	4611      	mov	r1, r2
 8007254:	9201      	str	r2, [sp, #4]
 8007256:	f000 f87b 	bl	8007350 <_malloc_r>
 800725a:	9a01      	ldr	r2, [sp, #4]
 800725c:	4605      	mov	r5, r0
 800725e:	b930      	cbnz	r0, 800726e <_calloc_r+0x24>
 8007260:	4628      	mov	r0, r5
 8007262:	b003      	add	sp, #12
 8007264:	bd30      	pop	{r4, r5, pc}
 8007266:	220c      	movs	r2, #12
 8007268:	6002      	str	r2, [r0, #0]
 800726a:	2500      	movs	r5, #0
 800726c:	e7f8      	b.n	8007260 <_calloc_r+0x16>
 800726e:	4621      	mov	r1, r4
 8007270:	f7fc f854 	bl	800331c <memset>
 8007274:	e7f4      	b.n	8007260 <_calloc_r+0x16>
	...

08007278 <_free_r>:
 8007278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800727a:	2900      	cmp	r1, #0
 800727c:	d044      	beq.n	8007308 <_free_r+0x90>
 800727e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007282:	9001      	str	r0, [sp, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	f1a1 0404 	sub.w	r4, r1, #4
 800728a:	bfb8      	it	lt
 800728c:	18e4      	addlt	r4, r4, r3
 800728e:	f000 fca7 	bl	8007be0 <__malloc_lock>
 8007292:	4a1e      	ldr	r2, [pc, #120]	; (800730c <_free_r+0x94>)
 8007294:	9801      	ldr	r0, [sp, #4]
 8007296:	6813      	ldr	r3, [r2, #0]
 8007298:	b933      	cbnz	r3, 80072a8 <_free_r+0x30>
 800729a:	6063      	str	r3, [r4, #4]
 800729c:	6014      	str	r4, [r2, #0]
 800729e:	b003      	add	sp, #12
 80072a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072a4:	f000 bca2 	b.w	8007bec <__malloc_unlock>
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	d908      	bls.n	80072be <_free_r+0x46>
 80072ac:	6825      	ldr	r5, [r4, #0]
 80072ae:	1961      	adds	r1, r4, r5
 80072b0:	428b      	cmp	r3, r1
 80072b2:	bf01      	itttt	eq
 80072b4:	6819      	ldreq	r1, [r3, #0]
 80072b6:	685b      	ldreq	r3, [r3, #4]
 80072b8:	1949      	addeq	r1, r1, r5
 80072ba:	6021      	streq	r1, [r4, #0]
 80072bc:	e7ed      	b.n	800729a <_free_r+0x22>
 80072be:	461a      	mov	r2, r3
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	b10b      	cbz	r3, 80072c8 <_free_r+0x50>
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	d9fa      	bls.n	80072be <_free_r+0x46>
 80072c8:	6811      	ldr	r1, [r2, #0]
 80072ca:	1855      	adds	r5, r2, r1
 80072cc:	42a5      	cmp	r5, r4
 80072ce:	d10b      	bne.n	80072e8 <_free_r+0x70>
 80072d0:	6824      	ldr	r4, [r4, #0]
 80072d2:	4421      	add	r1, r4
 80072d4:	1854      	adds	r4, r2, r1
 80072d6:	42a3      	cmp	r3, r4
 80072d8:	6011      	str	r1, [r2, #0]
 80072da:	d1e0      	bne.n	800729e <_free_r+0x26>
 80072dc:	681c      	ldr	r4, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	6053      	str	r3, [r2, #4]
 80072e2:	4421      	add	r1, r4
 80072e4:	6011      	str	r1, [r2, #0]
 80072e6:	e7da      	b.n	800729e <_free_r+0x26>
 80072e8:	d902      	bls.n	80072f0 <_free_r+0x78>
 80072ea:	230c      	movs	r3, #12
 80072ec:	6003      	str	r3, [r0, #0]
 80072ee:	e7d6      	b.n	800729e <_free_r+0x26>
 80072f0:	6825      	ldr	r5, [r4, #0]
 80072f2:	1961      	adds	r1, r4, r5
 80072f4:	428b      	cmp	r3, r1
 80072f6:	bf04      	itt	eq
 80072f8:	6819      	ldreq	r1, [r3, #0]
 80072fa:	685b      	ldreq	r3, [r3, #4]
 80072fc:	6063      	str	r3, [r4, #4]
 80072fe:	bf04      	itt	eq
 8007300:	1949      	addeq	r1, r1, r5
 8007302:	6021      	streq	r1, [r4, #0]
 8007304:	6054      	str	r4, [r2, #4]
 8007306:	e7ca      	b.n	800729e <_free_r+0x26>
 8007308:	b003      	add	sp, #12
 800730a:	bd30      	pop	{r4, r5, pc}
 800730c:	20000290 	.word	0x20000290

08007310 <sbrk_aligned>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	4e0e      	ldr	r6, [pc, #56]	; (800734c <sbrk_aligned+0x3c>)
 8007314:	460c      	mov	r4, r1
 8007316:	6831      	ldr	r1, [r6, #0]
 8007318:	4605      	mov	r5, r0
 800731a:	b911      	cbnz	r1, 8007322 <sbrk_aligned+0x12>
 800731c:	f000 fb4c 	bl	80079b8 <_sbrk_r>
 8007320:	6030      	str	r0, [r6, #0]
 8007322:	4621      	mov	r1, r4
 8007324:	4628      	mov	r0, r5
 8007326:	f000 fb47 	bl	80079b8 <_sbrk_r>
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	d00a      	beq.n	8007344 <sbrk_aligned+0x34>
 800732e:	1cc4      	adds	r4, r0, #3
 8007330:	f024 0403 	bic.w	r4, r4, #3
 8007334:	42a0      	cmp	r0, r4
 8007336:	d007      	beq.n	8007348 <sbrk_aligned+0x38>
 8007338:	1a21      	subs	r1, r4, r0
 800733a:	4628      	mov	r0, r5
 800733c:	f000 fb3c 	bl	80079b8 <_sbrk_r>
 8007340:	3001      	adds	r0, #1
 8007342:	d101      	bne.n	8007348 <sbrk_aligned+0x38>
 8007344:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007348:	4620      	mov	r0, r4
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	20000294 	.word	0x20000294

08007350 <_malloc_r>:
 8007350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007354:	1ccd      	adds	r5, r1, #3
 8007356:	f025 0503 	bic.w	r5, r5, #3
 800735a:	3508      	adds	r5, #8
 800735c:	2d0c      	cmp	r5, #12
 800735e:	bf38      	it	cc
 8007360:	250c      	movcc	r5, #12
 8007362:	2d00      	cmp	r5, #0
 8007364:	4607      	mov	r7, r0
 8007366:	db01      	blt.n	800736c <_malloc_r+0x1c>
 8007368:	42a9      	cmp	r1, r5
 800736a:	d905      	bls.n	8007378 <_malloc_r+0x28>
 800736c:	230c      	movs	r3, #12
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	2600      	movs	r6, #0
 8007372:	4630      	mov	r0, r6
 8007374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007378:	4e2e      	ldr	r6, [pc, #184]	; (8007434 <_malloc_r+0xe4>)
 800737a:	f000 fc31 	bl	8007be0 <__malloc_lock>
 800737e:	6833      	ldr	r3, [r6, #0]
 8007380:	461c      	mov	r4, r3
 8007382:	bb34      	cbnz	r4, 80073d2 <_malloc_r+0x82>
 8007384:	4629      	mov	r1, r5
 8007386:	4638      	mov	r0, r7
 8007388:	f7ff ffc2 	bl	8007310 <sbrk_aligned>
 800738c:	1c43      	adds	r3, r0, #1
 800738e:	4604      	mov	r4, r0
 8007390:	d14d      	bne.n	800742e <_malloc_r+0xde>
 8007392:	6834      	ldr	r4, [r6, #0]
 8007394:	4626      	mov	r6, r4
 8007396:	2e00      	cmp	r6, #0
 8007398:	d140      	bne.n	800741c <_malloc_r+0xcc>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	4631      	mov	r1, r6
 800739e:	4638      	mov	r0, r7
 80073a0:	eb04 0803 	add.w	r8, r4, r3
 80073a4:	f000 fb08 	bl	80079b8 <_sbrk_r>
 80073a8:	4580      	cmp	r8, r0
 80073aa:	d13a      	bne.n	8007422 <_malloc_r+0xd2>
 80073ac:	6821      	ldr	r1, [r4, #0]
 80073ae:	3503      	adds	r5, #3
 80073b0:	1a6d      	subs	r5, r5, r1
 80073b2:	f025 0503 	bic.w	r5, r5, #3
 80073b6:	3508      	adds	r5, #8
 80073b8:	2d0c      	cmp	r5, #12
 80073ba:	bf38      	it	cc
 80073bc:	250c      	movcc	r5, #12
 80073be:	4629      	mov	r1, r5
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff ffa5 	bl	8007310 <sbrk_aligned>
 80073c6:	3001      	adds	r0, #1
 80073c8:	d02b      	beq.n	8007422 <_malloc_r+0xd2>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	442b      	add	r3, r5
 80073ce:	6023      	str	r3, [r4, #0]
 80073d0:	e00e      	b.n	80073f0 <_malloc_r+0xa0>
 80073d2:	6822      	ldr	r2, [r4, #0]
 80073d4:	1b52      	subs	r2, r2, r5
 80073d6:	d41e      	bmi.n	8007416 <_malloc_r+0xc6>
 80073d8:	2a0b      	cmp	r2, #11
 80073da:	d916      	bls.n	800740a <_malloc_r+0xba>
 80073dc:	1961      	adds	r1, r4, r5
 80073de:	42a3      	cmp	r3, r4
 80073e0:	6025      	str	r5, [r4, #0]
 80073e2:	bf18      	it	ne
 80073e4:	6059      	strne	r1, [r3, #4]
 80073e6:	6863      	ldr	r3, [r4, #4]
 80073e8:	bf08      	it	eq
 80073ea:	6031      	streq	r1, [r6, #0]
 80073ec:	5162      	str	r2, [r4, r5]
 80073ee:	604b      	str	r3, [r1, #4]
 80073f0:	4638      	mov	r0, r7
 80073f2:	f104 060b 	add.w	r6, r4, #11
 80073f6:	f000 fbf9 	bl	8007bec <__malloc_unlock>
 80073fa:	f026 0607 	bic.w	r6, r6, #7
 80073fe:	1d23      	adds	r3, r4, #4
 8007400:	1af2      	subs	r2, r6, r3
 8007402:	d0b6      	beq.n	8007372 <_malloc_r+0x22>
 8007404:	1b9b      	subs	r3, r3, r6
 8007406:	50a3      	str	r3, [r4, r2]
 8007408:	e7b3      	b.n	8007372 <_malloc_r+0x22>
 800740a:	6862      	ldr	r2, [r4, #4]
 800740c:	42a3      	cmp	r3, r4
 800740e:	bf0c      	ite	eq
 8007410:	6032      	streq	r2, [r6, #0]
 8007412:	605a      	strne	r2, [r3, #4]
 8007414:	e7ec      	b.n	80073f0 <_malloc_r+0xa0>
 8007416:	4623      	mov	r3, r4
 8007418:	6864      	ldr	r4, [r4, #4]
 800741a:	e7b2      	b.n	8007382 <_malloc_r+0x32>
 800741c:	4634      	mov	r4, r6
 800741e:	6876      	ldr	r6, [r6, #4]
 8007420:	e7b9      	b.n	8007396 <_malloc_r+0x46>
 8007422:	230c      	movs	r3, #12
 8007424:	603b      	str	r3, [r7, #0]
 8007426:	4638      	mov	r0, r7
 8007428:	f000 fbe0 	bl	8007bec <__malloc_unlock>
 800742c:	e7a1      	b.n	8007372 <_malloc_r+0x22>
 800742e:	6025      	str	r5, [r4, #0]
 8007430:	e7de      	b.n	80073f0 <_malloc_r+0xa0>
 8007432:	bf00      	nop
 8007434:	20000290 	.word	0x20000290

08007438 <__ssputs_r>:
 8007438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800743c:	688e      	ldr	r6, [r1, #8]
 800743e:	429e      	cmp	r6, r3
 8007440:	4682      	mov	sl, r0
 8007442:	460c      	mov	r4, r1
 8007444:	4690      	mov	r8, r2
 8007446:	461f      	mov	r7, r3
 8007448:	d838      	bhi.n	80074bc <__ssputs_r+0x84>
 800744a:	898a      	ldrh	r2, [r1, #12]
 800744c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007450:	d032      	beq.n	80074b8 <__ssputs_r+0x80>
 8007452:	6825      	ldr	r5, [r4, #0]
 8007454:	6909      	ldr	r1, [r1, #16]
 8007456:	eba5 0901 	sub.w	r9, r5, r1
 800745a:	6965      	ldr	r5, [r4, #20]
 800745c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007460:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007464:	3301      	adds	r3, #1
 8007466:	444b      	add	r3, r9
 8007468:	106d      	asrs	r5, r5, #1
 800746a:	429d      	cmp	r5, r3
 800746c:	bf38      	it	cc
 800746e:	461d      	movcc	r5, r3
 8007470:	0553      	lsls	r3, r2, #21
 8007472:	d531      	bpl.n	80074d8 <__ssputs_r+0xa0>
 8007474:	4629      	mov	r1, r5
 8007476:	f7ff ff6b 	bl	8007350 <_malloc_r>
 800747a:	4606      	mov	r6, r0
 800747c:	b950      	cbnz	r0, 8007494 <__ssputs_r+0x5c>
 800747e:	230c      	movs	r3, #12
 8007480:	f8ca 3000 	str.w	r3, [sl]
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800748a:	81a3      	strh	r3, [r4, #12]
 800748c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007494:	6921      	ldr	r1, [r4, #16]
 8007496:	464a      	mov	r2, r9
 8007498:	f7ff fa08 	bl	80068ac <memcpy>
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a6:	81a3      	strh	r3, [r4, #12]
 80074a8:	6126      	str	r6, [r4, #16]
 80074aa:	6165      	str	r5, [r4, #20]
 80074ac:	444e      	add	r6, r9
 80074ae:	eba5 0509 	sub.w	r5, r5, r9
 80074b2:	6026      	str	r6, [r4, #0]
 80074b4:	60a5      	str	r5, [r4, #8]
 80074b6:	463e      	mov	r6, r7
 80074b8:	42be      	cmp	r6, r7
 80074ba:	d900      	bls.n	80074be <__ssputs_r+0x86>
 80074bc:	463e      	mov	r6, r7
 80074be:	6820      	ldr	r0, [r4, #0]
 80074c0:	4632      	mov	r2, r6
 80074c2:	4641      	mov	r1, r8
 80074c4:	f000 fb72 	bl	8007bac <memmove>
 80074c8:	68a3      	ldr	r3, [r4, #8]
 80074ca:	1b9b      	subs	r3, r3, r6
 80074cc:	60a3      	str	r3, [r4, #8]
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	4433      	add	r3, r6
 80074d2:	6023      	str	r3, [r4, #0]
 80074d4:	2000      	movs	r0, #0
 80074d6:	e7db      	b.n	8007490 <__ssputs_r+0x58>
 80074d8:	462a      	mov	r2, r5
 80074da:	f000 fb8d 	bl	8007bf8 <_realloc_r>
 80074de:	4606      	mov	r6, r0
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d1e1      	bne.n	80074a8 <__ssputs_r+0x70>
 80074e4:	6921      	ldr	r1, [r4, #16]
 80074e6:	4650      	mov	r0, sl
 80074e8:	f7ff fec6 	bl	8007278 <_free_r>
 80074ec:	e7c7      	b.n	800747e <__ssputs_r+0x46>
	...

080074f0 <_svfiprintf_r>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	4698      	mov	r8, r3
 80074f6:	898b      	ldrh	r3, [r1, #12]
 80074f8:	061b      	lsls	r3, r3, #24
 80074fa:	b09d      	sub	sp, #116	; 0x74
 80074fc:	4607      	mov	r7, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	4614      	mov	r4, r2
 8007502:	d50e      	bpl.n	8007522 <_svfiprintf_r+0x32>
 8007504:	690b      	ldr	r3, [r1, #16]
 8007506:	b963      	cbnz	r3, 8007522 <_svfiprintf_r+0x32>
 8007508:	2140      	movs	r1, #64	; 0x40
 800750a:	f7ff ff21 	bl	8007350 <_malloc_r>
 800750e:	6028      	str	r0, [r5, #0]
 8007510:	6128      	str	r0, [r5, #16]
 8007512:	b920      	cbnz	r0, 800751e <_svfiprintf_r+0x2e>
 8007514:	230c      	movs	r3, #12
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751c:	e0d1      	b.n	80076c2 <_svfiprintf_r+0x1d2>
 800751e:	2340      	movs	r3, #64	; 0x40
 8007520:	616b      	str	r3, [r5, #20]
 8007522:	2300      	movs	r3, #0
 8007524:	9309      	str	r3, [sp, #36]	; 0x24
 8007526:	2320      	movs	r3, #32
 8007528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800752c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007530:	2330      	movs	r3, #48	; 0x30
 8007532:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80076dc <_svfiprintf_r+0x1ec>
 8007536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800753a:	f04f 0901 	mov.w	r9, #1
 800753e:	4623      	mov	r3, r4
 8007540:	469a      	mov	sl, r3
 8007542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007546:	b10a      	cbz	r2, 800754c <_svfiprintf_r+0x5c>
 8007548:	2a25      	cmp	r2, #37	; 0x25
 800754a:	d1f9      	bne.n	8007540 <_svfiprintf_r+0x50>
 800754c:	ebba 0b04 	subs.w	fp, sl, r4
 8007550:	d00b      	beq.n	800756a <_svfiprintf_r+0x7a>
 8007552:	465b      	mov	r3, fp
 8007554:	4622      	mov	r2, r4
 8007556:	4629      	mov	r1, r5
 8007558:	4638      	mov	r0, r7
 800755a:	f7ff ff6d 	bl	8007438 <__ssputs_r>
 800755e:	3001      	adds	r0, #1
 8007560:	f000 80aa 	beq.w	80076b8 <_svfiprintf_r+0x1c8>
 8007564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007566:	445a      	add	r2, fp
 8007568:	9209      	str	r2, [sp, #36]	; 0x24
 800756a:	f89a 3000 	ldrb.w	r3, [sl]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 80a2 	beq.w	80076b8 <_svfiprintf_r+0x1c8>
 8007574:	2300      	movs	r3, #0
 8007576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800757a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800757e:	f10a 0a01 	add.w	sl, sl, #1
 8007582:	9304      	str	r3, [sp, #16]
 8007584:	9307      	str	r3, [sp, #28]
 8007586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800758a:	931a      	str	r3, [sp, #104]	; 0x68
 800758c:	4654      	mov	r4, sl
 800758e:	2205      	movs	r2, #5
 8007590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007594:	4851      	ldr	r0, [pc, #324]	; (80076dc <_svfiprintf_r+0x1ec>)
 8007596:	f7f8 fe23 	bl	80001e0 <memchr>
 800759a:	9a04      	ldr	r2, [sp, #16]
 800759c:	b9d8      	cbnz	r0, 80075d6 <_svfiprintf_r+0xe6>
 800759e:	06d0      	lsls	r0, r2, #27
 80075a0:	bf44      	itt	mi
 80075a2:	2320      	movmi	r3, #32
 80075a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075a8:	0711      	lsls	r1, r2, #28
 80075aa:	bf44      	itt	mi
 80075ac:	232b      	movmi	r3, #43	; 0x2b
 80075ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b2:	f89a 3000 	ldrb.w	r3, [sl]
 80075b6:	2b2a      	cmp	r3, #42	; 0x2a
 80075b8:	d015      	beq.n	80075e6 <_svfiprintf_r+0xf6>
 80075ba:	9a07      	ldr	r2, [sp, #28]
 80075bc:	4654      	mov	r4, sl
 80075be:	2000      	movs	r0, #0
 80075c0:	f04f 0c0a 	mov.w	ip, #10
 80075c4:	4621      	mov	r1, r4
 80075c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075ca:	3b30      	subs	r3, #48	; 0x30
 80075cc:	2b09      	cmp	r3, #9
 80075ce:	d94e      	bls.n	800766e <_svfiprintf_r+0x17e>
 80075d0:	b1b0      	cbz	r0, 8007600 <_svfiprintf_r+0x110>
 80075d2:	9207      	str	r2, [sp, #28]
 80075d4:	e014      	b.n	8007600 <_svfiprintf_r+0x110>
 80075d6:	eba0 0308 	sub.w	r3, r0, r8
 80075da:	fa09 f303 	lsl.w	r3, r9, r3
 80075de:	4313      	orrs	r3, r2
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	46a2      	mov	sl, r4
 80075e4:	e7d2      	b.n	800758c <_svfiprintf_r+0x9c>
 80075e6:	9b03      	ldr	r3, [sp, #12]
 80075e8:	1d19      	adds	r1, r3, #4
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	9103      	str	r1, [sp, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	bfbb      	ittet	lt
 80075f2:	425b      	neglt	r3, r3
 80075f4:	f042 0202 	orrlt.w	r2, r2, #2
 80075f8:	9307      	strge	r3, [sp, #28]
 80075fa:	9307      	strlt	r3, [sp, #28]
 80075fc:	bfb8      	it	lt
 80075fe:	9204      	strlt	r2, [sp, #16]
 8007600:	7823      	ldrb	r3, [r4, #0]
 8007602:	2b2e      	cmp	r3, #46	; 0x2e
 8007604:	d10c      	bne.n	8007620 <_svfiprintf_r+0x130>
 8007606:	7863      	ldrb	r3, [r4, #1]
 8007608:	2b2a      	cmp	r3, #42	; 0x2a
 800760a:	d135      	bne.n	8007678 <_svfiprintf_r+0x188>
 800760c:	9b03      	ldr	r3, [sp, #12]
 800760e:	1d1a      	adds	r2, r3, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	9203      	str	r2, [sp, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	bfb8      	it	lt
 8007618:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800761c:	3402      	adds	r4, #2
 800761e:	9305      	str	r3, [sp, #20]
 8007620:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076ec <_svfiprintf_r+0x1fc>
 8007624:	7821      	ldrb	r1, [r4, #0]
 8007626:	2203      	movs	r2, #3
 8007628:	4650      	mov	r0, sl
 800762a:	f7f8 fdd9 	bl	80001e0 <memchr>
 800762e:	b140      	cbz	r0, 8007642 <_svfiprintf_r+0x152>
 8007630:	2340      	movs	r3, #64	; 0x40
 8007632:	eba0 000a 	sub.w	r0, r0, sl
 8007636:	fa03 f000 	lsl.w	r0, r3, r0
 800763a:	9b04      	ldr	r3, [sp, #16]
 800763c:	4303      	orrs	r3, r0
 800763e:	3401      	adds	r4, #1
 8007640:	9304      	str	r3, [sp, #16]
 8007642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007646:	4826      	ldr	r0, [pc, #152]	; (80076e0 <_svfiprintf_r+0x1f0>)
 8007648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800764c:	2206      	movs	r2, #6
 800764e:	f7f8 fdc7 	bl	80001e0 <memchr>
 8007652:	2800      	cmp	r0, #0
 8007654:	d038      	beq.n	80076c8 <_svfiprintf_r+0x1d8>
 8007656:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <_svfiprintf_r+0x1f4>)
 8007658:	bb1b      	cbnz	r3, 80076a2 <_svfiprintf_r+0x1b2>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	3307      	adds	r3, #7
 800765e:	f023 0307 	bic.w	r3, r3, #7
 8007662:	3308      	adds	r3, #8
 8007664:	9303      	str	r3, [sp, #12]
 8007666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007668:	4433      	add	r3, r6
 800766a:	9309      	str	r3, [sp, #36]	; 0x24
 800766c:	e767      	b.n	800753e <_svfiprintf_r+0x4e>
 800766e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007672:	460c      	mov	r4, r1
 8007674:	2001      	movs	r0, #1
 8007676:	e7a5      	b.n	80075c4 <_svfiprintf_r+0xd4>
 8007678:	2300      	movs	r3, #0
 800767a:	3401      	adds	r4, #1
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	4619      	mov	r1, r3
 8007680:	f04f 0c0a 	mov.w	ip, #10
 8007684:	4620      	mov	r0, r4
 8007686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800768a:	3a30      	subs	r2, #48	; 0x30
 800768c:	2a09      	cmp	r2, #9
 800768e:	d903      	bls.n	8007698 <_svfiprintf_r+0x1a8>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0c5      	beq.n	8007620 <_svfiprintf_r+0x130>
 8007694:	9105      	str	r1, [sp, #20]
 8007696:	e7c3      	b.n	8007620 <_svfiprintf_r+0x130>
 8007698:	fb0c 2101 	mla	r1, ip, r1, r2
 800769c:	4604      	mov	r4, r0
 800769e:	2301      	movs	r3, #1
 80076a0:	e7f0      	b.n	8007684 <_svfiprintf_r+0x194>
 80076a2:	ab03      	add	r3, sp, #12
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	462a      	mov	r2, r5
 80076a8:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <_svfiprintf_r+0x1f8>)
 80076aa:	a904      	add	r1, sp, #16
 80076ac:	4638      	mov	r0, r7
 80076ae:	f7fb fedd 	bl	800346c <_printf_float>
 80076b2:	1c42      	adds	r2, r0, #1
 80076b4:	4606      	mov	r6, r0
 80076b6:	d1d6      	bne.n	8007666 <_svfiprintf_r+0x176>
 80076b8:	89ab      	ldrh	r3, [r5, #12]
 80076ba:	065b      	lsls	r3, r3, #25
 80076bc:	f53f af2c 	bmi.w	8007518 <_svfiprintf_r+0x28>
 80076c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076c2:	b01d      	add	sp, #116	; 0x74
 80076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c8:	ab03      	add	r3, sp, #12
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	462a      	mov	r2, r5
 80076ce:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <_svfiprintf_r+0x1f8>)
 80076d0:	a904      	add	r1, sp, #16
 80076d2:	4638      	mov	r0, r7
 80076d4:	f7fc f96e 	bl	80039b4 <_printf_i>
 80076d8:	e7eb      	b.n	80076b2 <_svfiprintf_r+0x1c2>
 80076da:	bf00      	nop
 80076dc:	08008204 	.word	0x08008204
 80076e0:	0800820e 	.word	0x0800820e
 80076e4:	0800346d 	.word	0x0800346d
 80076e8:	08007439 	.word	0x08007439
 80076ec:	0800820a 	.word	0x0800820a

080076f0 <__sfputc_r>:
 80076f0:	6893      	ldr	r3, [r2, #8]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	b410      	push	{r4}
 80076f8:	6093      	str	r3, [r2, #8]
 80076fa:	da08      	bge.n	800770e <__sfputc_r+0x1e>
 80076fc:	6994      	ldr	r4, [r2, #24]
 80076fe:	42a3      	cmp	r3, r4
 8007700:	db01      	blt.n	8007706 <__sfputc_r+0x16>
 8007702:	290a      	cmp	r1, #10
 8007704:	d103      	bne.n	800770e <__sfputc_r+0x1e>
 8007706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800770a:	f7fd bbe9 	b.w	8004ee0 <__swbuf_r>
 800770e:	6813      	ldr	r3, [r2, #0]
 8007710:	1c58      	adds	r0, r3, #1
 8007712:	6010      	str	r0, [r2, #0]
 8007714:	7019      	strb	r1, [r3, #0]
 8007716:	4608      	mov	r0, r1
 8007718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800771c:	4770      	bx	lr

0800771e <__sfputs_r>:
 800771e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007720:	4606      	mov	r6, r0
 8007722:	460f      	mov	r7, r1
 8007724:	4614      	mov	r4, r2
 8007726:	18d5      	adds	r5, r2, r3
 8007728:	42ac      	cmp	r4, r5
 800772a:	d101      	bne.n	8007730 <__sfputs_r+0x12>
 800772c:	2000      	movs	r0, #0
 800772e:	e007      	b.n	8007740 <__sfputs_r+0x22>
 8007730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007734:	463a      	mov	r2, r7
 8007736:	4630      	mov	r0, r6
 8007738:	f7ff ffda 	bl	80076f0 <__sfputc_r>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d1f3      	bne.n	8007728 <__sfputs_r+0xa>
 8007740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007744 <_vfiprintf_r>:
 8007744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	460d      	mov	r5, r1
 800774a:	b09d      	sub	sp, #116	; 0x74
 800774c:	4614      	mov	r4, r2
 800774e:	4698      	mov	r8, r3
 8007750:	4606      	mov	r6, r0
 8007752:	b118      	cbz	r0, 800775c <_vfiprintf_r+0x18>
 8007754:	6983      	ldr	r3, [r0, #24]
 8007756:	b90b      	cbnz	r3, 800775c <_vfiprintf_r+0x18>
 8007758:	f7fe fc16 	bl	8005f88 <__sinit>
 800775c:	4b89      	ldr	r3, [pc, #548]	; (8007984 <_vfiprintf_r+0x240>)
 800775e:	429d      	cmp	r5, r3
 8007760:	d11b      	bne.n	800779a <_vfiprintf_r+0x56>
 8007762:	6875      	ldr	r5, [r6, #4]
 8007764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007766:	07d9      	lsls	r1, r3, #31
 8007768:	d405      	bmi.n	8007776 <_vfiprintf_r+0x32>
 800776a:	89ab      	ldrh	r3, [r5, #12]
 800776c:	059a      	lsls	r2, r3, #22
 800776e:	d402      	bmi.n	8007776 <_vfiprintf_r+0x32>
 8007770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007772:	f7ff f81a 	bl	80067aa <__retarget_lock_acquire_recursive>
 8007776:	89ab      	ldrh	r3, [r5, #12]
 8007778:	071b      	lsls	r3, r3, #28
 800777a:	d501      	bpl.n	8007780 <_vfiprintf_r+0x3c>
 800777c:	692b      	ldr	r3, [r5, #16]
 800777e:	b9eb      	cbnz	r3, 80077bc <_vfiprintf_r+0x78>
 8007780:	4629      	mov	r1, r5
 8007782:	4630      	mov	r0, r6
 8007784:	f7fd fbfe 	bl	8004f84 <__swsetup_r>
 8007788:	b1c0      	cbz	r0, 80077bc <_vfiprintf_r+0x78>
 800778a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800778c:	07dc      	lsls	r4, r3, #31
 800778e:	d50e      	bpl.n	80077ae <_vfiprintf_r+0x6a>
 8007790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007794:	b01d      	add	sp, #116	; 0x74
 8007796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800779a:	4b7b      	ldr	r3, [pc, #492]	; (8007988 <_vfiprintf_r+0x244>)
 800779c:	429d      	cmp	r5, r3
 800779e:	d101      	bne.n	80077a4 <_vfiprintf_r+0x60>
 80077a0:	68b5      	ldr	r5, [r6, #8]
 80077a2:	e7df      	b.n	8007764 <_vfiprintf_r+0x20>
 80077a4:	4b79      	ldr	r3, [pc, #484]	; (800798c <_vfiprintf_r+0x248>)
 80077a6:	429d      	cmp	r5, r3
 80077a8:	bf08      	it	eq
 80077aa:	68f5      	ldreq	r5, [r6, #12]
 80077ac:	e7da      	b.n	8007764 <_vfiprintf_r+0x20>
 80077ae:	89ab      	ldrh	r3, [r5, #12]
 80077b0:	0598      	lsls	r0, r3, #22
 80077b2:	d4ed      	bmi.n	8007790 <_vfiprintf_r+0x4c>
 80077b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077b6:	f7fe fff9 	bl	80067ac <__retarget_lock_release_recursive>
 80077ba:	e7e9      	b.n	8007790 <_vfiprintf_r+0x4c>
 80077bc:	2300      	movs	r3, #0
 80077be:	9309      	str	r3, [sp, #36]	; 0x24
 80077c0:	2320      	movs	r3, #32
 80077c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077ca:	2330      	movs	r3, #48	; 0x30
 80077cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007990 <_vfiprintf_r+0x24c>
 80077d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077d4:	f04f 0901 	mov.w	r9, #1
 80077d8:	4623      	mov	r3, r4
 80077da:	469a      	mov	sl, r3
 80077dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077e0:	b10a      	cbz	r2, 80077e6 <_vfiprintf_r+0xa2>
 80077e2:	2a25      	cmp	r2, #37	; 0x25
 80077e4:	d1f9      	bne.n	80077da <_vfiprintf_r+0x96>
 80077e6:	ebba 0b04 	subs.w	fp, sl, r4
 80077ea:	d00b      	beq.n	8007804 <_vfiprintf_r+0xc0>
 80077ec:	465b      	mov	r3, fp
 80077ee:	4622      	mov	r2, r4
 80077f0:	4629      	mov	r1, r5
 80077f2:	4630      	mov	r0, r6
 80077f4:	f7ff ff93 	bl	800771e <__sfputs_r>
 80077f8:	3001      	adds	r0, #1
 80077fa:	f000 80aa 	beq.w	8007952 <_vfiprintf_r+0x20e>
 80077fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007800:	445a      	add	r2, fp
 8007802:	9209      	str	r2, [sp, #36]	; 0x24
 8007804:	f89a 3000 	ldrb.w	r3, [sl]
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 80a2 	beq.w	8007952 <_vfiprintf_r+0x20e>
 800780e:	2300      	movs	r3, #0
 8007810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007818:	f10a 0a01 	add.w	sl, sl, #1
 800781c:	9304      	str	r3, [sp, #16]
 800781e:	9307      	str	r3, [sp, #28]
 8007820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007824:	931a      	str	r3, [sp, #104]	; 0x68
 8007826:	4654      	mov	r4, sl
 8007828:	2205      	movs	r2, #5
 800782a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782e:	4858      	ldr	r0, [pc, #352]	; (8007990 <_vfiprintf_r+0x24c>)
 8007830:	f7f8 fcd6 	bl	80001e0 <memchr>
 8007834:	9a04      	ldr	r2, [sp, #16]
 8007836:	b9d8      	cbnz	r0, 8007870 <_vfiprintf_r+0x12c>
 8007838:	06d1      	lsls	r1, r2, #27
 800783a:	bf44      	itt	mi
 800783c:	2320      	movmi	r3, #32
 800783e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007842:	0713      	lsls	r3, r2, #28
 8007844:	bf44      	itt	mi
 8007846:	232b      	movmi	r3, #43	; 0x2b
 8007848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800784c:	f89a 3000 	ldrb.w	r3, [sl]
 8007850:	2b2a      	cmp	r3, #42	; 0x2a
 8007852:	d015      	beq.n	8007880 <_vfiprintf_r+0x13c>
 8007854:	9a07      	ldr	r2, [sp, #28]
 8007856:	4654      	mov	r4, sl
 8007858:	2000      	movs	r0, #0
 800785a:	f04f 0c0a 	mov.w	ip, #10
 800785e:	4621      	mov	r1, r4
 8007860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007864:	3b30      	subs	r3, #48	; 0x30
 8007866:	2b09      	cmp	r3, #9
 8007868:	d94e      	bls.n	8007908 <_vfiprintf_r+0x1c4>
 800786a:	b1b0      	cbz	r0, 800789a <_vfiprintf_r+0x156>
 800786c:	9207      	str	r2, [sp, #28]
 800786e:	e014      	b.n	800789a <_vfiprintf_r+0x156>
 8007870:	eba0 0308 	sub.w	r3, r0, r8
 8007874:	fa09 f303 	lsl.w	r3, r9, r3
 8007878:	4313      	orrs	r3, r2
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	46a2      	mov	sl, r4
 800787e:	e7d2      	b.n	8007826 <_vfiprintf_r+0xe2>
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	1d19      	adds	r1, r3, #4
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	9103      	str	r1, [sp, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	bfbb      	ittet	lt
 800788c:	425b      	neglt	r3, r3
 800788e:	f042 0202 	orrlt.w	r2, r2, #2
 8007892:	9307      	strge	r3, [sp, #28]
 8007894:	9307      	strlt	r3, [sp, #28]
 8007896:	bfb8      	it	lt
 8007898:	9204      	strlt	r2, [sp, #16]
 800789a:	7823      	ldrb	r3, [r4, #0]
 800789c:	2b2e      	cmp	r3, #46	; 0x2e
 800789e:	d10c      	bne.n	80078ba <_vfiprintf_r+0x176>
 80078a0:	7863      	ldrb	r3, [r4, #1]
 80078a2:	2b2a      	cmp	r3, #42	; 0x2a
 80078a4:	d135      	bne.n	8007912 <_vfiprintf_r+0x1ce>
 80078a6:	9b03      	ldr	r3, [sp, #12]
 80078a8:	1d1a      	adds	r2, r3, #4
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	9203      	str	r2, [sp, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	bfb8      	it	lt
 80078b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078b6:	3402      	adds	r4, #2
 80078b8:	9305      	str	r3, [sp, #20]
 80078ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079a0 <_vfiprintf_r+0x25c>
 80078be:	7821      	ldrb	r1, [r4, #0]
 80078c0:	2203      	movs	r2, #3
 80078c2:	4650      	mov	r0, sl
 80078c4:	f7f8 fc8c 	bl	80001e0 <memchr>
 80078c8:	b140      	cbz	r0, 80078dc <_vfiprintf_r+0x198>
 80078ca:	2340      	movs	r3, #64	; 0x40
 80078cc:	eba0 000a 	sub.w	r0, r0, sl
 80078d0:	fa03 f000 	lsl.w	r0, r3, r0
 80078d4:	9b04      	ldr	r3, [sp, #16]
 80078d6:	4303      	orrs	r3, r0
 80078d8:	3401      	adds	r4, #1
 80078da:	9304      	str	r3, [sp, #16]
 80078dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e0:	482c      	ldr	r0, [pc, #176]	; (8007994 <_vfiprintf_r+0x250>)
 80078e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078e6:	2206      	movs	r2, #6
 80078e8:	f7f8 fc7a 	bl	80001e0 <memchr>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d03f      	beq.n	8007970 <_vfiprintf_r+0x22c>
 80078f0:	4b29      	ldr	r3, [pc, #164]	; (8007998 <_vfiprintf_r+0x254>)
 80078f2:	bb1b      	cbnz	r3, 800793c <_vfiprintf_r+0x1f8>
 80078f4:	9b03      	ldr	r3, [sp, #12]
 80078f6:	3307      	adds	r3, #7
 80078f8:	f023 0307 	bic.w	r3, r3, #7
 80078fc:	3308      	adds	r3, #8
 80078fe:	9303      	str	r3, [sp, #12]
 8007900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007902:	443b      	add	r3, r7
 8007904:	9309      	str	r3, [sp, #36]	; 0x24
 8007906:	e767      	b.n	80077d8 <_vfiprintf_r+0x94>
 8007908:	fb0c 3202 	mla	r2, ip, r2, r3
 800790c:	460c      	mov	r4, r1
 800790e:	2001      	movs	r0, #1
 8007910:	e7a5      	b.n	800785e <_vfiprintf_r+0x11a>
 8007912:	2300      	movs	r3, #0
 8007914:	3401      	adds	r4, #1
 8007916:	9305      	str	r3, [sp, #20]
 8007918:	4619      	mov	r1, r3
 800791a:	f04f 0c0a 	mov.w	ip, #10
 800791e:	4620      	mov	r0, r4
 8007920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007924:	3a30      	subs	r2, #48	; 0x30
 8007926:	2a09      	cmp	r2, #9
 8007928:	d903      	bls.n	8007932 <_vfiprintf_r+0x1ee>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0c5      	beq.n	80078ba <_vfiprintf_r+0x176>
 800792e:	9105      	str	r1, [sp, #20]
 8007930:	e7c3      	b.n	80078ba <_vfiprintf_r+0x176>
 8007932:	fb0c 2101 	mla	r1, ip, r1, r2
 8007936:	4604      	mov	r4, r0
 8007938:	2301      	movs	r3, #1
 800793a:	e7f0      	b.n	800791e <_vfiprintf_r+0x1da>
 800793c:	ab03      	add	r3, sp, #12
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	462a      	mov	r2, r5
 8007942:	4b16      	ldr	r3, [pc, #88]	; (800799c <_vfiprintf_r+0x258>)
 8007944:	a904      	add	r1, sp, #16
 8007946:	4630      	mov	r0, r6
 8007948:	f7fb fd90 	bl	800346c <_printf_float>
 800794c:	4607      	mov	r7, r0
 800794e:	1c78      	adds	r0, r7, #1
 8007950:	d1d6      	bne.n	8007900 <_vfiprintf_r+0x1bc>
 8007952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007954:	07d9      	lsls	r1, r3, #31
 8007956:	d405      	bmi.n	8007964 <_vfiprintf_r+0x220>
 8007958:	89ab      	ldrh	r3, [r5, #12]
 800795a:	059a      	lsls	r2, r3, #22
 800795c:	d402      	bmi.n	8007964 <_vfiprintf_r+0x220>
 800795e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007960:	f7fe ff24 	bl	80067ac <__retarget_lock_release_recursive>
 8007964:	89ab      	ldrh	r3, [r5, #12]
 8007966:	065b      	lsls	r3, r3, #25
 8007968:	f53f af12 	bmi.w	8007790 <_vfiprintf_r+0x4c>
 800796c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800796e:	e711      	b.n	8007794 <_vfiprintf_r+0x50>
 8007970:	ab03      	add	r3, sp, #12
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	462a      	mov	r2, r5
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <_vfiprintf_r+0x258>)
 8007978:	a904      	add	r1, sp, #16
 800797a:	4630      	mov	r0, r6
 800797c:	f7fc f81a 	bl	80039b4 <_printf_i>
 8007980:	e7e4      	b.n	800794c <_vfiprintf_r+0x208>
 8007982:	bf00      	nop
 8007984:	08007fec 	.word	0x08007fec
 8007988:	0800800c 	.word	0x0800800c
 800798c:	08007fcc 	.word	0x08007fcc
 8007990:	08008204 	.word	0x08008204
 8007994:	0800820e 	.word	0x0800820e
 8007998:	0800346d 	.word	0x0800346d
 800799c:	0800771f 	.word	0x0800771f
 80079a0:	0800820a 	.word	0x0800820a
 80079a4:	00000000 	.word	0x00000000

080079a8 <nan>:
 80079a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80079b0 <nan+0x8>
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	00000000 	.word	0x00000000
 80079b4:	7ff80000 	.word	0x7ff80000

080079b8 <_sbrk_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4d06      	ldr	r5, [pc, #24]	; (80079d4 <_sbrk_r+0x1c>)
 80079bc:	2300      	movs	r3, #0
 80079be:	4604      	mov	r4, r0
 80079c0:	4608      	mov	r0, r1
 80079c2:	602b      	str	r3, [r5, #0]
 80079c4:	f7f9 fc30 	bl	8001228 <_sbrk>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d102      	bne.n	80079d2 <_sbrk_r+0x1a>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b103      	cbz	r3, 80079d2 <_sbrk_r+0x1a>
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	20000298 	.word	0x20000298

080079d8 <__sread>:
 80079d8:	b510      	push	{r4, lr}
 80079da:	460c      	mov	r4, r1
 80079dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e0:	f000 f93a 	bl	8007c58 <_read_r>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	bfab      	itete	ge
 80079e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079ea:	89a3      	ldrhlt	r3, [r4, #12]
 80079ec:	181b      	addge	r3, r3, r0
 80079ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079f2:	bfac      	ite	ge
 80079f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80079f6:	81a3      	strhlt	r3, [r4, #12]
 80079f8:	bd10      	pop	{r4, pc}

080079fa <__swrite>:
 80079fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fe:	461f      	mov	r7, r3
 8007a00:	898b      	ldrh	r3, [r1, #12]
 8007a02:	05db      	lsls	r3, r3, #23
 8007a04:	4605      	mov	r5, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	4616      	mov	r6, r2
 8007a0a:	d505      	bpl.n	8007a18 <__swrite+0x1e>
 8007a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a10:	2302      	movs	r3, #2
 8007a12:	2200      	movs	r2, #0
 8007a14:	f000 f8b8 	bl	8007b88 <_lseek_r>
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a22:	81a3      	strh	r3, [r4, #12]
 8007a24:	4632      	mov	r2, r6
 8007a26:	463b      	mov	r3, r7
 8007a28:	4628      	mov	r0, r5
 8007a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2e:	f000 b837 	b.w	8007aa0 <_write_r>

08007a32 <__sseek>:
 8007a32:	b510      	push	{r4, lr}
 8007a34:	460c      	mov	r4, r1
 8007a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a3a:	f000 f8a5 	bl	8007b88 <_lseek_r>
 8007a3e:	1c43      	adds	r3, r0, #1
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	bf15      	itete	ne
 8007a44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a4e:	81a3      	strheq	r3, [r4, #12]
 8007a50:	bf18      	it	ne
 8007a52:	81a3      	strhne	r3, [r4, #12]
 8007a54:	bd10      	pop	{r4, pc}

08007a56 <__sclose>:
 8007a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a5a:	f000 b851 	b.w	8007b00 <_close_r>

08007a5e <strncmp>:
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	b17a      	cbz	r2, 8007a82 <strncmp+0x24>
 8007a62:	4603      	mov	r3, r0
 8007a64:	3901      	subs	r1, #1
 8007a66:	1884      	adds	r4, r0, r2
 8007a68:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007a70:	4290      	cmp	r0, r2
 8007a72:	d101      	bne.n	8007a78 <strncmp+0x1a>
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	d101      	bne.n	8007a7c <strncmp+0x1e>
 8007a78:	1a80      	subs	r0, r0, r2
 8007a7a:	bd10      	pop	{r4, pc}
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	d1f3      	bne.n	8007a68 <strncmp+0xa>
 8007a80:	e7fa      	b.n	8007a78 <strncmp+0x1a>
 8007a82:	4610      	mov	r0, r2
 8007a84:	e7f9      	b.n	8007a7a <strncmp+0x1c>

08007a86 <__ascii_wctomb>:
 8007a86:	b149      	cbz	r1, 8007a9c <__ascii_wctomb+0x16>
 8007a88:	2aff      	cmp	r2, #255	; 0xff
 8007a8a:	bf85      	ittet	hi
 8007a8c:	238a      	movhi	r3, #138	; 0x8a
 8007a8e:	6003      	strhi	r3, [r0, #0]
 8007a90:	700a      	strbls	r2, [r1, #0]
 8007a92:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007a96:	bf98      	it	ls
 8007a98:	2001      	movls	r0, #1
 8007a9a:	4770      	bx	lr
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	4770      	bx	lr

08007aa0 <_write_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d07      	ldr	r5, [pc, #28]	; (8007ac0 <_write_r+0x20>)
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	4608      	mov	r0, r1
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	2200      	movs	r2, #0
 8007aac:	602a      	str	r2, [r5, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f7f9 fadc 	bl	800106c <_write>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d102      	bne.n	8007abe <_write_r+0x1e>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	b103      	cbz	r3, 8007abe <_write_r+0x1e>
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	20000298 	.word	0x20000298

08007ac4 <__assert_func>:
 8007ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ac6:	4614      	mov	r4, r2
 8007ac8:	461a      	mov	r2, r3
 8007aca:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <__assert_func+0x2c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4605      	mov	r5, r0
 8007ad0:	68d8      	ldr	r0, [r3, #12]
 8007ad2:	b14c      	cbz	r4, 8007ae8 <__assert_func+0x24>
 8007ad4:	4b07      	ldr	r3, [pc, #28]	; (8007af4 <__assert_func+0x30>)
 8007ad6:	9100      	str	r1, [sp, #0]
 8007ad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007adc:	4906      	ldr	r1, [pc, #24]	; (8007af8 <__assert_func+0x34>)
 8007ade:	462b      	mov	r3, r5
 8007ae0:	f000 f81e 	bl	8007b20 <fiprintf>
 8007ae4:	f000 f8ca 	bl	8007c7c <abort>
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <__assert_func+0x38>)
 8007aea:	461c      	mov	r4, r3
 8007aec:	e7f3      	b.n	8007ad6 <__assert_func+0x12>
 8007aee:	bf00      	nop
 8007af0:	2000000c 	.word	0x2000000c
 8007af4:	08008215 	.word	0x08008215
 8007af8:	08008222 	.word	0x08008222
 8007afc:	08008250 	.word	0x08008250

08007b00 <_close_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d06      	ldr	r5, [pc, #24]	; (8007b1c <_close_r+0x1c>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	f7f9 fb57 	bl	80011be <_close>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_close_r+0x1a>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_close_r+0x1a>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20000298 	.word	0x20000298

08007b20 <fiprintf>:
 8007b20:	b40e      	push	{r1, r2, r3}
 8007b22:	b503      	push	{r0, r1, lr}
 8007b24:	4601      	mov	r1, r0
 8007b26:	ab03      	add	r3, sp, #12
 8007b28:	4805      	ldr	r0, [pc, #20]	; (8007b40 <fiprintf+0x20>)
 8007b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b2e:	6800      	ldr	r0, [r0, #0]
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	f7ff fe07 	bl	8007744 <_vfiprintf_r>
 8007b36:	b002      	add	sp, #8
 8007b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b3c:	b003      	add	sp, #12
 8007b3e:	4770      	bx	lr
 8007b40:	2000000c 	.word	0x2000000c

08007b44 <_fstat_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d07      	ldr	r5, [pc, #28]	; (8007b64 <_fstat_r+0x20>)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	f7f9 fb40 	bl	80011d6 <_fstat>
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	d102      	bne.n	8007b60 <_fstat_r+0x1c>
 8007b5a:	682b      	ldr	r3, [r5, #0]
 8007b5c:	b103      	cbz	r3, 8007b60 <_fstat_r+0x1c>
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	bd38      	pop	{r3, r4, r5, pc}
 8007b62:	bf00      	nop
 8007b64:	20000298 	.word	0x20000298

08007b68 <_isatty_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d06      	ldr	r5, [pc, #24]	; (8007b84 <_isatty_r+0x1c>)
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4608      	mov	r0, r1
 8007b72:	602b      	str	r3, [r5, #0]
 8007b74:	f7f9 fb3f 	bl	80011f6 <_isatty>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d102      	bne.n	8007b82 <_isatty_r+0x1a>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	b103      	cbz	r3, 8007b82 <_isatty_r+0x1a>
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	20000298 	.word	0x20000298

08007b88 <_lseek_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4d07      	ldr	r5, [pc, #28]	; (8007ba8 <_lseek_r+0x20>)
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	4608      	mov	r0, r1
 8007b90:	4611      	mov	r1, r2
 8007b92:	2200      	movs	r2, #0
 8007b94:	602a      	str	r2, [r5, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	f7f9 fb38 	bl	800120c <_lseek>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_lseek_r+0x1e>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_lseek_r+0x1e>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	20000298 	.word	0x20000298

08007bac <memmove>:
 8007bac:	4288      	cmp	r0, r1
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	eb01 0402 	add.w	r4, r1, r2
 8007bb4:	d902      	bls.n	8007bbc <memmove+0x10>
 8007bb6:	4284      	cmp	r4, r0
 8007bb8:	4623      	mov	r3, r4
 8007bba:	d807      	bhi.n	8007bcc <memmove+0x20>
 8007bbc:	1e43      	subs	r3, r0, #1
 8007bbe:	42a1      	cmp	r1, r4
 8007bc0:	d008      	beq.n	8007bd4 <memmove+0x28>
 8007bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bca:	e7f8      	b.n	8007bbe <memmove+0x12>
 8007bcc:	4402      	add	r2, r0
 8007bce:	4601      	mov	r1, r0
 8007bd0:	428a      	cmp	r2, r1
 8007bd2:	d100      	bne.n	8007bd6 <memmove+0x2a>
 8007bd4:	bd10      	pop	{r4, pc}
 8007bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bde:	e7f7      	b.n	8007bd0 <memmove+0x24>

08007be0 <__malloc_lock>:
 8007be0:	4801      	ldr	r0, [pc, #4]	; (8007be8 <__malloc_lock+0x8>)
 8007be2:	f7fe bde2 	b.w	80067aa <__retarget_lock_acquire_recursive>
 8007be6:	bf00      	nop
 8007be8:	2000028c 	.word	0x2000028c

08007bec <__malloc_unlock>:
 8007bec:	4801      	ldr	r0, [pc, #4]	; (8007bf4 <__malloc_unlock+0x8>)
 8007bee:	f7fe bddd 	b.w	80067ac <__retarget_lock_release_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	2000028c 	.word	0x2000028c

08007bf8 <_realloc_r>:
 8007bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	4614      	mov	r4, r2
 8007c00:	460e      	mov	r6, r1
 8007c02:	b921      	cbnz	r1, 8007c0e <_realloc_r+0x16>
 8007c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c08:	4611      	mov	r1, r2
 8007c0a:	f7ff bba1 	b.w	8007350 <_malloc_r>
 8007c0e:	b92a      	cbnz	r2, 8007c1c <_realloc_r+0x24>
 8007c10:	f7ff fb32 	bl	8007278 <_free_r>
 8007c14:	4625      	mov	r5, r4
 8007c16:	4628      	mov	r0, r5
 8007c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1c:	f000 f835 	bl	8007c8a <_malloc_usable_size_r>
 8007c20:	4284      	cmp	r4, r0
 8007c22:	4607      	mov	r7, r0
 8007c24:	d802      	bhi.n	8007c2c <_realloc_r+0x34>
 8007c26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c2a:	d812      	bhi.n	8007c52 <_realloc_r+0x5a>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4640      	mov	r0, r8
 8007c30:	f7ff fb8e 	bl	8007350 <_malloc_r>
 8007c34:	4605      	mov	r5, r0
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0ed      	beq.n	8007c16 <_realloc_r+0x1e>
 8007c3a:	42bc      	cmp	r4, r7
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	4631      	mov	r1, r6
 8007c40:	bf28      	it	cs
 8007c42:	463a      	movcs	r2, r7
 8007c44:	f7fe fe32 	bl	80068ac <memcpy>
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	f7ff fb14 	bl	8007278 <_free_r>
 8007c50:	e7e1      	b.n	8007c16 <_realloc_r+0x1e>
 8007c52:	4635      	mov	r5, r6
 8007c54:	e7df      	b.n	8007c16 <_realloc_r+0x1e>
	...

08007c58 <_read_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d07      	ldr	r5, [pc, #28]	; (8007c78 <_read_r+0x20>)
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	4608      	mov	r0, r1
 8007c60:	4611      	mov	r1, r2
 8007c62:	2200      	movs	r2, #0
 8007c64:	602a      	str	r2, [r5, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	f7f9 fa8c 	bl	8001184 <_read>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_read_r+0x1e>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_read_r+0x1e>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	20000298 	.word	0x20000298

08007c7c <abort>:
 8007c7c:	b508      	push	{r3, lr}
 8007c7e:	2006      	movs	r0, #6
 8007c80:	f000 f834 	bl	8007cec <raise>
 8007c84:	2001      	movs	r0, #1
 8007c86:	f7f9 fa73 	bl	8001170 <_exit>

08007c8a <_malloc_usable_size_r>:
 8007c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8e:	1f18      	subs	r0, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bfbc      	itt	lt
 8007c94:	580b      	ldrlt	r3, [r1, r0]
 8007c96:	18c0      	addlt	r0, r0, r3
 8007c98:	4770      	bx	lr

08007c9a <_raise_r>:
 8007c9a:	291f      	cmp	r1, #31
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	460d      	mov	r5, r1
 8007ca2:	d904      	bls.n	8007cae <_raise_r+0x14>
 8007ca4:	2316      	movs	r3, #22
 8007ca6:	6003      	str	r3, [r0, #0]
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cac:	bd38      	pop	{r3, r4, r5, pc}
 8007cae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007cb0:	b112      	cbz	r2, 8007cb8 <_raise_r+0x1e>
 8007cb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cb6:	b94b      	cbnz	r3, 8007ccc <_raise_r+0x32>
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 f831 	bl	8007d20 <_getpid_r>
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cc8:	f000 b818 	b.w	8007cfc <_kill_r>
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d00a      	beq.n	8007ce6 <_raise_r+0x4c>
 8007cd0:	1c59      	adds	r1, r3, #1
 8007cd2:	d103      	bne.n	8007cdc <_raise_r+0x42>
 8007cd4:	2316      	movs	r3, #22
 8007cd6:	6003      	str	r3, [r0, #0]
 8007cd8:	2001      	movs	r0, #1
 8007cda:	e7e7      	b.n	8007cac <_raise_r+0x12>
 8007cdc:	2400      	movs	r4, #0
 8007cde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	4798      	blx	r3
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e7e0      	b.n	8007cac <_raise_r+0x12>
	...

08007cec <raise>:
 8007cec:	4b02      	ldr	r3, [pc, #8]	; (8007cf8 <raise+0xc>)
 8007cee:	4601      	mov	r1, r0
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	f7ff bfd2 	b.w	8007c9a <_raise_r>
 8007cf6:	bf00      	nop
 8007cf8:	2000000c 	.word	0x2000000c

08007cfc <_kill_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	4d07      	ldr	r5, [pc, #28]	; (8007d1c <_kill_r+0x20>)
 8007d00:	2300      	movs	r3, #0
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	602b      	str	r3, [r5, #0]
 8007d0a:	f7f9 fa21 	bl	8001150 <_kill>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	d102      	bne.n	8007d18 <_kill_r+0x1c>
 8007d12:	682b      	ldr	r3, [r5, #0]
 8007d14:	b103      	cbz	r3, 8007d18 <_kill_r+0x1c>
 8007d16:	6023      	str	r3, [r4, #0]
 8007d18:	bd38      	pop	{r3, r4, r5, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20000298 	.word	0x20000298

08007d20 <_getpid_r>:
 8007d20:	f7f9 ba0e 	b.w	8001140 <_getpid>

08007d24 <_init>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	bf00      	nop
 8007d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2a:	bc08      	pop	{r3}
 8007d2c:	469e      	mov	lr, r3
 8007d2e:	4770      	bx	lr

08007d30 <_fini>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	bf00      	nop
 8007d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d36:	bc08      	pop	{r3}
 8007d38:	469e      	mov	lr, r3
 8007d3a:	4770      	bx	lr
