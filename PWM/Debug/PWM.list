
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08008df0  08008df0  00018df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f4  080092f4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080092f4  080092f4  000192f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092fc  080092fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092fc  080092fc  000192fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  200001e0  080094e4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  080094e4  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efb1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002055  00000000  00000000  0002f1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00031218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00031f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6b2  00000000  00000000  00032bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001130d  00000000  00000000  0005d272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107457  00000000  00000000  0006e57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001759d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c2c  00000000  00000000  00175a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dd4 	.word	0x08008dd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008dd4 	.word	0x08008dd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:


extern TIM_HandleTypeDef Tim4;

int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  HAL_Init();
 8000ffc:	f000 f980 	bl	8001300 <HAL_Init>
  SysConfigClock();
 8001000:	f003 f91c 	bl	800423c <SysConfigClock>
  Global_GPIO_Init();
 8001004:	f003 f816 	bl	8004034 <Global_GPIO_Init>

  PWM_Init();
 8001008:	f003 f87e 	bl	8004108 <PWM_Init>
  HAL_TIM_PWM_Start(&Tim4, TIM_CHANNEL_1);
 800100c:	2100      	movs	r1, #0
 800100e:	4807      	ldr	r0, [pc, #28]	; (800102c <main+0x34>)
 8001010:	f001 fba8 	bl	8002764 <HAL_TIM_PWM_Start>
  PWM_SetDutyCycle_CH1(10);
 8001014:	200a      	movs	r0, #10
 8001016:	f003 f8d3 	bl	80041c0 <PWM_SetDutyCycle_CH1>

  USART_Init(115200);
 800101a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800101e:	f003 f98f 	bl	8004340 <USART_Init>
  printf("It works!\r\n");
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <main+0x38>)
 8001024:	f004 f8de 	bl	80051e4 <puts>

  while (1)
 8001028:	e7fe      	b.n	8001028 <main+0x30>
 800102a:	bf00      	nop
 800102c:	20000204 	.word	0x20000204
 8001030:	08008df0 	.word	0x08008df0

08001034 <__io_putchar>:

int __io_putchar(int ch);
int _write(int file, char *ptr, int len);


int __io_putchar(int ch) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&USART2_I, &c[0], 1, 100);
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	2201      	movs	r2, #1
 800104a:	4804      	ldr	r0, [pc, #16]	; (800105c <__io_putchar+0x28>)
 800104c:	f002 faf5 	bl	800363a <HAL_UART_Transmit>
	return ch;
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000250 	.word	0x20000250

08001060 <_write>:


int _write(int file, char *ptr, int len) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e009      	b.n	8001086 <_write+0x26>
		__io_putchar(*ptr++);
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	60ba      	str	r2, [r7, #8]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ffda 	bl	8001034 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	dbf1      	blt.n	8001072 <_write+0x12>
	}

	return len;
 800108e:	687b      	ldr	r3, [r7, #4]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_MspInit+0x44>)
 80010a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_MspInit+0x44>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6613      	str	r3, [r2, #96]	; 0x60
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_MspInit+0x44>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_MspInit+0x44>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_MspInit+0x44>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	6593      	str	r3, [r2, #88]	; 0x58
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_MspInit+0x44>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f944 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return 1;
 8001138:	2301      	movs	r3, #1
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_kill>:

int _kill(int pid, int sig)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800114e:	f003 f92f 	bl	80043b0 <__errno>
 8001152:	4603      	mov	r3, r0
 8001154:	2216      	movs	r2, #22
 8001156:	601a      	str	r2, [r3, #0]
  return -1;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_exit>:

void _exit (int status)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800116c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffe7 	bl	8001144 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001176:	e7fe      	b.n	8001176 <_exit+0x12>

08001178 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	e00a      	b.n	80011a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800118a:	f3af 8000 	nop.w
 800118e:	4601      	mov	r1, r0
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	b2ca      	uxtb	r2, r1
 8001198:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dbf0      	blt.n	800118a <_read+0x12>
  }

  return len;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011da:	605a      	str	r2, [r3, #4]
  return 0;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_isatty>:

int _isatty(int file)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	; (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f003 f8b0 	bl	80043b0 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20018000 	.word	0x20018000
 800127c:	00000400 	.word	0x00000400
 8001280:	200001fc 	.word	0x200001fc
 8001284:	200002e8 	.word	0x200002e8

08001288 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <SystemInit+0x20>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <SystemInit+0x20>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b0:	f7ff ffea 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012b6:	490d      	ldr	r1, [pc, #52]	; (80012ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <LoopForever+0xe>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012cc:	4c0a      	ldr	r4, [pc, #40]	; (80012f8 <LoopForever+0x16>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012da:	f003 f86f 	bl	80043bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012de:	f7ff fe8b 	bl	8000ff8 <main>

080012e2 <LoopForever>:

LoopForever:
    b LoopForever
 80012e2:	e7fe      	b.n	80012e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80012f0:	08009304 	.word	0x08009304
  ldr r2, =_sbss
 80012f4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80012f8:	200002e4 	.word	0x200002e4

080012fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC1_2_IRQHandler>
	...

08001300 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_Init+0x3c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_Init+0x3c>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001314:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001316:	2003      	movs	r0, #3
 8001318:	f000 f920 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131c:	2000      	movs	r0, #0
 800131e:	f000 f80f 	bl	8001340 <HAL_InitTick>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	71fb      	strb	r3, [r7, #7]
 800132c:	e001      	b.n	8001332 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800132e:	f7ff feb3 	bl	8001098 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001332:	79fb      	ldrb	r3, [r7, #7]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40022000 	.word	0x40022000

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_InitTick+0x6c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d023      	beq.n	800139c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_InitTick+0x70>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_InitTick+0x6c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f91d 	bl	80015aa <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d809      	bhi.n	8001390 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001384:	f000 f8f5 	bl	8001572 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_InitTick+0x74>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e007      	b.n	80013a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e004      	b.n	80013a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e001      	b.n	80013a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000004 	.word	0x20000004

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000200 	.word	0x20000200

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000200 	.word	0x20000200

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800153c:	f7ff ff8e 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff47 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff5c 	bl	8001440 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff8e 	bl	80014b0 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5d 	bl	800145c <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffb0 	bl	8001518 <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	e17f      	b.n	80018d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2101      	movs	r1, #1
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8171 	beq.w	80018ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d005      	beq.n	8001604 <HAL_GPIO_Init+0x40>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d130      	bne.n	8001666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800163a:	2201      	movs	r2, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	f003 0201 	and.w	r2, r3, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b03      	cmp	r3, #3
 8001670:	d118      	bne.n	80016a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001678:	2201      	movs	r2, #1
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	08db      	lsrs	r3, r3, #3
 800168e:	f003 0201 	and.w	r2, r3, #1
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d017      	beq.n	80016e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d123      	bne.n	8001734 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3208      	adds	r2, #8
 800172e:	6939      	ldr	r1, [r7, #16]
 8001730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0203 	and.w	r2, r3, #3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80ac 	beq.w	80018ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_GPIO_Init+0x330>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	4a5e      	ldr	r2, [pc, #376]	; (80018f4 <HAL_GPIO_Init+0x330>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6613      	str	r3, [r2, #96]	; 0x60
 8001782:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <HAL_GPIO_Init+0x330>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800178e:	4a5a      	ldr	r2, [pc, #360]	; (80018f8 <HAL_GPIO_Init+0x334>)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017b8:	d025      	beq.n	8001806 <HAL_GPIO_Init+0x242>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4f      	ldr	r2, [pc, #316]	; (80018fc <HAL_GPIO_Init+0x338>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01f      	beq.n	8001802 <HAL_GPIO_Init+0x23e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4e      	ldr	r2, [pc, #312]	; (8001900 <HAL_GPIO_Init+0x33c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d019      	beq.n	80017fe <HAL_GPIO_Init+0x23a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4d      	ldr	r2, [pc, #308]	; (8001904 <HAL_GPIO_Init+0x340>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0x236>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4c      	ldr	r2, [pc, #304]	; (8001908 <HAL_GPIO_Init+0x344>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00d      	beq.n	80017f6 <HAL_GPIO_Init+0x232>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4b      	ldr	r2, [pc, #300]	; (800190c <HAL_GPIO_Init+0x348>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <HAL_GPIO_Init+0x22e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4a      	ldr	r2, [pc, #296]	; (8001910 <HAL_GPIO_Init+0x34c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_GPIO_Init+0x22a>
 80017ea:	2306      	movs	r3, #6
 80017ec:	e00c      	b.n	8001808 <HAL_GPIO_Init+0x244>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e00a      	b.n	8001808 <HAL_GPIO_Init+0x244>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e008      	b.n	8001808 <HAL_GPIO_Init+0x244>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x244>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e004      	b.n	8001808 <HAL_GPIO_Init+0x244>
 80017fe:	2302      	movs	r3, #2
 8001800:	e002      	b.n	8001808 <HAL_GPIO_Init+0x244>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x244>
 8001806:	2300      	movs	r3, #0
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	f002 0203 	and.w	r2, r2, #3
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	4093      	lsls	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001818:	4937      	ldr	r1, [pc, #220]	; (80018f8 <HAL_GPIO_Init+0x334>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001826:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_GPIO_Init+0x350>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800184a:	4a32      	ldr	r2, [pc, #200]	; (8001914 <HAL_GPIO_Init+0x350>)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_GPIO_Init+0x350>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001874:	4a27      	ldr	r2, [pc, #156]	; (8001914 <HAL_GPIO_Init+0x350>)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_GPIO_Init+0x350>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800189e:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_GPIO_Init+0x350>)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_GPIO_Init+0x350>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_GPIO_Init+0x350>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f47f ae78 	bne.w	80015d4 <HAL_GPIO_Init+0x10>
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010000 	.word	0x40010000
 80018fc:	48000400 	.word	0x48000400
 8001900:	48000800 	.word	0x48000800
 8001904:	48000c00 	.word	0x48000c00
 8001908:	48001000 	.word	0x48001000
 800190c:	48001400 	.word	0x48001400
 8001910:	48001800 	.word	0x48001800
 8001914:	40010400 	.word	0x40010400

08001918 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <HAL_PWREx_GetVoltageRange+0x18>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40007000 	.word	0x40007000

08001934 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001942:	d130      	bne.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800194c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001950:	d038      	beq.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001960:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2232      	movs	r2, #50	; 0x32
 8001968:	fb02 f303 	mul.w	r3, r2, r3
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9b      	lsrs	r3, r3, #18
 8001974:	3301      	adds	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001978:	e002      	b.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3b01      	subs	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198c:	d102      	bne.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x60>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f2      	bne.n	800197a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a0:	d110      	bne.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e00f      	b.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b2:	d007      	beq.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019bc:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40007000 	.word	0x40007000
 80019d8:	20000000 	.word	0x20000000
 80019dc:	431bde83 	.word	0x431bde83

080019e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e3ca      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f2:	4b97      	ldr	r3, [pc, #604]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019fc:	4b94      	ldr	r3, [pc, #592]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80e4 	beq.w	8001bdc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <HAL_RCC_OscConfig+0x4a>
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b0c      	cmp	r3, #12
 8001a1e:	f040 808b 	bne.w	8001b38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	f040 8087 	bne.w	8001b38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a2a:	4b89      	ldr	r3, [pc, #548]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_RCC_OscConfig+0x62>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e3a2      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1a      	ldr	r2, [r3, #32]
 8001a46:	4b82      	ldr	r3, [pc, #520]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d004      	beq.n	8001a5c <HAL_RCC_OscConfig+0x7c>
 8001a52:	4b7f      	ldr	r3, [pc, #508]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a5a:	e005      	b.n	8001a68 <HAL_RCC_OscConfig+0x88>
 8001a5c:	4b7c      	ldr	r3, [pc, #496]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d223      	bcs.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fd55 	bl	8002520 <RCC_SetFlashLatencyFromMSIRange>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e383      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a80:	4b73      	ldr	r3, [pc, #460]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a72      	ldr	r2, [pc, #456]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001a86:	f043 0308 	orr.w	r3, r3, #8
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	496d      	ldr	r1, [pc, #436]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	4968      	ldr	r1, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
 8001ab2:	e025      	b.n	8001b00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab4:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a65      	ldr	r2, [pc, #404]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4960      	ldr	r1, [pc, #384]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	495b      	ldr	r1, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fd15 	bl	8002520 <RCC_SetFlashLatencyFromMSIRange>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e343      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b00:	f000 fc4a 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	4950      	ldr	r1, [pc, #320]	; (8001c54 <HAL_RCC_OscConfig+0x274>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1c:	4a4e      	ldr	r2, [pc, #312]	; (8001c58 <HAL_RCC_OscConfig+0x278>)
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <HAL_RCC_OscConfig+0x27c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fc0b 	bl	8001340 <HAL_InitTick>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d052      	beq.n	8001bda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	e327      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d032      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a42      	ldr	r2, [pc, #264]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fc48 	bl	80013e0 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b54:	f7ff fc44 	bl	80013e0 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e310      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a36      	ldr	r2, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4931      	ldr	r1, [pc, #196]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b90:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	492c      	ldr	r1, [pc, #176]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
 8001ba4:	e01a      	b.n	8001bdc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fc15 	bl	80013e0 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bba:	f7ff fc11 	bl	80013e0 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e2dd      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bcc:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f0      	bne.n	8001bba <HAL_RCC_OscConfig+0x1da>
 8001bd8:	e000      	b.n	8001bdc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d074      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x21a>
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b0c      	cmp	r3, #12
 8001bf2:	d10e      	bne.n	8001c12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d064      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d160      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e2ba      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x24a>
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e026      	b.n	8001c78 <HAL_RCC_OscConfig+0x298>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c32:	d115      	bne.n	8001c60 <HAL_RCC_OscConfig+0x280>
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a02      	ldr	r2, [pc, #8]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	e014      	b.n	8001c78 <HAL_RCC_OscConfig+0x298>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	08008dfc 	.word	0x08008dfc
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	4ba0      	ldr	r3, [pc, #640]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a9f      	ldr	r2, [pc, #636]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b9d      	ldr	r3, [pc, #628]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a9c      	ldr	r2, [pc, #624]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fbae 	bl	80013e0 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fbaa 	bl	80013e0 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e276      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9a:	4b92      	ldr	r3, [pc, #584]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x2a8>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fb9a 	bl	80013e0 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fb96 	bl	80013e0 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e262      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc2:	4b88      	ldr	r3, [pc, #544]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2d0>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d060      	beq.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x310>
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d119      	bne.n	8001d1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d116      	bne.n	8001d1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf0:	4b7c      	ldr	r3, [pc, #496]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_OscConfig+0x328>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e23f      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b76      	ldr	r3, [pc, #472]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	4973      	ldr	r1, [pc, #460]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d1c:	e040      	b.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d023      	beq.n	8001d6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d26:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6e      	ldr	r2, [pc, #440]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7ff fb55 	bl	80013e0 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fb51 	bl	80013e0 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e21d      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d4c:	4b65      	ldr	r3, [pc, #404]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	061b      	lsls	r3, r3, #24
 8001d66:	495f      	ldr	r1, [pc, #380]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
 8001d6c:	e018      	b.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a5c      	ldr	r2, [pc, #368]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fb31 	bl	80013e0 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff fb2d 	bl	80013e0 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1f9      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d03c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01c      	beq.n	8001dee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db4:	4b4b      	ldr	r3, [pc, #300]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dba:	4a4a      	ldr	r2, [pc, #296]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fb0c 	bl	80013e0 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fb08 	bl	80013e0 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1d4      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ef      	beq.n	8001dcc <HAL_RCC_OscConfig+0x3ec>
 8001dec:	e01b      	b.n	8001e26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df4:	4a3b      	ldr	r2, [pc, #236]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfe:	f7ff faef 	bl	80013e0 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e06:	f7ff faeb 	bl	80013e0 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1b7      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e18:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ef      	bne.n	8001e06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80a6 	beq.w	8001f80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10d      	bne.n	8001e60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	4a26      	ldr	r2, [pc, #152]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e60:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <HAL_RCC_OscConfig+0x508>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d118      	bne.n	8001e9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_RCC_OscConfig+0x508>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <HAL_RCC_OscConfig+0x508>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e78:	f7ff fab2 	bl	80013e0 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e80:	f7ff faae 	bl	80013e0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e17a      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_RCC_OscConfig+0x508>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d108      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4d8>
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eac:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb6:	e029      	b.n	8001f0c <HAL_RCC_OscConfig+0x52c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d115      	bne.n	8001eec <HAL_RCC_OscConfig+0x50c>
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec6:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	4a03      	ldr	r2, [pc, #12]	; (8001ee4 <HAL_RCC_OscConfig+0x504>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee0:	e014      	b.n	8001f0c <HAL_RCC_OscConfig+0x52c>
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	4b9c      	ldr	r3, [pc, #624]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef2:	4a9b      	ldr	r2, [pc, #620]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001efc:	4b98      	ldr	r3, [pc, #608]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	4a97      	ldr	r2, [pc, #604]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d016      	beq.n	8001f42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f14:	f7ff fa64 	bl	80013e0 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7ff fa60 	bl	80013e0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e12a      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f32:	4b8b      	ldr	r3, [pc, #556]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ed      	beq.n	8001f1c <HAL_RCC_OscConfig+0x53c>
 8001f40:	e015      	b.n	8001f6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff fa4d 	bl	80013e0 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff fa49 	bl	80013e0 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e113      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f60:	4b7f      	ldr	r3, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ed      	bne.n	8001f4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f74:	4b7a      	ldr	r3, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	4a79      	ldr	r2, [pc, #484]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80fe 	beq.w	8002186 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	f040 80d0 	bne.w	8002134 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f94:	4b72      	ldr	r3, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d130      	bne.n	800200a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d127      	bne.n	800200a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d11f      	bne.n	800200a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fd4:	2a07      	cmp	r2, #7
 8001fd6:	bf14      	ite	ne
 8001fd8:	2201      	movne	r2, #1
 8001fda:	2200      	moveq	r2, #0
 8001fdc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d113      	bne.n	800200a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	085b      	lsrs	r3, r3, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	085b      	lsrs	r3, r3, #1
 8002002:	3b01      	subs	r3, #1
 8002004:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d06e      	beq.n	80020e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b0c      	cmp	r3, #12
 800200e:	d069      	beq.n	80020e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800201c:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0ad      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800202c:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a4b      	ldr	r2, [pc, #300]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8002032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002036:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002038:	f7ff f9d2 	bl	80013e0 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7ff f9ce 	bl	80013e0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e09a      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002052:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205e:	4b40      	ldr	r3, [pc, #256]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	4b40      	ldr	r3, [pc, #256]	; (8002164 <HAL_RCC_OscConfig+0x784>)
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800206e:	3a01      	subs	r2, #1
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	4311      	orrs	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002078:	0212      	lsls	r2, r2, #8
 800207a:	4311      	orrs	r1, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002080:	0852      	lsrs	r2, r2, #1
 8002082:	3a01      	subs	r2, #1
 8002084:	0552      	lsls	r2, r2, #21
 8002086:	4311      	orrs	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800208c:	0852      	lsrs	r2, r2, #1
 800208e:	3a01      	subs	r2, #1
 8002090:	0652      	lsls	r2, r2, #25
 8002092:	4311      	orrs	r1, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002098:	0912      	lsrs	r2, r2, #4
 800209a:	0452      	lsls	r2, r2, #17
 800209c:	430a      	orrs	r2, r1
 800209e:	4930      	ldr	r1, [pc, #192]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020a4:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020bc:	f7ff f990 	bl	80013e0 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff f98c 	bl	80013e0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e058      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e2:	e050      	b.n	8002186 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e04f      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d148      	bne.n	8002186 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 80020fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002100:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a16      	ldr	r2, [pc, #88]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8002106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800210c:	f7ff f968 	bl	80013e0 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7ff f964 	bl	80013e0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e030      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x734>
 8002132:	e028      	b.n	8002186 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d023      	beq.n	8002182 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <HAL_RCC_OscConfig+0x780>)
 8002140:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7ff f94b 	bl	80013e0 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214c:	e00c      	b.n	8002168 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7ff f947 	bl	80013e0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d905      	bls.n	8002168 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e013      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
 8002160:	40021000 	.word	0x40021000
 8002164:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_OscConfig+0x7b0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1ec      	bne.n	800214e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_OscConfig+0x7b0>)
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	4905      	ldr	r1, [pc, #20]	; (8002190 <HAL_RCC_OscConfig+0x7b0>)
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_OscConfig+0x7b4>)
 800217c:	4013      	ands	r3, r2
 800217e:	60cb      	str	r3, [r1, #12]
 8002180:	e001      	b.n	8002186 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	feeefffc 	.word	0xfeeefffc

08002198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0e7      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ac:	4b75      	ldr	r3, [pc, #468]	; (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d910      	bls.n	80021dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b72      	ldr	r3, [pc, #456]	; (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 0207 	bic.w	r2, r3, #7
 80021c2:	4970      	ldr	r1, [pc, #448]	; (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b6e      	ldr	r3, [pc, #440]	; (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0cf      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d010      	beq.n	800220a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	4b66      	ldr	r3, [pc, #408]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d908      	bls.n	800220a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4960      	ldr	r1, [pc, #384]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002206:	4313      	orrs	r3, r2
 8002208:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d04c      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221e:	4b5a      	ldr	r3, [pc, #360]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d121      	bne.n	800226e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0a6      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002236:	4b54      	ldr	r3, [pc, #336]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d115      	bne.n	800226e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e09a      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800224e:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e08e      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225e:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e086      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800226e:	4b46      	ldr	r3, [pc, #280]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f023 0203 	bic.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4943      	ldr	r1, [pc, #268]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 800227c:	4313      	orrs	r3, r2
 800227e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002280:	f7ff f8ae 	bl	80013e0 <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	e00a      	b.n	800229e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002288:	f7ff f8aa 	bl	80013e0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e06e      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	4b3a      	ldr	r3, [pc, #232]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 020c 	and.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d1eb      	bne.n	8002288 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	4b31      	ldr	r3, [pc, #196]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d208      	bcs.n	80022de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	492b      	ldr	r1, [pc, #172]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d210      	bcs.n	800230e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 0207 	bic.w	r2, r3, #7
 80022f4:	4923      	ldr	r1, [pc, #140]	; (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fc:	4b21      	ldr	r3, [pc, #132]	; (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e036      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	4918      	ldr	r1, [pc, #96]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4910      	ldr	r1, [pc, #64]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800234c:	f000 f824 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	490b      	ldr	r1, [pc, #44]	; (800238c <HAL_RCC_ClockConfig+0x1f4>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
 8002368:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1f8>)
 800236a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1fc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe ffe5 	bl	8001340 <HAL_InitTick>
 8002376:	4603      	mov	r3, r0
 8002378:	72fb      	strb	r3, [r7, #11]

  return status;
 800237a:	7afb      	ldrb	r3, [r7, #11]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40022000 	.word	0x40022000
 8002388:	40021000 	.word	0x40021000
 800238c:	08008dfc 	.word	0x08008dfc
 8002390:	20000000 	.word	0x20000000
 8002394:	20000004 	.word	0x20000004

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a6:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b0:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x34>
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d121      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d11e      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023cc:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023d8:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023f4:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10d      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d102      	bne.n	8002416 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	e004      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b08      	cmp	r3, #8
 800241a:	d101      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800241c:	4b23      	ldr	r3, [pc, #140]	; (80024ac <HAL_RCC_GetSysClockFreq+0x114>)
 800241e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d134      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d003      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0xa6>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d003      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0xac>
 800243c:	e005      	b.n	800244a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002440:	617b      	str	r3, [r7, #20]
      break;
 8002442:	e005      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002446:	617b      	str	r3, [r7, #20]
      break;
 8002448:	e002      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	617b      	str	r3, [r7, #20]
      break;
 800244e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	3301      	adds	r3, #1
 800245c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	fb03 f202 	mul.w	r2, r3, r2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	0e5b      	lsrs	r3, r3, #25
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	3301      	adds	r3, #1
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002490:	69bb      	ldr	r3, [r7, #24]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	08008e14 	.word	0x08008e14
 80024a8:	00f42400 	.word	0x00f42400
 80024ac:	007a1200 	.word	0x007a1200

080024b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000000 	.word	0x20000000

080024c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024cc:	f7ff fff0 	bl	80024b0 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4904      	ldr	r1, [pc, #16]	; (80024f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	08008e0c 	.word	0x08008e0c

080024f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024f8:	f7ff ffda 	bl	80024b0 <HAL_RCC_GetHCLKFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	0adb      	lsrs	r3, r3, #11
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	4904      	ldr	r1, [pc, #16]	; (800251c <HAL_RCC_GetPCLK2Freq+0x28>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002514:	4618      	mov	r0, r3
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000
 800251c:	08008e0c 	.word	0x08008e0c

08002520 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800252c:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002538:	f7ff f9ee 	bl	8001918 <HAL_PWREx_GetVoltageRange>
 800253c:	6178      	str	r0, [r7, #20]
 800253e:	e014      	b.n	800256a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254a:	6593      	str	r3, [r2, #88]	; 0x58
 800254c:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002558:	f7ff f9de 	bl	8001918 <HAL_PWREx_GetVoltageRange>
 800255c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800255e:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002568:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002570:	d10b      	bne.n	800258a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b80      	cmp	r3, #128	; 0x80
 8002576:	d919      	bls.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2ba0      	cmp	r3, #160	; 0xa0
 800257c:	d902      	bls.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800257e:	2302      	movs	r3, #2
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	e013      	b.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002584:	2301      	movs	r3, #1
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e010      	b.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d902      	bls.n	8002596 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002590:	2303      	movs	r3, #3
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	e00a      	b.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b80      	cmp	r3, #128	; 0x80
 800259a:	d102      	bne.n	80025a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800259c:	2302      	movs	r3, #2
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	e004      	b.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b70      	cmp	r3, #112	; 0x70
 80025a6:	d101      	bne.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a8:	2301      	movs	r3, #1
 80025aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 0207 	bic.w	r2, r3, #7
 80025b4:	4909      	ldr	r1, [pc, #36]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d001      	beq.n	80025ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40022000 	.word	0x40022000

080025e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e049      	b.n	8002686 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f841 	bl	800268e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3304      	adds	r3, #4
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f000 fb84 	bl	8002d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e049      	b.n	8002748 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d106      	bne.n	80026ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f841 	bl	8002750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f000 fb23 	bl	8002d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_TIM_PWM_Start+0x24>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	e03c      	b.n	8002802 <HAL_TIM_PWM_Start+0x9e>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b04      	cmp	r3, #4
 800278c:	d109      	bne.n	80027a2 <HAL_TIM_PWM_Start+0x3e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	e02f      	b.n	8002802 <HAL_TIM_PWM_Start+0x9e>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d109      	bne.n	80027bc <HAL_TIM_PWM_Start+0x58>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e022      	b.n	8002802 <HAL_TIM_PWM_Start+0x9e>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b0c      	cmp	r3, #12
 80027c0:	d109      	bne.n	80027d6 <HAL_TIM_PWM_Start+0x72>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	e015      	b.n	8002802 <HAL_TIM_PWM_Start+0x9e>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d109      	bne.n	80027f0 <HAL_TIM_PWM_Start+0x8c>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	e008      	b.n	8002802 <HAL_TIM_PWM_Start+0x9e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e09c      	b.n	8002944 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <HAL_TIM_PWM_Start+0xb6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002818:	e023      	b.n	8002862 <HAL_TIM_PWM_Start+0xfe>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d104      	bne.n	800282a <HAL_TIM_PWM_Start+0xc6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002828:	e01b      	b.n	8002862 <HAL_TIM_PWM_Start+0xfe>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d104      	bne.n	800283a <HAL_TIM_PWM_Start+0xd6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002838:	e013      	b.n	8002862 <HAL_TIM_PWM_Start+0xfe>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d104      	bne.n	800284a <HAL_TIM_PWM_Start+0xe6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002848:	e00b      	b.n	8002862 <HAL_TIM_PWM_Start+0xfe>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b10      	cmp	r3, #16
 800284e:	d104      	bne.n	800285a <HAL_TIM_PWM_Start+0xf6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002858:	e003      	b.n	8002862 <HAL_TIM_PWM_Start+0xfe>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2201      	movs	r2, #1
 8002868:	6839      	ldr	r1, [r7, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fe68 	bl	8003540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a35      	ldr	r2, [pc, #212]	; (800294c <HAL_TIM_PWM_Start+0x1e8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x13e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a34      	ldr	r2, [pc, #208]	; (8002950 <HAL_TIM_PWM_Start+0x1ec>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00e      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x13e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_TIM_PWM_Start+0x1f0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d009      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x13e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a31      	ldr	r2, [pc, #196]	; (8002958 <HAL_TIM_PWM_Start+0x1f4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d004      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x13e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2f      	ldr	r2, [pc, #188]	; (800295c <HAL_TIM_PWM_Start+0x1f8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_PWM_Start+0x142>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_TIM_PWM_Start+0x144>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a22      	ldr	r2, [pc, #136]	; (800294c <HAL_TIM_PWM_Start+0x1e8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01d      	beq.n	8002902 <HAL_TIM_PWM_Start+0x19e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ce:	d018      	beq.n	8002902 <HAL_TIM_PWM_Start+0x19e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a22      	ldr	r2, [pc, #136]	; (8002960 <HAL_TIM_PWM_Start+0x1fc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_TIM_PWM_Start+0x19e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a21      	ldr	r2, [pc, #132]	; (8002964 <HAL_TIM_PWM_Start+0x200>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00e      	beq.n	8002902 <HAL_TIM_PWM_Start+0x19e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <HAL_TIM_PWM_Start+0x204>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_TIM_PWM_Start+0x19e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a17      	ldr	r2, [pc, #92]	; (8002950 <HAL_TIM_PWM_Start+0x1ec>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_TIM_PWM_Start+0x19e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a15      	ldr	r2, [pc, #84]	; (8002954 <HAL_TIM_PWM_Start+0x1f0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d115      	bne.n	800292e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	4b18      	ldr	r3, [pc, #96]	; (800296c <HAL_TIM_PWM_Start+0x208>)
 800290a:	4013      	ands	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b06      	cmp	r3, #6
 8002912:	d015      	beq.n	8002940 <HAL_TIM_PWM_Start+0x1dc>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291a:	d011      	beq.n	8002940 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292c:	e008      	b.n	8002940 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e000      	b.n	8002942 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002940:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40012c00 	.word	0x40012c00
 8002950:	40013400 	.word	0x40013400
 8002954:	40014000 	.word	0x40014000
 8002958:	40014400 	.word	0x40014400
 800295c:	40014800 	.word	0x40014800
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800
 8002968:	40000c00 	.word	0x40000c00
 800296c:	00010007 	.word	0x00010007

08002970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800298a:	2302      	movs	r3, #2
 800298c:	e0ff      	b.n	8002b8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b14      	cmp	r3, #20
 800299a:	f200 80f0 	bhi.w	8002b7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800299e:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	080029f9 	.word	0x080029f9
 80029a8:	08002b7f 	.word	0x08002b7f
 80029ac:	08002b7f 	.word	0x08002b7f
 80029b0:	08002b7f 	.word	0x08002b7f
 80029b4:	08002a39 	.word	0x08002a39
 80029b8:	08002b7f 	.word	0x08002b7f
 80029bc:	08002b7f 	.word	0x08002b7f
 80029c0:	08002b7f 	.word	0x08002b7f
 80029c4:	08002a7b 	.word	0x08002a7b
 80029c8:	08002b7f 	.word	0x08002b7f
 80029cc:	08002b7f 	.word	0x08002b7f
 80029d0:	08002b7f 	.word	0x08002b7f
 80029d4:	08002abb 	.word	0x08002abb
 80029d8:	08002b7f 	.word	0x08002b7f
 80029dc:	08002b7f 	.word	0x08002b7f
 80029e0:	08002b7f 	.word	0x08002b7f
 80029e4:	08002afd 	.word	0x08002afd
 80029e8:	08002b7f 	.word	0x08002b7f
 80029ec:	08002b7f 	.word	0x08002b7f
 80029f0:	08002b7f 	.word	0x08002b7f
 80029f4:	08002b3d 	.word	0x08002b3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fa2e 	bl	8002e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0208 	orr.w	r2, r2, #8
 8002a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6999      	ldr	r1, [r3, #24]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	619a      	str	r2, [r3, #24]
      break;
 8002a36:	e0a5      	b.n	8002b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fa9e 	bl	8002f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6999      	ldr	r1, [r3, #24]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	021a      	lsls	r2, r3, #8
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	619a      	str	r2, [r3, #24]
      break;
 8002a78:	e084      	b.n	8002b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fb07 	bl	8003094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0208 	orr.w	r2, r2, #8
 8002a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0204 	bic.w	r2, r2, #4
 8002aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69d9      	ldr	r1, [r3, #28]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	61da      	str	r2, [r3, #28]
      break;
 8002ab8:	e064      	b.n	8002b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fb6f 	bl	80031a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69d9      	ldr	r1, [r3, #28]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	021a      	lsls	r2, r3, #8
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	61da      	str	r2, [r3, #28]
      break;
 8002afa:	e043      	b.n	8002b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fbb8 	bl	8003278 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b3a:	e023      	b.n	8002b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fbfc 	bl	8003340 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	021a      	lsls	r2, r3, #8
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b7c:	e002      	b.n	8002b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	75fb      	strb	r3, [r7, #23]
      break;
 8002b82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop

08002b98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e0b6      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x18a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf0:	d03e      	beq.n	8002c70 <HAL_TIM_ConfigClockSource+0xd8>
 8002bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf6:	f200 8087 	bhi.w	8002d08 <HAL_TIM_ConfigClockSource+0x170>
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfe:	f000 8086 	beq.w	8002d0e <HAL_TIM_ConfigClockSource+0x176>
 8002c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c06:	d87f      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x170>
 8002c08:	2b70      	cmp	r3, #112	; 0x70
 8002c0a:	d01a      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0xaa>
 8002c0c:	2b70      	cmp	r3, #112	; 0x70
 8002c0e:	d87b      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x170>
 8002c10:	2b60      	cmp	r3, #96	; 0x60
 8002c12:	d050      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x11e>
 8002c14:	2b60      	cmp	r3, #96	; 0x60
 8002c16:	d877      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x170>
 8002c18:	2b50      	cmp	r3, #80	; 0x50
 8002c1a:	d03c      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0xfe>
 8002c1c:	2b50      	cmp	r3, #80	; 0x50
 8002c1e:	d873      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x170>
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d058      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x13e>
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d86f      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x170>
 8002c28:	2b30      	cmp	r3, #48	; 0x30
 8002c2a:	d064      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x15e>
 8002c2c:	2b30      	cmp	r3, #48	; 0x30
 8002c2e:	d86b      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x170>
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d060      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x15e>
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d867      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x170>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d05c      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x15e>
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d05a      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x15e>
 8002c40:	e062      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6899      	ldr	r1, [r3, #8]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f000 fc55 	bl	8003500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	609a      	str	r2, [r3, #8]
      break;
 8002c6e:	e04f      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6899      	ldr	r1, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f000 fc3e 	bl	8003500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c92:	609a      	str	r2, [r3, #8]
      break;
 8002c94:	e03c      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f000 fbb2 	bl	800340c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2150      	movs	r1, #80	; 0x50
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fc0b 	bl	80034ca <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e02c      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6859      	ldr	r1, [r3, #4]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f000 fbd1 	bl	800346a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2160      	movs	r1, #96	; 0x60
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fbfb 	bl	80034ca <TIM_ITRx_SetConfig>
      break;
 8002cd4:	e01c      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f000 fb92 	bl	800340c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2140      	movs	r1, #64	; 0x40
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fbeb 	bl	80034ca <TIM_ITRx_SetConfig>
      break;
 8002cf4:	e00c      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f000 fbe2 	bl	80034ca <TIM_ITRx_SetConfig>
      break;
 8002d06:	e003      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e000      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002d0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <TIM_Base_SetConfig+0x114>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <TIM_Base_SetConfig+0x40>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4a:	d00f      	beq.n	8002d6c <TIM_Base_SetConfig+0x40>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3d      	ldr	r2, [pc, #244]	; (8002e44 <TIM_Base_SetConfig+0x118>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00b      	beq.n	8002d6c <TIM_Base_SetConfig+0x40>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a3c      	ldr	r2, [pc, #240]	; (8002e48 <TIM_Base_SetConfig+0x11c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d007      	beq.n	8002d6c <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3b      	ldr	r2, [pc, #236]	; (8002e4c <TIM_Base_SetConfig+0x120>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d003      	beq.n	8002d6c <TIM_Base_SetConfig+0x40>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3a      	ldr	r2, [pc, #232]	; (8002e50 <TIM_Base_SetConfig+0x124>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d108      	bne.n	8002d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a2f      	ldr	r2, [pc, #188]	; (8002e40 <TIM_Base_SetConfig+0x114>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01f      	beq.n	8002dc6 <TIM_Base_SetConfig+0x9a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8c:	d01b      	beq.n	8002dc6 <TIM_Base_SetConfig+0x9a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2c      	ldr	r2, [pc, #176]	; (8002e44 <TIM_Base_SetConfig+0x118>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d017      	beq.n	8002dc6 <TIM_Base_SetConfig+0x9a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <TIM_Base_SetConfig+0x11c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <TIM_Base_SetConfig+0x9a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <TIM_Base_SetConfig+0x120>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00f      	beq.n	8002dc6 <TIM_Base_SetConfig+0x9a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <TIM_Base_SetConfig+0x124>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <TIM_Base_SetConfig+0x9a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a28      	ldr	r2, [pc, #160]	; (8002e54 <TIM_Base_SetConfig+0x128>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_Base_SetConfig+0x9a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <TIM_Base_SetConfig+0x12c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_Base_SetConfig+0x9a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <TIM_Base_SetConfig+0x130>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <TIM_Base_SetConfig+0x114>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00f      	beq.n	8002e24 <TIM_Base_SetConfig+0xf8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <TIM_Base_SetConfig+0x124>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00b      	beq.n	8002e24 <TIM_Base_SetConfig+0xf8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <TIM_Base_SetConfig+0x128>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d007      	beq.n	8002e24 <TIM_Base_SetConfig+0xf8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <TIM_Base_SetConfig+0x12c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_Base_SetConfig+0xf8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a0f      	ldr	r2, [pc, #60]	; (8002e5c <TIM_Base_SetConfig+0x130>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d103      	bne.n	8002e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	615a      	str	r2, [r3, #20]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800
 8002e4c:	40000c00 	.word	0x40000c00
 8002e50:	40013400 	.word	0x40013400
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800

08002e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f023 0201 	bic.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f023 0302 	bic.w	r3, r3, #2
 8002eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <TIM_OC1_SetConfig+0x10c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00f      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x80>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <TIM_OC1_SetConfig+0x110>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x80>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <TIM_OC1_SetConfig+0x114>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x80>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a29      	ldr	r2, [pc, #164]	; (8002f78 <TIM_OC1_SetConfig+0x118>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <TIM_OC1_SetConfig+0x80>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a28      	ldr	r2, [pc, #160]	; (8002f7c <TIM_OC1_SetConfig+0x11c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d10c      	bne.n	8002efa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f023 0308 	bic.w	r3, r3, #8
 8002ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1b      	ldr	r2, [pc, #108]	; (8002f6c <TIM_OC1_SetConfig+0x10c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00f      	beq.n	8002f22 <TIM_OC1_SetConfig+0xc2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1a      	ldr	r2, [pc, #104]	; (8002f70 <TIM_OC1_SetConfig+0x110>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <TIM_OC1_SetConfig+0xc2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <TIM_OC1_SetConfig+0x114>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <TIM_OC1_SetConfig+0xc2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <TIM_OC1_SetConfig+0x118>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_OC1_SetConfig+0xc2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <TIM_OC1_SetConfig+0x11c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d111      	bne.n	8002f46 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	621a      	str	r2, [r3, #32]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40013400 	.word	0x40013400
 8002f74:	40014000 	.word	0x40014000
 8002f78:	40014400 	.word	0x40014400
 8002f7c:	40014800 	.word	0x40014800

08002f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f023 0210 	bic.w	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f023 0320 	bic.w	r3, r3, #32
 8002fce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a28      	ldr	r2, [pc, #160]	; (8003080 <TIM_OC2_SetConfig+0x100>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_OC2_SetConfig+0x6c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a27      	ldr	r2, [pc, #156]	; (8003084 <TIM_OC2_SetConfig+0x104>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d10d      	bne.n	8003008 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <TIM_OC2_SetConfig+0x100>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00f      	beq.n	8003030 <TIM_OC2_SetConfig+0xb0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <TIM_OC2_SetConfig+0x104>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00b      	beq.n	8003030 <TIM_OC2_SetConfig+0xb0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <TIM_OC2_SetConfig+0x108>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d007      	beq.n	8003030 <TIM_OC2_SetConfig+0xb0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a1a      	ldr	r2, [pc, #104]	; (800308c <TIM_OC2_SetConfig+0x10c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <TIM_OC2_SetConfig+0xb0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a19      	ldr	r2, [pc, #100]	; (8003090 <TIM_OC2_SetConfig+0x110>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d113      	bne.n	8003058 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800303e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	621a      	str	r2, [r3, #32]
}
 8003072:	bf00      	nop
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40012c00 	.word	0x40012c00
 8003084:	40013400 	.word	0x40013400
 8003088:	40014000 	.word	0x40014000
 800308c:	40014400 	.word	0x40014400
 8003090:	40014800 	.word	0x40014800

08003094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a27      	ldr	r2, [pc, #156]	; (8003190 <TIM_OC3_SetConfig+0xfc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_OC3_SetConfig+0x6a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a26      	ldr	r2, [pc, #152]	; (8003194 <TIM_OC3_SetConfig+0x100>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d10d      	bne.n	800311a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <TIM_OC3_SetConfig+0xfc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00f      	beq.n	8003142 <TIM_OC3_SetConfig+0xae>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <TIM_OC3_SetConfig+0x100>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00b      	beq.n	8003142 <TIM_OC3_SetConfig+0xae>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1a      	ldr	r2, [pc, #104]	; (8003198 <TIM_OC3_SetConfig+0x104>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <TIM_OC3_SetConfig+0xae>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a19      	ldr	r2, [pc, #100]	; (800319c <TIM_OC3_SetConfig+0x108>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <TIM_OC3_SetConfig+0xae>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <TIM_OC3_SetConfig+0x10c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d113      	bne.n	800316a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	621a      	str	r2, [r3, #32]
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40013400 	.word	0x40013400
 8003198:	40014000 	.word	0x40014000
 800319c:	40014400 	.word	0x40014400
 80031a0:	40014800 	.word	0x40014800

080031a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	031b      	lsls	r3, r3, #12
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a18      	ldr	r2, [pc, #96]	; (8003264 <TIM_OC4_SetConfig+0xc0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00f      	beq.n	8003228 <TIM_OC4_SetConfig+0x84>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <TIM_OC4_SetConfig+0xc4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00b      	beq.n	8003228 <TIM_OC4_SetConfig+0x84>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a16      	ldr	r2, [pc, #88]	; (800326c <TIM_OC4_SetConfig+0xc8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d007      	beq.n	8003228 <TIM_OC4_SetConfig+0x84>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a15      	ldr	r2, [pc, #84]	; (8003270 <TIM_OC4_SetConfig+0xcc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_OC4_SetConfig+0x84>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a14      	ldr	r2, [pc, #80]	; (8003274 <TIM_OC4_SetConfig+0xd0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d109      	bne.n	800323c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800322e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	019b      	lsls	r3, r3, #6
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40013400 	.word	0x40013400
 800326c:	40014000 	.word	0x40014000
 8003270:	40014400 	.word	0x40014400
 8003274:	40014800 	.word	0x40014800

08003278 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80032bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	041b      	lsls	r3, r3, #16
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a17      	ldr	r2, [pc, #92]	; (800332c <TIM_OC5_SetConfig+0xb4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00f      	beq.n	80032f2 <TIM_OC5_SetConfig+0x7a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a16      	ldr	r2, [pc, #88]	; (8003330 <TIM_OC5_SetConfig+0xb8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_OC5_SetConfig+0x7a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a15      	ldr	r2, [pc, #84]	; (8003334 <TIM_OC5_SetConfig+0xbc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_OC5_SetConfig+0x7a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a14      	ldr	r2, [pc, #80]	; (8003338 <TIM_OC5_SetConfig+0xc0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_OC5_SetConfig+0x7a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a13      	ldr	r2, [pc, #76]	; (800333c <TIM_OC5_SetConfig+0xc4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d109      	bne.n	8003306 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	621a      	str	r2, [r3, #32]
}
 8003320:	bf00      	nop
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40012c00 	.word	0x40012c00
 8003330:	40013400 	.word	0x40013400
 8003334:	40014000 	.word	0x40014000
 8003338:	40014400 	.word	0x40014400
 800333c:	40014800 	.word	0x40014800

08003340 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	051b      	lsls	r3, r3, #20
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <TIM_OC6_SetConfig+0xb8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00f      	beq.n	80033bc <TIM_OC6_SetConfig+0x7c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a17      	ldr	r2, [pc, #92]	; (80033fc <TIM_OC6_SetConfig+0xbc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00b      	beq.n	80033bc <TIM_OC6_SetConfig+0x7c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a16      	ldr	r2, [pc, #88]	; (8003400 <TIM_OC6_SetConfig+0xc0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <TIM_OC6_SetConfig+0x7c>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <TIM_OC6_SetConfig+0xc4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_OC6_SetConfig+0x7c>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a14      	ldr	r2, [pc, #80]	; (8003408 <TIM_OC6_SetConfig+0xc8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d109      	bne.n	80033d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	029b      	lsls	r3, r3, #10
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40013400 	.word	0x40013400
 8003400:	40014000 	.word	0x40014000
 8003404:	40014400 	.word	0x40014400
 8003408:	40014800 	.word	0x40014800

0800340c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	f023 0201 	bic.w	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f023 030a 	bic.w	r3, r3, #10
 8003448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	621a      	str	r2, [r3, #32]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800346a:	b480      	push	{r7}
 800346c:	b087      	sub	sp, #28
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f023 0210 	bic.w	r2, r3, #16
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	031b      	lsls	r3, r3, #12
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	621a      	str	r2, [r3, #32]
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b085      	sub	sp, #20
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f043 0307 	orr.w	r3, r3, #7
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	609a      	str	r2, [r3, #8]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800351a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	021a      	lsls	r2, r3, #8
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	431a      	orrs	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4313      	orrs	r3, r2
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	609a      	str	r2, [r3, #8]
}
 8003534:	bf00      	nop
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	2201      	movs	r2, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	43db      	mvns	r3, r3
 8003562:	401a      	ands	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1a      	ldr	r2, [r3, #32]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e040      	b.n	800361e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d106      	bne.n	80035b2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f83a 	bl	8003626 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2224      	movs	r2, #36	; 0x24
 80035b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f8cb 	bl	8003764 <UART_SetConfig>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e022      	b.n	800361e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fb77 	bl	8003cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003604:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fbfe 	bl	8003e18 <UART_CheckIdleState>
 800361c:	4603      	mov	r3, r0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b08a      	sub	sp, #40	; 0x28
 800363e:	af02      	add	r7, sp, #8
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	4613      	mov	r3, r2
 8003648:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800364e:	2b20      	cmp	r3, #32
 8003650:	f040 8082 	bne.w	8003758 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_UART_Transmit+0x26>
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e07a      	b.n	800375a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_UART_Transmit+0x38>
 800366e:	2302      	movs	r3, #2
 8003670:	e073      	b.n	800375a <HAL_UART_Transmit+0x120>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2221      	movs	r2, #33	; 0x21
 8003686:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003688:	f7fd feaa 	bl	80013e0 <HAL_GetTick>
 800368c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	88fa      	ldrh	r2, [r7, #6]
 8003692:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	88fa      	ldrh	r2, [r7, #6]
 800369a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a6:	d108      	bne.n	80036ba <HAL_UART_Transmit+0x80>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e003      	b.n	80036c2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036ca:	e02d      	b.n	8003728 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fbe7 	bl	8003eaa <UART_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e039      	b.n	800375a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10b      	bne.n	8003704 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f8:	b292      	uxth	r2, r2
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	3302      	adds	r3, #2
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	e008      	b.n	8003716 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	b292      	uxth	r2, r2
 800370e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	3301      	adds	r3, #1
 8003714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1cb      	bne.n	80036cc <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2200      	movs	r2, #0
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fbb3 	bl	8003eaa <UART_WaitOnFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e005      	b.n	800375a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003768:	b08a      	sub	sp, #40	; 0x28
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	431a      	orrs	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	431a      	orrs	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	4313      	orrs	r3, r2
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	4ba4      	ldr	r3, [pc, #656]	; (8003a24 <UART_SetConfig+0x2c0>)
 8003794:	4013      	ands	r3, r2
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800379c:	430b      	orrs	r3, r1
 800379e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a99      	ldr	r2, [pc, #612]	; (8003a28 <UART_SetConfig+0x2c4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	4313      	orrs	r3, r2
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e0:	430a      	orrs	r2, r1
 80037e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a90      	ldr	r2, [pc, #576]	; (8003a2c <UART_SetConfig+0x2c8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d126      	bne.n	800383c <UART_SetConfig+0xd8>
 80037ee:	4b90      	ldr	r3, [pc, #576]	; (8003a30 <UART_SetConfig+0x2cc>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d81b      	bhi.n	8003834 <UART_SetConfig+0xd0>
 80037fc:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <UART_SetConfig+0xa0>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003815 	.word	0x08003815
 8003808:	08003825 	.word	0x08003825
 800380c:	0800381d 	.word	0x0800381d
 8003810:	0800382d 	.word	0x0800382d
 8003814:	2301      	movs	r3, #1
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381a:	e116      	b.n	8003a4a <UART_SetConfig+0x2e6>
 800381c:	2302      	movs	r3, #2
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003822:	e112      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003824:	2304      	movs	r3, #4
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382a:	e10e      	b.n	8003a4a <UART_SetConfig+0x2e6>
 800382c:	2308      	movs	r3, #8
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003832:	e10a      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003834:	2310      	movs	r3, #16
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383a:	e106      	b.n	8003a4a <UART_SetConfig+0x2e6>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a7c      	ldr	r2, [pc, #496]	; (8003a34 <UART_SetConfig+0x2d0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d138      	bne.n	80038b8 <UART_SetConfig+0x154>
 8003846:	4b7a      	ldr	r3, [pc, #488]	; (8003a30 <UART_SetConfig+0x2cc>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d82d      	bhi.n	80038b0 <UART_SetConfig+0x14c>
 8003854:	a201      	add	r2, pc, #4	; (adr r2, 800385c <UART_SetConfig+0xf8>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	08003891 	.word	0x08003891
 8003860:	080038b1 	.word	0x080038b1
 8003864:	080038b1 	.word	0x080038b1
 8003868:	080038b1 	.word	0x080038b1
 800386c:	080038a1 	.word	0x080038a1
 8003870:	080038b1 	.word	0x080038b1
 8003874:	080038b1 	.word	0x080038b1
 8003878:	080038b1 	.word	0x080038b1
 800387c:	08003899 	.word	0x08003899
 8003880:	080038b1 	.word	0x080038b1
 8003884:	080038b1 	.word	0x080038b1
 8003888:	080038b1 	.word	0x080038b1
 800388c:	080038a9 	.word	0x080038a9
 8003890:	2300      	movs	r3, #0
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003896:	e0d8      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003898:	2302      	movs	r3, #2
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389e:	e0d4      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80038a0:	2304      	movs	r3, #4
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a6:	e0d0      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80038a8:	2308      	movs	r3, #8
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e0cc      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80038b0:	2310      	movs	r3, #16
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b6:	e0c8      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5e      	ldr	r2, [pc, #376]	; (8003a38 <UART_SetConfig+0x2d4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d125      	bne.n	800390e <UART_SetConfig+0x1aa>
 80038c2:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <UART_SetConfig+0x2cc>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038cc:	2b30      	cmp	r3, #48	; 0x30
 80038ce:	d016      	beq.n	80038fe <UART_SetConfig+0x19a>
 80038d0:	2b30      	cmp	r3, #48	; 0x30
 80038d2:	d818      	bhi.n	8003906 <UART_SetConfig+0x1a2>
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d00a      	beq.n	80038ee <UART_SetConfig+0x18a>
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d814      	bhi.n	8003906 <UART_SetConfig+0x1a2>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <UART_SetConfig+0x182>
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d008      	beq.n	80038f6 <UART_SetConfig+0x192>
 80038e4:	e00f      	b.n	8003906 <UART_SetConfig+0x1a2>
 80038e6:	2300      	movs	r3, #0
 80038e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ec:	e0ad      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80038ee:	2302      	movs	r3, #2
 80038f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f4:	e0a9      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80038f6:	2304      	movs	r3, #4
 80038f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fc:	e0a5      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80038fe:	2308      	movs	r3, #8
 8003900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003904:	e0a1      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003906:	2310      	movs	r3, #16
 8003908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390c:	e09d      	b.n	8003a4a <UART_SetConfig+0x2e6>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a4a      	ldr	r2, [pc, #296]	; (8003a3c <UART_SetConfig+0x2d8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d125      	bne.n	8003964 <UART_SetConfig+0x200>
 8003918:	4b45      	ldr	r3, [pc, #276]	; (8003a30 <UART_SetConfig+0x2cc>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003922:	2bc0      	cmp	r3, #192	; 0xc0
 8003924:	d016      	beq.n	8003954 <UART_SetConfig+0x1f0>
 8003926:	2bc0      	cmp	r3, #192	; 0xc0
 8003928:	d818      	bhi.n	800395c <UART_SetConfig+0x1f8>
 800392a:	2b80      	cmp	r3, #128	; 0x80
 800392c:	d00a      	beq.n	8003944 <UART_SetConfig+0x1e0>
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d814      	bhi.n	800395c <UART_SetConfig+0x1f8>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <UART_SetConfig+0x1d8>
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d008      	beq.n	800394c <UART_SetConfig+0x1e8>
 800393a:	e00f      	b.n	800395c <UART_SetConfig+0x1f8>
 800393c:	2300      	movs	r3, #0
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003942:	e082      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003944:	2302      	movs	r3, #2
 8003946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394a:	e07e      	b.n	8003a4a <UART_SetConfig+0x2e6>
 800394c:	2304      	movs	r3, #4
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003952:	e07a      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003954:	2308      	movs	r3, #8
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395a:	e076      	b.n	8003a4a <UART_SetConfig+0x2e6>
 800395c:	2310      	movs	r3, #16
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003962:	e072      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a35      	ldr	r2, [pc, #212]	; (8003a40 <UART_SetConfig+0x2dc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d12a      	bne.n	80039c4 <UART_SetConfig+0x260>
 800396e:	4b30      	ldr	r3, [pc, #192]	; (8003a30 <UART_SetConfig+0x2cc>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397c:	d01a      	beq.n	80039b4 <UART_SetConfig+0x250>
 800397e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003982:	d81b      	bhi.n	80039bc <UART_SetConfig+0x258>
 8003984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003988:	d00c      	beq.n	80039a4 <UART_SetConfig+0x240>
 800398a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800398e:	d815      	bhi.n	80039bc <UART_SetConfig+0x258>
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <UART_SetConfig+0x238>
 8003994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003998:	d008      	beq.n	80039ac <UART_SetConfig+0x248>
 800399a:	e00f      	b.n	80039bc <UART_SetConfig+0x258>
 800399c:	2300      	movs	r3, #0
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a2:	e052      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80039a4:	2302      	movs	r3, #2
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039aa:	e04e      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80039ac:	2304      	movs	r3, #4
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e04a      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80039b4:	2308      	movs	r3, #8
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e046      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80039bc:	2310      	movs	r3, #16
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e042      	b.n	8003a4a <UART_SetConfig+0x2e6>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <UART_SetConfig+0x2c4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d13a      	bne.n	8003a44 <UART_SetConfig+0x2e0>
 80039ce:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <UART_SetConfig+0x2cc>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039dc:	d01a      	beq.n	8003a14 <UART_SetConfig+0x2b0>
 80039de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039e2:	d81b      	bhi.n	8003a1c <UART_SetConfig+0x2b8>
 80039e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e8:	d00c      	beq.n	8003a04 <UART_SetConfig+0x2a0>
 80039ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ee:	d815      	bhi.n	8003a1c <UART_SetConfig+0x2b8>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <UART_SetConfig+0x298>
 80039f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f8:	d008      	beq.n	8003a0c <UART_SetConfig+0x2a8>
 80039fa:	e00f      	b.n	8003a1c <UART_SetConfig+0x2b8>
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a02:	e022      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003a04:	2302      	movs	r3, #2
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e01e      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e01a      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003a14:	2308      	movs	r3, #8
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e016      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e012      	b.n	8003a4a <UART_SetConfig+0x2e6>
 8003a24:	efff69f3 	.word	0xefff69f3
 8003a28:	40008000 	.word	0x40008000
 8003a2c:	40013800 	.word	0x40013800
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40004400 	.word	0x40004400
 8003a38:	40004800 	.word	0x40004800
 8003a3c:	40004c00 	.word	0x40004c00
 8003a40:	40005000 	.word	0x40005000
 8003a44:	2310      	movs	r3, #16
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a9f      	ldr	r2, [pc, #636]	; (8003ccc <UART_SetConfig+0x568>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d17a      	bne.n	8003b4a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d824      	bhi.n	8003aa6 <UART_SetConfig+0x342>
 8003a5c:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <UART_SetConfig+0x300>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a89 	.word	0x08003a89
 8003a68:	08003aa7 	.word	0x08003aa7
 8003a6c:	08003a91 	.word	0x08003a91
 8003a70:	08003aa7 	.word	0x08003aa7
 8003a74:	08003a97 	.word	0x08003a97
 8003a78:	08003aa7 	.word	0x08003aa7
 8003a7c:	08003aa7 	.word	0x08003aa7
 8003a80:	08003aa7 	.word	0x08003aa7
 8003a84:	08003a9f 	.word	0x08003a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a88:	f7fe fd1e 	bl	80024c8 <HAL_RCC_GetPCLK1Freq>
 8003a8c:	61f8      	str	r0, [r7, #28]
        break;
 8003a8e:	e010      	b.n	8003ab2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a90:	4b8f      	ldr	r3, [pc, #572]	; (8003cd0 <UART_SetConfig+0x56c>)
 8003a92:	61fb      	str	r3, [r7, #28]
        break;
 8003a94:	e00d      	b.n	8003ab2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a96:	f7fe fc7f 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8003a9a:	61f8      	str	r0, [r7, #28]
        break;
 8003a9c:	e009      	b.n	8003ab2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aa2:	61fb      	str	r3, [r7, #28]
        break;
 8003aa4:	e005      	b.n	8003ab2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ab0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80fb 	beq.w	8003cb0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d305      	bcc.n	8003ad6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d903      	bls.n	8003ade <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003adc:	e0e8      	b.n	8003cb0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	461c      	mov	r4, r3
 8003ae4:	4615      	mov	r5, r2
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	022b      	lsls	r3, r5, #8
 8003af0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003af4:	0222      	lsls	r2, r4, #8
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	6849      	ldr	r1, [r1, #4]
 8003afa:	0849      	lsrs	r1, r1, #1
 8003afc:	2000      	movs	r0, #0
 8003afe:	4688      	mov	r8, r1
 8003b00:	4681      	mov	r9, r0
 8003b02:	eb12 0a08 	adds.w	sl, r2, r8
 8003b06:	eb43 0b09 	adc.w	fp, r3, r9
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b18:	4650      	mov	r0, sl
 8003b1a:	4659      	mov	r1, fp
 8003b1c:	f7fd f8b4 	bl	8000c88 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b2e:	d308      	bcc.n	8003b42 <UART_SetConfig+0x3de>
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b36:	d204      	bcs.n	8003b42 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	60da      	str	r2, [r3, #12]
 8003b40:	e0b6      	b.n	8003cb0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b48:	e0b2      	b.n	8003cb0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b52:	d15e      	bne.n	8003c12 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d828      	bhi.n	8003bae <UART_SetConfig+0x44a>
 8003b5c:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <UART_SetConfig+0x400>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b89 	.word	0x08003b89
 8003b68:	08003b91 	.word	0x08003b91
 8003b6c:	08003b99 	.word	0x08003b99
 8003b70:	08003baf 	.word	0x08003baf
 8003b74:	08003b9f 	.word	0x08003b9f
 8003b78:	08003baf 	.word	0x08003baf
 8003b7c:	08003baf 	.word	0x08003baf
 8003b80:	08003baf 	.word	0x08003baf
 8003b84:	08003ba7 	.word	0x08003ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b88:	f7fe fc9e 	bl	80024c8 <HAL_RCC_GetPCLK1Freq>
 8003b8c:	61f8      	str	r0, [r7, #28]
        break;
 8003b8e:	e014      	b.n	8003bba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b90:	f7fe fcb0 	bl	80024f4 <HAL_RCC_GetPCLK2Freq>
 8003b94:	61f8      	str	r0, [r7, #28]
        break;
 8003b96:	e010      	b.n	8003bba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b98:	4b4d      	ldr	r3, [pc, #308]	; (8003cd0 <UART_SetConfig+0x56c>)
 8003b9a:	61fb      	str	r3, [r7, #28]
        break;
 8003b9c:	e00d      	b.n	8003bba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b9e:	f7fe fbfb 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8003ba2:	61f8      	str	r0, [r7, #28]
        break;
 8003ba4:	e009      	b.n	8003bba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003baa:	61fb      	str	r3, [r7, #28]
        break;
 8003bac:	e005      	b.n	8003bba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d077      	beq.n	8003cb0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005a      	lsls	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	441a      	add	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b0f      	cmp	r3, #15
 8003bda:	d916      	bls.n	8003c0a <UART_SetConfig+0x4a6>
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be2:	d212      	bcs.n	8003c0a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f023 030f 	bic.w	r3, r3, #15
 8003bec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	8afb      	ldrh	r3, [r7, #22]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	8afa      	ldrh	r2, [r7, #22]
 8003c06:	60da      	str	r2, [r3, #12]
 8003c08:	e052      	b.n	8003cb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c10:	e04e      	b.n	8003cb0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d827      	bhi.n	8003c6a <UART_SetConfig+0x506>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <UART_SetConfig+0x4bc>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c45 	.word	0x08003c45
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	08003c55 	.word	0x08003c55
 8003c2c:	08003c6b 	.word	0x08003c6b
 8003c30:	08003c5b 	.word	0x08003c5b
 8003c34:	08003c6b 	.word	0x08003c6b
 8003c38:	08003c6b 	.word	0x08003c6b
 8003c3c:	08003c6b 	.word	0x08003c6b
 8003c40:	08003c63 	.word	0x08003c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c44:	f7fe fc40 	bl	80024c8 <HAL_RCC_GetPCLK1Freq>
 8003c48:	61f8      	str	r0, [r7, #28]
        break;
 8003c4a:	e014      	b.n	8003c76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c4c:	f7fe fc52 	bl	80024f4 <HAL_RCC_GetPCLK2Freq>
 8003c50:	61f8      	str	r0, [r7, #28]
        break;
 8003c52:	e010      	b.n	8003c76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <UART_SetConfig+0x56c>)
 8003c56:	61fb      	str	r3, [r7, #28]
        break;
 8003c58:	e00d      	b.n	8003c76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5a:	f7fe fb9d 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8003c5e:	61f8      	str	r0, [r7, #28]
        break;
 8003c60:	e009      	b.n	8003c76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c66:	61fb      	str	r3, [r7, #28]
        break;
 8003c68:	e005      	b.n	8003c76 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c74:	bf00      	nop
    }

    if (pclk != 0U)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d019      	beq.n	8003cb0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	085a      	lsrs	r2, r3, #1
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	441a      	add	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b0f      	cmp	r3, #15
 8003c94:	d909      	bls.n	8003caa <UART_SetConfig+0x546>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d205      	bcs.n	8003caa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60da      	str	r2, [r3, #12]
 8003ca8:	e002      	b.n	8003cb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3728      	adds	r7, #40	; 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cca:	bf00      	nop
 8003ccc:	40008000 	.word	0x40008000
 8003cd0:	00f42400 	.word	0x00f42400

08003cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01a      	beq.n	8003dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd2:	d10a      	bne.n	8003dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e28:	f7fd fada 	bl	80013e0 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d10e      	bne.n	8003e5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f82d 	bl	8003eaa <UART_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e023      	b.n	8003ea2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d10e      	bne.n	8003e86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f817 	bl	8003eaa <UART_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e00d      	b.n	8003ea2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b09c      	sub	sp, #112	; 0x70
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	603b      	str	r3, [r7, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eba:	e0a5      	b.n	8004008 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec2:	f000 80a1 	beq.w	8004008 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7fd fa8b 	bl	80013e0 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <UART_WaitOnFlagUntilTimeout+0x32>
 8003ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d13e      	bne.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ef0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003efc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e6      	bne.n	8003edc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3308      	adds	r3, #8
 8003f14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	663b      	str	r3, [r7, #96]	; 0x60
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e5      	bne.n	8003f0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e067      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d04f      	beq.n	8004008 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f76:	d147      	bne.n	8004008 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f80:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e6      	bne.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3308      	adds	r3, #8
 8003fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fd4:	623a      	str	r2, [r7, #32]
 8003fd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	69f9      	ldr	r1, [r7, #28]
 8003fda:	6a3a      	ldr	r2, [r7, #32]
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e010      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69da      	ldr	r2, [r3, #28]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4013      	ands	r3, r2
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	429a      	cmp	r2, r3
 8004024:	f43f af4a 	beq.w	8003ebc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3770      	adds	r7, #112	; 0x70
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <Global_GPIO_Init>:
 *      Author: felipe
 */
#include "GPIO.h"


void Global_GPIO_Init() {
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800403a:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <Global_GPIO_Init+0x74>)
 800403c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403e:	4a1a      	ldr	r2, [pc, #104]	; (80040a8 <Global_GPIO_Init+0x74>)
 8004040:	f043 0304 	orr.w	r3, r3, #4
 8004044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004046:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <Global_GPIO_Init+0x74>)
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <Global_GPIO_Init+0x74>)
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <Global_GPIO_Init+0x74>)
 8004058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <Global_GPIO_Init+0x74>)
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <Global_GPIO_Init+0x74>)
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406e:	4a0e      	ldr	r2, [pc, #56]	; (80040a8 <Global_GPIO_Init+0x74>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <Global_GPIO_Init+0x74>)
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <Global_GPIO_Init+0x74>)
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004086:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <Global_GPIO_Init+0x74>)
 8004088:	f043 0302 	orr.w	r3, r3, #2
 800408c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <Global_GPIO_Init+0x74>)
 8004090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
}
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000

080040ac <PWM_Gpio>:

#include "PWM.h"

TIM_HandleTypeDef Tim4;

void PWM_Gpio(void) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
	//PB6 -> CH1 TIM4
	GPIO_InitTypeDef GpioInit = {0};
 80040b2:	1d3b      	adds	r3, r7, #4
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <PWM_Gpio+0x54>)
 80040c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c4:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <PWM_Gpio+0x54>)
 80040c6:	f043 0302 	orr.w	r3, r3, #2
 80040ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <PWM_Gpio+0x54>)
 80040ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]

	GpioInit.Pin = GPIO_PIN_6;
 80040d8:	2340      	movs	r3, #64	; 0x40
 80040da:	607b      	str	r3, [r7, #4]
	GpioInit.Mode = GPIO_MODE_AF_PP;
 80040dc:	2302      	movs	r3, #2
 80040de:	60bb      	str	r3, [r7, #8]
	GpioInit.Pull = GPIO_NOPULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
	GpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]
	GpioInit.Alternate = GPIO_AF2_TIM4;
 80040e8:	2302      	movs	r3, #2
 80040ea:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &GpioInit);
 80040ec:	1d3b      	adds	r3, r7, #4
 80040ee:	4619      	mov	r1, r3
 80040f0:	4804      	ldr	r0, [pc, #16]	; (8004104 <PWM_Gpio+0x58>)
 80040f2:	f7fd fa67 	bl	80015c4 <HAL_GPIO_Init>
}
 80040f6:	bf00      	nop
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
 8004104:	48000400 	.word	0x48000400

08004108 <PWM_Init>:

void PWM_Init(void) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b08c      	sub	sp, #48	; 0x30
 800410c:	af00      	add	r7, sp, #0
	PWM_Gpio();
 800410e:	f7ff ffcd 	bl	80040ac <PWM_Gpio>

	__HAL_RCC_TIM4_CLK_ENABLE();
 8004112:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <PWM_Init+0xac>)
 8004114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004116:	4a27      	ldr	r2, [pc, #156]	; (80041b4 <PWM_Init+0xac>)
 8004118:	f043 0304 	orr.w	r3, r3, #4
 800411c:	6593      	str	r3, [r2, #88]	; 0x58
 800411e:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <PWM_Init+0xac>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	683b      	ldr	r3, [r7, #0]

	Tim4.Instance = TIM4;
 800412a:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <PWM_Init+0xb0>)
 800412c:	4a23      	ldr	r2, [pc, #140]	; (80041bc <PWM_Init+0xb4>)
 800412e:	601a      	str	r2, [r3, #0]
	Tim4.Init.Prescaler = 80 -1;
 8004130:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <PWM_Init+0xb0>)
 8004132:	224f      	movs	r2, #79	; 0x4f
 8004134:	605a      	str	r2, [r3, #4]
	Tim4.Init.Period = 20000 - 1;
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <PWM_Init+0xb0>)
 8004138:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800413c:	60da      	str	r2, [r3, #12]
	Tim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <PWM_Init+0xb0>)
 8004140:	2200      	movs	r2, #0
 8004142:	609a      	str	r2, [r3, #8]
	Tim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004144:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <PWM_Init+0xb0>)
 8004146:	2200      	movs	r2, #0
 8004148:	611a      	str	r2, [r3, #16]
	Tim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <PWM_Init+0xb0>)
 800414c:	2200      	movs	r2, #0
 800414e:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&Tim4);
 8004150:	4819      	ldr	r0, [pc, #100]	; (80041b8 <PWM_Init+0xb0>)
 8004152:	f7fe fa45 	bl	80025e0 <HAL_TIM_Base_Init>

	TIM_ClockConfigTypeDef sClock = {0};
 8004156:	f107 0320 	add.w	r3, r7, #32
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	605a      	str	r2, [r3, #4]
 8004160:	609a      	str	r2, [r3, #8]
 8004162:	60da      	str	r2, [r3, #12]

	sClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004168:	623b      	str	r3, [r7, #32]

	HAL_TIM_ConfigClockSource(&Tim4, &sClock);
 800416a:	f107 0320 	add.w	r3, r7, #32
 800416e:	4619      	mov	r1, r3
 8004170:	4811      	ldr	r0, [pc, #68]	; (80041b8 <PWM_Init+0xb0>)
 8004172:	f7fe fd11 	bl	8002b98 <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(&Tim4);
 8004176:	4810      	ldr	r0, [pc, #64]	; (80041b8 <PWM_Init+0xb0>)
 8004178:	f7fe fa93 	bl	80026a2 <HAL_TIM_PWM_Init>

	TIM_OC_InitTypeDef Tim_OC = {0};
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	609a      	str	r2, [r3, #8]
 8004186:	60da      	str	r2, [r3, #12]
 8004188:	611a      	str	r2, [r3, #16]
 800418a:	615a      	str	r2, [r3, #20]
 800418c:	619a      	str	r2, [r3, #24]

	Tim_OC.OCMode = TIM_OCMODE_PWM1;
 800418e:	2360      	movs	r3, #96	; 0x60
 8004190:	607b      	str	r3, [r7, #4]
	Tim_OC.Pulse = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]
	Tim_OC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
	Tim_OC.OCFastMode = TIM_OCFAST_DISABLE;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]

	HAL_TIM_PWM_ConfigChannel(&Tim4, &Tim_OC, TIM_CHANNEL_1);
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	2200      	movs	r2, #0
 80041a2:	4619      	mov	r1, r3
 80041a4:	4804      	ldr	r0, [pc, #16]	; (80041b8 <PWM_Init+0xb0>)
 80041a6:	f7fe fbe3 	bl	8002970 <HAL_TIM_PWM_ConfigChannel>

}
 80041aa:	bf00      	nop
 80041ac:	3730      	adds	r7, #48	; 0x30
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000
 80041b8:	20000204 	.word	0x20000204
 80041bc:	40000800 	.word	0x40000800

080041c0 <PWM_SetDutyCycle_CH1>:


void PWM_SetDutyCycle_CH1(uint8_t duty_cycle) {
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
	uint16_t ccr_value;

	if (duty_cycle > 100) {
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	2b64      	cmp	r3, #100	; 0x64
 80041ce:	d901      	bls.n	80041d4 <PWM_SetDutyCycle_CH1+0x14>
		duty_cycle = 100;
 80041d0:	2364      	movs	r3, #100	; 0x64
 80041d2:	71fb      	strb	r3, [r7, #7]
	}

	ccr_value = (uint16_t)(__HAL_TIM_GET_AUTORELOAD(&Tim4) + 0.0f) * (duty_cycle/100.0f);
 80041d4:	4b16      	ldr	r3, [pc, #88]	; (8004230 <PWM_SetDutyCycle_CH1+0x70>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004234 <PWM_SetDutyCycle_CH1+0x74>
 80041e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ee:	ee17 3a90 	vmov	r3, s15
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	ee07 3a90 	vmov	s15, r3
 80041f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004206:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8004238 <PWM_SetDutyCycle_CH1+0x78>
 800420a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004216:	ee17 3a90 	vmov	r3, s15
 800421a:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&Tim4, TIM_CHANNEL_1, ccr_value);
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <PWM_SetDutyCycle_CH1+0x70>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	89fa      	ldrh	r2, [r7, #14]
 8004222:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	20000204 	.word	0x20000204
 8004234:	00000000 	.word	0x00000000
 8004238:	42c80000 	.word	0x42c80000

0800423c <SysConfigClock>:
 */

#include "SysConfig.h"


void SysConfigClock(void){
 800423c:	b580      	push	{r7, lr}
 800423e:	b096      	sub	sp, #88	; 0x58
 8004240:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004242:	f107 0314 	add.w	r3, r7, #20
 8004246:	2244      	movs	r2, #68	; 0x44
 8004248:	2100      	movs	r1, #0
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f8da 	bl	8004404 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004250:	463b      	mov	r3, r7
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	609a      	str	r2, [r3, #8]
 800425a:	60da      	str	r2, [r3, #12]
 800425c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800425e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004262:	f7fd fb67 	bl	8001934 <HAL_PWREx_ControlVoltageScaling>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <SysConfigClock+0x34>
	{
		Error_Handler();
 800426c:	f000 f837 	bl	80042de <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004270:	2302      	movs	r3, #2
 8004272:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004278:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800427a:	2310      	movs	r3, #16
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800427e:	2302      	movs	r3, #2
 8004280:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004282:	2302      	movs	r3, #2
 8004284:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8004286:	2301      	movs	r3, #1
 8004288:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800428a:	230a      	movs	r3, #10
 800428c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800428e:	2307      	movs	r3, #7
 8004290:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004292:	2302      	movs	r3, #2
 8004294:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004296:	2302      	movs	r3, #2
 8004298:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800429a:	f107 0314 	add.w	r3, r7, #20
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fd fb9e 	bl	80019e0 <HAL_RCC_OscConfig>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <SysConfigClock+0x72>
	{
		Error_Handler();
 80042aa:	f000 f818 	bl	80042de <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042ae:	230f      	movs	r3, #15
 80042b0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042b2:	2303      	movs	r3, #3
 80042b4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80042c2:	463b      	mov	r3, r7
 80042c4:	2104      	movs	r1, #4
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fd ff66 	bl	8002198 <HAL_RCC_ClockConfig>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <SysConfigClock+0x9a>
	{
		Error_Handler();
 80042d2:	f000 f804 	bl	80042de <Error_Handler>
	}
}
 80042d6:	bf00      	nop
 80042d8:	3758      	adds	r7, #88	; 0x58
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <Error_Handler>:



void Error_Handler(void)
{
 80042de:	b480      	push	{r7}
 80042e0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80042e2:	b672      	cpsid	i
}
 80042e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042e6:	e7fe      	b.n	80042e6 <Error_Handler+0x8>

080042e8 <USART_Gpio>:
#include "USART.h"


UART_HandleTypeDef USART2_I;

void USART_Gpio(void){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
	// PA2 -> TX & PA3 -> RX

	GPIO_InitTypeDef GpioInit = {0};
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <USART_Gpio+0x54>)
 80042fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004300:	4a0e      	ldr	r2, [pc, #56]	; (800433c <USART_Gpio+0x54>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <USART_Gpio+0x54>)
 800430a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	683b      	ldr	r3, [r7, #0]

	GpioInit.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8004314:	230c      	movs	r3, #12
 8004316:	607b      	str	r3, [r7, #4]
	GpioInit.Mode = GPIO_MODE_AF_PP;
 8004318:	2302      	movs	r3, #2
 800431a:	60bb      	str	r3, [r7, #8]
	GpioInit.Pull = GPIO_NOPULL;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
	GpioInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004320:	2302      	movs	r3, #2
 8004322:	613b      	str	r3, [r7, #16]
	GpioInit.Alternate = GPIO_AF7_USART2;
 8004324:	2307      	movs	r3, #7
 8004326:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOA, &GpioInit);
 8004328:	1d3b      	adds	r3, r7, #4
 800432a:	4619      	mov	r1, r3
 800432c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004330:	f7fd f948 	bl	80015c4 <HAL_GPIO_Init>

}
 8004334:	bf00      	nop
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000

08004340 <USART_Init>:

void USART_Init(uint32_t baud){
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	USART_Gpio();
 8004348:	f7ff ffce 	bl	80042e8 <USART_Gpio>

	__HAL_RCC_USART2_CLK_ENABLE();
 800434c:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <USART_Init+0x64>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <USART_Init+0x64>)
 8004352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004356:	6593      	str	r3, [r2, #88]	; 0x58
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <USART_Init+0x64>)
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]

	USART2_I.Instance = USART2;
 8004364:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <USART_Init+0x68>)
 8004366:	4a11      	ldr	r2, [pc, #68]	; (80043ac <USART_Init+0x6c>)
 8004368:	601a      	str	r2, [r3, #0]
	USART2_I.Init.BaudRate = baud;
 800436a:	4a0f      	ldr	r2, [pc, #60]	; (80043a8 <USART_Init+0x68>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6053      	str	r3, [r2, #4]
	USART2_I.Init.WordLength = UART_WORDLENGTH_8B;
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <USART_Init+0x68>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
	USART2_I.Init.StopBits = UART_STOPBITS_1;
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <USART_Init+0x68>)
 8004378:	2200      	movs	r2, #0
 800437a:	60da      	str	r2, [r3, #12]
	USART2_I.Init.Parity = UART_PARITY_NONE;
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <USART_Init+0x68>)
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]
	USART2_I.Init.Mode = UART_MODE_TX_RX;
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <USART_Init+0x68>)
 8004384:	220c      	movs	r2, #12
 8004386:	615a      	str	r2, [r3, #20]
	USART2_I.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004388:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <USART_Init+0x68>)
 800438a:	2200      	movs	r2, #0
 800438c:	619a      	str	r2, [r3, #24]
	USART2_I.Init.OverSampling = UART_OVERSAMPLING_16;
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <USART_Init+0x68>)
 8004390:	2200      	movs	r2, #0
 8004392:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&USART2_I);
 8004394:	4804      	ldr	r0, [pc, #16]	; (80043a8 <USART_Init+0x68>)
 8004396:	f7ff f8f8 	bl	800358a <HAL_UART_Init>

}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	20000250 	.word	0x20000250
 80043ac:	40004400 	.word	0x40004400

080043b0 <__errno>:
 80043b0:	4b01      	ldr	r3, [pc, #4]	; (80043b8 <__errno+0x8>)
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	2000000c 	.word	0x2000000c

080043bc <__libc_init_array>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	4d0d      	ldr	r5, [pc, #52]	; (80043f4 <__libc_init_array+0x38>)
 80043c0:	4c0d      	ldr	r4, [pc, #52]	; (80043f8 <__libc_init_array+0x3c>)
 80043c2:	1b64      	subs	r4, r4, r5
 80043c4:	10a4      	asrs	r4, r4, #2
 80043c6:	2600      	movs	r6, #0
 80043c8:	42a6      	cmp	r6, r4
 80043ca:	d109      	bne.n	80043e0 <__libc_init_array+0x24>
 80043cc:	4d0b      	ldr	r5, [pc, #44]	; (80043fc <__libc_init_array+0x40>)
 80043ce:	4c0c      	ldr	r4, [pc, #48]	; (8004400 <__libc_init_array+0x44>)
 80043d0:	f004 fd00 	bl	8008dd4 <_init>
 80043d4:	1b64      	subs	r4, r4, r5
 80043d6:	10a4      	asrs	r4, r4, #2
 80043d8:	2600      	movs	r6, #0
 80043da:	42a6      	cmp	r6, r4
 80043dc:	d105      	bne.n	80043ea <__libc_init_array+0x2e>
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e4:	4798      	blx	r3
 80043e6:	3601      	adds	r6, #1
 80043e8:	e7ee      	b.n	80043c8 <__libc_init_array+0xc>
 80043ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ee:	4798      	blx	r3
 80043f0:	3601      	adds	r6, #1
 80043f2:	e7f2      	b.n	80043da <__libc_init_array+0x1e>
 80043f4:	080092fc 	.word	0x080092fc
 80043f8:	080092fc 	.word	0x080092fc
 80043fc:	080092fc 	.word	0x080092fc
 8004400:	08009300 	.word	0x08009300

08004404 <memset>:
 8004404:	4402      	add	r2, r0
 8004406:	4603      	mov	r3, r0
 8004408:	4293      	cmp	r3, r2
 800440a:	d100      	bne.n	800440e <memset+0xa>
 800440c:	4770      	bx	lr
 800440e:	f803 1b01 	strb.w	r1, [r3], #1
 8004412:	e7f9      	b.n	8004408 <memset+0x4>

08004414 <__cvt>:
 8004414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004418:	ec55 4b10 	vmov	r4, r5, d0
 800441c:	2d00      	cmp	r5, #0
 800441e:	460e      	mov	r6, r1
 8004420:	4619      	mov	r1, r3
 8004422:	462b      	mov	r3, r5
 8004424:	bfbb      	ittet	lt
 8004426:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800442a:	461d      	movlt	r5, r3
 800442c:	2300      	movge	r3, #0
 800442e:	232d      	movlt	r3, #45	; 0x2d
 8004430:	700b      	strb	r3, [r1, #0]
 8004432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004434:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004438:	4691      	mov	r9, r2
 800443a:	f023 0820 	bic.w	r8, r3, #32
 800443e:	bfbc      	itt	lt
 8004440:	4622      	movlt	r2, r4
 8004442:	4614      	movlt	r4, r2
 8004444:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004448:	d005      	beq.n	8004456 <__cvt+0x42>
 800444a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800444e:	d100      	bne.n	8004452 <__cvt+0x3e>
 8004450:	3601      	adds	r6, #1
 8004452:	2102      	movs	r1, #2
 8004454:	e000      	b.n	8004458 <__cvt+0x44>
 8004456:	2103      	movs	r1, #3
 8004458:	ab03      	add	r3, sp, #12
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	ab02      	add	r3, sp, #8
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	ec45 4b10 	vmov	d0, r4, r5
 8004464:	4653      	mov	r3, sl
 8004466:	4632      	mov	r2, r6
 8004468:	f001 fee2 	bl	8006230 <_dtoa_r>
 800446c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004470:	4607      	mov	r7, r0
 8004472:	d102      	bne.n	800447a <__cvt+0x66>
 8004474:	f019 0f01 	tst.w	r9, #1
 8004478:	d022      	beq.n	80044c0 <__cvt+0xac>
 800447a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800447e:	eb07 0906 	add.w	r9, r7, r6
 8004482:	d110      	bne.n	80044a6 <__cvt+0x92>
 8004484:	783b      	ldrb	r3, [r7, #0]
 8004486:	2b30      	cmp	r3, #48	; 0x30
 8004488:	d10a      	bne.n	80044a0 <__cvt+0x8c>
 800448a:	2200      	movs	r2, #0
 800448c:	2300      	movs	r3, #0
 800448e:	4620      	mov	r0, r4
 8004490:	4629      	mov	r1, r5
 8004492:	f7fc fb19 	bl	8000ac8 <__aeabi_dcmpeq>
 8004496:	b918      	cbnz	r0, 80044a0 <__cvt+0x8c>
 8004498:	f1c6 0601 	rsb	r6, r6, #1
 800449c:	f8ca 6000 	str.w	r6, [sl]
 80044a0:	f8da 3000 	ldr.w	r3, [sl]
 80044a4:	4499      	add	r9, r3
 80044a6:	2200      	movs	r2, #0
 80044a8:	2300      	movs	r3, #0
 80044aa:	4620      	mov	r0, r4
 80044ac:	4629      	mov	r1, r5
 80044ae:	f7fc fb0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80044b2:	b108      	cbz	r0, 80044b8 <__cvt+0xa4>
 80044b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80044b8:	2230      	movs	r2, #48	; 0x30
 80044ba:	9b03      	ldr	r3, [sp, #12]
 80044bc:	454b      	cmp	r3, r9
 80044be:	d307      	bcc.n	80044d0 <__cvt+0xbc>
 80044c0:	9b03      	ldr	r3, [sp, #12]
 80044c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044c4:	1bdb      	subs	r3, r3, r7
 80044c6:	4638      	mov	r0, r7
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	b004      	add	sp, #16
 80044cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d0:	1c59      	adds	r1, r3, #1
 80044d2:	9103      	str	r1, [sp, #12]
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e7f0      	b.n	80044ba <__cvt+0xa6>

080044d8 <__exponent>:
 80044d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044da:	4603      	mov	r3, r0
 80044dc:	2900      	cmp	r1, #0
 80044de:	bfb8      	it	lt
 80044e0:	4249      	neglt	r1, r1
 80044e2:	f803 2b02 	strb.w	r2, [r3], #2
 80044e6:	bfb4      	ite	lt
 80044e8:	222d      	movlt	r2, #45	; 0x2d
 80044ea:	222b      	movge	r2, #43	; 0x2b
 80044ec:	2909      	cmp	r1, #9
 80044ee:	7042      	strb	r2, [r0, #1]
 80044f0:	dd2a      	ble.n	8004548 <__exponent+0x70>
 80044f2:	f10d 0407 	add.w	r4, sp, #7
 80044f6:	46a4      	mov	ip, r4
 80044f8:	270a      	movs	r7, #10
 80044fa:	46a6      	mov	lr, r4
 80044fc:	460a      	mov	r2, r1
 80044fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8004502:	fb07 1516 	mls	r5, r7, r6, r1
 8004506:	3530      	adds	r5, #48	; 0x30
 8004508:	2a63      	cmp	r2, #99	; 0x63
 800450a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800450e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004512:	4631      	mov	r1, r6
 8004514:	dcf1      	bgt.n	80044fa <__exponent+0x22>
 8004516:	3130      	adds	r1, #48	; 0x30
 8004518:	f1ae 0502 	sub.w	r5, lr, #2
 800451c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004520:	1c44      	adds	r4, r0, #1
 8004522:	4629      	mov	r1, r5
 8004524:	4561      	cmp	r1, ip
 8004526:	d30a      	bcc.n	800453e <__exponent+0x66>
 8004528:	f10d 0209 	add.w	r2, sp, #9
 800452c:	eba2 020e 	sub.w	r2, r2, lr
 8004530:	4565      	cmp	r5, ip
 8004532:	bf88      	it	hi
 8004534:	2200      	movhi	r2, #0
 8004536:	4413      	add	r3, r2
 8004538:	1a18      	subs	r0, r3, r0
 800453a:	b003      	add	sp, #12
 800453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800453e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004542:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004546:	e7ed      	b.n	8004524 <__exponent+0x4c>
 8004548:	2330      	movs	r3, #48	; 0x30
 800454a:	3130      	adds	r1, #48	; 0x30
 800454c:	7083      	strb	r3, [r0, #2]
 800454e:	70c1      	strb	r1, [r0, #3]
 8004550:	1d03      	adds	r3, r0, #4
 8004552:	e7f1      	b.n	8004538 <__exponent+0x60>

08004554 <_printf_float>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	ed2d 8b02 	vpush	{d8}
 800455c:	b08d      	sub	sp, #52	; 0x34
 800455e:	460c      	mov	r4, r1
 8004560:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004564:	4616      	mov	r6, r2
 8004566:	461f      	mov	r7, r3
 8004568:	4605      	mov	r5, r0
 800456a:	f003 f975 	bl	8007858 <_localeconv_r>
 800456e:	f8d0 a000 	ldr.w	sl, [r0]
 8004572:	4650      	mov	r0, sl
 8004574:	f7fb fe2c 	bl	80001d0 <strlen>
 8004578:	2300      	movs	r3, #0
 800457a:	930a      	str	r3, [sp, #40]	; 0x28
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	9305      	str	r3, [sp, #20]
 8004580:	f8d8 3000 	ldr.w	r3, [r8]
 8004584:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004588:	3307      	adds	r3, #7
 800458a:	f023 0307 	bic.w	r3, r3, #7
 800458e:	f103 0208 	add.w	r2, r3, #8
 8004592:	f8c8 2000 	str.w	r2, [r8]
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800459e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80045a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045a6:	9307      	str	r3, [sp, #28]
 80045a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80045ac:	ee08 0a10 	vmov	s16, r0
 80045b0:	4b9f      	ldr	r3, [pc, #636]	; (8004830 <_printf_float+0x2dc>)
 80045b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045ba:	f7fc fab7 	bl	8000b2c <__aeabi_dcmpun>
 80045be:	bb88      	cbnz	r0, 8004624 <_printf_float+0xd0>
 80045c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045c4:	4b9a      	ldr	r3, [pc, #616]	; (8004830 <_printf_float+0x2dc>)
 80045c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045ca:	f7fc fa91 	bl	8000af0 <__aeabi_dcmple>
 80045ce:	bb48      	cbnz	r0, 8004624 <_printf_float+0xd0>
 80045d0:	2200      	movs	r2, #0
 80045d2:	2300      	movs	r3, #0
 80045d4:	4640      	mov	r0, r8
 80045d6:	4649      	mov	r1, r9
 80045d8:	f7fc fa80 	bl	8000adc <__aeabi_dcmplt>
 80045dc:	b110      	cbz	r0, 80045e4 <_printf_float+0x90>
 80045de:	232d      	movs	r3, #45	; 0x2d
 80045e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e4:	4b93      	ldr	r3, [pc, #588]	; (8004834 <_printf_float+0x2e0>)
 80045e6:	4894      	ldr	r0, [pc, #592]	; (8004838 <_printf_float+0x2e4>)
 80045e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80045ec:	bf94      	ite	ls
 80045ee:	4698      	movls	r8, r3
 80045f0:	4680      	movhi	r8, r0
 80045f2:	2303      	movs	r3, #3
 80045f4:	6123      	str	r3, [r4, #16]
 80045f6:	9b05      	ldr	r3, [sp, #20]
 80045f8:	f023 0204 	bic.w	r2, r3, #4
 80045fc:	6022      	str	r2, [r4, #0]
 80045fe:	f04f 0900 	mov.w	r9, #0
 8004602:	9700      	str	r7, [sp, #0]
 8004604:	4633      	mov	r3, r6
 8004606:	aa0b      	add	r2, sp, #44	; 0x2c
 8004608:	4621      	mov	r1, r4
 800460a:	4628      	mov	r0, r5
 800460c:	f000 f9d8 	bl	80049c0 <_printf_common>
 8004610:	3001      	adds	r0, #1
 8004612:	f040 8090 	bne.w	8004736 <_printf_float+0x1e2>
 8004616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800461a:	b00d      	add	sp, #52	; 0x34
 800461c:	ecbd 8b02 	vpop	{d8}
 8004620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004624:	4642      	mov	r2, r8
 8004626:	464b      	mov	r3, r9
 8004628:	4640      	mov	r0, r8
 800462a:	4649      	mov	r1, r9
 800462c:	f7fc fa7e 	bl	8000b2c <__aeabi_dcmpun>
 8004630:	b140      	cbz	r0, 8004644 <_printf_float+0xf0>
 8004632:	464b      	mov	r3, r9
 8004634:	2b00      	cmp	r3, #0
 8004636:	bfbc      	itt	lt
 8004638:	232d      	movlt	r3, #45	; 0x2d
 800463a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800463e:	487f      	ldr	r0, [pc, #508]	; (800483c <_printf_float+0x2e8>)
 8004640:	4b7f      	ldr	r3, [pc, #508]	; (8004840 <_printf_float+0x2ec>)
 8004642:	e7d1      	b.n	80045e8 <_printf_float+0x94>
 8004644:	6863      	ldr	r3, [r4, #4]
 8004646:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800464a:	9206      	str	r2, [sp, #24]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	d13f      	bne.n	80046d0 <_printf_float+0x17c>
 8004650:	2306      	movs	r3, #6
 8004652:	6063      	str	r3, [r4, #4]
 8004654:	9b05      	ldr	r3, [sp, #20]
 8004656:	6861      	ldr	r1, [r4, #4]
 8004658:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800465c:	2300      	movs	r3, #0
 800465e:	9303      	str	r3, [sp, #12]
 8004660:	ab0a      	add	r3, sp, #40	; 0x28
 8004662:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004666:	ab09      	add	r3, sp, #36	; 0x24
 8004668:	ec49 8b10 	vmov	d0, r8, r9
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	6022      	str	r2, [r4, #0]
 8004670:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004674:	4628      	mov	r0, r5
 8004676:	f7ff fecd 	bl	8004414 <__cvt>
 800467a:	9b06      	ldr	r3, [sp, #24]
 800467c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800467e:	2b47      	cmp	r3, #71	; 0x47
 8004680:	4680      	mov	r8, r0
 8004682:	d108      	bne.n	8004696 <_printf_float+0x142>
 8004684:	1cc8      	adds	r0, r1, #3
 8004686:	db02      	blt.n	800468e <_printf_float+0x13a>
 8004688:	6863      	ldr	r3, [r4, #4]
 800468a:	4299      	cmp	r1, r3
 800468c:	dd41      	ble.n	8004712 <_printf_float+0x1be>
 800468e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004692:	fa5f fb8b 	uxtb.w	fp, fp
 8004696:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800469a:	d820      	bhi.n	80046de <_printf_float+0x18a>
 800469c:	3901      	subs	r1, #1
 800469e:	465a      	mov	r2, fp
 80046a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046a4:	9109      	str	r1, [sp, #36]	; 0x24
 80046a6:	f7ff ff17 	bl	80044d8 <__exponent>
 80046aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046ac:	1813      	adds	r3, r2, r0
 80046ae:	2a01      	cmp	r2, #1
 80046b0:	4681      	mov	r9, r0
 80046b2:	6123      	str	r3, [r4, #16]
 80046b4:	dc02      	bgt.n	80046bc <_printf_float+0x168>
 80046b6:	6822      	ldr	r2, [r4, #0]
 80046b8:	07d2      	lsls	r2, r2, #31
 80046ba:	d501      	bpl.n	80046c0 <_printf_float+0x16c>
 80046bc:	3301      	adds	r3, #1
 80046be:	6123      	str	r3, [r4, #16]
 80046c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d09c      	beq.n	8004602 <_printf_float+0xae>
 80046c8:	232d      	movs	r3, #45	; 0x2d
 80046ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ce:	e798      	b.n	8004602 <_printf_float+0xae>
 80046d0:	9a06      	ldr	r2, [sp, #24]
 80046d2:	2a47      	cmp	r2, #71	; 0x47
 80046d4:	d1be      	bne.n	8004654 <_printf_float+0x100>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1bc      	bne.n	8004654 <_printf_float+0x100>
 80046da:	2301      	movs	r3, #1
 80046dc:	e7b9      	b.n	8004652 <_printf_float+0xfe>
 80046de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80046e2:	d118      	bne.n	8004716 <_printf_float+0x1c2>
 80046e4:	2900      	cmp	r1, #0
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	dd0b      	ble.n	8004702 <_printf_float+0x1ae>
 80046ea:	6121      	str	r1, [r4, #16]
 80046ec:	b913      	cbnz	r3, 80046f4 <_printf_float+0x1a0>
 80046ee:	6822      	ldr	r2, [r4, #0]
 80046f0:	07d0      	lsls	r0, r2, #31
 80046f2:	d502      	bpl.n	80046fa <_printf_float+0x1a6>
 80046f4:	3301      	adds	r3, #1
 80046f6:	440b      	add	r3, r1
 80046f8:	6123      	str	r3, [r4, #16]
 80046fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80046fc:	f04f 0900 	mov.w	r9, #0
 8004700:	e7de      	b.n	80046c0 <_printf_float+0x16c>
 8004702:	b913      	cbnz	r3, 800470a <_printf_float+0x1b6>
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	07d2      	lsls	r2, r2, #31
 8004708:	d501      	bpl.n	800470e <_printf_float+0x1ba>
 800470a:	3302      	adds	r3, #2
 800470c:	e7f4      	b.n	80046f8 <_printf_float+0x1a4>
 800470e:	2301      	movs	r3, #1
 8004710:	e7f2      	b.n	80046f8 <_printf_float+0x1a4>
 8004712:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004718:	4299      	cmp	r1, r3
 800471a:	db05      	blt.n	8004728 <_printf_float+0x1d4>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	6121      	str	r1, [r4, #16]
 8004720:	07d8      	lsls	r0, r3, #31
 8004722:	d5ea      	bpl.n	80046fa <_printf_float+0x1a6>
 8004724:	1c4b      	adds	r3, r1, #1
 8004726:	e7e7      	b.n	80046f8 <_printf_float+0x1a4>
 8004728:	2900      	cmp	r1, #0
 800472a:	bfd4      	ite	le
 800472c:	f1c1 0202 	rsble	r2, r1, #2
 8004730:	2201      	movgt	r2, #1
 8004732:	4413      	add	r3, r2
 8004734:	e7e0      	b.n	80046f8 <_printf_float+0x1a4>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	055a      	lsls	r2, r3, #21
 800473a:	d407      	bmi.n	800474c <_printf_float+0x1f8>
 800473c:	6923      	ldr	r3, [r4, #16]
 800473e:	4642      	mov	r2, r8
 8004740:	4631      	mov	r1, r6
 8004742:	4628      	mov	r0, r5
 8004744:	47b8      	blx	r7
 8004746:	3001      	adds	r0, #1
 8004748:	d12c      	bne.n	80047a4 <_printf_float+0x250>
 800474a:	e764      	b.n	8004616 <_printf_float+0xc2>
 800474c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004750:	f240 80e0 	bls.w	8004914 <_printf_float+0x3c0>
 8004754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004758:	2200      	movs	r2, #0
 800475a:	2300      	movs	r3, #0
 800475c:	f7fc f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004760:	2800      	cmp	r0, #0
 8004762:	d034      	beq.n	80047ce <_printf_float+0x27a>
 8004764:	4a37      	ldr	r2, [pc, #220]	; (8004844 <_printf_float+0x2f0>)
 8004766:	2301      	movs	r3, #1
 8004768:	4631      	mov	r1, r6
 800476a:	4628      	mov	r0, r5
 800476c:	47b8      	blx	r7
 800476e:	3001      	adds	r0, #1
 8004770:	f43f af51 	beq.w	8004616 <_printf_float+0xc2>
 8004774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004778:	429a      	cmp	r2, r3
 800477a:	db02      	blt.n	8004782 <_printf_float+0x22e>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	07d8      	lsls	r0, r3, #31
 8004780:	d510      	bpl.n	80047a4 <_printf_float+0x250>
 8004782:	ee18 3a10 	vmov	r3, s16
 8004786:	4652      	mov	r2, sl
 8004788:	4631      	mov	r1, r6
 800478a:	4628      	mov	r0, r5
 800478c:	47b8      	blx	r7
 800478e:	3001      	adds	r0, #1
 8004790:	f43f af41 	beq.w	8004616 <_printf_float+0xc2>
 8004794:	f04f 0800 	mov.w	r8, #0
 8004798:	f104 091a 	add.w	r9, r4, #26
 800479c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800479e:	3b01      	subs	r3, #1
 80047a0:	4543      	cmp	r3, r8
 80047a2:	dc09      	bgt.n	80047b8 <_printf_float+0x264>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	079b      	lsls	r3, r3, #30
 80047a8:	f100 8105 	bmi.w	80049b6 <_printf_float+0x462>
 80047ac:	68e0      	ldr	r0, [r4, #12]
 80047ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047b0:	4298      	cmp	r0, r3
 80047b2:	bfb8      	it	lt
 80047b4:	4618      	movlt	r0, r3
 80047b6:	e730      	b.n	800461a <_printf_float+0xc6>
 80047b8:	2301      	movs	r3, #1
 80047ba:	464a      	mov	r2, r9
 80047bc:	4631      	mov	r1, r6
 80047be:	4628      	mov	r0, r5
 80047c0:	47b8      	blx	r7
 80047c2:	3001      	adds	r0, #1
 80047c4:	f43f af27 	beq.w	8004616 <_printf_float+0xc2>
 80047c8:	f108 0801 	add.w	r8, r8, #1
 80047cc:	e7e6      	b.n	800479c <_printf_float+0x248>
 80047ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	dc39      	bgt.n	8004848 <_printf_float+0x2f4>
 80047d4:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <_printf_float+0x2f0>)
 80047d6:	2301      	movs	r3, #1
 80047d8:	4631      	mov	r1, r6
 80047da:	4628      	mov	r0, r5
 80047dc:	47b8      	blx	r7
 80047de:	3001      	adds	r0, #1
 80047e0:	f43f af19 	beq.w	8004616 <_printf_float+0xc2>
 80047e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047e8:	4313      	orrs	r3, r2
 80047ea:	d102      	bne.n	80047f2 <_printf_float+0x29e>
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	07d9      	lsls	r1, r3, #31
 80047f0:	d5d8      	bpl.n	80047a4 <_printf_float+0x250>
 80047f2:	ee18 3a10 	vmov	r3, s16
 80047f6:	4652      	mov	r2, sl
 80047f8:	4631      	mov	r1, r6
 80047fa:	4628      	mov	r0, r5
 80047fc:	47b8      	blx	r7
 80047fe:	3001      	adds	r0, #1
 8004800:	f43f af09 	beq.w	8004616 <_printf_float+0xc2>
 8004804:	f04f 0900 	mov.w	r9, #0
 8004808:	f104 0a1a 	add.w	sl, r4, #26
 800480c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480e:	425b      	negs	r3, r3
 8004810:	454b      	cmp	r3, r9
 8004812:	dc01      	bgt.n	8004818 <_printf_float+0x2c4>
 8004814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004816:	e792      	b.n	800473e <_printf_float+0x1ea>
 8004818:	2301      	movs	r3, #1
 800481a:	4652      	mov	r2, sl
 800481c:	4631      	mov	r1, r6
 800481e:	4628      	mov	r0, r5
 8004820:	47b8      	blx	r7
 8004822:	3001      	adds	r0, #1
 8004824:	f43f aef7 	beq.w	8004616 <_printf_float+0xc2>
 8004828:	f109 0901 	add.w	r9, r9, #1
 800482c:	e7ee      	b.n	800480c <_printf_float+0x2b8>
 800482e:	bf00      	nop
 8004830:	7fefffff 	.word	0x7fefffff
 8004834:	08008e48 	.word	0x08008e48
 8004838:	08008e4c 	.word	0x08008e4c
 800483c:	08008e54 	.word	0x08008e54
 8004840:	08008e50 	.word	0x08008e50
 8004844:	08008e58 	.word	0x08008e58
 8004848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800484a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800484c:	429a      	cmp	r2, r3
 800484e:	bfa8      	it	ge
 8004850:	461a      	movge	r2, r3
 8004852:	2a00      	cmp	r2, #0
 8004854:	4691      	mov	r9, r2
 8004856:	dc37      	bgt.n	80048c8 <_printf_float+0x374>
 8004858:	f04f 0b00 	mov.w	fp, #0
 800485c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004860:	f104 021a 	add.w	r2, r4, #26
 8004864:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004866:	9305      	str	r3, [sp, #20]
 8004868:	eba3 0309 	sub.w	r3, r3, r9
 800486c:	455b      	cmp	r3, fp
 800486e:	dc33      	bgt.n	80048d8 <_printf_float+0x384>
 8004870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004874:	429a      	cmp	r2, r3
 8004876:	db3b      	blt.n	80048f0 <_printf_float+0x39c>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	07da      	lsls	r2, r3, #31
 800487c:	d438      	bmi.n	80048f0 <_printf_float+0x39c>
 800487e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004880:	9a05      	ldr	r2, [sp, #20]
 8004882:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004884:	1a9a      	subs	r2, r3, r2
 8004886:	eba3 0901 	sub.w	r9, r3, r1
 800488a:	4591      	cmp	r9, r2
 800488c:	bfa8      	it	ge
 800488e:	4691      	movge	r9, r2
 8004890:	f1b9 0f00 	cmp.w	r9, #0
 8004894:	dc35      	bgt.n	8004902 <_printf_float+0x3ae>
 8004896:	f04f 0800 	mov.w	r8, #0
 800489a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800489e:	f104 0a1a 	add.w	sl, r4, #26
 80048a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	eba3 0309 	sub.w	r3, r3, r9
 80048ac:	4543      	cmp	r3, r8
 80048ae:	f77f af79 	ble.w	80047a4 <_printf_float+0x250>
 80048b2:	2301      	movs	r3, #1
 80048b4:	4652      	mov	r2, sl
 80048b6:	4631      	mov	r1, r6
 80048b8:	4628      	mov	r0, r5
 80048ba:	47b8      	blx	r7
 80048bc:	3001      	adds	r0, #1
 80048be:	f43f aeaa 	beq.w	8004616 <_printf_float+0xc2>
 80048c2:	f108 0801 	add.w	r8, r8, #1
 80048c6:	e7ec      	b.n	80048a2 <_printf_float+0x34e>
 80048c8:	4613      	mov	r3, r2
 80048ca:	4631      	mov	r1, r6
 80048cc:	4642      	mov	r2, r8
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b8      	blx	r7
 80048d2:	3001      	adds	r0, #1
 80048d4:	d1c0      	bne.n	8004858 <_printf_float+0x304>
 80048d6:	e69e      	b.n	8004616 <_printf_float+0xc2>
 80048d8:	2301      	movs	r3, #1
 80048da:	4631      	mov	r1, r6
 80048dc:	4628      	mov	r0, r5
 80048de:	9205      	str	r2, [sp, #20]
 80048e0:	47b8      	blx	r7
 80048e2:	3001      	adds	r0, #1
 80048e4:	f43f ae97 	beq.w	8004616 <_printf_float+0xc2>
 80048e8:	9a05      	ldr	r2, [sp, #20]
 80048ea:	f10b 0b01 	add.w	fp, fp, #1
 80048ee:	e7b9      	b.n	8004864 <_printf_float+0x310>
 80048f0:	ee18 3a10 	vmov	r3, s16
 80048f4:	4652      	mov	r2, sl
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	d1be      	bne.n	800487e <_printf_float+0x32a>
 8004900:	e689      	b.n	8004616 <_printf_float+0xc2>
 8004902:	9a05      	ldr	r2, [sp, #20]
 8004904:	464b      	mov	r3, r9
 8004906:	4442      	add	r2, r8
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	d1c1      	bne.n	8004896 <_printf_float+0x342>
 8004912:	e680      	b.n	8004616 <_printf_float+0xc2>
 8004914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004916:	2a01      	cmp	r2, #1
 8004918:	dc01      	bgt.n	800491e <_printf_float+0x3ca>
 800491a:	07db      	lsls	r3, r3, #31
 800491c:	d538      	bpl.n	8004990 <_printf_float+0x43c>
 800491e:	2301      	movs	r3, #1
 8004920:	4642      	mov	r2, r8
 8004922:	4631      	mov	r1, r6
 8004924:	4628      	mov	r0, r5
 8004926:	47b8      	blx	r7
 8004928:	3001      	adds	r0, #1
 800492a:	f43f ae74 	beq.w	8004616 <_printf_float+0xc2>
 800492e:	ee18 3a10 	vmov	r3, s16
 8004932:	4652      	mov	r2, sl
 8004934:	4631      	mov	r1, r6
 8004936:	4628      	mov	r0, r5
 8004938:	47b8      	blx	r7
 800493a:	3001      	adds	r0, #1
 800493c:	f43f ae6b 	beq.w	8004616 <_printf_float+0xc2>
 8004940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004944:	2200      	movs	r2, #0
 8004946:	2300      	movs	r3, #0
 8004948:	f7fc f8be 	bl	8000ac8 <__aeabi_dcmpeq>
 800494c:	b9d8      	cbnz	r0, 8004986 <_printf_float+0x432>
 800494e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004950:	f108 0201 	add.w	r2, r8, #1
 8004954:	3b01      	subs	r3, #1
 8004956:	4631      	mov	r1, r6
 8004958:	4628      	mov	r0, r5
 800495a:	47b8      	blx	r7
 800495c:	3001      	adds	r0, #1
 800495e:	d10e      	bne.n	800497e <_printf_float+0x42a>
 8004960:	e659      	b.n	8004616 <_printf_float+0xc2>
 8004962:	2301      	movs	r3, #1
 8004964:	4652      	mov	r2, sl
 8004966:	4631      	mov	r1, r6
 8004968:	4628      	mov	r0, r5
 800496a:	47b8      	blx	r7
 800496c:	3001      	adds	r0, #1
 800496e:	f43f ae52 	beq.w	8004616 <_printf_float+0xc2>
 8004972:	f108 0801 	add.w	r8, r8, #1
 8004976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004978:	3b01      	subs	r3, #1
 800497a:	4543      	cmp	r3, r8
 800497c:	dcf1      	bgt.n	8004962 <_printf_float+0x40e>
 800497e:	464b      	mov	r3, r9
 8004980:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004984:	e6dc      	b.n	8004740 <_printf_float+0x1ec>
 8004986:	f04f 0800 	mov.w	r8, #0
 800498a:	f104 0a1a 	add.w	sl, r4, #26
 800498e:	e7f2      	b.n	8004976 <_printf_float+0x422>
 8004990:	2301      	movs	r3, #1
 8004992:	4642      	mov	r2, r8
 8004994:	e7df      	b.n	8004956 <_printf_float+0x402>
 8004996:	2301      	movs	r3, #1
 8004998:	464a      	mov	r2, r9
 800499a:	4631      	mov	r1, r6
 800499c:	4628      	mov	r0, r5
 800499e:	47b8      	blx	r7
 80049a0:	3001      	adds	r0, #1
 80049a2:	f43f ae38 	beq.w	8004616 <_printf_float+0xc2>
 80049a6:	f108 0801 	add.w	r8, r8, #1
 80049aa:	68e3      	ldr	r3, [r4, #12]
 80049ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049ae:	1a5b      	subs	r3, r3, r1
 80049b0:	4543      	cmp	r3, r8
 80049b2:	dcf0      	bgt.n	8004996 <_printf_float+0x442>
 80049b4:	e6fa      	b.n	80047ac <_printf_float+0x258>
 80049b6:	f04f 0800 	mov.w	r8, #0
 80049ba:	f104 0919 	add.w	r9, r4, #25
 80049be:	e7f4      	b.n	80049aa <_printf_float+0x456>

080049c0 <_printf_common>:
 80049c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	4616      	mov	r6, r2
 80049c6:	4699      	mov	r9, r3
 80049c8:	688a      	ldr	r2, [r1, #8]
 80049ca:	690b      	ldr	r3, [r1, #16]
 80049cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bfb8      	it	lt
 80049d4:	4613      	movlt	r3, r2
 80049d6:	6033      	str	r3, [r6, #0]
 80049d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049dc:	4607      	mov	r7, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	b10a      	cbz	r2, 80049e6 <_printf_common+0x26>
 80049e2:	3301      	adds	r3, #1
 80049e4:	6033      	str	r3, [r6, #0]
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	0699      	lsls	r1, r3, #26
 80049ea:	bf42      	ittt	mi
 80049ec:	6833      	ldrmi	r3, [r6, #0]
 80049ee:	3302      	addmi	r3, #2
 80049f0:	6033      	strmi	r3, [r6, #0]
 80049f2:	6825      	ldr	r5, [r4, #0]
 80049f4:	f015 0506 	ands.w	r5, r5, #6
 80049f8:	d106      	bne.n	8004a08 <_printf_common+0x48>
 80049fa:	f104 0a19 	add.w	sl, r4, #25
 80049fe:	68e3      	ldr	r3, [r4, #12]
 8004a00:	6832      	ldr	r2, [r6, #0]
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	42ab      	cmp	r3, r5
 8004a06:	dc26      	bgt.n	8004a56 <_printf_common+0x96>
 8004a08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a0c:	1e13      	subs	r3, r2, #0
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	bf18      	it	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	0692      	lsls	r2, r2, #26
 8004a16:	d42b      	bmi.n	8004a70 <_printf_common+0xb0>
 8004a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	4638      	mov	r0, r7
 8004a20:	47c0      	blx	r8
 8004a22:	3001      	adds	r0, #1
 8004a24:	d01e      	beq.n	8004a64 <_printf_common+0xa4>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	68e5      	ldr	r5, [r4, #12]
 8004a2a:	6832      	ldr	r2, [r6, #0]
 8004a2c:	f003 0306 	and.w	r3, r3, #6
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	bf08      	it	eq
 8004a34:	1aad      	subeq	r5, r5, r2
 8004a36:	68a3      	ldr	r3, [r4, #8]
 8004a38:	6922      	ldr	r2, [r4, #16]
 8004a3a:	bf0c      	ite	eq
 8004a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a40:	2500      	movne	r5, #0
 8004a42:	4293      	cmp	r3, r2
 8004a44:	bfc4      	itt	gt
 8004a46:	1a9b      	subgt	r3, r3, r2
 8004a48:	18ed      	addgt	r5, r5, r3
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	341a      	adds	r4, #26
 8004a4e:	42b5      	cmp	r5, r6
 8004a50:	d11a      	bne.n	8004a88 <_printf_common+0xc8>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e008      	b.n	8004a68 <_printf_common+0xa8>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4652      	mov	r2, sl
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	47c0      	blx	r8
 8004a60:	3001      	adds	r0, #1
 8004a62:	d103      	bne.n	8004a6c <_printf_common+0xac>
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6c:	3501      	adds	r5, #1
 8004a6e:	e7c6      	b.n	80049fe <_printf_common+0x3e>
 8004a70:	18e1      	adds	r1, r4, r3
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	2030      	movs	r0, #48	; 0x30
 8004a76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a7a:	4422      	add	r2, r4
 8004a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a84:	3302      	adds	r3, #2
 8004a86:	e7c7      	b.n	8004a18 <_printf_common+0x58>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4638      	mov	r0, r7
 8004a90:	47c0      	blx	r8
 8004a92:	3001      	adds	r0, #1
 8004a94:	d0e6      	beq.n	8004a64 <_printf_common+0xa4>
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7d9      	b.n	8004a4e <_printf_common+0x8e>
	...

08004a9c <_printf_i>:
 8004a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	7e0f      	ldrb	r7, [r1, #24]
 8004aa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004aa4:	2f78      	cmp	r7, #120	; 0x78
 8004aa6:	4691      	mov	r9, r2
 8004aa8:	4680      	mov	r8, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	469a      	mov	sl, r3
 8004aae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ab2:	d807      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ab4:	2f62      	cmp	r7, #98	; 0x62
 8004ab6:	d80a      	bhi.n	8004ace <_printf_i+0x32>
 8004ab8:	2f00      	cmp	r7, #0
 8004aba:	f000 80d8 	beq.w	8004c6e <_printf_i+0x1d2>
 8004abe:	2f58      	cmp	r7, #88	; 0x58
 8004ac0:	f000 80a3 	beq.w	8004c0a <_printf_i+0x16e>
 8004ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004acc:	e03a      	b.n	8004b44 <_printf_i+0xa8>
 8004ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ad2:	2b15      	cmp	r3, #21
 8004ad4:	d8f6      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ad6:	a101      	add	r1, pc, #4	; (adr r1, 8004adc <_printf_i+0x40>)
 8004ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004adc:	08004b35 	.word	0x08004b35
 8004ae0:	08004b49 	.word	0x08004b49
 8004ae4:	08004ac5 	.word	0x08004ac5
 8004ae8:	08004ac5 	.word	0x08004ac5
 8004aec:	08004ac5 	.word	0x08004ac5
 8004af0:	08004ac5 	.word	0x08004ac5
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004ac5 	.word	0x08004ac5
 8004afc:	08004ac5 	.word	0x08004ac5
 8004b00:	08004ac5 	.word	0x08004ac5
 8004b04:	08004ac5 	.word	0x08004ac5
 8004b08:	08004c55 	.word	0x08004c55
 8004b0c:	08004b79 	.word	0x08004b79
 8004b10:	08004c37 	.word	0x08004c37
 8004b14:	08004ac5 	.word	0x08004ac5
 8004b18:	08004ac5 	.word	0x08004ac5
 8004b1c:	08004c77 	.word	0x08004c77
 8004b20:	08004ac5 	.word	0x08004ac5
 8004b24:	08004b79 	.word	0x08004b79
 8004b28:	08004ac5 	.word	0x08004ac5
 8004b2c:	08004ac5 	.word	0x08004ac5
 8004b30:	08004c3f 	.word	0x08004c3f
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	602a      	str	r2, [r5, #0]
 8004b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0a3      	b.n	8004c90 <_printf_i+0x1f4>
 8004b48:	6820      	ldr	r0, [r4, #0]
 8004b4a:	6829      	ldr	r1, [r5, #0]
 8004b4c:	0606      	lsls	r6, r0, #24
 8004b4e:	f101 0304 	add.w	r3, r1, #4
 8004b52:	d50a      	bpl.n	8004b6a <_printf_i+0xce>
 8004b54:	680e      	ldr	r6, [r1, #0]
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	2e00      	cmp	r6, #0
 8004b5a:	da03      	bge.n	8004b64 <_printf_i+0xc8>
 8004b5c:	232d      	movs	r3, #45	; 0x2d
 8004b5e:	4276      	negs	r6, r6
 8004b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b64:	485e      	ldr	r0, [pc, #376]	; (8004ce0 <_printf_i+0x244>)
 8004b66:	230a      	movs	r3, #10
 8004b68:	e019      	b.n	8004b9e <_printf_i+0x102>
 8004b6a:	680e      	ldr	r6, [r1, #0]
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b72:	bf18      	it	ne
 8004b74:	b236      	sxthne	r6, r6
 8004b76:	e7ef      	b.n	8004b58 <_printf_i+0xbc>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	1d19      	adds	r1, r3, #4
 8004b7e:	6029      	str	r1, [r5, #0]
 8004b80:	0601      	lsls	r1, r0, #24
 8004b82:	d501      	bpl.n	8004b88 <_printf_i+0xec>
 8004b84:	681e      	ldr	r6, [r3, #0]
 8004b86:	e002      	b.n	8004b8e <_printf_i+0xf2>
 8004b88:	0646      	lsls	r6, r0, #25
 8004b8a:	d5fb      	bpl.n	8004b84 <_printf_i+0xe8>
 8004b8c:	881e      	ldrh	r6, [r3, #0]
 8004b8e:	4854      	ldr	r0, [pc, #336]	; (8004ce0 <_printf_i+0x244>)
 8004b90:	2f6f      	cmp	r7, #111	; 0x6f
 8004b92:	bf0c      	ite	eq
 8004b94:	2308      	moveq	r3, #8
 8004b96:	230a      	movne	r3, #10
 8004b98:	2100      	movs	r1, #0
 8004b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b9e:	6865      	ldr	r5, [r4, #4]
 8004ba0:	60a5      	str	r5, [r4, #8]
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	bfa2      	ittt	ge
 8004ba6:	6821      	ldrge	r1, [r4, #0]
 8004ba8:	f021 0104 	bicge.w	r1, r1, #4
 8004bac:	6021      	strge	r1, [r4, #0]
 8004bae:	b90e      	cbnz	r6, 8004bb4 <_printf_i+0x118>
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	d04d      	beq.n	8004c50 <_printf_i+0x1b4>
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bba:	fb03 6711 	mls	r7, r3, r1, r6
 8004bbe:	5dc7      	ldrb	r7, [r0, r7]
 8004bc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bc4:	4637      	mov	r7, r6
 8004bc6:	42bb      	cmp	r3, r7
 8004bc8:	460e      	mov	r6, r1
 8004bca:	d9f4      	bls.n	8004bb6 <_printf_i+0x11a>
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d10b      	bne.n	8004be8 <_printf_i+0x14c>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	07de      	lsls	r6, r3, #31
 8004bd4:	d508      	bpl.n	8004be8 <_printf_i+0x14c>
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	6861      	ldr	r1, [r4, #4]
 8004bda:	4299      	cmp	r1, r3
 8004bdc:	bfde      	ittt	le
 8004bde:	2330      	movle	r3, #48	; 0x30
 8004be0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004be4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004be8:	1b52      	subs	r2, r2, r5
 8004bea:	6122      	str	r2, [r4, #16]
 8004bec:	f8cd a000 	str.w	sl, [sp]
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	aa03      	add	r2, sp, #12
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	f7ff fee2 	bl	80049c0 <_printf_common>
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d14c      	bne.n	8004c9a <_printf_i+0x1fe>
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c04:	b004      	add	sp, #16
 8004c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0a:	4835      	ldr	r0, [pc, #212]	; (8004ce0 <_printf_i+0x244>)
 8004c0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c10:	6829      	ldr	r1, [r5, #0]
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c18:	6029      	str	r1, [r5, #0]
 8004c1a:	061d      	lsls	r5, r3, #24
 8004c1c:	d514      	bpl.n	8004c48 <_printf_i+0x1ac>
 8004c1e:	07df      	lsls	r7, r3, #31
 8004c20:	bf44      	itt	mi
 8004c22:	f043 0320 	orrmi.w	r3, r3, #32
 8004c26:	6023      	strmi	r3, [r4, #0]
 8004c28:	b91e      	cbnz	r6, 8004c32 <_printf_i+0x196>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	f023 0320 	bic.w	r3, r3, #32
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	2310      	movs	r3, #16
 8004c34:	e7b0      	b.n	8004b98 <_printf_i+0xfc>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	f043 0320 	orr.w	r3, r3, #32
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	2378      	movs	r3, #120	; 0x78
 8004c40:	4828      	ldr	r0, [pc, #160]	; (8004ce4 <_printf_i+0x248>)
 8004c42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c46:	e7e3      	b.n	8004c10 <_printf_i+0x174>
 8004c48:	0659      	lsls	r1, r3, #25
 8004c4a:	bf48      	it	mi
 8004c4c:	b2b6      	uxthmi	r6, r6
 8004c4e:	e7e6      	b.n	8004c1e <_printf_i+0x182>
 8004c50:	4615      	mov	r5, r2
 8004c52:	e7bb      	b.n	8004bcc <_printf_i+0x130>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	6826      	ldr	r6, [r4, #0]
 8004c58:	6961      	ldr	r1, [r4, #20]
 8004c5a:	1d18      	adds	r0, r3, #4
 8004c5c:	6028      	str	r0, [r5, #0]
 8004c5e:	0635      	lsls	r5, r6, #24
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	d501      	bpl.n	8004c68 <_printf_i+0x1cc>
 8004c64:	6019      	str	r1, [r3, #0]
 8004c66:	e002      	b.n	8004c6e <_printf_i+0x1d2>
 8004c68:	0670      	lsls	r0, r6, #25
 8004c6a:	d5fb      	bpl.n	8004c64 <_printf_i+0x1c8>
 8004c6c:	8019      	strh	r1, [r3, #0]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6123      	str	r3, [r4, #16]
 8004c72:	4615      	mov	r5, r2
 8004c74:	e7ba      	b.n	8004bec <_printf_i+0x150>
 8004c76:	682b      	ldr	r3, [r5, #0]
 8004c78:	1d1a      	adds	r2, r3, #4
 8004c7a:	602a      	str	r2, [r5, #0]
 8004c7c:	681d      	ldr	r5, [r3, #0]
 8004c7e:	6862      	ldr	r2, [r4, #4]
 8004c80:	2100      	movs	r1, #0
 8004c82:	4628      	mov	r0, r5
 8004c84:	f7fb faac 	bl	80001e0 <memchr>
 8004c88:	b108      	cbz	r0, 8004c8e <_printf_i+0x1f2>
 8004c8a:	1b40      	subs	r0, r0, r5
 8004c8c:	6060      	str	r0, [r4, #4]
 8004c8e:	6863      	ldr	r3, [r4, #4]
 8004c90:	6123      	str	r3, [r4, #16]
 8004c92:	2300      	movs	r3, #0
 8004c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c98:	e7a8      	b.n	8004bec <_printf_i+0x150>
 8004c9a:	6923      	ldr	r3, [r4, #16]
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	47d0      	blx	sl
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d0ab      	beq.n	8004c00 <_printf_i+0x164>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	079b      	lsls	r3, r3, #30
 8004cac:	d413      	bmi.n	8004cd6 <_printf_i+0x23a>
 8004cae:	68e0      	ldr	r0, [r4, #12]
 8004cb0:	9b03      	ldr	r3, [sp, #12]
 8004cb2:	4298      	cmp	r0, r3
 8004cb4:	bfb8      	it	lt
 8004cb6:	4618      	movlt	r0, r3
 8004cb8:	e7a4      	b.n	8004c04 <_printf_i+0x168>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	47d0      	blx	sl
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d09b      	beq.n	8004c00 <_printf_i+0x164>
 8004cc8:	3501      	adds	r5, #1
 8004cca:	68e3      	ldr	r3, [r4, #12]
 8004ccc:	9903      	ldr	r1, [sp, #12]
 8004cce:	1a5b      	subs	r3, r3, r1
 8004cd0:	42ab      	cmp	r3, r5
 8004cd2:	dcf2      	bgt.n	8004cba <_printf_i+0x21e>
 8004cd4:	e7eb      	b.n	8004cae <_printf_i+0x212>
 8004cd6:	2500      	movs	r5, #0
 8004cd8:	f104 0619 	add.w	r6, r4, #25
 8004cdc:	e7f5      	b.n	8004cca <_printf_i+0x22e>
 8004cde:	bf00      	nop
 8004ce0:	08008e5a 	.word	0x08008e5a
 8004ce4:	08008e6b 	.word	0x08008e6b

08004ce8 <_scanf_float>:
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cec:	b087      	sub	sp, #28
 8004cee:	4617      	mov	r7, r2
 8004cf0:	9303      	str	r3, [sp, #12]
 8004cf2:	688b      	ldr	r3, [r1, #8]
 8004cf4:	1e5a      	subs	r2, r3, #1
 8004cf6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004cfa:	bf83      	ittte	hi
 8004cfc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004d00:	195b      	addhi	r3, r3, r5
 8004d02:	9302      	strhi	r3, [sp, #8]
 8004d04:	2300      	movls	r3, #0
 8004d06:	bf86      	itte	hi
 8004d08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004d0c:	608b      	strhi	r3, [r1, #8]
 8004d0e:	9302      	strls	r3, [sp, #8]
 8004d10:	680b      	ldr	r3, [r1, #0]
 8004d12:	468b      	mov	fp, r1
 8004d14:	2500      	movs	r5, #0
 8004d16:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004d1a:	f84b 3b1c 	str.w	r3, [fp], #28
 8004d1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004d22:	4680      	mov	r8, r0
 8004d24:	460c      	mov	r4, r1
 8004d26:	465e      	mov	r6, fp
 8004d28:	46aa      	mov	sl, r5
 8004d2a:	46a9      	mov	r9, r5
 8004d2c:	9501      	str	r5, [sp, #4]
 8004d2e:	68a2      	ldr	r2, [r4, #8]
 8004d30:	b152      	cbz	r2, 8004d48 <_scanf_float+0x60>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b4e      	cmp	r3, #78	; 0x4e
 8004d38:	d864      	bhi.n	8004e04 <_scanf_float+0x11c>
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d83c      	bhi.n	8004db8 <_scanf_float+0xd0>
 8004d3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004d42:	b2c8      	uxtb	r0, r1
 8004d44:	280e      	cmp	r0, #14
 8004d46:	d93a      	bls.n	8004dbe <_scanf_float+0xd6>
 8004d48:	f1b9 0f00 	cmp.w	r9, #0
 8004d4c:	d003      	beq.n	8004d56 <_scanf_float+0x6e>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d5a:	f1ba 0f01 	cmp.w	sl, #1
 8004d5e:	f200 8113 	bhi.w	8004f88 <_scanf_float+0x2a0>
 8004d62:	455e      	cmp	r6, fp
 8004d64:	f200 8105 	bhi.w	8004f72 <_scanf_float+0x28a>
 8004d68:	2501      	movs	r5, #1
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	b007      	add	sp, #28
 8004d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004d76:	2a0d      	cmp	r2, #13
 8004d78:	d8e6      	bhi.n	8004d48 <_scanf_float+0x60>
 8004d7a:	a101      	add	r1, pc, #4	; (adr r1, 8004d80 <_scanf_float+0x98>)
 8004d7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d80:	08004ebf 	.word	0x08004ebf
 8004d84:	08004d49 	.word	0x08004d49
 8004d88:	08004d49 	.word	0x08004d49
 8004d8c:	08004d49 	.word	0x08004d49
 8004d90:	08004f1f 	.word	0x08004f1f
 8004d94:	08004ef7 	.word	0x08004ef7
 8004d98:	08004d49 	.word	0x08004d49
 8004d9c:	08004d49 	.word	0x08004d49
 8004da0:	08004ecd 	.word	0x08004ecd
 8004da4:	08004d49 	.word	0x08004d49
 8004da8:	08004d49 	.word	0x08004d49
 8004dac:	08004d49 	.word	0x08004d49
 8004db0:	08004d49 	.word	0x08004d49
 8004db4:	08004e85 	.word	0x08004e85
 8004db8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004dbc:	e7db      	b.n	8004d76 <_scanf_float+0x8e>
 8004dbe:	290e      	cmp	r1, #14
 8004dc0:	d8c2      	bhi.n	8004d48 <_scanf_float+0x60>
 8004dc2:	a001      	add	r0, pc, #4	; (adr r0, 8004dc8 <_scanf_float+0xe0>)
 8004dc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004dc8:	08004e77 	.word	0x08004e77
 8004dcc:	08004d49 	.word	0x08004d49
 8004dd0:	08004e77 	.word	0x08004e77
 8004dd4:	08004f0b 	.word	0x08004f0b
 8004dd8:	08004d49 	.word	0x08004d49
 8004ddc:	08004e25 	.word	0x08004e25
 8004de0:	08004e61 	.word	0x08004e61
 8004de4:	08004e61 	.word	0x08004e61
 8004de8:	08004e61 	.word	0x08004e61
 8004dec:	08004e61 	.word	0x08004e61
 8004df0:	08004e61 	.word	0x08004e61
 8004df4:	08004e61 	.word	0x08004e61
 8004df8:	08004e61 	.word	0x08004e61
 8004dfc:	08004e61 	.word	0x08004e61
 8004e00:	08004e61 	.word	0x08004e61
 8004e04:	2b6e      	cmp	r3, #110	; 0x6e
 8004e06:	d809      	bhi.n	8004e1c <_scanf_float+0x134>
 8004e08:	2b60      	cmp	r3, #96	; 0x60
 8004e0a:	d8b2      	bhi.n	8004d72 <_scanf_float+0x8a>
 8004e0c:	2b54      	cmp	r3, #84	; 0x54
 8004e0e:	d077      	beq.n	8004f00 <_scanf_float+0x218>
 8004e10:	2b59      	cmp	r3, #89	; 0x59
 8004e12:	d199      	bne.n	8004d48 <_scanf_float+0x60>
 8004e14:	2d07      	cmp	r5, #7
 8004e16:	d197      	bne.n	8004d48 <_scanf_float+0x60>
 8004e18:	2508      	movs	r5, #8
 8004e1a:	e029      	b.n	8004e70 <_scanf_float+0x188>
 8004e1c:	2b74      	cmp	r3, #116	; 0x74
 8004e1e:	d06f      	beq.n	8004f00 <_scanf_float+0x218>
 8004e20:	2b79      	cmp	r3, #121	; 0x79
 8004e22:	e7f6      	b.n	8004e12 <_scanf_float+0x12a>
 8004e24:	6821      	ldr	r1, [r4, #0]
 8004e26:	05c8      	lsls	r0, r1, #23
 8004e28:	d51a      	bpl.n	8004e60 <_scanf_float+0x178>
 8004e2a:	9b02      	ldr	r3, [sp, #8]
 8004e2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004e30:	6021      	str	r1, [r4, #0]
 8004e32:	f109 0901 	add.w	r9, r9, #1
 8004e36:	b11b      	cbz	r3, 8004e40 <_scanf_float+0x158>
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	3201      	adds	r2, #1
 8004e3c:	9302      	str	r3, [sp, #8]
 8004e3e:	60a2      	str	r2, [r4, #8]
 8004e40:	68a3      	ldr	r3, [r4, #8]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	60a3      	str	r3, [r4, #8]
 8004e46:	6923      	ldr	r3, [r4, #16]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	6123      	str	r3, [r4, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	f340 8084 	ble.w	8004f60 <_scanf_float+0x278>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	e766      	b.n	8004d2e <_scanf_float+0x46>
 8004e60:	eb1a 0f05 	cmn.w	sl, r5
 8004e64:	f47f af70 	bne.w	8004d48 <_scanf_float+0x60>
 8004e68:	6822      	ldr	r2, [r4, #0]
 8004e6a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004e6e:	6022      	str	r2, [r4, #0]
 8004e70:	f806 3b01 	strb.w	r3, [r6], #1
 8004e74:	e7e4      	b.n	8004e40 <_scanf_float+0x158>
 8004e76:	6822      	ldr	r2, [r4, #0]
 8004e78:	0610      	lsls	r0, r2, #24
 8004e7a:	f57f af65 	bpl.w	8004d48 <_scanf_float+0x60>
 8004e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e82:	e7f4      	b.n	8004e6e <_scanf_float+0x186>
 8004e84:	f1ba 0f00 	cmp.w	sl, #0
 8004e88:	d10e      	bne.n	8004ea8 <_scanf_float+0x1c0>
 8004e8a:	f1b9 0f00 	cmp.w	r9, #0
 8004e8e:	d10e      	bne.n	8004eae <_scanf_float+0x1c6>
 8004e90:	6822      	ldr	r2, [r4, #0]
 8004e92:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e96:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e9a:	d108      	bne.n	8004eae <_scanf_float+0x1c6>
 8004e9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ea0:	6022      	str	r2, [r4, #0]
 8004ea2:	f04f 0a01 	mov.w	sl, #1
 8004ea6:	e7e3      	b.n	8004e70 <_scanf_float+0x188>
 8004ea8:	f1ba 0f02 	cmp.w	sl, #2
 8004eac:	d055      	beq.n	8004f5a <_scanf_float+0x272>
 8004eae:	2d01      	cmp	r5, #1
 8004eb0:	d002      	beq.n	8004eb8 <_scanf_float+0x1d0>
 8004eb2:	2d04      	cmp	r5, #4
 8004eb4:	f47f af48 	bne.w	8004d48 <_scanf_float+0x60>
 8004eb8:	3501      	adds	r5, #1
 8004eba:	b2ed      	uxtb	r5, r5
 8004ebc:	e7d8      	b.n	8004e70 <_scanf_float+0x188>
 8004ebe:	f1ba 0f01 	cmp.w	sl, #1
 8004ec2:	f47f af41 	bne.w	8004d48 <_scanf_float+0x60>
 8004ec6:	f04f 0a02 	mov.w	sl, #2
 8004eca:	e7d1      	b.n	8004e70 <_scanf_float+0x188>
 8004ecc:	b97d      	cbnz	r5, 8004eee <_scanf_float+0x206>
 8004ece:	f1b9 0f00 	cmp.w	r9, #0
 8004ed2:	f47f af3c 	bne.w	8004d4e <_scanf_float+0x66>
 8004ed6:	6822      	ldr	r2, [r4, #0]
 8004ed8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004edc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004ee0:	f47f af39 	bne.w	8004d56 <_scanf_float+0x6e>
 8004ee4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ee8:	6022      	str	r2, [r4, #0]
 8004eea:	2501      	movs	r5, #1
 8004eec:	e7c0      	b.n	8004e70 <_scanf_float+0x188>
 8004eee:	2d03      	cmp	r5, #3
 8004ef0:	d0e2      	beq.n	8004eb8 <_scanf_float+0x1d0>
 8004ef2:	2d05      	cmp	r5, #5
 8004ef4:	e7de      	b.n	8004eb4 <_scanf_float+0x1cc>
 8004ef6:	2d02      	cmp	r5, #2
 8004ef8:	f47f af26 	bne.w	8004d48 <_scanf_float+0x60>
 8004efc:	2503      	movs	r5, #3
 8004efe:	e7b7      	b.n	8004e70 <_scanf_float+0x188>
 8004f00:	2d06      	cmp	r5, #6
 8004f02:	f47f af21 	bne.w	8004d48 <_scanf_float+0x60>
 8004f06:	2507      	movs	r5, #7
 8004f08:	e7b2      	b.n	8004e70 <_scanf_float+0x188>
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	0591      	lsls	r1, r2, #22
 8004f0e:	f57f af1b 	bpl.w	8004d48 <_scanf_float+0x60>
 8004f12:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004f16:	6022      	str	r2, [r4, #0]
 8004f18:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f1c:	e7a8      	b.n	8004e70 <_scanf_float+0x188>
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004f24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004f28:	d006      	beq.n	8004f38 <_scanf_float+0x250>
 8004f2a:	0550      	lsls	r0, r2, #21
 8004f2c:	f57f af0c 	bpl.w	8004d48 <_scanf_float+0x60>
 8004f30:	f1b9 0f00 	cmp.w	r9, #0
 8004f34:	f43f af0f 	beq.w	8004d56 <_scanf_float+0x6e>
 8004f38:	0591      	lsls	r1, r2, #22
 8004f3a:	bf58      	it	pl
 8004f3c:	9901      	ldrpl	r1, [sp, #4]
 8004f3e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f42:	bf58      	it	pl
 8004f44:	eba9 0101 	subpl.w	r1, r9, r1
 8004f48:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004f4c:	bf58      	it	pl
 8004f4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004f52:	6022      	str	r2, [r4, #0]
 8004f54:	f04f 0900 	mov.w	r9, #0
 8004f58:	e78a      	b.n	8004e70 <_scanf_float+0x188>
 8004f5a:	f04f 0a03 	mov.w	sl, #3
 8004f5e:	e787      	b.n	8004e70 <_scanf_float+0x188>
 8004f60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f64:	4639      	mov	r1, r7
 8004f66:	4640      	mov	r0, r8
 8004f68:	4798      	blx	r3
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	f43f aedf 	beq.w	8004d2e <_scanf_float+0x46>
 8004f70:	e6ea      	b.n	8004d48 <_scanf_float+0x60>
 8004f72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f7a:	463a      	mov	r2, r7
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	4798      	blx	r3
 8004f80:	6923      	ldr	r3, [r4, #16]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	6123      	str	r3, [r4, #16]
 8004f86:	e6ec      	b.n	8004d62 <_scanf_float+0x7a>
 8004f88:	1e6b      	subs	r3, r5, #1
 8004f8a:	2b06      	cmp	r3, #6
 8004f8c:	d825      	bhi.n	8004fda <_scanf_float+0x2f2>
 8004f8e:	2d02      	cmp	r5, #2
 8004f90:	d836      	bhi.n	8005000 <_scanf_float+0x318>
 8004f92:	455e      	cmp	r6, fp
 8004f94:	f67f aee8 	bls.w	8004d68 <_scanf_float+0x80>
 8004f98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f9c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fa0:	463a      	mov	r2, r7
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	4798      	blx	r3
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	6123      	str	r3, [r4, #16]
 8004fac:	e7f1      	b.n	8004f92 <_scanf_float+0x2aa>
 8004fae:	9802      	ldr	r0, [sp, #8]
 8004fb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fb4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004fb8:	9002      	str	r0, [sp, #8]
 8004fba:	463a      	mov	r2, r7
 8004fbc:	4640      	mov	r0, r8
 8004fbe:	4798      	blx	r3
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	6123      	str	r3, [r4, #16]
 8004fc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004fca:	fa5f fa8a 	uxtb.w	sl, sl
 8004fce:	f1ba 0f02 	cmp.w	sl, #2
 8004fd2:	d1ec      	bne.n	8004fae <_scanf_float+0x2c6>
 8004fd4:	3d03      	subs	r5, #3
 8004fd6:	b2ed      	uxtb	r5, r5
 8004fd8:	1b76      	subs	r6, r6, r5
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	05da      	lsls	r2, r3, #23
 8004fde:	d52f      	bpl.n	8005040 <_scanf_float+0x358>
 8004fe0:	055b      	lsls	r3, r3, #21
 8004fe2:	d510      	bpl.n	8005006 <_scanf_float+0x31e>
 8004fe4:	455e      	cmp	r6, fp
 8004fe6:	f67f aebf 	bls.w	8004d68 <_scanf_float+0x80>
 8004fea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ff2:	463a      	mov	r2, r7
 8004ff4:	4640      	mov	r0, r8
 8004ff6:	4798      	blx	r3
 8004ff8:	6923      	ldr	r3, [r4, #16]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	6123      	str	r3, [r4, #16]
 8004ffe:	e7f1      	b.n	8004fe4 <_scanf_float+0x2fc>
 8005000:	46aa      	mov	sl, r5
 8005002:	9602      	str	r6, [sp, #8]
 8005004:	e7df      	b.n	8004fc6 <_scanf_float+0x2de>
 8005006:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	2965      	cmp	r1, #101	; 0x65
 800500e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005012:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005016:	6123      	str	r3, [r4, #16]
 8005018:	d00c      	beq.n	8005034 <_scanf_float+0x34c>
 800501a:	2945      	cmp	r1, #69	; 0x45
 800501c:	d00a      	beq.n	8005034 <_scanf_float+0x34c>
 800501e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005022:	463a      	mov	r2, r7
 8005024:	4640      	mov	r0, r8
 8005026:	4798      	blx	r3
 8005028:	6923      	ldr	r3, [r4, #16]
 800502a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800502e:	3b01      	subs	r3, #1
 8005030:	1eb5      	subs	r5, r6, #2
 8005032:	6123      	str	r3, [r4, #16]
 8005034:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005038:	463a      	mov	r2, r7
 800503a:	4640      	mov	r0, r8
 800503c:	4798      	blx	r3
 800503e:	462e      	mov	r6, r5
 8005040:	6825      	ldr	r5, [r4, #0]
 8005042:	f015 0510 	ands.w	r5, r5, #16
 8005046:	d159      	bne.n	80050fc <_scanf_float+0x414>
 8005048:	7035      	strb	r5, [r6, #0]
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005054:	d11b      	bne.n	800508e <_scanf_float+0x3a6>
 8005056:	9b01      	ldr	r3, [sp, #4]
 8005058:	454b      	cmp	r3, r9
 800505a:	eba3 0209 	sub.w	r2, r3, r9
 800505e:	d123      	bne.n	80050a8 <_scanf_float+0x3c0>
 8005060:	2200      	movs	r2, #0
 8005062:	4659      	mov	r1, fp
 8005064:	4640      	mov	r0, r8
 8005066:	f000 ff0d 	bl	8005e84 <_strtod_r>
 800506a:	6822      	ldr	r2, [r4, #0]
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	f012 0f02 	tst.w	r2, #2
 8005072:	ec57 6b10 	vmov	r6, r7, d0
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	d021      	beq.n	80050be <_scanf_float+0x3d6>
 800507a:	9903      	ldr	r1, [sp, #12]
 800507c:	1d1a      	adds	r2, r3, #4
 800507e:	600a      	str	r2, [r1, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	e9c3 6700 	strd	r6, r7, [r3]
 8005086:	68e3      	ldr	r3, [r4, #12]
 8005088:	3301      	adds	r3, #1
 800508a:	60e3      	str	r3, [r4, #12]
 800508c:	e66d      	b.n	8004d6a <_scanf_float+0x82>
 800508e:	9b04      	ldr	r3, [sp, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0e5      	beq.n	8005060 <_scanf_float+0x378>
 8005094:	9905      	ldr	r1, [sp, #20]
 8005096:	230a      	movs	r3, #10
 8005098:	462a      	mov	r2, r5
 800509a:	3101      	adds	r1, #1
 800509c:	4640      	mov	r0, r8
 800509e:	f000 ff79 	bl	8005f94 <_strtol_r>
 80050a2:	9b04      	ldr	r3, [sp, #16]
 80050a4:	9e05      	ldr	r6, [sp, #20]
 80050a6:	1ac2      	subs	r2, r0, r3
 80050a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80050ac:	429e      	cmp	r6, r3
 80050ae:	bf28      	it	cs
 80050b0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80050b4:	4912      	ldr	r1, [pc, #72]	; (8005100 <_scanf_float+0x418>)
 80050b6:	4630      	mov	r0, r6
 80050b8:	f000 f8a2 	bl	8005200 <siprintf>
 80050bc:	e7d0      	b.n	8005060 <_scanf_float+0x378>
 80050be:	9903      	ldr	r1, [sp, #12]
 80050c0:	f012 0f04 	tst.w	r2, #4
 80050c4:	f103 0204 	add.w	r2, r3, #4
 80050c8:	600a      	str	r2, [r1, #0]
 80050ca:	d1d9      	bne.n	8005080 <_scanf_float+0x398>
 80050cc:	f8d3 8000 	ldr.w	r8, [r3]
 80050d0:	ee10 2a10 	vmov	r2, s0
 80050d4:	ee10 0a10 	vmov	r0, s0
 80050d8:	463b      	mov	r3, r7
 80050da:	4639      	mov	r1, r7
 80050dc:	f7fb fd26 	bl	8000b2c <__aeabi_dcmpun>
 80050e0:	b128      	cbz	r0, 80050ee <_scanf_float+0x406>
 80050e2:	4808      	ldr	r0, [pc, #32]	; (8005104 <_scanf_float+0x41c>)
 80050e4:	f000 f886 	bl	80051f4 <nanf>
 80050e8:	ed88 0a00 	vstr	s0, [r8]
 80050ec:	e7cb      	b.n	8005086 <_scanf_float+0x39e>
 80050ee:	4630      	mov	r0, r6
 80050f0:	4639      	mov	r1, r7
 80050f2:	f7fb fd79 	bl	8000be8 <__aeabi_d2f>
 80050f6:	f8c8 0000 	str.w	r0, [r8]
 80050fa:	e7c4      	b.n	8005086 <_scanf_float+0x39e>
 80050fc:	2500      	movs	r5, #0
 80050fe:	e634      	b.n	8004d6a <_scanf_float+0x82>
 8005100:	08008e7c 	.word	0x08008e7c
 8005104:	080092f0 	.word	0x080092f0

08005108 <_puts_r>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	460e      	mov	r6, r1
 800510c:	4605      	mov	r5, r0
 800510e:	b118      	cbz	r0, 8005118 <_puts_r+0x10>
 8005110:	6983      	ldr	r3, [r0, #24]
 8005112:	b90b      	cbnz	r3, 8005118 <_puts_r+0x10>
 8005114:	f001 ff94 	bl	8007040 <__sinit>
 8005118:	69ab      	ldr	r3, [r5, #24]
 800511a:	68ac      	ldr	r4, [r5, #8]
 800511c:	b913      	cbnz	r3, 8005124 <_puts_r+0x1c>
 800511e:	4628      	mov	r0, r5
 8005120:	f001 ff8e 	bl	8007040 <__sinit>
 8005124:	4b2c      	ldr	r3, [pc, #176]	; (80051d8 <_puts_r+0xd0>)
 8005126:	429c      	cmp	r4, r3
 8005128:	d120      	bne.n	800516c <_puts_r+0x64>
 800512a:	686c      	ldr	r4, [r5, #4]
 800512c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800512e:	07db      	lsls	r3, r3, #31
 8005130:	d405      	bmi.n	800513e <_puts_r+0x36>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	0598      	lsls	r0, r3, #22
 8005136:	d402      	bmi.n	800513e <_puts_r+0x36>
 8005138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800513a:	f002 fb92 	bl	8007862 <__retarget_lock_acquire_recursive>
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	0719      	lsls	r1, r3, #28
 8005142:	d51d      	bpl.n	8005180 <_puts_r+0x78>
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	b1db      	cbz	r3, 8005180 <_puts_r+0x78>
 8005148:	3e01      	subs	r6, #1
 800514a:	68a3      	ldr	r3, [r4, #8]
 800514c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005150:	3b01      	subs	r3, #1
 8005152:	60a3      	str	r3, [r4, #8]
 8005154:	bb39      	cbnz	r1, 80051a6 <_puts_r+0x9e>
 8005156:	2b00      	cmp	r3, #0
 8005158:	da38      	bge.n	80051cc <_puts_r+0xc4>
 800515a:	4622      	mov	r2, r4
 800515c:	210a      	movs	r1, #10
 800515e:	4628      	mov	r0, r5
 8005160:	f000 ff1a 	bl	8005f98 <__swbuf_r>
 8005164:	3001      	adds	r0, #1
 8005166:	d011      	beq.n	800518c <_puts_r+0x84>
 8005168:	250a      	movs	r5, #10
 800516a:	e011      	b.n	8005190 <_puts_r+0x88>
 800516c:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <_puts_r+0xd4>)
 800516e:	429c      	cmp	r4, r3
 8005170:	d101      	bne.n	8005176 <_puts_r+0x6e>
 8005172:	68ac      	ldr	r4, [r5, #8]
 8005174:	e7da      	b.n	800512c <_puts_r+0x24>
 8005176:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <_puts_r+0xd8>)
 8005178:	429c      	cmp	r4, r3
 800517a:	bf08      	it	eq
 800517c:	68ec      	ldreq	r4, [r5, #12]
 800517e:	e7d5      	b.n	800512c <_puts_r+0x24>
 8005180:	4621      	mov	r1, r4
 8005182:	4628      	mov	r0, r5
 8005184:	f000 ff5a 	bl	800603c <__swsetup_r>
 8005188:	2800      	cmp	r0, #0
 800518a:	d0dd      	beq.n	8005148 <_puts_r+0x40>
 800518c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005192:	07da      	lsls	r2, r3, #31
 8005194:	d405      	bmi.n	80051a2 <_puts_r+0x9a>
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	059b      	lsls	r3, r3, #22
 800519a:	d402      	bmi.n	80051a2 <_puts_r+0x9a>
 800519c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800519e:	f002 fb61 	bl	8007864 <__retarget_lock_release_recursive>
 80051a2:	4628      	mov	r0, r5
 80051a4:	bd70      	pop	{r4, r5, r6, pc}
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	da04      	bge.n	80051b4 <_puts_r+0xac>
 80051aa:	69a2      	ldr	r2, [r4, #24]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	dc06      	bgt.n	80051be <_puts_r+0xb6>
 80051b0:	290a      	cmp	r1, #10
 80051b2:	d004      	beq.n	80051be <_puts_r+0xb6>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	6022      	str	r2, [r4, #0]
 80051ba:	7019      	strb	r1, [r3, #0]
 80051bc:	e7c5      	b.n	800514a <_puts_r+0x42>
 80051be:	4622      	mov	r2, r4
 80051c0:	4628      	mov	r0, r5
 80051c2:	f000 fee9 	bl	8005f98 <__swbuf_r>
 80051c6:	3001      	adds	r0, #1
 80051c8:	d1bf      	bne.n	800514a <_puts_r+0x42>
 80051ca:	e7df      	b.n	800518c <_puts_r+0x84>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	250a      	movs	r5, #10
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	6022      	str	r2, [r4, #0]
 80051d4:	701d      	strb	r5, [r3, #0]
 80051d6:	e7db      	b.n	8005190 <_puts_r+0x88>
 80051d8:	0800908c 	.word	0x0800908c
 80051dc:	080090ac 	.word	0x080090ac
 80051e0:	0800906c 	.word	0x0800906c

080051e4 <puts>:
 80051e4:	4b02      	ldr	r3, [pc, #8]	; (80051f0 <puts+0xc>)
 80051e6:	4601      	mov	r1, r0
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	f7ff bf8d 	b.w	8005108 <_puts_r>
 80051ee:	bf00      	nop
 80051f0:	2000000c 	.word	0x2000000c

080051f4 <nanf>:
 80051f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80051fc <nanf+0x8>
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	7fc00000 	.word	0x7fc00000

08005200 <siprintf>:
 8005200:	b40e      	push	{r1, r2, r3}
 8005202:	b500      	push	{lr}
 8005204:	b09c      	sub	sp, #112	; 0x70
 8005206:	ab1d      	add	r3, sp, #116	; 0x74
 8005208:	9002      	str	r0, [sp, #8]
 800520a:	9006      	str	r0, [sp, #24]
 800520c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005210:	4809      	ldr	r0, [pc, #36]	; (8005238 <siprintf+0x38>)
 8005212:	9107      	str	r1, [sp, #28]
 8005214:	9104      	str	r1, [sp, #16]
 8005216:	4909      	ldr	r1, [pc, #36]	; (800523c <siprintf+0x3c>)
 8005218:	f853 2b04 	ldr.w	r2, [r3], #4
 800521c:	9105      	str	r1, [sp, #20]
 800521e:	6800      	ldr	r0, [r0, #0]
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	a902      	add	r1, sp, #8
 8005224:	f003 f9c0 	bl	80085a8 <_svfiprintf_r>
 8005228:	9b02      	ldr	r3, [sp, #8]
 800522a:	2200      	movs	r2, #0
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	b01c      	add	sp, #112	; 0x70
 8005230:	f85d eb04 	ldr.w	lr, [sp], #4
 8005234:	b003      	add	sp, #12
 8005236:	4770      	bx	lr
 8005238:	2000000c 	.word	0x2000000c
 800523c:	ffff0208 	.word	0xffff0208

08005240 <sulp>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	4604      	mov	r4, r0
 8005244:	460d      	mov	r5, r1
 8005246:	ec45 4b10 	vmov	d0, r4, r5
 800524a:	4616      	mov	r6, r2
 800524c:	f002 ff0a 	bl	8008064 <__ulp>
 8005250:	ec51 0b10 	vmov	r0, r1, d0
 8005254:	b17e      	cbz	r6, 8005276 <sulp+0x36>
 8005256:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800525a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800525e:	2b00      	cmp	r3, #0
 8005260:	dd09      	ble.n	8005276 <sulp+0x36>
 8005262:	051b      	lsls	r3, r3, #20
 8005264:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005268:	2400      	movs	r4, #0
 800526a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800526e:	4622      	mov	r2, r4
 8005270:	462b      	mov	r3, r5
 8005272:	f7fb f9c1 	bl	80005f8 <__aeabi_dmul>
 8005276:	bd70      	pop	{r4, r5, r6, pc}

08005278 <_strtod_l>:
 8005278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527c:	ed2d 8b02 	vpush	{d8}
 8005280:	b09d      	sub	sp, #116	; 0x74
 8005282:	461f      	mov	r7, r3
 8005284:	2300      	movs	r3, #0
 8005286:	9318      	str	r3, [sp, #96]	; 0x60
 8005288:	4ba2      	ldr	r3, [pc, #648]	; (8005514 <_strtod_l+0x29c>)
 800528a:	9213      	str	r2, [sp, #76]	; 0x4c
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	9305      	str	r3, [sp, #20]
 8005290:	4604      	mov	r4, r0
 8005292:	4618      	mov	r0, r3
 8005294:	4688      	mov	r8, r1
 8005296:	f7fa ff9b 	bl	80001d0 <strlen>
 800529a:	f04f 0a00 	mov.w	sl, #0
 800529e:	4605      	mov	r5, r0
 80052a0:	f04f 0b00 	mov.w	fp, #0
 80052a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80052a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052aa:	781a      	ldrb	r2, [r3, #0]
 80052ac:	2a2b      	cmp	r2, #43	; 0x2b
 80052ae:	d04e      	beq.n	800534e <_strtod_l+0xd6>
 80052b0:	d83b      	bhi.n	800532a <_strtod_l+0xb2>
 80052b2:	2a0d      	cmp	r2, #13
 80052b4:	d834      	bhi.n	8005320 <_strtod_l+0xa8>
 80052b6:	2a08      	cmp	r2, #8
 80052b8:	d834      	bhi.n	8005324 <_strtod_l+0xac>
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	d03e      	beq.n	800533c <_strtod_l+0xc4>
 80052be:	2300      	movs	r3, #0
 80052c0:	930a      	str	r3, [sp, #40]	; 0x28
 80052c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80052c4:	7833      	ldrb	r3, [r6, #0]
 80052c6:	2b30      	cmp	r3, #48	; 0x30
 80052c8:	f040 80b0 	bne.w	800542c <_strtod_l+0x1b4>
 80052cc:	7873      	ldrb	r3, [r6, #1]
 80052ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80052d2:	2b58      	cmp	r3, #88	; 0x58
 80052d4:	d168      	bne.n	80053a8 <_strtod_l+0x130>
 80052d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	ab18      	add	r3, sp, #96	; 0x60
 80052dc:	9702      	str	r7, [sp, #8]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	4a8d      	ldr	r2, [pc, #564]	; (8005518 <_strtod_l+0x2a0>)
 80052e2:	ab19      	add	r3, sp, #100	; 0x64
 80052e4:	a917      	add	r1, sp, #92	; 0x5c
 80052e6:	4620      	mov	r0, r4
 80052e8:	f001 ffae 	bl	8007248 <__gethex>
 80052ec:	f010 0707 	ands.w	r7, r0, #7
 80052f0:	4605      	mov	r5, r0
 80052f2:	d005      	beq.n	8005300 <_strtod_l+0x88>
 80052f4:	2f06      	cmp	r7, #6
 80052f6:	d12c      	bne.n	8005352 <_strtod_l+0xda>
 80052f8:	3601      	adds	r6, #1
 80052fa:	2300      	movs	r3, #0
 80052fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80052fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005302:	2b00      	cmp	r3, #0
 8005304:	f040 8590 	bne.w	8005e28 <_strtod_l+0xbb0>
 8005308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800530a:	b1eb      	cbz	r3, 8005348 <_strtod_l+0xd0>
 800530c:	4652      	mov	r2, sl
 800530e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005312:	ec43 2b10 	vmov	d0, r2, r3
 8005316:	b01d      	add	sp, #116	; 0x74
 8005318:	ecbd 8b02 	vpop	{d8}
 800531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005320:	2a20      	cmp	r2, #32
 8005322:	d1cc      	bne.n	80052be <_strtod_l+0x46>
 8005324:	3301      	adds	r3, #1
 8005326:	9317      	str	r3, [sp, #92]	; 0x5c
 8005328:	e7be      	b.n	80052a8 <_strtod_l+0x30>
 800532a:	2a2d      	cmp	r2, #45	; 0x2d
 800532c:	d1c7      	bne.n	80052be <_strtod_l+0x46>
 800532e:	2201      	movs	r2, #1
 8005330:	920a      	str	r2, [sp, #40]	; 0x28
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	9217      	str	r2, [sp, #92]	; 0x5c
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1c2      	bne.n	80052c2 <_strtod_l+0x4a>
 800533c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800533e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 856e 	bne.w	8005e24 <_strtod_l+0xbac>
 8005348:	4652      	mov	r2, sl
 800534a:	465b      	mov	r3, fp
 800534c:	e7e1      	b.n	8005312 <_strtod_l+0x9a>
 800534e:	2200      	movs	r2, #0
 8005350:	e7ee      	b.n	8005330 <_strtod_l+0xb8>
 8005352:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005354:	b13a      	cbz	r2, 8005366 <_strtod_l+0xee>
 8005356:	2135      	movs	r1, #53	; 0x35
 8005358:	a81a      	add	r0, sp, #104	; 0x68
 800535a:	f002 ff8e 	bl	800827a <__copybits>
 800535e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005360:	4620      	mov	r0, r4
 8005362:	f002 fb4d 	bl	8007a00 <_Bfree>
 8005366:	3f01      	subs	r7, #1
 8005368:	2f04      	cmp	r7, #4
 800536a:	d806      	bhi.n	800537a <_strtod_l+0x102>
 800536c:	e8df f007 	tbb	[pc, r7]
 8005370:	1714030a 	.word	0x1714030a
 8005374:	0a          	.byte	0x0a
 8005375:	00          	.byte	0x00
 8005376:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800537a:	0728      	lsls	r0, r5, #28
 800537c:	d5c0      	bpl.n	8005300 <_strtod_l+0x88>
 800537e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005382:	e7bd      	b.n	8005300 <_strtod_l+0x88>
 8005384:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005388:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800538a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800538e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005392:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005396:	e7f0      	b.n	800537a <_strtod_l+0x102>
 8005398:	f8df b180 	ldr.w	fp, [pc, #384]	; 800551c <_strtod_l+0x2a4>
 800539c:	e7ed      	b.n	800537a <_strtod_l+0x102>
 800539e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80053a2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80053a6:	e7e8      	b.n	800537a <_strtod_l+0x102>
 80053a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2b30      	cmp	r3, #48	; 0x30
 80053b2:	d0f9      	beq.n	80053a8 <_strtod_l+0x130>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0a3      	beq.n	8005300 <_strtod_l+0x88>
 80053b8:	2301      	movs	r3, #1
 80053ba:	f04f 0900 	mov.w	r9, #0
 80053be:	9304      	str	r3, [sp, #16]
 80053c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053c2:	9308      	str	r3, [sp, #32]
 80053c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80053c8:	464f      	mov	r7, r9
 80053ca:	220a      	movs	r2, #10
 80053cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80053ce:	7806      	ldrb	r6, [r0, #0]
 80053d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80053d4:	b2d9      	uxtb	r1, r3
 80053d6:	2909      	cmp	r1, #9
 80053d8:	d92a      	bls.n	8005430 <_strtod_l+0x1b8>
 80053da:	9905      	ldr	r1, [sp, #20]
 80053dc:	462a      	mov	r2, r5
 80053de:	f003 fa3e 	bl	800885e <strncmp>
 80053e2:	b398      	cbz	r0, 800544c <_strtod_l+0x1d4>
 80053e4:	2000      	movs	r0, #0
 80053e6:	4632      	mov	r2, r6
 80053e8:	463d      	mov	r5, r7
 80053ea:	9005      	str	r0, [sp, #20]
 80053ec:	4603      	mov	r3, r0
 80053ee:	2a65      	cmp	r2, #101	; 0x65
 80053f0:	d001      	beq.n	80053f6 <_strtod_l+0x17e>
 80053f2:	2a45      	cmp	r2, #69	; 0x45
 80053f4:	d118      	bne.n	8005428 <_strtod_l+0x1b0>
 80053f6:	b91d      	cbnz	r5, 8005400 <_strtod_l+0x188>
 80053f8:	9a04      	ldr	r2, [sp, #16]
 80053fa:	4302      	orrs	r2, r0
 80053fc:	d09e      	beq.n	800533c <_strtod_l+0xc4>
 80053fe:	2500      	movs	r5, #0
 8005400:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005404:	f108 0201 	add.w	r2, r8, #1
 8005408:	9217      	str	r2, [sp, #92]	; 0x5c
 800540a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800540e:	2a2b      	cmp	r2, #43	; 0x2b
 8005410:	d075      	beq.n	80054fe <_strtod_l+0x286>
 8005412:	2a2d      	cmp	r2, #45	; 0x2d
 8005414:	d07b      	beq.n	800550e <_strtod_l+0x296>
 8005416:	f04f 0c00 	mov.w	ip, #0
 800541a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800541e:	2909      	cmp	r1, #9
 8005420:	f240 8082 	bls.w	8005528 <_strtod_l+0x2b0>
 8005424:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005428:	2600      	movs	r6, #0
 800542a:	e09d      	b.n	8005568 <_strtod_l+0x2f0>
 800542c:	2300      	movs	r3, #0
 800542e:	e7c4      	b.n	80053ba <_strtod_l+0x142>
 8005430:	2f08      	cmp	r7, #8
 8005432:	bfd8      	it	le
 8005434:	9907      	ldrle	r1, [sp, #28]
 8005436:	f100 0001 	add.w	r0, r0, #1
 800543a:	bfda      	itte	le
 800543c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005440:	9307      	strle	r3, [sp, #28]
 8005442:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005446:	3701      	adds	r7, #1
 8005448:	9017      	str	r0, [sp, #92]	; 0x5c
 800544a:	e7bf      	b.n	80053cc <_strtod_l+0x154>
 800544c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800544e:	195a      	adds	r2, r3, r5
 8005450:	9217      	str	r2, [sp, #92]	; 0x5c
 8005452:	5d5a      	ldrb	r2, [r3, r5]
 8005454:	2f00      	cmp	r7, #0
 8005456:	d037      	beq.n	80054c8 <_strtod_l+0x250>
 8005458:	9005      	str	r0, [sp, #20]
 800545a:	463d      	mov	r5, r7
 800545c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005460:	2b09      	cmp	r3, #9
 8005462:	d912      	bls.n	800548a <_strtod_l+0x212>
 8005464:	2301      	movs	r3, #1
 8005466:	e7c2      	b.n	80053ee <_strtod_l+0x176>
 8005468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	9217      	str	r2, [sp, #92]	; 0x5c
 800546e:	785a      	ldrb	r2, [r3, #1]
 8005470:	3001      	adds	r0, #1
 8005472:	2a30      	cmp	r2, #48	; 0x30
 8005474:	d0f8      	beq.n	8005468 <_strtod_l+0x1f0>
 8005476:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800547a:	2b08      	cmp	r3, #8
 800547c:	f200 84d9 	bhi.w	8005e32 <_strtod_l+0xbba>
 8005480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005482:	9005      	str	r0, [sp, #20]
 8005484:	2000      	movs	r0, #0
 8005486:	9308      	str	r3, [sp, #32]
 8005488:	4605      	mov	r5, r0
 800548a:	3a30      	subs	r2, #48	; 0x30
 800548c:	f100 0301 	add.w	r3, r0, #1
 8005490:	d014      	beq.n	80054bc <_strtod_l+0x244>
 8005492:	9905      	ldr	r1, [sp, #20]
 8005494:	4419      	add	r1, r3
 8005496:	9105      	str	r1, [sp, #20]
 8005498:	462b      	mov	r3, r5
 800549a:	eb00 0e05 	add.w	lr, r0, r5
 800549e:	210a      	movs	r1, #10
 80054a0:	4573      	cmp	r3, lr
 80054a2:	d113      	bne.n	80054cc <_strtod_l+0x254>
 80054a4:	182b      	adds	r3, r5, r0
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	f105 0501 	add.w	r5, r5, #1
 80054ac:	4405      	add	r5, r0
 80054ae:	dc1c      	bgt.n	80054ea <_strtod_l+0x272>
 80054b0:	9907      	ldr	r1, [sp, #28]
 80054b2:	230a      	movs	r3, #10
 80054b4:	fb03 2301 	mla	r3, r3, r1, r2
 80054b8:	9307      	str	r3, [sp, #28]
 80054ba:	2300      	movs	r3, #0
 80054bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80054be:	1c51      	adds	r1, r2, #1
 80054c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80054c2:	7852      	ldrb	r2, [r2, #1]
 80054c4:	4618      	mov	r0, r3
 80054c6:	e7c9      	b.n	800545c <_strtod_l+0x1e4>
 80054c8:	4638      	mov	r0, r7
 80054ca:	e7d2      	b.n	8005472 <_strtod_l+0x1fa>
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	dc04      	bgt.n	80054da <_strtod_l+0x262>
 80054d0:	9e07      	ldr	r6, [sp, #28]
 80054d2:	434e      	muls	r6, r1
 80054d4:	9607      	str	r6, [sp, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	e7e2      	b.n	80054a0 <_strtod_l+0x228>
 80054da:	f103 0c01 	add.w	ip, r3, #1
 80054de:	f1bc 0f10 	cmp.w	ip, #16
 80054e2:	bfd8      	it	le
 80054e4:	fb01 f909 	mulle.w	r9, r1, r9
 80054e8:	e7f5      	b.n	80054d6 <_strtod_l+0x25e>
 80054ea:	2d10      	cmp	r5, #16
 80054ec:	bfdc      	itt	le
 80054ee:	230a      	movle	r3, #10
 80054f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80054f4:	e7e1      	b.n	80054ba <_strtod_l+0x242>
 80054f6:	2300      	movs	r3, #0
 80054f8:	9305      	str	r3, [sp, #20]
 80054fa:	2301      	movs	r3, #1
 80054fc:	e77c      	b.n	80053f8 <_strtod_l+0x180>
 80054fe:	f04f 0c00 	mov.w	ip, #0
 8005502:	f108 0202 	add.w	r2, r8, #2
 8005506:	9217      	str	r2, [sp, #92]	; 0x5c
 8005508:	f898 2002 	ldrb.w	r2, [r8, #2]
 800550c:	e785      	b.n	800541a <_strtod_l+0x1a2>
 800550e:	f04f 0c01 	mov.w	ip, #1
 8005512:	e7f6      	b.n	8005502 <_strtod_l+0x28a>
 8005514:	08009134 	.word	0x08009134
 8005518:	08008e84 	.word	0x08008e84
 800551c:	7ff00000 	.word	0x7ff00000
 8005520:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005522:	1c51      	adds	r1, r2, #1
 8005524:	9117      	str	r1, [sp, #92]	; 0x5c
 8005526:	7852      	ldrb	r2, [r2, #1]
 8005528:	2a30      	cmp	r2, #48	; 0x30
 800552a:	d0f9      	beq.n	8005520 <_strtod_l+0x2a8>
 800552c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005530:	2908      	cmp	r1, #8
 8005532:	f63f af79 	bhi.w	8005428 <_strtod_l+0x1b0>
 8005536:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800553a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800553c:	9206      	str	r2, [sp, #24]
 800553e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005540:	1c51      	adds	r1, r2, #1
 8005542:	9117      	str	r1, [sp, #92]	; 0x5c
 8005544:	7852      	ldrb	r2, [r2, #1]
 8005546:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800554a:	2e09      	cmp	r6, #9
 800554c:	d937      	bls.n	80055be <_strtod_l+0x346>
 800554e:	9e06      	ldr	r6, [sp, #24]
 8005550:	1b89      	subs	r1, r1, r6
 8005552:	2908      	cmp	r1, #8
 8005554:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005558:	dc02      	bgt.n	8005560 <_strtod_l+0x2e8>
 800555a:	4576      	cmp	r6, lr
 800555c:	bfa8      	it	ge
 800555e:	4676      	movge	r6, lr
 8005560:	f1bc 0f00 	cmp.w	ip, #0
 8005564:	d000      	beq.n	8005568 <_strtod_l+0x2f0>
 8005566:	4276      	negs	r6, r6
 8005568:	2d00      	cmp	r5, #0
 800556a:	d14d      	bne.n	8005608 <_strtod_l+0x390>
 800556c:	9904      	ldr	r1, [sp, #16]
 800556e:	4301      	orrs	r1, r0
 8005570:	f47f aec6 	bne.w	8005300 <_strtod_l+0x88>
 8005574:	2b00      	cmp	r3, #0
 8005576:	f47f aee1 	bne.w	800533c <_strtod_l+0xc4>
 800557a:	2a69      	cmp	r2, #105	; 0x69
 800557c:	d027      	beq.n	80055ce <_strtod_l+0x356>
 800557e:	dc24      	bgt.n	80055ca <_strtod_l+0x352>
 8005580:	2a49      	cmp	r2, #73	; 0x49
 8005582:	d024      	beq.n	80055ce <_strtod_l+0x356>
 8005584:	2a4e      	cmp	r2, #78	; 0x4e
 8005586:	f47f aed9 	bne.w	800533c <_strtod_l+0xc4>
 800558a:	499f      	ldr	r1, [pc, #636]	; (8005808 <_strtod_l+0x590>)
 800558c:	a817      	add	r0, sp, #92	; 0x5c
 800558e:	f002 f8b3 	bl	80076f8 <__match>
 8005592:	2800      	cmp	r0, #0
 8005594:	f43f aed2 	beq.w	800533c <_strtod_l+0xc4>
 8005598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b28      	cmp	r3, #40	; 0x28
 800559e:	d12d      	bne.n	80055fc <_strtod_l+0x384>
 80055a0:	499a      	ldr	r1, [pc, #616]	; (800580c <_strtod_l+0x594>)
 80055a2:	aa1a      	add	r2, sp, #104	; 0x68
 80055a4:	a817      	add	r0, sp, #92	; 0x5c
 80055a6:	f002 f8bb 	bl	8007720 <__hexnan>
 80055aa:	2805      	cmp	r0, #5
 80055ac:	d126      	bne.n	80055fc <_strtod_l+0x384>
 80055ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80055b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80055b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80055bc:	e6a0      	b.n	8005300 <_strtod_l+0x88>
 80055be:	210a      	movs	r1, #10
 80055c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80055c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80055c8:	e7b9      	b.n	800553e <_strtod_l+0x2c6>
 80055ca:	2a6e      	cmp	r2, #110	; 0x6e
 80055cc:	e7db      	b.n	8005586 <_strtod_l+0x30e>
 80055ce:	4990      	ldr	r1, [pc, #576]	; (8005810 <_strtod_l+0x598>)
 80055d0:	a817      	add	r0, sp, #92	; 0x5c
 80055d2:	f002 f891 	bl	80076f8 <__match>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	f43f aeb0 	beq.w	800533c <_strtod_l+0xc4>
 80055dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055de:	498d      	ldr	r1, [pc, #564]	; (8005814 <_strtod_l+0x59c>)
 80055e0:	3b01      	subs	r3, #1
 80055e2:	a817      	add	r0, sp, #92	; 0x5c
 80055e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80055e6:	f002 f887 	bl	80076f8 <__match>
 80055ea:	b910      	cbnz	r0, 80055f2 <_strtod_l+0x37a>
 80055ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055ee:	3301      	adds	r3, #1
 80055f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80055f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005824 <_strtod_l+0x5ac>
 80055f6:	f04f 0a00 	mov.w	sl, #0
 80055fa:	e681      	b.n	8005300 <_strtod_l+0x88>
 80055fc:	4886      	ldr	r0, [pc, #536]	; (8005818 <_strtod_l+0x5a0>)
 80055fe:	f003 f8d3 	bl	80087a8 <nan>
 8005602:	ec5b ab10 	vmov	sl, fp, d0
 8005606:	e67b      	b.n	8005300 <_strtod_l+0x88>
 8005608:	9b05      	ldr	r3, [sp, #20]
 800560a:	9807      	ldr	r0, [sp, #28]
 800560c:	1af3      	subs	r3, r6, r3
 800560e:	2f00      	cmp	r7, #0
 8005610:	bf08      	it	eq
 8005612:	462f      	moveq	r7, r5
 8005614:	2d10      	cmp	r5, #16
 8005616:	9306      	str	r3, [sp, #24]
 8005618:	46a8      	mov	r8, r5
 800561a:	bfa8      	it	ge
 800561c:	f04f 0810 	movge.w	r8, #16
 8005620:	f7fa ff70 	bl	8000504 <__aeabi_ui2d>
 8005624:	2d09      	cmp	r5, #9
 8005626:	4682      	mov	sl, r0
 8005628:	468b      	mov	fp, r1
 800562a:	dd13      	ble.n	8005654 <_strtod_l+0x3dc>
 800562c:	4b7b      	ldr	r3, [pc, #492]	; (800581c <_strtod_l+0x5a4>)
 800562e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005632:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005636:	f7fa ffdf 	bl	80005f8 <__aeabi_dmul>
 800563a:	4682      	mov	sl, r0
 800563c:	4648      	mov	r0, r9
 800563e:	468b      	mov	fp, r1
 8005640:	f7fa ff60 	bl	8000504 <__aeabi_ui2d>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4650      	mov	r0, sl
 800564a:	4659      	mov	r1, fp
 800564c:	f7fa fe1e 	bl	800028c <__adddf3>
 8005650:	4682      	mov	sl, r0
 8005652:	468b      	mov	fp, r1
 8005654:	2d0f      	cmp	r5, #15
 8005656:	dc38      	bgt.n	80056ca <_strtod_l+0x452>
 8005658:	9b06      	ldr	r3, [sp, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f43f ae50 	beq.w	8005300 <_strtod_l+0x88>
 8005660:	dd24      	ble.n	80056ac <_strtod_l+0x434>
 8005662:	2b16      	cmp	r3, #22
 8005664:	dc0b      	bgt.n	800567e <_strtod_l+0x406>
 8005666:	496d      	ldr	r1, [pc, #436]	; (800581c <_strtod_l+0x5a4>)
 8005668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800566c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005670:	4652      	mov	r2, sl
 8005672:	465b      	mov	r3, fp
 8005674:	f7fa ffc0 	bl	80005f8 <__aeabi_dmul>
 8005678:	4682      	mov	sl, r0
 800567a:	468b      	mov	fp, r1
 800567c:	e640      	b.n	8005300 <_strtod_l+0x88>
 800567e:	9a06      	ldr	r2, [sp, #24]
 8005680:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005684:	4293      	cmp	r3, r2
 8005686:	db20      	blt.n	80056ca <_strtod_l+0x452>
 8005688:	4c64      	ldr	r4, [pc, #400]	; (800581c <_strtod_l+0x5a4>)
 800568a:	f1c5 050f 	rsb	r5, r5, #15
 800568e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005692:	4652      	mov	r2, sl
 8005694:	465b      	mov	r3, fp
 8005696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800569a:	f7fa ffad 	bl	80005f8 <__aeabi_dmul>
 800569e:	9b06      	ldr	r3, [sp, #24]
 80056a0:	1b5d      	subs	r5, r3, r5
 80056a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80056a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80056aa:	e7e3      	b.n	8005674 <_strtod_l+0x3fc>
 80056ac:	9b06      	ldr	r3, [sp, #24]
 80056ae:	3316      	adds	r3, #22
 80056b0:	db0b      	blt.n	80056ca <_strtod_l+0x452>
 80056b2:	9b05      	ldr	r3, [sp, #20]
 80056b4:	1b9e      	subs	r6, r3, r6
 80056b6:	4b59      	ldr	r3, [pc, #356]	; (800581c <_strtod_l+0x5a4>)
 80056b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80056bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056c0:	4650      	mov	r0, sl
 80056c2:	4659      	mov	r1, fp
 80056c4:	f7fb f8c2 	bl	800084c <__aeabi_ddiv>
 80056c8:	e7d6      	b.n	8005678 <_strtod_l+0x400>
 80056ca:	9b06      	ldr	r3, [sp, #24]
 80056cc:	eba5 0808 	sub.w	r8, r5, r8
 80056d0:	4498      	add	r8, r3
 80056d2:	f1b8 0f00 	cmp.w	r8, #0
 80056d6:	dd74      	ble.n	80057c2 <_strtod_l+0x54a>
 80056d8:	f018 030f 	ands.w	r3, r8, #15
 80056dc:	d00a      	beq.n	80056f4 <_strtod_l+0x47c>
 80056de:	494f      	ldr	r1, [pc, #316]	; (800581c <_strtod_l+0x5a4>)
 80056e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80056e4:	4652      	mov	r2, sl
 80056e6:	465b      	mov	r3, fp
 80056e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056ec:	f7fa ff84 	bl	80005f8 <__aeabi_dmul>
 80056f0:	4682      	mov	sl, r0
 80056f2:	468b      	mov	fp, r1
 80056f4:	f038 080f 	bics.w	r8, r8, #15
 80056f8:	d04f      	beq.n	800579a <_strtod_l+0x522>
 80056fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80056fe:	dd22      	ble.n	8005746 <_strtod_l+0x4ce>
 8005700:	2500      	movs	r5, #0
 8005702:	462e      	mov	r6, r5
 8005704:	9507      	str	r5, [sp, #28]
 8005706:	9505      	str	r5, [sp, #20]
 8005708:	2322      	movs	r3, #34	; 0x22
 800570a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005824 <_strtod_l+0x5ac>
 800570e:	6023      	str	r3, [r4, #0]
 8005710:	f04f 0a00 	mov.w	sl, #0
 8005714:	9b07      	ldr	r3, [sp, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f43f adf2 	beq.w	8005300 <_strtod_l+0x88>
 800571c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800571e:	4620      	mov	r0, r4
 8005720:	f002 f96e 	bl	8007a00 <_Bfree>
 8005724:	9905      	ldr	r1, [sp, #20]
 8005726:	4620      	mov	r0, r4
 8005728:	f002 f96a 	bl	8007a00 <_Bfree>
 800572c:	4631      	mov	r1, r6
 800572e:	4620      	mov	r0, r4
 8005730:	f002 f966 	bl	8007a00 <_Bfree>
 8005734:	9907      	ldr	r1, [sp, #28]
 8005736:	4620      	mov	r0, r4
 8005738:	f002 f962 	bl	8007a00 <_Bfree>
 800573c:	4629      	mov	r1, r5
 800573e:	4620      	mov	r0, r4
 8005740:	f002 f95e 	bl	8007a00 <_Bfree>
 8005744:	e5dc      	b.n	8005300 <_strtod_l+0x88>
 8005746:	4b36      	ldr	r3, [pc, #216]	; (8005820 <_strtod_l+0x5a8>)
 8005748:	9304      	str	r3, [sp, #16]
 800574a:	2300      	movs	r3, #0
 800574c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005750:	4650      	mov	r0, sl
 8005752:	4659      	mov	r1, fp
 8005754:	4699      	mov	r9, r3
 8005756:	f1b8 0f01 	cmp.w	r8, #1
 800575a:	dc21      	bgt.n	80057a0 <_strtod_l+0x528>
 800575c:	b10b      	cbz	r3, 8005762 <_strtod_l+0x4ea>
 800575e:	4682      	mov	sl, r0
 8005760:	468b      	mov	fp, r1
 8005762:	4b2f      	ldr	r3, [pc, #188]	; (8005820 <_strtod_l+0x5a8>)
 8005764:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005768:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800576c:	4652      	mov	r2, sl
 800576e:	465b      	mov	r3, fp
 8005770:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005774:	f7fa ff40 	bl	80005f8 <__aeabi_dmul>
 8005778:	4b2a      	ldr	r3, [pc, #168]	; (8005824 <_strtod_l+0x5ac>)
 800577a:	460a      	mov	r2, r1
 800577c:	400b      	ands	r3, r1
 800577e:	492a      	ldr	r1, [pc, #168]	; (8005828 <_strtod_l+0x5b0>)
 8005780:	428b      	cmp	r3, r1
 8005782:	4682      	mov	sl, r0
 8005784:	d8bc      	bhi.n	8005700 <_strtod_l+0x488>
 8005786:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800578a:	428b      	cmp	r3, r1
 800578c:	bf86      	itte	hi
 800578e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800582c <_strtod_l+0x5b4>
 8005792:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005796:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800579a:	2300      	movs	r3, #0
 800579c:	9304      	str	r3, [sp, #16]
 800579e:	e084      	b.n	80058aa <_strtod_l+0x632>
 80057a0:	f018 0f01 	tst.w	r8, #1
 80057a4:	d005      	beq.n	80057b2 <_strtod_l+0x53a>
 80057a6:	9b04      	ldr	r3, [sp, #16]
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	f7fa ff24 	bl	80005f8 <__aeabi_dmul>
 80057b0:	2301      	movs	r3, #1
 80057b2:	9a04      	ldr	r2, [sp, #16]
 80057b4:	3208      	adds	r2, #8
 80057b6:	f109 0901 	add.w	r9, r9, #1
 80057ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80057be:	9204      	str	r2, [sp, #16]
 80057c0:	e7c9      	b.n	8005756 <_strtod_l+0x4de>
 80057c2:	d0ea      	beq.n	800579a <_strtod_l+0x522>
 80057c4:	f1c8 0800 	rsb	r8, r8, #0
 80057c8:	f018 020f 	ands.w	r2, r8, #15
 80057cc:	d00a      	beq.n	80057e4 <_strtod_l+0x56c>
 80057ce:	4b13      	ldr	r3, [pc, #76]	; (800581c <_strtod_l+0x5a4>)
 80057d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057d4:	4650      	mov	r0, sl
 80057d6:	4659      	mov	r1, fp
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f7fb f836 	bl	800084c <__aeabi_ddiv>
 80057e0:	4682      	mov	sl, r0
 80057e2:	468b      	mov	fp, r1
 80057e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80057e8:	d0d7      	beq.n	800579a <_strtod_l+0x522>
 80057ea:	f1b8 0f1f 	cmp.w	r8, #31
 80057ee:	dd1f      	ble.n	8005830 <_strtod_l+0x5b8>
 80057f0:	2500      	movs	r5, #0
 80057f2:	462e      	mov	r6, r5
 80057f4:	9507      	str	r5, [sp, #28]
 80057f6:	9505      	str	r5, [sp, #20]
 80057f8:	2322      	movs	r3, #34	; 0x22
 80057fa:	f04f 0a00 	mov.w	sl, #0
 80057fe:	f04f 0b00 	mov.w	fp, #0
 8005802:	6023      	str	r3, [r4, #0]
 8005804:	e786      	b.n	8005714 <_strtod_l+0x49c>
 8005806:	bf00      	nop
 8005808:	08008e55 	.word	0x08008e55
 800580c:	08008e98 	.word	0x08008e98
 8005810:	08008e4d 	.word	0x08008e4d
 8005814:	08008fdc 	.word	0x08008fdc
 8005818:	080092f0 	.word	0x080092f0
 800581c:	080091d0 	.word	0x080091d0
 8005820:	080091a8 	.word	0x080091a8
 8005824:	7ff00000 	.word	0x7ff00000
 8005828:	7ca00000 	.word	0x7ca00000
 800582c:	7fefffff 	.word	0x7fefffff
 8005830:	f018 0310 	ands.w	r3, r8, #16
 8005834:	bf18      	it	ne
 8005836:	236a      	movne	r3, #106	; 0x6a
 8005838:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005be8 <_strtod_l+0x970>
 800583c:	9304      	str	r3, [sp, #16]
 800583e:	4650      	mov	r0, sl
 8005840:	4659      	mov	r1, fp
 8005842:	2300      	movs	r3, #0
 8005844:	f018 0f01 	tst.w	r8, #1
 8005848:	d004      	beq.n	8005854 <_strtod_l+0x5dc>
 800584a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800584e:	f7fa fed3 	bl	80005f8 <__aeabi_dmul>
 8005852:	2301      	movs	r3, #1
 8005854:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005858:	f109 0908 	add.w	r9, r9, #8
 800585c:	d1f2      	bne.n	8005844 <_strtod_l+0x5cc>
 800585e:	b10b      	cbz	r3, 8005864 <_strtod_l+0x5ec>
 8005860:	4682      	mov	sl, r0
 8005862:	468b      	mov	fp, r1
 8005864:	9b04      	ldr	r3, [sp, #16]
 8005866:	b1c3      	cbz	r3, 800589a <_strtod_l+0x622>
 8005868:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800586c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005870:	2b00      	cmp	r3, #0
 8005872:	4659      	mov	r1, fp
 8005874:	dd11      	ble.n	800589a <_strtod_l+0x622>
 8005876:	2b1f      	cmp	r3, #31
 8005878:	f340 8124 	ble.w	8005ac4 <_strtod_l+0x84c>
 800587c:	2b34      	cmp	r3, #52	; 0x34
 800587e:	bfde      	ittt	le
 8005880:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005884:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005888:	fa03 f202 	lslle.w	r2, r3, r2
 800588c:	f04f 0a00 	mov.w	sl, #0
 8005890:	bfcc      	ite	gt
 8005892:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005896:	ea02 0b01 	andle.w	fp, r2, r1
 800589a:	2200      	movs	r2, #0
 800589c:	2300      	movs	r3, #0
 800589e:	4650      	mov	r0, sl
 80058a0:	4659      	mov	r1, fp
 80058a2:	f7fb f911 	bl	8000ac8 <__aeabi_dcmpeq>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d1a2      	bne.n	80057f0 <_strtod_l+0x578>
 80058aa:	9b07      	ldr	r3, [sp, #28]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	9908      	ldr	r1, [sp, #32]
 80058b0:	462b      	mov	r3, r5
 80058b2:	463a      	mov	r2, r7
 80058b4:	4620      	mov	r0, r4
 80058b6:	f002 f90b 	bl	8007ad0 <__s2b>
 80058ba:	9007      	str	r0, [sp, #28]
 80058bc:	2800      	cmp	r0, #0
 80058be:	f43f af1f 	beq.w	8005700 <_strtod_l+0x488>
 80058c2:	9b05      	ldr	r3, [sp, #20]
 80058c4:	1b9e      	subs	r6, r3, r6
 80058c6:	9b06      	ldr	r3, [sp, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bfb4      	ite	lt
 80058cc:	4633      	movlt	r3, r6
 80058ce:	2300      	movge	r3, #0
 80058d0:	930c      	str	r3, [sp, #48]	; 0x30
 80058d2:	9b06      	ldr	r3, [sp, #24]
 80058d4:	2500      	movs	r5, #0
 80058d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058da:	9312      	str	r3, [sp, #72]	; 0x48
 80058dc:	462e      	mov	r6, r5
 80058de:	9b07      	ldr	r3, [sp, #28]
 80058e0:	4620      	mov	r0, r4
 80058e2:	6859      	ldr	r1, [r3, #4]
 80058e4:	f002 f84c 	bl	8007980 <_Balloc>
 80058e8:	9005      	str	r0, [sp, #20]
 80058ea:	2800      	cmp	r0, #0
 80058ec:	f43f af0c 	beq.w	8005708 <_strtod_l+0x490>
 80058f0:	9b07      	ldr	r3, [sp, #28]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	3202      	adds	r2, #2
 80058f6:	f103 010c 	add.w	r1, r3, #12
 80058fa:	0092      	lsls	r2, r2, #2
 80058fc:	300c      	adds	r0, #12
 80058fe:	f002 f831 	bl	8007964 <memcpy>
 8005902:	ec4b ab10 	vmov	d0, sl, fp
 8005906:	aa1a      	add	r2, sp, #104	; 0x68
 8005908:	a919      	add	r1, sp, #100	; 0x64
 800590a:	4620      	mov	r0, r4
 800590c:	f002 fc26 	bl	800815c <__d2b>
 8005910:	ec4b ab18 	vmov	d8, sl, fp
 8005914:	9018      	str	r0, [sp, #96]	; 0x60
 8005916:	2800      	cmp	r0, #0
 8005918:	f43f aef6 	beq.w	8005708 <_strtod_l+0x490>
 800591c:	2101      	movs	r1, #1
 800591e:	4620      	mov	r0, r4
 8005920:	f002 f970 	bl	8007c04 <__i2b>
 8005924:	4606      	mov	r6, r0
 8005926:	2800      	cmp	r0, #0
 8005928:	f43f aeee 	beq.w	8005708 <_strtod_l+0x490>
 800592c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800592e:	9904      	ldr	r1, [sp, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	bfab      	itete	ge
 8005934:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005936:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005938:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800593a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800593e:	bfac      	ite	ge
 8005940:	eb03 0902 	addge.w	r9, r3, r2
 8005944:	1ad7      	sublt	r7, r2, r3
 8005946:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005948:	eba3 0801 	sub.w	r8, r3, r1
 800594c:	4490      	add	r8, r2
 800594e:	4ba1      	ldr	r3, [pc, #644]	; (8005bd4 <_strtod_l+0x95c>)
 8005950:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005954:	4598      	cmp	r8, r3
 8005956:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800595a:	f280 80c7 	bge.w	8005aec <_strtod_l+0x874>
 800595e:	eba3 0308 	sub.w	r3, r3, r8
 8005962:	2b1f      	cmp	r3, #31
 8005964:	eba2 0203 	sub.w	r2, r2, r3
 8005968:	f04f 0101 	mov.w	r1, #1
 800596c:	f300 80b1 	bgt.w	8005ad2 <_strtod_l+0x85a>
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	930d      	str	r3, [sp, #52]	; 0x34
 8005976:	2300      	movs	r3, #0
 8005978:	9308      	str	r3, [sp, #32]
 800597a:	eb09 0802 	add.w	r8, r9, r2
 800597e:	9b04      	ldr	r3, [sp, #16]
 8005980:	45c1      	cmp	r9, r8
 8005982:	4417      	add	r7, r2
 8005984:	441f      	add	r7, r3
 8005986:	464b      	mov	r3, r9
 8005988:	bfa8      	it	ge
 800598a:	4643      	movge	r3, r8
 800598c:	42bb      	cmp	r3, r7
 800598e:	bfa8      	it	ge
 8005990:	463b      	movge	r3, r7
 8005992:	2b00      	cmp	r3, #0
 8005994:	bfc2      	ittt	gt
 8005996:	eba8 0803 	subgt.w	r8, r8, r3
 800599a:	1aff      	subgt	r7, r7, r3
 800599c:	eba9 0903 	subgt.w	r9, r9, r3
 80059a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	dd17      	ble.n	80059d6 <_strtod_l+0x75e>
 80059a6:	4631      	mov	r1, r6
 80059a8:	461a      	mov	r2, r3
 80059aa:	4620      	mov	r0, r4
 80059ac:	f002 f9ea 	bl	8007d84 <__pow5mult>
 80059b0:	4606      	mov	r6, r0
 80059b2:	2800      	cmp	r0, #0
 80059b4:	f43f aea8 	beq.w	8005708 <_strtod_l+0x490>
 80059b8:	4601      	mov	r1, r0
 80059ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80059bc:	4620      	mov	r0, r4
 80059be:	f002 f937 	bl	8007c30 <__multiply>
 80059c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f43f ae9f 	beq.w	8005708 <_strtod_l+0x490>
 80059ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80059cc:	4620      	mov	r0, r4
 80059ce:	f002 f817 	bl	8007a00 <_Bfree>
 80059d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059d4:	9318      	str	r3, [sp, #96]	; 0x60
 80059d6:	f1b8 0f00 	cmp.w	r8, #0
 80059da:	f300 808c 	bgt.w	8005af6 <_strtod_l+0x87e>
 80059de:	9b06      	ldr	r3, [sp, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	dd08      	ble.n	80059f6 <_strtod_l+0x77e>
 80059e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059e6:	9905      	ldr	r1, [sp, #20]
 80059e8:	4620      	mov	r0, r4
 80059ea:	f002 f9cb 	bl	8007d84 <__pow5mult>
 80059ee:	9005      	str	r0, [sp, #20]
 80059f0:	2800      	cmp	r0, #0
 80059f2:	f43f ae89 	beq.w	8005708 <_strtod_l+0x490>
 80059f6:	2f00      	cmp	r7, #0
 80059f8:	dd08      	ble.n	8005a0c <_strtod_l+0x794>
 80059fa:	9905      	ldr	r1, [sp, #20]
 80059fc:	463a      	mov	r2, r7
 80059fe:	4620      	mov	r0, r4
 8005a00:	f002 fa1a 	bl	8007e38 <__lshift>
 8005a04:	9005      	str	r0, [sp, #20]
 8005a06:	2800      	cmp	r0, #0
 8005a08:	f43f ae7e 	beq.w	8005708 <_strtod_l+0x490>
 8005a0c:	f1b9 0f00 	cmp.w	r9, #0
 8005a10:	dd08      	ble.n	8005a24 <_strtod_l+0x7ac>
 8005a12:	4631      	mov	r1, r6
 8005a14:	464a      	mov	r2, r9
 8005a16:	4620      	mov	r0, r4
 8005a18:	f002 fa0e 	bl	8007e38 <__lshift>
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f43f ae72 	beq.w	8005708 <_strtod_l+0x490>
 8005a24:	9a05      	ldr	r2, [sp, #20]
 8005a26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f002 fa91 	bl	8007f50 <__mdiff>
 8005a2e:	4605      	mov	r5, r0
 8005a30:	2800      	cmp	r0, #0
 8005a32:	f43f ae69 	beq.w	8005708 <_strtod_l+0x490>
 8005a36:	68c3      	ldr	r3, [r0, #12]
 8005a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60c3      	str	r3, [r0, #12]
 8005a3e:	4631      	mov	r1, r6
 8005a40:	f002 fa6a 	bl	8007f18 <__mcmp>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	da60      	bge.n	8005b0a <_strtod_l+0x892>
 8005a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a4a:	ea53 030a 	orrs.w	r3, r3, sl
 8005a4e:	f040 8082 	bne.w	8005b56 <_strtod_l+0x8de>
 8005a52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d17d      	bne.n	8005b56 <_strtod_l+0x8de>
 8005a5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a5e:	0d1b      	lsrs	r3, r3, #20
 8005a60:	051b      	lsls	r3, r3, #20
 8005a62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005a66:	d976      	bls.n	8005b56 <_strtod_l+0x8de>
 8005a68:	696b      	ldr	r3, [r5, #20]
 8005a6a:	b913      	cbnz	r3, 8005a72 <_strtod_l+0x7fa>
 8005a6c:	692b      	ldr	r3, [r5, #16]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	dd71      	ble.n	8005b56 <_strtod_l+0x8de>
 8005a72:	4629      	mov	r1, r5
 8005a74:	2201      	movs	r2, #1
 8005a76:	4620      	mov	r0, r4
 8005a78:	f002 f9de 	bl	8007e38 <__lshift>
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4605      	mov	r5, r0
 8005a80:	f002 fa4a 	bl	8007f18 <__mcmp>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	dd66      	ble.n	8005b56 <_strtod_l+0x8de>
 8005a88:	9904      	ldr	r1, [sp, #16]
 8005a8a:	4a53      	ldr	r2, [pc, #332]	; (8005bd8 <_strtod_l+0x960>)
 8005a8c:	465b      	mov	r3, fp
 8005a8e:	2900      	cmp	r1, #0
 8005a90:	f000 8081 	beq.w	8005b96 <_strtod_l+0x91e>
 8005a94:	ea02 010b 	and.w	r1, r2, fp
 8005a98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005a9c:	dc7b      	bgt.n	8005b96 <_strtod_l+0x91e>
 8005a9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005aa2:	f77f aea9 	ble.w	80057f8 <_strtod_l+0x580>
 8005aa6:	4b4d      	ldr	r3, [pc, #308]	; (8005bdc <_strtod_l+0x964>)
 8005aa8:	4650      	mov	r0, sl
 8005aaa:	4659      	mov	r1, fp
 8005aac:	2200      	movs	r2, #0
 8005aae:	f7fa fda3 	bl	80005f8 <__aeabi_dmul>
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4303      	orrs	r3, r0
 8005ab6:	bf08      	it	eq
 8005ab8:	2322      	moveq	r3, #34	; 0x22
 8005aba:	4682      	mov	sl, r0
 8005abc:	468b      	mov	fp, r1
 8005abe:	bf08      	it	eq
 8005ac0:	6023      	streq	r3, [r4, #0]
 8005ac2:	e62b      	b.n	800571c <_strtod_l+0x4a4>
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	ea03 0a0a 	and.w	sl, r3, sl
 8005ad0:	e6e3      	b.n	800589a <_strtod_l+0x622>
 8005ad2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005ad6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005ada:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005ade:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005ae2:	fa01 f308 	lsl.w	r3, r1, r8
 8005ae6:	9308      	str	r3, [sp, #32]
 8005ae8:	910d      	str	r1, [sp, #52]	; 0x34
 8005aea:	e746      	b.n	800597a <_strtod_l+0x702>
 8005aec:	2300      	movs	r3, #0
 8005aee:	9308      	str	r3, [sp, #32]
 8005af0:	2301      	movs	r3, #1
 8005af2:	930d      	str	r3, [sp, #52]	; 0x34
 8005af4:	e741      	b.n	800597a <_strtod_l+0x702>
 8005af6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005af8:	4642      	mov	r2, r8
 8005afa:	4620      	mov	r0, r4
 8005afc:	f002 f99c 	bl	8007e38 <__lshift>
 8005b00:	9018      	str	r0, [sp, #96]	; 0x60
 8005b02:	2800      	cmp	r0, #0
 8005b04:	f47f af6b 	bne.w	80059de <_strtod_l+0x766>
 8005b08:	e5fe      	b.n	8005708 <_strtod_l+0x490>
 8005b0a:	465f      	mov	r7, fp
 8005b0c:	d16e      	bne.n	8005bec <_strtod_l+0x974>
 8005b0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b14:	b342      	cbz	r2, 8005b68 <_strtod_l+0x8f0>
 8005b16:	4a32      	ldr	r2, [pc, #200]	; (8005be0 <_strtod_l+0x968>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d128      	bne.n	8005b6e <_strtod_l+0x8f6>
 8005b1c:	9b04      	ldr	r3, [sp, #16]
 8005b1e:	4651      	mov	r1, sl
 8005b20:	b1eb      	cbz	r3, 8005b5e <_strtod_l+0x8e6>
 8005b22:	4b2d      	ldr	r3, [pc, #180]	; (8005bd8 <_strtod_l+0x960>)
 8005b24:	403b      	ands	r3, r7
 8005b26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b2e:	d819      	bhi.n	8005b64 <_strtod_l+0x8ec>
 8005b30:	0d1b      	lsrs	r3, r3, #20
 8005b32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	4299      	cmp	r1, r3
 8005b3c:	d117      	bne.n	8005b6e <_strtod_l+0x8f6>
 8005b3e:	4b29      	ldr	r3, [pc, #164]	; (8005be4 <_strtod_l+0x96c>)
 8005b40:	429f      	cmp	r7, r3
 8005b42:	d102      	bne.n	8005b4a <_strtod_l+0x8d2>
 8005b44:	3101      	adds	r1, #1
 8005b46:	f43f addf 	beq.w	8005708 <_strtod_l+0x490>
 8005b4a:	4b23      	ldr	r3, [pc, #140]	; (8005bd8 <_strtod_l+0x960>)
 8005b4c:	403b      	ands	r3, r7
 8005b4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005b52:	f04f 0a00 	mov.w	sl, #0
 8005b56:	9b04      	ldr	r3, [sp, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1a4      	bne.n	8005aa6 <_strtod_l+0x82e>
 8005b5c:	e5de      	b.n	800571c <_strtod_l+0x4a4>
 8005b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b62:	e7ea      	b.n	8005b3a <_strtod_l+0x8c2>
 8005b64:	4613      	mov	r3, r2
 8005b66:	e7e8      	b.n	8005b3a <_strtod_l+0x8c2>
 8005b68:	ea53 030a 	orrs.w	r3, r3, sl
 8005b6c:	d08c      	beq.n	8005a88 <_strtod_l+0x810>
 8005b6e:	9b08      	ldr	r3, [sp, #32]
 8005b70:	b1db      	cbz	r3, 8005baa <_strtod_l+0x932>
 8005b72:	423b      	tst	r3, r7
 8005b74:	d0ef      	beq.n	8005b56 <_strtod_l+0x8de>
 8005b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b78:	9a04      	ldr	r2, [sp, #16]
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	b1c3      	cbz	r3, 8005bb2 <_strtod_l+0x93a>
 8005b80:	f7ff fb5e 	bl	8005240 <sulp>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	ec51 0b18 	vmov	r0, r1, d8
 8005b8c:	f7fa fb7e 	bl	800028c <__adddf3>
 8005b90:	4682      	mov	sl, r0
 8005b92:	468b      	mov	fp, r1
 8005b94:	e7df      	b.n	8005b56 <_strtod_l+0x8de>
 8005b96:	4013      	ands	r3, r2
 8005b98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005b9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005ba0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005ba4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005ba8:	e7d5      	b.n	8005b56 <_strtod_l+0x8de>
 8005baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bac:	ea13 0f0a 	tst.w	r3, sl
 8005bb0:	e7e0      	b.n	8005b74 <_strtod_l+0x8fc>
 8005bb2:	f7ff fb45 	bl	8005240 <sulp>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	ec51 0b18 	vmov	r0, r1, d8
 8005bbe:	f7fa fb63 	bl	8000288 <__aeabi_dsub>
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4682      	mov	sl, r0
 8005bc8:	468b      	mov	fp, r1
 8005bca:	f7fa ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d0c1      	beq.n	8005b56 <_strtod_l+0x8de>
 8005bd2:	e611      	b.n	80057f8 <_strtod_l+0x580>
 8005bd4:	fffffc02 	.word	0xfffffc02
 8005bd8:	7ff00000 	.word	0x7ff00000
 8005bdc:	39500000 	.word	0x39500000
 8005be0:	000fffff 	.word	0x000fffff
 8005be4:	7fefffff 	.word	0x7fefffff
 8005be8:	08008eb0 	.word	0x08008eb0
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f002 fb10 	bl	8008214 <__ratio>
 8005bf4:	ec59 8b10 	vmov	r8, r9, d0
 8005bf8:	ee10 0a10 	vmov	r0, s0
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa ff74 	bl	8000af0 <__aeabi_dcmple>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d07a      	beq.n	8005d02 <_strtod_l+0xa8a>
 8005c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d04a      	beq.n	8005ca8 <_strtod_l+0xa30>
 8005c12:	4b95      	ldr	r3, [pc, #596]	; (8005e68 <_strtod_l+0xbf0>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005c1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005e68 <_strtod_l+0xbf0>
 8005c1e:	f04f 0800 	mov.w	r8, #0
 8005c22:	4b92      	ldr	r3, [pc, #584]	; (8005e6c <_strtod_l+0xbf4>)
 8005c24:	403b      	ands	r3, r7
 8005c26:	930d      	str	r3, [sp, #52]	; 0x34
 8005c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c2a:	4b91      	ldr	r3, [pc, #580]	; (8005e70 <_strtod_l+0xbf8>)
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	f040 80b0 	bne.w	8005d92 <_strtod_l+0xb1a>
 8005c32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005c3a:	ec4b ab10 	vmov	d0, sl, fp
 8005c3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c42:	f002 fa0f 	bl	8008064 <__ulp>
 8005c46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c4a:	ec53 2b10 	vmov	r2, r3, d0
 8005c4e:	f7fa fcd3 	bl	80005f8 <__aeabi_dmul>
 8005c52:	4652      	mov	r2, sl
 8005c54:	465b      	mov	r3, fp
 8005c56:	f7fa fb19 	bl	800028c <__adddf3>
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4983      	ldr	r1, [pc, #524]	; (8005e6c <_strtod_l+0xbf4>)
 8005c5e:	4a85      	ldr	r2, [pc, #532]	; (8005e74 <_strtod_l+0xbfc>)
 8005c60:	4019      	ands	r1, r3
 8005c62:	4291      	cmp	r1, r2
 8005c64:	4682      	mov	sl, r0
 8005c66:	d960      	bls.n	8005d2a <_strtod_l+0xab2>
 8005c68:	ee18 3a90 	vmov	r3, s17
 8005c6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d104      	bne.n	8005c7e <_strtod_l+0xa06>
 8005c74:	ee18 3a10 	vmov	r3, s16
 8005c78:	3301      	adds	r3, #1
 8005c7a:	f43f ad45 	beq.w	8005708 <_strtod_l+0x490>
 8005c7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005e80 <_strtod_l+0xc08>
 8005c82:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005c86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f001 feb9 	bl	8007a00 <_Bfree>
 8005c8e:	9905      	ldr	r1, [sp, #20]
 8005c90:	4620      	mov	r0, r4
 8005c92:	f001 feb5 	bl	8007a00 <_Bfree>
 8005c96:	4631      	mov	r1, r6
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f001 feb1 	bl	8007a00 <_Bfree>
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f001 fead 	bl	8007a00 <_Bfree>
 8005ca6:	e61a      	b.n	80058de <_strtod_l+0x666>
 8005ca8:	f1ba 0f00 	cmp.w	sl, #0
 8005cac:	d11b      	bne.n	8005ce6 <_strtod_l+0xa6e>
 8005cae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005cb2:	b9f3      	cbnz	r3, 8005cf2 <_strtod_l+0xa7a>
 8005cb4:	4b6c      	ldr	r3, [pc, #432]	; (8005e68 <_strtod_l+0xbf0>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	f7fa ff0e 	bl	8000adc <__aeabi_dcmplt>
 8005cc0:	b9d0      	cbnz	r0, 8005cf8 <_strtod_l+0xa80>
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	4b6c      	ldr	r3, [pc, #432]	; (8005e78 <_strtod_l+0xc00>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f7fa fc95 	bl	80005f8 <__aeabi_dmul>
 8005cce:	4680      	mov	r8, r0
 8005cd0:	4689      	mov	r9, r1
 8005cd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005cd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005cda:	9315      	str	r3, [sp, #84]	; 0x54
 8005cdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005ce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005ce4:	e79d      	b.n	8005c22 <_strtod_l+0x9aa>
 8005ce6:	f1ba 0f01 	cmp.w	sl, #1
 8005cea:	d102      	bne.n	8005cf2 <_strtod_l+0xa7a>
 8005cec:	2f00      	cmp	r7, #0
 8005cee:	f43f ad83 	beq.w	80057f8 <_strtod_l+0x580>
 8005cf2:	4b62      	ldr	r3, [pc, #392]	; (8005e7c <_strtod_l+0xc04>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	e78e      	b.n	8005c16 <_strtod_l+0x99e>
 8005cf8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005e78 <_strtod_l+0xc00>
 8005cfc:	f04f 0800 	mov.w	r8, #0
 8005d00:	e7e7      	b.n	8005cd2 <_strtod_l+0xa5a>
 8005d02:	4b5d      	ldr	r3, [pc, #372]	; (8005e78 <_strtod_l+0xc00>)
 8005d04:	4640      	mov	r0, r8
 8005d06:	4649      	mov	r1, r9
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f7fa fc75 	bl	80005f8 <__aeabi_dmul>
 8005d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d10:	4680      	mov	r8, r0
 8005d12:	4689      	mov	r9, r1
 8005d14:	b933      	cbnz	r3, 8005d24 <_strtod_l+0xaac>
 8005d16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d1a:	900e      	str	r0, [sp, #56]	; 0x38
 8005d1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005d22:	e7dd      	b.n	8005ce0 <_strtod_l+0xa68>
 8005d24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005d28:	e7f9      	b.n	8005d1e <_strtod_l+0xaa6>
 8005d2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005d2e:	9b04      	ldr	r3, [sp, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1a8      	bne.n	8005c86 <_strtod_l+0xa0e>
 8005d34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d3a:	0d1b      	lsrs	r3, r3, #20
 8005d3c:	051b      	lsls	r3, r3, #20
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d1a1      	bne.n	8005c86 <_strtod_l+0xa0e>
 8005d42:	4640      	mov	r0, r8
 8005d44:	4649      	mov	r1, r9
 8005d46:	f7fa ffb7 	bl	8000cb8 <__aeabi_d2lz>
 8005d4a:	f7fa fc27 	bl	800059c <__aeabi_l2d>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4640      	mov	r0, r8
 8005d54:	4649      	mov	r1, r9
 8005d56:	f7fa fa97 	bl	8000288 <__aeabi_dsub>
 8005d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d60:	ea43 030a 	orr.w	r3, r3, sl
 8005d64:	4313      	orrs	r3, r2
 8005d66:	4680      	mov	r8, r0
 8005d68:	4689      	mov	r9, r1
 8005d6a:	d055      	beq.n	8005e18 <_strtod_l+0xba0>
 8005d6c:	a336      	add	r3, pc, #216	; (adr r3, 8005e48 <_strtod_l+0xbd0>)
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	f7fa feb3 	bl	8000adc <__aeabi_dcmplt>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	f47f acd0 	bne.w	800571c <_strtod_l+0x4a4>
 8005d7c:	a334      	add	r3, pc, #208	; (adr r3, 8005e50 <_strtod_l+0xbd8>)
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	4640      	mov	r0, r8
 8005d84:	4649      	mov	r1, r9
 8005d86:	f7fa fec7 	bl	8000b18 <__aeabi_dcmpgt>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	f43f af7b 	beq.w	8005c86 <_strtod_l+0xa0e>
 8005d90:	e4c4      	b.n	800571c <_strtod_l+0x4a4>
 8005d92:	9b04      	ldr	r3, [sp, #16]
 8005d94:	b333      	cbz	r3, 8005de4 <_strtod_l+0xb6c>
 8005d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d9c:	d822      	bhi.n	8005de4 <_strtod_l+0xb6c>
 8005d9e:	a32e      	add	r3, pc, #184	; (adr r3, 8005e58 <_strtod_l+0xbe0>)
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	4640      	mov	r0, r8
 8005da6:	4649      	mov	r1, r9
 8005da8:	f7fa fea2 	bl	8000af0 <__aeabi_dcmple>
 8005dac:	b1a0      	cbz	r0, 8005dd8 <_strtod_l+0xb60>
 8005dae:	4649      	mov	r1, r9
 8005db0:	4640      	mov	r0, r8
 8005db2:	f7fa fef9 	bl	8000ba8 <__aeabi_d2uiz>
 8005db6:	2801      	cmp	r0, #1
 8005db8:	bf38      	it	cc
 8005dba:	2001      	movcc	r0, #1
 8005dbc:	f7fa fba2 	bl	8000504 <__aeabi_ui2d>
 8005dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dc2:	4680      	mov	r8, r0
 8005dc4:	4689      	mov	r9, r1
 8005dc6:	bb23      	cbnz	r3, 8005e12 <_strtod_l+0xb9a>
 8005dc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dcc:	9010      	str	r0, [sp, #64]	; 0x40
 8005dce:	9311      	str	r3, [sp, #68]	; 0x44
 8005dd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ddc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	9309      	str	r3, [sp, #36]	; 0x24
 8005de4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005de8:	eeb0 0a48 	vmov.f32	s0, s16
 8005dec:	eef0 0a68 	vmov.f32	s1, s17
 8005df0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005df4:	f002 f936 	bl	8008064 <__ulp>
 8005df8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005dfc:	ec53 2b10 	vmov	r2, r3, d0
 8005e00:	f7fa fbfa 	bl	80005f8 <__aeabi_dmul>
 8005e04:	ec53 2b18 	vmov	r2, r3, d8
 8005e08:	f7fa fa40 	bl	800028c <__adddf3>
 8005e0c:	4682      	mov	sl, r0
 8005e0e:	468b      	mov	fp, r1
 8005e10:	e78d      	b.n	8005d2e <_strtod_l+0xab6>
 8005e12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005e16:	e7db      	b.n	8005dd0 <_strtod_l+0xb58>
 8005e18:	a311      	add	r3, pc, #68	; (adr r3, 8005e60 <_strtod_l+0xbe8>)
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	f7fa fe5d 	bl	8000adc <__aeabi_dcmplt>
 8005e22:	e7b2      	b.n	8005d8a <_strtod_l+0xb12>
 8005e24:	2300      	movs	r3, #0
 8005e26:	930a      	str	r3, [sp, #40]	; 0x28
 8005e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	f7ff ba6b 	b.w	8005308 <_strtod_l+0x90>
 8005e32:	2a65      	cmp	r2, #101	; 0x65
 8005e34:	f43f ab5f 	beq.w	80054f6 <_strtod_l+0x27e>
 8005e38:	2a45      	cmp	r2, #69	; 0x45
 8005e3a:	f43f ab5c 	beq.w	80054f6 <_strtod_l+0x27e>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f7ff bb94 	b.w	800556c <_strtod_l+0x2f4>
 8005e44:	f3af 8000 	nop.w
 8005e48:	94a03595 	.word	0x94a03595
 8005e4c:	3fdfffff 	.word	0x3fdfffff
 8005e50:	35afe535 	.word	0x35afe535
 8005e54:	3fe00000 	.word	0x3fe00000
 8005e58:	ffc00000 	.word	0xffc00000
 8005e5c:	41dfffff 	.word	0x41dfffff
 8005e60:	94a03595 	.word	0x94a03595
 8005e64:	3fcfffff 	.word	0x3fcfffff
 8005e68:	3ff00000 	.word	0x3ff00000
 8005e6c:	7ff00000 	.word	0x7ff00000
 8005e70:	7fe00000 	.word	0x7fe00000
 8005e74:	7c9fffff 	.word	0x7c9fffff
 8005e78:	3fe00000 	.word	0x3fe00000
 8005e7c:	bff00000 	.word	0xbff00000
 8005e80:	7fefffff 	.word	0x7fefffff

08005e84 <_strtod_r>:
 8005e84:	4b01      	ldr	r3, [pc, #4]	; (8005e8c <_strtod_r+0x8>)
 8005e86:	f7ff b9f7 	b.w	8005278 <_strtod_l>
 8005e8a:	bf00      	nop
 8005e8c:	20000074 	.word	0x20000074

08005e90 <_strtol_l.constprop.0>:
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e96:	d001      	beq.n	8005e9c <_strtol_l.constprop.0+0xc>
 8005e98:	2b24      	cmp	r3, #36	; 0x24
 8005e9a:	d906      	bls.n	8005eaa <_strtol_l.constprop.0+0x1a>
 8005e9c:	f7fe fa88 	bl	80043b0 <__errno>
 8005ea0:	2316      	movs	r3, #22
 8005ea2:	6003      	str	r3, [r0, #0]
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005f90 <_strtol_l.constprop.0+0x100>
 8005eae:	460d      	mov	r5, r1
 8005eb0:	462e      	mov	r6, r5
 8005eb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005eb6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005eba:	f017 0708 	ands.w	r7, r7, #8
 8005ebe:	d1f7      	bne.n	8005eb0 <_strtol_l.constprop.0+0x20>
 8005ec0:	2c2d      	cmp	r4, #45	; 0x2d
 8005ec2:	d132      	bne.n	8005f2a <_strtol_l.constprop.0+0x9a>
 8005ec4:	782c      	ldrb	r4, [r5, #0]
 8005ec6:	2701      	movs	r7, #1
 8005ec8:	1cb5      	adds	r5, r6, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d05b      	beq.n	8005f86 <_strtol_l.constprop.0+0xf6>
 8005ece:	2b10      	cmp	r3, #16
 8005ed0:	d109      	bne.n	8005ee6 <_strtol_l.constprop.0+0x56>
 8005ed2:	2c30      	cmp	r4, #48	; 0x30
 8005ed4:	d107      	bne.n	8005ee6 <_strtol_l.constprop.0+0x56>
 8005ed6:	782c      	ldrb	r4, [r5, #0]
 8005ed8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005edc:	2c58      	cmp	r4, #88	; 0x58
 8005ede:	d14d      	bne.n	8005f7c <_strtol_l.constprop.0+0xec>
 8005ee0:	786c      	ldrb	r4, [r5, #1]
 8005ee2:	2310      	movs	r3, #16
 8005ee4:	3502      	adds	r5, #2
 8005ee6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005eea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005eee:	f04f 0c00 	mov.w	ip, #0
 8005ef2:	fbb8 f9f3 	udiv	r9, r8, r3
 8005ef6:	4666      	mov	r6, ip
 8005ef8:	fb03 8a19 	mls	sl, r3, r9, r8
 8005efc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005f00:	f1be 0f09 	cmp.w	lr, #9
 8005f04:	d816      	bhi.n	8005f34 <_strtol_l.constprop.0+0xa4>
 8005f06:	4674      	mov	r4, lr
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	dd24      	ble.n	8005f56 <_strtol_l.constprop.0+0xc6>
 8005f0c:	f1bc 0f00 	cmp.w	ip, #0
 8005f10:	db1e      	blt.n	8005f50 <_strtol_l.constprop.0+0xc0>
 8005f12:	45b1      	cmp	r9, r6
 8005f14:	d31c      	bcc.n	8005f50 <_strtol_l.constprop.0+0xc0>
 8005f16:	d101      	bne.n	8005f1c <_strtol_l.constprop.0+0x8c>
 8005f18:	45a2      	cmp	sl, r4
 8005f1a:	db19      	blt.n	8005f50 <_strtol_l.constprop.0+0xc0>
 8005f1c:	fb06 4603 	mla	r6, r6, r3, r4
 8005f20:	f04f 0c01 	mov.w	ip, #1
 8005f24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f28:	e7e8      	b.n	8005efc <_strtol_l.constprop.0+0x6c>
 8005f2a:	2c2b      	cmp	r4, #43	; 0x2b
 8005f2c:	bf04      	itt	eq
 8005f2e:	782c      	ldrbeq	r4, [r5, #0]
 8005f30:	1cb5      	addeq	r5, r6, #2
 8005f32:	e7ca      	b.n	8005eca <_strtol_l.constprop.0+0x3a>
 8005f34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005f38:	f1be 0f19 	cmp.w	lr, #25
 8005f3c:	d801      	bhi.n	8005f42 <_strtol_l.constprop.0+0xb2>
 8005f3e:	3c37      	subs	r4, #55	; 0x37
 8005f40:	e7e2      	b.n	8005f08 <_strtol_l.constprop.0+0x78>
 8005f42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005f46:	f1be 0f19 	cmp.w	lr, #25
 8005f4a:	d804      	bhi.n	8005f56 <_strtol_l.constprop.0+0xc6>
 8005f4c:	3c57      	subs	r4, #87	; 0x57
 8005f4e:	e7db      	b.n	8005f08 <_strtol_l.constprop.0+0x78>
 8005f50:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005f54:	e7e6      	b.n	8005f24 <_strtol_l.constprop.0+0x94>
 8005f56:	f1bc 0f00 	cmp.w	ip, #0
 8005f5a:	da05      	bge.n	8005f68 <_strtol_l.constprop.0+0xd8>
 8005f5c:	2322      	movs	r3, #34	; 0x22
 8005f5e:	6003      	str	r3, [r0, #0]
 8005f60:	4646      	mov	r6, r8
 8005f62:	b942      	cbnz	r2, 8005f76 <_strtol_l.constprop.0+0xe6>
 8005f64:	4630      	mov	r0, r6
 8005f66:	e79e      	b.n	8005ea6 <_strtol_l.constprop.0+0x16>
 8005f68:	b107      	cbz	r7, 8005f6c <_strtol_l.constprop.0+0xdc>
 8005f6a:	4276      	negs	r6, r6
 8005f6c:	2a00      	cmp	r2, #0
 8005f6e:	d0f9      	beq.n	8005f64 <_strtol_l.constprop.0+0xd4>
 8005f70:	f1bc 0f00 	cmp.w	ip, #0
 8005f74:	d000      	beq.n	8005f78 <_strtol_l.constprop.0+0xe8>
 8005f76:	1e69      	subs	r1, r5, #1
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	e7f3      	b.n	8005f64 <_strtol_l.constprop.0+0xd4>
 8005f7c:	2430      	movs	r4, #48	; 0x30
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1b1      	bne.n	8005ee6 <_strtol_l.constprop.0+0x56>
 8005f82:	2308      	movs	r3, #8
 8005f84:	e7af      	b.n	8005ee6 <_strtol_l.constprop.0+0x56>
 8005f86:	2c30      	cmp	r4, #48	; 0x30
 8005f88:	d0a5      	beq.n	8005ed6 <_strtol_l.constprop.0+0x46>
 8005f8a:	230a      	movs	r3, #10
 8005f8c:	e7ab      	b.n	8005ee6 <_strtol_l.constprop.0+0x56>
 8005f8e:	bf00      	nop
 8005f90:	08008ed9 	.word	0x08008ed9

08005f94 <_strtol_r>:
 8005f94:	f7ff bf7c 	b.w	8005e90 <_strtol_l.constprop.0>

08005f98 <__swbuf_r>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	460e      	mov	r6, r1
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	b118      	cbz	r0, 8005faa <__swbuf_r+0x12>
 8005fa2:	6983      	ldr	r3, [r0, #24]
 8005fa4:	b90b      	cbnz	r3, 8005faa <__swbuf_r+0x12>
 8005fa6:	f001 f84b 	bl	8007040 <__sinit>
 8005faa:	4b21      	ldr	r3, [pc, #132]	; (8006030 <__swbuf_r+0x98>)
 8005fac:	429c      	cmp	r4, r3
 8005fae:	d12b      	bne.n	8006008 <__swbuf_r+0x70>
 8005fb0:	686c      	ldr	r4, [r5, #4]
 8005fb2:	69a3      	ldr	r3, [r4, #24]
 8005fb4:	60a3      	str	r3, [r4, #8]
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	071a      	lsls	r2, r3, #28
 8005fba:	d52f      	bpl.n	800601c <__swbuf_r+0x84>
 8005fbc:	6923      	ldr	r3, [r4, #16]
 8005fbe:	b36b      	cbz	r3, 800601c <__swbuf_r+0x84>
 8005fc0:	6923      	ldr	r3, [r4, #16]
 8005fc2:	6820      	ldr	r0, [r4, #0]
 8005fc4:	1ac0      	subs	r0, r0, r3
 8005fc6:	6963      	ldr	r3, [r4, #20]
 8005fc8:	b2f6      	uxtb	r6, r6
 8005fca:	4283      	cmp	r3, r0
 8005fcc:	4637      	mov	r7, r6
 8005fce:	dc04      	bgt.n	8005fda <__swbuf_r+0x42>
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 ffa0 	bl	8006f18 <_fflush_r>
 8005fd8:	bb30      	cbnz	r0, 8006028 <__swbuf_r+0x90>
 8005fda:	68a3      	ldr	r3, [r4, #8]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	60a3      	str	r3, [r4, #8]
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	6022      	str	r2, [r4, #0]
 8005fe6:	701e      	strb	r6, [r3, #0]
 8005fe8:	6963      	ldr	r3, [r4, #20]
 8005fea:	3001      	adds	r0, #1
 8005fec:	4283      	cmp	r3, r0
 8005fee:	d004      	beq.n	8005ffa <__swbuf_r+0x62>
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	07db      	lsls	r3, r3, #31
 8005ff4:	d506      	bpl.n	8006004 <__swbuf_r+0x6c>
 8005ff6:	2e0a      	cmp	r6, #10
 8005ff8:	d104      	bne.n	8006004 <__swbuf_r+0x6c>
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f000 ff8b 	bl	8006f18 <_fflush_r>
 8006002:	b988      	cbnz	r0, 8006028 <__swbuf_r+0x90>
 8006004:	4638      	mov	r0, r7
 8006006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006008:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <__swbuf_r+0x9c>)
 800600a:	429c      	cmp	r4, r3
 800600c:	d101      	bne.n	8006012 <__swbuf_r+0x7a>
 800600e:	68ac      	ldr	r4, [r5, #8]
 8006010:	e7cf      	b.n	8005fb2 <__swbuf_r+0x1a>
 8006012:	4b09      	ldr	r3, [pc, #36]	; (8006038 <__swbuf_r+0xa0>)
 8006014:	429c      	cmp	r4, r3
 8006016:	bf08      	it	eq
 8006018:	68ec      	ldreq	r4, [r5, #12]
 800601a:	e7ca      	b.n	8005fb2 <__swbuf_r+0x1a>
 800601c:	4621      	mov	r1, r4
 800601e:	4628      	mov	r0, r5
 8006020:	f000 f80c 	bl	800603c <__swsetup_r>
 8006024:	2800      	cmp	r0, #0
 8006026:	d0cb      	beq.n	8005fc0 <__swbuf_r+0x28>
 8006028:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800602c:	e7ea      	b.n	8006004 <__swbuf_r+0x6c>
 800602e:	bf00      	nop
 8006030:	0800908c 	.word	0x0800908c
 8006034:	080090ac 	.word	0x080090ac
 8006038:	0800906c 	.word	0x0800906c

0800603c <__swsetup_r>:
 800603c:	4b32      	ldr	r3, [pc, #200]	; (8006108 <__swsetup_r+0xcc>)
 800603e:	b570      	push	{r4, r5, r6, lr}
 8006040:	681d      	ldr	r5, [r3, #0]
 8006042:	4606      	mov	r6, r0
 8006044:	460c      	mov	r4, r1
 8006046:	b125      	cbz	r5, 8006052 <__swsetup_r+0x16>
 8006048:	69ab      	ldr	r3, [r5, #24]
 800604a:	b913      	cbnz	r3, 8006052 <__swsetup_r+0x16>
 800604c:	4628      	mov	r0, r5
 800604e:	f000 fff7 	bl	8007040 <__sinit>
 8006052:	4b2e      	ldr	r3, [pc, #184]	; (800610c <__swsetup_r+0xd0>)
 8006054:	429c      	cmp	r4, r3
 8006056:	d10f      	bne.n	8006078 <__swsetup_r+0x3c>
 8006058:	686c      	ldr	r4, [r5, #4]
 800605a:	89a3      	ldrh	r3, [r4, #12]
 800605c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006060:	0719      	lsls	r1, r3, #28
 8006062:	d42c      	bmi.n	80060be <__swsetup_r+0x82>
 8006064:	06dd      	lsls	r5, r3, #27
 8006066:	d411      	bmi.n	800608c <__swsetup_r+0x50>
 8006068:	2309      	movs	r3, #9
 800606a:	6033      	str	r3, [r6, #0]
 800606c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006070:	81a3      	strh	r3, [r4, #12]
 8006072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006076:	e03e      	b.n	80060f6 <__swsetup_r+0xba>
 8006078:	4b25      	ldr	r3, [pc, #148]	; (8006110 <__swsetup_r+0xd4>)
 800607a:	429c      	cmp	r4, r3
 800607c:	d101      	bne.n	8006082 <__swsetup_r+0x46>
 800607e:	68ac      	ldr	r4, [r5, #8]
 8006080:	e7eb      	b.n	800605a <__swsetup_r+0x1e>
 8006082:	4b24      	ldr	r3, [pc, #144]	; (8006114 <__swsetup_r+0xd8>)
 8006084:	429c      	cmp	r4, r3
 8006086:	bf08      	it	eq
 8006088:	68ec      	ldreq	r4, [r5, #12]
 800608a:	e7e6      	b.n	800605a <__swsetup_r+0x1e>
 800608c:	0758      	lsls	r0, r3, #29
 800608e:	d512      	bpl.n	80060b6 <__swsetup_r+0x7a>
 8006090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006092:	b141      	cbz	r1, 80060a6 <__swsetup_r+0x6a>
 8006094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006098:	4299      	cmp	r1, r3
 800609a:	d002      	beq.n	80060a2 <__swsetup_r+0x66>
 800609c:	4630      	mov	r0, r6
 800609e:	f002 f947 	bl	8008330 <_free_r>
 80060a2:	2300      	movs	r3, #0
 80060a4:	6363      	str	r3, [r4, #52]	; 0x34
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	2300      	movs	r3, #0
 80060b0:	6063      	str	r3, [r4, #4]
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	f043 0308 	orr.w	r3, r3, #8
 80060bc:	81a3      	strh	r3, [r4, #12]
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	b94b      	cbnz	r3, 80060d6 <__swsetup_r+0x9a>
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060cc:	d003      	beq.n	80060d6 <__swsetup_r+0x9a>
 80060ce:	4621      	mov	r1, r4
 80060d0:	4630      	mov	r0, r6
 80060d2:	f001 fbed 	bl	80078b0 <__smakebuf_r>
 80060d6:	89a0      	ldrh	r0, [r4, #12]
 80060d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060dc:	f010 0301 	ands.w	r3, r0, #1
 80060e0:	d00a      	beq.n	80060f8 <__swsetup_r+0xbc>
 80060e2:	2300      	movs	r3, #0
 80060e4:	60a3      	str	r3, [r4, #8]
 80060e6:	6963      	ldr	r3, [r4, #20]
 80060e8:	425b      	negs	r3, r3
 80060ea:	61a3      	str	r3, [r4, #24]
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	b943      	cbnz	r3, 8006102 <__swsetup_r+0xc6>
 80060f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060f4:	d1ba      	bne.n	800606c <__swsetup_r+0x30>
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	0781      	lsls	r1, r0, #30
 80060fa:	bf58      	it	pl
 80060fc:	6963      	ldrpl	r3, [r4, #20]
 80060fe:	60a3      	str	r3, [r4, #8]
 8006100:	e7f4      	b.n	80060ec <__swsetup_r+0xb0>
 8006102:	2000      	movs	r0, #0
 8006104:	e7f7      	b.n	80060f6 <__swsetup_r+0xba>
 8006106:	bf00      	nop
 8006108:	2000000c 	.word	0x2000000c
 800610c:	0800908c 	.word	0x0800908c
 8006110:	080090ac 	.word	0x080090ac
 8006114:	0800906c 	.word	0x0800906c

08006118 <quorem>:
 8006118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	6903      	ldr	r3, [r0, #16]
 800611e:	690c      	ldr	r4, [r1, #16]
 8006120:	42a3      	cmp	r3, r4
 8006122:	4607      	mov	r7, r0
 8006124:	f2c0 8081 	blt.w	800622a <quorem+0x112>
 8006128:	3c01      	subs	r4, #1
 800612a:	f101 0814 	add.w	r8, r1, #20
 800612e:	f100 0514 	add.w	r5, r0, #20
 8006132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800613c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006140:	3301      	adds	r3, #1
 8006142:	429a      	cmp	r2, r3
 8006144:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006148:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800614c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006150:	d331      	bcc.n	80061b6 <quorem+0x9e>
 8006152:	f04f 0e00 	mov.w	lr, #0
 8006156:	4640      	mov	r0, r8
 8006158:	46ac      	mov	ip, r5
 800615a:	46f2      	mov	sl, lr
 800615c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006160:	b293      	uxth	r3, r2
 8006162:	fb06 e303 	mla	r3, r6, r3, lr
 8006166:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800616a:	b29b      	uxth	r3, r3
 800616c:	ebaa 0303 	sub.w	r3, sl, r3
 8006170:	f8dc a000 	ldr.w	sl, [ip]
 8006174:	0c12      	lsrs	r2, r2, #16
 8006176:	fa13 f38a 	uxtah	r3, r3, sl
 800617a:	fb06 e202 	mla	r2, r6, r2, lr
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	9b00      	ldr	r3, [sp, #0]
 8006182:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006186:	b292      	uxth	r2, r2
 8006188:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800618c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006190:	f8bd 3000 	ldrh.w	r3, [sp]
 8006194:	4581      	cmp	r9, r0
 8006196:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800619a:	f84c 3b04 	str.w	r3, [ip], #4
 800619e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061a2:	d2db      	bcs.n	800615c <quorem+0x44>
 80061a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80061a8:	b92b      	cbnz	r3, 80061b6 <quorem+0x9e>
 80061aa:	9b01      	ldr	r3, [sp, #4]
 80061ac:	3b04      	subs	r3, #4
 80061ae:	429d      	cmp	r5, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	d32e      	bcc.n	8006212 <quorem+0xfa>
 80061b4:	613c      	str	r4, [r7, #16]
 80061b6:	4638      	mov	r0, r7
 80061b8:	f001 feae 	bl	8007f18 <__mcmp>
 80061bc:	2800      	cmp	r0, #0
 80061be:	db24      	blt.n	800620a <quorem+0xf2>
 80061c0:	3601      	adds	r6, #1
 80061c2:	4628      	mov	r0, r5
 80061c4:	f04f 0c00 	mov.w	ip, #0
 80061c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80061cc:	f8d0 e000 	ldr.w	lr, [r0]
 80061d0:	b293      	uxth	r3, r2
 80061d2:	ebac 0303 	sub.w	r3, ip, r3
 80061d6:	0c12      	lsrs	r2, r2, #16
 80061d8:	fa13 f38e 	uxtah	r3, r3, lr
 80061dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80061e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ea:	45c1      	cmp	r9, r8
 80061ec:	f840 3b04 	str.w	r3, [r0], #4
 80061f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061f4:	d2e8      	bcs.n	80061c8 <quorem+0xb0>
 80061f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061fe:	b922      	cbnz	r2, 800620a <quorem+0xf2>
 8006200:	3b04      	subs	r3, #4
 8006202:	429d      	cmp	r5, r3
 8006204:	461a      	mov	r2, r3
 8006206:	d30a      	bcc.n	800621e <quorem+0x106>
 8006208:	613c      	str	r4, [r7, #16]
 800620a:	4630      	mov	r0, r6
 800620c:	b003      	add	sp, #12
 800620e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	3b04      	subs	r3, #4
 8006216:	2a00      	cmp	r2, #0
 8006218:	d1cc      	bne.n	80061b4 <quorem+0x9c>
 800621a:	3c01      	subs	r4, #1
 800621c:	e7c7      	b.n	80061ae <quorem+0x96>
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	3b04      	subs	r3, #4
 8006222:	2a00      	cmp	r2, #0
 8006224:	d1f0      	bne.n	8006208 <quorem+0xf0>
 8006226:	3c01      	subs	r4, #1
 8006228:	e7eb      	b.n	8006202 <quorem+0xea>
 800622a:	2000      	movs	r0, #0
 800622c:	e7ee      	b.n	800620c <quorem+0xf4>
	...

08006230 <_dtoa_r>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	ed2d 8b04 	vpush	{d8-d9}
 8006238:	ec57 6b10 	vmov	r6, r7, d0
 800623c:	b093      	sub	sp, #76	; 0x4c
 800623e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006240:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006244:	9106      	str	r1, [sp, #24]
 8006246:	ee10 aa10 	vmov	sl, s0
 800624a:	4604      	mov	r4, r0
 800624c:	9209      	str	r2, [sp, #36]	; 0x24
 800624e:	930c      	str	r3, [sp, #48]	; 0x30
 8006250:	46bb      	mov	fp, r7
 8006252:	b975      	cbnz	r5, 8006272 <_dtoa_r+0x42>
 8006254:	2010      	movs	r0, #16
 8006256:	f001 fb6b 	bl	8007930 <malloc>
 800625a:	4602      	mov	r2, r0
 800625c:	6260      	str	r0, [r4, #36]	; 0x24
 800625e:	b920      	cbnz	r0, 800626a <_dtoa_r+0x3a>
 8006260:	4ba7      	ldr	r3, [pc, #668]	; (8006500 <_dtoa_r+0x2d0>)
 8006262:	21ea      	movs	r1, #234	; 0xea
 8006264:	48a7      	ldr	r0, [pc, #668]	; (8006504 <_dtoa_r+0x2d4>)
 8006266:	f002 fb2d 	bl	80088c4 <__assert_func>
 800626a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800626e:	6005      	str	r5, [r0, #0]
 8006270:	60c5      	str	r5, [r0, #12]
 8006272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006274:	6819      	ldr	r1, [r3, #0]
 8006276:	b151      	cbz	r1, 800628e <_dtoa_r+0x5e>
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	604a      	str	r2, [r1, #4]
 800627c:	2301      	movs	r3, #1
 800627e:	4093      	lsls	r3, r2
 8006280:	608b      	str	r3, [r1, #8]
 8006282:	4620      	mov	r0, r4
 8006284:	f001 fbbc 	bl	8007a00 <_Bfree>
 8006288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	1e3b      	subs	r3, r7, #0
 8006290:	bfaa      	itet	ge
 8006292:	2300      	movge	r3, #0
 8006294:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006298:	f8c8 3000 	strge.w	r3, [r8]
 800629c:	4b9a      	ldr	r3, [pc, #616]	; (8006508 <_dtoa_r+0x2d8>)
 800629e:	bfbc      	itt	lt
 80062a0:	2201      	movlt	r2, #1
 80062a2:	f8c8 2000 	strlt.w	r2, [r8]
 80062a6:	ea33 030b 	bics.w	r3, r3, fp
 80062aa:	d11b      	bne.n	80062e4 <_dtoa_r+0xb4>
 80062ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062b8:	4333      	orrs	r3, r6
 80062ba:	f000 8592 	beq.w	8006de2 <_dtoa_r+0xbb2>
 80062be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062c0:	b963      	cbnz	r3, 80062dc <_dtoa_r+0xac>
 80062c2:	4b92      	ldr	r3, [pc, #584]	; (800650c <_dtoa_r+0x2dc>)
 80062c4:	e022      	b.n	800630c <_dtoa_r+0xdc>
 80062c6:	4b92      	ldr	r3, [pc, #584]	; (8006510 <_dtoa_r+0x2e0>)
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	3308      	adds	r3, #8
 80062cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	9801      	ldr	r0, [sp, #4]
 80062d2:	b013      	add	sp, #76	; 0x4c
 80062d4:	ecbd 8b04 	vpop	{d8-d9}
 80062d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062dc:	4b8b      	ldr	r3, [pc, #556]	; (800650c <_dtoa_r+0x2dc>)
 80062de:	9301      	str	r3, [sp, #4]
 80062e0:	3303      	adds	r3, #3
 80062e2:	e7f3      	b.n	80062cc <_dtoa_r+0x9c>
 80062e4:	2200      	movs	r2, #0
 80062e6:	2300      	movs	r3, #0
 80062e8:	4650      	mov	r0, sl
 80062ea:	4659      	mov	r1, fp
 80062ec:	f7fa fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 80062f0:	ec4b ab19 	vmov	d9, sl, fp
 80062f4:	4680      	mov	r8, r0
 80062f6:	b158      	cbz	r0, 8006310 <_dtoa_r+0xe0>
 80062f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062fa:	2301      	movs	r3, #1
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 856b 	beq.w	8006ddc <_dtoa_r+0xbac>
 8006306:	4883      	ldr	r0, [pc, #524]	; (8006514 <_dtoa_r+0x2e4>)
 8006308:	6018      	str	r0, [r3, #0]
 800630a:	1e43      	subs	r3, r0, #1
 800630c:	9301      	str	r3, [sp, #4]
 800630e:	e7df      	b.n	80062d0 <_dtoa_r+0xa0>
 8006310:	ec4b ab10 	vmov	d0, sl, fp
 8006314:	aa10      	add	r2, sp, #64	; 0x40
 8006316:	a911      	add	r1, sp, #68	; 0x44
 8006318:	4620      	mov	r0, r4
 800631a:	f001 ff1f 	bl	800815c <__d2b>
 800631e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006322:	ee08 0a10 	vmov	s16, r0
 8006326:	2d00      	cmp	r5, #0
 8006328:	f000 8084 	beq.w	8006434 <_dtoa_r+0x204>
 800632c:	ee19 3a90 	vmov	r3, s19
 8006330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006334:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006338:	4656      	mov	r6, sl
 800633a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800633e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006342:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006346:	4b74      	ldr	r3, [pc, #464]	; (8006518 <_dtoa_r+0x2e8>)
 8006348:	2200      	movs	r2, #0
 800634a:	4630      	mov	r0, r6
 800634c:	4639      	mov	r1, r7
 800634e:	f7f9 ff9b 	bl	8000288 <__aeabi_dsub>
 8006352:	a365      	add	r3, pc, #404	; (adr r3, 80064e8 <_dtoa_r+0x2b8>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7fa f94e 	bl	80005f8 <__aeabi_dmul>
 800635c:	a364      	add	r3, pc, #400	; (adr r3, 80064f0 <_dtoa_r+0x2c0>)
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f7f9 ff93 	bl	800028c <__adddf3>
 8006366:	4606      	mov	r6, r0
 8006368:	4628      	mov	r0, r5
 800636a:	460f      	mov	r7, r1
 800636c:	f7fa f8da 	bl	8000524 <__aeabi_i2d>
 8006370:	a361      	add	r3, pc, #388	; (adr r3, 80064f8 <_dtoa_r+0x2c8>)
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f7fa f93f 	bl	80005f8 <__aeabi_dmul>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4630      	mov	r0, r6
 8006380:	4639      	mov	r1, r7
 8006382:	f7f9 ff83 	bl	800028c <__adddf3>
 8006386:	4606      	mov	r6, r0
 8006388:	460f      	mov	r7, r1
 800638a:	f7fa fbe5 	bl	8000b58 <__aeabi_d2iz>
 800638e:	2200      	movs	r2, #0
 8006390:	9000      	str	r0, [sp, #0]
 8006392:	2300      	movs	r3, #0
 8006394:	4630      	mov	r0, r6
 8006396:	4639      	mov	r1, r7
 8006398:	f7fa fba0 	bl	8000adc <__aeabi_dcmplt>
 800639c:	b150      	cbz	r0, 80063b4 <_dtoa_r+0x184>
 800639e:	9800      	ldr	r0, [sp, #0]
 80063a0:	f7fa f8c0 	bl	8000524 <__aeabi_i2d>
 80063a4:	4632      	mov	r2, r6
 80063a6:	463b      	mov	r3, r7
 80063a8:	f7fa fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80063ac:	b910      	cbnz	r0, 80063b4 <_dtoa_r+0x184>
 80063ae:	9b00      	ldr	r3, [sp, #0]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	9b00      	ldr	r3, [sp, #0]
 80063b6:	2b16      	cmp	r3, #22
 80063b8:	d85a      	bhi.n	8006470 <_dtoa_r+0x240>
 80063ba:	9a00      	ldr	r2, [sp, #0]
 80063bc:	4b57      	ldr	r3, [pc, #348]	; (800651c <_dtoa_r+0x2ec>)
 80063be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	ec51 0b19 	vmov	r0, r1, d9
 80063ca:	f7fa fb87 	bl	8000adc <__aeabi_dcmplt>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d050      	beq.n	8006474 <_dtoa_r+0x244>
 80063d2:	9b00      	ldr	r3, [sp, #0]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	2300      	movs	r3, #0
 80063da:	930b      	str	r3, [sp, #44]	; 0x2c
 80063dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063de:	1b5d      	subs	r5, r3, r5
 80063e0:	1e6b      	subs	r3, r5, #1
 80063e2:	9305      	str	r3, [sp, #20]
 80063e4:	bf45      	ittet	mi
 80063e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80063ea:	9304      	strmi	r3, [sp, #16]
 80063ec:	2300      	movpl	r3, #0
 80063ee:	2300      	movmi	r3, #0
 80063f0:	bf4c      	ite	mi
 80063f2:	9305      	strmi	r3, [sp, #20]
 80063f4:	9304      	strpl	r3, [sp, #16]
 80063f6:	9b00      	ldr	r3, [sp, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	db3d      	blt.n	8006478 <_dtoa_r+0x248>
 80063fc:	9b05      	ldr	r3, [sp, #20]
 80063fe:	9a00      	ldr	r2, [sp, #0]
 8006400:	920a      	str	r2, [sp, #40]	; 0x28
 8006402:	4413      	add	r3, r2
 8006404:	9305      	str	r3, [sp, #20]
 8006406:	2300      	movs	r3, #0
 8006408:	9307      	str	r3, [sp, #28]
 800640a:	9b06      	ldr	r3, [sp, #24]
 800640c:	2b09      	cmp	r3, #9
 800640e:	f200 8089 	bhi.w	8006524 <_dtoa_r+0x2f4>
 8006412:	2b05      	cmp	r3, #5
 8006414:	bfc4      	itt	gt
 8006416:	3b04      	subgt	r3, #4
 8006418:	9306      	strgt	r3, [sp, #24]
 800641a:	9b06      	ldr	r3, [sp, #24]
 800641c:	f1a3 0302 	sub.w	r3, r3, #2
 8006420:	bfcc      	ite	gt
 8006422:	2500      	movgt	r5, #0
 8006424:	2501      	movle	r5, #1
 8006426:	2b03      	cmp	r3, #3
 8006428:	f200 8087 	bhi.w	800653a <_dtoa_r+0x30a>
 800642c:	e8df f003 	tbb	[pc, r3]
 8006430:	59383a2d 	.word	0x59383a2d
 8006434:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006438:	441d      	add	r5, r3
 800643a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800643e:	2b20      	cmp	r3, #32
 8006440:	bfc1      	itttt	gt
 8006442:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006446:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800644a:	fa0b f303 	lslgt.w	r3, fp, r3
 800644e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006452:	bfda      	itte	le
 8006454:	f1c3 0320 	rsble	r3, r3, #32
 8006458:	fa06 f003 	lslle.w	r0, r6, r3
 800645c:	4318      	orrgt	r0, r3
 800645e:	f7fa f851 	bl	8000504 <__aeabi_ui2d>
 8006462:	2301      	movs	r3, #1
 8006464:	4606      	mov	r6, r0
 8006466:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800646a:	3d01      	subs	r5, #1
 800646c:	930e      	str	r3, [sp, #56]	; 0x38
 800646e:	e76a      	b.n	8006346 <_dtoa_r+0x116>
 8006470:	2301      	movs	r3, #1
 8006472:	e7b2      	b.n	80063da <_dtoa_r+0x1aa>
 8006474:	900b      	str	r0, [sp, #44]	; 0x2c
 8006476:	e7b1      	b.n	80063dc <_dtoa_r+0x1ac>
 8006478:	9b04      	ldr	r3, [sp, #16]
 800647a:	9a00      	ldr	r2, [sp, #0]
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	9304      	str	r3, [sp, #16]
 8006480:	4253      	negs	r3, r2
 8006482:	9307      	str	r3, [sp, #28]
 8006484:	2300      	movs	r3, #0
 8006486:	930a      	str	r3, [sp, #40]	; 0x28
 8006488:	e7bf      	b.n	800640a <_dtoa_r+0x1da>
 800648a:	2300      	movs	r3, #0
 800648c:	9308      	str	r3, [sp, #32]
 800648e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	dc55      	bgt.n	8006540 <_dtoa_r+0x310>
 8006494:	2301      	movs	r3, #1
 8006496:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800649a:	461a      	mov	r2, r3
 800649c:	9209      	str	r2, [sp, #36]	; 0x24
 800649e:	e00c      	b.n	80064ba <_dtoa_r+0x28a>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e7f3      	b.n	800648c <_dtoa_r+0x25c>
 80064a4:	2300      	movs	r3, #0
 80064a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064a8:	9308      	str	r3, [sp, #32]
 80064aa:	9b00      	ldr	r3, [sp, #0]
 80064ac:	4413      	add	r3, r2
 80064ae:	9302      	str	r3, [sp, #8]
 80064b0:	3301      	adds	r3, #1
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	9303      	str	r3, [sp, #12]
 80064b6:	bfb8      	it	lt
 80064b8:	2301      	movlt	r3, #1
 80064ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064bc:	2200      	movs	r2, #0
 80064be:	6042      	str	r2, [r0, #4]
 80064c0:	2204      	movs	r2, #4
 80064c2:	f102 0614 	add.w	r6, r2, #20
 80064c6:	429e      	cmp	r6, r3
 80064c8:	6841      	ldr	r1, [r0, #4]
 80064ca:	d93d      	bls.n	8006548 <_dtoa_r+0x318>
 80064cc:	4620      	mov	r0, r4
 80064ce:	f001 fa57 	bl	8007980 <_Balloc>
 80064d2:	9001      	str	r0, [sp, #4]
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d13b      	bne.n	8006550 <_dtoa_r+0x320>
 80064d8:	4b11      	ldr	r3, [pc, #68]	; (8006520 <_dtoa_r+0x2f0>)
 80064da:	4602      	mov	r2, r0
 80064dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064e0:	e6c0      	b.n	8006264 <_dtoa_r+0x34>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e7df      	b.n	80064a6 <_dtoa_r+0x276>
 80064e6:	bf00      	nop
 80064e8:	636f4361 	.word	0x636f4361
 80064ec:	3fd287a7 	.word	0x3fd287a7
 80064f0:	8b60c8b3 	.word	0x8b60c8b3
 80064f4:	3fc68a28 	.word	0x3fc68a28
 80064f8:	509f79fb 	.word	0x509f79fb
 80064fc:	3fd34413 	.word	0x3fd34413
 8006500:	08008fe6 	.word	0x08008fe6
 8006504:	08008ffd 	.word	0x08008ffd
 8006508:	7ff00000 	.word	0x7ff00000
 800650c:	08008fe2 	.word	0x08008fe2
 8006510:	08008fd9 	.word	0x08008fd9
 8006514:	08008e59 	.word	0x08008e59
 8006518:	3ff80000 	.word	0x3ff80000
 800651c:	080091d0 	.word	0x080091d0
 8006520:	08009058 	.word	0x08009058
 8006524:	2501      	movs	r5, #1
 8006526:	2300      	movs	r3, #0
 8006528:	9306      	str	r3, [sp, #24]
 800652a:	9508      	str	r5, [sp, #32]
 800652c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006530:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	2312      	movs	r3, #18
 8006538:	e7b0      	b.n	800649c <_dtoa_r+0x26c>
 800653a:	2301      	movs	r3, #1
 800653c:	9308      	str	r3, [sp, #32]
 800653e:	e7f5      	b.n	800652c <_dtoa_r+0x2fc>
 8006540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006542:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006546:	e7b8      	b.n	80064ba <_dtoa_r+0x28a>
 8006548:	3101      	adds	r1, #1
 800654a:	6041      	str	r1, [r0, #4]
 800654c:	0052      	lsls	r2, r2, #1
 800654e:	e7b8      	b.n	80064c2 <_dtoa_r+0x292>
 8006550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006552:	9a01      	ldr	r2, [sp, #4]
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	2b0e      	cmp	r3, #14
 800655a:	f200 809d 	bhi.w	8006698 <_dtoa_r+0x468>
 800655e:	2d00      	cmp	r5, #0
 8006560:	f000 809a 	beq.w	8006698 <_dtoa_r+0x468>
 8006564:	9b00      	ldr	r3, [sp, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	dd32      	ble.n	80065d0 <_dtoa_r+0x3a0>
 800656a:	4ab7      	ldr	r2, [pc, #732]	; (8006848 <_dtoa_r+0x618>)
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006574:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006578:	9b00      	ldr	r3, [sp, #0]
 800657a:	05d8      	lsls	r0, r3, #23
 800657c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006580:	d516      	bpl.n	80065b0 <_dtoa_r+0x380>
 8006582:	4bb2      	ldr	r3, [pc, #712]	; (800684c <_dtoa_r+0x61c>)
 8006584:	ec51 0b19 	vmov	r0, r1, d9
 8006588:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800658c:	f7fa f95e 	bl	800084c <__aeabi_ddiv>
 8006590:	f007 070f 	and.w	r7, r7, #15
 8006594:	4682      	mov	sl, r0
 8006596:	468b      	mov	fp, r1
 8006598:	2503      	movs	r5, #3
 800659a:	4eac      	ldr	r6, [pc, #688]	; (800684c <_dtoa_r+0x61c>)
 800659c:	b957      	cbnz	r7, 80065b4 <_dtoa_r+0x384>
 800659e:	4642      	mov	r2, r8
 80065a0:	464b      	mov	r3, r9
 80065a2:	4650      	mov	r0, sl
 80065a4:	4659      	mov	r1, fp
 80065a6:	f7fa f951 	bl	800084c <__aeabi_ddiv>
 80065aa:	4682      	mov	sl, r0
 80065ac:	468b      	mov	fp, r1
 80065ae:	e028      	b.n	8006602 <_dtoa_r+0x3d2>
 80065b0:	2502      	movs	r5, #2
 80065b2:	e7f2      	b.n	800659a <_dtoa_r+0x36a>
 80065b4:	07f9      	lsls	r1, r7, #31
 80065b6:	d508      	bpl.n	80065ca <_dtoa_r+0x39a>
 80065b8:	4640      	mov	r0, r8
 80065ba:	4649      	mov	r1, r9
 80065bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065c0:	f7fa f81a 	bl	80005f8 <__aeabi_dmul>
 80065c4:	3501      	adds	r5, #1
 80065c6:	4680      	mov	r8, r0
 80065c8:	4689      	mov	r9, r1
 80065ca:	107f      	asrs	r7, r7, #1
 80065cc:	3608      	adds	r6, #8
 80065ce:	e7e5      	b.n	800659c <_dtoa_r+0x36c>
 80065d0:	f000 809b 	beq.w	800670a <_dtoa_r+0x4da>
 80065d4:	9b00      	ldr	r3, [sp, #0]
 80065d6:	4f9d      	ldr	r7, [pc, #628]	; (800684c <_dtoa_r+0x61c>)
 80065d8:	425e      	negs	r6, r3
 80065da:	4b9b      	ldr	r3, [pc, #620]	; (8006848 <_dtoa_r+0x618>)
 80065dc:	f006 020f 	and.w	r2, r6, #15
 80065e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	ec51 0b19 	vmov	r0, r1, d9
 80065ec:	f7fa f804 	bl	80005f8 <__aeabi_dmul>
 80065f0:	1136      	asrs	r6, r6, #4
 80065f2:	4682      	mov	sl, r0
 80065f4:	468b      	mov	fp, r1
 80065f6:	2300      	movs	r3, #0
 80065f8:	2502      	movs	r5, #2
 80065fa:	2e00      	cmp	r6, #0
 80065fc:	d17a      	bne.n	80066f4 <_dtoa_r+0x4c4>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1d3      	bne.n	80065aa <_dtoa_r+0x37a>
 8006602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 8082 	beq.w	800670e <_dtoa_r+0x4de>
 800660a:	4b91      	ldr	r3, [pc, #580]	; (8006850 <_dtoa_r+0x620>)
 800660c:	2200      	movs	r2, #0
 800660e:	4650      	mov	r0, sl
 8006610:	4659      	mov	r1, fp
 8006612:	f7fa fa63 	bl	8000adc <__aeabi_dcmplt>
 8006616:	2800      	cmp	r0, #0
 8006618:	d079      	beq.n	800670e <_dtoa_r+0x4de>
 800661a:	9b03      	ldr	r3, [sp, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d076      	beq.n	800670e <_dtoa_r+0x4de>
 8006620:	9b02      	ldr	r3, [sp, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	dd36      	ble.n	8006694 <_dtoa_r+0x464>
 8006626:	9b00      	ldr	r3, [sp, #0]
 8006628:	4650      	mov	r0, sl
 800662a:	4659      	mov	r1, fp
 800662c:	1e5f      	subs	r7, r3, #1
 800662e:	2200      	movs	r2, #0
 8006630:	4b88      	ldr	r3, [pc, #544]	; (8006854 <_dtoa_r+0x624>)
 8006632:	f7f9 ffe1 	bl	80005f8 <__aeabi_dmul>
 8006636:	9e02      	ldr	r6, [sp, #8]
 8006638:	4682      	mov	sl, r0
 800663a:	468b      	mov	fp, r1
 800663c:	3501      	adds	r5, #1
 800663e:	4628      	mov	r0, r5
 8006640:	f7f9 ff70 	bl	8000524 <__aeabi_i2d>
 8006644:	4652      	mov	r2, sl
 8006646:	465b      	mov	r3, fp
 8006648:	f7f9 ffd6 	bl	80005f8 <__aeabi_dmul>
 800664c:	4b82      	ldr	r3, [pc, #520]	; (8006858 <_dtoa_r+0x628>)
 800664e:	2200      	movs	r2, #0
 8006650:	f7f9 fe1c 	bl	800028c <__adddf3>
 8006654:	46d0      	mov	r8, sl
 8006656:	46d9      	mov	r9, fp
 8006658:	4682      	mov	sl, r0
 800665a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800665e:	2e00      	cmp	r6, #0
 8006660:	d158      	bne.n	8006714 <_dtoa_r+0x4e4>
 8006662:	4b7e      	ldr	r3, [pc, #504]	; (800685c <_dtoa_r+0x62c>)
 8006664:	2200      	movs	r2, #0
 8006666:	4640      	mov	r0, r8
 8006668:	4649      	mov	r1, r9
 800666a:	f7f9 fe0d 	bl	8000288 <__aeabi_dsub>
 800666e:	4652      	mov	r2, sl
 8006670:	465b      	mov	r3, fp
 8006672:	4680      	mov	r8, r0
 8006674:	4689      	mov	r9, r1
 8006676:	f7fa fa4f 	bl	8000b18 <__aeabi_dcmpgt>
 800667a:	2800      	cmp	r0, #0
 800667c:	f040 8295 	bne.w	8006baa <_dtoa_r+0x97a>
 8006680:	4652      	mov	r2, sl
 8006682:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006686:	4640      	mov	r0, r8
 8006688:	4649      	mov	r1, r9
 800668a:	f7fa fa27 	bl	8000adc <__aeabi_dcmplt>
 800668e:	2800      	cmp	r0, #0
 8006690:	f040 8289 	bne.w	8006ba6 <_dtoa_r+0x976>
 8006694:	ec5b ab19 	vmov	sl, fp, d9
 8006698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800669a:	2b00      	cmp	r3, #0
 800669c:	f2c0 8148 	blt.w	8006930 <_dtoa_r+0x700>
 80066a0:	9a00      	ldr	r2, [sp, #0]
 80066a2:	2a0e      	cmp	r2, #14
 80066a4:	f300 8144 	bgt.w	8006930 <_dtoa_r+0x700>
 80066a8:	4b67      	ldr	r3, [pc, #412]	; (8006848 <_dtoa_r+0x618>)
 80066aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f280 80d5 	bge.w	8006864 <_dtoa_r+0x634>
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f300 80d1 	bgt.w	8006864 <_dtoa_r+0x634>
 80066c2:	f040 826f 	bne.w	8006ba4 <_dtoa_r+0x974>
 80066c6:	4b65      	ldr	r3, [pc, #404]	; (800685c <_dtoa_r+0x62c>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	4640      	mov	r0, r8
 80066cc:	4649      	mov	r1, r9
 80066ce:	f7f9 ff93 	bl	80005f8 <__aeabi_dmul>
 80066d2:	4652      	mov	r2, sl
 80066d4:	465b      	mov	r3, fp
 80066d6:	f7fa fa15 	bl	8000b04 <__aeabi_dcmpge>
 80066da:	9e03      	ldr	r6, [sp, #12]
 80066dc:	4637      	mov	r7, r6
 80066de:	2800      	cmp	r0, #0
 80066e0:	f040 8245 	bne.w	8006b6e <_dtoa_r+0x93e>
 80066e4:	9d01      	ldr	r5, [sp, #4]
 80066e6:	2331      	movs	r3, #49	; 0x31
 80066e8:	f805 3b01 	strb.w	r3, [r5], #1
 80066ec:	9b00      	ldr	r3, [sp, #0]
 80066ee:	3301      	adds	r3, #1
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	e240      	b.n	8006b76 <_dtoa_r+0x946>
 80066f4:	07f2      	lsls	r2, r6, #31
 80066f6:	d505      	bpl.n	8006704 <_dtoa_r+0x4d4>
 80066f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066fc:	f7f9 ff7c 	bl	80005f8 <__aeabi_dmul>
 8006700:	3501      	adds	r5, #1
 8006702:	2301      	movs	r3, #1
 8006704:	1076      	asrs	r6, r6, #1
 8006706:	3708      	adds	r7, #8
 8006708:	e777      	b.n	80065fa <_dtoa_r+0x3ca>
 800670a:	2502      	movs	r5, #2
 800670c:	e779      	b.n	8006602 <_dtoa_r+0x3d2>
 800670e:	9f00      	ldr	r7, [sp, #0]
 8006710:	9e03      	ldr	r6, [sp, #12]
 8006712:	e794      	b.n	800663e <_dtoa_r+0x40e>
 8006714:	9901      	ldr	r1, [sp, #4]
 8006716:	4b4c      	ldr	r3, [pc, #304]	; (8006848 <_dtoa_r+0x618>)
 8006718:	4431      	add	r1, r6
 800671a:	910d      	str	r1, [sp, #52]	; 0x34
 800671c:	9908      	ldr	r1, [sp, #32]
 800671e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006722:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006726:	2900      	cmp	r1, #0
 8006728:	d043      	beq.n	80067b2 <_dtoa_r+0x582>
 800672a:	494d      	ldr	r1, [pc, #308]	; (8006860 <_dtoa_r+0x630>)
 800672c:	2000      	movs	r0, #0
 800672e:	f7fa f88d 	bl	800084c <__aeabi_ddiv>
 8006732:	4652      	mov	r2, sl
 8006734:	465b      	mov	r3, fp
 8006736:	f7f9 fda7 	bl	8000288 <__aeabi_dsub>
 800673a:	9d01      	ldr	r5, [sp, #4]
 800673c:	4682      	mov	sl, r0
 800673e:	468b      	mov	fp, r1
 8006740:	4649      	mov	r1, r9
 8006742:	4640      	mov	r0, r8
 8006744:	f7fa fa08 	bl	8000b58 <__aeabi_d2iz>
 8006748:	4606      	mov	r6, r0
 800674a:	f7f9 feeb 	bl	8000524 <__aeabi_i2d>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4640      	mov	r0, r8
 8006754:	4649      	mov	r1, r9
 8006756:	f7f9 fd97 	bl	8000288 <__aeabi_dsub>
 800675a:	3630      	adds	r6, #48	; 0x30
 800675c:	f805 6b01 	strb.w	r6, [r5], #1
 8006760:	4652      	mov	r2, sl
 8006762:	465b      	mov	r3, fp
 8006764:	4680      	mov	r8, r0
 8006766:	4689      	mov	r9, r1
 8006768:	f7fa f9b8 	bl	8000adc <__aeabi_dcmplt>
 800676c:	2800      	cmp	r0, #0
 800676e:	d163      	bne.n	8006838 <_dtoa_r+0x608>
 8006770:	4642      	mov	r2, r8
 8006772:	464b      	mov	r3, r9
 8006774:	4936      	ldr	r1, [pc, #216]	; (8006850 <_dtoa_r+0x620>)
 8006776:	2000      	movs	r0, #0
 8006778:	f7f9 fd86 	bl	8000288 <__aeabi_dsub>
 800677c:	4652      	mov	r2, sl
 800677e:	465b      	mov	r3, fp
 8006780:	f7fa f9ac 	bl	8000adc <__aeabi_dcmplt>
 8006784:	2800      	cmp	r0, #0
 8006786:	f040 80b5 	bne.w	80068f4 <_dtoa_r+0x6c4>
 800678a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800678c:	429d      	cmp	r5, r3
 800678e:	d081      	beq.n	8006694 <_dtoa_r+0x464>
 8006790:	4b30      	ldr	r3, [pc, #192]	; (8006854 <_dtoa_r+0x624>)
 8006792:	2200      	movs	r2, #0
 8006794:	4650      	mov	r0, sl
 8006796:	4659      	mov	r1, fp
 8006798:	f7f9 ff2e 	bl	80005f8 <__aeabi_dmul>
 800679c:	4b2d      	ldr	r3, [pc, #180]	; (8006854 <_dtoa_r+0x624>)
 800679e:	4682      	mov	sl, r0
 80067a0:	468b      	mov	fp, r1
 80067a2:	4640      	mov	r0, r8
 80067a4:	4649      	mov	r1, r9
 80067a6:	2200      	movs	r2, #0
 80067a8:	f7f9 ff26 	bl	80005f8 <__aeabi_dmul>
 80067ac:	4680      	mov	r8, r0
 80067ae:	4689      	mov	r9, r1
 80067b0:	e7c6      	b.n	8006740 <_dtoa_r+0x510>
 80067b2:	4650      	mov	r0, sl
 80067b4:	4659      	mov	r1, fp
 80067b6:	f7f9 ff1f 	bl	80005f8 <__aeabi_dmul>
 80067ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067bc:	9d01      	ldr	r5, [sp, #4]
 80067be:	930f      	str	r3, [sp, #60]	; 0x3c
 80067c0:	4682      	mov	sl, r0
 80067c2:	468b      	mov	fp, r1
 80067c4:	4649      	mov	r1, r9
 80067c6:	4640      	mov	r0, r8
 80067c8:	f7fa f9c6 	bl	8000b58 <__aeabi_d2iz>
 80067cc:	4606      	mov	r6, r0
 80067ce:	f7f9 fea9 	bl	8000524 <__aeabi_i2d>
 80067d2:	3630      	adds	r6, #48	; 0x30
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	f7f9 fd54 	bl	8000288 <__aeabi_dsub>
 80067e0:	f805 6b01 	strb.w	r6, [r5], #1
 80067e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067e6:	429d      	cmp	r5, r3
 80067e8:	4680      	mov	r8, r0
 80067ea:	4689      	mov	r9, r1
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	d124      	bne.n	800683c <_dtoa_r+0x60c>
 80067f2:	4b1b      	ldr	r3, [pc, #108]	; (8006860 <_dtoa_r+0x630>)
 80067f4:	4650      	mov	r0, sl
 80067f6:	4659      	mov	r1, fp
 80067f8:	f7f9 fd48 	bl	800028c <__adddf3>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4640      	mov	r0, r8
 8006802:	4649      	mov	r1, r9
 8006804:	f7fa f988 	bl	8000b18 <__aeabi_dcmpgt>
 8006808:	2800      	cmp	r0, #0
 800680a:	d173      	bne.n	80068f4 <_dtoa_r+0x6c4>
 800680c:	4652      	mov	r2, sl
 800680e:	465b      	mov	r3, fp
 8006810:	4913      	ldr	r1, [pc, #76]	; (8006860 <_dtoa_r+0x630>)
 8006812:	2000      	movs	r0, #0
 8006814:	f7f9 fd38 	bl	8000288 <__aeabi_dsub>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4640      	mov	r0, r8
 800681e:	4649      	mov	r1, r9
 8006820:	f7fa f95c 	bl	8000adc <__aeabi_dcmplt>
 8006824:	2800      	cmp	r0, #0
 8006826:	f43f af35 	beq.w	8006694 <_dtoa_r+0x464>
 800682a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800682c:	1e6b      	subs	r3, r5, #1
 800682e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006830:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006834:	2b30      	cmp	r3, #48	; 0x30
 8006836:	d0f8      	beq.n	800682a <_dtoa_r+0x5fa>
 8006838:	9700      	str	r7, [sp, #0]
 800683a:	e049      	b.n	80068d0 <_dtoa_r+0x6a0>
 800683c:	4b05      	ldr	r3, [pc, #20]	; (8006854 <_dtoa_r+0x624>)
 800683e:	f7f9 fedb 	bl	80005f8 <__aeabi_dmul>
 8006842:	4680      	mov	r8, r0
 8006844:	4689      	mov	r9, r1
 8006846:	e7bd      	b.n	80067c4 <_dtoa_r+0x594>
 8006848:	080091d0 	.word	0x080091d0
 800684c:	080091a8 	.word	0x080091a8
 8006850:	3ff00000 	.word	0x3ff00000
 8006854:	40240000 	.word	0x40240000
 8006858:	401c0000 	.word	0x401c0000
 800685c:	40140000 	.word	0x40140000
 8006860:	3fe00000 	.word	0x3fe00000
 8006864:	9d01      	ldr	r5, [sp, #4]
 8006866:	4656      	mov	r6, sl
 8006868:	465f      	mov	r7, fp
 800686a:	4642      	mov	r2, r8
 800686c:	464b      	mov	r3, r9
 800686e:	4630      	mov	r0, r6
 8006870:	4639      	mov	r1, r7
 8006872:	f7f9 ffeb 	bl	800084c <__aeabi_ddiv>
 8006876:	f7fa f96f 	bl	8000b58 <__aeabi_d2iz>
 800687a:	4682      	mov	sl, r0
 800687c:	f7f9 fe52 	bl	8000524 <__aeabi_i2d>
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	f7f9 feb8 	bl	80005f8 <__aeabi_dmul>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4630      	mov	r0, r6
 800688e:	4639      	mov	r1, r7
 8006890:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006894:	f7f9 fcf8 	bl	8000288 <__aeabi_dsub>
 8006898:	f805 6b01 	strb.w	r6, [r5], #1
 800689c:	9e01      	ldr	r6, [sp, #4]
 800689e:	9f03      	ldr	r7, [sp, #12]
 80068a0:	1bae      	subs	r6, r5, r6
 80068a2:	42b7      	cmp	r7, r6
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	d135      	bne.n	8006916 <_dtoa_r+0x6e6>
 80068aa:	f7f9 fcef 	bl	800028c <__adddf3>
 80068ae:	4642      	mov	r2, r8
 80068b0:	464b      	mov	r3, r9
 80068b2:	4606      	mov	r6, r0
 80068b4:	460f      	mov	r7, r1
 80068b6:	f7fa f92f 	bl	8000b18 <__aeabi_dcmpgt>
 80068ba:	b9d0      	cbnz	r0, 80068f2 <_dtoa_r+0x6c2>
 80068bc:	4642      	mov	r2, r8
 80068be:	464b      	mov	r3, r9
 80068c0:	4630      	mov	r0, r6
 80068c2:	4639      	mov	r1, r7
 80068c4:	f7fa f900 	bl	8000ac8 <__aeabi_dcmpeq>
 80068c8:	b110      	cbz	r0, 80068d0 <_dtoa_r+0x6a0>
 80068ca:	f01a 0f01 	tst.w	sl, #1
 80068ce:	d110      	bne.n	80068f2 <_dtoa_r+0x6c2>
 80068d0:	4620      	mov	r0, r4
 80068d2:	ee18 1a10 	vmov	r1, s16
 80068d6:	f001 f893 	bl	8007a00 <_Bfree>
 80068da:	2300      	movs	r3, #0
 80068dc:	9800      	ldr	r0, [sp, #0]
 80068de:	702b      	strb	r3, [r5, #0]
 80068e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068e2:	3001      	adds	r0, #1
 80068e4:	6018      	str	r0, [r3, #0]
 80068e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f43f acf1 	beq.w	80062d0 <_dtoa_r+0xa0>
 80068ee:	601d      	str	r5, [r3, #0]
 80068f0:	e4ee      	b.n	80062d0 <_dtoa_r+0xa0>
 80068f2:	9f00      	ldr	r7, [sp, #0]
 80068f4:	462b      	mov	r3, r5
 80068f6:	461d      	mov	r5, r3
 80068f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068fc:	2a39      	cmp	r2, #57	; 0x39
 80068fe:	d106      	bne.n	800690e <_dtoa_r+0x6de>
 8006900:	9a01      	ldr	r2, [sp, #4]
 8006902:	429a      	cmp	r2, r3
 8006904:	d1f7      	bne.n	80068f6 <_dtoa_r+0x6c6>
 8006906:	9901      	ldr	r1, [sp, #4]
 8006908:	2230      	movs	r2, #48	; 0x30
 800690a:	3701      	adds	r7, #1
 800690c:	700a      	strb	r2, [r1, #0]
 800690e:	781a      	ldrb	r2, [r3, #0]
 8006910:	3201      	adds	r2, #1
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	e790      	b.n	8006838 <_dtoa_r+0x608>
 8006916:	4ba6      	ldr	r3, [pc, #664]	; (8006bb0 <_dtoa_r+0x980>)
 8006918:	2200      	movs	r2, #0
 800691a:	f7f9 fe6d 	bl	80005f8 <__aeabi_dmul>
 800691e:	2200      	movs	r2, #0
 8006920:	2300      	movs	r3, #0
 8006922:	4606      	mov	r6, r0
 8006924:	460f      	mov	r7, r1
 8006926:	f7fa f8cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800692a:	2800      	cmp	r0, #0
 800692c:	d09d      	beq.n	800686a <_dtoa_r+0x63a>
 800692e:	e7cf      	b.n	80068d0 <_dtoa_r+0x6a0>
 8006930:	9a08      	ldr	r2, [sp, #32]
 8006932:	2a00      	cmp	r2, #0
 8006934:	f000 80d7 	beq.w	8006ae6 <_dtoa_r+0x8b6>
 8006938:	9a06      	ldr	r2, [sp, #24]
 800693a:	2a01      	cmp	r2, #1
 800693c:	f300 80ba 	bgt.w	8006ab4 <_dtoa_r+0x884>
 8006940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006942:	2a00      	cmp	r2, #0
 8006944:	f000 80b2 	beq.w	8006aac <_dtoa_r+0x87c>
 8006948:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800694c:	9e07      	ldr	r6, [sp, #28]
 800694e:	9d04      	ldr	r5, [sp, #16]
 8006950:	9a04      	ldr	r2, [sp, #16]
 8006952:	441a      	add	r2, r3
 8006954:	9204      	str	r2, [sp, #16]
 8006956:	9a05      	ldr	r2, [sp, #20]
 8006958:	2101      	movs	r1, #1
 800695a:	441a      	add	r2, r3
 800695c:	4620      	mov	r0, r4
 800695e:	9205      	str	r2, [sp, #20]
 8006960:	f001 f950 	bl	8007c04 <__i2b>
 8006964:	4607      	mov	r7, r0
 8006966:	2d00      	cmp	r5, #0
 8006968:	dd0c      	ble.n	8006984 <_dtoa_r+0x754>
 800696a:	9b05      	ldr	r3, [sp, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	dd09      	ble.n	8006984 <_dtoa_r+0x754>
 8006970:	42ab      	cmp	r3, r5
 8006972:	9a04      	ldr	r2, [sp, #16]
 8006974:	bfa8      	it	ge
 8006976:	462b      	movge	r3, r5
 8006978:	1ad2      	subs	r2, r2, r3
 800697a:	9204      	str	r2, [sp, #16]
 800697c:	9a05      	ldr	r2, [sp, #20]
 800697e:	1aed      	subs	r5, r5, r3
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	9b07      	ldr	r3, [sp, #28]
 8006986:	b31b      	cbz	r3, 80069d0 <_dtoa_r+0x7a0>
 8006988:	9b08      	ldr	r3, [sp, #32]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 80af 	beq.w	8006aee <_dtoa_r+0x8be>
 8006990:	2e00      	cmp	r6, #0
 8006992:	dd13      	ble.n	80069bc <_dtoa_r+0x78c>
 8006994:	4639      	mov	r1, r7
 8006996:	4632      	mov	r2, r6
 8006998:	4620      	mov	r0, r4
 800699a:	f001 f9f3 	bl	8007d84 <__pow5mult>
 800699e:	ee18 2a10 	vmov	r2, s16
 80069a2:	4601      	mov	r1, r0
 80069a4:	4607      	mov	r7, r0
 80069a6:	4620      	mov	r0, r4
 80069a8:	f001 f942 	bl	8007c30 <__multiply>
 80069ac:	ee18 1a10 	vmov	r1, s16
 80069b0:	4680      	mov	r8, r0
 80069b2:	4620      	mov	r0, r4
 80069b4:	f001 f824 	bl	8007a00 <_Bfree>
 80069b8:	ee08 8a10 	vmov	s16, r8
 80069bc:	9b07      	ldr	r3, [sp, #28]
 80069be:	1b9a      	subs	r2, r3, r6
 80069c0:	d006      	beq.n	80069d0 <_dtoa_r+0x7a0>
 80069c2:	ee18 1a10 	vmov	r1, s16
 80069c6:	4620      	mov	r0, r4
 80069c8:	f001 f9dc 	bl	8007d84 <__pow5mult>
 80069cc:	ee08 0a10 	vmov	s16, r0
 80069d0:	2101      	movs	r1, #1
 80069d2:	4620      	mov	r0, r4
 80069d4:	f001 f916 	bl	8007c04 <__i2b>
 80069d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069da:	2b00      	cmp	r3, #0
 80069dc:	4606      	mov	r6, r0
 80069de:	f340 8088 	ble.w	8006af2 <_dtoa_r+0x8c2>
 80069e2:	461a      	mov	r2, r3
 80069e4:	4601      	mov	r1, r0
 80069e6:	4620      	mov	r0, r4
 80069e8:	f001 f9cc 	bl	8007d84 <__pow5mult>
 80069ec:	9b06      	ldr	r3, [sp, #24]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	4606      	mov	r6, r0
 80069f2:	f340 8081 	ble.w	8006af8 <_dtoa_r+0x8c8>
 80069f6:	f04f 0800 	mov.w	r8, #0
 80069fa:	6933      	ldr	r3, [r6, #16]
 80069fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a00:	6918      	ldr	r0, [r3, #16]
 8006a02:	f001 f8af 	bl	8007b64 <__hi0bits>
 8006a06:	f1c0 0020 	rsb	r0, r0, #32
 8006a0a:	9b05      	ldr	r3, [sp, #20]
 8006a0c:	4418      	add	r0, r3
 8006a0e:	f010 001f 	ands.w	r0, r0, #31
 8006a12:	f000 8092 	beq.w	8006b3a <_dtoa_r+0x90a>
 8006a16:	f1c0 0320 	rsb	r3, r0, #32
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	f340 808a 	ble.w	8006b34 <_dtoa_r+0x904>
 8006a20:	f1c0 001c 	rsb	r0, r0, #28
 8006a24:	9b04      	ldr	r3, [sp, #16]
 8006a26:	4403      	add	r3, r0
 8006a28:	9304      	str	r3, [sp, #16]
 8006a2a:	9b05      	ldr	r3, [sp, #20]
 8006a2c:	4403      	add	r3, r0
 8006a2e:	4405      	add	r5, r0
 8006a30:	9305      	str	r3, [sp, #20]
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dd07      	ble.n	8006a48 <_dtoa_r+0x818>
 8006a38:	ee18 1a10 	vmov	r1, s16
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f001 f9fa 	bl	8007e38 <__lshift>
 8006a44:	ee08 0a10 	vmov	s16, r0
 8006a48:	9b05      	ldr	r3, [sp, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	dd05      	ble.n	8006a5a <_dtoa_r+0x82a>
 8006a4e:	4631      	mov	r1, r6
 8006a50:	461a      	mov	r2, r3
 8006a52:	4620      	mov	r0, r4
 8006a54:	f001 f9f0 	bl	8007e38 <__lshift>
 8006a58:	4606      	mov	r6, r0
 8006a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d06e      	beq.n	8006b3e <_dtoa_r+0x90e>
 8006a60:	ee18 0a10 	vmov	r0, s16
 8006a64:	4631      	mov	r1, r6
 8006a66:	f001 fa57 	bl	8007f18 <__mcmp>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	da67      	bge.n	8006b3e <_dtoa_r+0x90e>
 8006a6e:	9b00      	ldr	r3, [sp, #0]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	ee18 1a10 	vmov	r1, s16
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	220a      	movs	r2, #10
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 ffe1 	bl	8007a44 <__multadd>
 8006a82:	9b08      	ldr	r3, [sp, #32]
 8006a84:	ee08 0a10 	vmov	s16, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 81b1 	beq.w	8006df0 <_dtoa_r+0xbc0>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4639      	mov	r1, r7
 8006a92:	220a      	movs	r2, #10
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 ffd5 	bl	8007a44 <__multadd>
 8006a9a:	9b02      	ldr	r3, [sp, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	4607      	mov	r7, r0
 8006aa0:	f300 808e 	bgt.w	8006bc0 <_dtoa_r+0x990>
 8006aa4:	9b06      	ldr	r3, [sp, #24]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	dc51      	bgt.n	8006b4e <_dtoa_r+0x91e>
 8006aaa:	e089      	b.n	8006bc0 <_dtoa_r+0x990>
 8006aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ab2:	e74b      	b.n	800694c <_dtoa_r+0x71c>
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	1e5e      	subs	r6, r3, #1
 8006ab8:	9b07      	ldr	r3, [sp, #28]
 8006aba:	42b3      	cmp	r3, r6
 8006abc:	bfbf      	itttt	lt
 8006abe:	9b07      	ldrlt	r3, [sp, #28]
 8006ac0:	9607      	strlt	r6, [sp, #28]
 8006ac2:	1af2      	sublt	r2, r6, r3
 8006ac4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ac6:	bfb6      	itet	lt
 8006ac8:	189b      	addlt	r3, r3, r2
 8006aca:	1b9e      	subge	r6, r3, r6
 8006acc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ace:	9b03      	ldr	r3, [sp, #12]
 8006ad0:	bfb8      	it	lt
 8006ad2:	2600      	movlt	r6, #0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	bfb7      	itett	lt
 8006ad8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006adc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ae0:	1a9d      	sublt	r5, r3, r2
 8006ae2:	2300      	movlt	r3, #0
 8006ae4:	e734      	b.n	8006950 <_dtoa_r+0x720>
 8006ae6:	9e07      	ldr	r6, [sp, #28]
 8006ae8:	9d04      	ldr	r5, [sp, #16]
 8006aea:	9f08      	ldr	r7, [sp, #32]
 8006aec:	e73b      	b.n	8006966 <_dtoa_r+0x736>
 8006aee:	9a07      	ldr	r2, [sp, #28]
 8006af0:	e767      	b.n	80069c2 <_dtoa_r+0x792>
 8006af2:	9b06      	ldr	r3, [sp, #24]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	dc18      	bgt.n	8006b2a <_dtoa_r+0x8fa>
 8006af8:	f1ba 0f00 	cmp.w	sl, #0
 8006afc:	d115      	bne.n	8006b2a <_dtoa_r+0x8fa>
 8006afe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b02:	b993      	cbnz	r3, 8006b2a <_dtoa_r+0x8fa>
 8006b04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b08:	0d1b      	lsrs	r3, r3, #20
 8006b0a:	051b      	lsls	r3, r3, #20
 8006b0c:	b183      	cbz	r3, 8006b30 <_dtoa_r+0x900>
 8006b0e:	9b04      	ldr	r3, [sp, #16]
 8006b10:	3301      	adds	r3, #1
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	9b05      	ldr	r3, [sp, #20]
 8006b16:	3301      	adds	r3, #1
 8006b18:	9305      	str	r3, [sp, #20]
 8006b1a:	f04f 0801 	mov.w	r8, #1
 8006b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f47f af6a 	bne.w	80069fa <_dtoa_r+0x7ca>
 8006b26:	2001      	movs	r0, #1
 8006b28:	e76f      	b.n	8006a0a <_dtoa_r+0x7da>
 8006b2a:	f04f 0800 	mov.w	r8, #0
 8006b2e:	e7f6      	b.n	8006b1e <_dtoa_r+0x8ee>
 8006b30:	4698      	mov	r8, r3
 8006b32:	e7f4      	b.n	8006b1e <_dtoa_r+0x8ee>
 8006b34:	f43f af7d 	beq.w	8006a32 <_dtoa_r+0x802>
 8006b38:	4618      	mov	r0, r3
 8006b3a:	301c      	adds	r0, #28
 8006b3c:	e772      	b.n	8006a24 <_dtoa_r+0x7f4>
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dc37      	bgt.n	8006bb4 <_dtoa_r+0x984>
 8006b44:	9b06      	ldr	r3, [sp, #24]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	dd34      	ble.n	8006bb4 <_dtoa_r+0x984>
 8006b4a:	9b03      	ldr	r3, [sp, #12]
 8006b4c:	9302      	str	r3, [sp, #8]
 8006b4e:	9b02      	ldr	r3, [sp, #8]
 8006b50:	b96b      	cbnz	r3, 8006b6e <_dtoa_r+0x93e>
 8006b52:	4631      	mov	r1, r6
 8006b54:	2205      	movs	r2, #5
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 ff74 	bl	8007a44 <__multadd>
 8006b5c:	4601      	mov	r1, r0
 8006b5e:	4606      	mov	r6, r0
 8006b60:	ee18 0a10 	vmov	r0, s16
 8006b64:	f001 f9d8 	bl	8007f18 <__mcmp>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	f73f adbb 	bgt.w	80066e4 <_dtoa_r+0x4b4>
 8006b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b70:	9d01      	ldr	r5, [sp, #4]
 8006b72:	43db      	mvns	r3, r3
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	f04f 0800 	mov.w	r8, #0
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f000 ff3f 	bl	8007a00 <_Bfree>
 8006b82:	2f00      	cmp	r7, #0
 8006b84:	f43f aea4 	beq.w	80068d0 <_dtoa_r+0x6a0>
 8006b88:	f1b8 0f00 	cmp.w	r8, #0
 8006b8c:	d005      	beq.n	8006b9a <_dtoa_r+0x96a>
 8006b8e:	45b8      	cmp	r8, r7
 8006b90:	d003      	beq.n	8006b9a <_dtoa_r+0x96a>
 8006b92:	4641      	mov	r1, r8
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 ff33 	bl	8007a00 <_Bfree>
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 ff2f 	bl	8007a00 <_Bfree>
 8006ba2:	e695      	b.n	80068d0 <_dtoa_r+0x6a0>
 8006ba4:	2600      	movs	r6, #0
 8006ba6:	4637      	mov	r7, r6
 8006ba8:	e7e1      	b.n	8006b6e <_dtoa_r+0x93e>
 8006baa:	9700      	str	r7, [sp, #0]
 8006bac:	4637      	mov	r7, r6
 8006bae:	e599      	b.n	80066e4 <_dtoa_r+0x4b4>
 8006bb0:	40240000 	.word	0x40240000
 8006bb4:	9b08      	ldr	r3, [sp, #32]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 80ca 	beq.w	8006d50 <_dtoa_r+0xb20>
 8006bbc:	9b03      	ldr	r3, [sp, #12]
 8006bbe:	9302      	str	r3, [sp, #8]
 8006bc0:	2d00      	cmp	r5, #0
 8006bc2:	dd05      	ble.n	8006bd0 <_dtoa_r+0x9a0>
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	462a      	mov	r2, r5
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f001 f935 	bl	8007e38 <__lshift>
 8006bce:	4607      	mov	r7, r0
 8006bd0:	f1b8 0f00 	cmp.w	r8, #0
 8006bd4:	d05b      	beq.n	8006c8e <_dtoa_r+0xa5e>
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 fed1 	bl	8007980 <_Balloc>
 8006bde:	4605      	mov	r5, r0
 8006be0:	b928      	cbnz	r0, 8006bee <_dtoa_r+0x9be>
 8006be2:	4b87      	ldr	r3, [pc, #540]	; (8006e00 <_dtoa_r+0xbd0>)
 8006be4:	4602      	mov	r2, r0
 8006be6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006bea:	f7ff bb3b 	b.w	8006264 <_dtoa_r+0x34>
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	3202      	adds	r2, #2
 8006bf2:	0092      	lsls	r2, r2, #2
 8006bf4:	f107 010c 	add.w	r1, r7, #12
 8006bf8:	300c      	adds	r0, #12
 8006bfa:	f000 feb3 	bl	8007964 <memcpy>
 8006bfe:	2201      	movs	r2, #1
 8006c00:	4629      	mov	r1, r5
 8006c02:	4620      	mov	r0, r4
 8006c04:	f001 f918 	bl	8007e38 <__lshift>
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	f103 0901 	add.w	r9, r3, #1
 8006c0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006c12:	4413      	add	r3, r2
 8006c14:	9305      	str	r3, [sp, #20]
 8006c16:	f00a 0301 	and.w	r3, sl, #1
 8006c1a:	46b8      	mov	r8, r7
 8006c1c:	9304      	str	r3, [sp, #16]
 8006c1e:	4607      	mov	r7, r0
 8006c20:	4631      	mov	r1, r6
 8006c22:	ee18 0a10 	vmov	r0, s16
 8006c26:	f7ff fa77 	bl	8006118 <quorem>
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	9002      	str	r0, [sp, #8]
 8006c2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c32:	ee18 0a10 	vmov	r0, s16
 8006c36:	f001 f96f 	bl	8007f18 <__mcmp>
 8006c3a:	463a      	mov	r2, r7
 8006c3c:	9003      	str	r0, [sp, #12]
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4620      	mov	r0, r4
 8006c42:	f001 f985 	bl	8007f50 <__mdiff>
 8006c46:	68c2      	ldr	r2, [r0, #12]
 8006c48:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	bb02      	cbnz	r2, 8006c92 <_dtoa_r+0xa62>
 8006c50:	4601      	mov	r1, r0
 8006c52:	ee18 0a10 	vmov	r0, s16
 8006c56:	f001 f95f 	bl	8007f18 <__mcmp>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	4620      	mov	r0, r4
 8006c60:	9207      	str	r2, [sp, #28]
 8006c62:	f000 fecd 	bl	8007a00 <_Bfree>
 8006c66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006c6a:	ea43 0102 	orr.w	r1, r3, r2
 8006c6e:	9b04      	ldr	r3, [sp, #16]
 8006c70:	430b      	orrs	r3, r1
 8006c72:	464d      	mov	r5, r9
 8006c74:	d10f      	bne.n	8006c96 <_dtoa_r+0xa66>
 8006c76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006c7a:	d02a      	beq.n	8006cd2 <_dtoa_r+0xaa2>
 8006c7c:	9b03      	ldr	r3, [sp, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	dd02      	ble.n	8006c88 <_dtoa_r+0xa58>
 8006c82:	9b02      	ldr	r3, [sp, #8]
 8006c84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006c88:	f88b a000 	strb.w	sl, [fp]
 8006c8c:	e775      	b.n	8006b7a <_dtoa_r+0x94a>
 8006c8e:	4638      	mov	r0, r7
 8006c90:	e7ba      	b.n	8006c08 <_dtoa_r+0x9d8>
 8006c92:	2201      	movs	r2, #1
 8006c94:	e7e2      	b.n	8006c5c <_dtoa_r+0xa2c>
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	db04      	blt.n	8006ca6 <_dtoa_r+0xa76>
 8006c9c:	9906      	ldr	r1, [sp, #24]
 8006c9e:	430b      	orrs	r3, r1
 8006ca0:	9904      	ldr	r1, [sp, #16]
 8006ca2:	430b      	orrs	r3, r1
 8006ca4:	d122      	bne.n	8006cec <_dtoa_r+0xabc>
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	ddee      	ble.n	8006c88 <_dtoa_r+0xa58>
 8006caa:	ee18 1a10 	vmov	r1, s16
 8006cae:	2201      	movs	r2, #1
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f001 f8c1 	bl	8007e38 <__lshift>
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	ee08 0a10 	vmov	s16, r0
 8006cbc:	f001 f92c 	bl	8007f18 <__mcmp>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	dc03      	bgt.n	8006ccc <_dtoa_r+0xa9c>
 8006cc4:	d1e0      	bne.n	8006c88 <_dtoa_r+0xa58>
 8006cc6:	f01a 0f01 	tst.w	sl, #1
 8006cca:	d0dd      	beq.n	8006c88 <_dtoa_r+0xa58>
 8006ccc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006cd0:	d1d7      	bne.n	8006c82 <_dtoa_r+0xa52>
 8006cd2:	2339      	movs	r3, #57	; 0x39
 8006cd4:	f88b 3000 	strb.w	r3, [fp]
 8006cd8:	462b      	mov	r3, r5
 8006cda:	461d      	mov	r5, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ce2:	2a39      	cmp	r2, #57	; 0x39
 8006ce4:	d071      	beq.n	8006dca <_dtoa_r+0xb9a>
 8006ce6:	3201      	adds	r2, #1
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	e746      	b.n	8006b7a <_dtoa_r+0x94a>
 8006cec:	2a00      	cmp	r2, #0
 8006cee:	dd07      	ble.n	8006d00 <_dtoa_r+0xad0>
 8006cf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006cf4:	d0ed      	beq.n	8006cd2 <_dtoa_r+0xaa2>
 8006cf6:	f10a 0301 	add.w	r3, sl, #1
 8006cfa:	f88b 3000 	strb.w	r3, [fp]
 8006cfe:	e73c      	b.n	8006b7a <_dtoa_r+0x94a>
 8006d00:	9b05      	ldr	r3, [sp, #20]
 8006d02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006d06:	4599      	cmp	r9, r3
 8006d08:	d047      	beq.n	8006d9a <_dtoa_r+0xb6a>
 8006d0a:	ee18 1a10 	vmov	r1, s16
 8006d0e:	2300      	movs	r3, #0
 8006d10:	220a      	movs	r2, #10
 8006d12:	4620      	mov	r0, r4
 8006d14:	f000 fe96 	bl	8007a44 <__multadd>
 8006d18:	45b8      	cmp	r8, r7
 8006d1a:	ee08 0a10 	vmov	s16, r0
 8006d1e:	f04f 0300 	mov.w	r3, #0
 8006d22:	f04f 020a 	mov.w	r2, #10
 8006d26:	4641      	mov	r1, r8
 8006d28:	4620      	mov	r0, r4
 8006d2a:	d106      	bne.n	8006d3a <_dtoa_r+0xb0a>
 8006d2c:	f000 fe8a 	bl	8007a44 <__multadd>
 8006d30:	4680      	mov	r8, r0
 8006d32:	4607      	mov	r7, r0
 8006d34:	f109 0901 	add.w	r9, r9, #1
 8006d38:	e772      	b.n	8006c20 <_dtoa_r+0x9f0>
 8006d3a:	f000 fe83 	bl	8007a44 <__multadd>
 8006d3e:	4639      	mov	r1, r7
 8006d40:	4680      	mov	r8, r0
 8006d42:	2300      	movs	r3, #0
 8006d44:	220a      	movs	r2, #10
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 fe7c 	bl	8007a44 <__multadd>
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	e7f1      	b.n	8006d34 <_dtoa_r+0xb04>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	9302      	str	r3, [sp, #8]
 8006d54:	9d01      	ldr	r5, [sp, #4]
 8006d56:	ee18 0a10 	vmov	r0, s16
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	f7ff f9dc 	bl	8006118 <quorem>
 8006d60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	f805 ab01 	strb.w	sl, [r5], #1
 8006d6a:	1aea      	subs	r2, r5, r3
 8006d6c:	9b02      	ldr	r3, [sp, #8]
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	dd09      	ble.n	8006d86 <_dtoa_r+0xb56>
 8006d72:	ee18 1a10 	vmov	r1, s16
 8006d76:	2300      	movs	r3, #0
 8006d78:	220a      	movs	r2, #10
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 fe62 	bl	8007a44 <__multadd>
 8006d80:	ee08 0a10 	vmov	s16, r0
 8006d84:	e7e7      	b.n	8006d56 <_dtoa_r+0xb26>
 8006d86:	9b02      	ldr	r3, [sp, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	bfc8      	it	gt
 8006d8c:	461d      	movgt	r5, r3
 8006d8e:	9b01      	ldr	r3, [sp, #4]
 8006d90:	bfd8      	it	le
 8006d92:	2501      	movle	r5, #1
 8006d94:	441d      	add	r5, r3
 8006d96:	f04f 0800 	mov.w	r8, #0
 8006d9a:	ee18 1a10 	vmov	r1, s16
 8006d9e:	2201      	movs	r2, #1
 8006da0:	4620      	mov	r0, r4
 8006da2:	f001 f849 	bl	8007e38 <__lshift>
 8006da6:	4631      	mov	r1, r6
 8006da8:	ee08 0a10 	vmov	s16, r0
 8006dac:	f001 f8b4 	bl	8007f18 <__mcmp>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	dc91      	bgt.n	8006cd8 <_dtoa_r+0xaa8>
 8006db4:	d102      	bne.n	8006dbc <_dtoa_r+0xb8c>
 8006db6:	f01a 0f01 	tst.w	sl, #1
 8006dba:	d18d      	bne.n	8006cd8 <_dtoa_r+0xaa8>
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	461d      	mov	r5, r3
 8006dc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dc4:	2a30      	cmp	r2, #48	; 0x30
 8006dc6:	d0fa      	beq.n	8006dbe <_dtoa_r+0xb8e>
 8006dc8:	e6d7      	b.n	8006b7a <_dtoa_r+0x94a>
 8006dca:	9a01      	ldr	r2, [sp, #4]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d184      	bne.n	8006cda <_dtoa_r+0xaaa>
 8006dd0:	9b00      	ldr	r3, [sp, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	2331      	movs	r3, #49	; 0x31
 8006dd8:	7013      	strb	r3, [r2, #0]
 8006dda:	e6ce      	b.n	8006b7a <_dtoa_r+0x94a>
 8006ddc:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <_dtoa_r+0xbd4>)
 8006dde:	f7ff ba95 	b.w	800630c <_dtoa_r+0xdc>
 8006de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f47f aa6e 	bne.w	80062c6 <_dtoa_r+0x96>
 8006dea:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <_dtoa_r+0xbd8>)
 8006dec:	f7ff ba8e 	b.w	800630c <_dtoa_r+0xdc>
 8006df0:	9b02      	ldr	r3, [sp, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	dcae      	bgt.n	8006d54 <_dtoa_r+0xb24>
 8006df6:	9b06      	ldr	r3, [sp, #24]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	f73f aea8 	bgt.w	8006b4e <_dtoa_r+0x91e>
 8006dfe:	e7a9      	b.n	8006d54 <_dtoa_r+0xb24>
 8006e00:	08009058 	.word	0x08009058
 8006e04:	08008e58 	.word	0x08008e58
 8006e08:	08008fd9 	.word	0x08008fd9

08006e0c <__sflush_r>:
 8006e0c:	898a      	ldrh	r2, [r1, #12]
 8006e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e12:	4605      	mov	r5, r0
 8006e14:	0710      	lsls	r0, r2, #28
 8006e16:	460c      	mov	r4, r1
 8006e18:	d458      	bmi.n	8006ecc <__sflush_r+0xc0>
 8006e1a:	684b      	ldr	r3, [r1, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dc05      	bgt.n	8006e2c <__sflush_r+0x20>
 8006e20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	dc02      	bgt.n	8006e2c <__sflush_r+0x20>
 8006e26:	2000      	movs	r0, #0
 8006e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e2e:	2e00      	cmp	r6, #0
 8006e30:	d0f9      	beq.n	8006e26 <__sflush_r+0x1a>
 8006e32:	2300      	movs	r3, #0
 8006e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e38:	682f      	ldr	r7, [r5, #0]
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	d032      	beq.n	8006ea4 <__sflush_r+0x98>
 8006e3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e40:	89a3      	ldrh	r3, [r4, #12]
 8006e42:	075a      	lsls	r2, r3, #29
 8006e44:	d505      	bpl.n	8006e52 <__sflush_r+0x46>
 8006e46:	6863      	ldr	r3, [r4, #4]
 8006e48:	1ac0      	subs	r0, r0, r3
 8006e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e4c:	b10b      	cbz	r3, 8006e52 <__sflush_r+0x46>
 8006e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e50:	1ac0      	subs	r0, r0, r3
 8006e52:	2300      	movs	r3, #0
 8006e54:	4602      	mov	r2, r0
 8006e56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e58:	6a21      	ldr	r1, [r4, #32]
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	47b0      	blx	r6
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	d106      	bne.n	8006e72 <__sflush_r+0x66>
 8006e64:	6829      	ldr	r1, [r5, #0]
 8006e66:	291d      	cmp	r1, #29
 8006e68:	d82c      	bhi.n	8006ec4 <__sflush_r+0xb8>
 8006e6a:	4a2a      	ldr	r2, [pc, #168]	; (8006f14 <__sflush_r+0x108>)
 8006e6c:	40ca      	lsrs	r2, r1
 8006e6e:	07d6      	lsls	r6, r2, #31
 8006e70:	d528      	bpl.n	8006ec4 <__sflush_r+0xb8>
 8006e72:	2200      	movs	r2, #0
 8006e74:	6062      	str	r2, [r4, #4]
 8006e76:	04d9      	lsls	r1, r3, #19
 8006e78:	6922      	ldr	r2, [r4, #16]
 8006e7a:	6022      	str	r2, [r4, #0]
 8006e7c:	d504      	bpl.n	8006e88 <__sflush_r+0x7c>
 8006e7e:	1c42      	adds	r2, r0, #1
 8006e80:	d101      	bne.n	8006e86 <__sflush_r+0x7a>
 8006e82:	682b      	ldr	r3, [r5, #0]
 8006e84:	b903      	cbnz	r3, 8006e88 <__sflush_r+0x7c>
 8006e86:	6560      	str	r0, [r4, #84]	; 0x54
 8006e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e8a:	602f      	str	r7, [r5, #0]
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	d0ca      	beq.n	8006e26 <__sflush_r+0x1a>
 8006e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e94:	4299      	cmp	r1, r3
 8006e96:	d002      	beq.n	8006e9e <__sflush_r+0x92>
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f001 fa49 	bl	8008330 <_free_r>
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ea2:	e7c1      	b.n	8006e28 <__sflush_r+0x1c>
 8006ea4:	6a21      	ldr	r1, [r4, #32]
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b0      	blx	r6
 8006eac:	1c41      	adds	r1, r0, #1
 8006eae:	d1c7      	bne.n	8006e40 <__sflush_r+0x34>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0c4      	beq.n	8006e40 <__sflush_r+0x34>
 8006eb6:	2b1d      	cmp	r3, #29
 8006eb8:	d001      	beq.n	8006ebe <__sflush_r+0xb2>
 8006eba:	2b16      	cmp	r3, #22
 8006ebc:	d101      	bne.n	8006ec2 <__sflush_r+0xb6>
 8006ebe:	602f      	str	r7, [r5, #0]
 8006ec0:	e7b1      	b.n	8006e26 <__sflush_r+0x1a>
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec8:	81a3      	strh	r3, [r4, #12]
 8006eca:	e7ad      	b.n	8006e28 <__sflush_r+0x1c>
 8006ecc:	690f      	ldr	r7, [r1, #16]
 8006ece:	2f00      	cmp	r7, #0
 8006ed0:	d0a9      	beq.n	8006e26 <__sflush_r+0x1a>
 8006ed2:	0793      	lsls	r3, r2, #30
 8006ed4:	680e      	ldr	r6, [r1, #0]
 8006ed6:	bf08      	it	eq
 8006ed8:	694b      	ldreq	r3, [r1, #20]
 8006eda:	600f      	str	r7, [r1, #0]
 8006edc:	bf18      	it	ne
 8006ede:	2300      	movne	r3, #0
 8006ee0:	eba6 0807 	sub.w	r8, r6, r7
 8006ee4:	608b      	str	r3, [r1, #8]
 8006ee6:	f1b8 0f00 	cmp.w	r8, #0
 8006eea:	dd9c      	ble.n	8006e26 <__sflush_r+0x1a>
 8006eec:	6a21      	ldr	r1, [r4, #32]
 8006eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ef0:	4643      	mov	r3, r8
 8006ef2:	463a      	mov	r2, r7
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b0      	blx	r6
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	dc06      	bgt.n	8006f0a <__sflush_r+0xfe>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f02:	81a3      	strh	r3, [r4, #12]
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f08:	e78e      	b.n	8006e28 <__sflush_r+0x1c>
 8006f0a:	4407      	add	r7, r0
 8006f0c:	eba8 0800 	sub.w	r8, r8, r0
 8006f10:	e7e9      	b.n	8006ee6 <__sflush_r+0xda>
 8006f12:	bf00      	nop
 8006f14:	20400001 	.word	0x20400001

08006f18 <_fflush_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	690b      	ldr	r3, [r1, #16]
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	b913      	cbnz	r3, 8006f28 <_fflush_r+0x10>
 8006f22:	2500      	movs	r5, #0
 8006f24:	4628      	mov	r0, r5
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	b118      	cbz	r0, 8006f32 <_fflush_r+0x1a>
 8006f2a:	6983      	ldr	r3, [r0, #24]
 8006f2c:	b90b      	cbnz	r3, 8006f32 <_fflush_r+0x1a>
 8006f2e:	f000 f887 	bl	8007040 <__sinit>
 8006f32:	4b14      	ldr	r3, [pc, #80]	; (8006f84 <_fflush_r+0x6c>)
 8006f34:	429c      	cmp	r4, r3
 8006f36:	d11b      	bne.n	8006f70 <_fflush_r+0x58>
 8006f38:	686c      	ldr	r4, [r5, #4]
 8006f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0ef      	beq.n	8006f22 <_fflush_r+0xa>
 8006f42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f44:	07d0      	lsls	r0, r2, #31
 8006f46:	d404      	bmi.n	8006f52 <_fflush_r+0x3a>
 8006f48:	0599      	lsls	r1, r3, #22
 8006f4a:	d402      	bmi.n	8006f52 <_fflush_r+0x3a>
 8006f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f4e:	f000 fc88 	bl	8007862 <__retarget_lock_acquire_recursive>
 8006f52:	4628      	mov	r0, r5
 8006f54:	4621      	mov	r1, r4
 8006f56:	f7ff ff59 	bl	8006e0c <__sflush_r>
 8006f5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f5c:	07da      	lsls	r2, r3, #31
 8006f5e:	4605      	mov	r5, r0
 8006f60:	d4e0      	bmi.n	8006f24 <_fflush_r+0xc>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	059b      	lsls	r3, r3, #22
 8006f66:	d4dd      	bmi.n	8006f24 <_fflush_r+0xc>
 8006f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f6a:	f000 fc7b 	bl	8007864 <__retarget_lock_release_recursive>
 8006f6e:	e7d9      	b.n	8006f24 <_fflush_r+0xc>
 8006f70:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <_fflush_r+0x70>)
 8006f72:	429c      	cmp	r4, r3
 8006f74:	d101      	bne.n	8006f7a <_fflush_r+0x62>
 8006f76:	68ac      	ldr	r4, [r5, #8]
 8006f78:	e7df      	b.n	8006f3a <_fflush_r+0x22>
 8006f7a:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <_fflush_r+0x74>)
 8006f7c:	429c      	cmp	r4, r3
 8006f7e:	bf08      	it	eq
 8006f80:	68ec      	ldreq	r4, [r5, #12]
 8006f82:	e7da      	b.n	8006f3a <_fflush_r+0x22>
 8006f84:	0800908c 	.word	0x0800908c
 8006f88:	080090ac 	.word	0x080090ac
 8006f8c:	0800906c 	.word	0x0800906c

08006f90 <std>:
 8006f90:	2300      	movs	r3, #0
 8006f92:	b510      	push	{r4, lr}
 8006f94:	4604      	mov	r4, r0
 8006f96:	e9c0 3300 	strd	r3, r3, [r0]
 8006f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f9e:	6083      	str	r3, [r0, #8]
 8006fa0:	8181      	strh	r1, [r0, #12]
 8006fa2:	6643      	str	r3, [r0, #100]	; 0x64
 8006fa4:	81c2      	strh	r2, [r0, #14]
 8006fa6:	6183      	str	r3, [r0, #24]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	2208      	movs	r2, #8
 8006fac:	305c      	adds	r0, #92	; 0x5c
 8006fae:	f7fd fa29 	bl	8004404 <memset>
 8006fb2:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <std+0x38>)
 8006fb4:	6263      	str	r3, [r4, #36]	; 0x24
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <std+0x3c>)
 8006fb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fba:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <std+0x40>)
 8006fbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <std+0x44>)
 8006fc0:	6224      	str	r4, [r4, #32]
 8006fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	bf00      	nop
 8006fc8:	080087d9 	.word	0x080087d9
 8006fcc:	080087fb 	.word	0x080087fb
 8006fd0:	08008833 	.word	0x08008833
 8006fd4:	08008857 	.word	0x08008857

08006fd8 <_cleanup_r>:
 8006fd8:	4901      	ldr	r1, [pc, #4]	; (8006fe0 <_cleanup_r+0x8>)
 8006fda:	f000 b8af 	b.w	800713c <_fwalk_reent>
 8006fde:	bf00      	nop
 8006fe0:	08006f19 	.word	0x08006f19

08006fe4 <__sfmoreglue>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	2268      	movs	r2, #104	; 0x68
 8006fe8:	1e4d      	subs	r5, r1, #1
 8006fea:	4355      	muls	r5, r2
 8006fec:	460e      	mov	r6, r1
 8006fee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ff2:	f001 fa09 	bl	8008408 <_malloc_r>
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	b140      	cbz	r0, 800700c <__sfmoreglue+0x28>
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	e9c0 1600 	strd	r1, r6, [r0]
 8007000:	300c      	adds	r0, #12
 8007002:	60a0      	str	r0, [r4, #8]
 8007004:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007008:	f7fd f9fc 	bl	8004404 <memset>
 800700c:	4620      	mov	r0, r4
 800700e:	bd70      	pop	{r4, r5, r6, pc}

08007010 <__sfp_lock_acquire>:
 8007010:	4801      	ldr	r0, [pc, #4]	; (8007018 <__sfp_lock_acquire+0x8>)
 8007012:	f000 bc26 	b.w	8007862 <__retarget_lock_acquire_recursive>
 8007016:	bf00      	nop
 8007018:	200002d5 	.word	0x200002d5

0800701c <__sfp_lock_release>:
 800701c:	4801      	ldr	r0, [pc, #4]	; (8007024 <__sfp_lock_release+0x8>)
 800701e:	f000 bc21 	b.w	8007864 <__retarget_lock_release_recursive>
 8007022:	bf00      	nop
 8007024:	200002d5 	.word	0x200002d5

08007028 <__sinit_lock_acquire>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__sinit_lock_acquire+0x8>)
 800702a:	f000 bc1a 	b.w	8007862 <__retarget_lock_acquire_recursive>
 800702e:	bf00      	nop
 8007030:	200002d6 	.word	0x200002d6

08007034 <__sinit_lock_release>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__sinit_lock_release+0x8>)
 8007036:	f000 bc15 	b.w	8007864 <__retarget_lock_release_recursive>
 800703a:	bf00      	nop
 800703c:	200002d6 	.word	0x200002d6

08007040 <__sinit>:
 8007040:	b510      	push	{r4, lr}
 8007042:	4604      	mov	r4, r0
 8007044:	f7ff fff0 	bl	8007028 <__sinit_lock_acquire>
 8007048:	69a3      	ldr	r3, [r4, #24]
 800704a:	b11b      	cbz	r3, 8007054 <__sinit+0x14>
 800704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007050:	f7ff bff0 	b.w	8007034 <__sinit_lock_release>
 8007054:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007058:	6523      	str	r3, [r4, #80]	; 0x50
 800705a:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <__sinit+0x68>)
 800705c:	4a13      	ldr	r2, [pc, #76]	; (80070ac <__sinit+0x6c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	62a2      	str	r2, [r4, #40]	; 0x28
 8007062:	42a3      	cmp	r3, r4
 8007064:	bf04      	itt	eq
 8007066:	2301      	moveq	r3, #1
 8007068:	61a3      	streq	r3, [r4, #24]
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f820 	bl	80070b0 <__sfp>
 8007070:	6060      	str	r0, [r4, #4]
 8007072:	4620      	mov	r0, r4
 8007074:	f000 f81c 	bl	80070b0 <__sfp>
 8007078:	60a0      	str	r0, [r4, #8]
 800707a:	4620      	mov	r0, r4
 800707c:	f000 f818 	bl	80070b0 <__sfp>
 8007080:	2200      	movs	r2, #0
 8007082:	60e0      	str	r0, [r4, #12]
 8007084:	2104      	movs	r1, #4
 8007086:	6860      	ldr	r0, [r4, #4]
 8007088:	f7ff ff82 	bl	8006f90 <std>
 800708c:	68a0      	ldr	r0, [r4, #8]
 800708e:	2201      	movs	r2, #1
 8007090:	2109      	movs	r1, #9
 8007092:	f7ff ff7d 	bl	8006f90 <std>
 8007096:	68e0      	ldr	r0, [r4, #12]
 8007098:	2202      	movs	r2, #2
 800709a:	2112      	movs	r1, #18
 800709c:	f7ff ff78 	bl	8006f90 <std>
 80070a0:	2301      	movs	r3, #1
 80070a2:	61a3      	str	r3, [r4, #24]
 80070a4:	e7d2      	b.n	800704c <__sinit+0xc>
 80070a6:	bf00      	nop
 80070a8:	08008e44 	.word	0x08008e44
 80070ac:	08006fd9 	.word	0x08006fd9

080070b0 <__sfp>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	4607      	mov	r7, r0
 80070b4:	f7ff ffac 	bl	8007010 <__sfp_lock_acquire>
 80070b8:	4b1e      	ldr	r3, [pc, #120]	; (8007134 <__sfp+0x84>)
 80070ba:	681e      	ldr	r6, [r3, #0]
 80070bc:	69b3      	ldr	r3, [r6, #24]
 80070be:	b913      	cbnz	r3, 80070c6 <__sfp+0x16>
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff ffbd 	bl	8007040 <__sinit>
 80070c6:	3648      	adds	r6, #72	; 0x48
 80070c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	d503      	bpl.n	80070d8 <__sfp+0x28>
 80070d0:	6833      	ldr	r3, [r6, #0]
 80070d2:	b30b      	cbz	r3, 8007118 <__sfp+0x68>
 80070d4:	6836      	ldr	r6, [r6, #0]
 80070d6:	e7f7      	b.n	80070c8 <__sfp+0x18>
 80070d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070dc:	b9d5      	cbnz	r5, 8007114 <__sfp+0x64>
 80070de:	4b16      	ldr	r3, [pc, #88]	; (8007138 <__sfp+0x88>)
 80070e0:	60e3      	str	r3, [r4, #12]
 80070e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070e6:	6665      	str	r5, [r4, #100]	; 0x64
 80070e8:	f000 fbba 	bl	8007860 <__retarget_lock_init_recursive>
 80070ec:	f7ff ff96 	bl	800701c <__sfp_lock_release>
 80070f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070f8:	6025      	str	r5, [r4, #0]
 80070fa:	61a5      	str	r5, [r4, #24]
 80070fc:	2208      	movs	r2, #8
 80070fe:	4629      	mov	r1, r5
 8007100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007104:	f7fd f97e 	bl	8004404 <memset>
 8007108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800710c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007110:	4620      	mov	r0, r4
 8007112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007114:	3468      	adds	r4, #104	; 0x68
 8007116:	e7d9      	b.n	80070cc <__sfp+0x1c>
 8007118:	2104      	movs	r1, #4
 800711a:	4638      	mov	r0, r7
 800711c:	f7ff ff62 	bl	8006fe4 <__sfmoreglue>
 8007120:	4604      	mov	r4, r0
 8007122:	6030      	str	r0, [r6, #0]
 8007124:	2800      	cmp	r0, #0
 8007126:	d1d5      	bne.n	80070d4 <__sfp+0x24>
 8007128:	f7ff ff78 	bl	800701c <__sfp_lock_release>
 800712c:	230c      	movs	r3, #12
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	e7ee      	b.n	8007110 <__sfp+0x60>
 8007132:	bf00      	nop
 8007134:	08008e44 	.word	0x08008e44
 8007138:	ffff0001 	.word	0xffff0001

0800713c <_fwalk_reent>:
 800713c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007140:	4606      	mov	r6, r0
 8007142:	4688      	mov	r8, r1
 8007144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007148:	2700      	movs	r7, #0
 800714a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800714e:	f1b9 0901 	subs.w	r9, r9, #1
 8007152:	d505      	bpl.n	8007160 <_fwalk_reent+0x24>
 8007154:	6824      	ldr	r4, [r4, #0]
 8007156:	2c00      	cmp	r4, #0
 8007158:	d1f7      	bne.n	800714a <_fwalk_reent+0xe>
 800715a:	4638      	mov	r0, r7
 800715c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007160:	89ab      	ldrh	r3, [r5, #12]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d907      	bls.n	8007176 <_fwalk_reent+0x3a>
 8007166:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800716a:	3301      	adds	r3, #1
 800716c:	d003      	beq.n	8007176 <_fwalk_reent+0x3a>
 800716e:	4629      	mov	r1, r5
 8007170:	4630      	mov	r0, r6
 8007172:	47c0      	blx	r8
 8007174:	4307      	orrs	r7, r0
 8007176:	3568      	adds	r5, #104	; 0x68
 8007178:	e7e9      	b.n	800714e <_fwalk_reent+0x12>

0800717a <rshift>:
 800717a:	6903      	ldr	r3, [r0, #16]
 800717c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007184:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007188:	f100 0414 	add.w	r4, r0, #20
 800718c:	dd45      	ble.n	800721a <rshift+0xa0>
 800718e:	f011 011f 	ands.w	r1, r1, #31
 8007192:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007196:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800719a:	d10c      	bne.n	80071b6 <rshift+0x3c>
 800719c:	f100 0710 	add.w	r7, r0, #16
 80071a0:	4629      	mov	r1, r5
 80071a2:	42b1      	cmp	r1, r6
 80071a4:	d334      	bcc.n	8007210 <rshift+0x96>
 80071a6:	1a9b      	subs	r3, r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	1eea      	subs	r2, r5, #3
 80071ac:	4296      	cmp	r6, r2
 80071ae:	bf38      	it	cc
 80071b0:	2300      	movcc	r3, #0
 80071b2:	4423      	add	r3, r4
 80071b4:	e015      	b.n	80071e2 <rshift+0x68>
 80071b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80071ba:	f1c1 0820 	rsb	r8, r1, #32
 80071be:	40cf      	lsrs	r7, r1
 80071c0:	f105 0e04 	add.w	lr, r5, #4
 80071c4:	46a1      	mov	r9, r4
 80071c6:	4576      	cmp	r6, lr
 80071c8:	46f4      	mov	ip, lr
 80071ca:	d815      	bhi.n	80071f8 <rshift+0x7e>
 80071cc:	1a9a      	subs	r2, r3, r2
 80071ce:	0092      	lsls	r2, r2, #2
 80071d0:	3a04      	subs	r2, #4
 80071d2:	3501      	adds	r5, #1
 80071d4:	42ae      	cmp	r6, r5
 80071d6:	bf38      	it	cc
 80071d8:	2200      	movcc	r2, #0
 80071da:	18a3      	adds	r3, r4, r2
 80071dc:	50a7      	str	r7, [r4, r2]
 80071de:	b107      	cbz	r7, 80071e2 <rshift+0x68>
 80071e0:	3304      	adds	r3, #4
 80071e2:	1b1a      	subs	r2, r3, r4
 80071e4:	42a3      	cmp	r3, r4
 80071e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80071ea:	bf08      	it	eq
 80071ec:	2300      	moveq	r3, #0
 80071ee:	6102      	str	r2, [r0, #16]
 80071f0:	bf08      	it	eq
 80071f2:	6143      	streq	r3, [r0, #20]
 80071f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071f8:	f8dc c000 	ldr.w	ip, [ip]
 80071fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8007200:	ea4c 0707 	orr.w	r7, ip, r7
 8007204:	f849 7b04 	str.w	r7, [r9], #4
 8007208:	f85e 7b04 	ldr.w	r7, [lr], #4
 800720c:	40cf      	lsrs	r7, r1
 800720e:	e7da      	b.n	80071c6 <rshift+0x4c>
 8007210:	f851 cb04 	ldr.w	ip, [r1], #4
 8007214:	f847 cf04 	str.w	ip, [r7, #4]!
 8007218:	e7c3      	b.n	80071a2 <rshift+0x28>
 800721a:	4623      	mov	r3, r4
 800721c:	e7e1      	b.n	80071e2 <rshift+0x68>

0800721e <__hexdig_fun>:
 800721e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007222:	2b09      	cmp	r3, #9
 8007224:	d802      	bhi.n	800722c <__hexdig_fun+0xe>
 8007226:	3820      	subs	r0, #32
 8007228:	b2c0      	uxtb	r0, r0
 800722a:	4770      	bx	lr
 800722c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007230:	2b05      	cmp	r3, #5
 8007232:	d801      	bhi.n	8007238 <__hexdig_fun+0x1a>
 8007234:	3847      	subs	r0, #71	; 0x47
 8007236:	e7f7      	b.n	8007228 <__hexdig_fun+0xa>
 8007238:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800723c:	2b05      	cmp	r3, #5
 800723e:	d801      	bhi.n	8007244 <__hexdig_fun+0x26>
 8007240:	3827      	subs	r0, #39	; 0x27
 8007242:	e7f1      	b.n	8007228 <__hexdig_fun+0xa>
 8007244:	2000      	movs	r0, #0
 8007246:	4770      	bx	lr

08007248 <__gethex>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	ed2d 8b02 	vpush	{d8}
 8007250:	b089      	sub	sp, #36	; 0x24
 8007252:	ee08 0a10 	vmov	s16, r0
 8007256:	9304      	str	r3, [sp, #16]
 8007258:	4bb4      	ldr	r3, [pc, #720]	; (800752c <__gethex+0x2e4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	4618      	mov	r0, r3
 8007260:	468b      	mov	fp, r1
 8007262:	4690      	mov	r8, r2
 8007264:	f7f8 ffb4 	bl	80001d0 <strlen>
 8007268:	9b01      	ldr	r3, [sp, #4]
 800726a:	f8db 2000 	ldr.w	r2, [fp]
 800726e:	4403      	add	r3, r0
 8007270:	4682      	mov	sl, r0
 8007272:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007276:	9305      	str	r3, [sp, #20]
 8007278:	1c93      	adds	r3, r2, #2
 800727a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800727e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007282:	32fe      	adds	r2, #254	; 0xfe
 8007284:	18d1      	adds	r1, r2, r3
 8007286:	461f      	mov	r7, r3
 8007288:	f813 0b01 	ldrb.w	r0, [r3], #1
 800728c:	9100      	str	r1, [sp, #0]
 800728e:	2830      	cmp	r0, #48	; 0x30
 8007290:	d0f8      	beq.n	8007284 <__gethex+0x3c>
 8007292:	f7ff ffc4 	bl	800721e <__hexdig_fun>
 8007296:	4604      	mov	r4, r0
 8007298:	2800      	cmp	r0, #0
 800729a:	d13a      	bne.n	8007312 <__gethex+0xca>
 800729c:	9901      	ldr	r1, [sp, #4]
 800729e:	4652      	mov	r2, sl
 80072a0:	4638      	mov	r0, r7
 80072a2:	f001 fadc 	bl	800885e <strncmp>
 80072a6:	4605      	mov	r5, r0
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d168      	bne.n	800737e <__gethex+0x136>
 80072ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 80072b0:	eb07 060a 	add.w	r6, r7, sl
 80072b4:	f7ff ffb3 	bl	800721e <__hexdig_fun>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d062      	beq.n	8007382 <__gethex+0x13a>
 80072bc:	4633      	mov	r3, r6
 80072be:	7818      	ldrb	r0, [r3, #0]
 80072c0:	2830      	cmp	r0, #48	; 0x30
 80072c2:	461f      	mov	r7, r3
 80072c4:	f103 0301 	add.w	r3, r3, #1
 80072c8:	d0f9      	beq.n	80072be <__gethex+0x76>
 80072ca:	f7ff ffa8 	bl	800721e <__hexdig_fun>
 80072ce:	2301      	movs	r3, #1
 80072d0:	fab0 f480 	clz	r4, r0
 80072d4:	0964      	lsrs	r4, r4, #5
 80072d6:	4635      	mov	r5, r6
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	463a      	mov	r2, r7
 80072dc:	4616      	mov	r6, r2
 80072de:	3201      	adds	r2, #1
 80072e0:	7830      	ldrb	r0, [r6, #0]
 80072e2:	f7ff ff9c 	bl	800721e <__hexdig_fun>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d1f8      	bne.n	80072dc <__gethex+0x94>
 80072ea:	9901      	ldr	r1, [sp, #4]
 80072ec:	4652      	mov	r2, sl
 80072ee:	4630      	mov	r0, r6
 80072f0:	f001 fab5 	bl	800885e <strncmp>
 80072f4:	b980      	cbnz	r0, 8007318 <__gethex+0xd0>
 80072f6:	b94d      	cbnz	r5, 800730c <__gethex+0xc4>
 80072f8:	eb06 050a 	add.w	r5, r6, sl
 80072fc:	462a      	mov	r2, r5
 80072fe:	4616      	mov	r6, r2
 8007300:	3201      	adds	r2, #1
 8007302:	7830      	ldrb	r0, [r6, #0]
 8007304:	f7ff ff8b 	bl	800721e <__hexdig_fun>
 8007308:	2800      	cmp	r0, #0
 800730a:	d1f8      	bne.n	80072fe <__gethex+0xb6>
 800730c:	1bad      	subs	r5, r5, r6
 800730e:	00ad      	lsls	r5, r5, #2
 8007310:	e004      	b.n	800731c <__gethex+0xd4>
 8007312:	2400      	movs	r4, #0
 8007314:	4625      	mov	r5, r4
 8007316:	e7e0      	b.n	80072da <__gethex+0x92>
 8007318:	2d00      	cmp	r5, #0
 800731a:	d1f7      	bne.n	800730c <__gethex+0xc4>
 800731c:	7833      	ldrb	r3, [r6, #0]
 800731e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007322:	2b50      	cmp	r3, #80	; 0x50
 8007324:	d13b      	bne.n	800739e <__gethex+0x156>
 8007326:	7873      	ldrb	r3, [r6, #1]
 8007328:	2b2b      	cmp	r3, #43	; 0x2b
 800732a:	d02c      	beq.n	8007386 <__gethex+0x13e>
 800732c:	2b2d      	cmp	r3, #45	; 0x2d
 800732e:	d02e      	beq.n	800738e <__gethex+0x146>
 8007330:	1c71      	adds	r1, r6, #1
 8007332:	f04f 0900 	mov.w	r9, #0
 8007336:	7808      	ldrb	r0, [r1, #0]
 8007338:	f7ff ff71 	bl	800721e <__hexdig_fun>
 800733c:	1e43      	subs	r3, r0, #1
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b18      	cmp	r3, #24
 8007342:	d82c      	bhi.n	800739e <__gethex+0x156>
 8007344:	f1a0 0210 	sub.w	r2, r0, #16
 8007348:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800734c:	f7ff ff67 	bl	800721e <__hexdig_fun>
 8007350:	1e43      	subs	r3, r0, #1
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b18      	cmp	r3, #24
 8007356:	d91d      	bls.n	8007394 <__gethex+0x14c>
 8007358:	f1b9 0f00 	cmp.w	r9, #0
 800735c:	d000      	beq.n	8007360 <__gethex+0x118>
 800735e:	4252      	negs	r2, r2
 8007360:	4415      	add	r5, r2
 8007362:	f8cb 1000 	str.w	r1, [fp]
 8007366:	b1e4      	cbz	r4, 80073a2 <__gethex+0x15a>
 8007368:	9b00      	ldr	r3, [sp, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	bf14      	ite	ne
 800736e:	2700      	movne	r7, #0
 8007370:	2706      	moveq	r7, #6
 8007372:	4638      	mov	r0, r7
 8007374:	b009      	add	sp, #36	; 0x24
 8007376:	ecbd 8b02 	vpop	{d8}
 800737a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737e:	463e      	mov	r6, r7
 8007380:	4625      	mov	r5, r4
 8007382:	2401      	movs	r4, #1
 8007384:	e7ca      	b.n	800731c <__gethex+0xd4>
 8007386:	f04f 0900 	mov.w	r9, #0
 800738a:	1cb1      	adds	r1, r6, #2
 800738c:	e7d3      	b.n	8007336 <__gethex+0xee>
 800738e:	f04f 0901 	mov.w	r9, #1
 8007392:	e7fa      	b.n	800738a <__gethex+0x142>
 8007394:	230a      	movs	r3, #10
 8007396:	fb03 0202 	mla	r2, r3, r2, r0
 800739a:	3a10      	subs	r2, #16
 800739c:	e7d4      	b.n	8007348 <__gethex+0x100>
 800739e:	4631      	mov	r1, r6
 80073a0:	e7df      	b.n	8007362 <__gethex+0x11a>
 80073a2:	1bf3      	subs	r3, r6, r7
 80073a4:	3b01      	subs	r3, #1
 80073a6:	4621      	mov	r1, r4
 80073a8:	2b07      	cmp	r3, #7
 80073aa:	dc0b      	bgt.n	80073c4 <__gethex+0x17c>
 80073ac:	ee18 0a10 	vmov	r0, s16
 80073b0:	f000 fae6 	bl	8007980 <_Balloc>
 80073b4:	4604      	mov	r4, r0
 80073b6:	b940      	cbnz	r0, 80073ca <__gethex+0x182>
 80073b8:	4b5d      	ldr	r3, [pc, #372]	; (8007530 <__gethex+0x2e8>)
 80073ba:	4602      	mov	r2, r0
 80073bc:	21de      	movs	r1, #222	; 0xde
 80073be:	485d      	ldr	r0, [pc, #372]	; (8007534 <__gethex+0x2ec>)
 80073c0:	f001 fa80 	bl	80088c4 <__assert_func>
 80073c4:	3101      	adds	r1, #1
 80073c6:	105b      	asrs	r3, r3, #1
 80073c8:	e7ee      	b.n	80073a8 <__gethex+0x160>
 80073ca:	f100 0914 	add.w	r9, r0, #20
 80073ce:	f04f 0b00 	mov.w	fp, #0
 80073d2:	f1ca 0301 	rsb	r3, sl, #1
 80073d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80073da:	f8cd b000 	str.w	fp, [sp]
 80073de:	9306      	str	r3, [sp, #24]
 80073e0:	42b7      	cmp	r7, r6
 80073e2:	d340      	bcc.n	8007466 <__gethex+0x21e>
 80073e4:	9802      	ldr	r0, [sp, #8]
 80073e6:	9b00      	ldr	r3, [sp, #0]
 80073e8:	f840 3b04 	str.w	r3, [r0], #4
 80073ec:	eba0 0009 	sub.w	r0, r0, r9
 80073f0:	1080      	asrs	r0, r0, #2
 80073f2:	0146      	lsls	r6, r0, #5
 80073f4:	6120      	str	r0, [r4, #16]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fbb4 	bl	8007b64 <__hi0bits>
 80073fc:	1a30      	subs	r0, r6, r0
 80073fe:	f8d8 6000 	ldr.w	r6, [r8]
 8007402:	42b0      	cmp	r0, r6
 8007404:	dd63      	ble.n	80074ce <__gethex+0x286>
 8007406:	1b87      	subs	r7, r0, r6
 8007408:	4639      	mov	r1, r7
 800740a:	4620      	mov	r0, r4
 800740c:	f000 ff58 	bl	80082c0 <__any_on>
 8007410:	4682      	mov	sl, r0
 8007412:	b1a8      	cbz	r0, 8007440 <__gethex+0x1f8>
 8007414:	1e7b      	subs	r3, r7, #1
 8007416:	1159      	asrs	r1, r3, #5
 8007418:	f003 021f 	and.w	r2, r3, #31
 800741c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007420:	f04f 0a01 	mov.w	sl, #1
 8007424:	fa0a f202 	lsl.w	r2, sl, r2
 8007428:	420a      	tst	r2, r1
 800742a:	d009      	beq.n	8007440 <__gethex+0x1f8>
 800742c:	4553      	cmp	r3, sl
 800742e:	dd05      	ble.n	800743c <__gethex+0x1f4>
 8007430:	1eb9      	subs	r1, r7, #2
 8007432:	4620      	mov	r0, r4
 8007434:	f000 ff44 	bl	80082c0 <__any_on>
 8007438:	2800      	cmp	r0, #0
 800743a:	d145      	bne.n	80074c8 <__gethex+0x280>
 800743c:	f04f 0a02 	mov.w	sl, #2
 8007440:	4639      	mov	r1, r7
 8007442:	4620      	mov	r0, r4
 8007444:	f7ff fe99 	bl	800717a <rshift>
 8007448:	443d      	add	r5, r7
 800744a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800744e:	42ab      	cmp	r3, r5
 8007450:	da4c      	bge.n	80074ec <__gethex+0x2a4>
 8007452:	ee18 0a10 	vmov	r0, s16
 8007456:	4621      	mov	r1, r4
 8007458:	f000 fad2 	bl	8007a00 <_Bfree>
 800745c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800745e:	2300      	movs	r3, #0
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	27a3      	movs	r7, #163	; 0xa3
 8007464:	e785      	b.n	8007372 <__gethex+0x12a>
 8007466:	1e73      	subs	r3, r6, #1
 8007468:	9a05      	ldr	r2, [sp, #20]
 800746a:	9303      	str	r3, [sp, #12]
 800746c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007470:	4293      	cmp	r3, r2
 8007472:	d019      	beq.n	80074a8 <__gethex+0x260>
 8007474:	f1bb 0f20 	cmp.w	fp, #32
 8007478:	d107      	bne.n	800748a <__gethex+0x242>
 800747a:	9b02      	ldr	r3, [sp, #8]
 800747c:	9a00      	ldr	r2, [sp, #0]
 800747e:	f843 2b04 	str.w	r2, [r3], #4
 8007482:	9302      	str	r3, [sp, #8]
 8007484:	2300      	movs	r3, #0
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	469b      	mov	fp, r3
 800748a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800748e:	f7ff fec6 	bl	800721e <__hexdig_fun>
 8007492:	9b00      	ldr	r3, [sp, #0]
 8007494:	f000 000f 	and.w	r0, r0, #15
 8007498:	fa00 f00b 	lsl.w	r0, r0, fp
 800749c:	4303      	orrs	r3, r0
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	f10b 0b04 	add.w	fp, fp, #4
 80074a4:	9b03      	ldr	r3, [sp, #12]
 80074a6:	e00d      	b.n	80074c4 <__gethex+0x27c>
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	9a06      	ldr	r2, [sp, #24]
 80074ac:	4413      	add	r3, r2
 80074ae:	42bb      	cmp	r3, r7
 80074b0:	d3e0      	bcc.n	8007474 <__gethex+0x22c>
 80074b2:	4618      	mov	r0, r3
 80074b4:	9901      	ldr	r1, [sp, #4]
 80074b6:	9307      	str	r3, [sp, #28]
 80074b8:	4652      	mov	r2, sl
 80074ba:	f001 f9d0 	bl	800885e <strncmp>
 80074be:	9b07      	ldr	r3, [sp, #28]
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d1d7      	bne.n	8007474 <__gethex+0x22c>
 80074c4:	461e      	mov	r6, r3
 80074c6:	e78b      	b.n	80073e0 <__gethex+0x198>
 80074c8:	f04f 0a03 	mov.w	sl, #3
 80074cc:	e7b8      	b.n	8007440 <__gethex+0x1f8>
 80074ce:	da0a      	bge.n	80074e6 <__gethex+0x29e>
 80074d0:	1a37      	subs	r7, r6, r0
 80074d2:	4621      	mov	r1, r4
 80074d4:	ee18 0a10 	vmov	r0, s16
 80074d8:	463a      	mov	r2, r7
 80074da:	f000 fcad 	bl	8007e38 <__lshift>
 80074de:	1bed      	subs	r5, r5, r7
 80074e0:	4604      	mov	r4, r0
 80074e2:	f100 0914 	add.w	r9, r0, #20
 80074e6:	f04f 0a00 	mov.w	sl, #0
 80074ea:	e7ae      	b.n	800744a <__gethex+0x202>
 80074ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80074f0:	42a8      	cmp	r0, r5
 80074f2:	dd72      	ble.n	80075da <__gethex+0x392>
 80074f4:	1b45      	subs	r5, r0, r5
 80074f6:	42ae      	cmp	r6, r5
 80074f8:	dc36      	bgt.n	8007568 <__gethex+0x320>
 80074fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d02a      	beq.n	8007558 <__gethex+0x310>
 8007502:	2b03      	cmp	r3, #3
 8007504:	d02c      	beq.n	8007560 <__gethex+0x318>
 8007506:	2b01      	cmp	r3, #1
 8007508:	d11c      	bne.n	8007544 <__gethex+0x2fc>
 800750a:	42ae      	cmp	r6, r5
 800750c:	d11a      	bne.n	8007544 <__gethex+0x2fc>
 800750e:	2e01      	cmp	r6, #1
 8007510:	d112      	bne.n	8007538 <__gethex+0x2f0>
 8007512:	9a04      	ldr	r2, [sp, #16]
 8007514:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	2301      	movs	r3, #1
 800751c:	6123      	str	r3, [r4, #16]
 800751e:	f8c9 3000 	str.w	r3, [r9]
 8007522:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007524:	2762      	movs	r7, #98	; 0x62
 8007526:	601c      	str	r4, [r3, #0]
 8007528:	e723      	b.n	8007372 <__gethex+0x12a>
 800752a:	bf00      	nop
 800752c:	08009134 	.word	0x08009134
 8007530:	08009058 	.word	0x08009058
 8007534:	080090cc 	.word	0x080090cc
 8007538:	1e71      	subs	r1, r6, #1
 800753a:	4620      	mov	r0, r4
 800753c:	f000 fec0 	bl	80082c0 <__any_on>
 8007540:	2800      	cmp	r0, #0
 8007542:	d1e6      	bne.n	8007512 <__gethex+0x2ca>
 8007544:	ee18 0a10 	vmov	r0, s16
 8007548:	4621      	mov	r1, r4
 800754a:	f000 fa59 	bl	8007a00 <_Bfree>
 800754e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007550:	2300      	movs	r3, #0
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	2750      	movs	r7, #80	; 0x50
 8007556:	e70c      	b.n	8007372 <__gethex+0x12a>
 8007558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f2      	bne.n	8007544 <__gethex+0x2fc>
 800755e:	e7d8      	b.n	8007512 <__gethex+0x2ca>
 8007560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1d5      	bne.n	8007512 <__gethex+0x2ca>
 8007566:	e7ed      	b.n	8007544 <__gethex+0x2fc>
 8007568:	1e6f      	subs	r7, r5, #1
 800756a:	f1ba 0f00 	cmp.w	sl, #0
 800756e:	d131      	bne.n	80075d4 <__gethex+0x38c>
 8007570:	b127      	cbz	r7, 800757c <__gethex+0x334>
 8007572:	4639      	mov	r1, r7
 8007574:	4620      	mov	r0, r4
 8007576:	f000 fea3 	bl	80082c0 <__any_on>
 800757a:	4682      	mov	sl, r0
 800757c:	117b      	asrs	r3, r7, #5
 800757e:	2101      	movs	r1, #1
 8007580:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007584:	f007 071f 	and.w	r7, r7, #31
 8007588:	fa01 f707 	lsl.w	r7, r1, r7
 800758c:	421f      	tst	r7, r3
 800758e:	4629      	mov	r1, r5
 8007590:	4620      	mov	r0, r4
 8007592:	bf18      	it	ne
 8007594:	f04a 0a02 	orrne.w	sl, sl, #2
 8007598:	1b76      	subs	r6, r6, r5
 800759a:	f7ff fdee 	bl	800717a <rshift>
 800759e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80075a2:	2702      	movs	r7, #2
 80075a4:	f1ba 0f00 	cmp.w	sl, #0
 80075a8:	d048      	beq.n	800763c <__gethex+0x3f4>
 80075aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d015      	beq.n	80075de <__gethex+0x396>
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d017      	beq.n	80075e6 <__gethex+0x39e>
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d109      	bne.n	80075ce <__gethex+0x386>
 80075ba:	f01a 0f02 	tst.w	sl, #2
 80075be:	d006      	beq.n	80075ce <__gethex+0x386>
 80075c0:	f8d9 0000 	ldr.w	r0, [r9]
 80075c4:	ea4a 0a00 	orr.w	sl, sl, r0
 80075c8:	f01a 0f01 	tst.w	sl, #1
 80075cc:	d10e      	bne.n	80075ec <__gethex+0x3a4>
 80075ce:	f047 0710 	orr.w	r7, r7, #16
 80075d2:	e033      	b.n	800763c <__gethex+0x3f4>
 80075d4:	f04f 0a01 	mov.w	sl, #1
 80075d8:	e7d0      	b.n	800757c <__gethex+0x334>
 80075da:	2701      	movs	r7, #1
 80075dc:	e7e2      	b.n	80075a4 <__gethex+0x35c>
 80075de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075e0:	f1c3 0301 	rsb	r3, r3, #1
 80075e4:	9315      	str	r3, [sp, #84]	; 0x54
 80075e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0f0      	beq.n	80075ce <__gethex+0x386>
 80075ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80075f0:	f104 0314 	add.w	r3, r4, #20
 80075f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80075f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80075fc:	f04f 0c00 	mov.w	ip, #0
 8007600:	4618      	mov	r0, r3
 8007602:	f853 2b04 	ldr.w	r2, [r3], #4
 8007606:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800760a:	d01c      	beq.n	8007646 <__gethex+0x3fe>
 800760c:	3201      	adds	r2, #1
 800760e:	6002      	str	r2, [r0, #0]
 8007610:	2f02      	cmp	r7, #2
 8007612:	f104 0314 	add.w	r3, r4, #20
 8007616:	d13f      	bne.n	8007698 <__gethex+0x450>
 8007618:	f8d8 2000 	ldr.w	r2, [r8]
 800761c:	3a01      	subs	r2, #1
 800761e:	42b2      	cmp	r2, r6
 8007620:	d10a      	bne.n	8007638 <__gethex+0x3f0>
 8007622:	1171      	asrs	r1, r6, #5
 8007624:	2201      	movs	r2, #1
 8007626:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800762a:	f006 061f 	and.w	r6, r6, #31
 800762e:	fa02 f606 	lsl.w	r6, r2, r6
 8007632:	421e      	tst	r6, r3
 8007634:	bf18      	it	ne
 8007636:	4617      	movne	r7, r2
 8007638:	f047 0720 	orr.w	r7, r7, #32
 800763c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800763e:	601c      	str	r4, [r3, #0]
 8007640:	9b04      	ldr	r3, [sp, #16]
 8007642:	601d      	str	r5, [r3, #0]
 8007644:	e695      	b.n	8007372 <__gethex+0x12a>
 8007646:	4299      	cmp	r1, r3
 8007648:	f843 cc04 	str.w	ip, [r3, #-4]
 800764c:	d8d8      	bhi.n	8007600 <__gethex+0x3b8>
 800764e:	68a3      	ldr	r3, [r4, #8]
 8007650:	459b      	cmp	fp, r3
 8007652:	db19      	blt.n	8007688 <__gethex+0x440>
 8007654:	6861      	ldr	r1, [r4, #4]
 8007656:	ee18 0a10 	vmov	r0, s16
 800765a:	3101      	adds	r1, #1
 800765c:	f000 f990 	bl	8007980 <_Balloc>
 8007660:	4681      	mov	r9, r0
 8007662:	b918      	cbnz	r0, 800766c <__gethex+0x424>
 8007664:	4b1a      	ldr	r3, [pc, #104]	; (80076d0 <__gethex+0x488>)
 8007666:	4602      	mov	r2, r0
 8007668:	2184      	movs	r1, #132	; 0x84
 800766a:	e6a8      	b.n	80073be <__gethex+0x176>
 800766c:	6922      	ldr	r2, [r4, #16]
 800766e:	3202      	adds	r2, #2
 8007670:	f104 010c 	add.w	r1, r4, #12
 8007674:	0092      	lsls	r2, r2, #2
 8007676:	300c      	adds	r0, #12
 8007678:	f000 f974 	bl	8007964 <memcpy>
 800767c:	4621      	mov	r1, r4
 800767e:	ee18 0a10 	vmov	r0, s16
 8007682:	f000 f9bd 	bl	8007a00 <_Bfree>
 8007686:	464c      	mov	r4, r9
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007690:	6122      	str	r2, [r4, #16]
 8007692:	2201      	movs	r2, #1
 8007694:	615a      	str	r2, [r3, #20]
 8007696:	e7bb      	b.n	8007610 <__gethex+0x3c8>
 8007698:	6922      	ldr	r2, [r4, #16]
 800769a:	455a      	cmp	r2, fp
 800769c:	dd0b      	ble.n	80076b6 <__gethex+0x46e>
 800769e:	2101      	movs	r1, #1
 80076a0:	4620      	mov	r0, r4
 80076a2:	f7ff fd6a 	bl	800717a <rshift>
 80076a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076aa:	3501      	adds	r5, #1
 80076ac:	42ab      	cmp	r3, r5
 80076ae:	f6ff aed0 	blt.w	8007452 <__gethex+0x20a>
 80076b2:	2701      	movs	r7, #1
 80076b4:	e7c0      	b.n	8007638 <__gethex+0x3f0>
 80076b6:	f016 061f 	ands.w	r6, r6, #31
 80076ba:	d0fa      	beq.n	80076b2 <__gethex+0x46a>
 80076bc:	4453      	add	r3, sl
 80076be:	f1c6 0620 	rsb	r6, r6, #32
 80076c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80076c6:	f000 fa4d 	bl	8007b64 <__hi0bits>
 80076ca:	42b0      	cmp	r0, r6
 80076cc:	dbe7      	blt.n	800769e <__gethex+0x456>
 80076ce:	e7f0      	b.n	80076b2 <__gethex+0x46a>
 80076d0:	08009058 	.word	0x08009058

080076d4 <L_shift>:
 80076d4:	f1c2 0208 	rsb	r2, r2, #8
 80076d8:	0092      	lsls	r2, r2, #2
 80076da:	b570      	push	{r4, r5, r6, lr}
 80076dc:	f1c2 0620 	rsb	r6, r2, #32
 80076e0:	6843      	ldr	r3, [r0, #4]
 80076e2:	6804      	ldr	r4, [r0, #0]
 80076e4:	fa03 f506 	lsl.w	r5, r3, r6
 80076e8:	432c      	orrs	r4, r5
 80076ea:	40d3      	lsrs	r3, r2
 80076ec:	6004      	str	r4, [r0, #0]
 80076ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80076f2:	4288      	cmp	r0, r1
 80076f4:	d3f4      	bcc.n	80076e0 <L_shift+0xc>
 80076f6:	bd70      	pop	{r4, r5, r6, pc}

080076f8 <__match>:
 80076f8:	b530      	push	{r4, r5, lr}
 80076fa:	6803      	ldr	r3, [r0, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007702:	b914      	cbnz	r4, 800770a <__match+0x12>
 8007704:	6003      	str	r3, [r0, #0]
 8007706:	2001      	movs	r0, #1
 8007708:	bd30      	pop	{r4, r5, pc}
 800770a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800770e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007712:	2d19      	cmp	r5, #25
 8007714:	bf98      	it	ls
 8007716:	3220      	addls	r2, #32
 8007718:	42a2      	cmp	r2, r4
 800771a:	d0f0      	beq.n	80076fe <__match+0x6>
 800771c:	2000      	movs	r0, #0
 800771e:	e7f3      	b.n	8007708 <__match+0x10>

08007720 <__hexnan>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	680b      	ldr	r3, [r1, #0]
 8007726:	115e      	asrs	r6, r3, #5
 8007728:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800772c:	f013 031f 	ands.w	r3, r3, #31
 8007730:	b087      	sub	sp, #28
 8007732:	bf18      	it	ne
 8007734:	3604      	addne	r6, #4
 8007736:	2500      	movs	r5, #0
 8007738:	1f37      	subs	r7, r6, #4
 800773a:	4690      	mov	r8, r2
 800773c:	6802      	ldr	r2, [r0, #0]
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	4682      	mov	sl, r0
 8007742:	f846 5c04 	str.w	r5, [r6, #-4]
 8007746:	46b9      	mov	r9, r7
 8007748:	463c      	mov	r4, r7
 800774a:	9502      	str	r5, [sp, #8]
 800774c:	46ab      	mov	fp, r5
 800774e:	7851      	ldrb	r1, [r2, #1]
 8007750:	1c53      	adds	r3, r2, #1
 8007752:	9303      	str	r3, [sp, #12]
 8007754:	b341      	cbz	r1, 80077a8 <__hexnan+0x88>
 8007756:	4608      	mov	r0, r1
 8007758:	9205      	str	r2, [sp, #20]
 800775a:	9104      	str	r1, [sp, #16]
 800775c:	f7ff fd5f 	bl	800721e <__hexdig_fun>
 8007760:	2800      	cmp	r0, #0
 8007762:	d14f      	bne.n	8007804 <__hexnan+0xe4>
 8007764:	9904      	ldr	r1, [sp, #16]
 8007766:	9a05      	ldr	r2, [sp, #20]
 8007768:	2920      	cmp	r1, #32
 800776a:	d818      	bhi.n	800779e <__hexnan+0x7e>
 800776c:	9b02      	ldr	r3, [sp, #8]
 800776e:	459b      	cmp	fp, r3
 8007770:	dd13      	ble.n	800779a <__hexnan+0x7a>
 8007772:	454c      	cmp	r4, r9
 8007774:	d206      	bcs.n	8007784 <__hexnan+0x64>
 8007776:	2d07      	cmp	r5, #7
 8007778:	dc04      	bgt.n	8007784 <__hexnan+0x64>
 800777a:	462a      	mov	r2, r5
 800777c:	4649      	mov	r1, r9
 800777e:	4620      	mov	r0, r4
 8007780:	f7ff ffa8 	bl	80076d4 <L_shift>
 8007784:	4544      	cmp	r4, r8
 8007786:	d950      	bls.n	800782a <__hexnan+0x10a>
 8007788:	2300      	movs	r3, #0
 800778a:	f1a4 0904 	sub.w	r9, r4, #4
 800778e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007792:	f8cd b008 	str.w	fp, [sp, #8]
 8007796:	464c      	mov	r4, r9
 8007798:	461d      	mov	r5, r3
 800779a:	9a03      	ldr	r2, [sp, #12]
 800779c:	e7d7      	b.n	800774e <__hexnan+0x2e>
 800779e:	2929      	cmp	r1, #41	; 0x29
 80077a0:	d156      	bne.n	8007850 <__hexnan+0x130>
 80077a2:	3202      	adds	r2, #2
 80077a4:	f8ca 2000 	str.w	r2, [sl]
 80077a8:	f1bb 0f00 	cmp.w	fp, #0
 80077ac:	d050      	beq.n	8007850 <__hexnan+0x130>
 80077ae:	454c      	cmp	r4, r9
 80077b0:	d206      	bcs.n	80077c0 <__hexnan+0xa0>
 80077b2:	2d07      	cmp	r5, #7
 80077b4:	dc04      	bgt.n	80077c0 <__hexnan+0xa0>
 80077b6:	462a      	mov	r2, r5
 80077b8:	4649      	mov	r1, r9
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7ff ff8a 	bl	80076d4 <L_shift>
 80077c0:	4544      	cmp	r4, r8
 80077c2:	d934      	bls.n	800782e <__hexnan+0x10e>
 80077c4:	f1a8 0204 	sub.w	r2, r8, #4
 80077c8:	4623      	mov	r3, r4
 80077ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80077ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80077d2:	429f      	cmp	r7, r3
 80077d4:	d2f9      	bcs.n	80077ca <__hexnan+0xaa>
 80077d6:	1b3b      	subs	r3, r7, r4
 80077d8:	f023 0303 	bic.w	r3, r3, #3
 80077dc:	3304      	adds	r3, #4
 80077de:	3401      	adds	r4, #1
 80077e0:	3e03      	subs	r6, #3
 80077e2:	42b4      	cmp	r4, r6
 80077e4:	bf88      	it	hi
 80077e6:	2304      	movhi	r3, #4
 80077e8:	4443      	add	r3, r8
 80077ea:	2200      	movs	r2, #0
 80077ec:	f843 2b04 	str.w	r2, [r3], #4
 80077f0:	429f      	cmp	r7, r3
 80077f2:	d2fb      	bcs.n	80077ec <__hexnan+0xcc>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	b91b      	cbnz	r3, 8007800 <__hexnan+0xe0>
 80077f8:	4547      	cmp	r7, r8
 80077fa:	d127      	bne.n	800784c <__hexnan+0x12c>
 80077fc:	2301      	movs	r3, #1
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	2005      	movs	r0, #5
 8007802:	e026      	b.n	8007852 <__hexnan+0x132>
 8007804:	3501      	adds	r5, #1
 8007806:	2d08      	cmp	r5, #8
 8007808:	f10b 0b01 	add.w	fp, fp, #1
 800780c:	dd06      	ble.n	800781c <__hexnan+0xfc>
 800780e:	4544      	cmp	r4, r8
 8007810:	d9c3      	bls.n	800779a <__hexnan+0x7a>
 8007812:	2300      	movs	r3, #0
 8007814:	f844 3c04 	str.w	r3, [r4, #-4]
 8007818:	2501      	movs	r5, #1
 800781a:	3c04      	subs	r4, #4
 800781c:	6822      	ldr	r2, [r4, #0]
 800781e:	f000 000f 	and.w	r0, r0, #15
 8007822:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007826:	6022      	str	r2, [r4, #0]
 8007828:	e7b7      	b.n	800779a <__hexnan+0x7a>
 800782a:	2508      	movs	r5, #8
 800782c:	e7b5      	b.n	800779a <__hexnan+0x7a>
 800782e:	9b01      	ldr	r3, [sp, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d0df      	beq.n	80077f4 <__hexnan+0xd4>
 8007834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007838:	f1c3 0320 	rsb	r3, r3, #32
 800783c:	fa22 f303 	lsr.w	r3, r2, r3
 8007840:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007844:	401a      	ands	r2, r3
 8007846:	f846 2c04 	str.w	r2, [r6, #-4]
 800784a:	e7d3      	b.n	80077f4 <__hexnan+0xd4>
 800784c:	3f04      	subs	r7, #4
 800784e:	e7d1      	b.n	80077f4 <__hexnan+0xd4>
 8007850:	2004      	movs	r0, #4
 8007852:	b007      	add	sp, #28
 8007854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007858 <_localeconv_r>:
 8007858:	4800      	ldr	r0, [pc, #0]	; (800785c <_localeconv_r+0x4>)
 800785a:	4770      	bx	lr
 800785c:	20000164 	.word	0x20000164

08007860 <__retarget_lock_init_recursive>:
 8007860:	4770      	bx	lr

08007862 <__retarget_lock_acquire_recursive>:
 8007862:	4770      	bx	lr

08007864 <__retarget_lock_release_recursive>:
 8007864:	4770      	bx	lr

08007866 <__swhatbuf_r>:
 8007866:	b570      	push	{r4, r5, r6, lr}
 8007868:	460e      	mov	r6, r1
 800786a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800786e:	2900      	cmp	r1, #0
 8007870:	b096      	sub	sp, #88	; 0x58
 8007872:	4614      	mov	r4, r2
 8007874:	461d      	mov	r5, r3
 8007876:	da08      	bge.n	800788a <__swhatbuf_r+0x24>
 8007878:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	602a      	str	r2, [r5, #0]
 8007880:	061a      	lsls	r2, r3, #24
 8007882:	d410      	bmi.n	80078a6 <__swhatbuf_r+0x40>
 8007884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007888:	e00e      	b.n	80078a8 <__swhatbuf_r+0x42>
 800788a:	466a      	mov	r2, sp
 800788c:	f001 f85a 	bl	8008944 <_fstat_r>
 8007890:	2800      	cmp	r0, #0
 8007892:	dbf1      	blt.n	8007878 <__swhatbuf_r+0x12>
 8007894:	9a01      	ldr	r2, [sp, #4]
 8007896:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800789a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800789e:	425a      	negs	r2, r3
 80078a0:	415a      	adcs	r2, r3
 80078a2:	602a      	str	r2, [r5, #0]
 80078a4:	e7ee      	b.n	8007884 <__swhatbuf_r+0x1e>
 80078a6:	2340      	movs	r3, #64	; 0x40
 80078a8:	2000      	movs	r0, #0
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	b016      	add	sp, #88	; 0x58
 80078ae:	bd70      	pop	{r4, r5, r6, pc}

080078b0 <__smakebuf_r>:
 80078b0:	898b      	ldrh	r3, [r1, #12]
 80078b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078b4:	079d      	lsls	r5, r3, #30
 80078b6:	4606      	mov	r6, r0
 80078b8:	460c      	mov	r4, r1
 80078ba:	d507      	bpl.n	80078cc <__smakebuf_r+0x1c>
 80078bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	6123      	str	r3, [r4, #16]
 80078c4:	2301      	movs	r3, #1
 80078c6:	6163      	str	r3, [r4, #20]
 80078c8:	b002      	add	sp, #8
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	ab01      	add	r3, sp, #4
 80078ce:	466a      	mov	r2, sp
 80078d0:	f7ff ffc9 	bl	8007866 <__swhatbuf_r>
 80078d4:	9900      	ldr	r1, [sp, #0]
 80078d6:	4605      	mov	r5, r0
 80078d8:	4630      	mov	r0, r6
 80078da:	f000 fd95 	bl	8008408 <_malloc_r>
 80078de:	b948      	cbnz	r0, 80078f4 <__smakebuf_r+0x44>
 80078e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e4:	059a      	lsls	r2, r3, #22
 80078e6:	d4ef      	bmi.n	80078c8 <__smakebuf_r+0x18>
 80078e8:	f023 0303 	bic.w	r3, r3, #3
 80078ec:	f043 0302 	orr.w	r3, r3, #2
 80078f0:	81a3      	strh	r3, [r4, #12]
 80078f2:	e7e3      	b.n	80078bc <__smakebuf_r+0xc>
 80078f4:	4b0d      	ldr	r3, [pc, #52]	; (800792c <__smakebuf_r+0x7c>)
 80078f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	6020      	str	r0, [r4, #0]
 80078fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007900:	81a3      	strh	r3, [r4, #12]
 8007902:	9b00      	ldr	r3, [sp, #0]
 8007904:	6163      	str	r3, [r4, #20]
 8007906:	9b01      	ldr	r3, [sp, #4]
 8007908:	6120      	str	r0, [r4, #16]
 800790a:	b15b      	cbz	r3, 8007924 <__smakebuf_r+0x74>
 800790c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007910:	4630      	mov	r0, r6
 8007912:	f001 f829 	bl	8008968 <_isatty_r>
 8007916:	b128      	cbz	r0, 8007924 <__smakebuf_r+0x74>
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	f023 0303 	bic.w	r3, r3, #3
 800791e:	f043 0301 	orr.w	r3, r3, #1
 8007922:	81a3      	strh	r3, [r4, #12]
 8007924:	89a0      	ldrh	r0, [r4, #12]
 8007926:	4305      	orrs	r5, r0
 8007928:	81a5      	strh	r5, [r4, #12]
 800792a:	e7cd      	b.n	80078c8 <__smakebuf_r+0x18>
 800792c:	08006fd9 	.word	0x08006fd9

08007930 <malloc>:
 8007930:	4b02      	ldr	r3, [pc, #8]	; (800793c <malloc+0xc>)
 8007932:	4601      	mov	r1, r0
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	f000 bd67 	b.w	8008408 <_malloc_r>
 800793a:	bf00      	nop
 800793c:	2000000c 	.word	0x2000000c

08007940 <__ascii_mbtowc>:
 8007940:	b082      	sub	sp, #8
 8007942:	b901      	cbnz	r1, 8007946 <__ascii_mbtowc+0x6>
 8007944:	a901      	add	r1, sp, #4
 8007946:	b142      	cbz	r2, 800795a <__ascii_mbtowc+0x1a>
 8007948:	b14b      	cbz	r3, 800795e <__ascii_mbtowc+0x1e>
 800794a:	7813      	ldrb	r3, [r2, #0]
 800794c:	600b      	str	r3, [r1, #0]
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	1e10      	subs	r0, r2, #0
 8007952:	bf18      	it	ne
 8007954:	2001      	movne	r0, #1
 8007956:	b002      	add	sp, #8
 8007958:	4770      	bx	lr
 800795a:	4610      	mov	r0, r2
 800795c:	e7fb      	b.n	8007956 <__ascii_mbtowc+0x16>
 800795e:	f06f 0001 	mvn.w	r0, #1
 8007962:	e7f8      	b.n	8007956 <__ascii_mbtowc+0x16>

08007964 <memcpy>:
 8007964:	440a      	add	r2, r1
 8007966:	4291      	cmp	r1, r2
 8007968:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800796c:	d100      	bne.n	8007970 <memcpy+0xc>
 800796e:	4770      	bx	lr
 8007970:	b510      	push	{r4, lr}
 8007972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800797a:	4291      	cmp	r1, r2
 800797c:	d1f9      	bne.n	8007972 <memcpy+0xe>
 800797e:	bd10      	pop	{r4, pc}

08007980 <_Balloc>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	b976      	cbnz	r6, 80079a8 <_Balloc+0x28>
 800798a:	2010      	movs	r0, #16
 800798c:	f7ff ffd0 	bl	8007930 <malloc>
 8007990:	4602      	mov	r2, r0
 8007992:	6260      	str	r0, [r4, #36]	; 0x24
 8007994:	b920      	cbnz	r0, 80079a0 <_Balloc+0x20>
 8007996:	4b18      	ldr	r3, [pc, #96]	; (80079f8 <_Balloc+0x78>)
 8007998:	4818      	ldr	r0, [pc, #96]	; (80079fc <_Balloc+0x7c>)
 800799a:	2166      	movs	r1, #102	; 0x66
 800799c:	f000 ff92 	bl	80088c4 <__assert_func>
 80079a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079a4:	6006      	str	r6, [r0, #0]
 80079a6:	60c6      	str	r6, [r0, #12]
 80079a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079aa:	68f3      	ldr	r3, [r6, #12]
 80079ac:	b183      	cbz	r3, 80079d0 <_Balloc+0x50>
 80079ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079b6:	b9b8      	cbnz	r0, 80079e8 <_Balloc+0x68>
 80079b8:	2101      	movs	r1, #1
 80079ba:	fa01 f605 	lsl.w	r6, r1, r5
 80079be:	1d72      	adds	r2, r6, #5
 80079c0:	0092      	lsls	r2, r2, #2
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 fc9d 	bl	8008302 <_calloc_r>
 80079c8:	b160      	cbz	r0, 80079e4 <_Balloc+0x64>
 80079ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079ce:	e00e      	b.n	80079ee <_Balloc+0x6e>
 80079d0:	2221      	movs	r2, #33	; 0x21
 80079d2:	2104      	movs	r1, #4
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 fc94 	bl	8008302 <_calloc_r>
 80079da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079dc:	60f0      	str	r0, [r6, #12]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e4      	bne.n	80079ae <_Balloc+0x2e>
 80079e4:	2000      	movs	r0, #0
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	6802      	ldr	r2, [r0, #0]
 80079ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079ee:	2300      	movs	r3, #0
 80079f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079f4:	e7f7      	b.n	80079e6 <_Balloc+0x66>
 80079f6:	bf00      	nop
 80079f8:	08008fe6 	.word	0x08008fe6
 80079fc:	08009148 	.word	0x08009148

08007a00 <_Bfree>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a04:	4605      	mov	r5, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	b976      	cbnz	r6, 8007a28 <_Bfree+0x28>
 8007a0a:	2010      	movs	r0, #16
 8007a0c:	f7ff ff90 	bl	8007930 <malloc>
 8007a10:	4602      	mov	r2, r0
 8007a12:	6268      	str	r0, [r5, #36]	; 0x24
 8007a14:	b920      	cbnz	r0, 8007a20 <_Bfree+0x20>
 8007a16:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <_Bfree+0x3c>)
 8007a18:	4809      	ldr	r0, [pc, #36]	; (8007a40 <_Bfree+0x40>)
 8007a1a:	218a      	movs	r1, #138	; 0x8a
 8007a1c:	f000 ff52 	bl	80088c4 <__assert_func>
 8007a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a24:	6006      	str	r6, [r0, #0]
 8007a26:	60c6      	str	r6, [r0, #12]
 8007a28:	b13c      	cbz	r4, 8007a3a <_Bfree+0x3a>
 8007a2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a2c:	6862      	ldr	r2, [r4, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a34:	6021      	str	r1, [r4, #0]
 8007a36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	08008fe6 	.word	0x08008fe6
 8007a40:	08009148 	.word	0x08009148

08007a44 <__multadd>:
 8007a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a48:	690d      	ldr	r5, [r1, #16]
 8007a4a:	4607      	mov	r7, r0
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	461e      	mov	r6, r3
 8007a50:	f101 0c14 	add.w	ip, r1, #20
 8007a54:	2000      	movs	r0, #0
 8007a56:	f8dc 3000 	ldr.w	r3, [ip]
 8007a5a:	b299      	uxth	r1, r3
 8007a5c:	fb02 6101 	mla	r1, r2, r1, r6
 8007a60:	0c1e      	lsrs	r6, r3, #16
 8007a62:	0c0b      	lsrs	r3, r1, #16
 8007a64:	fb02 3306 	mla	r3, r2, r6, r3
 8007a68:	b289      	uxth	r1, r1
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a70:	4285      	cmp	r5, r0
 8007a72:	f84c 1b04 	str.w	r1, [ip], #4
 8007a76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a7a:	dcec      	bgt.n	8007a56 <__multadd+0x12>
 8007a7c:	b30e      	cbz	r6, 8007ac2 <__multadd+0x7e>
 8007a7e:	68a3      	ldr	r3, [r4, #8]
 8007a80:	42ab      	cmp	r3, r5
 8007a82:	dc19      	bgt.n	8007ab8 <__multadd+0x74>
 8007a84:	6861      	ldr	r1, [r4, #4]
 8007a86:	4638      	mov	r0, r7
 8007a88:	3101      	adds	r1, #1
 8007a8a:	f7ff ff79 	bl	8007980 <_Balloc>
 8007a8e:	4680      	mov	r8, r0
 8007a90:	b928      	cbnz	r0, 8007a9e <__multadd+0x5a>
 8007a92:	4602      	mov	r2, r0
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <__multadd+0x84>)
 8007a96:	480d      	ldr	r0, [pc, #52]	; (8007acc <__multadd+0x88>)
 8007a98:	21b5      	movs	r1, #181	; 0xb5
 8007a9a:	f000 ff13 	bl	80088c4 <__assert_func>
 8007a9e:	6922      	ldr	r2, [r4, #16]
 8007aa0:	3202      	adds	r2, #2
 8007aa2:	f104 010c 	add.w	r1, r4, #12
 8007aa6:	0092      	lsls	r2, r2, #2
 8007aa8:	300c      	adds	r0, #12
 8007aaa:	f7ff ff5b 	bl	8007964 <memcpy>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	f7ff ffa5 	bl	8007a00 <_Bfree>
 8007ab6:	4644      	mov	r4, r8
 8007ab8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007abc:	3501      	adds	r5, #1
 8007abe:	615e      	str	r6, [r3, #20]
 8007ac0:	6125      	str	r5, [r4, #16]
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac8:	08009058 	.word	0x08009058
 8007acc:	08009148 	.word	0x08009148

08007ad0 <__s2b>:
 8007ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	4615      	mov	r5, r2
 8007ad8:	461f      	mov	r7, r3
 8007ada:	2209      	movs	r2, #9
 8007adc:	3308      	adds	r3, #8
 8007ade:	4606      	mov	r6, r0
 8007ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	db09      	blt.n	8007b00 <__s2b+0x30>
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7ff ff47 	bl	8007980 <_Balloc>
 8007af2:	b940      	cbnz	r0, 8007b06 <__s2b+0x36>
 8007af4:	4602      	mov	r2, r0
 8007af6:	4b19      	ldr	r3, [pc, #100]	; (8007b5c <__s2b+0x8c>)
 8007af8:	4819      	ldr	r0, [pc, #100]	; (8007b60 <__s2b+0x90>)
 8007afa:	21ce      	movs	r1, #206	; 0xce
 8007afc:	f000 fee2 	bl	80088c4 <__assert_func>
 8007b00:	0052      	lsls	r2, r2, #1
 8007b02:	3101      	adds	r1, #1
 8007b04:	e7f0      	b.n	8007ae8 <__s2b+0x18>
 8007b06:	9b08      	ldr	r3, [sp, #32]
 8007b08:	6143      	str	r3, [r0, #20]
 8007b0a:	2d09      	cmp	r5, #9
 8007b0c:	f04f 0301 	mov.w	r3, #1
 8007b10:	6103      	str	r3, [r0, #16]
 8007b12:	dd16      	ble.n	8007b42 <__s2b+0x72>
 8007b14:	f104 0909 	add.w	r9, r4, #9
 8007b18:	46c8      	mov	r8, r9
 8007b1a:	442c      	add	r4, r5
 8007b1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b20:	4601      	mov	r1, r0
 8007b22:	3b30      	subs	r3, #48	; 0x30
 8007b24:	220a      	movs	r2, #10
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff ff8c 	bl	8007a44 <__multadd>
 8007b2c:	45a0      	cmp	r8, r4
 8007b2e:	d1f5      	bne.n	8007b1c <__s2b+0x4c>
 8007b30:	f1a5 0408 	sub.w	r4, r5, #8
 8007b34:	444c      	add	r4, r9
 8007b36:	1b2d      	subs	r5, r5, r4
 8007b38:	1963      	adds	r3, r4, r5
 8007b3a:	42bb      	cmp	r3, r7
 8007b3c:	db04      	blt.n	8007b48 <__s2b+0x78>
 8007b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b42:	340a      	adds	r4, #10
 8007b44:	2509      	movs	r5, #9
 8007b46:	e7f6      	b.n	8007b36 <__s2b+0x66>
 8007b48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b4c:	4601      	mov	r1, r0
 8007b4e:	3b30      	subs	r3, #48	; 0x30
 8007b50:	220a      	movs	r2, #10
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ff76 	bl	8007a44 <__multadd>
 8007b58:	e7ee      	b.n	8007b38 <__s2b+0x68>
 8007b5a:	bf00      	nop
 8007b5c:	08009058 	.word	0x08009058
 8007b60:	08009148 	.word	0x08009148

08007b64 <__hi0bits>:
 8007b64:	0c03      	lsrs	r3, r0, #16
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	b9d3      	cbnz	r3, 8007ba0 <__hi0bits+0x3c>
 8007b6a:	0400      	lsls	r0, r0, #16
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b72:	bf04      	itt	eq
 8007b74:	0200      	lsleq	r0, r0, #8
 8007b76:	3308      	addeq	r3, #8
 8007b78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b7c:	bf04      	itt	eq
 8007b7e:	0100      	lsleq	r0, r0, #4
 8007b80:	3304      	addeq	r3, #4
 8007b82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b86:	bf04      	itt	eq
 8007b88:	0080      	lsleq	r0, r0, #2
 8007b8a:	3302      	addeq	r3, #2
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	db05      	blt.n	8007b9c <__hi0bits+0x38>
 8007b90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b94:	f103 0301 	add.w	r3, r3, #1
 8007b98:	bf08      	it	eq
 8007b9a:	2320      	moveq	r3, #32
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	4770      	bx	lr
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e7e4      	b.n	8007b6e <__hi0bits+0xa>

08007ba4 <__lo0bits>:
 8007ba4:	6803      	ldr	r3, [r0, #0]
 8007ba6:	f013 0207 	ands.w	r2, r3, #7
 8007baa:	4601      	mov	r1, r0
 8007bac:	d00b      	beq.n	8007bc6 <__lo0bits+0x22>
 8007bae:	07da      	lsls	r2, r3, #31
 8007bb0:	d423      	bmi.n	8007bfa <__lo0bits+0x56>
 8007bb2:	0798      	lsls	r0, r3, #30
 8007bb4:	bf49      	itett	mi
 8007bb6:	085b      	lsrmi	r3, r3, #1
 8007bb8:	089b      	lsrpl	r3, r3, #2
 8007bba:	2001      	movmi	r0, #1
 8007bbc:	600b      	strmi	r3, [r1, #0]
 8007bbe:	bf5c      	itt	pl
 8007bc0:	600b      	strpl	r3, [r1, #0]
 8007bc2:	2002      	movpl	r0, #2
 8007bc4:	4770      	bx	lr
 8007bc6:	b298      	uxth	r0, r3
 8007bc8:	b9a8      	cbnz	r0, 8007bf6 <__lo0bits+0x52>
 8007bca:	0c1b      	lsrs	r3, r3, #16
 8007bcc:	2010      	movs	r0, #16
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	b90a      	cbnz	r2, 8007bd6 <__lo0bits+0x32>
 8007bd2:	3008      	adds	r0, #8
 8007bd4:	0a1b      	lsrs	r3, r3, #8
 8007bd6:	071a      	lsls	r2, r3, #28
 8007bd8:	bf04      	itt	eq
 8007bda:	091b      	lsreq	r3, r3, #4
 8007bdc:	3004      	addeq	r0, #4
 8007bde:	079a      	lsls	r2, r3, #30
 8007be0:	bf04      	itt	eq
 8007be2:	089b      	lsreq	r3, r3, #2
 8007be4:	3002      	addeq	r0, #2
 8007be6:	07da      	lsls	r2, r3, #31
 8007be8:	d403      	bmi.n	8007bf2 <__lo0bits+0x4e>
 8007bea:	085b      	lsrs	r3, r3, #1
 8007bec:	f100 0001 	add.w	r0, r0, #1
 8007bf0:	d005      	beq.n	8007bfe <__lo0bits+0x5a>
 8007bf2:	600b      	str	r3, [r1, #0]
 8007bf4:	4770      	bx	lr
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	e7e9      	b.n	8007bce <__lo0bits+0x2a>
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	4770      	bx	lr
 8007bfe:	2020      	movs	r0, #32
 8007c00:	4770      	bx	lr
	...

08007c04 <__i2b>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	460c      	mov	r4, r1
 8007c08:	2101      	movs	r1, #1
 8007c0a:	f7ff feb9 	bl	8007980 <_Balloc>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	b928      	cbnz	r0, 8007c1e <__i2b+0x1a>
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <__i2b+0x24>)
 8007c14:	4805      	ldr	r0, [pc, #20]	; (8007c2c <__i2b+0x28>)
 8007c16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c1a:	f000 fe53 	bl	80088c4 <__assert_func>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	6144      	str	r4, [r0, #20]
 8007c22:	6103      	str	r3, [r0, #16]
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	bf00      	nop
 8007c28:	08009058 	.word	0x08009058
 8007c2c:	08009148 	.word	0x08009148

08007c30 <__multiply>:
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	4691      	mov	r9, r2
 8007c36:	690a      	ldr	r2, [r1, #16]
 8007c38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	bfb8      	it	lt
 8007c40:	460b      	movlt	r3, r1
 8007c42:	460c      	mov	r4, r1
 8007c44:	bfbc      	itt	lt
 8007c46:	464c      	movlt	r4, r9
 8007c48:	4699      	movlt	r9, r3
 8007c4a:	6927      	ldr	r7, [r4, #16]
 8007c4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c50:	68a3      	ldr	r3, [r4, #8]
 8007c52:	6861      	ldr	r1, [r4, #4]
 8007c54:	eb07 060a 	add.w	r6, r7, sl
 8007c58:	42b3      	cmp	r3, r6
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	bfb8      	it	lt
 8007c5e:	3101      	addlt	r1, #1
 8007c60:	f7ff fe8e 	bl	8007980 <_Balloc>
 8007c64:	b930      	cbnz	r0, 8007c74 <__multiply+0x44>
 8007c66:	4602      	mov	r2, r0
 8007c68:	4b44      	ldr	r3, [pc, #272]	; (8007d7c <__multiply+0x14c>)
 8007c6a:	4845      	ldr	r0, [pc, #276]	; (8007d80 <__multiply+0x150>)
 8007c6c:	f240 115d 	movw	r1, #349	; 0x15d
 8007c70:	f000 fe28 	bl	80088c4 <__assert_func>
 8007c74:	f100 0514 	add.w	r5, r0, #20
 8007c78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	2200      	movs	r2, #0
 8007c80:	4543      	cmp	r3, r8
 8007c82:	d321      	bcc.n	8007cc8 <__multiply+0x98>
 8007c84:	f104 0314 	add.w	r3, r4, #20
 8007c88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c8c:	f109 0314 	add.w	r3, r9, #20
 8007c90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c94:	9202      	str	r2, [sp, #8]
 8007c96:	1b3a      	subs	r2, r7, r4
 8007c98:	3a15      	subs	r2, #21
 8007c9a:	f022 0203 	bic.w	r2, r2, #3
 8007c9e:	3204      	adds	r2, #4
 8007ca0:	f104 0115 	add.w	r1, r4, #21
 8007ca4:	428f      	cmp	r7, r1
 8007ca6:	bf38      	it	cc
 8007ca8:	2204      	movcc	r2, #4
 8007caa:	9201      	str	r2, [sp, #4]
 8007cac:	9a02      	ldr	r2, [sp, #8]
 8007cae:	9303      	str	r3, [sp, #12]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d80c      	bhi.n	8007cce <__multiply+0x9e>
 8007cb4:	2e00      	cmp	r6, #0
 8007cb6:	dd03      	ble.n	8007cc0 <__multiply+0x90>
 8007cb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d05a      	beq.n	8007d76 <__multiply+0x146>
 8007cc0:	6106      	str	r6, [r0, #16]
 8007cc2:	b005      	add	sp, #20
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc8:	f843 2b04 	str.w	r2, [r3], #4
 8007ccc:	e7d8      	b.n	8007c80 <__multiply+0x50>
 8007cce:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cd2:	f1ba 0f00 	cmp.w	sl, #0
 8007cd6:	d024      	beq.n	8007d22 <__multiply+0xf2>
 8007cd8:	f104 0e14 	add.w	lr, r4, #20
 8007cdc:	46a9      	mov	r9, r5
 8007cde:	f04f 0c00 	mov.w	ip, #0
 8007ce2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ce6:	f8d9 1000 	ldr.w	r1, [r9]
 8007cea:	fa1f fb82 	uxth.w	fp, r2
 8007cee:	b289      	uxth	r1, r1
 8007cf0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007cf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8007cfc:	4461      	add	r1, ip
 8007cfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d02:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d0a:	b289      	uxth	r1, r1
 8007d0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d10:	4577      	cmp	r7, lr
 8007d12:	f849 1b04 	str.w	r1, [r9], #4
 8007d16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d1a:	d8e2      	bhi.n	8007ce2 <__multiply+0xb2>
 8007d1c:	9a01      	ldr	r2, [sp, #4]
 8007d1e:	f845 c002 	str.w	ip, [r5, r2]
 8007d22:	9a03      	ldr	r2, [sp, #12]
 8007d24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	f1b9 0f00 	cmp.w	r9, #0
 8007d2e:	d020      	beq.n	8007d72 <__multiply+0x142>
 8007d30:	6829      	ldr	r1, [r5, #0]
 8007d32:	f104 0c14 	add.w	ip, r4, #20
 8007d36:	46ae      	mov	lr, r5
 8007d38:	f04f 0a00 	mov.w	sl, #0
 8007d3c:	f8bc b000 	ldrh.w	fp, [ip]
 8007d40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d44:	fb09 220b 	mla	r2, r9, fp, r2
 8007d48:	4492      	add	sl, r2
 8007d4a:	b289      	uxth	r1, r1
 8007d4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d50:	f84e 1b04 	str.w	r1, [lr], #4
 8007d54:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d58:	f8be 1000 	ldrh.w	r1, [lr]
 8007d5c:	0c12      	lsrs	r2, r2, #16
 8007d5e:	fb09 1102 	mla	r1, r9, r2, r1
 8007d62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d66:	4567      	cmp	r7, ip
 8007d68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d6c:	d8e6      	bhi.n	8007d3c <__multiply+0x10c>
 8007d6e:	9a01      	ldr	r2, [sp, #4]
 8007d70:	50a9      	str	r1, [r5, r2]
 8007d72:	3504      	adds	r5, #4
 8007d74:	e79a      	b.n	8007cac <__multiply+0x7c>
 8007d76:	3e01      	subs	r6, #1
 8007d78:	e79c      	b.n	8007cb4 <__multiply+0x84>
 8007d7a:	bf00      	nop
 8007d7c:	08009058 	.word	0x08009058
 8007d80:	08009148 	.word	0x08009148

08007d84 <__pow5mult>:
 8007d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d88:	4615      	mov	r5, r2
 8007d8a:	f012 0203 	ands.w	r2, r2, #3
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460f      	mov	r7, r1
 8007d92:	d007      	beq.n	8007da4 <__pow5mult+0x20>
 8007d94:	4c25      	ldr	r4, [pc, #148]	; (8007e2c <__pow5mult+0xa8>)
 8007d96:	3a01      	subs	r2, #1
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d9e:	f7ff fe51 	bl	8007a44 <__multadd>
 8007da2:	4607      	mov	r7, r0
 8007da4:	10ad      	asrs	r5, r5, #2
 8007da6:	d03d      	beq.n	8007e24 <__pow5mult+0xa0>
 8007da8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007daa:	b97c      	cbnz	r4, 8007dcc <__pow5mult+0x48>
 8007dac:	2010      	movs	r0, #16
 8007dae:	f7ff fdbf 	bl	8007930 <malloc>
 8007db2:	4602      	mov	r2, r0
 8007db4:	6270      	str	r0, [r6, #36]	; 0x24
 8007db6:	b928      	cbnz	r0, 8007dc4 <__pow5mult+0x40>
 8007db8:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <__pow5mult+0xac>)
 8007dba:	481e      	ldr	r0, [pc, #120]	; (8007e34 <__pow5mult+0xb0>)
 8007dbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007dc0:	f000 fd80 	bl	80088c4 <__assert_func>
 8007dc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dc8:	6004      	str	r4, [r0, #0]
 8007dca:	60c4      	str	r4, [r0, #12]
 8007dcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dd4:	b94c      	cbnz	r4, 8007dea <__pow5mult+0x66>
 8007dd6:	f240 2171 	movw	r1, #625	; 0x271
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f7ff ff12 	bl	8007c04 <__i2b>
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007de6:	4604      	mov	r4, r0
 8007de8:	6003      	str	r3, [r0, #0]
 8007dea:	f04f 0900 	mov.w	r9, #0
 8007dee:	07eb      	lsls	r3, r5, #31
 8007df0:	d50a      	bpl.n	8007e08 <__pow5mult+0x84>
 8007df2:	4639      	mov	r1, r7
 8007df4:	4622      	mov	r2, r4
 8007df6:	4630      	mov	r0, r6
 8007df8:	f7ff ff1a 	bl	8007c30 <__multiply>
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4680      	mov	r8, r0
 8007e00:	4630      	mov	r0, r6
 8007e02:	f7ff fdfd 	bl	8007a00 <_Bfree>
 8007e06:	4647      	mov	r7, r8
 8007e08:	106d      	asrs	r5, r5, #1
 8007e0a:	d00b      	beq.n	8007e24 <__pow5mult+0xa0>
 8007e0c:	6820      	ldr	r0, [r4, #0]
 8007e0e:	b938      	cbnz	r0, 8007e20 <__pow5mult+0x9c>
 8007e10:	4622      	mov	r2, r4
 8007e12:	4621      	mov	r1, r4
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff ff0b 	bl	8007c30 <__multiply>
 8007e1a:	6020      	str	r0, [r4, #0]
 8007e1c:	f8c0 9000 	str.w	r9, [r0]
 8007e20:	4604      	mov	r4, r0
 8007e22:	e7e4      	b.n	8007dee <__pow5mult+0x6a>
 8007e24:	4638      	mov	r0, r7
 8007e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2a:	bf00      	nop
 8007e2c:	08009298 	.word	0x08009298
 8007e30:	08008fe6 	.word	0x08008fe6
 8007e34:	08009148 	.word	0x08009148

08007e38 <__lshift>:
 8007e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	6849      	ldr	r1, [r1, #4]
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e46:	68a3      	ldr	r3, [r4, #8]
 8007e48:	4607      	mov	r7, r0
 8007e4a:	4691      	mov	r9, r2
 8007e4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e50:	f108 0601 	add.w	r6, r8, #1
 8007e54:	42b3      	cmp	r3, r6
 8007e56:	db0b      	blt.n	8007e70 <__lshift+0x38>
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f7ff fd91 	bl	8007980 <_Balloc>
 8007e5e:	4605      	mov	r5, r0
 8007e60:	b948      	cbnz	r0, 8007e76 <__lshift+0x3e>
 8007e62:	4602      	mov	r2, r0
 8007e64:	4b2a      	ldr	r3, [pc, #168]	; (8007f10 <__lshift+0xd8>)
 8007e66:	482b      	ldr	r0, [pc, #172]	; (8007f14 <__lshift+0xdc>)
 8007e68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e6c:	f000 fd2a 	bl	80088c4 <__assert_func>
 8007e70:	3101      	adds	r1, #1
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	e7ee      	b.n	8007e54 <__lshift+0x1c>
 8007e76:	2300      	movs	r3, #0
 8007e78:	f100 0114 	add.w	r1, r0, #20
 8007e7c:	f100 0210 	add.w	r2, r0, #16
 8007e80:	4618      	mov	r0, r3
 8007e82:	4553      	cmp	r3, sl
 8007e84:	db37      	blt.n	8007ef6 <__lshift+0xbe>
 8007e86:	6920      	ldr	r0, [r4, #16]
 8007e88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e8c:	f104 0314 	add.w	r3, r4, #20
 8007e90:	f019 091f 	ands.w	r9, r9, #31
 8007e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007e9c:	d02f      	beq.n	8007efe <__lshift+0xc6>
 8007e9e:	f1c9 0e20 	rsb	lr, r9, #32
 8007ea2:	468a      	mov	sl, r1
 8007ea4:	f04f 0c00 	mov.w	ip, #0
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	fa02 f209 	lsl.w	r2, r2, r9
 8007eae:	ea42 020c 	orr.w	r2, r2, ip
 8007eb2:	f84a 2b04 	str.w	r2, [sl], #4
 8007eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eba:	4298      	cmp	r0, r3
 8007ebc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007ec0:	d8f2      	bhi.n	8007ea8 <__lshift+0x70>
 8007ec2:	1b03      	subs	r3, r0, r4
 8007ec4:	3b15      	subs	r3, #21
 8007ec6:	f023 0303 	bic.w	r3, r3, #3
 8007eca:	3304      	adds	r3, #4
 8007ecc:	f104 0215 	add.w	r2, r4, #21
 8007ed0:	4290      	cmp	r0, r2
 8007ed2:	bf38      	it	cc
 8007ed4:	2304      	movcc	r3, #4
 8007ed6:	f841 c003 	str.w	ip, [r1, r3]
 8007eda:	f1bc 0f00 	cmp.w	ip, #0
 8007ede:	d001      	beq.n	8007ee4 <__lshift+0xac>
 8007ee0:	f108 0602 	add.w	r6, r8, #2
 8007ee4:	3e01      	subs	r6, #1
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	612e      	str	r6, [r5, #16]
 8007eea:	4621      	mov	r1, r4
 8007eec:	f7ff fd88 	bl	8007a00 <_Bfree>
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007efa:	3301      	adds	r3, #1
 8007efc:	e7c1      	b.n	8007e82 <__lshift+0x4a>
 8007efe:	3904      	subs	r1, #4
 8007f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f04:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f08:	4298      	cmp	r0, r3
 8007f0a:	d8f9      	bhi.n	8007f00 <__lshift+0xc8>
 8007f0c:	e7ea      	b.n	8007ee4 <__lshift+0xac>
 8007f0e:	bf00      	nop
 8007f10:	08009058 	.word	0x08009058
 8007f14:	08009148 	.word	0x08009148

08007f18 <__mcmp>:
 8007f18:	b530      	push	{r4, r5, lr}
 8007f1a:	6902      	ldr	r2, [r0, #16]
 8007f1c:	690c      	ldr	r4, [r1, #16]
 8007f1e:	1b12      	subs	r2, r2, r4
 8007f20:	d10e      	bne.n	8007f40 <__mcmp+0x28>
 8007f22:	f100 0314 	add.w	r3, r0, #20
 8007f26:	3114      	adds	r1, #20
 8007f28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f38:	42a5      	cmp	r5, r4
 8007f3a:	d003      	beq.n	8007f44 <__mcmp+0x2c>
 8007f3c:	d305      	bcc.n	8007f4a <__mcmp+0x32>
 8007f3e:	2201      	movs	r2, #1
 8007f40:	4610      	mov	r0, r2
 8007f42:	bd30      	pop	{r4, r5, pc}
 8007f44:	4283      	cmp	r3, r0
 8007f46:	d3f3      	bcc.n	8007f30 <__mcmp+0x18>
 8007f48:	e7fa      	b.n	8007f40 <__mcmp+0x28>
 8007f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f4e:	e7f7      	b.n	8007f40 <__mcmp+0x28>

08007f50 <__mdiff>:
 8007f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	460c      	mov	r4, r1
 8007f56:	4606      	mov	r6, r0
 8007f58:	4611      	mov	r1, r2
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4690      	mov	r8, r2
 8007f5e:	f7ff ffdb 	bl	8007f18 <__mcmp>
 8007f62:	1e05      	subs	r5, r0, #0
 8007f64:	d110      	bne.n	8007f88 <__mdiff+0x38>
 8007f66:	4629      	mov	r1, r5
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f7ff fd09 	bl	8007980 <_Balloc>
 8007f6e:	b930      	cbnz	r0, 8007f7e <__mdiff+0x2e>
 8007f70:	4b3a      	ldr	r3, [pc, #232]	; (800805c <__mdiff+0x10c>)
 8007f72:	4602      	mov	r2, r0
 8007f74:	f240 2132 	movw	r1, #562	; 0x232
 8007f78:	4839      	ldr	r0, [pc, #228]	; (8008060 <__mdiff+0x110>)
 8007f7a:	f000 fca3 	bl	80088c4 <__assert_func>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f88:	bfa4      	itt	ge
 8007f8a:	4643      	movge	r3, r8
 8007f8c:	46a0      	movge	r8, r4
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f94:	bfa6      	itte	ge
 8007f96:	461c      	movge	r4, r3
 8007f98:	2500      	movge	r5, #0
 8007f9a:	2501      	movlt	r5, #1
 8007f9c:	f7ff fcf0 	bl	8007980 <_Balloc>
 8007fa0:	b920      	cbnz	r0, 8007fac <__mdiff+0x5c>
 8007fa2:	4b2e      	ldr	r3, [pc, #184]	; (800805c <__mdiff+0x10c>)
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007faa:	e7e5      	b.n	8007f78 <__mdiff+0x28>
 8007fac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fb0:	6926      	ldr	r6, [r4, #16]
 8007fb2:	60c5      	str	r5, [r0, #12]
 8007fb4:	f104 0914 	add.w	r9, r4, #20
 8007fb8:	f108 0514 	add.w	r5, r8, #20
 8007fbc:	f100 0e14 	add.w	lr, r0, #20
 8007fc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007fc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007fc8:	f108 0210 	add.w	r2, r8, #16
 8007fcc:	46f2      	mov	sl, lr
 8007fce:	2100      	movs	r1, #0
 8007fd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007fd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007fd8:	fa1f f883 	uxth.w	r8, r3
 8007fdc:	fa11 f18b 	uxtah	r1, r1, fp
 8007fe0:	0c1b      	lsrs	r3, r3, #16
 8007fe2:	eba1 0808 	sub.w	r8, r1, r8
 8007fe6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007fea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007fee:	fa1f f888 	uxth.w	r8, r8
 8007ff2:	1419      	asrs	r1, r3, #16
 8007ff4:	454e      	cmp	r6, r9
 8007ff6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ffa:	f84a 3b04 	str.w	r3, [sl], #4
 8007ffe:	d8e7      	bhi.n	8007fd0 <__mdiff+0x80>
 8008000:	1b33      	subs	r3, r6, r4
 8008002:	3b15      	subs	r3, #21
 8008004:	f023 0303 	bic.w	r3, r3, #3
 8008008:	3304      	adds	r3, #4
 800800a:	3415      	adds	r4, #21
 800800c:	42a6      	cmp	r6, r4
 800800e:	bf38      	it	cc
 8008010:	2304      	movcc	r3, #4
 8008012:	441d      	add	r5, r3
 8008014:	4473      	add	r3, lr
 8008016:	469e      	mov	lr, r3
 8008018:	462e      	mov	r6, r5
 800801a:	4566      	cmp	r6, ip
 800801c:	d30e      	bcc.n	800803c <__mdiff+0xec>
 800801e:	f10c 0203 	add.w	r2, ip, #3
 8008022:	1b52      	subs	r2, r2, r5
 8008024:	f022 0203 	bic.w	r2, r2, #3
 8008028:	3d03      	subs	r5, #3
 800802a:	45ac      	cmp	ip, r5
 800802c:	bf38      	it	cc
 800802e:	2200      	movcc	r2, #0
 8008030:	441a      	add	r2, r3
 8008032:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008036:	b17b      	cbz	r3, 8008058 <__mdiff+0x108>
 8008038:	6107      	str	r7, [r0, #16]
 800803a:	e7a3      	b.n	8007f84 <__mdiff+0x34>
 800803c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008040:	fa11 f288 	uxtah	r2, r1, r8
 8008044:	1414      	asrs	r4, r2, #16
 8008046:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800804a:	b292      	uxth	r2, r2
 800804c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008050:	f84e 2b04 	str.w	r2, [lr], #4
 8008054:	1421      	asrs	r1, r4, #16
 8008056:	e7e0      	b.n	800801a <__mdiff+0xca>
 8008058:	3f01      	subs	r7, #1
 800805a:	e7ea      	b.n	8008032 <__mdiff+0xe2>
 800805c:	08009058 	.word	0x08009058
 8008060:	08009148 	.word	0x08009148

08008064 <__ulp>:
 8008064:	b082      	sub	sp, #8
 8008066:	ed8d 0b00 	vstr	d0, [sp]
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	4912      	ldr	r1, [pc, #72]	; (80080b8 <__ulp+0x54>)
 800806e:	4019      	ands	r1, r3
 8008070:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008074:	2900      	cmp	r1, #0
 8008076:	dd05      	ble.n	8008084 <__ulp+0x20>
 8008078:	2200      	movs	r2, #0
 800807a:	460b      	mov	r3, r1
 800807c:	ec43 2b10 	vmov	d0, r2, r3
 8008080:	b002      	add	sp, #8
 8008082:	4770      	bx	lr
 8008084:	4249      	negs	r1, r1
 8008086:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800808a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800808e:	f04f 0200 	mov.w	r2, #0
 8008092:	f04f 0300 	mov.w	r3, #0
 8008096:	da04      	bge.n	80080a2 <__ulp+0x3e>
 8008098:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800809c:	fa41 f300 	asr.w	r3, r1, r0
 80080a0:	e7ec      	b.n	800807c <__ulp+0x18>
 80080a2:	f1a0 0114 	sub.w	r1, r0, #20
 80080a6:	291e      	cmp	r1, #30
 80080a8:	bfda      	itte	le
 80080aa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80080ae:	fa20 f101 	lsrle.w	r1, r0, r1
 80080b2:	2101      	movgt	r1, #1
 80080b4:	460a      	mov	r2, r1
 80080b6:	e7e1      	b.n	800807c <__ulp+0x18>
 80080b8:	7ff00000 	.word	0x7ff00000

080080bc <__b2d>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	6905      	ldr	r5, [r0, #16]
 80080c0:	f100 0714 	add.w	r7, r0, #20
 80080c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80080c8:	1f2e      	subs	r6, r5, #4
 80080ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80080ce:	4620      	mov	r0, r4
 80080d0:	f7ff fd48 	bl	8007b64 <__hi0bits>
 80080d4:	f1c0 0320 	rsb	r3, r0, #32
 80080d8:	280a      	cmp	r0, #10
 80080da:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008158 <__b2d+0x9c>
 80080de:	600b      	str	r3, [r1, #0]
 80080e0:	dc14      	bgt.n	800810c <__b2d+0x50>
 80080e2:	f1c0 0e0b 	rsb	lr, r0, #11
 80080e6:	fa24 f10e 	lsr.w	r1, r4, lr
 80080ea:	42b7      	cmp	r7, r6
 80080ec:	ea41 030c 	orr.w	r3, r1, ip
 80080f0:	bf34      	ite	cc
 80080f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80080f6:	2100      	movcs	r1, #0
 80080f8:	3015      	adds	r0, #21
 80080fa:	fa04 f000 	lsl.w	r0, r4, r0
 80080fe:	fa21 f10e 	lsr.w	r1, r1, lr
 8008102:	ea40 0201 	orr.w	r2, r0, r1
 8008106:	ec43 2b10 	vmov	d0, r2, r3
 800810a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800810c:	42b7      	cmp	r7, r6
 800810e:	bf3a      	itte	cc
 8008110:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008114:	f1a5 0608 	subcc.w	r6, r5, #8
 8008118:	2100      	movcs	r1, #0
 800811a:	380b      	subs	r0, #11
 800811c:	d017      	beq.n	800814e <__b2d+0x92>
 800811e:	f1c0 0c20 	rsb	ip, r0, #32
 8008122:	fa04 f500 	lsl.w	r5, r4, r0
 8008126:	42be      	cmp	r6, r7
 8008128:	fa21 f40c 	lsr.w	r4, r1, ip
 800812c:	ea45 0504 	orr.w	r5, r5, r4
 8008130:	bf8c      	ite	hi
 8008132:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008136:	2400      	movls	r4, #0
 8008138:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800813c:	fa01 f000 	lsl.w	r0, r1, r0
 8008140:	fa24 f40c 	lsr.w	r4, r4, ip
 8008144:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008148:	ea40 0204 	orr.w	r2, r0, r4
 800814c:	e7db      	b.n	8008106 <__b2d+0x4a>
 800814e:	ea44 030c 	orr.w	r3, r4, ip
 8008152:	460a      	mov	r2, r1
 8008154:	e7d7      	b.n	8008106 <__b2d+0x4a>
 8008156:	bf00      	nop
 8008158:	3ff00000 	.word	0x3ff00000

0800815c <__d2b>:
 800815c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008160:	4689      	mov	r9, r1
 8008162:	2101      	movs	r1, #1
 8008164:	ec57 6b10 	vmov	r6, r7, d0
 8008168:	4690      	mov	r8, r2
 800816a:	f7ff fc09 	bl	8007980 <_Balloc>
 800816e:	4604      	mov	r4, r0
 8008170:	b930      	cbnz	r0, 8008180 <__d2b+0x24>
 8008172:	4602      	mov	r2, r0
 8008174:	4b25      	ldr	r3, [pc, #148]	; (800820c <__d2b+0xb0>)
 8008176:	4826      	ldr	r0, [pc, #152]	; (8008210 <__d2b+0xb4>)
 8008178:	f240 310a 	movw	r1, #778	; 0x30a
 800817c:	f000 fba2 	bl	80088c4 <__assert_func>
 8008180:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008184:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008188:	bb35      	cbnz	r5, 80081d8 <__d2b+0x7c>
 800818a:	2e00      	cmp	r6, #0
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	d028      	beq.n	80081e2 <__d2b+0x86>
 8008190:	4668      	mov	r0, sp
 8008192:	9600      	str	r6, [sp, #0]
 8008194:	f7ff fd06 	bl	8007ba4 <__lo0bits>
 8008198:	9900      	ldr	r1, [sp, #0]
 800819a:	b300      	cbz	r0, 80081de <__d2b+0x82>
 800819c:	9a01      	ldr	r2, [sp, #4]
 800819e:	f1c0 0320 	rsb	r3, r0, #32
 80081a2:	fa02 f303 	lsl.w	r3, r2, r3
 80081a6:	430b      	orrs	r3, r1
 80081a8:	40c2      	lsrs	r2, r0
 80081aa:	6163      	str	r3, [r4, #20]
 80081ac:	9201      	str	r2, [sp, #4]
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	61a3      	str	r3, [r4, #24]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bf14      	ite	ne
 80081b6:	2202      	movne	r2, #2
 80081b8:	2201      	moveq	r2, #1
 80081ba:	6122      	str	r2, [r4, #16]
 80081bc:	b1d5      	cbz	r5, 80081f4 <__d2b+0x98>
 80081be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081c2:	4405      	add	r5, r0
 80081c4:	f8c9 5000 	str.w	r5, [r9]
 80081c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081cc:	f8c8 0000 	str.w	r0, [r8]
 80081d0:	4620      	mov	r0, r4
 80081d2:	b003      	add	sp, #12
 80081d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081dc:	e7d5      	b.n	800818a <__d2b+0x2e>
 80081de:	6161      	str	r1, [r4, #20]
 80081e0:	e7e5      	b.n	80081ae <__d2b+0x52>
 80081e2:	a801      	add	r0, sp, #4
 80081e4:	f7ff fcde 	bl	8007ba4 <__lo0bits>
 80081e8:	9b01      	ldr	r3, [sp, #4]
 80081ea:	6163      	str	r3, [r4, #20]
 80081ec:	2201      	movs	r2, #1
 80081ee:	6122      	str	r2, [r4, #16]
 80081f0:	3020      	adds	r0, #32
 80081f2:	e7e3      	b.n	80081bc <__d2b+0x60>
 80081f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081fc:	f8c9 0000 	str.w	r0, [r9]
 8008200:	6918      	ldr	r0, [r3, #16]
 8008202:	f7ff fcaf 	bl	8007b64 <__hi0bits>
 8008206:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800820a:	e7df      	b.n	80081cc <__d2b+0x70>
 800820c:	08009058 	.word	0x08009058
 8008210:	08009148 	.word	0x08009148

08008214 <__ratio>:
 8008214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008218:	4688      	mov	r8, r1
 800821a:	4669      	mov	r1, sp
 800821c:	4681      	mov	r9, r0
 800821e:	f7ff ff4d 	bl	80080bc <__b2d>
 8008222:	a901      	add	r1, sp, #4
 8008224:	4640      	mov	r0, r8
 8008226:	ec55 4b10 	vmov	r4, r5, d0
 800822a:	f7ff ff47 	bl	80080bc <__b2d>
 800822e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008232:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008236:	eba3 0c02 	sub.w	ip, r3, r2
 800823a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008244:	ec51 0b10 	vmov	r0, r1, d0
 8008248:	2b00      	cmp	r3, #0
 800824a:	bfd6      	itet	le
 800824c:	460a      	movle	r2, r1
 800824e:	462a      	movgt	r2, r5
 8008250:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008254:	468b      	mov	fp, r1
 8008256:	462f      	mov	r7, r5
 8008258:	bfd4      	ite	le
 800825a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800825e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008262:	4620      	mov	r0, r4
 8008264:	ee10 2a10 	vmov	r2, s0
 8008268:	465b      	mov	r3, fp
 800826a:	4639      	mov	r1, r7
 800826c:	f7f8 faee 	bl	800084c <__aeabi_ddiv>
 8008270:	ec41 0b10 	vmov	d0, r0, r1
 8008274:	b003      	add	sp, #12
 8008276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800827a <__copybits>:
 800827a:	3901      	subs	r1, #1
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	1149      	asrs	r1, r1, #5
 8008280:	6914      	ldr	r4, [r2, #16]
 8008282:	3101      	adds	r1, #1
 8008284:	f102 0314 	add.w	r3, r2, #20
 8008288:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800828c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008290:	1f05      	subs	r5, r0, #4
 8008292:	42a3      	cmp	r3, r4
 8008294:	d30c      	bcc.n	80082b0 <__copybits+0x36>
 8008296:	1aa3      	subs	r3, r4, r2
 8008298:	3b11      	subs	r3, #17
 800829a:	f023 0303 	bic.w	r3, r3, #3
 800829e:	3211      	adds	r2, #17
 80082a0:	42a2      	cmp	r2, r4
 80082a2:	bf88      	it	hi
 80082a4:	2300      	movhi	r3, #0
 80082a6:	4418      	add	r0, r3
 80082a8:	2300      	movs	r3, #0
 80082aa:	4288      	cmp	r0, r1
 80082ac:	d305      	bcc.n	80082ba <__copybits+0x40>
 80082ae:	bd70      	pop	{r4, r5, r6, pc}
 80082b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80082b4:	f845 6f04 	str.w	r6, [r5, #4]!
 80082b8:	e7eb      	b.n	8008292 <__copybits+0x18>
 80082ba:	f840 3b04 	str.w	r3, [r0], #4
 80082be:	e7f4      	b.n	80082aa <__copybits+0x30>

080082c0 <__any_on>:
 80082c0:	f100 0214 	add.w	r2, r0, #20
 80082c4:	6900      	ldr	r0, [r0, #16]
 80082c6:	114b      	asrs	r3, r1, #5
 80082c8:	4298      	cmp	r0, r3
 80082ca:	b510      	push	{r4, lr}
 80082cc:	db11      	blt.n	80082f2 <__any_on+0x32>
 80082ce:	dd0a      	ble.n	80082e6 <__any_on+0x26>
 80082d0:	f011 011f 	ands.w	r1, r1, #31
 80082d4:	d007      	beq.n	80082e6 <__any_on+0x26>
 80082d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80082da:	fa24 f001 	lsr.w	r0, r4, r1
 80082de:	fa00 f101 	lsl.w	r1, r0, r1
 80082e2:	428c      	cmp	r4, r1
 80082e4:	d10b      	bne.n	80082fe <__any_on+0x3e>
 80082e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d803      	bhi.n	80082f6 <__any_on+0x36>
 80082ee:	2000      	movs	r0, #0
 80082f0:	bd10      	pop	{r4, pc}
 80082f2:	4603      	mov	r3, r0
 80082f4:	e7f7      	b.n	80082e6 <__any_on+0x26>
 80082f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082fa:	2900      	cmp	r1, #0
 80082fc:	d0f5      	beq.n	80082ea <__any_on+0x2a>
 80082fe:	2001      	movs	r0, #1
 8008300:	e7f6      	b.n	80082f0 <__any_on+0x30>

08008302 <_calloc_r>:
 8008302:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008304:	fba1 2402 	umull	r2, r4, r1, r2
 8008308:	b94c      	cbnz	r4, 800831e <_calloc_r+0x1c>
 800830a:	4611      	mov	r1, r2
 800830c:	9201      	str	r2, [sp, #4]
 800830e:	f000 f87b 	bl	8008408 <_malloc_r>
 8008312:	9a01      	ldr	r2, [sp, #4]
 8008314:	4605      	mov	r5, r0
 8008316:	b930      	cbnz	r0, 8008326 <_calloc_r+0x24>
 8008318:	4628      	mov	r0, r5
 800831a:	b003      	add	sp, #12
 800831c:	bd30      	pop	{r4, r5, pc}
 800831e:	220c      	movs	r2, #12
 8008320:	6002      	str	r2, [r0, #0]
 8008322:	2500      	movs	r5, #0
 8008324:	e7f8      	b.n	8008318 <_calloc_r+0x16>
 8008326:	4621      	mov	r1, r4
 8008328:	f7fc f86c 	bl	8004404 <memset>
 800832c:	e7f4      	b.n	8008318 <_calloc_r+0x16>
	...

08008330 <_free_r>:
 8008330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008332:	2900      	cmp	r1, #0
 8008334:	d044      	beq.n	80083c0 <_free_r+0x90>
 8008336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800833a:	9001      	str	r0, [sp, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f1a1 0404 	sub.w	r4, r1, #4
 8008342:	bfb8      	it	lt
 8008344:	18e4      	addlt	r4, r4, r3
 8008346:	f000 fb4b 	bl	80089e0 <__malloc_lock>
 800834a:	4a1e      	ldr	r2, [pc, #120]	; (80083c4 <_free_r+0x94>)
 800834c:	9801      	ldr	r0, [sp, #4]
 800834e:	6813      	ldr	r3, [r2, #0]
 8008350:	b933      	cbnz	r3, 8008360 <_free_r+0x30>
 8008352:	6063      	str	r3, [r4, #4]
 8008354:	6014      	str	r4, [r2, #0]
 8008356:	b003      	add	sp, #12
 8008358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800835c:	f000 bb46 	b.w	80089ec <__malloc_unlock>
 8008360:	42a3      	cmp	r3, r4
 8008362:	d908      	bls.n	8008376 <_free_r+0x46>
 8008364:	6825      	ldr	r5, [r4, #0]
 8008366:	1961      	adds	r1, r4, r5
 8008368:	428b      	cmp	r3, r1
 800836a:	bf01      	itttt	eq
 800836c:	6819      	ldreq	r1, [r3, #0]
 800836e:	685b      	ldreq	r3, [r3, #4]
 8008370:	1949      	addeq	r1, r1, r5
 8008372:	6021      	streq	r1, [r4, #0]
 8008374:	e7ed      	b.n	8008352 <_free_r+0x22>
 8008376:	461a      	mov	r2, r3
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	b10b      	cbz	r3, 8008380 <_free_r+0x50>
 800837c:	42a3      	cmp	r3, r4
 800837e:	d9fa      	bls.n	8008376 <_free_r+0x46>
 8008380:	6811      	ldr	r1, [r2, #0]
 8008382:	1855      	adds	r5, r2, r1
 8008384:	42a5      	cmp	r5, r4
 8008386:	d10b      	bne.n	80083a0 <_free_r+0x70>
 8008388:	6824      	ldr	r4, [r4, #0]
 800838a:	4421      	add	r1, r4
 800838c:	1854      	adds	r4, r2, r1
 800838e:	42a3      	cmp	r3, r4
 8008390:	6011      	str	r1, [r2, #0]
 8008392:	d1e0      	bne.n	8008356 <_free_r+0x26>
 8008394:	681c      	ldr	r4, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	6053      	str	r3, [r2, #4]
 800839a:	4421      	add	r1, r4
 800839c:	6011      	str	r1, [r2, #0]
 800839e:	e7da      	b.n	8008356 <_free_r+0x26>
 80083a0:	d902      	bls.n	80083a8 <_free_r+0x78>
 80083a2:	230c      	movs	r3, #12
 80083a4:	6003      	str	r3, [r0, #0]
 80083a6:	e7d6      	b.n	8008356 <_free_r+0x26>
 80083a8:	6825      	ldr	r5, [r4, #0]
 80083aa:	1961      	adds	r1, r4, r5
 80083ac:	428b      	cmp	r3, r1
 80083ae:	bf04      	itt	eq
 80083b0:	6819      	ldreq	r1, [r3, #0]
 80083b2:	685b      	ldreq	r3, [r3, #4]
 80083b4:	6063      	str	r3, [r4, #4]
 80083b6:	bf04      	itt	eq
 80083b8:	1949      	addeq	r1, r1, r5
 80083ba:	6021      	streq	r1, [r4, #0]
 80083bc:	6054      	str	r4, [r2, #4]
 80083be:	e7ca      	b.n	8008356 <_free_r+0x26>
 80083c0:	b003      	add	sp, #12
 80083c2:	bd30      	pop	{r4, r5, pc}
 80083c4:	200002d8 	.word	0x200002d8

080083c8 <sbrk_aligned>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	4e0e      	ldr	r6, [pc, #56]	; (8008404 <sbrk_aligned+0x3c>)
 80083cc:	460c      	mov	r4, r1
 80083ce:	6831      	ldr	r1, [r6, #0]
 80083d0:	4605      	mov	r5, r0
 80083d2:	b911      	cbnz	r1, 80083da <sbrk_aligned+0x12>
 80083d4:	f000 f9f0 	bl	80087b8 <_sbrk_r>
 80083d8:	6030      	str	r0, [r6, #0]
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	f000 f9eb 	bl	80087b8 <_sbrk_r>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d00a      	beq.n	80083fc <sbrk_aligned+0x34>
 80083e6:	1cc4      	adds	r4, r0, #3
 80083e8:	f024 0403 	bic.w	r4, r4, #3
 80083ec:	42a0      	cmp	r0, r4
 80083ee:	d007      	beq.n	8008400 <sbrk_aligned+0x38>
 80083f0:	1a21      	subs	r1, r4, r0
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 f9e0 	bl	80087b8 <_sbrk_r>
 80083f8:	3001      	adds	r0, #1
 80083fa:	d101      	bne.n	8008400 <sbrk_aligned+0x38>
 80083fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008400:	4620      	mov	r0, r4
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	200002dc 	.word	0x200002dc

08008408 <_malloc_r>:
 8008408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840c:	1ccd      	adds	r5, r1, #3
 800840e:	f025 0503 	bic.w	r5, r5, #3
 8008412:	3508      	adds	r5, #8
 8008414:	2d0c      	cmp	r5, #12
 8008416:	bf38      	it	cc
 8008418:	250c      	movcc	r5, #12
 800841a:	2d00      	cmp	r5, #0
 800841c:	4607      	mov	r7, r0
 800841e:	db01      	blt.n	8008424 <_malloc_r+0x1c>
 8008420:	42a9      	cmp	r1, r5
 8008422:	d905      	bls.n	8008430 <_malloc_r+0x28>
 8008424:	230c      	movs	r3, #12
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	2600      	movs	r6, #0
 800842a:	4630      	mov	r0, r6
 800842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008430:	4e2e      	ldr	r6, [pc, #184]	; (80084ec <_malloc_r+0xe4>)
 8008432:	f000 fad5 	bl	80089e0 <__malloc_lock>
 8008436:	6833      	ldr	r3, [r6, #0]
 8008438:	461c      	mov	r4, r3
 800843a:	bb34      	cbnz	r4, 800848a <_malloc_r+0x82>
 800843c:	4629      	mov	r1, r5
 800843e:	4638      	mov	r0, r7
 8008440:	f7ff ffc2 	bl	80083c8 <sbrk_aligned>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	4604      	mov	r4, r0
 8008448:	d14d      	bne.n	80084e6 <_malloc_r+0xde>
 800844a:	6834      	ldr	r4, [r6, #0]
 800844c:	4626      	mov	r6, r4
 800844e:	2e00      	cmp	r6, #0
 8008450:	d140      	bne.n	80084d4 <_malloc_r+0xcc>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	4631      	mov	r1, r6
 8008456:	4638      	mov	r0, r7
 8008458:	eb04 0803 	add.w	r8, r4, r3
 800845c:	f000 f9ac 	bl	80087b8 <_sbrk_r>
 8008460:	4580      	cmp	r8, r0
 8008462:	d13a      	bne.n	80084da <_malloc_r+0xd2>
 8008464:	6821      	ldr	r1, [r4, #0]
 8008466:	3503      	adds	r5, #3
 8008468:	1a6d      	subs	r5, r5, r1
 800846a:	f025 0503 	bic.w	r5, r5, #3
 800846e:	3508      	adds	r5, #8
 8008470:	2d0c      	cmp	r5, #12
 8008472:	bf38      	it	cc
 8008474:	250c      	movcc	r5, #12
 8008476:	4629      	mov	r1, r5
 8008478:	4638      	mov	r0, r7
 800847a:	f7ff ffa5 	bl	80083c8 <sbrk_aligned>
 800847e:	3001      	adds	r0, #1
 8008480:	d02b      	beq.n	80084da <_malloc_r+0xd2>
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	442b      	add	r3, r5
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	e00e      	b.n	80084a8 <_malloc_r+0xa0>
 800848a:	6822      	ldr	r2, [r4, #0]
 800848c:	1b52      	subs	r2, r2, r5
 800848e:	d41e      	bmi.n	80084ce <_malloc_r+0xc6>
 8008490:	2a0b      	cmp	r2, #11
 8008492:	d916      	bls.n	80084c2 <_malloc_r+0xba>
 8008494:	1961      	adds	r1, r4, r5
 8008496:	42a3      	cmp	r3, r4
 8008498:	6025      	str	r5, [r4, #0]
 800849a:	bf18      	it	ne
 800849c:	6059      	strne	r1, [r3, #4]
 800849e:	6863      	ldr	r3, [r4, #4]
 80084a0:	bf08      	it	eq
 80084a2:	6031      	streq	r1, [r6, #0]
 80084a4:	5162      	str	r2, [r4, r5]
 80084a6:	604b      	str	r3, [r1, #4]
 80084a8:	4638      	mov	r0, r7
 80084aa:	f104 060b 	add.w	r6, r4, #11
 80084ae:	f000 fa9d 	bl	80089ec <__malloc_unlock>
 80084b2:	f026 0607 	bic.w	r6, r6, #7
 80084b6:	1d23      	adds	r3, r4, #4
 80084b8:	1af2      	subs	r2, r6, r3
 80084ba:	d0b6      	beq.n	800842a <_malloc_r+0x22>
 80084bc:	1b9b      	subs	r3, r3, r6
 80084be:	50a3      	str	r3, [r4, r2]
 80084c0:	e7b3      	b.n	800842a <_malloc_r+0x22>
 80084c2:	6862      	ldr	r2, [r4, #4]
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	bf0c      	ite	eq
 80084c8:	6032      	streq	r2, [r6, #0]
 80084ca:	605a      	strne	r2, [r3, #4]
 80084cc:	e7ec      	b.n	80084a8 <_malloc_r+0xa0>
 80084ce:	4623      	mov	r3, r4
 80084d0:	6864      	ldr	r4, [r4, #4]
 80084d2:	e7b2      	b.n	800843a <_malloc_r+0x32>
 80084d4:	4634      	mov	r4, r6
 80084d6:	6876      	ldr	r6, [r6, #4]
 80084d8:	e7b9      	b.n	800844e <_malloc_r+0x46>
 80084da:	230c      	movs	r3, #12
 80084dc:	603b      	str	r3, [r7, #0]
 80084de:	4638      	mov	r0, r7
 80084e0:	f000 fa84 	bl	80089ec <__malloc_unlock>
 80084e4:	e7a1      	b.n	800842a <_malloc_r+0x22>
 80084e6:	6025      	str	r5, [r4, #0]
 80084e8:	e7de      	b.n	80084a8 <_malloc_r+0xa0>
 80084ea:	bf00      	nop
 80084ec:	200002d8 	.word	0x200002d8

080084f0 <__ssputs_r>:
 80084f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	688e      	ldr	r6, [r1, #8]
 80084f6:	429e      	cmp	r6, r3
 80084f8:	4682      	mov	sl, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	4690      	mov	r8, r2
 80084fe:	461f      	mov	r7, r3
 8008500:	d838      	bhi.n	8008574 <__ssputs_r+0x84>
 8008502:	898a      	ldrh	r2, [r1, #12]
 8008504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008508:	d032      	beq.n	8008570 <__ssputs_r+0x80>
 800850a:	6825      	ldr	r5, [r4, #0]
 800850c:	6909      	ldr	r1, [r1, #16]
 800850e:	eba5 0901 	sub.w	r9, r5, r1
 8008512:	6965      	ldr	r5, [r4, #20]
 8008514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800851c:	3301      	adds	r3, #1
 800851e:	444b      	add	r3, r9
 8008520:	106d      	asrs	r5, r5, #1
 8008522:	429d      	cmp	r5, r3
 8008524:	bf38      	it	cc
 8008526:	461d      	movcc	r5, r3
 8008528:	0553      	lsls	r3, r2, #21
 800852a:	d531      	bpl.n	8008590 <__ssputs_r+0xa0>
 800852c:	4629      	mov	r1, r5
 800852e:	f7ff ff6b 	bl	8008408 <_malloc_r>
 8008532:	4606      	mov	r6, r0
 8008534:	b950      	cbnz	r0, 800854c <__ssputs_r+0x5c>
 8008536:	230c      	movs	r3, #12
 8008538:	f8ca 3000 	str.w	r3, [sl]
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008542:	81a3      	strh	r3, [r4, #12]
 8008544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854c:	6921      	ldr	r1, [r4, #16]
 800854e:	464a      	mov	r2, r9
 8008550:	f7ff fa08 	bl	8007964 <memcpy>
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800855a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	6126      	str	r6, [r4, #16]
 8008562:	6165      	str	r5, [r4, #20]
 8008564:	444e      	add	r6, r9
 8008566:	eba5 0509 	sub.w	r5, r5, r9
 800856a:	6026      	str	r6, [r4, #0]
 800856c:	60a5      	str	r5, [r4, #8]
 800856e:	463e      	mov	r6, r7
 8008570:	42be      	cmp	r6, r7
 8008572:	d900      	bls.n	8008576 <__ssputs_r+0x86>
 8008574:	463e      	mov	r6, r7
 8008576:	6820      	ldr	r0, [r4, #0]
 8008578:	4632      	mov	r2, r6
 800857a:	4641      	mov	r1, r8
 800857c:	f000 fa16 	bl	80089ac <memmove>
 8008580:	68a3      	ldr	r3, [r4, #8]
 8008582:	1b9b      	subs	r3, r3, r6
 8008584:	60a3      	str	r3, [r4, #8]
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	4433      	add	r3, r6
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	2000      	movs	r0, #0
 800858e:	e7db      	b.n	8008548 <__ssputs_r+0x58>
 8008590:	462a      	mov	r2, r5
 8008592:	f000 fa31 	bl	80089f8 <_realloc_r>
 8008596:	4606      	mov	r6, r0
 8008598:	2800      	cmp	r0, #0
 800859a:	d1e1      	bne.n	8008560 <__ssputs_r+0x70>
 800859c:	6921      	ldr	r1, [r4, #16]
 800859e:	4650      	mov	r0, sl
 80085a0:	f7ff fec6 	bl	8008330 <_free_r>
 80085a4:	e7c7      	b.n	8008536 <__ssputs_r+0x46>
	...

080085a8 <_svfiprintf_r>:
 80085a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	4698      	mov	r8, r3
 80085ae:	898b      	ldrh	r3, [r1, #12]
 80085b0:	061b      	lsls	r3, r3, #24
 80085b2:	b09d      	sub	sp, #116	; 0x74
 80085b4:	4607      	mov	r7, r0
 80085b6:	460d      	mov	r5, r1
 80085b8:	4614      	mov	r4, r2
 80085ba:	d50e      	bpl.n	80085da <_svfiprintf_r+0x32>
 80085bc:	690b      	ldr	r3, [r1, #16]
 80085be:	b963      	cbnz	r3, 80085da <_svfiprintf_r+0x32>
 80085c0:	2140      	movs	r1, #64	; 0x40
 80085c2:	f7ff ff21 	bl	8008408 <_malloc_r>
 80085c6:	6028      	str	r0, [r5, #0]
 80085c8:	6128      	str	r0, [r5, #16]
 80085ca:	b920      	cbnz	r0, 80085d6 <_svfiprintf_r+0x2e>
 80085cc:	230c      	movs	r3, #12
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085d4:	e0d1      	b.n	800877a <_svfiprintf_r+0x1d2>
 80085d6:	2340      	movs	r3, #64	; 0x40
 80085d8:	616b      	str	r3, [r5, #20]
 80085da:	2300      	movs	r3, #0
 80085dc:	9309      	str	r3, [sp, #36]	; 0x24
 80085de:	2320      	movs	r3, #32
 80085e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085e8:	2330      	movs	r3, #48	; 0x30
 80085ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008794 <_svfiprintf_r+0x1ec>
 80085ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085f2:	f04f 0901 	mov.w	r9, #1
 80085f6:	4623      	mov	r3, r4
 80085f8:	469a      	mov	sl, r3
 80085fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085fe:	b10a      	cbz	r2, 8008604 <_svfiprintf_r+0x5c>
 8008600:	2a25      	cmp	r2, #37	; 0x25
 8008602:	d1f9      	bne.n	80085f8 <_svfiprintf_r+0x50>
 8008604:	ebba 0b04 	subs.w	fp, sl, r4
 8008608:	d00b      	beq.n	8008622 <_svfiprintf_r+0x7a>
 800860a:	465b      	mov	r3, fp
 800860c:	4622      	mov	r2, r4
 800860e:	4629      	mov	r1, r5
 8008610:	4638      	mov	r0, r7
 8008612:	f7ff ff6d 	bl	80084f0 <__ssputs_r>
 8008616:	3001      	adds	r0, #1
 8008618:	f000 80aa 	beq.w	8008770 <_svfiprintf_r+0x1c8>
 800861c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800861e:	445a      	add	r2, fp
 8008620:	9209      	str	r2, [sp, #36]	; 0x24
 8008622:	f89a 3000 	ldrb.w	r3, [sl]
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80a2 	beq.w	8008770 <_svfiprintf_r+0x1c8>
 800862c:	2300      	movs	r3, #0
 800862e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008636:	f10a 0a01 	add.w	sl, sl, #1
 800863a:	9304      	str	r3, [sp, #16]
 800863c:	9307      	str	r3, [sp, #28]
 800863e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008642:	931a      	str	r3, [sp, #104]	; 0x68
 8008644:	4654      	mov	r4, sl
 8008646:	2205      	movs	r2, #5
 8008648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800864c:	4851      	ldr	r0, [pc, #324]	; (8008794 <_svfiprintf_r+0x1ec>)
 800864e:	f7f7 fdc7 	bl	80001e0 <memchr>
 8008652:	9a04      	ldr	r2, [sp, #16]
 8008654:	b9d8      	cbnz	r0, 800868e <_svfiprintf_r+0xe6>
 8008656:	06d0      	lsls	r0, r2, #27
 8008658:	bf44      	itt	mi
 800865a:	2320      	movmi	r3, #32
 800865c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008660:	0711      	lsls	r1, r2, #28
 8008662:	bf44      	itt	mi
 8008664:	232b      	movmi	r3, #43	; 0x2b
 8008666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800866a:	f89a 3000 	ldrb.w	r3, [sl]
 800866e:	2b2a      	cmp	r3, #42	; 0x2a
 8008670:	d015      	beq.n	800869e <_svfiprintf_r+0xf6>
 8008672:	9a07      	ldr	r2, [sp, #28]
 8008674:	4654      	mov	r4, sl
 8008676:	2000      	movs	r0, #0
 8008678:	f04f 0c0a 	mov.w	ip, #10
 800867c:	4621      	mov	r1, r4
 800867e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008682:	3b30      	subs	r3, #48	; 0x30
 8008684:	2b09      	cmp	r3, #9
 8008686:	d94e      	bls.n	8008726 <_svfiprintf_r+0x17e>
 8008688:	b1b0      	cbz	r0, 80086b8 <_svfiprintf_r+0x110>
 800868a:	9207      	str	r2, [sp, #28]
 800868c:	e014      	b.n	80086b8 <_svfiprintf_r+0x110>
 800868e:	eba0 0308 	sub.w	r3, r0, r8
 8008692:	fa09 f303 	lsl.w	r3, r9, r3
 8008696:	4313      	orrs	r3, r2
 8008698:	9304      	str	r3, [sp, #16]
 800869a:	46a2      	mov	sl, r4
 800869c:	e7d2      	b.n	8008644 <_svfiprintf_r+0x9c>
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	1d19      	adds	r1, r3, #4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	9103      	str	r1, [sp, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	bfbb      	ittet	lt
 80086aa:	425b      	neglt	r3, r3
 80086ac:	f042 0202 	orrlt.w	r2, r2, #2
 80086b0:	9307      	strge	r3, [sp, #28]
 80086b2:	9307      	strlt	r3, [sp, #28]
 80086b4:	bfb8      	it	lt
 80086b6:	9204      	strlt	r2, [sp, #16]
 80086b8:	7823      	ldrb	r3, [r4, #0]
 80086ba:	2b2e      	cmp	r3, #46	; 0x2e
 80086bc:	d10c      	bne.n	80086d8 <_svfiprintf_r+0x130>
 80086be:	7863      	ldrb	r3, [r4, #1]
 80086c0:	2b2a      	cmp	r3, #42	; 0x2a
 80086c2:	d135      	bne.n	8008730 <_svfiprintf_r+0x188>
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	1d1a      	adds	r2, r3, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	9203      	str	r2, [sp, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bfb8      	it	lt
 80086d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086d4:	3402      	adds	r4, #2
 80086d6:	9305      	str	r3, [sp, #20]
 80086d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087a4 <_svfiprintf_r+0x1fc>
 80086dc:	7821      	ldrb	r1, [r4, #0]
 80086de:	2203      	movs	r2, #3
 80086e0:	4650      	mov	r0, sl
 80086e2:	f7f7 fd7d 	bl	80001e0 <memchr>
 80086e6:	b140      	cbz	r0, 80086fa <_svfiprintf_r+0x152>
 80086e8:	2340      	movs	r3, #64	; 0x40
 80086ea:	eba0 000a 	sub.w	r0, r0, sl
 80086ee:	fa03 f000 	lsl.w	r0, r3, r0
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	4303      	orrs	r3, r0
 80086f6:	3401      	adds	r4, #1
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086fe:	4826      	ldr	r0, [pc, #152]	; (8008798 <_svfiprintf_r+0x1f0>)
 8008700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008704:	2206      	movs	r2, #6
 8008706:	f7f7 fd6b 	bl	80001e0 <memchr>
 800870a:	2800      	cmp	r0, #0
 800870c:	d038      	beq.n	8008780 <_svfiprintf_r+0x1d8>
 800870e:	4b23      	ldr	r3, [pc, #140]	; (800879c <_svfiprintf_r+0x1f4>)
 8008710:	bb1b      	cbnz	r3, 800875a <_svfiprintf_r+0x1b2>
 8008712:	9b03      	ldr	r3, [sp, #12]
 8008714:	3307      	adds	r3, #7
 8008716:	f023 0307 	bic.w	r3, r3, #7
 800871a:	3308      	adds	r3, #8
 800871c:	9303      	str	r3, [sp, #12]
 800871e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008720:	4433      	add	r3, r6
 8008722:	9309      	str	r3, [sp, #36]	; 0x24
 8008724:	e767      	b.n	80085f6 <_svfiprintf_r+0x4e>
 8008726:	fb0c 3202 	mla	r2, ip, r2, r3
 800872a:	460c      	mov	r4, r1
 800872c:	2001      	movs	r0, #1
 800872e:	e7a5      	b.n	800867c <_svfiprintf_r+0xd4>
 8008730:	2300      	movs	r3, #0
 8008732:	3401      	adds	r4, #1
 8008734:	9305      	str	r3, [sp, #20]
 8008736:	4619      	mov	r1, r3
 8008738:	f04f 0c0a 	mov.w	ip, #10
 800873c:	4620      	mov	r0, r4
 800873e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008742:	3a30      	subs	r2, #48	; 0x30
 8008744:	2a09      	cmp	r2, #9
 8008746:	d903      	bls.n	8008750 <_svfiprintf_r+0x1a8>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0c5      	beq.n	80086d8 <_svfiprintf_r+0x130>
 800874c:	9105      	str	r1, [sp, #20]
 800874e:	e7c3      	b.n	80086d8 <_svfiprintf_r+0x130>
 8008750:	fb0c 2101 	mla	r1, ip, r1, r2
 8008754:	4604      	mov	r4, r0
 8008756:	2301      	movs	r3, #1
 8008758:	e7f0      	b.n	800873c <_svfiprintf_r+0x194>
 800875a:	ab03      	add	r3, sp, #12
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	462a      	mov	r2, r5
 8008760:	4b0f      	ldr	r3, [pc, #60]	; (80087a0 <_svfiprintf_r+0x1f8>)
 8008762:	a904      	add	r1, sp, #16
 8008764:	4638      	mov	r0, r7
 8008766:	f7fb fef5 	bl	8004554 <_printf_float>
 800876a:	1c42      	adds	r2, r0, #1
 800876c:	4606      	mov	r6, r0
 800876e:	d1d6      	bne.n	800871e <_svfiprintf_r+0x176>
 8008770:	89ab      	ldrh	r3, [r5, #12]
 8008772:	065b      	lsls	r3, r3, #25
 8008774:	f53f af2c 	bmi.w	80085d0 <_svfiprintf_r+0x28>
 8008778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800877a:	b01d      	add	sp, #116	; 0x74
 800877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008780:	ab03      	add	r3, sp, #12
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	462a      	mov	r2, r5
 8008786:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <_svfiprintf_r+0x1f8>)
 8008788:	a904      	add	r1, sp, #16
 800878a:	4638      	mov	r0, r7
 800878c:	f7fc f986 	bl	8004a9c <_printf_i>
 8008790:	e7eb      	b.n	800876a <_svfiprintf_r+0x1c2>
 8008792:	bf00      	nop
 8008794:	080092a4 	.word	0x080092a4
 8008798:	080092ae 	.word	0x080092ae
 800879c:	08004555 	.word	0x08004555
 80087a0:	080084f1 	.word	0x080084f1
 80087a4:	080092aa 	.word	0x080092aa

080087a8 <nan>:
 80087a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80087b0 <nan+0x8>
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	00000000 	.word	0x00000000
 80087b4:	7ff80000 	.word	0x7ff80000

080087b8 <_sbrk_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4d06      	ldr	r5, [pc, #24]	; (80087d4 <_sbrk_r+0x1c>)
 80087bc:	2300      	movs	r3, #0
 80087be:	4604      	mov	r4, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	602b      	str	r3, [r5, #0]
 80087c4:	f7f8 fd2a 	bl	800121c <_sbrk>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_sbrk_r+0x1a>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_sbrk_r+0x1a>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	200002e0 	.word	0x200002e0

080087d8 <__sread>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	460c      	mov	r4, r1
 80087dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e0:	f000 fa92 	bl	8008d08 <_read_r>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	bfab      	itete	ge
 80087e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087ea:	89a3      	ldrhlt	r3, [r4, #12]
 80087ec:	181b      	addge	r3, r3, r0
 80087ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087f2:	bfac      	ite	ge
 80087f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80087f6:	81a3      	strhlt	r3, [r4, #12]
 80087f8:	bd10      	pop	{r4, pc}

080087fa <__swrite>:
 80087fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087fe:	461f      	mov	r7, r3
 8008800:	898b      	ldrh	r3, [r1, #12]
 8008802:	05db      	lsls	r3, r3, #23
 8008804:	4605      	mov	r5, r0
 8008806:	460c      	mov	r4, r1
 8008808:	4616      	mov	r6, r2
 800880a:	d505      	bpl.n	8008818 <__swrite+0x1e>
 800880c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008810:	2302      	movs	r3, #2
 8008812:	2200      	movs	r2, #0
 8008814:	f000 f8b8 	bl	8008988 <_lseek_r>
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800881e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	4632      	mov	r2, r6
 8008826:	463b      	mov	r3, r7
 8008828:	4628      	mov	r0, r5
 800882a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800882e:	f000 b837 	b.w	80088a0 <_write_r>

08008832 <__sseek>:
 8008832:	b510      	push	{r4, lr}
 8008834:	460c      	mov	r4, r1
 8008836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883a:	f000 f8a5 	bl	8008988 <_lseek_r>
 800883e:	1c43      	adds	r3, r0, #1
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	bf15      	itete	ne
 8008844:	6560      	strne	r0, [r4, #84]	; 0x54
 8008846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800884a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800884e:	81a3      	strheq	r3, [r4, #12]
 8008850:	bf18      	it	ne
 8008852:	81a3      	strhne	r3, [r4, #12]
 8008854:	bd10      	pop	{r4, pc}

08008856 <__sclose>:
 8008856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885a:	f000 b851 	b.w	8008900 <_close_r>

0800885e <strncmp>:
 800885e:	b510      	push	{r4, lr}
 8008860:	b17a      	cbz	r2, 8008882 <strncmp+0x24>
 8008862:	4603      	mov	r3, r0
 8008864:	3901      	subs	r1, #1
 8008866:	1884      	adds	r4, r0, r2
 8008868:	f813 0b01 	ldrb.w	r0, [r3], #1
 800886c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008870:	4290      	cmp	r0, r2
 8008872:	d101      	bne.n	8008878 <strncmp+0x1a>
 8008874:	42a3      	cmp	r3, r4
 8008876:	d101      	bne.n	800887c <strncmp+0x1e>
 8008878:	1a80      	subs	r0, r0, r2
 800887a:	bd10      	pop	{r4, pc}
 800887c:	2800      	cmp	r0, #0
 800887e:	d1f3      	bne.n	8008868 <strncmp+0xa>
 8008880:	e7fa      	b.n	8008878 <strncmp+0x1a>
 8008882:	4610      	mov	r0, r2
 8008884:	e7f9      	b.n	800887a <strncmp+0x1c>

08008886 <__ascii_wctomb>:
 8008886:	b149      	cbz	r1, 800889c <__ascii_wctomb+0x16>
 8008888:	2aff      	cmp	r2, #255	; 0xff
 800888a:	bf85      	ittet	hi
 800888c:	238a      	movhi	r3, #138	; 0x8a
 800888e:	6003      	strhi	r3, [r0, #0]
 8008890:	700a      	strbls	r2, [r1, #0]
 8008892:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008896:	bf98      	it	ls
 8008898:	2001      	movls	r0, #1
 800889a:	4770      	bx	lr
 800889c:	4608      	mov	r0, r1
 800889e:	4770      	bx	lr

080088a0 <_write_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4d07      	ldr	r5, [pc, #28]	; (80088c0 <_write_r+0x20>)
 80088a4:	4604      	mov	r4, r0
 80088a6:	4608      	mov	r0, r1
 80088a8:	4611      	mov	r1, r2
 80088aa:	2200      	movs	r2, #0
 80088ac:	602a      	str	r2, [r5, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	f7f8 fbd6 	bl	8001060 <_write>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_write_r+0x1e>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	b103      	cbz	r3, 80088be <_write_r+0x1e>
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	200002e0 	.word	0x200002e0

080088c4 <__assert_func>:
 80088c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088c6:	4614      	mov	r4, r2
 80088c8:	461a      	mov	r2, r3
 80088ca:	4b09      	ldr	r3, [pc, #36]	; (80088f0 <__assert_func+0x2c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4605      	mov	r5, r0
 80088d0:	68d8      	ldr	r0, [r3, #12]
 80088d2:	b14c      	cbz	r4, 80088e8 <__assert_func+0x24>
 80088d4:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <__assert_func+0x30>)
 80088d6:	9100      	str	r1, [sp, #0]
 80088d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088dc:	4906      	ldr	r1, [pc, #24]	; (80088f8 <__assert_func+0x34>)
 80088de:	462b      	mov	r3, r5
 80088e0:	f000 f81e 	bl	8008920 <fiprintf>
 80088e4:	f000 fa22 	bl	8008d2c <abort>
 80088e8:	4b04      	ldr	r3, [pc, #16]	; (80088fc <__assert_func+0x38>)
 80088ea:	461c      	mov	r4, r3
 80088ec:	e7f3      	b.n	80088d6 <__assert_func+0x12>
 80088ee:	bf00      	nop
 80088f0:	2000000c 	.word	0x2000000c
 80088f4:	080092b5 	.word	0x080092b5
 80088f8:	080092c2 	.word	0x080092c2
 80088fc:	080092f0 	.word	0x080092f0

08008900 <_close_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d06      	ldr	r5, [pc, #24]	; (800891c <_close_r+0x1c>)
 8008904:	2300      	movs	r3, #0
 8008906:	4604      	mov	r4, r0
 8008908:	4608      	mov	r0, r1
 800890a:	602b      	str	r3, [r5, #0]
 800890c:	f7f8 fc51 	bl	80011b2 <_close>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d102      	bne.n	800891a <_close_r+0x1a>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	b103      	cbz	r3, 800891a <_close_r+0x1a>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	200002e0 	.word	0x200002e0

08008920 <fiprintf>:
 8008920:	b40e      	push	{r1, r2, r3}
 8008922:	b503      	push	{r0, r1, lr}
 8008924:	4601      	mov	r1, r0
 8008926:	ab03      	add	r3, sp, #12
 8008928:	4805      	ldr	r0, [pc, #20]	; (8008940 <fiprintf+0x20>)
 800892a:	f853 2b04 	ldr.w	r2, [r3], #4
 800892e:	6800      	ldr	r0, [r0, #0]
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	f000 f8b9 	bl	8008aa8 <_vfiprintf_r>
 8008936:	b002      	add	sp, #8
 8008938:	f85d eb04 	ldr.w	lr, [sp], #4
 800893c:	b003      	add	sp, #12
 800893e:	4770      	bx	lr
 8008940:	2000000c 	.word	0x2000000c

08008944 <_fstat_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d07      	ldr	r5, [pc, #28]	; (8008964 <_fstat_r+0x20>)
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	4608      	mov	r0, r1
 800894e:	4611      	mov	r1, r2
 8008950:	602b      	str	r3, [r5, #0]
 8008952:	f7f8 fc3a 	bl	80011ca <_fstat>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	d102      	bne.n	8008960 <_fstat_r+0x1c>
 800895a:	682b      	ldr	r3, [r5, #0]
 800895c:	b103      	cbz	r3, 8008960 <_fstat_r+0x1c>
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	bd38      	pop	{r3, r4, r5, pc}
 8008962:	bf00      	nop
 8008964:	200002e0 	.word	0x200002e0

08008968 <_isatty_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4d06      	ldr	r5, [pc, #24]	; (8008984 <_isatty_r+0x1c>)
 800896c:	2300      	movs	r3, #0
 800896e:	4604      	mov	r4, r0
 8008970:	4608      	mov	r0, r1
 8008972:	602b      	str	r3, [r5, #0]
 8008974:	f7f8 fc39 	bl	80011ea <_isatty>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d102      	bne.n	8008982 <_isatty_r+0x1a>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	b103      	cbz	r3, 8008982 <_isatty_r+0x1a>
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	200002e0 	.word	0x200002e0

08008988 <_lseek_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4d07      	ldr	r5, [pc, #28]	; (80089a8 <_lseek_r+0x20>)
 800898c:	4604      	mov	r4, r0
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	2200      	movs	r2, #0
 8008994:	602a      	str	r2, [r5, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	f7f8 fc32 	bl	8001200 <_lseek>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_lseek_r+0x1e>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_lseek_r+0x1e>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	200002e0 	.word	0x200002e0

080089ac <memmove>:
 80089ac:	4288      	cmp	r0, r1
 80089ae:	b510      	push	{r4, lr}
 80089b0:	eb01 0402 	add.w	r4, r1, r2
 80089b4:	d902      	bls.n	80089bc <memmove+0x10>
 80089b6:	4284      	cmp	r4, r0
 80089b8:	4623      	mov	r3, r4
 80089ba:	d807      	bhi.n	80089cc <memmove+0x20>
 80089bc:	1e43      	subs	r3, r0, #1
 80089be:	42a1      	cmp	r1, r4
 80089c0:	d008      	beq.n	80089d4 <memmove+0x28>
 80089c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089ca:	e7f8      	b.n	80089be <memmove+0x12>
 80089cc:	4402      	add	r2, r0
 80089ce:	4601      	mov	r1, r0
 80089d0:	428a      	cmp	r2, r1
 80089d2:	d100      	bne.n	80089d6 <memmove+0x2a>
 80089d4:	bd10      	pop	{r4, pc}
 80089d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089de:	e7f7      	b.n	80089d0 <memmove+0x24>

080089e0 <__malloc_lock>:
 80089e0:	4801      	ldr	r0, [pc, #4]	; (80089e8 <__malloc_lock+0x8>)
 80089e2:	f7fe bf3e 	b.w	8007862 <__retarget_lock_acquire_recursive>
 80089e6:	bf00      	nop
 80089e8:	200002d4 	.word	0x200002d4

080089ec <__malloc_unlock>:
 80089ec:	4801      	ldr	r0, [pc, #4]	; (80089f4 <__malloc_unlock+0x8>)
 80089ee:	f7fe bf39 	b.w	8007864 <__retarget_lock_release_recursive>
 80089f2:	bf00      	nop
 80089f4:	200002d4 	.word	0x200002d4

080089f8 <_realloc_r>:
 80089f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fc:	4680      	mov	r8, r0
 80089fe:	4614      	mov	r4, r2
 8008a00:	460e      	mov	r6, r1
 8008a02:	b921      	cbnz	r1, 8008a0e <_realloc_r+0x16>
 8008a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	4611      	mov	r1, r2
 8008a0a:	f7ff bcfd 	b.w	8008408 <_malloc_r>
 8008a0e:	b92a      	cbnz	r2, 8008a1c <_realloc_r+0x24>
 8008a10:	f7ff fc8e 	bl	8008330 <_free_r>
 8008a14:	4625      	mov	r5, r4
 8008a16:	4628      	mov	r0, r5
 8008a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1c:	f000 f98d 	bl	8008d3a <_malloc_usable_size_r>
 8008a20:	4284      	cmp	r4, r0
 8008a22:	4607      	mov	r7, r0
 8008a24:	d802      	bhi.n	8008a2c <_realloc_r+0x34>
 8008a26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a2a:	d812      	bhi.n	8008a52 <_realloc_r+0x5a>
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	4640      	mov	r0, r8
 8008a30:	f7ff fcea 	bl	8008408 <_malloc_r>
 8008a34:	4605      	mov	r5, r0
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d0ed      	beq.n	8008a16 <_realloc_r+0x1e>
 8008a3a:	42bc      	cmp	r4, r7
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	4631      	mov	r1, r6
 8008a40:	bf28      	it	cs
 8008a42:	463a      	movcs	r2, r7
 8008a44:	f7fe ff8e 	bl	8007964 <memcpy>
 8008a48:	4631      	mov	r1, r6
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	f7ff fc70 	bl	8008330 <_free_r>
 8008a50:	e7e1      	b.n	8008a16 <_realloc_r+0x1e>
 8008a52:	4635      	mov	r5, r6
 8008a54:	e7df      	b.n	8008a16 <_realloc_r+0x1e>

08008a56 <__sfputc_r>:
 8008a56:	6893      	ldr	r3, [r2, #8]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	b410      	push	{r4}
 8008a5e:	6093      	str	r3, [r2, #8]
 8008a60:	da08      	bge.n	8008a74 <__sfputc_r+0x1e>
 8008a62:	6994      	ldr	r4, [r2, #24]
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	db01      	blt.n	8008a6c <__sfputc_r+0x16>
 8008a68:	290a      	cmp	r1, #10
 8008a6a:	d103      	bne.n	8008a74 <__sfputc_r+0x1e>
 8008a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a70:	f7fd ba92 	b.w	8005f98 <__swbuf_r>
 8008a74:	6813      	ldr	r3, [r2, #0]
 8008a76:	1c58      	adds	r0, r3, #1
 8008a78:	6010      	str	r0, [r2, #0]
 8008a7a:	7019      	strb	r1, [r3, #0]
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <__sfputs_r>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	4606      	mov	r6, r0
 8008a88:	460f      	mov	r7, r1
 8008a8a:	4614      	mov	r4, r2
 8008a8c:	18d5      	adds	r5, r2, r3
 8008a8e:	42ac      	cmp	r4, r5
 8008a90:	d101      	bne.n	8008a96 <__sfputs_r+0x12>
 8008a92:	2000      	movs	r0, #0
 8008a94:	e007      	b.n	8008aa6 <__sfputs_r+0x22>
 8008a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a9a:	463a      	mov	r2, r7
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7ff ffda 	bl	8008a56 <__sfputc_r>
 8008aa2:	1c43      	adds	r3, r0, #1
 8008aa4:	d1f3      	bne.n	8008a8e <__sfputs_r+0xa>
 8008aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008aa8 <_vfiprintf_r>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	460d      	mov	r5, r1
 8008aae:	b09d      	sub	sp, #116	; 0x74
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	4698      	mov	r8, r3
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	b118      	cbz	r0, 8008ac0 <_vfiprintf_r+0x18>
 8008ab8:	6983      	ldr	r3, [r0, #24]
 8008aba:	b90b      	cbnz	r3, 8008ac0 <_vfiprintf_r+0x18>
 8008abc:	f7fe fac0 	bl	8007040 <__sinit>
 8008ac0:	4b89      	ldr	r3, [pc, #548]	; (8008ce8 <_vfiprintf_r+0x240>)
 8008ac2:	429d      	cmp	r5, r3
 8008ac4:	d11b      	bne.n	8008afe <_vfiprintf_r+0x56>
 8008ac6:	6875      	ldr	r5, [r6, #4]
 8008ac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aca:	07d9      	lsls	r1, r3, #31
 8008acc:	d405      	bmi.n	8008ada <_vfiprintf_r+0x32>
 8008ace:	89ab      	ldrh	r3, [r5, #12]
 8008ad0:	059a      	lsls	r2, r3, #22
 8008ad2:	d402      	bmi.n	8008ada <_vfiprintf_r+0x32>
 8008ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ad6:	f7fe fec4 	bl	8007862 <__retarget_lock_acquire_recursive>
 8008ada:	89ab      	ldrh	r3, [r5, #12]
 8008adc:	071b      	lsls	r3, r3, #28
 8008ade:	d501      	bpl.n	8008ae4 <_vfiprintf_r+0x3c>
 8008ae0:	692b      	ldr	r3, [r5, #16]
 8008ae2:	b9eb      	cbnz	r3, 8008b20 <_vfiprintf_r+0x78>
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7fd faa8 	bl	800603c <__swsetup_r>
 8008aec:	b1c0      	cbz	r0, 8008b20 <_vfiprintf_r+0x78>
 8008aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008af0:	07dc      	lsls	r4, r3, #31
 8008af2:	d50e      	bpl.n	8008b12 <_vfiprintf_r+0x6a>
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008af8:	b01d      	add	sp, #116	; 0x74
 8008afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afe:	4b7b      	ldr	r3, [pc, #492]	; (8008cec <_vfiprintf_r+0x244>)
 8008b00:	429d      	cmp	r5, r3
 8008b02:	d101      	bne.n	8008b08 <_vfiprintf_r+0x60>
 8008b04:	68b5      	ldr	r5, [r6, #8]
 8008b06:	e7df      	b.n	8008ac8 <_vfiprintf_r+0x20>
 8008b08:	4b79      	ldr	r3, [pc, #484]	; (8008cf0 <_vfiprintf_r+0x248>)
 8008b0a:	429d      	cmp	r5, r3
 8008b0c:	bf08      	it	eq
 8008b0e:	68f5      	ldreq	r5, [r6, #12]
 8008b10:	e7da      	b.n	8008ac8 <_vfiprintf_r+0x20>
 8008b12:	89ab      	ldrh	r3, [r5, #12]
 8008b14:	0598      	lsls	r0, r3, #22
 8008b16:	d4ed      	bmi.n	8008af4 <_vfiprintf_r+0x4c>
 8008b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b1a:	f7fe fea3 	bl	8007864 <__retarget_lock_release_recursive>
 8008b1e:	e7e9      	b.n	8008af4 <_vfiprintf_r+0x4c>
 8008b20:	2300      	movs	r3, #0
 8008b22:	9309      	str	r3, [sp, #36]	; 0x24
 8008b24:	2320      	movs	r3, #32
 8008b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b2e:	2330      	movs	r3, #48	; 0x30
 8008b30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cf4 <_vfiprintf_r+0x24c>
 8008b34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b38:	f04f 0901 	mov.w	r9, #1
 8008b3c:	4623      	mov	r3, r4
 8008b3e:	469a      	mov	sl, r3
 8008b40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b44:	b10a      	cbz	r2, 8008b4a <_vfiprintf_r+0xa2>
 8008b46:	2a25      	cmp	r2, #37	; 0x25
 8008b48:	d1f9      	bne.n	8008b3e <_vfiprintf_r+0x96>
 8008b4a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b4e:	d00b      	beq.n	8008b68 <_vfiprintf_r+0xc0>
 8008b50:	465b      	mov	r3, fp
 8008b52:	4622      	mov	r2, r4
 8008b54:	4629      	mov	r1, r5
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff ff94 	bl	8008a84 <__sfputs_r>
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	f000 80aa 	beq.w	8008cb6 <_vfiprintf_r+0x20e>
 8008b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b64:	445a      	add	r2, fp
 8008b66:	9209      	str	r2, [sp, #36]	; 0x24
 8008b68:	f89a 3000 	ldrb.w	r3, [sl]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 80a2 	beq.w	8008cb6 <_vfiprintf_r+0x20e>
 8008b72:	2300      	movs	r3, #0
 8008b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b7c:	f10a 0a01 	add.w	sl, sl, #1
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	9307      	str	r3, [sp, #28]
 8008b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b88:	931a      	str	r3, [sp, #104]	; 0x68
 8008b8a:	4654      	mov	r4, sl
 8008b8c:	2205      	movs	r2, #5
 8008b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b92:	4858      	ldr	r0, [pc, #352]	; (8008cf4 <_vfiprintf_r+0x24c>)
 8008b94:	f7f7 fb24 	bl	80001e0 <memchr>
 8008b98:	9a04      	ldr	r2, [sp, #16]
 8008b9a:	b9d8      	cbnz	r0, 8008bd4 <_vfiprintf_r+0x12c>
 8008b9c:	06d1      	lsls	r1, r2, #27
 8008b9e:	bf44      	itt	mi
 8008ba0:	2320      	movmi	r3, #32
 8008ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba6:	0713      	lsls	r3, r2, #28
 8008ba8:	bf44      	itt	mi
 8008baa:	232b      	movmi	r3, #43	; 0x2b
 8008bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb6:	d015      	beq.n	8008be4 <_vfiprintf_r+0x13c>
 8008bb8:	9a07      	ldr	r2, [sp, #28]
 8008bba:	4654      	mov	r4, sl
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	f04f 0c0a 	mov.w	ip, #10
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bc8:	3b30      	subs	r3, #48	; 0x30
 8008bca:	2b09      	cmp	r3, #9
 8008bcc:	d94e      	bls.n	8008c6c <_vfiprintf_r+0x1c4>
 8008bce:	b1b0      	cbz	r0, 8008bfe <_vfiprintf_r+0x156>
 8008bd0:	9207      	str	r2, [sp, #28]
 8008bd2:	e014      	b.n	8008bfe <_vfiprintf_r+0x156>
 8008bd4:	eba0 0308 	sub.w	r3, r0, r8
 8008bd8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	9304      	str	r3, [sp, #16]
 8008be0:	46a2      	mov	sl, r4
 8008be2:	e7d2      	b.n	8008b8a <_vfiprintf_r+0xe2>
 8008be4:	9b03      	ldr	r3, [sp, #12]
 8008be6:	1d19      	adds	r1, r3, #4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	9103      	str	r1, [sp, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bfbb      	ittet	lt
 8008bf0:	425b      	neglt	r3, r3
 8008bf2:	f042 0202 	orrlt.w	r2, r2, #2
 8008bf6:	9307      	strge	r3, [sp, #28]
 8008bf8:	9307      	strlt	r3, [sp, #28]
 8008bfa:	bfb8      	it	lt
 8008bfc:	9204      	strlt	r2, [sp, #16]
 8008bfe:	7823      	ldrb	r3, [r4, #0]
 8008c00:	2b2e      	cmp	r3, #46	; 0x2e
 8008c02:	d10c      	bne.n	8008c1e <_vfiprintf_r+0x176>
 8008c04:	7863      	ldrb	r3, [r4, #1]
 8008c06:	2b2a      	cmp	r3, #42	; 0x2a
 8008c08:	d135      	bne.n	8008c76 <_vfiprintf_r+0x1ce>
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	1d1a      	adds	r2, r3, #4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	9203      	str	r2, [sp, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	bfb8      	it	lt
 8008c16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c1a:	3402      	adds	r4, #2
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d04 <_vfiprintf_r+0x25c>
 8008c22:	7821      	ldrb	r1, [r4, #0]
 8008c24:	2203      	movs	r2, #3
 8008c26:	4650      	mov	r0, sl
 8008c28:	f7f7 fada 	bl	80001e0 <memchr>
 8008c2c:	b140      	cbz	r0, 8008c40 <_vfiprintf_r+0x198>
 8008c2e:	2340      	movs	r3, #64	; 0x40
 8008c30:	eba0 000a 	sub.w	r0, r0, sl
 8008c34:	fa03 f000 	lsl.w	r0, r3, r0
 8008c38:	9b04      	ldr	r3, [sp, #16]
 8008c3a:	4303      	orrs	r3, r0
 8008c3c:	3401      	adds	r4, #1
 8008c3e:	9304      	str	r3, [sp, #16]
 8008c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c44:	482c      	ldr	r0, [pc, #176]	; (8008cf8 <_vfiprintf_r+0x250>)
 8008c46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c4a:	2206      	movs	r2, #6
 8008c4c:	f7f7 fac8 	bl	80001e0 <memchr>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d03f      	beq.n	8008cd4 <_vfiprintf_r+0x22c>
 8008c54:	4b29      	ldr	r3, [pc, #164]	; (8008cfc <_vfiprintf_r+0x254>)
 8008c56:	bb1b      	cbnz	r3, 8008ca0 <_vfiprintf_r+0x1f8>
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	3307      	adds	r3, #7
 8008c5c:	f023 0307 	bic.w	r3, r3, #7
 8008c60:	3308      	adds	r3, #8
 8008c62:	9303      	str	r3, [sp, #12]
 8008c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c66:	443b      	add	r3, r7
 8008c68:	9309      	str	r3, [sp, #36]	; 0x24
 8008c6a:	e767      	b.n	8008b3c <_vfiprintf_r+0x94>
 8008c6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c70:	460c      	mov	r4, r1
 8008c72:	2001      	movs	r0, #1
 8008c74:	e7a5      	b.n	8008bc2 <_vfiprintf_r+0x11a>
 8008c76:	2300      	movs	r3, #0
 8008c78:	3401      	adds	r4, #1
 8008c7a:	9305      	str	r3, [sp, #20]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	f04f 0c0a 	mov.w	ip, #10
 8008c82:	4620      	mov	r0, r4
 8008c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c88:	3a30      	subs	r2, #48	; 0x30
 8008c8a:	2a09      	cmp	r2, #9
 8008c8c:	d903      	bls.n	8008c96 <_vfiprintf_r+0x1ee>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0c5      	beq.n	8008c1e <_vfiprintf_r+0x176>
 8008c92:	9105      	str	r1, [sp, #20]
 8008c94:	e7c3      	b.n	8008c1e <_vfiprintf_r+0x176>
 8008c96:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e7f0      	b.n	8008c82 <_vfiprintf_r+0x1da>
 8008ca0:	ab03      	add	r3, sp, #12
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	462a      	mov	r2, r5
 8008ca6:	4b16      	ldr	r3, [pc, #88]	; (8008d00 <_vfiprintf_r+0x258>)
 8008ca8:	a904      	add	r1, sp, #16
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7fb fc52 	bl	8004554 <_printf_float>
 8008cb0:	4607      	mov	r7, r0
 8008cb2:	1c78      	adds	r0, r7, #1
 8008cb4:	d1d6      	bne.n	8008c64 <_vfiprintf_r+0x1bc>
 8008cb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cb8:	07d9      	lsls	r1, r3, #31
 8008cba:	d405      	bmi.n	8008cc8 <_vfiprintf_r+0x220>
 8008cbc:	89ab      	ldrh	r3, [r5, #12]
 8008cbe:	059a      	lsls	r2, r3, #22
 8008cc0:	d402      	bmi.n	8008cc8 <_vfiprintf_r+0x220>
 8008cc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cc4:	f7fe fdce 	bl	8007864 <__retarget_lock_release_recursive>
 8008cc8:	89ab      	ldrh	r3, [r5, #12]
 8008cca:	065b      	lsls	r3, r3, #25
 8008ccc:	f53f af12 	bmi.w	8008af4 <_vfiprintf_r+0x4c>
 8008cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cd2:	e711      	b.n	8008af8 <_vfiprintf_r+0x50>
 8008cd4:	ab03      	add	r3, sp, #12
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	462a      	mov	r2, r5
 8008cda:	4b09      	ldr	r3, [pc, #36]	; (8008d00 <_vfiprintf_r+0x258>)
 8008cdc:	a904      	add	r1, sp, #16
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f7fb fedc 	bl	8004a9c <_printf_i>
 8008ce4:	e7e4      	b.n	8008cb0 <_vfiprintf_r+0x208>
 8008ce6:	bf00      	nop
 8008ce8:	0800908c 	.word	0x0800908c
 8008cec:	080090ac 	.word	0x080090ac
 8008cf0:	0800906c 	.word	0x0800906c
 8008cf4:	080092a4 	.word	0x080092a4
 8008cf8:	080092ae 	.word	0x080092ae
 8008cfc:	08004555 	.word	0x08004555
 8008d00:	08008a85 	.word	0x08008a85
 8008d04:	080092aa 	.word	0x080092aa

08008d08 <_read_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4d07      	ldr	r5, [pc, #28]	; (8008d28 <_read_r+0x20>)
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	4608      	mov	r0, r1
 8008d10:	4611      	mov	r1, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	602a      	str	r2, [r5, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f7f8 fa2e 	bl	8001178 <_read>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_read_r+0x1e>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_read_r+0x1e>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	200002e0 	.word	0x200002e0

08008d2c <abort>:
 8008d2c:	b508      	push	{r3, lr}
 8008d2e:	2006      	movs	r0, #6
 8008d30:	f000 f834 	bl	8008d9c <raise>
 8008d34:	2001      	movs	r0, #1
 8008d36:	f7f8 fa15 	bl	8001164 <_exit>

08008d3a <_malloc_usable_size_r>:
 8008d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d3e:	1f18      	subs	r0, r3, #4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	bfbc      	itt	lt
 8008d44:	580b      	ldrlt	r3, [r1, r0]
 8008d46:	18c0      	addlt	r0, r0, r3
 8008d48:	4770      	bx	lr

08008d4a <_raise_r>:
 8008d4a:	291f      	cmp	r1, #31
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4604      	mov	r4, r0
 8008d50:	460d      	mov	r5, r1
 8008d52:	d904      	bls.n	8008d5e <_raise_r+0x14>
 8008d54:	2316      	movs	r3, #22
 8008d56:	6003      	str	r3, [r0, #0]
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d5c:	bd38      	pop	{r3, r4, r5, pc}
 8008d5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d60:	b112      	cbz	r2, 8008d68 <_raise_r+0x1e>
 8008d62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d66:	b94b      	cbnz	r3, 8008d7c <_raise_r+0x32>
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 f831 	bl	8008dd0 <_getpid_r>
 8008d6e:	462a      	mov	r2, r5
 8008d70:	4601      	mov	r1, r0
 8008d72:	4620      	mov	r0, r4
 8008d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d78:	f000 b818 	b.w	8008dac <_kill_r>
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d00a      	beq.n	8008d96 <_raise_r+0x4c>
 8008d80:	1c59      	adds	r1, r3, #1
 8008d82:	d103      	bne.n	8008d8c <_raise_r+0x42>
 8008d84:	2316      	movs	r3, #22
 8008d86:	6003      	str	r3, [r0, #0]
 8008d88:	2001      	movs	r0, #1
 8008d8a:	e7e7      	b.n	8008d5c <_raise_r+0x12>
 8008d8c:	2400      	movs	r4, #0
 8008d8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d92:	4628      	mov	r0, r5
 8008d94:	4798      	blx	r3
 8008d96:	2000      	movs	r0, #0
 8008d98:	e7e0      	b.n	8008d5c <_raise_r+0x12>
	...

08008d9c <raise>:
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <raise+0xc>)
 8008d9e:	4601      	mov	r1, r0
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	f7ff bfd2 	b.w	8008d4a <_raise_r>
 8008da6:	bf00      	nop
 8008da8:	2000000c 	.word	0x2000000c

08008dac <_kill_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4d07      	ldr	r5, [pc, #28]	; (8008dcc <_kill_r+0x20>)
 8008db0:	2300      	movs	r3, #0
 8008db2:	4604      	mov	r4, r0
 8008db4:	4608      	mov	r0, r1
 8008db6:	4611      	mov	r1, r2
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	f7f8 f9c3 	bl	8001144 <_kill>
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	d102      	bne.n	8008dc8 <_kill_r+0x1c>
 8008dc2:	682b      	ldr	r3, [r5, #0]
 8008dc4:	b103      	cbz	r3, 8008dc8 <_kill_r+0x1c>
 8008dc6:	6023      	str	r3, [r4, #0]
 8008dc8:	bd38      	pop	{r3, r4, r5, pc}
 8008dca:	bf00      	nop
 8008dcc:	200002e0 	.word	0x200002e0

08008dd0 <_getpid_r>:
 8008dd0:	f7f8 b9b0 	b.w	8001134 <_getpid>

08008dd4 <_init>:
 8008dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd6:	bf00      	nop
 8008dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dda:	bc08      	pop	{r3}
 8008ddc:	469e      	mov	lr, r3
 8008dde:	4770      	bx	lr

08008de0 <_fini>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	bf00      	nop
 8008de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de6:	bc08      	pop	{r3}
 8008de8:	469e      	mov	lr, r3
 8008dea:	4770      	bx	lr
