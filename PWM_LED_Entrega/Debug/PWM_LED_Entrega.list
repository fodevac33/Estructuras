
PWM_LED_Entrega.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003158  08003158  00013158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003218  08003218  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003218  08003218  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003218  08003218  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000040  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000491c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000da4  00000000  00000000  000249b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000570  00000000  00000000  00025760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004f8  00000000  00000000  00025cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000206c4  00000000  00000000  000261c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000048bb  00000000  00000000  0004688c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbdea  00000000  00000000  0004b147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00106f31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a38  00000000  00000000  00106f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003140 	.word	0x08003140

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08003140 	.word	0x08003140

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <main>:
uint16_t min = 0;
uint16_t max = 3300;


int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
  /* Configure the system clock to 80 MHz */
  SystemClock_Config();
 8000ae6:	f000 fd13 	bl	8001510 <SystemClock_Config>

  Display_Init();
 8000aea:	f000 fe0f 	bl	800170c <Display_Init>

  Configure_ADC();
 8000aee:	f000 fc35 	bl	800135c <Configure_ADC>

  Activate_ADC();
 8000af2:	f000 fca9 	bl	8001448 <Activate_ADC>
  
  ConversionStartPoll_ADC_GrpRegular();
 8000af6:	f000 fced 	bl	80014d4 <ConversionStartPoll_ADC_GrpRegular>

  Configure_TIMPWMOutput();
 8000afa:	f001 fa5d 	bl	8001fb8 <Configure_TIMPWMOutput>

  uint8_t msg[5]="____";
 8000afe:	4a42      	ldr	r2, [pc, #264]	; (8000c08 <main+0x128>)
 8000b00:	463b      	mov	r3, r7
 8000b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b06:	6018      	str	r0, [r3, #0]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	7019      	strb	r1, [r3, #0]

  while(1) {

	ADC_Data = ReadADC_Data();
 8000b0c:	f000 fd6a 	bl	80015e4 <ReadADC_Data>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <main+0x12c>)
 8000b16:	801a      	strh	r2, [r3, #0]

	ADC_Voltage = ADCDataToVoltage(ADC_Data);
 8000b18:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <main+0x12c>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fd42 	bl	80015a8 <ADCDataToVoltage>
 8000b24:	eef0 7a40 	vmov.f32	s15, s0
 8000b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b2c:	ee17 3a90 	vmov	r3, s15
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <main+0x130>)
 8000b34:	801a      	strh	r2, [r3, #0]


	porcentaje = (ADC_Voltage - min) * 100.0f / (max - min);
 8000b36:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <main+0x130>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b35      	ldr	r3, [pc, #212]	; (8000c14 <main+0x134>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	ee07 3a90 	vmov	s15, r3
 8000b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b4c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000c18 <main+0x138>
 8000b50:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000b54:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <main+0x13c>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <main+0x134>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	ee07 3a90 	vmov	s15, r3
 8000b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b70:	ee17 2a90 	vmov	r2, s15
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <main+0x140>)
 8000b76:	601a      	str	r2, [r3, #0]

	double cuadratica = pow((porcentaje / 10.0), 2);
 8000b78:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <main+0x140>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc65 	bl	800044c <__aeabi_ui2d>
 8000b82:	f04f 0200 	mov.w	r2, #0
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <main+0x144>)
 8000b88:	f7ff fe04 	bl	8000794 <__aeabi_ddiv>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	460b      	mov	r3, r1
 8000b90:	ec43 2b17 	vmov	d7, r2, r3
 8000b94:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8000c00 <main+0x120>
 8000b98:	eeb0 0a47 	vmov.f32	s0, s14
 8000b9c:	eef0 0a67 	vmov.f32	s1, s15
 8000ba0:	f001 fbac 	bl	80022fc <pow>
 8000ba4:	ed87 0b04 	vstr	d0, [r7, #16]

	double porcentaje_cuadratico = (cuadratica > 100) ? 100 : cuadratica;
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <main+0x148>)
 8000bae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000bb2:	f7ff ff55 	bl	8000a60 <__aeabi_dcmpgt>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <main+0xe4>
 8000bbc:	f04f 0200 	mov.w	r2, #0
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <main+0x148>)
 8000bc2:	e001      	b.n	8000bc8 <main+0xe8>
 8000bc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000bc8:	e9c7 2302 	strd	r2, r3, [r7, #8]
//	double exponencial = exp(porcentaje / 21.7) - 0.7;
//
//	double porcentaje_exponencial = (exponencial > 100) ? 100 : exponencial;


	utoa((unsigned) porcentaje_cuadratico, (char *) msg, 10);
 8000bcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bd0:	f7ff ff66 	bl	8000aa0 <__aeabi_d2uiz>
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	220a      	movs	r2, #10
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f001 fb8d 	bl	80022f8 <utoa>

	process_string(msg);
 8000bde:	463b      	mov	r3, r7
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fec7 	bl	8001974 <process_string>

	FSM_Write_D4(msg);
 8000be6:	463b      	mov	r3, r7
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fdc1 	bl	8001770 <FSM_Write_D4>

	Configure_DutyCycle((uint32_t) porcentaje_cuadratico);
 8000bee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bf2:	f7ff ff55 	bl	8000aa0 <__aeabi_d2uiz>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fa6d 	bl	80020d8 <Configure_DutyCycle>
  while(1) {
 8000bfe:	e785      	b.n	8000b0c <main+0x2c>
 8000c00:	00000000 	.word	0x00000000
 8000c04:	40000000 	.word	0x40000000
 8000c08:	08003158 	.word	0x08003158
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000088 	.word	0x20000088
 8000c14:	20000090 	.word	0x20000090
 8000c18:	42c80000 	.word	0x42c80000
 8000c1c:	20000002 	.word	0x20000002
 8000c20:	2000008c 	.word	0x2000008c
 8000c24:	40240000 	.word	0x40240000
 8000c28:	40590000 	.word	0x40590000

08000c2c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:



static uint32_t msTick = 0;

void SysTick_Handler(void){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	SysTick_Callback();
 8000c80:	f000 f802 	bl	8000c88 <SysTick_Callback>
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <SysTick_Callback>:

void SysTick_Callback(void){
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
	msTick++;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Callback+0x18>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a03      	ldr	r2, [pc, #12]	; (8000ca0 <SysTick_Callback+0x18>)
 8000c94:	6013      	str	r3, [r2, #0]
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000094 	.word	0x20000094

08000ca4 <Get_Tick>:

uint32_t Get_Tick(void){
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	return msTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <Get_Tick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000094 	.word	0x20000094

08000cbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <SystemInit+0x64>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <SystemInit+0x64>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <SystemInit+0x68>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <SystemInit+0x68>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <SystemInit+0x68>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <SystemInit+0x68>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <SystemInit+0x68>)
 8000ce8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cf0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <SystemInit+0x68>)
 8000cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cf8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <SystemInit+0x68>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <SystemInit+0x68>)
 8000d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <SystemInit+0x68>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SystemInit+0x64>)
 8000d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d12:	609a      	str	r2, [r3, #8]
#endif
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	40021000 	.word	0x40021000

08000d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db0b      	blt.n	8000d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 021f 	and.w	r2, r3, #31
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <__NVIC_EnableIRQ+0x38>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	2001      	movs	r0, #1
 8000d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	; (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	40021000 	.word	0x40021000

08000de8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <LL_RCC_MSI_Enable+0x1c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <LL_RCC_MSI_Enable+0x1c>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <LL_RCC_MSI_IsReady+0x20>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d101      	bne.n	8000e1c <LL_RCC_MSI_IsReady+0x14>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <LL_RCC_MSI_IsReady+0x16>
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000

08000e2c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <LL_RCC_SetSysClkSource+0x24>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f023 0203 	bic.w	r2, r3, #3
 8000e3c:	4904      	ldr	r1, [pc, #16]	; (8000e50 <LL_RCC_SetSysClkSource+0x24>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	608b      	str	r3, [r1, #8]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000

08000e54 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <LL_RCC_GetSysClkSource+0x18>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f003 030c 	and.w	r3, r3, #12
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e80:	4904      	ldr	r1, [pc, #16]	; (8000e94 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	608b      	str	r3, [r1, #8]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000

08000e98 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ea8:	4904      	ldr	r1, [pc, #16]	; (8000ebc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	608b      	str	r3, [r1, #8]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ed0:	4904      	ldr	r1, [pc, #16]	; (8000ee4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	608b      	str	r3, [r1, #8]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <LL_RCC_PLL_Enable+0x1c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <LL_RCC_PLL_Enable+0x1c>)
 8000ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <LL_RCC_PLL_IsReady+0x24>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f18:	d101      	bne.n	8000f1e <LL_RCC_PLL_IsReady+0x16>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <LL_RCC_PLL_IsReady+0x18>
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	68f9      	ldr	r1, [r7, #12]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	4311      	orrs	r1, r2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	0212      	lsls	r2, r2, #8
 8000f50:	4311      	orrs	r1, r2
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	4904      	ldr	r1, [pc, #16]	; (8000f68 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	f9ff808c 	.word	0xf9ff808c

08000f70 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <LL_FLASH_SetLatency+0x24>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f023 0207 	bic.w	r2, r3, #7
 8000fa0:	4904      	ldr	r1, [pc, #16]	; (8000fb4 <LL_FLASH_SetLatency+0x24>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	600b      	str	r3, [r1, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	40022000 	.word	0x40022000

08000fb8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b08b      	sub	sp, #44	; 0x2c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	e003      	b.n	8000fea <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2103      	movs	r1, #3
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	61fb      	str	r3, [r7, #28]
  return result;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800100c:	2320      	movs	r3, #32
 800100e:	e003      	b.n	8001018 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	431a      	orrs	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	372c      	adds	r7, #44	; 0x2c
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	609a      	str	r2, [r3, #8]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_REG_SetTriggerSource>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
  *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f423 627c 	bic.w	r2, r3, #4032	; 0xfc0
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60da      	str	r2, [r3, #12]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f023 020f 	bic.w	r2, r3, #15
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b087      	sub	sp, #28
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3330      	adds	r3, #48	; 0x30
 80010d6:	461a      	mov	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	4413      	add	r3, r2
 80010e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	211f      	movs	r1, #31
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	401a      	ands	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0e9b      	lsrs	r3, r3, #26
 80010fe:	f003 011f 	and.w	r1, r3, #31
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	431a      	orrs	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_ADC_REG_SetContinuousMode>:
  *         @arg @ref LL_ADC_REG_CONV_SINGLE
  *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	60da      	str	r2, [r3, #12]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_REG_SetOverrun>:
  *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
  *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60da      	str	r2, [r3, #12]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800116a:	b480      	push	{r7}
 800116c:	b087      	sub	sp, #28
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3314      	adds	r3, #20
 800117a:	461a      	mov	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	0e5b      	lsrs	r3, r3, #25
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	4413      	add	r3, r2
 8001188:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	0d1b      	lsrs	r3, r3, #20
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	2107      	movs	r1, #7
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	0d1b      	lsrs	r3, r3, #20
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	431a      	orrs	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011b4:	bf00      	nop
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6093      	str	r3, [r2, #8]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800121c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <LL_ADC_IsEnabled+0x18>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <LL_ADC_IsEnabled+0x1a>
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b02      	cmp	r3, #2
 800126c:	d101      	bne.n	8001272 <LL_ADC_IsDisableOngoing+0x18>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <LL_ADC_IsDisableOngoing+0x1a>
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001292:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800129c:	4313      	orrs	r3, r2
 800129e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012c6:	f043 0204 	orr.w	r2, r3, #4
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d101      	bne.n	80012f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	b29b      	uxth	r3, r3
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b08      	cmp	r3, #8
 800132c:	d101      	bne.n	8001332 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2204      	movs	r2, #4
 800134c:	601a      	str	r2, [r3, #0]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <Configure_ADC>:
 *      Author: felipe
 */
#include "ADC.h"

void Configure_ADC(void)
{
 800135c:	b598      	push	{r3, r4, r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /*## Configuration of GPIO used by ADC channels ############################*/

  /* Note: On this STM32 device, ADC1 channel 9 is mapped on GPIO pin PA.04 */

  /* Enable GPIO Clock */
  LL_AHB2_GRP1_EnableClock(POTENTIOMETER_CLOCK);
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff fd29 	bl	8000db8 <LL_AHB2_GRP1_EnableClock>

  /* Configure GPIO in analog mode to be used as ADC input */
  LL_GPIO_SetPinMode(POTENTIOMETER_GPIO, POTENTIOMETER_PIN, LL_GPIO_MODE_ANALOG);
 8001366:	2203      	movs	r2, #3
 8001368:	2101      	movs	r1, #1
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f7ff fe23 	bl	8000fb8 <LL_GPIO_SetPinMode>

  /* Connect GPIO analog switch to ADC input */
  LL_GPIO_EnablePinAnalogControl(POTENTIOMETER_GPIO, POTENTIOMETER_PIN);
 8001372:	2101      	movs	r1, #1
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f7ff fe5b 	bl	8001032 <LL_GPIO_EnablePinAnalogControl>

  /*## Configuration of NVIC #################################################*/
  /* Configure NVIC to enable ADC1 interruptions */
  NVIC_SetPriority(ADC1_2_IRQn, 0);
 800137c:	2100      	movs	r1, #0
 800137e:	2012      	movs	r0, #18
 8001380:	f7ff fcf0 	bl	8000d64 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 8001384:	2012      	movs	r0, #18
 8001386:	f7ff fccf 	bl	8000d28 <__NVIC_EnableIRQ>
  /*## Configuration of ADC ##################################################*/

  /*## Configuration of ADC hierarchical scope: common to several ADC ########*/

  /* Enable ADC clock (core clock) */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 800138a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800138e:	f7ff fd13 	bl	8000db8 <LL_AHB2_GRP1_EnableClock>
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE() == 0)
 8001392:	4828      	ldr	r0, [pc, #160]	; (8001434 <Configure_ADC+0xd8>)
 8001394:	f7ff ff4e 	bl	8001234 <LL_ADC_IsEnabled>
 8001398:	4604      	mov	r4, r0
 800139a:	4827      	ldr	r0, [pc, #156]	; (8001438 <Configure_ADC+0xdc>)
 800139c:	f7ff ff4a 	bl	8001234 <LL_ADC_IsEnabled>
 80013a0:	4603      	mov	r3, r0
 80013a2:	431c      	orrs	r4, r3
 80013a4:	4825      	ldr	r0, [pc, #148]	; (800143c <Configure_ADC+0xe0>)
 80013a6:	f7ff ff45 	bl	8001234 <LL_ADC_IsEnabled>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4323      	orrs	r3, r4
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d104      	bne.n	80013bc <Configure_ADC+0x60>
    /* Note: Call of the functions below are commented because they are       */
    /*       useless in this example:                                         */
    /*       setting corresponding to default configuration from reset state. */

    /* Set ADC clock (conversion clock) common to several ADC instances */
    LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_SYNC_PCLK_DIV2);
 80013b2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80013b6:	4822      	ldr	r0, [pc, #136]	; (8001440 <Configure_ADC+0xe4>)
 80013b8:	f7ff fe4c 	bl	8001054 <LL_ADC_SetCommonClock>
  /*       below):                                                            */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       ADC must be disabled or enabled without conversion on going        */
  /*       on group regular.                                                  */
  if ((LL_ADC_IsEnabled(ADC1) == 0)               ||
 80013bc:	481d      	ldr	r0, [pc, #116]	; (8001434 <Configure_ADC+0xd8>)
 80013be:	f7ff ff39 	bl	8001234 <LL_ADC_IsEnabled>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <Configure_ADC+0x78>
      (LL_ADC_REG_IsConversionOngoing(ADC1) == 0)   )
 80013c8:	481a      	ldr	r0, [pc, #104]	; (8001434 <Configure_ADC+0xd8>)
 80013ca:	f7ff ff86 	bl	80012da <LL_ADC_REG_IsConversionOngoing>
 80013ce:	4603      	mov	r3, r0
  if ((LL_ADC_IsEnabled(ADC1) == 0)               ||
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d116      	bne.n	8001402 <Configure_ADC+0xa6>
  {
    /* Set ADC group regular trigger source */
    LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_SOFTWARE);
 80013d4:	2100      	movs	r1, #0
 80013d6:	4817      	ldr	r0, [pc, #92]	; (8001434 <Configure_ADC+0xd8>)
 80013d8:	f7ff fe4f 	bl	800107a <LL_ADC_REG_SetTriggerSource>

    /* Set ADC group regular trigger polarity */
    // LL_ADC_REG_SetTriggerEdge(ADC1, LL_ADC_REG_TRIG_EXT_RISING);

    /* Set ADC group regular continuous mode */
    LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_CONTINUOUS);
 80013dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e0:	4814      	ldr	r0, [pc, #80]	; (8001434 <Configure_ADC+0xd8>)
 80013e2:	f7ff fe9c 	bl	800111e <LL_ADC_REG_SetContinuousMode>

    /* Set ADC group regular conversion data transfer */
    // LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_NONE);

    /* Set ADC group regular overrun behavior */
    LL_ADC_REG_SetOverrun(ADC1, LL_ADC_REG_OVR_DATA_OVERWRITTEN);
 80013e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ea:	4812      	ldr	r0, [pc, #72]	; (8001434 <Configure_ADC+0xd8>)
 80013ec:	f7ff feaa 	bl	8001144 <LL_ADC_REG_SetOverrun>
    /*       affectation to a channel are configurable.                       */
    /*       Refer to description of function                                 */
    /*       "LL_ADC_REG_SetSequencerLength()".                               */

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADC1, LL_ADC_REG_SEQ_SCAN_DISABLE);
 80013f0:	2100      	movs	r1, #0
 80013f2:	4810      	ldr	r0, [pc, #64]	; (8001434 <Configure_ADC+0xd8>)
 80013f4:	f7ff fe54 	bl	80010a0 <LL_ADC_REG_SetSequencerLength>

    /* Set ADC group regular sequencer discontinuous mode */
    // LL_ADC_REG_SetSequencerDiscont(ADC1, LL_ADC_REG_SEQ_DISCONT_DISABLE);

    /* Set ADC group regular sequence: channel on the selected sequence rank. */
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_5);
 80013f8:	4a12      	ldr	r2, [pc, #72]	; (8001444 <Configure_ADC+0xe8>)
 80013fa:	2106      	movs	r1, #6
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <Configure_ADC+0xd8>)
 80013fe:	f7ff fe62 	bl	80010c6 <LL_ADC_REG_SetSequencerRanks>
  /*       below):                                                            */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       ADC must be disabled or enabled without conversion on going        */
  /*       on either groups regular or injected.                              */
  if ((LL_ADC_IsEnabled(ADC1) == 0)                    ||
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <Configure_ADC+0xd8>)
 8001404:	f7ff ff16 	bl	8001234 <LL_ADC_IsEnabled>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <Configure_ADC+0xca>
      ((LL_ADC_REG_IsConversionOngoing(ADC1) == 0) &&
 800140e:	4809      	ldr	r0, [pc, #36]	; (8001434 <Configure_ADC+0xd8>)
 8001410:	f7ff ff63 	bl	80012da <LL_ADC_REG_IsConversionOngoing>
 8001414:	4603      	mov	r3, r0
  if ((LL_ADC_IsEnabled(ADC1) == 0)                    ||
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10a      	bne.n	8001430 <Configure_ADC+0xd4>
       (LL_ADC_INJ_IsConversionOngoing(ADC1) == 0)   )   )
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <Configure_ADC+0xd8>)
 800141c:	f7ff ff7d 	bl	800131a <LL_ADC_INJ_IsConversionOngoing>
 8001420:	4603      	mov	r3, r0
      ((LL_ADC_REG_IsConversionOngoing(ADC1) == 0) &&
 8001422:	2b00      	cmp	r3, #0
 8001424:	d104      	bne.n	8001430 <Configure_ADC+0xd4>
  {
    /* Set ADC channels sampling time */
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_47CYCLES_5);
 8001426:	2204      	movs	r2, #4
 8001428:	4906      	ldr	r1, [pc, #24]	; (8001444 <Configure_ADC+0xe8>)
 800142a:	4802      	ldr	r0, [pc, #8]	; (8001434 <Configure_ADC+0xd8>)
 800142c:	f7ff fe9d 	bl	800116a <LL_ADC_SetChannelSamplingTime>
    /* ADC channel.                                                           */
    // LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SINGLE_ENDED);
  }


}
 8001430:	bf00      	nop
 8001432:	bd98      	pop	{r3, r4, r7, pc}
 8001434:	50040000 	.word	0x50040000
 8001438:	50040100 	.word	0x50040100
 800143c:	50040200 	.word	0x50040200
 8001440:	50040300 	.word	0x50040300
 8001444:	14f00020 	.word	0x14f00020

08001448 <Activate_ADC>:

void Activate_ADC(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
  __IO uint32_t wait_loop_index = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (LL_ADC_IsEnabled(ADC1) == 0)
 8001452:	481c      	ldr	r0, [pc, #112]	; (80014c4 <Activate_ADC+0x7c>)
 8001454:	f7ff feee 	bl	8001234 <LL_ADC_IsEnabled>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d121      	bne.n	80014a2 <Activate_ADC+0x5a>
  {
    /* Disable ADC deep power down (enabled by default after reset state) */
    LL_ADC_DisableDeepPowerDown(ADC1);
 800145e:	4819      	ldr	r0, [pc, #100]	; (80014c4 <Activate_ADC+0x7c>)
 8001460:	f7ff feae 	bl	80011c0 <LL_ADC_DisableDeepPowerDown>

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADC1);
 8001464:	4817      	ldr	r0, [pc, #92]	; (80014c4 <Activate_ADC+0x7c>)
 8001466:	f7ff febd 	bl	80011e4 <LL_ADC_EnableInternalRegulator>
    /* Compute number of CPU cycles to wait for, from delay in us.            */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    /* Note: If system core clock frequency is below 200kHz, wait time        */
    /*       is only a few CPU processing cycles.                             */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <Activate_ADC+0x80>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	099b      	lsrs	r3, r3, #6
 8001470:	4a16      	ldr	r2, [pc, #88]	; (80014cc <Activate_ADC+0x84>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	099a      	lsrs	r2, r3, #6
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	461a      	mov	r2, r3
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <Activate_ADC+0x88>)
 8001484:	fba3 2302 	umull	r2, r3, r3, r2
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	607b      	str	r3, [r7, #4]
    while(wait_loop_index != 0)
 800148c:	e002      	b.n	8001494 <Activate_ADC+0x4c>
    {
      wait_loop_index--;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3b01      	subs	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
    while(wait_loop_index != 0)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f9      	bne.n	800148e <Activate_ADC+0x46>
    }

    /* Run ADC self calibration */
    LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 800149a:	217f      	movs	r1, #127	; 0x7f
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <Activate_ADC+0x7c>)
 800149e:	f7ff feef 	bl	8001280 <LL_ADC_StartCalibration>
    }

    /* Delay between ADC end of calibration and ADC enable.                   */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 80014a2:	2340      	movs	r3, #64	; 0x40
 80014a4:	607b      	str	r3, [r7, #4]
    while(wait_loop_index != 0)
 80014a6:	e002      	b.n	80014ae <Activate_ADC+0x66>
    {
      wait_loop_index--;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
    while(wait_loop_index != 0)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f9      	bne.n	80014a8 <Activate_ADC+0x60>
    }

    /* Enable ADC */
    LL_ADC_Enable(ADC1);
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <Activate_ADC+0x7c>)
 80014b6:	f7ff fea9 	bl	800120c <LL_ADC_Enable>


 }
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	50040000 	.word	0x50040000
 80014c8:	20000004 	.word	0x20000004
 80014cc:	053e2d63 	.word	0x053e2d63
 80014d0:	cccccccd 	.word	0xcccccccd

080014d4 <ConversionStartPoll_ADC_GrpRegular>:


void ConversionStartPoll_ADC_GrpRegular(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <ConversionStartPoll_ADC_GrpRegular+0x38>)
 80014da:	f7ff feab 	bl	8001234 <LL_ADC_IsEnabled>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d10e      	bne.n	8001502 <ConversionStartPoll_ADC_GrpRegular+0x2e>
      (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <ConversionStartPoll_ADC_GrpRegular+0x38>)
 80014e6:	f7ff feb8 	bl	800125a <LL_ADC_IsDisableOngoing>
 80014ea:	4603      	mov	r3, r0
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d108      	bne.n	8001502 <ConversionStartPoll_ADC_GrpRegular+0x2e>
      (LL_ADC_REG_IsConversionOngoing(ADC1) == 0)   )
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <ConversionStartPoll_ADC_GrpRegular+0x38>)
 80014f2:	f7ff fef2 	bl	80012da <LL_ADC_REG_IsConversionOngoing>
 80014f6:	4603      	mov	r3, r0
      (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <ConversionStartPoll_ADC_GrpRegular+0x2e>
  {
    LL_ADC_REG_StartConversion(ADC1);
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <ConversionStartPoll_ADC_GrpRegular+0x38>)
 80014fe:	f7ff fed8 	bl	80012b2 <LL_ADC_REG_StartConversion>
  /*       software reads conversion data from ADC data register.           */
  /*       Nevertheless, this action is done anyway to show how to clear    */
  /*       this flag, needed if conversion data is not always read          */
  /*       or if group injected end of unitary conversion is used (for      */
  /*       devices with group injected available).                          */
  LL_ADC_ClearFlag_EOC(ADC1);
 8001502:	4802      	ldr	r0, [pc, #8]	; (800150c <ConversionStartPoll_ADC_GrpRegular+0x38>)
 8001504:	f7ff ff1c 	bl	8001340 <LL_ADC_ClearFlag_EOC>

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	50040000 	.word	0x50040000

08001510 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* MSI configuration and activation */
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001514:	2004      	movs	r0, #4
 8001516:	f7ff fd3b 	bl	8000f90 <LL_FLASH_SetLatency>
  LL_RCC_MSI_Enable();
 800151a:	f7ff fc65 	bl	8000de8 <LL_RCC_MSI_Enable>
  while(LL_RCC_MSI_IsReady() != 1)
 800151e:	bf00      	nop
 8001520:	f7ff fc72 	bl	8000e08 <LL_RCC_MSI_IsReady>
 8001524:	4603      	mov	r3, r0
 8001526:	2b01      	cmp	r3, #1
 8001528:	d1fa      	bne.n	8001520 <SystemClock_Config+0x10>
  {
  };

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 800152a:	2300      	movs	r3, #0
 800152c:	2228      	movs	r2, #40	; 0x28
 800152e:	2100      	movs	r1, #0
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff fcfd 	bl	8000f30 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001536:	f7ff fcd7 	bl	8000ee8 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 800153a:	f7ff fd19 	bl	8000f70 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 800153e:	bf00      	nop
 8001540:	f7ff fce2 	bl	8000f08 <LL_RCC_PLL_IsReady>
 8001544:	4603      	mov	r3, r0
 8001546:	2b01      	cmp	r3, #1
 8001548:	d1fa      	bne.n	8001540 <SystemClock_Config+0x30>
  {
  };

  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff fc90 	bl	8000e70 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001550:	2003      	movs	r0, #3
 8001552:	f7ff fc6b 	bl	8000e2c <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001556:	bf00      	nop
 8001558:	f7ff fc7c 	bl	8000e54 <LL_RCC_GetSysClkSource>
 800155c:	4603      	mov	r3, r0
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d1fa      	bne.n	8001558 <SystemClock_Config+0x48>
  {
  };
  /* Sysclk activation on the main PLL */
   LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff fc84 	bl	8000e70 <LL_RCC_SetAHBPrescaler>
   LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001568:	2003      	movs	r0, #3
 800156a:	f7ff fc5f 	bl	8000e2c <LL_RCC_SetSysClkSource>
   while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800156e:	bf00      	nop
 8001570:	f7ff fc70 	bl	8000e54 <LL_RCC_GetSysClkSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b0c      	cmp	r3, #12
 8001578:	d1fa      	bne.n	8001570 <SystemClock_Config+0x60>
   {
   };

   /* Set APB1 & APB2 prescaler*/
   LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff fc8c 	bl	8000e98 <LL_RCC_SetAPB1Prescaler>
   LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff fc9d 	bl	8000ec0 <LL_RCC_SetAPB2Prescaler>

  /* Set APB1 & APB2 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff fc86 	bl	8000e98 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fc97 	bl	8000ec0 <LL_RCC_SetAPB2Prescaler>

  /* Set systick to 1ms in using frequency set to 80MHz */
  /* This frequency can be calculated through LL RCC macro */
  /* ex: __LL_RCC_CALC_PLLCLK_FREQ(__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, LL_RCC_MSIRANGE_6),
                                  LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2)*/
  LL_Init1msTick(80000000);
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <SystemClock_Config+0x94>)
 8001594:	f000 fe02 	bl	800219c <LL_Init1msTick>

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(80000000);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <SystemClock_Config+0x94>)
 800159a:	f000 fe0d 	bl	80021b8 <LL_SetSystemCoreClock>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	04c4b400 	.word	0x04c4b400

080015a8 <ADCDataToVoltage>:


float ADCDataToVoltage(uint16_t ADC_Data){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
	return  __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, ADC_Data, LL_ADC_RESOLUTION_12B);
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	f640 42e4 	movw	r2, #3300	; 0xce4
 80015b8:	fb03 f202 	mul.w	r2, r3, r2
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <ADCDataToVoltage+0x38>)
 80015be:	fba3 1302 	umull	r1, r3, r3, r2
 80015c2:	1ad2      	subs	r2, r2, r3
 80015c4:	0852      	lsrs	r2, r2, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	0adb      	lsrs	r3, r3, #11
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	00100101 	.word	0x00100101

080015e4 <ReadADC_Data>:

uint16_t ReadADC_Data(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	return LL_ADC_REG_ReadConversionData12(ADC1);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <ReadADC_Data+0x10>)
 80015ea:	f7ff fe89 	bl	8001300 <LL_ADC_REG_ReadConversionData12>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	50040000 	.word	0x50040000

080015f8 <LL_AHB2_GRP1_EnableClock>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001604:	4907      	ldr	r1, [pc, #28]	; (8001624 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4313      	orrs	r3, r2
 800160a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800160e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4013      	ands	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40021000 	.word	0x40021000

08001628 <LL_GPIO_SetPinMode>:
{
 8001628:	b480      	push	{r7}
 800162a:	b08b      	sub	sp, #44	; 0x2c
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	613b      	str	r3, [r7, #16]
  return result;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800164e:	2320      	movs	r3, #32
 8001650:	e003      	b.n	800165a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2103      	movs	r1, #3
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	401a      	ands	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	61fb      	str	r3, [r7, #28]
  return result;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800167c:	2320      	movs	r3, #32
 800167e:	e003      	b.n	8001688 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	601a      	str	r2, [r3, #0]
}
 8001696:	bf00      	nop
 8001698:	372c      	adds	r7, #44	; 0x2c
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	619a      	str	r2, [r3, #24]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016da:	b480      	push	{r7}
 80016dc:	b085      	sub	sp, #20
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	4013      	ands	r3, r2
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43d9      	mvns	r1, r3
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	400b      	ands	r3, r1
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <Display_Init>:
}




void Display_Init(void){
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	LCLK_GPIO_CLK_ENABLE();
 8001710:	2002      	movs	r0, #2
 8001712:	f7ff ff71 	bl	80015f8 <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(LCLK_GPIO_PORT, LCLK_PIN, LL_GPIO_MODE_OUTPUT);
 8001716:	2201      	movs	r2, #1
 8001718:	2120      	movs	r1, #32
 800171a:	4814      	ldr	r0, [pc, #80]	; (800176c <Display_Init+0x60>)
 800171c:	f7ff ff84 	bl	8001628 <LL_GPIO_SetPinMode>
	LL_GPIO_ResetOutputPin(LCLK_GPIO_PORT, LCLK_PIN);
 8001720:	2120      	movs	r1, #32
 8001722:	4812      	ldr	r0, [pc, #72]	; (800176c <Display_Init+0x60>)
 8001724:	f7ff ffcb 	bl	80016be <LL_GPIO_ResetOutputPin>

	SRCLK_GPIO_CLK_ENABLE();
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff ff65 	bl	80015f8 <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(SRCLK_GPIO_PORT, SRCLK_PIN, LL_GPIO_MODE_OUTPUT);
 800172e:	2201      	movs	r2, #1
 8001730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f7ff ff76 	bl	8001628 <LL_GPIO_SetPinMode>
	LL_GPIO_ResetOutputPin(SRCLK_GPIO_PORT, SRCLK_PIN);
 800173c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f7ff ffbb 	bl	80016be <LL_GPIO_ResetOutputPin>

	SER_GPIO_CLK_ENABLE();
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff ff55 	bl	80015f8 <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(SER_GPIO_PORT, SER_PIN, LL_GPIO_MODE_OUTPUT);
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f7ff ff66 	bl	8001628 <LL_GPIO_SetPinMode>
	LL_GPIO_ResetOutputPin(SER_GPIO_PORT, SER_PIN);
 800175c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001764:	f7ff ffab 	bl	80016be <LL_GPIO_ResetOutputPin>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	48000400 	.word	0x48000400

08001770 <FSM_Write_D4>:

}



void FSM_Write_D4( uint8_t *Msg){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	static uint32_t state = 0, next_state = 0;

	static uint8_t i = 0;


	if (  Get_Tick() - last_tick >= 1){
 8001778:	f7ff fa94 	bl	8000ca4 <Get_Tick>
 800177c:	4602      	mov	r2, r0
 800177e:	4b33      	ldr	r3, [pc, #204]	; (800184c <FSM_Write_D4+0xdc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d05e      	beq.n	8001844 <FSM_Write_D4+0xd4>
		if (state == 0){
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <FSM_Write_D4+0xe0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d111      	bne.n	80017b2 <FSM_Write_D4+0x42>
			Write_ASCII_D4((Msg[i]- 0x30), 4, seven_seg_digits_decode_abcdefg);
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <FSM_Write_D4+0xe4>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	3b30      	subs	r3, #48	; 0x30
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4a2e      	ldr	r2, [pc, #184]	; (8001858 <FSM_Write_D4+0xe8>)
 80017a0:	2104      	movs	r1, #4
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f85c 	bl	8001860 <Write_ASCII_D4>
			next_state = state+1;
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <FSM_Write_D4+0xe0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a2b      	ldr	r2, [pc, #172]	; (800185c <FSM_Write_D4+0xec>)
 80017b0:	6013      	str	r3, [r2, #0]
		}
		if (state == 1){
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <FSM_Write_D4+0xe0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d111      	bne.n	80017de <FSM_Write_D4+0x6e>
			Write_ASCII_D4((Msg[i+1]- 0x30), 3, seven_seg_digits_decode_abcdefg);
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <FSM_Write_D4+0xe4>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3b30      	subs	r3, #48	; 0x30
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <FSM_Write_D4+0xe8>)
 80017cc:	2103      	movs	r1, #3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f846 	bl	8001860 <Write_ASCII_D4>
			next_state = state+1;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <FSM_Write_D4+0xe0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	4a20      	ldr	r2, [pc, #128]	; (800185c <FSM_Write_D4+0xec>)
 80017dc:	6013      	str	r3, [r2, #0]
		}
		if (state == 2){
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <FSM_Write_D4+0xe0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d111      	bne.n	800180a <FSM_Write_D4+0x9a>
			Write_ASCII_D4(Msg[i+2]- 0x30, 2, seven_seg_digits_decode_abcdefg);
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <FSM_Write_D4+0xe4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	3302      	adds	r3, #2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	3b30      	subs	r3, #48	; 0x30
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <FSM_Write_D4+0xe8>)
 80017f8:	2102      	movs	r1, #2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f830 	bl	8001860 <Write_ASCII_D4>
			next_state = state+1;
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <FSM_Write_D4+0xe0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <FSM_Write_D4+0xec>)
 8001808:	6013      	str	r3, [r2, #0]
		}
		if (state == 3){
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <FSM_Write_D4+0xe0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d10f      	bne.n	8001832 <FSM_Write_D4+0xc2>
			Write_ASCII_D4(Msg[i+3]- 0x30, 1, seven_seg_digits_decode_abcdefg);
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <FSM_Write_D4+0xe4>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	3303      	adds	r3, #3
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	3b30      	subs	r3, #48	; 0x30
 8001820:	b2db      	uxtb	r3, r3
 8001822:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <FSM_Write_D4+0xe8>)
 8001824:	2101      	movs	r1, #1
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f81a 	bl	8001860 <Write_ASCII_D4>
			next_state = 0;
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <FSM_Write_D4+0xec>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
		}
		state = next_state;
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <FSM_Write_D4+0xec>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a06      	ldr	r2, [pc, #24]	; (8001850 <FSM_Write_D4+0xe0>)
 8001838:	6013      	str	r3, [r2, #0]
		last_tick = Get_Tick();
 800183a:	f7ff fa33 	bl	8000ca4 <Get_Tick>
 800183e:	4603      	mov	r3, r0
 8001840:	4a02      	ldr	r2, [pc, #8]	; (800184c <FSM_Write_D4+0xdc>)
 8001842:	6013      	str	r3, [r2, #0]
	}
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000098 	.word	0x20000098
 8001850:	2000009c 	.word	0x2000009c
 8001854:	200000a0 	.word	0x200000a0
 8001858:	08003160 	.word	0x08003160
 800185c:	200000a4 	.word	0x200000a4

08001860 <Write_ASCII_D4>:

void Write_ASCII_D4( uint8_t letter, uint8_t Digit,const uint8_t *Data ){
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	603a      	str	r2, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	460b      	mov	r3, r1
 800186e:	71bb      	strb	r3, [r7, #6]

	//  LCLK (PB5) -
	LL_GPIO_ResetOutputPin(LCLK_GPIO_PORT, LCLK_PIN);
 8001870:	2120      	movs	r1, #32
 8001872:	483f      	ldr	r0, [pc, #252]	; (8001970 <Write_ASCII_D4+0x110>)
 8001874:	f7ff ff23 	bl	80016be <LL_GPIO_ResetOutputPin>

	// SRCLK (PA8) - 16 clock cycles
	LL_GPIO_ResetOutputPin(SRCLK_GPIO_PORT, SRCLK_PIN);
 8001878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800187c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001880:	f7ff ff1d 	bl	80016be <LL_GPIO_ResetOutputPin>
	// Dot is set to turn it off
	LL_GPIO_SetOutputPin(SER_GPIO_PORT, SER_PIN);
 8001884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188c:	f7ff ff09 	bl	80016a2 <LL_GPIO_SetOutputPin>
	LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 8001890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f7ff ff1f 	bl	80016da <LL_GPIO_TogglePin>
	LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 800189c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a4:	f7ff ff19 	bl	80016da <LL_GPIO_TogglePin>
	for (int i = 0; i < 7; i++){
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	e027      	b.n	80018fe <Write_ASCII_D4+0x9e>
		// SER (PA9) - set
		//HAL_GPIO_WritePin(SER_GPIO_PORT, SER_PIN,~(Data[letter]>>i)&(1));
		if ((~(Data[letter]>>i)&(1))==1){
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	fa42 f303 	asr.w	r3, r2, r3
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d106      	bne.n	80018d4 <Write_ASCII_D4+0x74>
			LL_GPIO_SetOutputPin(SER_GPIO_PORT, SER_PIN);
 80018c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ce:	f7ff fee8 	bl	80016a2 <LL_GPIO_SetOutputPin>
 80018d2:	e005      	b.n	80018e0 <Write_ASCII_D4+0x80>
		}
		else{
			LL_GPIO_ResetOutputPin(SER_GPIO_PORT, SER_PIN);
 80018d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018dc:	f7ff feef 	bl	80016be <LL_GPIO_ResetOutputPin>
		}
		LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 80018e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e8:	f7ff fef7 	bl	80016da <LL_GPIO_TogglePin>
		LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 80018ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f4:	f7ff fef1 	bl	80016da <LL_GPIO_TogglePin>
	for (int i = 0; i < 7; i++){
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3301      	adds	r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b06      	cmp	r3, #6
 8001902:	ddd4      	ble.n	80018ae <Write_ASCII_D4+0x4e>
	}

	// All the displays are enable
	LL_GPIO_ResetOutputPin(SER_GPIO_PORT, SER_PIN);
 8001904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190c:	f7ff fed7 	bl	80016be <LL_GPIO_ResetOutputPin>
	for (int i = 0; i < 8; i++){
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	e020      	b.n	8001958 <Write_ASCII_D4+0xf8>
		if (i == Digit+3){
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	3303      	adds	r3, #3
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	429a      	cmp	r2, r3
 800191e:	d106      	bne.n	800192e <Write_ASCII_D4+0xce>
			LL_GPIO_SetOutputPin(SER_GPIO_PORT, SER_PIN);
 8001920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001928:	f7ff febb 	bl	80016a2 <LL_GPIO_SetOutputPin>
 800192c:	e005      	b.n	800193a <Write_ASCII_D4+0xda>
		}else{
			LL_GPIO_ResetOutputPin(SER_GPIO_PORT, SER_PIN);
 800192e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001936:	f7ff fec2 	bl	80016be <LL_GPIO_ResetOutputPin>
		}
		LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 800193a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001942:	f7ff feca 	bl	80016da <LL_GPIO_TogglePin>
		LL_GPIO_TogglePin(SRCLK_GPIO_PORT, SRCLK_PIN);
 8001946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800194a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194e:	f7ff fec4 	bl	80016da <LL_GPIO_TogglePin>
	for (int i = 0; i < 8; i++){
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3301      	adds	r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b07      	cmp	r3, #7
 800195c:	dddb      	ble.n	8001916 <Write_ASCII_D4+0xb6>
	};
	//  LCLK (PB5) -
	LL_GPIO_SetOutputPin(LCLK_GPIO_PORT, LCLK_PIN);
 800195e:	2120      	movs	r1, #32
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <Write_ASCII_D4+0x110>)
 8001962:	f7ff fe9e 	bl	80016a2 <LL_GPIO_SetOutputPin>

}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	48000400 	.word	0x48000400

08001974 <process_string>:

void process_string(uint8_t *buffer){
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	75fb      	strb	r3, [r7, #23]
	while (i<4){
 8001980:	e008      	b.n	8001994 <process_string+0x20>
		if (buffer[i] == '\0'){
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <process_string+0x28>
			break;
		}
		i++;
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	3301      	adds	r3, #1
 8001992:	75fb      	strb	r3, [r7, #23]
	while (i<4){
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d9f3      	bls.n	8001982 <process_string+0xe>
 800199a:	e000      	b.n	800199e <process_string+0x2a>
			break;
 800199c:	bf00      	nop
	}
	if (i<4){
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d828      	bhi.n	80019f6 <process_string+0x82>
		for (int j=0;j<=i;j++){
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	e010      	b.n	80019cc <process_string+0x58>
			buffer[4-j]=buffer[i-j];
 80019aa:	7dfa      	ldrb	r2, [r7, #23]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	441a      	add	r2, r3
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f1c3 0304 	rsb	r3, r3, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	440b      	add	r3, r1
 80019c2:	7812      	ldrb	r2, [r2, #0]
 80019c4:	701a      	strb	r2, [r3, #0]
		for (int j=0;j<=i;j++){
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3301      	adds	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	ddea      	ble.n	80019aa <process_string+0x36>
		}
		for (int j=0;j<4-i;j++){
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e007      	b.n	80019ea <process_string+0x76>
			buffer[j]='=';
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	223d      	movs	r2, #61	; 0x3d
 80019e2:	701a      	strb	r2, [r3, #0]
		for (int j=0;j<4-i;j++){
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3301      	adds	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	f1c3 0304 	rsb	r3, r3, #4
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dbf1      	blt.n	80019da <process_string+0x66>
		}
	}

}
 80019f6:	bf00      	nop
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <__NVIC_EnableIRQ>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4907      	ldr	r1, [pc, #28]	; (8001a3c <__NVIC_EnableIRQ+0x38>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	; (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	; (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <LL_AHB2_GRP1_EnableClock>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ace:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ada:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40021000 	.word	0x40021000

08001af4 <LL_GPIO_SetPinMode>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b08b      	sub	sp, #44	; 0x2c
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	613b      	str	r3, [r7, #16]
  return result;
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	e003      	b.n	8001b26 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	2103      	movs	r1, #3
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	401a      	ands	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	61fb      	str	r3, [r7, #28]
  return result;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	e003      	b.n	8001b54 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	bf00      	nop
 8001b64:	372c      	adds	r7, #44	; 0x2c
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_GPIO_SetPinSpeed>:
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b08b      	sub	sp, #44	; 0x2c
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	613b      	str	r3, [r7, #16]
  return result;
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001b94:	2320      	movs	r3, #32
 8001b96:	e003      	b.n	8001ba0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2103      	movs	r1, #3
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	61fb      	str	r3, [r7, #28]
  return result;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	609a      	str	r2, [r3, #8]
}
 8001bdc:	bf00      	nop
 8001bde:	372c      	adds	r7, #44	; 0x2c
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_GPIO_SetPinPull>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b08b      	sub	sp, #44	; 0x2c
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	613b      	str	r3, [r7, #16]
  return result;
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e003      	b.n	8001c1a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2103      	movs	r1, #3
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	401a      	ands	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	61fb      	str	r3, [r7, #28]
  return result;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	e003      	b.n	8001c48 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	431a      	orrs	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	60da      	str	r2, [r3, #12]
}
 8001c56:	bf00      	nop
 8001c58:	372c      	adds	r7, #44	; 0x2c
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_GPIO_SetAFPin_0_7>:
{
 8001c62:	b480      	push	{r7}
 8001c64:	b08b      	sub	sp, #44	; 0x2c
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a1a      	ldr	r2, [r3, #32]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	613b      	str	r3, [r7, #16]
  return result;
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	e003      	b.n	8001c94 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	210f      	movs	r1, #15
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	61fb      	str	r3, [r7, #28]
  return result;
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	e003      	b.n	8001cc2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	fab3 f383 	clz	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	621a      	str	r2, [r3, #32]
}
 8001cd0:	bf00      	nop
 8001cd2:	372c      	adds	r7, #44	; 0x2c
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	601a      	str	r2, [r3, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	601a      	str	r2, [r3, #0]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(const TIM_TypeDef *TIMx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_TIM_GetAutoReload>:
  *       whether or not a timer instance supports a 32 bits counter.
  * @param  TIMx Timer instance
  * @retval Auto-reload value
  */
__STATIC_INLINE uint32_t LL_TIM_GetAutoReload(const TIM_TypeDef *TIMx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	621a      	str	r2, [r3, #32]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d028      	beq.n	8001e24 <LL_TIM_OC_SetMode+0x64>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d023      	beq.n	8001e20 <LL_TIM_OC_SetMode+0x60>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d01e      	beq.n	8001e1c <LL_TIM_OC_SetMode+0x5c>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d019      	beq.n	8001e18 <LL_TIM_OC_SetMode+0x58>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dea:	d013      	beq.n	8001e14 <LL_TIM_OC_SetMode+0x54>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df2:	d00d      	beq.n	8001e10 <LL_TIM_OC_SetMode+0x50>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dfa:	d007      	beq.n	8001e0c <LL_TIM_OC_SetMode+0x4c>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e02:	d101      	bne.n	8001e08 <LL_TIM_OC_SetMode+0x48>
 8001e04:	2307      	movs	r3, #7
 8001e06:	e00e      	b.n	8001e26 <LL_TIM_OC_SetMode+0x66>
 8001e08:	2308      	movs	r3, #8
 8001e0a:	e00c      	b.n	8001e26 <LL_TIM_OC_SetMode+0x66>
 8001e0c:	2306      	movs	r3, #6
 8001e0e:	e00a      	b.n	8001e26 <LL_TIM_OC_SetMode+0x66>
 8001e10:	2305      	movs	r3, #5
 8001e12:	e008      	b.n	8001e26 <LL_TIM_OC_SetMode+0x66>
 8001e14:	2304      	movs	r3, #4
 8001e16:	e006      	b.n	8001e26 <LL_TIM_OC_SetMode+0x66>
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e004      	b.n	8001e26 <LL_TIM_OC_SetMode+0x66>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e002      	b.n	8001e26 <LL_TIM_OC_SetMode+0x66>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_TIM_OC_SetMode+0x66>
 8001e24:	2300      	movs	r3, #0
 8001e26:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <LL_TIM_OC_SetMode+0xac>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	440b      	add	r3, r1
 8001e36:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	490c      	ldr	r1, [pc, #48]	; (8001e70 <LL_TIM_OC_SetMode+0xb0>)
 8001e40:	5ccb      	ldrb	r3, [r1, r3]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <LL_TIM_OC_SetMode+0xb4>)
 8001e46:	408b      	lsls	r3, r1
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <LL_TIM_OC_SetMode+0xb0>)
 8001e50:	5ccb      	ldrb	r3, [r1, r3]
 8001e52:	4619      	mov	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	408b      	lsls	r3, r1
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	601a      	str	r2, [r3, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	080031ac 	.word	0x080031ac
 8001e70:	080031b8 	.word	0x080031b8
 8001e74:	00010073 	.word	0x00010073

08001e78 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d028      	beq.n	8001eda <LL_TIM_OC_EnablePreload+0x62>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d023      	beq.n	8001ed6 <LL_TIM_OC_EnablePreload+0x5e>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	d01e      	beq.n	8001ed2 <LL_TIM_OC_EnablePreload+0x5a>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b40      	cmp	r3, #64	; 0x40
 8001e98:	d019      	beq.n	8001ece <LL_TIM_OC_EnablePreload+0x56>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea0:	d013      	beq.n	8001eca <LL_TIM_OC_EnablePreload+0x52>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea8:	d00d      	beq.n	8001ec6 <LL_TIM_OC_EnablePreload+0x4e>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb0:	d007      	beq.n	8001ec2 <LL_TIM_OC_EnablePreload+0x4a>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d101      	bne.n	8001ebe <LL_TIM_OC_EnablePreload+0x46>
 8001eba:	2307      	movs	r3, #7
 8001ebc:	e00e      	b.n	8001edc <LL_TIM_OC_EnablePreload+0x64>
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	e00c      	b.n	8001edc <LL_TIM_OC_EnablePreload+0x64>
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	e00a      	b.n	8001edc <LL_TIM_OC_EnablePreload+0x64>
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	e008      	b.n	8001edc <LL_TIM_OC_EnablePreload+0x64>
 8001eca:	2304      	movs	r3, #4
 8001ecc:	e006      	b.n	8001edc <LL_TIM_OC_EnablePreload+0x64>
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e004      	b.n	8001edc <LL_TIM_OC_EnablePreload+0x64>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e002      	b.n	8001edc <LL_TIM_OC_EnablePreload+0x64>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <LL_TIM_OC_EnablePreload+0x64>
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3318      	adds	r3, #24
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <LL_TIM_OC_EnablePreload+0x98>)
 8001ee8:	5cd3      	ldrb	r3, [r2, r3]
 8001eea:	440b      	add	r3, r1
 8001eec:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	4907      	ldr	r1, [pc, #28]	; (8001f14 <LL_TIM_OC_EnablePreload+0x9c>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	2308      	movs	r3, #8
 8001efc:	408b      	lsls	r3, r1
 8001efe:	431a      	orrs	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	601a      	str	r2, [r3, #0]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	080031ac 	.word	0x080031ac
 8001f14:	080031b8 	.word	0x080031b8

08001f18 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f06f 0202 	mvn.w	r2, #2
 8001f42:	611a      	str	r2, [r3, #16]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d101      	bne.n	8001f68 <LL_TIM_IsActiveFlag_CC1+0x18>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <LL_TIM_IsActiveFlag_CC1+0x1a>
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60da      	str	r2, [r3, #12]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	615a      	str	r2, [r3, #20]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <Configure_TIMPWMOutput>:
#include "PWM.h"

volatile uint32_t MeasuredDutyCycle = 0;

void  Configure_TIMPWMOutput(void)
{
 8001fb8:	b598      	push	{r3, r4, r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /*************************/
  /* GPIO AF configuration */
  /*************************/
  /* Enable the peripheral clock of GPIOs */
  LL_AHB2_GRP1_EnableClock(LED_CLOCK);
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f7ff fd69 	bl	8001a94 <LL_AHB2_GRP1_EnableClock>

  /* GPIO TIM2_CH1 configuration */
  LL_GPIO_SetPinMode(LED_GPIO, LED_PIN, LL_GPIO_MODE_ALTERNATE);
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	2120      	movs	r1, #32
 8001fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fca:	f7ff fd93 	bl	8001af4 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinPull(LED_GPIO, LED_PIN, LL_GPIO_PULL_DOWN);
 8001fce:	2202      	movs	r2, #2
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd6:	f7ff fe07 	bl	8001be8 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinSpeed(LED_GPIO, LED_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8001fda:	2202      	movs	r2, #2
 8001fdc:	2120      	movs	r1, #32
 8001fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe2:	f7ff fdc4 	bl	8001b6e <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetAFPin_0_7(LED_GPIO, LED_PIN, LL_GPIO_AF_1);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2120      	movs	r1, #32
 8001fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fee:	f7ff fe38 	bl	8001c62 <LL_GPIO_SetAFPin_0_7>

  /***********************************************/
  /* Configure the NVIC to handle TIM2 interrupt */
  /***********************************************/
  NVIC_SetPriority(TIM2_IRQn, 14);
 8001ff2:	210e      	movs	r1, #14
 8001ff4:	201c      	movs	r0, #28
 8001ff6:	f7ff fd23 	bl	8001a40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001ffa:	201c      	movs	r0, #28
 8001ffc:	f7ff fd02 	bl	8001a04 <__NVIC_EnableIRQ>

  /******************************/
  /* Peripheral clocks enabling */
  /******************************/
  /* Enable the timer peripheral clock */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002000:	2001      	movs	r0, #1
 8002002:	f7ff fd5f 	bl	8001ac4 <LL_APB1_GRP1_EnableClock>
  /* Set counter mode */
  /* Reset value is LL_TIM_COUNTERMODE_UP */
  //LL_TIM_SetCounterMode(TIM2, LL_TIM_COUNTERMODE_UP);

  /* Set the pre-scaler value to have TIM2 counter clock equal to 10 kHz */
  LL_TIM_SetPrescaler(TIM2, __LL_TIM_CALC_PSC(SystemCoreClock, 10000));
 8002006:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <Configure_TIMPWMOutput+0x118>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f242 720f 	movw	r2, #9999	; 0x270f
 800200e:	4293      	cmp	r3, r2
 8002010:	d90a      	bls.n	8002028 <Configure_TIMPWMOutput+0x70>
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <Configure_TIMPWMOutput+0x118>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800201a:	3308      	adds	r3, #8
 800201c:	4a2d      	ldr	r2, [pc, #180]	; (80020d4 <Configure_TIMPWMOutput+0x11c>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0b5b      	lsrs	r3, r3, #13
 8002024:	3b01      	subs	r3, #1
 8002026:	e000      	b.n	800202a <Configure_TIMPWMOutput+0x72>
 8002028:	2300      	movs	r3, #0
 800202a:	4619      	mov	r1, r3
 800202c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002030:	f7ff fe80 	bl	8001d34 <LL_TIM_SetPrescaler>

  /* Enable TIM2_ARR register preload. Writing to or reading from the         */
  /* auto-reload register accesses the preload register. The content of the   */
  /* preload register are transferred into the shadow register at each update */
  /* event (UEV).                                                             */
  LL_TIM_EnableARRPreload(TIM2);
 8002034:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002038:	f7ff fe60 	bl	8001cfc <LL_TIM_EnableARRPreload>

  /* Set the auto-reload value to have a counter frequency of 100 Hz */
  LL_TIM_SetAutoReload(TIM2, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIM2), 100));
 800203c:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <Configure_TIMPWMOutput+0x118>)
 800203e:	681c      	ldr	r4, [r3, #0]
 8002040:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002044:	f7ff fe84 	bl	8001d50 <LL_TIM_GetPrescaler>
 8002048:	4603      	mov	r3, r0
 800204a:	3301      	adds	r3, #1
 800204c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002050:	2b63      	cmp	r3, #99	; 0x63
 8002052:	d90e      	bls.n	8002072 <Configure_TIMPWMOutput+0xba>
 8002054:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <Configure_TIMPWMOutput+0x118>)
 8002056:	681c      	ldr	r4, [r3, #0]
 8002058:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800205c:	f7ff fe78 	bl	8001d50 <LL_TIM_GetPrescaler>
 8002060:	4603      	mov	r3, r0
 8002062:	3301      	adds	r3, #1
 8002064:	2264      	movs	r2, #100	; 0x64
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	fbb4 f3f3 	udiv	r3, r4, r3
 800206e:	3b01      	subs	r3, #1
 8002070:	e000      	b.n	8002074 <Configure_TIMPWMOutput+0xbc>
 8002072:	2300      	movs	r3, #0
 8002074:	4619      	mov	r1, r3
 8002076:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800207a:	f7ff fe75 	bl	8001d68 <LL_TIM_SetAutoReload>
  /*********************************/
  /* Output waveform configuration */
  /*********************************/
  /* Set output mode */
  /* Reset value is LL_TIM_OCMODE_FROZEN */
  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 800207e:	2260      	movs	r2, #96	; 0x60
 8002080:	2101      	movs	r1, #1
 8002082:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002086:	f7ff fe9b 	bl	8001dc0 <LL_TIM_OC_SetMode>
  /* Set output channel polarity */
  /* Reset value is LL_TIM_OCPOLARITY_HIGH */
  //LL_TIM_OC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);

  /* Set compare value to half of the counter period (50% duty cycle ) */
  LL_TIM_OC_SetCompareCH1(TIM2, (LL_TIM_GetAutoReload(TIM2) / 2));
 800208a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800208e:	f7ff fe79 	bl	8001d84 <LL_TIM_GetAutoReload>
 8002092:	4603      	mov	r3, r0
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	4619      	mov	r1, r3
 8002098:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800209c:	f7ff ff3c 	bl	8001f18 <LL_TIM_OC_SetCompareCH1>

  /* Enable TIM2_CCR1 register preload. Read/Write operations access the      */
  /* preload register. TIM2_CCR1 preload value is loaded in the active        */
  /* at each update event.                                                    */
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80020a0:	2101      	movs	r1, #1
 80020a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020a6:	f7ff fee7 	bl	8001e78 <LL_TIM_OC_EnablePreload>

  /**************************/
  /* TIM2 interrupts set-up */
  /**************************/
  /* Enable the capture/compare interrupt for channel 1*/
  LL_TIM_EnableIT_CC1(TIM2);
 80020aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020ae:	f7ff ff62 	bl	8001f76 <LL_TIM_EnableIT_CC1>

  /**********************************/
  /* Start output signal generation */
  /**********************************/
  /* Enable output channel 1 */
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 80020b2:	2101      	movs	r1, #1
 80020b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020b8:	f7ff fe70 	bl	8001d9c <LL_TIM_CC_EnableChannel>

  /* Enable counter */
  LL_TIM_EnableCounter(TIM2);
 80020bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020c0:	f7ff fe0c 	bl	8001cdc <LL_TIM_EnableCounter>

  /* Force update generation */
  LL_TIM_GenerateEvent_UPDATE(TIM2);
 80020c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020c8:	f7ff ff65 	bl	8001f96 <LL_TIM_GenerateEvent_UPDATE>
}
 80020cc:	bf00      	nop
 80020ce:	bd98      	pop	{r3, r4, r7, pc}
 80020d0:	20000004 	.word	0x20000004
 80020d4:	d1b71759 	.word	0xd1b71759

080020d8 <Configure_DutyCycle>:


void Configure_DutyCycle(uint32_t D)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  uint32_t P;    /* Pulse duration */
  uint32_t T;    /* PWM signal period */

  /* PWM signal period is determined by the value of the auto-reload register */
  T = LL_TIM_GetAutoReload(TIM2);
 80020e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80020e4:	f7ff fe4e 	bl	8001d84 <LL_TIM_GetAutoReload>
 80020e8:	60f8      	str	r0, [r7, #12]

  /* Pulse duration is determined by the value of the compare register.       */
  /* Its value is calculated in order to match the requested duty cycle.      */
  P = (D*T)/100;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	4a07      	ldr	r2, [pc, #28]	; (8002110 <Configure_DutyCycle+0x38>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	60bb      	str	r3, [r7, #8]
  LL_TIM_OC_SetCompareCH1(TIM2, P);
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002102:	f7ff ff09 	bl	8001f18 <LL_TIM_OC_SetCompareCH1>
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	51eb851f 	.word	0x51eb851f

08002114 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
		/* Enable counter */
	{
	  /* Check whether CC1 interrupt is pending */
	  if(LL_TIM_IsActiveFlag_CC1(TIM2) == 1)
 8002118:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800211c:	f7ff ff18 	bl	8001f50 <LL_TIM_IsActiveFlag_CC1>
 8002120:	4603      	mov	r3, r0
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <TIM2_IRQHandler+0x1e>
	  {
	    /* Clear the update interrupt flag*/
	    LL_TIM_ClearFlag_CC1(TIM2);
 8002126:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800212a:	f7ff ff03 	bl	8001f34 <LL_TIM_ClearFlag_CC1>

	    /* TIM2 capture/compare interrupt processing(function defined in main.c) */
	    TimerCaptureCompare_Callback();
 800212e:	f000 f803 	bl	8002138 <TimerCaptureCompare_Callback>
	  }
	}

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <TimerCaptureCompare_Callback>:


void TimerCaptureCompare_Callback(void)
{
 8002138:	b598      	push	{r3, r4, r7, lr}
 800213a:	af00      	add	r7, sp, #0
  MeasuredDutyCycle = (LL_TIM_GetCounter(TIM2) * 100) / LL_TIM_GetAutoReload(TIM2);
 800213c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002140:	f7ff fdec 	bl	8001d1c <LL_TIM_GetCounter>
 8002144:	4603      	mov	r3, r0
 8002146:	2264      	movs	r2, #100	; 0x64
 8002148:	fb02 f403 	mul.w	r4, r2, r3
 800214c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002150:	f7ff fe18 	bl	8001d84 <LL_TIM_GetAutoReload>
 8002154:	4603      	mov	r3, r0
 8002156:	fbb4 f3f3 	udiv	r3, r4, r3
 800215a:	4a02      	ldr	r2, [pc, #8]	; (8002164 <TimerCaptureCompare_Callback+0x2c>)
 800215c:	6013      	str	r3, [r2, #0]
}
 800215e:	bf00      	nop
 8002160:	bd98      	pop	{r3, r4, r7, pc}
 8002162:	bf00      	nop
 8002164:	200000a8 	.word	0x200000a8

08002168 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	4a07      	ldr	r2, [pc, #28]	; (8002198 <LL_InitTick+0x30>)
 800217c:	3b01      	subs	r3, #1
 800217e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <LL_InitTick+0x30>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <LL_InitTick+0x30>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk;                   /* Enable the Systick Timer */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e010 	.word	0xe000e010

0800219c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80021a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ffdd 	bl	8002168 <LL_InitTick>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <LL_SetSystemCoreClock+0x1c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000004 	.word	0x20000004

080021d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021d8:	480d      	ldr	r0, [pc, #52]	; (8002210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021dc:	f7fe fd6e 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <LoopForever+0x6>)
  ldr r1, =_edata
 80021e2:	490d      	ldr	r1, [pc, #52]	; (8002218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <LoopForever+0xe>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021f8:	4c0a      	ldr	r4, [pc, #40]	; (8002224 <LoopForever+0x16>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002206:	f000 f811 	bl	800222c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800220a:	f7fe fc69 	bl	8000ae0 <main>

0800220e <LoopForever>:

LoopForever:
  b LoopForever
 800220e:	e7fe      	b.n	800220e <LoopForever>
  ldr   r0, =_estack
 8002210:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002218:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800221c:	08003220 	.word	0x08003220
  ldr r2, =_sbss
 8002220:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002224:	200000ac 	.word	0x200000ac

08002228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002228:	e7fe      	b.n	8002228 <ADC1_2_IRQHandler>
	...

0800222c <__libc_init_array>:
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	4d0d      	ldr	r5, [pc, #52]	; (8002264 <__libc_init_array+0x38>)
 8002230:	4c0d      	ldr	r4, [pc, #52]	; (8002268 <__libc_init_array+0x3c>)
 8002232:	1b64      	subs	r4, r4, r5
 8002234:	10a4      	asrs	r4, r4, #2
 8002236:	2600      	movs	r6, #0
 8002238:	42a6      	cmp	r6, r4
 800223a:	d109      	bne.n	8002250 <__libc_init_array+0x24>
 800223c:	4d0b      	ldr	r5, [pc, #44]	; (800226c <__libc_init_array+0x40>)
 800223e:	4c0c      	ldr	r4, [pc, #48]	; (8002270 <__libc_init_array+0x44>)
 8002240:	f000 ff7e 	bl	8003140 <_init>
 8002244:	1b64      	subs	r4, r4, r5
 8002246:	10a4      	asrs	r4, r4, #2
 8002248:	2600      	movs	r6, #0
 800224a:	42a6      	cmp	r6, r4
 800224c:	d105      	bne.n	800225a <__libc_init_array+0x2e>
 800224e:	bd70      	pop	{r4, r5, r6, pc}
 8002250:	f855 3b04 	ldr.w	r3, [r5], #4
 8002254:	4798      	blx	r3
 8002256:	3601      	adds	r6, #1
 8002258:	e7ee      	b.n	8002238 <__libc_init_array+0xc>
 800225a:	f855 3b04 	ldr.w	r3, [r5], #4
 800225e:	4798      	blx	r3
 8002260:	3601      	adds	r6, #1
 8002262:	e7f2      	b.n	800224a <__libc_init_array+0x1e>
 8002264:	08003218 	.word	0x08003218
 8002268:	08003218 	.word	0x08003218
 800226c:	08003218 	.word	0x08003218
 8002270:	0800321c 	.word	0x0800321c

08002274 <__utoa>:
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	4c1f      	ldr	r4, [pc, #124]	; (80022f4 <__utoa+0x80>)
 8002278:	b08b      	sub	sp, #44	; 0x2c
 800227a:	4605      	mov	r5, r0
 800227c:	460b      	mov	r3, r1
 800227e:	466e      	mov	r6, sp
 8002280:	f104 0c20 	add.w	ip, r4, #32
 8002284:	6820      	ldr	r0, [r4, #0]
 8002286:	6861      	ldr	r1, [r4, #4]
 8002288:	4637      	mov	r7, r6
 800228a:	c703      	stmia	r7!, {r0, r1}
 800228c:	3408      	adds	r4, #8
 800228e:	4564      	cmp	r4, ip
 8002290:	463e      	mov	r6, r7
 8002292:	d1f7      	bne.n	8002284 <__utoa+0x10>
 8002294:	7921      	ldrb	r1, [r4, #4]
 8002296:	7139      	strb	r1, [r7, #4]
 8002298:	1e91      	subs	r1, r2, #2
 800229a:	6820      	ldr	r0, [r4, #0]
 800229c:	6038      	str	r0, [r7, #0]
 800229e:	2922      	cmp	r1, #34	; 0x22
 80022a0:	f04f 0100 	mov.w	r1, #0
 80022a4:	d904      	bls.n	80022b0 <__utoa+0x3c>
 80022a6:	7019      	strb	r1, [r3, #0]
 80022a8:	460b      	mov	r3, r1
 80022aa:	4618      	mov	r0, r3
 80022ac:	b00b      	add	sp, #44	; 0x2c
 80022ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022b0:	1e58      	subs	r0, r3, #1
 80022b2:	4684      	mov	ip, r0
 80022b4:	fbb5 f7f2 	udiv	r7, r5, r2
 80022b8:	fb02 5617 	mls	r6, r2, r7, r5
 80022bc:	3628      	adds	r6, #40	; 0x28
 80022be:	446e      	add	r6, sp
 80022c0:	460c      	mov	r4, r1
 80022c2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80022c6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80022ca:	462e      	mov	r6, r5
 80022cc:	42b2      	cmp	r2, r6
 80022ce:	f101 0101 	add.w	r1, r1, #1
 80022d2:	463d      	mov	r5, r7
 80022d4:	d9ee      	bls.n	80022b4 <__utoa+0x40>
 80022d6:	2200      	movs	r2, #0
 80022d8:	545a      	strb	r2, [r3, r1]
 80022da:	1919      	adds	r1, r3, r4
 80022dc:	1aa5      	subs	r5, r4, r2
 80022de:	42aa      	cmp	r2, r5
 80022e0:	dae3      	bge.n	80022aa <__utoa+0x36>
 80022e2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80022e6:	780e      	ldrb	r6, [r1, #0]
 80022e8:	7006      	strb	r6, [r0, #0]
 80022ea:	3201      	adds	r2, #1
 80022ec:	f801 5901 	strb.w	r5, [r1], #-1
 80022f0:	e7f4      	b.n	80022dc <__utoa+0x68>
 80022f2:	bf00      	nop
 80022f4:	080031c1 	.word	0x080031c1

080022f8 <utoa>:
 80022f8:	f7ff bfbc 	b.w	8002274 <__utoa>

080022fc <pow>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	ed2d 8b02 	vpush	{d8}
 8002302:	eeb0 8a40 	vmov.f32	s16, s0
 8002306:	eef0 8a60 	vmov.f32	s17, s1
 800230a:	ec55 4b11 	vmov	r4, r5, d1
 800230e:	f000 f867 	bl	80023e0 <__ieee754_pow>
 8002312:	4622      	mov	r2, r4
 8002314:	462b      	mov	r3, r5
 8002316:	4620      	mov	r0, r4
 8002318:	4629      	mov	r1, r5
 800231a:	ec57 6b10 	vmov	r6, r7, d0
 800231e:	f7fe fba9 	bl	8000a74 <__aeabi_dcmpun>
 8002322:	2800      	cmp	r0, #0
 8002324:	d13b      	bne.n	800239e <pow+0xa2>
 8002326:	ec51 0b18 	vmov	r0, r1, d8
 800232a:	2200      	movs	r2, #0
 800232c:	2300      	movs	r3, #0
 800232e:	f7fe fb6f 	bl	8000a10 <__aeabi_dcmpeq>
 8002332:	b1b8      	cbz	r0, 8002364 <pow+0x68>
 8002334:	2200      	movs	r2, #0
 8002336:	2300      	movs	r3, #0
 8002338:	4620      	mov	r0, r4
 800233a:	4629      	mov	r1, r5
 800233c:	f7fe fb68 	bl	8000a10 <__aeabi_dcmpeq>
 8002340:	2800      	cmp	r0, #0
 8002342:	d146      	bne.n	80023d2 <pow+0xd6>
 8002344:	ec45 4b10 	vmov	d0, r4, r5
 8002348:	f000 fe63 	bl	8003012 <finite>
 800234c:	b338      	cbz	r0, 800239e <pow+0xa2>
 800234e:	2200      	movs	r2, #0
 8002350:	2300      	movs	r3, #0
 8002352:	4620      	mov	r0, r4
 8002354:	4629      	mov	r1, r5
 8002356:	f7fe fb65 	bl	8000a24 <__aeabi_dcmplt>
 800235a:	b300      	cbz	r0, 800239e <pow+0xa2>
 800235c:	f000 feea 	bl	8003134 <__errno>
 8002360:	2322      	movs	r3, #34	; 0x22
 8002362:	e01b      	b.n	800239c <pow+0xa0>
 8002364:	ec47 6b10 	vmov	d0, r6, r7
 8002368:	f000 fe53 	bl	8003012 <finite>
 800236c:	b9e0      	cbnz	r0, 80023a8 <pow+0xac>
 800236e:	eeb0 0a48 	vmov.f32	s0, s16
 8002372:	eef0 0a68 	vmov.f32	s1, s17
 8002376:	f000 fe4c 	bl	8003012 <finite>
 800237a:	b1a8      	cbz	r0, 80023a8 <pow+0xac>
 800237c:	ec45 4b10 	vmov	d0, r4, r5
 8002380:	f000 fe47 	bl	8003012 <finite>
 8002384:	b180      	cbz	r0, 80023a8 <pow+0xac>
 8002386:	4632      	mov	r2, r6
 8002388:	463b      	mov	r3, r7
 800238a:	4630      	mov	r0, r6
 800238c:	4639      	mov	r1, r7
 800238e:	f7fe fb71 	bl	8000a74 <__aeabi_dcmpun>
 8002392:	2800      	cmp	r0, #0
 8002394:	d0e2      	beq.n	800235c <pow+0x60>
 8002396:	f000 fecd 	bl	8003134 <__errno>
 800239a:	2321      	movs	r3, #33	; 0x21
 800239c:	6003      	str	r3, [r0, #0]
 800239e:	ecbd 8b02 	vpop	{d8}
 80023a2:	ec47 6b10 	vmov	d0, r6, r7
 80023a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023a8:	2200      	movs	r2, #0
 80023aa:	2300      	movs	r3, #0
 80023ac:	4630      	mov	r0, r6
 80023ae:	4639      	mov	r1, r7
 80023b0:	f7fe fb2e 	bl	8000a10 <__aeabi_dcmpeq>
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d0f2      	beq.n	800239e <pow+0xa2>
 80023b8:	eeb0 0a48 	vmov.f32	s0, s16
 80023bc:	eef0 0a68 	vmov.f32	s1, s17
 80023c0:	f000 fe27 	bl	8003012 <finite>
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d0ea      	beq.n	800239e <pow+0xa2>
 80023c8:	ec45 4b10 	vmov	d0, r4, r5
 80023cc:	f000 fe21 	bl	8003012 <finite>
 80023d0:	e7c3      	b.n	800235a <pow+0x5e>
 80023d2:	4f01      	ldr	r7, [pc, #4]	; (80023d8 <pow+0xdc>)
 80023d4:	2600      	movs	r6, #0
 80023d6:	e7e2      	b.n	800239e <pow+0xa2>
 80023d8:	3ff00000 	.word	0x3ff00000
 80023dc:	00000000 	.word	0x00000000

080023e0 <__ieee754_pow>:
 80023e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e4:	ed2d 8b06 	vpush	{d8-d10}
 80023e8:	b089      	sub	sp, #36	; 0x24
 80023ea:	ed8d 1b00 	vstr	d1, [sp]
 80023ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 80023f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80023f6:	ea58 0102 	orrs.w	r1, r8, r2
 80023fa:	ec57 6b10 	vmov	r6, r7, d0
 80023fe:	d115      	bne.n	800242c <__ieee754_pow+0x4c>
 8002400:	19b3      	adds	r3, r6, r6
 8002402:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8002406:	4152      	adcs	r2, r2
 8002408:	4299      	cmp	r1, r3
 800240a:	4b89      	ldr	r3, [pc, #548]	; (8002630 <__ieee754_pow+0x250>)
 800240c:	4193      	sbcs	r3, r2
 800240e:	f080 84d2 	bcs.w	8002db6 <__ieee754_pow+0x9d6>
 8002412:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002416:	4630      	mov	r0, r6
 8002418:	4639      	mov	r1, r7
 800241a:	f7fd fedb 	bl	80001d4 <__adddf3>
 800241e:	ec41 0b10 	vmov	d0, r0, r1
 8002422:	b009      	add	sp, #36	; 0x24
 8002424:	ecbd 8b06 	vpop	{d8-d10}
 8002428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800242c:	4b81      	ldr	r3, [pc, #516]	; (8002634 <__ieee754_pow+0x254>)
 800242e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8002432:	429c      	cmp	r4, r3
 8002434:	ee10 aa10 	vmov	sl, s0
 8002438:	463d      	mov	r5, r7
 800243a:	dc06      	bgt.n	800244a <__ieee754_pow+0x6a>
 800243c:	d101      	bne.n	8002442 <__ieee754_pow+0x62>
 800243e:	2e00      	cmp	r6, #0
 8002440:	d1e7      	bne.n	8002412 <__ieee754_pow+0x32>
 8002442:	4598      	cmp	r8, r3
 8002444:	dc01      	bgt.n	800244a <__ieee754_pow+0x6a>
 8002446:	d10f      	bne.n	8002468 <__ieee754_pow+0x88>
 8002448:	b172      	cbz	r2, 8002468 <__ieee754_pow+0x88>
 800244a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800244e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8002452:	ea55 050a 	orrs.w	r5, r5, sl
 8002456:	d1dc      	bne.n	8002412 <__ieee754_pow+0x32>
 8002458:	e9dd 3200 	ldrd	r3, r2, [sp]
 800245c:	18db      	adds	r3, r3, r3
 800245e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002462:	4152      	adcs	r2, r2
 8002464:	429d      	cmp	r5, r3
 8002466:	e7d0      	b.n	800240a <__ieee754_pow+0x2a>
 8002468:	2d00      	cmp	r5, #0
 800246a:	da3b      	bge.n	80024e4 <__ieee754_pow+0x104>
 800246c:	4b72      	ldr	r3, [pc, #456]	; (8002638 <__ieee754_pow+0x258>)
 800246e:	4598      	cmp	r8, r3
 8002470:	dc51      	bgt.n	8002516 <__ieee754_pow+0x136>
 8002472:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002476:	4598      	cmp	r8, r3
 8002478:	f340 84ac 	ble.w	8002dd4 <__ieee754_pow+0x9f4>
 800247c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002480:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002484:	2b14      	cmp	r3, #20
 8002486:	dd0f      	ble.n	80024a8 <__ieee754_pow+0xc8>
 8002488:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800248c:	fa22 f103 	lsr.w	r1, r2, r3
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	4293      	cmp	r3, r2
 8002496:	f040 849d 	bne.w	8002dd4 <__ieee754_pow+0x9f4>
 800249a:	f001 0101 	and.w	r1, r1, #1
 800249e:	f1c1 0302 	rsb	r3, r1, #2
 80024a2:	9304      	str	r3, [sp, #16]
 80024a4:	b182      	cbz	r2, 80024c8 <__ieee754_pow+0xe8>
 80024a6:	e05f      	b.n	8002568 <__ieee754_pow+0x188>
 80024a8:	2a00      	cmp	r2, #0
 80024aa:	d15b      	bne.n	8002564 <__ieee754_pow+0x184>
 80024ac:	f1c3 0314 	rsb	r3, r3, #20
 80024b0:	fa48 f103 	asr.w	r1, r8, r3
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	4543      	cmp	r3, r8
 80024ba:	f040 8488 	bne.w	8002dce <__ieee754_pow+0x9ee>
 80024be:	f001 0101 	and.w	r1, r1, #1
 80024c2:	f1c1 0302 	rsb	r3, r1, #2
 80024c6:	9304      	str	r3, [sp, #16]
 80024c8:	4b5c      	ldr	r3, [pc, #368]	; (800263c <__ieee754_pow+0x25c>)
 80024ca:	4598      	cmp	r8, r3
 80024cc:	d132      	bne.n	8002534 <__ieee754_pow+0x154>
 80024ce:	f1b9 0f00 	cmp.w	r9, #0
 80024d2:	f280 8478 	bge.w	8002dc6 <__ieee754_pow+0x9e6>
 80024d6:	4959      	ldr	r1, [pc, #356]	; (800263c <__ieee754_pow+0x25c>)
 80024d8:	4632      	mov	r2, r6
 80024da:	463b      	mov	r3, r7
 80024dc:	2000      	movs	r0, #0
 80024de:	f7fe f959 	bl	8000794 <__aeabi_ddiv>
 80024e2:	e79c      	b.n	800241e <__ieee754_pow+0x3e>
 80024e4:	2300      	movs	r3, #0
 80024e6:	9304      	str	r3, [sp, #16]
 80024e8:	2a00      	cmp	r2, #0
 80024ea:	d13d      	bne.n	8002568 <__ieee754_pow+0x188>
 80024ec:	4b51      	ldr	r3, [pc, #324]	; (8002634 <__ieee754_pow+0x254>)
 80024ee:	4598      	cmp	r8, r3
 80024f0:	d1ea      	bne.n	80024c8 <__ieee754_pow+0xe8>
 80024f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80024f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80024fa:	ea53 030a 	orrs.w	r3, r3, sl
 80024fe:	f000 845a 	beq.w	8002db6 <__ieee754_pow+0x9d6>
 8002502:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <__ieee754_pow+0x260>)
 8002504:	429c      	cmp	r4, r3
 8002506:	dd08      	ble.n	800251a <__ieee754_pow+0x13a>
 8002508:	f1b9 0f00 	cmp.w	r9, #0
 800250c:	f2c0 8457 	blt.w	8002dbe <__ieee754_pow+0x9de>
 8002510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002514:	e783      	b.n	800241e <__ieee754_pow+0x3e>
 8002516:	2302      	movs	r3, #2
 8002518:	e7e5      	b.n	80024e6 <__ieee754_pow+0x106>
 800251a:	f1b9 0f00 	cmp.w	r9, #0
 800251e:	f04f 0000 	mov.w	r0, #0
 8002522:	f04f 0100 	mov.w	r1, #0
 8002526:	f6bf af7a 	bge.w	800241e <__ieee754_pow+0x3e>
 800252a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800252e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002532:	e774      	b.n	800241e <__ieee754_pow+0x3e>
 8002534:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8002538:	d106      	bne.n	8002548 <__ieee754_pow+0x168>
 800253a:	4632      	mov	r2, r6
 800253c:	463b      	mov	r3, r7
 800253e:	4630      	mov	r0, r6
 8002540:	4639      	mov	r1, r7
 8002542:	f7fd fffd 	bl	8000540 <__aeabi_dmul>
 8002546:	e76a      	b.n	800241e <__ieee754_pow+0x3e>
 8002548:	4b3e      	ldr	r3, [pc, #248]	; (8002644 <__ieee754_pow+0x264>)
 800254a:	4599      	cmp	r9, r3
 800254c:	d10c      	bne.n	8002568 <__ieee754_pow+0x188>
 800254e:	2d00      	cmp	r5, #0
 8002550:	db0a      	blt.n	8002568 <__ieee754_pow+0x188>
 8002552:	ec47 6b10 	vmov	d0, r6, r7
 8002556:	b009      	add	sp, #36	; 0x24
 8002558:	ecbd 8b06 	vpop	{d8-d10}
 800255c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002560:	f000 bc6c 	b.w	8002e3c <__ieee754_sqrt>
 8002564:	2300      	movs	r3, #0
 8002566:	9304      	str	r3, [sp, #16]
 8002568:	ec47 6b10 	vmov	d0, r6, r7
 800256c:	f000 fd48 	bl	8003000 <fabs>
 8002570:	ec51 0b10 	vmov	r0, r1, d0
 8002574:	f1ba 0f00 	cmp.w	sl, #0
 8002578:	d129      	bne.n	80025ce <__ieee754_pow+0x1ee>
 800257a:	b124      	cbz	r4, 8002586 <__ieee754_pow+0x1a6>
 800257c:	4b2f      	ldr	r3, [pc, #188]	; (800263c <__ieee754_pow+0x25c>)
 800257e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002582:	429a      	cmp	r2, r3
 8002584:	d123      	bne.n	80025ce <__ieee754_pow+0x1ee>
 8002586:	f1b9 0f00 	cmp.w	r9, #0
 800258a:	da05      	bge.n	8002598 <__ieee754_pow+0x1b8>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	2000      	movs	r0, #0
 8002592:	492a      	ldr	r1, [pc, #168]	; (800263c <__ieee754_pow+0x25c>)
 8002594:	f7fe f8fe 	bl	8000794 <__aeabi_ddiv>
 8002598:	2d00      	cmp	r5, #0
 800259a:	f6bf af40 	bge.w	800241e <__ieee754_pow+0x3e>
 800259e:	9b04      	ldr	r3, [sp, #16]
 80025a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80025a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80025a8:	4323      	orrs	r3, r4
 80025aa:	d108      	bne.n	80025be <__ieee754_pow+0x1de>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fd fe0c 	bl	80001d0 <__aeabi_dsub>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	e78f      	b.n	80024de <__ieee754_pow+0xfe>
 80025be:	9b04      	ldr	r3, [sp, #16]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	f47f af2c 	bne.w	800241e <__ieee754_pow+0x3e>
 80025c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80025ca:	4619      	mov	r1, r3
 80025cc:	e727      	b.n	800241e <__ieee754_pow+0x3e>
 80025ce:	0feb      	lsrs	r3, r5, #31
 80025d0:	3b01      	subs	r3, #1
 80025d2:	9306      	str	r3, [sp, #24]
 80025d4:	9a06      	ldr	r2, [sp, #24]
 80025d6:	9b04      	ldr	r3, [sp, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	d102      	bne.n	80025e2 <__ieee754_pow+0x202>
 80025dc:	4632      	mov	r2, r6
 80025de:	463b      	mov	r3, r7
 80025e0:	e7e6      	b.n	80025b0 <__ieee754_pow+0x1d0>
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <__ieee754_pow+0x268>)
 80025e4:	4598      	cmp	r8, r3
 80025e6:	f340 80fb 	ble.w	80027e0 <__ieee754_pow+0x400>
 80025ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80025ee:	4598      	cmp	r8, r3
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <__ieee754_pow+0x260>)
 80025f2:	dd0c      	ble.n	800260e <__ieee754_pow+0x22e>
 80025f4:	429c      	cmp	r4, r3
 80025f6:	dc0f      	bgt.n	8002618 <__ieee754_pow+0x238>
 80025f8:	f1b9 0f00 	cmp.w	r9, #0
 80025fc:	da0f      	bge.n	800261e <__ieee754_pow+0x23e>
 80025fe:	2000      	movs	r0, #0
 8002600:	b009      	add	sp, #36	; 0x24
 8002602:	ecbd 8b06 	vpop	{d8-d10}
 8002606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800260a:	f000 bcf0 	b.w	8002fee <__math_oflow>
 800260e:	429c      	cmp	r4, r3
 8002610:	dbf2      	blt.n	80025f8 <__ieee754_pow+0x218>
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <__ieee754_pow+0x25c>)
 8002614:	429c      	cmp	r4, r3
 8002616:	dd19      	ble.n	800264c <__ieee754_pow+0x26c>
 8002618:	f1b9 0f00 	cmp.w	r9, #0
 800261c:	dcef      	bgt.n	80025fe <__ieee754_pow+0x21e>
 800261e:	2000      	movs	r0, #0
 8002620:	b009      	add	sp, #36	; 0x24
 8002622:	ecbd 8b06 	vpop	{d8-d10}
 8002626:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800262a:	f000 bcd7 	b.w	8002fdc <__math_uflow>
 800262e:	bf00      	nop
 8002630:	fff00000 	.word	0xfff00000
 8002634:	7ff00000 	.word	0x7ff00000
 8002638:	433fffff 	.word	0x433fffff
 800263c:	3ff00000 	.word	0x3ff00000
 8002640:	3fefffff 	.word	0x3fefffff
 8002644:	3fe00000 	.word	0x3fe00000
 8002648:	41e00000 	.word	0x41e00000
 800264c:	4b60      	ldr	r3, [pc, #384]	; (80027d0 <__ieee754_pow+0x3f0>)
 800264e:	2200      	movs	r2, #0
 8002650:	f7fd fdbe 	bl	80001d0 <__aeabi_dsub>
 8002654:	a354      	add	r3, pc, #336	; (adr r3, 80027a8 <__ieee754_pow+0x3c8>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	4604      	mov	r4, r0
 800265c:	460d      	mov	r5, r1
 800265e:	f7fd ff6f 	bl	8000540 <__aeabi_dmul>
 8002662:	a353      	add	r3, pc, #332	; (adr r3, 80027b0 <__ieee754_pow+0x3d0>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	4606      	mov	r6, r0
 800266a:	460f      	mov	r7, r1
 800266c:	4620      	mov	r0, r4
 800266e:	4629      	mov	r1, r5
 8002670:	f7fd ff66 	bl	8000540 <__aeabi_dmul>
 8002674:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <__ieee754_pow+0x3f4>)
 8002676:	4682      	mov	sl, r0
 8002678:	468b      	mov	fp, r1
 800267a:	2200      	movs	r2, #0
 800267c:	4620      	mov	r0, r4
 800267e:	4629      	mov	r1, r5
 8002680:	f7fd ff5e 	bl	8000540 <__aeabi_dmul>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	a14b      	add	r1, pc, #300	; (adr r1, 80027b8 <__ieee754_pow+0x3d8>)
 800268a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800268e:	f7fd fd9f 	bl	80001d0 <__aeabi_dsub>
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	f7fd ff53 	bl	8000540 <__aeabi_dmul>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	2000      	movs	r0, #0
 80026a0:	494d      	ldr	r1, [pc, #308]	; (80027d8 <__ieee754_pow+0x3f8>)
 80026a2:	f7fd fd95 	bl	80001d0 <__aeabi_dsub>
 80026a6:	4622      	mov	r2, r4
 80026a8:	4680      	mov	r8, r0
 80026aa:	4689      	mov	r9, r1
 80026ac:	462b      	mov	r3, r5
 80026ae:	4620      	mov	r0, r4
 80026b0:	4629      	mov	r1, r5
 80026b2:	f7fd ff45 	bl	8000540 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4640      	mov	r0, r8
 80026bc:	4649      	mov	r1, r9
 80026be:	f7fd ff3f 	bl	8000540 <__aeabi_dmul>
 80026c2:	a33f      	add	r3, pc, #252	; (adr r3, 80027c0 <__ieee754_pow+0x3e0>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f7fd ff3a 	bl	8000540 <__aeabi_dmul>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4650      	mov	r0, sl
 80026d2:	4659      	mov	r1, fp
 80026d4:	f7fd fd7c 	bl	80001d0 <__aeabi_dsub>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4680      	mov	r8, r0
 80026de:	4689      	mov	r9, r1
 80026e0:	4630      	mov	r0, r6
 80026e2:	4639      	mov	r1, r7
 80026e4:	f7fd fd76 	bl	80001d4 <__adddf3>
 80026e8:	2000      	movs	r0, #0
 80026ea:	4632      	mov	r2, r6
 80026ec:	463b      	mov	r3, r7
 80026ee:	4604      	mov	r4, r0
 80026f0:	460d      	mov	r5, r1
 80026f2:	f7fd fd6d 	bl	80001d0 <__aeabi_dsub>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4640      	mov	r0, r8
 80026fc:	4649      	mov	r1, r9
 80026fe:	f7fd fd67 	bl	80001d0 <__aeabi_dsub>
 8002702:	9b04      	ldr	r3, [sp, #16]
 8002704:	9a06      	ldr	r2, [sp, #24]
 8002706:	3b01      	subs	r3, #1
 8002708:	4313      	orrs	r3, r2
 800270a:	4682      	mov	sl, r0
 800270c:	468b      	mov	fp, r1
 800270e:	f040 81e7 	bne.w	8002ae0 <__ieee754_pow+0x700>
 8002712:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80027c8 <__ieee754_pow+0x3e8>
 8002716:	eeb0 8a47 	vmov.f32	s16, s14
 800271a:	eef0 8a67 	vmov.f32	s17, s15
 800271e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002722:	2600      	movs	r6, #0
 8002724:	4632      	mov	r2, r6
 8002726:	463b      	mov	r3, r7
 8002728:	e9dd 0100 	ldrd	r0, r1, [sp]
 800272c:	f7fd fd50 	bl	80001d0 <__aeabi_dsub>
 8002730:	4622      	mov	r2, r4
 8002732:	462b      	mov	r3, r5
 8002734:	f7fd ff04 	bl	8000540 <__aeabi_dmul>
 8002738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800273c:	4680      	mov	r8, r0
 800273e:	4689      	mov	r9, r1
 8002740:	4650      	mov	r0, sl
 8002742:	4659      	mov	r1, fp
 8002744:	f7fd fefc 	bl	8000540 <__aeabi_dmul>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4640      	mov	r0, r8
 800274e:	4649      	mov	r1, r9
 8002750:	f7fd fd40 	bl	80001d4 <__adddf3>
 8002754:	4632      	mov	r2, r6
 8002756:	463b      	mov	r3, r7
 8002758:	4680      	mov	r8, r0
 800275a:	4689      	mov	r9, r1
 800275c:	4620      	mov	r0, r4
 800275e:	4629      	mov	r1, r5
 8002760:	f7fd feee 	bl	8000540 <__aeabi_dmul>
 8002764:	460b      	mov	r3, r1
 8002766:	4604      	mov	r4, r0
 8002768:	460d      	mov	r5, r1
 800276a:	4602      	mov	r2, r0
 800276c:	4649      	mov	r1, r9
 800276e:	4640      	mov	r0, r8
 8002770:	f7fd fd30 	bl	80001d4 <__adddf3>
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <__ieee754_pow+0x3fc>)
 8002776:	4299      	cmp	r1, r3
 8002778:	ec45 4b19 	vmov	d9, r4, r5
 800277c:	4606      	mov	r6, r0
 800277e:	460f      	mov	r7, r1
 8002780:	468b      	mov	fp, r1
 8002782:	f340 82f1 	ble.w	8002d68 <__ieee754_pow+0x988>
 8002786:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800278a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800278e:	4303      	orrs	r3, r0
 8002790:	f000 81e4 	beq.w	8002b5c <__ieee754_pow+0x77c>
 8002794:	ec51 0b18 	vmov	r0, r1, d8
 8002798:	2200      	movs	r2, #0
 800279a:	2300      	movs	r3, #0
 800279c:	f7fe f942 	bl	8000a24 <__aeabi_dcmplt>
 80027a0:	3800      	subs	r0, #0
 80027a2:	bf18      	it	ne
 80027a4:	2001      	movne	r0, #1
 80027a6:	e72b      	b.n	8002600 <__ieee754_pow+0x220>
 80027a8:	60000000 	.word	0x60000000
 80027ac:	3ff71547 	.word	0x3ff71547
 80027b0:	f85ddf44 	.word	0xf85ddf44
 80027b4:	3e54ae0b 	.word	0x3e54ae0b
 80027b8:	55555555 	.word	0x55555555
 80027bc:	3fd55555 	.word	0x3fd55555
 80027c0:	652b82fe 	.word	0x652b82fe
 80027c4:	3ff71547 	.word	0x3ff71547
 80027c8:	00000000 	.word	0x00000000
 80027cc:	bff00000 	.word	0xbff00000
 80027d0:	3ff00000 	.word	0x3ff00000
 80027d4:	3fd00000 	.word	0x3fd00000
 80027d8:	3fe00000 	.word	0x3fe00000
 80027dc:	408fffff 	.word	0x408fffff
 80027e0:	4bd5      	ldr	r3, [pc, #852]	; (8002b38 <__ieee754_pow+0x758>)
 80027e2:	402b      	ands	r3, r5
 80027e4:	2200      	movs	r2, #0
 80027e6:	b92b      	cbnz	r3, 80027f4 <__ieee754_pow+0x414>
 80027e8:	4bd4      	ldr	r3, [pc, #848]	; (8002b3c <__ieee754_pow+0x75c>)
 80027ea:	f7fd fea9 	bl	8000540 <__aeabi_dmul>
 80027ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80027f2:	460c      	mov	r4, r1
 80027f4:	1523      	asrs	r3, r4, #20
 80027f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80027fa:	4413      	add	r3, r2
 80027fc:	9305      	str	r3, [sp, #20]
 80027fe:	4bd0      	ldr	r3, [pc, #832]	; (8002b40 <__ieee754_pow+0x760>)
 8002800:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002804:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002808:	429c      	cmp	r4, r3
 800280a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800280e:	dd08      	ble.n	8002822 <__ieee754_pow+0x442>
 8002810:	4bcc      	ldr	r3, [pc, #816]	; (8002b44 <__ieee754_pow+0x764>)
 8002812:	429c      	cmp	r4, r3
 8002814:	f340 8162 	ble.w	8002adc <__ieee754_pow+0x6fc>
 8002818:	9b05      	ldr	r3, [sp, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	9305      	str	r3, [sp, #20]
 800281e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002822:	2400      	movs	r4, #0
 8002824:	00e3      	lsls	r3, r4, #3
 8002826:	9307      	str	r3, [sp, #28]
 8002828:	4bc7      	ldr	r3, [pc, #796]	; (8002b48 <__ieee754_pow+0x768>)
 800282a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800282e:	ed93 7b00 	vldr	d7, [r3]
 8002832:	4629      	mov	r1, r5
 8002834:	ec53 2b17 	vmov	r2, r3, d7
 8002838:	eeb0 9a47 	vmov.f32	s18, s14
 800283c:	eef0 9a67 	vmov.f32	s19, s15
 8002840:	4682      	mov	sl, r0
 8002842:	f7fd fcc5 	bl	80001d0 <__aeabi_dsub>
 8002846:	4652      	mov	r2, sl
 8002848:	4606      	mov	r6, r0
 800284a:	460f      	mov	r7, r1
 800284c:	462b      	mov	r3, r5
 800284e:	ec51 0b19 	vmov	r0, r1, d9
 8002852:	f7fd fcbf 	bl	80001d4 <__adddf3>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	2000      	movs	r0, #0
 800285c:	49bb      	ldr	r1, [pc, #748]	; (8002b4c <__ieee754_pow+0x76c>)
 800285e:	f7fd ff99 	bl	8000794 <__aeabi_ddiv>
 8002862:	ec41 0b1a 	vmov	d10, r0, r1
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4630      	mov	r0, r6
 800286c:	4639      	mov	r1, r7
 800286e:	f7fd fe67 	bl	8000540 <__aeabi_dmul>
 8002872:	2300      	movs	r3, #0
 8002874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002878:	9302      	str	r3, [sp, #8]
 800287a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800287e:	46ab      	mov	fp, r5
 8002880:	106d      	asrs	r5, r5, #1
 8002882:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002886:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800288a:	ec41 0b18 	vmov	d8, r0, r1
 800288e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8002892:	2200      	movs	r2, #0
 8002894:	4640      	mov	r0, r8
 8002896:	4649      	mov	r1, r9
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	f7fd fe50 	bl	8000540 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4630      	mov	r0, r6
 80028a6:	4639      	mov	r1, r7
 80028a8:	f7fd fc92 	bl	80001d0 <__aeabi_dsub>
 80028ac:	ec53 2b19 	vmov	r2, r3, d9
 80028b0:	4606      	mov	r6, r0
 80028b2:	460f      	mov	r7, r1
 80028b4:	4620      	mov	r0, r4
 80028b6:	4629      	mov	r1, r5
 80028b8:	f7fd fc8a 	bl	80001d0 <__aeabi_dsub>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4650      	mov	r0, sl
 80028c2:	4659      	mov	r1, fp
 80028c4:	f7fd fc84 	bl	80001d0 <__aeabi_dsub>
 80028c8:	4642      	mov	r2, r8
 80028ca:	464b      	mov	r3, r9
 80028cc:	f7fd fe38 	bl	8000540 <__aeabi_dmul>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4630      	mov	r0, r6
 80028d6:	4639      	mov	r1, r7
 80028d8:	f7fd fc7a 	bl	80001d0 <__aeabi_dsub>
 80028dc:	ec53 2b1a 	vmov	r2, r3, d10
 80028e0:	f7fd fe2e 	bl	8000540 <__aeabi_dmul>
 80028e4:	ec53 2b18 	vmov	r2, r3, d8
 80028e8:	ec41 0b19 	vmov	d9, r0, r1
 80028ec:	ec51 0b18 	vmov	r0, r1, d8
 80028f0:	f7fd fe26 	bl	8000540 <__aeabi_dmul>
 80028f4:	a37c      	add	r3, pc, #496	; (adr r3, 8002ae8 <__ieee754_pow+0x708>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	4604      	mov	r4, r0
 80028fc:	460d      	mov	r5, r1
 80028fe:	f7fd fe1f 	bl	8000540 <__aeabi_dmul>
 8002902:	a37b      	add	r3, pc, #492	; (adr r3, 8002af0 <__ieee754_pow+0x710>)
 8002904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002908:	f7fd fc64 	bl	80001d4 <__adddf3>
 800290c:	4622      	mov	r2, r4
 800290e:	462b      	mov	r3, r5
 8002910:	f7fd fe16 	bl	8000540 <__aeabi_dmul>
 8002914:	a378      	add	r3, pc, #480	; (adr r3, 8002af8 <__ieee754_pow+0x718>)
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	f7fd fc5b 	bl	80001d4 <__adddf3>
 800291e:	4622      	mov	r2, r4
 8002920:	462b      	mov	r3, r5
 8002922:	f7fd fe0d 	bl	8000540 <__aeabi_dmul>
 8002926:	a376      	add	r3, pc, #472	; (adr r3, 8002b00 <__ieee754_pow+0x720>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fc52 	bl	80001d4 <__adddf3>
 8002930:	4622      	mov	r2, r4
 8002932:	462b      	mov	r3, r5
 8002934:	f7fd fe04 	bl	8000540 <__aeabi_dmul>
 8002938:	a373      	add	r3, pc, #460	; (adr r3, 8002b08 <__ieee754_pow+0x728>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fc49 	bl	80001d4 <__adddf3>
 8002942:	4622      	mov	r2, r4
 8002944:	462b      	mov	r3, r5
 8002946:	f7fd fdfb 	bl	8000540 <__aeabi_dmul>
 800294a:	a371      	add	r3, pc, #452	; (adr r3, 8002b10 <__ieee754_pow+0x730>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	f7fd fc40 	bl	80001d4 <__adddf3>
 8002954:	4622      	mov	r2, r4
 8002956:	4606      	mov	r6, r0
 8002958:	460f      	mov	r7, r1
 800295a:	462b      	mov	r3, r5
 800295c:	4620      	mov	r0, r4
 800295e:	4629      	mov	r1, r5
 8002960:	f7fd fdee 	bl	8000540 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4630      	mov	r0, r6
 800296a:	4639      	mov	r1, r7
 800296c:	f7fd fde8 	bl	8000540 <__aeabi_dmul>
 8002970:	4642      	mov	r2, r8
 8002972:	4604      	mov	r4, r0
 8002974:	460d      	mov	r5, r1
 8002976:	464b      	mov	r3, r9
 8002978:	ec51 0b18 	vmov	r0, r1, d8
 800297c:	f7fd fc2a 	bl	80001d4 <__adddf3>
 8002980:	ec53 2b19 	vmov	r2, r3, d9
 8002984:	f7fd fddc 	bl	8000540 <__aeabi_dmul>
 8002988:	4622      	mov	r2, r4
 800298a:	462b      	mov	r3, r5
 800298c:	f7fd fc22 	bl	80001d4 <__adddf3>
 8002990:	4642      	mov	r2, r8
 8002992:	4682      	mov	sl, r0
 8002994:	468b      	mov	fp, r1
 8002996:	464b      	mov	r3, r9
 8002998:	4640      	mov	r0, r8
 800299a:	4649      	mov	r1, r9
 800299c:	f7fd fdd0 	bl	8000540 <__aeabi_dmul>
 80029a0:	4b6b      	ldr	r3, [pc, #428]	; (8002b50 <__ieee754_pow+0x770>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	4606      	mov	r6, r0
 80029a6:	460f      	mov	r7, r1
 80029a8:	f7fd fc14 	bl	80001d4 <__adddf3>
 80029ac:	4652      	mov	r2, sl
 80029ae:	465b      	mov	r3, fp
 80029b0:	f7fd fc10 	bl	80001d4 <__adddf3>
 80029b4:	2000      	movs	r0, #0
 80029b6:	4604      	mov	r4, r0
 80029b8:	460d      	mov	r5, r1
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4640      	mov	r0, r8
 80029c0:	4649      	mov	r1, r9
 80029c2:	f7fd fdbd 	bl	8000540 <__aeabi_dmul>
 80029c6:	4b62      	ldr	r3, [pc, #392]	; (8002b50 <__ieee754_pow+0x770>)
 80029c8:	4680      	mov	r8, r0
 80029ca:	4689      	mov	r9, r1
 80029cc:	2200      	movs	r2, #0
 80029ce:	4620      	mov	r0, r4
 80029d0:	4629      	mov	r1, r5
 80029d2:	f7fd fbfd 	bl	80001d0 <__aeabi_dsub>
 80029d6:	4632      	mov	r2, r6
 80029d8:	463b      	mov	r3, r7
 80029da:	f7fd fbf9 	bl	80001d0 <__aeabi_dsub>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4650      	mov	r0, sl
 80029e4:	4659      	mov	r1, fp
 80029e6:	f7fd fbf3 	bl	80001d0 <__aeabi_dsub>
 80029ea:	ec53 2b18 	vmov	r2, r3, d8
 80029ee:	f7fd fda7 	bl	8000540 <__aeabi_dmul>
 80029f2:	4622      	mov	r2, r4
 80029f4:	4606      	mov	r6, r0
 80029f6:	460f      	mov	r7, r1
 80029f8:	462b      	mov	r3, r5
 80029fa:	ec51 0b19 	vmov	r0, r1, d9
 80029fe:	f7fd fd9f 	bl	8000540 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4630      	mov	r0, r6
 8002a08:	4639      	mov	r1, r7
 8002a0a:	f7fd fbe3 	bl	80001d4 <__adddf3>
 8002a0e:	4606      	mov	r6, r0
 8002a10:	460f      	mov	r7, r1
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4640      	mov	r0, r8
 8002a18:	4649      	mov	r1, r9
 8002a1a:	f7fd fbdb 	bl	80001d4 <__adddf3>
 8002a1e:	a33e      	add	r3, pc, #248	; (adr r3, 8002b18 <__ieee754_pow+0x738>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	2000      	movs	r0, #0
 8002a26:	4604      	mov	r4, r0
 8002a28:	460d      	mov	r5, r1
 8002a2a:	f7fd fd89 	bl	8000540 <__aeabi_dmul>
 8002a2e:	4642      	mov	r2, r8
 8002a30:	ec41 0b18 	vmov	d8, r0, r1
 8002a34:	464b      	mov	r3, r9
 8002a36:	4620      	mov	r0, r4
 8002a38:	4629      	mov	r1, r5
 8002a3a:	f7fd fbc9 	bl	80001d0 <__aeabi_dsub>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4630      	mov	r0, r6
 8002a44:	4639      	mov	r1, r7
 8002a46:	f7fd fbc3 	bl	80001d0 <__aeabi_dsub>
 8002a4a:	a335      	add	r3, pc, #212	; (adr r3, 8002b20 <__ieee754_pow+0x740>)
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	f7fd fd76 	bl	8000540 <__aeabi_dmul>
 8002a54:	a334      	add	r3, pc, #208	; (adr r3, 8002b28 <__ieee754_pow+0x748>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	4606      	mov	r6, r0
 8002a5c:	460f      	mov	r7, r1
 8002a5e:	4620      	mov	r0, r4
 8002a60:	4629      	mov	r1, r5
 8002a62:	f7fd fd6d 	bl	8000540 <__aeabi_dmul>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	4639      	mov	r1, r7
 8002a6e:	f7fd fbb1 	bl	80001d4 <__adddf3>
 8002a72:	9a07      	ldr	r2, [sp, #28]
 8002a74:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <__ieee754_pow+0x774>)
 8002a76:	4413      	add	r3, r2
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd fbaa 	bl	80001d4 <__adddf3>
 8002a80:	4682      	mov	sl, r0
 8002a82:	9805      	ldr	r0, [sp, #20]
 8002a84:	468b      	mov	fp, r1
 8002a86:	f7fd fcf1 	bl	800046c <__aeabi_i2d>
 8002a8a:	9a07      	ldr	r2, [sp, #28]
 8002a8c:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <__ieee754_pow+0x778>)
 8002a8e:	4413      	add	r3, r2
 8002a90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002a94:	4606      	mov	r6, r0
 8002a96:	460f      	mov	r7, r1
 8002a98:	4652      	mov	r2, sl
 8002a9a:	465b      	mov	r3, fp
 8002a9c:	ec51 0b18 	vmov	r0, r1, d8
 8002aa0:	f7fd fb98 	bl	80001d4 <__adddf3>
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	f7fd fb94 	bl	80001d4 <__adddf3>
 8002aac:	4632      	mov	r2, r6
 8002aae:	463b      	mov	r3, r7
 8002ab0:	f7fd fb90 	bl	80001d4 <__adddf3>
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	4632      	mov	r2, r6
 8002ab8:	463b      	mov	r3, r7
 8002aba:	4604      	mov	r4, r0
 8002abc:	460d      	mov	r5, r1
 8002abe:	f7fd fb87 	bl	80001d0 <__aeabi_dsub>
 8002ac2:	4642      	mov	r2, r8
 8002ac4:	464b      	mov	r3, r9
 8002ac6:	f7fd fb83 	bl	80001d0 <__aeabi_dsub>
 8002aca:	ec53 2b18 	vmov	r2, r3, d8
 8002ace:	f7fd fb7f 	bl	80001d0 <__aeabi_dsub>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4650      	mov	r0, sl
 8002ad8:	4659      	mov	r1, fp
 8002ada:	e610      	b.n	80026fe <__ieee754_pow+0x31e>
 8002adc:	2401      	movs	r4, #1
 8002ade:	e6a1      	b.n	8002824 <__ieee754_pow+0x444>
 8002ae0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8002b30 <__ieee754_pow+0x750>
 8002ae4:	e617      	b.n	8002716 <__ieee754_pow+0x336>
 8002ae6:	bf00      	nop
 8002ae8:	4a454eef 	.word	0x4a454eef
 8002aec:	3fca7e28 	.word	0x3fca7e28
 8002af0:	93c9db65 	.word	0x93c9db65
 8002af4:	3fcd864a 	.word	0x3fcd864a
 8002af8:	a91d4101 	.word	0xa91d4101
 8002afc:	3fd17460 	.word	0x3fd17460
 8002b00:	518f264d 	.word	0x518f264d
 8002b04:	3fd55555 	.word	0x3fd55555
 8002b08:	db6fabff 	.word	0xdb6fabff
 8002b0c:	3fdb6db6 	.word	0x3fdb6db6
 8002b10:	33333303 	.word	0x33333303
 8002b14:	3fe33333 	.word	0x3fe33333
 8002b18:	e0000000 	.word	0xe0000000
 8002b1c:	3feec709 	.word	0x3feec709
 8002b20:	dc3a03fd 	.word	0xdc3a03fd
 8002b24:	3feec709 	.word	0x3feec709
 8002b28:	145b01f5 	.word	0x145b01f5
 8002b2c:	be3e2fe0 	.word	0xbe3e2fe0
 8002b30:	00000000 	.word	0x00000000
 8002b34:	3ff00000 	.word	0x3ff00000
 8002b38:	7ff00000 	.word	0x7ff00000
 8002b3c:	43400000 	.word	0x43400000
 8002b40:	0003988e 	.word	0x0003988e
 8002b44:	000bb679 	.word	0x000bb679
 8002b48:	080031e8 	.word	0x080031e8
 8002b4c:	3ff00000 	.word	0x3ff00000
 8002b50:	40080000 	.word	0x40080000
 8002b54:	08003208 	.word	0x08003208
 8002b58:	080031f8 	.word	0x080031f8
 8002b5c:	a3b5      	add	r3, pc, #724	; (adr r3, 8002e34 <__ieee754_pow+0xa54>)
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	4640      	mov	r0, r8
 8002b64:	4649      	mov	r1, r9
 8002b66:	f7fd fb35 	bl	80001d4 <__adddf3>
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	ec41 0b1a 	vmov	d10, r0, r1
 8002b70:	462b      	mov	r3, r5
 8002b72:	4630      	mov	r0, r6
 8002b74:	4639      	mov	r1, r7
 8002b76:	f7fd fb2b 	bl	80001d0 <__aeabi_dsub>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	ec51 0b1a 	vmov	r0, r1, d10
 8002b82:	f7fd ff6d 	bl	8000a60 <__aeabi_dcmpgt>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	f47f ae04 	bne.w	8002794 <__ieee754_pow+0x3b4>
 8002b8c:	4aa4      	ldr	r2, [pc, #656]	; (8002e20 <__ieee754_pow+0xa40>)
 8002b8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8002b92:	4293      	cmp	r3, r2
 8002b94:	f340 8108 	ble.w	8002da8 <__ieee754_pow+0x9c8>
 8002b98:	151b      	asrs	r3, r3, #20
 8002b9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002b9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002ba2:	fa4a f303 	asr.w	r3, sl, r3
 8002ba6:	445b      	add	r3, fp
 8002ba8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002bac:	4e9d      	ldr	r6, [pc, #628]	; (8002e24 <__ieee754_pow+0xa44>)
 8002bae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002bb2:	4116      	asrs	r6, r2
 8002bb4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8002bb8:	2000      	movs	r0, #0
 8002bba:	ea23 0106 	bic.w	r1, r3, r6
 8002bbe:	f1c2 0214 	rsb	r2, r2, #20
 8002bc2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8002bc6:	fa4a fa02 	asr.w	sl, sl, r2
 8002bca:	f1bb 0f00 	cmp.w	fp, #0
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	bfb8      	it	lt
 8002bd8:	f1ca 0a00 	rsblt	sl, sl, #0
 8002bdc:	f7fd faf8 	bl	80001d0 <__aeabi_dsub>
 8002be0:	ec41 0b19 	vmov	d9, r0, r1
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	ec51 0b19 	vmov	r0, r1, d9
 8002bec:	f7fd faf2 	bl	80001d4 <__adddf3>
 8002bf0:	a37b      	add	r3, pc, #492	; (adr r3, 8002de0 <__ieee754_pow+0xa00>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	460d      	mov	r5, r1
 8002bfc:	f7fd fca0 	bl	8000540 <__aeabi_dmul>
 8002c00:	ec53 2b19 	vmov	r2, r3, d9
 8002c04:	4606      	mov	r6, r0
 8002c06:	460f      	mov	r7, r1
 8002c08:	4620      	mov	r0, r4
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f7fd fae0 	bl	80001d0 <__aeabi_dsub>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4640      	mov	r0, r8
 8002c16:	4649      	mov	r1, r9
 8002c18:	f7fd fada 	bl	80001d0 <__aeabi_dsub>
 8002c1c:	a372      	add	r3, pc, #456	; (adr r3, 8002de8 <__ieee754_pow+0xa08>)
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	f7fd fc8d 	bl	8000540 <__aeabi_dmul>
 8002c26:	a372      	add	r3, pc, #456	; (adr r3, 8002df0 <__ieee754_pow+0xa10>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	4680      	mov	r8, r0
 8002c2e:	4689      	mov	r9, r1
 8002c30:	4620      	mov	r0, r4
 8002c32:	4629      	mov	r1, r5
 8002c34:	f7fd fc84 	bl	8000540 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4640      	mov	r0, r8
 8002c3e:	4649      	mov	r1, r9
 8002c40:	f7fd fac8 	bl	80001d4 <__adddf3>
 8002c44:	4604      	mov	r4, r0
 8002c46:	460d      	mov	r5, r1
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4630      	mov	r0, r6
 8002c4e:	4639      	mov	r1, r7
 8002c50:	f7fd fac0 	bl	80001d4 <__adddf3>
 8002c54:	4632      	mov	r2, r6
 8002c56:	463b      	mov	r3, r7
 8002c58:	4680      	mov	r8, r0
 8002c5a:	4689      	mov	r9, r1
 8002c5c:	f7fd fab8 	bl	80001d0 <__aeabi_dsub>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4620      	mov	r0, r4
 8002c66:	4629      	mov	r1, r5
 8002c68:	f7fd fab2 	bl	80001d0 <__aeabi_dsub>
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	4606      	mov	r6, r0
 8002c70:	460f      	mov	r7, r1
 8002c72:	464b      	mov	r3, r9
 8002c74:	4640      	mov	r0, r8
 8002c76:	4649      	mov	r1, r9
 8002c78:	f7fd fc62 	bl	8000540 <__aeabi_dmul>
 8002c7c:	a35e      	add	r3, pc, #376	; (adr r3, 8002df8 <__ieee754_pow+0xa18>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	4604      	mov	r4, r0
 8002c84:	460d      	mov	r5, r1
 8002c86:	f7fd fc5b 	bl	8000540 <__aeabi_dmul>
 8002c8a:	a35d      	add	r3, pc, #372	; (adr r3, 8002e00 <__ieee754_pow+0xa20>)
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	f7fd fa9e 	bl	80001d0 <__aeabi_dsub>
 8002c94:	4622      	mov	r2, r4
 8002c96:	462b      	mov	r3, r5
 8002c98:	f7fd fc52 	bl	8000540 <__aeabi_dmul>
 8002c9c:	a35a      	add	r3, pc, #360	; (adr r3, 8002e08 <__ieee754_pow+0xa28>)
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f7fd fa97 	bl	80001d4 <__adddf3>
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	462b      	mov	r3, r5
 8002caa:	f7fd fc49 	bl	8000540 <__aeabi_dmul>
 8002cae:	a358      	add	r3, pc, #352	; (adr r3, 8002e10 <__ieee754_pow+0xa30>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd fa8c 	bl	80001d0 <__aeabi_dsub>
 8002cb8:	4622      	mov	r2, r4
 8002cba:	462b      	mov	r3, r5
 8002cbc:	f7fd fc40 	bl	8000540 <__aeabi_dmul>
 8002cc0:	a355      	add	r3, pc, #340	; (adr r3, 8002e18 <__ieee754_pow+0xa38>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f7fd fa85 	bl	80001d4 <__adddf3>
 8002cca:	4622      	mov	r2, r4
 8002ccc:	462b      	mov	r3, r5
 8002cce:	f7fd fc37 	bl	8000540 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4640      	mov	r0, r8
 8002cd8:	4649      	mov	r1, r9
 8002cda:	f7fd fa79 	bl	80001d0 <__aeabi_dsub>
 8002cde:	4604      	mov	r4, r0
 8002ce0:	460d      	mov	r5, r1
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	4649      	mov	r1, r9
 8002cea:	f7fd fc29 	bl	8000540 <__aeabi_dmul>
 8002cee:	2200      	movs	r2, #0
 8002cf0:	ec41 0b19 	vmov	d9, r0, r1
 8002cf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	f7fd fa68 	bl	80001d0 <__aeabi_dsub>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	ec51 0b19 	vmov	r0, r1, d9
 8002d08:	f7fd fd44 	bl	8000794 <__aeabi_ddiv>
 8002d0c:	4632      	mov	r2, r6
 8002d0e:	4604      	mov	r4, r0
 8002d10:	460d      	mov	r5, r1
 8002d12:	463b      	mov	r3, r7
 8002d14:	4640      	mov	r0, r8
 8002d16:	4649      	mov	r1, r9
 8002d18:	f7fd fc12 	bl	8000540 <__aeabi_dmul>
 8002d1c:	4632      	mov	r2, r6
 8002d1e:	463b      	mov	r3, r7
 8002d20:	f7fd fa58 	bl	80001d4 <__adddf3>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4620      	mov	r0, r4
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	f7fd fa50 	bl	80001d0 <__aeabi_dsub>
 8002d30:	4642      	mov	r2, r8
 8002d32:	464b      	mov	r3, r9
 8002d34:	f7fd fa4c 	bl	80001d0 <__aeabi_dsub>
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	493a      	ldr	r1, [pc, #232]	; (8002e28 <__ieee754_pow+0xa48>)
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7fd fa46 	bl	80001d0 <__aeabi_dsub>
 8002d44:	ec41 0b10 	vmov	d0, r0, r1
 8002d48:	ee10 3a90 	vmov	r3, s1
 8002d4c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8002d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d54:	da2b      	bge.n	8002dae <__ieee754_pow+0x9ce>
 8002d56:	4650      	mov	r0, sl
 8002d58:	f000 f966 	bl	8003028 <scalbn>
 8002d5c:	ec51 0b10 	vmov	r0, r1, d0
 8002d60:	ec53 2b18 	vmov	r2, r3, d8
 8002d64:	f7ff bbed 	b.w	8002542 <__ieee754_pow+0x162>
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <__ieee754_pow+0xa4c>)
 8002d6a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002d6e:	429e      	cmp	r6, r3
 8002d70:	f77f af0c 	ble.w	8002b8c <__ieee754_pow+0x7ac>
 8002d74:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <__ieee754_pow+0xa50>)
 8002d76:	440b      	add	r3, r1
 8002d78:	4303      	orrs	r3, r0
 8002d7a:	d009      	beq.n	8002d90 <__ieee754_pow+0x9b0>
 8002d7c:	ec51 0b18 	vmov	r0, r1, d8
 8002d80:	2200      	movs	r2, #0
 8002d82:	2300      	movs	r3, #0
 8002d84:	f7fd fe4e 	bl	8000a24 <__aeabi_dcmplt>
 8002d88:	3800      	subs	r0, #0
 8002d8a:	bf18      	it	ne
 8002d8c:	2001      	movne	r0, #1
 8002d8e:	e447      	b.n	8002620 <__ieee754_pow+0x240>
 8002d90:	4622      	mov	r2, r4
 8002d92:	462b      	mov	r3, r5
 8002d94:	f7fd fa1c 	bl	80001d0 <__aeabi_dsub>
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	f7fd fe56 	bl	8000a4c <__aeabi_dcmpge>
 8002da0:	2800      	cmp	r0, #0
 8002da2:	f43f aef3 	beq.w	8002b8c <__ieee754_pow+0x7ac>
 8002da6:	e7e9      	b.n	8002d7c <__ieee754_pow+0x99c>
 8002da8:	f04f 0a00 	mov.w	sl, #0
 8002dac:	e71a      	b.n	8002be4 <__ieee754_pow+0x804>
 8002dae:	ec51 0b10 	vmov	r0, r1, d0
 8002db2:	4619      	mov	r1, r3
 8002db4:	e7d4      	b.n	8002d60 <__ieee754_pow+0x980>
 8002db6:	491c      	ldr	r1, [pc, #112]	; (8002e28 <__ieee754_pow+0xa48>)
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7ff bb30 	b.w	800241e <__ieee754_pow+0x3e>
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	f7ff bb2c 	b.w	800241e <__ieee754_pow+0x3e>
 8002dc6:	4630      	mov	r0, r6
 8002dc8:	4639      	mov	r1, r7
 8002dca:	f7ff bb28 	b.w	800241e <__ieee754_pow+0x3e>
 8002dce:	9204      	str	r2, [sp, #16]
 8002dd0:	f7ff bb7a 	b.w	80024c8 <__ieee754_pow+0xe8>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f7ff bb64 	b.w	80024a2 <__ieee754_pow+0xc2>
 8002dda:	bf00      	nop
 8002ddc:	f3af 8000 	nop.w
 8002de0:	00000000 	.word	0x00000000
 8002de4:	3fe62e43 	.word	0x3fe62e43
 8002de8:	fefa39ef 	.word	0xfefa39ef
 8002dec:	3fe62e42 	.word	0x3fe62e42
 8002df0:	0ca86c39 	.word	0x0ca86c39
 8002df4:	be205c61 	.word	0xbe205c61
 8002df8:	72bea4d0 	.word	0x72bea4d0
 8002dfc:	3e663769 	.word	0x3e663769
 8002e00:	c5d26bf1 	.word	0xc5d26bf1
 8002e04:	3ebbbd41 	.word	0x3ebbbd41
 8002e08:	af25de2c 	.word	0xaf25de2c
 8002e0c:	3f11566a 	.word	0x3f11566a
 8002e10:	16bebd93 	.word	0x16bebd93
 8002e14:	3f66c16c 	.word	0x3f66c16c
 8002e18:	5555553e 	.word	0x5555553e
 8002e1c:	3fc55555 	.word	0x3fc55555
 8002e20:	3fe00000 	.word	0x3fe00000
 8002e24:	000fffff 	.word	0x000fffff
 8002e28:	3ff00000 	.word	0x3ff00000
 8002e2c:	4090cbff 	.word	0x4090cbff
 8002e30:	3f6f3400 	.word	0x3f6f3400
 8002e34:	652b82fe 	.word	0x652b82fe
 8002e38:	3c971547 	.word	0x3c971547

08002e3c <__ieee754_sqrt>:
 8002e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e40:	ec55 4b10 	vmov	r4, r5, d0
 8002e44:	4e55      	ldr	r6, [pc, #340]	; (8002f9c <__ieee754_sqrt+0x160>)
 8002e46:	43ae      	bics	r6, r5
 8002e48:	ee10 0a10 	vmov	r0, s0
 8002e4c:	ee10 3a10 	vmov	r3, s0
 8002e50:	462a      	mov	r2, r5
 8002e52:	4629      	mov	r1, r5
 8002e54:	d110      	bne.n	8002e78 <__ieee754_sqrt+0x3c>
 8002e56:	ee10 2a10 	vmov	r2, s0
 8002e5a:	462b      	mov	r3, r5
 8002e5c:	f7fd fb70 	bl	8000540 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4620      	mov	r0, r4
 8002e66:	4629      	mov	r1, r5
 8002e68:	f7fd f9b4 	bl	80001d4 <__adddf3>
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	460d      	mov	r5, r1
 8002e70:	ec45 4b10 	vmov	d0, r4, r5
 8002e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e78:	2d00      	cmp	r5, #0
 8002e7a:	dc10      	bgt.n	8002e9e <__ieee754_sqrt+0x62>
 8002e7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002e80:	4330      	orrs	r0, r6
 8002e82:	d0f5      	beq.n	8002e70 <__ieee754_sqrt+0x34>
 8002e84:	b15d      	cbz	r5, 8002e9e <__ieee754_sqrt+0x62>
 8002e86:	ee10 2a10 	vmov	r2, s0
 8002e8a:	462b      	mov	r3, r5
 8002e8c:	ee10 0a10 	vmov	r0, s0
 8002e90:	f7fd f99e 	bl	80001d0 <__aeabi_dsub>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	f7fd fc7c 	bl	8000794 <__aeabi_ddiv>
 8002e9c:	e7e6      	b.n	8002e6c <__ieee754_sqrt+0x30>
 8002e9e:	1512      	asrs	r2, r2, #20
 8002ea0:	d074      	beq.n	8002f8c <__ieee754_sqrt+0x150>
 8002ea2:	07d4      	lsls	r4, r2, #31
 8002ea4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8002ea8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8002eac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002eb0:	bf5e      	ittt	pl
 8002eb2:	0fda      	lsrpl	r2, r3, #31
 8002eb4:	005b      	lslpl	r3, r3, #1
 8002eb6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8002eba:	2400      	movs	r4, #0
 8002ebc:	0fda      	lsrs	r2, r3, #31
 8002ebe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8002ec2:	107f      	asrs	r7, r7, #1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2516      	movs	r5, #22
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ece:	1886      	adds	r6, r0, r2
 8002ed0:	428e      	cmp	r6, r1
 8002ed2:	bfde      	ittt	le
 8002ed4:	1b89      	suble	r1, r1, r6
 8002ed6:	18b0      	addle	r0, r6, r2
 8002ed8:	18a4      	addle	r4, r4, r2
 8002eda:	0049      	lsls	r1, r1, #1
 8002edc:	3d01      	subs	r5, #1
 8002ede:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8002ee2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8002ee6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002eea:	d1f0      	bne.n	8002ece <__ieee754_sqrt+0x92>
 8002eec:	462a      	mov	r2, r5
 8002eee:	f04f 0e20 	mov.w	lr, #32
 8002ef2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8002ef6:	4281      	cmp	r1, r0
 8002ef8:	eb06 0c05 	add.w	ip, r6, r5
 8002efc:	dc02      	bgt.n	8002f04 <__ieee754_sqrt+0xc8>
 8002efe:	d113      	bne.n	8002f28 <__ieee754_sqrt+0xec>
 8002f00:	459c      	cmp	ip, r3
 8002f02:	d811      	bhi.n	8002f28 <__ieee754_sqrt+0xec>
 8002f04:	f1bc 0f00 	cmp.w	ip, #0
 8002f08:	eb0c 0506 	add.w	r5, ip, r6
 8002f0c:	da43      	bge.n	8002f96 <__ieee754_sqrt+0x15a>
 8002f0e:	2d00      	cmp	r5, #0
 8002f10:	db41      	blt.n	8002f96 <__ieee754_sqrt+0x15a>
 8002f12:	f100 0801 	add.w	r8, r0, #1
 8002f16:	1a09      	subs	r1, r1, r0
 8002f18:	459c      	cmp	ip, r3
 8002f1a:	bf88      	it	hi
 8002f1c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8002f20:	eba3 030c 	sub.w	r3, r3, ip
 8002f24:	4432      	add	r2, r6
 8002f26:	4640      	mov	r0, r8
 8002f28:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8002f2c:	f1be 0e01 	subs.w	lr, lr, #1
 8002f30:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8002f34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002f38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8002f3c:	d1db      	bne.n	8002ef6 <__ieee754_sqrt+0xba>
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	d006      	beq.n	8002f50 <__ieee754_sqrt+0x114>
 8002f42:	1c50      	adds	r0, r2, #1
 8002f44:	bf13      	iteet	ne
 8002f46:	3201      	addne	r2, #1
 8002f48:	3401      	addeq	r4, #1
 8002f4a:	4672      	moveq	r2, lr
 8002f4c:	f022 0201 	bicne.w	r2, r2, #1
 8002f50:	1063      	asrs	r3, r4, #1
 8002f52:	0852      	lsrs	r2, r2, #1
 8002f54:	07e1      	lsls	r1, r4, #31
 8002f56:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002f5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002f5e:	bf48      	it	mi
 8002f60:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8002f64:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8002f68:	4614      	mov	r4, r2
 8002f6a:	e781      	b.n	8002e70 <__ieee754_sqrt+0x34>
 8002f6c:	0ad9      	lsrs	r1, r3, #11
 8002f6e:	3815      	subs	r0, #21
 8002f70:	055b      	lsls	r3, r3, #21
 8002f72:	2900      	cmp	r1, #0
 8002f74:	d0fa      	beq.n	8002f6c <__ieee754_sqrt+0x130>
 8002f76:	02cd      	lsls	r5, r1, #11
 8002f78:	d50a      	bpl.n	8002f90 <__ieee754_sqrt+0x154>
 8002f7a:	f1c2 0420 	rsb	r4, r2, #32
 8002f7e:	fa23 f404 	lsr.w	r4, r3, r4
 8002f82:	1e55      	subs	r5, r2, #1
 8002f84:	4093      	lsls	r3, r2
 8002f86:	4321      	orrs	r1, r4
 8002f88:	1b42      	subs	r2, r0, r5
 8002f8a:	e78a      	b.n	8002ea2 <__ieee754_sqrt+0x66>
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	e7f0      	b.n	8002f72 <__ieee754_sqrt+0x136>
 8002f90:	0049      	lsls	r1, r1, #1
 8002f92:	3201      	adds	r2, #1
 8002f94:	e7ef      	b.n	8002f76 <__ieee754_sqrt+0x13a>
 8002f96:	4680      	mov	r8, r0
 8002f98:	e7bd      	b.n	8002f16 <__ieee754_sqrt+0xda>
 8002f9a:	bf00      	nop
 8002f9c:	7ff00000 	.word	0x7ff00000

08002fa0 <with_errno>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	460d      	mov	r5, r1
 8002fa6:	4616      	mov	r6, r2
 8002fa8:	f000 f8c4 	bl	8003134 <__errno>
 8002fac:	4629      	mov	r1, r5
 8002fae:	6006      	str	r6, [r0, #0]
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}

08002fb4 <xflow>:
 8002fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fb6:	4614      	mov	r4, r2
 8002fb8:	461d      	mov	r5, r3
 8002fba:	b108      	cbz	r0, 8002fc0 <xflow+0xc>
 8002fbc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002fc0:	e9cd 2300 	strd	r2, r3, [sp]
 8002fc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fc8:	4620      	mov	r0, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	f7fd fab8 	bl	8000540 <__aeabi_dmul>
 8002fd0:	2222      	movs	r2, #34	; 0x22
 8002fd2:	b003      	add	sp, #12
 8002fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fd8:	f7ff bfe2 	b.w	8002fa0 <with_errno>

08002fdc <__math_uflow>:
 8002fdc:	b508      	push	{r3, lr}
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fe4:	f7ff ffe6 	bl	8002fb4 <xflow>
 8002fe8:	ec41 0b10 	vmov	d0, r0, r1
 8002fec:	bd08      	pop	{r3, pc}

08002fee <__math_oflow>:
 8002fee:	b508      	push	{r3, lr}
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8002ff6:	f7ff ffdd 	bl	8002fb4 <xflow>
 8002ffa:	ec41 0b10 	vmov	d0, r0, r1
 8002ffe:	bd08      	pop	{r3, pc}

08003000 <fabs>:
 8003000:	ec51 0b10 	vmov	r0, r1, d0
 8003004:	ee10 2a10 	vmov	r2, s0
 8003008:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800300c:	ec43 2b10 	vmov	d0, r2, r3
 8003010:	4770      	bx	lr

08003012 <finite>:
 8003012:	b082      	sub	sp, #8
 8003014:	ed8d 0b00 	vstr	d0, [sp]
 8003018:	9801      	ldr	r0, [sp, #4]
 800301a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800301e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003022:	0fc0      	lsrs	r0, r0, #31
 8003024:	b002      	add	sp, #8
 8003026:	4770      	bx	lr

08003028 <scalbn>:
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	ec55 4b10 	vmov	r4, r5, d0
 800302e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003032:	4606      	mov	r6, r0
 8003034:	462b      	mov	r3, r5
 8003036:	b99a      	cbnz	r2, 8003060 <scalbn+0x38>
 8003038:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800303c:	4323      	orrs	r3, r4
 800303e:	d036      	beq.n	80030ae <scalbn+0x86>
 8003040:	4b39      	ldr	r3, [pc, #228]	; (8003128 <scalbn+0x100>)
 8003042:	4629      	mov	r1, r5
 8003044:	ee10 0a10 	vmov	r0, s0
 8003048:	2200      	movs	r2, #0
 800304a:	f7fd fa79 	bl	8000540 <__aeabi_dmul>
 800304e:	4b37      	ldr	r3, [pc, #220]	; (800312c <scalbn+0x104>)
 8003050:	429e      	cmp	r6, r3
 8003052:	4604      	mov	r4, r0
 8003054:	460d      	mov	r5, r1
 8003056:	da10      	bge.n	800307a <scalbn+0x52>
 8003058:	a32b      	add	r3, pc, #172	; (adr r3, 8003108 <scalbn+0xe0>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	e03a      	b.n	80030d6 <scalbn+0xae>
 8003060:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003064:	428a      	cmp	r2, r1
 8003066:	d10c      	bne.n	8003082 <scalbn+0x5a>
 8003068:	ee10 2a10 	vmov	r2, s0
 800306c:	4620      	mov	r0, r4
 800306e:	4629      	mov	r1, r5
 8003070:	f7fd f8b0 	bl	80001d4 <__adddf3>
 8003074:	4604      	mov	r4, r0
 8003076:	460d      	mov	r5, r1
 8003078:	e019      	b.n	80030ae <scalbn+0x86>
 800307a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800307e:	460b      	mov	r3, r1
 8003080:	3a36      	subs	r2, #54	; 0x36
 8003082:	4432      	add	r2, r6
 8003084:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003088:	428a      	cmp	r2, r1
 800308a:	dd08      	ble.n	800309e <scalbn+0x76>
 800308c:	2d00      	cmp	r5, #0
 800308e:	a120      	add	r1, pc, #128	; (adr r1, 8003110 <scalbn+0xe8>)
 8003090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003094:	da1c      	bge.n	80030d0 <scalbn+0xa8>
 8003096:	a120      	add	r1, pc, #128	; (adr r1, 8003118 <scalbn+0xf0>)
 8003098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800309c:	e018      	b.n	80030d0 <scalbn+0xa8>
 800309e:	2a00      	cmp	r2, #0
 80030a0:	dd08      	ble.n	80030b4 <scalbn+0x8c>
 80030a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80030a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80030ae:	ec45 4b10 	vmov	d0, r4, r5
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80030b8:	da19      	bge.n	80030ee <scalbn+0xc6>
 80030ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80030be:	429e      	cmp	r6, r3
 80030c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80030c4:	dd0a      	ble.n	80030dc <scalbn+0xb4>
 80030c6:	a112      	add	r1, pc, #72	; (adr r1, 8003110 <scalbn+0xe8>)
 80030c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e2      	bne.n	8003096 <scalbn+0x6e>
 80030d0:	a30f      	add	r3, pc, #60	; (adr r3, 8003110 <scalbn+0xe8>)
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f7fd fa33 	bl	8000540 <__aeabi_dmul>
 80030da:	e7cb      	b.n	8003074 <scalbn+0x4c>
 80030dc:	a10a      	add	r1, pc, #40	; (adr r1, 8003108 <scalbn+0xe0>)
 80030de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0b8      	beq.n	8003058 <scalbn+0x30>
 80030e6:	a10e      	add	r1, pc, #56	; (adr r1, 8003120 <scalbn+0xf8>)
 80030e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030ec:	e7b4      	b.n	8003058 <scalbn+0x30>
 80030ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80030f2:	3236      	adds	r2, #54	; 0x36
 80030f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80030fc:	4620      	mov	r0, r4
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <scalbn+0x108>)
 8003100:	2200      	movs	r2, #0
 8003102:	e7e8      	b.n	80030d6 <scalbn+0xae>
 8003104:	f3af 8000 	nop.w
 8003108:	c2f8f359 	.word	0xc2f8f359
 800310c:	01a56e1f 	.word	0x01a56e1f
 8003110:	8800759c 	.word	0x8800759c
 8003114:	7e37e43c 	.word	0x7e37e43c
 8003118:	8800759c 	.word	0x8800759c
 800311c:	fe37e43c 	.word	0xfe37e43c
 8003120:	c2f8f359 	.word	0xc2f8f359
 8003124:	81a56e1f 	.word	0x81a56e1f
 8003128:	43500000 	.word	0x43500000
 800312c:	ffff3cb0 	.word	0xffff3cb0
 8003130:	3c900000 	.word	0x3c900000

08003134 <__errno>:
 8003134:	4b01      	ldr	r3, [pc, #4]	; (800313c <__errno+0x8>)
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000008 	.word	0x20000008

08003140 <_init>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr

0800314c <_fini>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr
