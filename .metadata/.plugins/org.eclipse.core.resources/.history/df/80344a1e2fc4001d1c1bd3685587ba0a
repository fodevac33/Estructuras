/*
 * main.c
 *
 *  Created on: Mar 10, 2023
 *      Author: felipe
 */

#include "main.h"
#include "stm32l4xx_ll_bus.h"
#include "stm32l4xx_ll_utils.h"
#include "stm32l4xx_ll_gpio.h"


void MSP_Init1msTick(void);


void MFS_Dx_Init(void);
void MFS_Sx_Init(void);


uint8_t MFS_S1_Read(void);
uint8_t MFS_S2_Read(void);
uint8_t MFS_S3_Read(void);


void MFS_D1_On();
void MFS_D2_On();
void MFS_D3_On();
void MFS_D4_On();


void MFS_D1_Off();
void MFS_D2_Off();
void MFS_D3_Off();
void MFS_D4_Off();


void MFS_D1_Toggle(void);
void MFS_D2_Toggle(void);
void MFS_D3_Toggle(void);
void MFS_D4_Toggle(void);



void fsm_D1_Blink(void);
void fsm_D2_Blink(void);
void fsm_D3_Blink(void);
void fsm_D4_Blink(void);


void fsm_Pong_Sequence(void);


void SysTick_Handler(void);

uint32_t unTick = 0;

void SysTick_Handler(void){
	unTick++;
}


int beat = 1000;


int main(void) {

	MSP_Init1msTick();

	MFS_Dx_Init();
	MFS_Sx_Init();

	MFS_D1_On();
	MFS_D2_On();
	MFS_D3_On();
	MFS_D4_On();


	for(;;){
//		if (MFS_S1_Read() == 1){
//			fsm_D1_Blink();
//		}
//		if (MFS_S2_Read() == 1){
//			fsm_D2_Blink();
//		}
//		if (MFS_S3_Read() == 1){
//			fsm_D3_Blink();
//		}
//		fsm_D4_Blink();
		fsm_Pong_Sequence();
	}
	return 0;
}


void MFS_Sx_Init(void){
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_1, LL_GPIO_MODE_INPUT);
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);


	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
}


uint8_t MFS_S1_Read(void){
	if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_1) == 0){
		return 1;
	}else{
		return 0;
	}
}

uint8_t MFS_S2_Read(void){
	if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_4) == 0){
		return 1;
	}else{
		return 0;
	}
}

uint8_t MFS_S3_Read(void){
	if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_0) == 0){
		return 1;
	}else{
		return 0;
	}
}


//Inicializacion del reloj
void MSP_Init1msTick(void){
	LL_AHB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
	LL_Init1msTick(4000000);
}

//Inicializacion de los leds
void MFS_Dx_Init(void){
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_OUTPUT);
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_OUTPUT);
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_OUTPUT);
}

//Reseteo de los leds
void MFS_D1_On(){
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);

}

void MFS_D2_On(){
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);

}

void MFS_D3_On(){
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);

}

void MFS_D4_On(){
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);

}


void MFS_D1_Off(){
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_5);
}

void MFS_D2_Off(){
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6);
}

void MFS_D3_Off(){
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_7);
}

void MFS_D4_Off(){
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
}

//Abstraccion del toggle de los leds
void MFS_D1_Toggle(void){
	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
}

void MFS_D2_Toggle(void){
	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_6);
}

void MFS_D3_Toggle(void){
	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_7);
}

void MFS_D4_Toggle(void){
	LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_6);
}

//Blink de los leds
void fsm_D1_Blink(void){
	static uint32_t lastTick = 0;
	if (unTick - lastTick >= beat){
		lastTick = unTick;
		MFS_D1_Toggle();
	}
}

void fsm_D2_Blink(void){
	static uint32_t lastTick = 0;
	if (unTick - lastTick >= beat/2){
		lastTick = unTick;
		MFS_D2_Toggle();
	}
}

void fsm_D3_Blink(void){
	static uint32_t lastTick = 0;
	if (unTick - lastTick >= beat/3){
		lastTick = unTick;
		MFS_D3_Toggle();
	}
}

void fsm_D4_Blink(void){
	static uint32_t lastTick = 0;
	if (unTick - lastTick >= beat/4){
		lastTick = unTick;
		MFS_D4_Toggle();
	}
}


void fsm_Pong_Sequence(void){
	static uint32_t lastTick = 0;
	static uint8_t state = 1;
	uint8_t next_state;

	if (unTick - lastTick >= 200){
		lastTick = unTick;

		switch(state){
		case 1:
			next_state = 2;
			break;
		case 2:
			next_state = 3;
			break;
		case 3:
			next_state = 4;
			break;
		case 4:
			next_state = 5;
			break;
		case 5:
			next_state = 6;
			break;
		case 6:
			next_state = 1;
			break;
		}
		state = next_state;
	}
	switch(state){
	case 1:
		MFS_D1_On();
		MFS_D2_Off();
		MFS_D3_Off();
		MFS_D4_Off();
		break;
	case 2:
		MFS_D1_Off();
		MFS_D2_On();
		MFS_D3_Off();
		MFS_D4_Off();
		break;
	case 3:
		MFS_D1_Off();
		MFS_D2_Off();
		MFS_D3_On();
		MFS_D4_Off();
		break;
	case 4:
		MFS_D1_Off();
		MFS_D2_Off();
		MFS_D3_Off();
		MFS_D4_On();
		break;
	case 5:
		MFS_D1_Off();
		MFS_D2_Off();
		MFS_D3_On();
		MFS_D4_Off();
		break;
	case 6:
		MFS_D1_Off();
		MFS_D2_On();
		MFS_D3_Off();
		MFS_D4_Off();
		break;
	}
}






