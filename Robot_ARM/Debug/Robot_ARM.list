
Robot_ARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800e578  0800e578  0001e578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec08  0800ec08  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec08  0800ec08  0001ec08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec10  0800ec10  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec10  0800ec10  0001ec10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec14  0800ec14  0001ec14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800ec18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001f8  0800ee10  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  0800ee10  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e9c  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003702  00000000  00000000  0003a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  0003d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c196  00000000  00000000  0003fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1b8  00000000  00000000  0006c026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109d7f  00000000  00000000  000861de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ff5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee8  00000000  00000000  0018ffb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e55c 	.word	0x0800e55c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800e55c 	.word	0x0800e55c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Mode_Change_Interrupt_Init>:
 */

#include "ROBOT.h"


void Mode_Change_Interrupt_Init() {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioInit = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <Mode_Change_Interrupt_Init+0x60>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	4a11      	ldr	r2, [pc, #68]	; (8001108 <Mode_Change_Interrupt_Init+0x60>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <Mode_Change_Interrupt_Init+0x60>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]

	gpioInit.Pin = MODE_CHANGE_Pin;
 80010d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d8:	607b      	str	r3, [r7, #4]
	gpioInit.Mode = GPIO_MODE_IT_RISING;
 80010da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010de:	60bb      	str	r3, [r7, #8]
	gpioInit.Pull = GPIO_PULLDOWN;
 80010e0:	2302      	movs	r3, #2
 80010e2:	60fb      	str	r3, [r7, #12]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(MODE_CHANGE_Port, &gpioInit);
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <Mode_Change_Interrupt_Init+0x64>)
 80010ee:	f002 f95d 	bl	80033ac <HAL_GPIO_Init>

	//ENABLE INTERRUPT
	NVIC_SetPriority(EXTI15_10_IRQn, 5);
 80010f2:	2105      	movs	r1, #5
 80010f4:	2028      	movs	r0, #40	; 0x28
 80010f6:	f7ff ffad 	bl	8001054 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fa:	2028      	movs	r0, #40	; 0x28
 80010fc:	f7ff ff8c 	bl	8001018 <__NVIC_EnableIRQ>
}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000
 800110c:	48000800 	.word	0x48000800

08001110 <Joystick_To_Servo>:


static float Joystick_To_Servo(int16_t val) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
    return (val + 45.0f) * 180.0f / 100.0f;
 800111a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001150 <Joystick_To_Servo+0x40>
 800112a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800112e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001154 <Joystick_To_Servo+0x44>
 8001132:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001136:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001158 <Joystick_To_Servo+0x48>
 800113a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800113e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	42340000 	.word	0x42340000
 8001154:	43340000 	.word	0x43340000
 8001158:	42c80000 	.word	0x42c80000

0800115c <Robot_Move>:


void Robot_Move(SG90_Struct_t* Robot[], int16_t* pos, uint32_t button) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	float xy[2] = {-Joystick_To_Servo(pos[0]), Joystick_To_Servo(pos[1])};
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffce 	bl	8001110 <Joystick_To_Servo>
 8001174:	eef0 7a40 	vmov.f32	s15, s0
 8001178:	eef1 7a67 	vneg.f32	s15, s15
 800117c:	edc7 7a04 	vstr	s15, [r7, #16]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	3302      	adds	r3, #2
 8001184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ffc1 	bl	8001110 <Joystick_To_Servo>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	edc7 7a05 	vstr	s15, [r7, #20]

	Servo_Rotate(Robot[0], xy[0]);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	edd7 7a04 	vldr	s15, [r7, #16]
 800119e:	eeb0 0a67 	vmov.f32	s0, s15
 80011a2:	4618      	mov	r0, r3
 80011a4:	f007 f820 	bl	80081e8 <Servo_Rotate>
	Servo_Rotate(Robot[1], xy[1]);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3304      	adds	r3, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	4618      	mov	r0, r3
 80011b8:	f007 f816 	bl	80081e8 <Servo_Rotate>

	Servo_Rotate(Robot[2], button == 0 ? 0 : 180);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3308      	adds	r3, #8
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <Robot_Move+0x72>
 80011c8:	eddf 7a06 	vldr	s15, [pc, #24]	; 80011e4 <Robot_Move+0x88>
 80011cc:	e001      	b.n	80011d2 <Robot_Move+0x76>
 80011ce:	eddf 7a06 	vldr	s15, [pc, #24]	; 80011e8 <Robot_Move+0x8c>
 80011d2:	eeb0 0a67 	vmov.f32	s0, s15
 80011d6:	4610      	mov	r0, r2
 80011d8:	f007 f806 	bl	80081e8 <Servo_Rotate>
}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	00000000 	.word	0x00000000
 80011e8:	43340000 	.word	0x43340000

080011ec <Robot_Neutral>:


void Robot_Neutral(SG90_Struct_t* Robot[]) {
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	Servo_Rotate(Robot[0], -Joystick_To_Servo(0));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681c      	ldr	r4, [r3, #0]
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff ff89 	bl	8001110 <Joystick_To_Servo>
 80011fe:	eef0 7a40 	vmov.f32	s15, s0
 8001202:	eef1 7a67 	vneg.f32	s15, s15
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	4620      	mov	r0, r4
 800120c:	f006 ffec 	bl	80081e8 <Servo_Rotate>
	Servo_Rotate(Robot[1], Joystick_To_Servo(0));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3304      	adds	r3, #4
 8001214:	681c      	ldr	r4, [r3, #0]
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff ff7a 	bl	8001110 <Joystick_To_Servo>
 800121c:	eef0 7a40 	vmov.f32	s15, s0
 8001220:	eeb0 0a67 	vmov.f32	s0, s15
 8001224:	4620      	mov	r0, r4
 8001226:	f006 ffdf 	bl	80081e8 <Servo_Rotate>

	Servo_Rotate(Robot[2], 0);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3308      	adds	r3, #8
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001244 <Robot_Neutral+0x58>
 8001234:	4618      	mov	r0, r3
 8001236:	f006 ffd7 	bl	80081e8 <Servo_Rotate>
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	bf00      	nop
 8001244:	00000000 	.word	0x00000000

08001248 <Process_Command>:

Cmd_Process_Result_t Process_Command(SG90_Struct_t* Robot[], uint8_t* input, int16_t* pos, uint32_t but) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
    uint8_t command[5];
    sscanf((const char*)input, "%4s", (char*)command);
 8001256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125a:	461a      	mov	r2, r3
 800125c:	4953      	ldr	r1, [pc, #332]	; (80013ac <Process_Command+0x164>)
 800125e:	68b8      	ldr	r0, [r7, #8]
 8001260:	f008 f850 	bl	8009304 <siscanf>

    if (strcmp((const char*)command, "mov") == 0) {
 8001264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001268:	4951      	ldr	r1, [pc, #324]	; (80013b0 <Process_Command+0x168>)
 800126a:	4618      	mov	r0, r3
 800126c:	f7fe ffb0 	bl	80001d0 <strcmp>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d14a      	bne.n	800130c <Process_Command+0xc4>
        uint8_t target[6];
        sscanf((const char*)input, "%*s %5s", (char*)target);
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	461a      	mov	r2, r3
 800127c:	494d      	ldr	r1, [pc, #308]	; (80013b4 <Process_Command+0x16c>)
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f008 f840 	bl	8009304 <siscanf>

        if (strcmp((const char*)target, "base") == 0) {
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	494b      	ldr	r1, [pc, #300]	; (80013b8 <Process_Command+0x170>)
 800128a:	4618      	mov	r0, r3
 800128c:	f7fe ffa0 	bl	80001d0 <strcmp>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d115      	bne.n	80012c2 <Process_Command+0x7a>
            int number;
            int matches = sscanf((const char*)input, "%*s %*s %d", &number);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	461a      	mov	r2, r3
 800129c:	4947      	ldr	r1, [pc, #284]	; (80013bc <Process_Command+0x174>)
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	f008 f830 	bl	8009304 <siscanf>
 80012a4:	6338      	str	r0, [r7, #48]	; 0x30

            if (matches == 1) {
 80012a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d105      	bne.n	80012b8 <Process_Command+0x70>
                pos[0] = number;
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	801a      	strh	r2, [r3, #0]
                return CMD_SUCCESS;
 80012b4:	2300      	movs	r3, #0
 80012b6:	e074      	b.n	80013a2 <Process_Command+0x15a>
            } else {
                printf("Invalid number for mov base\n");
 80012b8:	4841      	ldr	r0, [pc, #260]	; (80013c0 <Process_Command+0x178>)
 80012ba:	f007 fff5 	bl	80092a8 <puts>
                return CMD_FAILURE;
 80012be:	2301      	movs	r3, #1
 80012c0:	e06f      	b.n	80013a2 <Process_Command+0x15a>
            }
        }

        else if (strcmp((const char*)target, "joint") == 0) {
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	493f      	ldr	r1, [pc, #252]	; (80013c4 <Process_Command+0x17c>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7fe ff81 	bl	80001d0 <strcmp>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d116      	bne.n	8001302 <Process_Command+0xba>
            int number;
            int matches = sscanf((const char*)input, "%*s %*s %d", &number);
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	461a      	mov	r2, r3
 80012da:	4938      	ldr	r1, [pc, #224]	; (80013bc <Process_Command+0x174>)
 80012dc:	68b8      	ldr	r0, [r7, #8]
 80012de:	f008 f811 	bl	8009304 <siscanf>
 80012e2:	6378      	str	r0, [r7, #52]	; 0x34

            if (matches == 1) {
 80012e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d106      	bne.n	80012f8 <Process_Command+0xb0>
            	pos[1] = number;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3302      	adds	r3, #2
 80012f0:	b212      	sxth	r2, r2
 80012f2:	801a      	strh	r2, [r3, #0]
            	return CMD_SUCCESS;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e054      	b.n	80013a2 <Process_Command+0x15a>
            } else {
                printf("Invalid number for mov joint\n");
 80012f8:	4833      	ldr	r0, [pc, #204]	; (80013c8 <Process_Command+0x180>)
 80012fa:	f007 ffd5 	bl	80092a8 <puts>
                return CMD_FAILURE;
 80012fe:	2301      	movs	r3, #1
 8001300:	e04f      	b.n	80013a2 <Process_Command+0x15a>
            }
        }

        else {
            printf("Invalid target for mov\n");
 8001302:	4832      	ldr	r0, [pc, #200]	; (80013cc <Process_Command+0x184>)
 8001304:	f007 ffd0 	bl	80092a8 <puts>
            return CMD_FAILURE;
 8001308:	2301      	movs	r3, #1
 800130a:	e04a      	b.n	80013a2 <Process_Command+0x15a>
        }
    }

    else if (strcmp((const char*)command, "claw") == 0) {
 800130c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001310:	492f      	ldr	r1, [pc, #188]	; (80013d0 <Process_Command+0x188>)
 8001312:	4618      	mov	r0, r3
 8001314:	f7fe ff5c 	bl	80001d0 <strcmp>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d12f      	bne.n	800137e <Process_Command+0x136>
        uint8_t action[6];
        sscanf((const char*)input, "%*s %5s", (char*)action);
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	461a      	mov	r2, r3
 8001324:	4923      	ldr	r1, [pc, #140]	; (80013b4 <Process_Command+0x16c>)
 8001326:	68b8      	ldr	r0, [r7, #8]
 8001328:	f007 ffec 	bl	8009304 <siscanf>

        if (strcmp((const char*)action, "open") == 0) {
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4928      	ldr	r1, [pc, #160]	; (80013d4 <Process_Command+0x18c>)
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ff4c 	bl	80001d0 <strcmp>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d108      	bne.n	8001350 <Process_Command+0x108>
        	but = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
        	Robot_Move(Robot, pos, but);
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff ff08 	bl	800115c <Robot_Move>
        	return CMD_SUCCESS;
 800134c:	2300      	movs	r3, #0
 800134e:	e028      	b.n	80013a2 <Process_Command+0x15a>
        }
        else if (strcmp((const char*)action, "close") == 0) {
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4920      	ldr	r1, [pc, #128]	; (80013d8 <Process_Command+0x190>)
 8001356:	4618      	mov	r0, r3
 8001358:	f7fe ff3a 	bl	80001d0 <strcmp>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d108      	bne.n	8001374 <Process_Command+0x12c>
        	but = 1;
 8001362:	2301      	movs	r3, #1
 8001364:	603b      	str	r3, [r7, #0]
        	Robot_Move(Robot, pos, but);
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f7ff fef6 	bl	800115c <Robot_Move>
        	return CMD_SUCCESS;
 8001370:	2300      	movs	r3, #0
 8001372:	e016      	b.n	80013a2 <Process_Command+0x15a>
        }
        else {
            printf("Invalid action for claw\n");
 8001374:	4819      	ldr	r0, [pc, #100]	; (80013dc <Process_Command+0x194>)
 8001376:	f007 ff97 	bl	80092a8 <puts>
            return CMD_FAILURE;
 800137a:	2301      	movs	r3, #1
 800137c:	e011      	b.n	80013a2 <Process_Command+0x15a>
        }
    }

    else if (strcmp((const char*)command, "reset") == 0) {
 800137e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001382:	4917      	ldr	r1, [pc, #92]	; (80013e0 <Process_Command+0x198>)
 8001384:	4618      	mov	r0, r3
 8001386:	f7fe ff23 	bl	80001d0 <strcmp>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d104      	bne.n	800139a <Process_Command+0x152>
        printf("Command: reset\n");
 8001390:	4814      	ldr	r0, [pc, #80]	; (80013e4 <Process_Command+0x19c>)
 8001392:	f007 ff89 	bl	80092a8 <puts>
        return CMD_SUCCESS;
 8001396:	2300      	movs	r3, #0
 8001398:	e003      	b.n	80013a2 <Process_Command+0x15a>
    }
    else {
        printf("Invalid command\n");
 800139a:	4813      	ldr	r0, [pc, #76]	; (80013e8 <Process_Command+0x1a0>)
 800139c:	f007 ff84 	bl	80092a8 <puts>
        return CMD_FAILURE;
 80013a0:	2301      	movs	r3, #1
    }
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3738      	adds	r7, #56	; 0x38
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	0800e578 	.word	0x0800e578
 80013b0:	0800e57c 	.word	0x0800e57c
 80013b4:	0800e580 	.word	0x0800e580
 80013b8:	0800e588 	.word	0x0800e588
 80013bc:	0800e590 	.word	0x0800e590
 80013c0:	0800e59c 	.word	0x0800e59c
 80013c4:	0800e5b8 	.word	0x0800e5b8
 80013c8:	0800e5c0 	.word	0x0800e5c0
 80013cc:	0800e5e0 	.word	0x0800e5e0
 80013d0:	0800e5f8 	.word	0x0800e5f8
 80013d4:	0800e600 	.word	0x0800e600
 80013d8:	0800e608 	.word	0x0800e608
 80013dc:	0800e610 	.word	0x0800e610
 80013e0:	0800e628 	.word	0x0800e628
 80013e4:	0800e630 	.word	0x0800e630
 80013e8:	0800e640 	.word	0x0800e640

080013ec <main>:
uint8_t RX_Data[COMMAND_LENGTH] = {0};
char LCD_RX_Data[COMMAND_LENGTH];


int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0aa      	sub	sp, #168	; 0xa8
 80013f0:	af06      	add	r7, sp, #24
  //System initialization
  HAL_Init();
 80013f2:	f000 fbb1 	bl	8001b58 <HAL_Init>
  SysConfigClock();
 80013f6:	f006 ff23 	bl	8008240 <SysConfigClock>
  Global_GPIO_Init();
 80013fa:	f006 f82b 	bl	8007454 <Global_GPIO_Init>

  //Peripherals initialization
  USART_Init(9600);
 80013fe:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001402:	f006 ffff 	bl	8008404 <USART_Init>
  HAL_UART_Receive_IT(&USART2_I, RX_Data, 1);
 8001406:	2201      	movs	r2, #1
 8001408:	499f      	ldr	r1, [pc, #636]	; (8001688 <main+0x29c>)
 800140a:	48a0      	ldr	r0, [pc, #640]	; (800168c <main+0x2a0>)
 800140c:	f004 fd8a 	bl	8005f24 <HAL_UART_Receive_IT>


  Mode_Change_Interrupt_Init();
 8001410:	f7ff fe4a 	bl	80010a8 <Mode_Change_Interrupt_Init>

  LCD_Struct_t LCD_1602 = LCD_Create(LCD_Ports, LCD_Pins, RS_Port, RS_Pin, E_Port, E_Pin);
 8001414:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <main+0x2a4>)
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	4b99      	ldr	r3, [pc, #612]	; (8001690 <main+0x2a4>)
 800142a:	4a9a      	ldr	r2, [pc, #616]	; (8001694 <main+0x2a8>)
 800142c:	499a      	ldr	r1, [pc, #616]	; (8001698 <main+0x2ac>)
 800142e:	f006 fcc6 	bl	8007dbe <LCD_Create>

  Joystick_Struct_t Joystick = Joystick_Create(
 8001432:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	9304      	str	r3, [sp, #16]
 800143c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001440:	9303      	str	r3, [sp, #12]
 8001442:	4b96      	ldr	r3, [pc, #600]	; (800169c <main+0x2b0>)
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	2302      	movs	r3, #2
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	4b93      	ldr	r3, [pc, #588]	; (80016a0 <main+0x2b4>)
 8001452:	2201      	movs	r2, #1
 8001454:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001458:	f006 fa02 	bl	8007860 <Joystick_Create>
		  JOYSTICK_X_Port, JOYSTICK_X_Pin, JOYSTICK_X_ADC_Channel,
		  JOYSTICK_Y_Port, JOYSTICK_Y_Pin, JOYSTICK_Y_ADC_Channel,
		  JOYSTICK_BUTTON_Port, JOYSTICK_BUTTON_Pin);

  SG90_Struct_t ServoBase = Servo_Create(
 800145c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001460:	4b90      	ldr	r3, [pc, #576]	; (80016a4 <main+0x2b8>)
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	2304      	movs	r3, #4
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	4b8f      	ldr	r3, [pc, #572]	; (80016a8 <main+0x2bc>)
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	498f      	ldr	r1, [pc, #572]	; (80016ac <main+0x2c0>)
 800146e:	f006 fe97 	bl	80081a0 <Servo_Create>
		  SERVO_BASE_Port, SERVO_BASE_Pin, SERVO_BASE_TIM_INSTANCE,
		  SERVO_BASE_PWM_CHANNEL, &ServoBase_Handle);

  SG90_Struct_t ServoJoint = Servo_Create(
 8001472:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001476:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <main+0x2c4>)
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	2300      	movs	r3, #0
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	4b8d      	ldr	r3, [pc, #564]	; (80016b4 <main+0x2c8>)
 8001480:	2240      	movs	r2, #64	; 0x40
 8001482:	4983      	ldr	r1, [pc, #524]	; (8001690 <main+0x2a4>)
 8001484:	f006 fe8c 	bl	80081a0 <Servo_Create>
		  SERVO_JOINT_Port, SERVO_JOINT_Pin, SERVO_JOINT_TIM_INSTANCE,
		  SERVO_JOINT_PWM_CHANNEL, &ServoJoint_Handle);

  SG90_Struct_t ServoClaw = Servo_Create(
 8001488:	f107 0010 	add.w	r0, r7, #16
 800148c:	4b8a      	ldr	r3, [pc, #552]	; (80016b8 <main+0x2cc>)
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	2304      	movs	r3, #4
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	4b89      	ldr	r3, [pc, #548]	; (80016bc <main+0x2d0>)
 8001496:	2280      	movs	r2, #128	; 0x80
 8001498:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800149c:	f006 fe80 	bl	80081a0 <Servo_Create>
		  SERVO_CLAW_Port, SERVO_CLAW_Pin, SERVO_CLAW_TIM_INSTANCE,
		  SERVO_CLAW_PWM_CHANNEL, &ServoClaw_Handle);

  SG90_Struct_t* Robot[3] = {&ServoBase, &ServoJoint, &ServoClaw};
 80014a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	60fb      	str	r3, [r7, #12]

  //Program loop
  while (1)
  {
	  if (mode == MANUAL) {
 80014b2:	4b83      	ldr	r3, [pc, #524]	; (80016c0 <main+0x2d4>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d147      	bne.n	800154c <main+0x160>
		  Joystick_Read(&Joystick, xy_joystick);
 80014bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014c0:	4980      	ldr	r1, [pc, #512]	; (80016c4 <main+0x2d8>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f006 fa3a 	bl	800793c <Joystick_Read>

		  Robot_Move(Robot, xy_joystick, button_state);
 80014c8:	4b7f      	ldr	r3, [pc, #508]	; (80016c8 <main+0x2dc>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	497d      	ldr	r1, [pc, #500]	; (80016c4 <main+0x2d8>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fe43 	bl	800115c <Robot_Move>

		  sprintf(joystick_data, "X: %hd, Y: %hd", xy_joystick[0], xy_joystick[1]);
 80014d6:	4b7b      	ldr	r3, [pc, #492]	; (80016c4 <main+0x2d8>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b79      	ldr	r3, [pc, #484]	; (80016c4 <main+0x2d8>)
 80014e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014e4:	4979      	ldr	r1, [pc, #484]	; (80016cc <main+0x2e0>)
 80014e6:	487a      	ldr	r0, [pc, #488]	; (80016d0 <main+0x2e4>)
 80014e8:	f007 feec 	bl	80092c4 <siprintf>

		  LCD_YX(&LCD_1602, 1, 0);
 80014ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014f0:	2200      	movs	r2, #0
 80014f2:	2101      	movs	r1, #1
 80014f4:	4618      	mov	r0, r3
 80014f6:	f006 fc24 	bl	8007d42 <LCD_YX>
		  LCD_String(&LCD_1602, joystick_data);
 80014fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014fe:	4974      	ldr	r1, [pc, #464]	; (80016d0 <main+0x2e4>)
 8001500:	4618      	mov	r0, r3
 8001502:	f006 fbfb 	bl	8007cfc <LCD_String>

		  if (button_state == 1) {
 8001506:	4b70      	ldr	r3, [pc, #448]	; (80016c8 <main+0x2dc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d10d      	bne.n	800152a <main+0x13e>
			  LCD_YX(&LCD_1602, 0, 0);
 800150e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f006 fc13 	bl	8007d42 <LCD_YX>
			  LCD_String(&LCD_1602, "Claw: Closed");
 800151c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001520:	496c      	ldr	r1, [pc, #432]	; (80016d4 <main+0x2e8>)
 8001522:	4618      	mov	r0, r3
 8001524:	f006 fbea 	bl	8007cfc <LCD_String>
 8001528:	e00c      	b.n	8001544 <main+0x158>
		  }
		  else {
			  LCD_YX(&LCD_1602, 0, 0);
 800152a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f006 fc05 	bl	8007d42 <LCD_YX>
			  LCD_String(&LCD_1602, "Claw: Open");
 8001538:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800153c:	4966      	ldr	r1, [pc, #408]	; (80016d8 <main+0x2ec>)
 800153e:	4618      	mov	r0, r3
 8001540:	f006 fbdc 	bl	8007cfc <LCD_String>
		  }

		  HAL_Delay(50);
 8001544:	2032      	movs	r0, #50	; 0x32
 8001546:	f000 fb83 	bl	8001c50 <HAL_Delay>
 800154a:	e7b2      	b.n	80014b2 <main+0xc6>
	  }

	  else if(mode == SERIAL) {
 800154c:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <main+0x2d4>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d1ad      	bne.n	80014b2 <main+0xc6>
		  if (status == AWAITING){
 8001556:	4b61      	ldr	r3, [pc, #388]	; (80016dc <main+0x2f0>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d128      	bne.n	80015b2 <main+0x1c6>
			  if (!neutral) {
 8001560:	4b5f      	ldr	r3, [pc, #380]	; (80016e0 <main+0x2f4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	f083 0301 	eor.w	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <main+0x190>
				  Robot_Neutral(Robot);
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe3b 	bl	80011ec <Robot_Neutral>

				  neutral = true;  // Set the flag to true after executing the function
 8001576:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <main+0x2f4>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
			  }

			  LCD_YX(&LCD_1602, 0, 0);
 800157c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f006 fbdc 	bl	8007d42 <LCD_YX>
			  LCD_String(&LCD_1602, "Awaiting Command");
 800158a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800158e:	4955      	ldr	r1, [pc, #340]	; (80016e4 <main+0x2f8>)
 8001590:	4618      	mov	r0, r3
 8001592:	f006 fbb3 	bl	8007cfc <LCD_String>

			  LCD_YX(&LCD_1602, 1, 0);
 8001596:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800159a:	2200      	movs	r2, #0
 800159c:	2101      	movs	r1, #1
 800159e:	4618      	mov	r0, r3
 80015a0:	f006 fbcf 	bl	8007d42 <LCD_YX>
			  LCD_String(&LCD_1602, "...");
 80015a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a8:	494f      	ldr	r1, [pc, #316]	; (80016e8 <main+0x2fc>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f006 fba6 	bl	8007cfc <LCD_String>
 80015b0:	e77f      	b.n	80014b2 <main+0xc6>

		  }

		  else if (status == RECIEVED) {
 80015b2:	4b4a      	ldr	r3, [pc, #296]	; (80016dc <main+0x2f0>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f47f af7a 	bne.w	80014b2 <main+0xc6>
			  LCD_YX(&LCD_1602, 0, 0);
 80015be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f006 fbbb 	bl	8007d42 <LCD_YX>
			  LCD_String(&LCD_1602, "Received Command");
 80015cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015d0:	4946      	ldr	r1, [pc, #280]	; (80016ec <main+0x300>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f006 fb92 	bl	8007cfc <LCD_String>

			  uint8_to_char(RX_Data, LCD_RX_Data, COMMAND_LENGTH);
 80015d8:	220b      	movs	r2, #11
 80015da:	4945      	ldr	r1, [pc, #276]	; (80016f0 <main+0x304>)
 80015dc:	482a      	ldr	r0, [pc, #168]	; (8001688 <main+0x29c>)
 80015de:	f006 fbce 	bl	8007d7e <uint8_to_char>

			  LCD_YX(&LCD_1602, 1, 0);
 80015e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015e6:	2200      	movs	r2, #0
 80015e8:	2101      	movs	r1, #1
 80015ea:	4618      	mov	r0, r3
 80015ec:	f006 fba9 	bl	8007d42 <LCD_YX>
			  LCD_String(&LCD_1602, LCD_RX_Data);
 80015f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015f4:	493e      	ldr	r1, [pc, #248]	; (80016f0 <main+0x304>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f006 fb80 	bl	8007cfc <LCD_String>

			  Cmd_Process_Result_t result = Process_Command(Robot, RX_Data, xy_serial, button_serial);
 80015fc:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <main+0x308>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	1d38      	adds	r0, r7, #4
 8001602:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <main+0x30c>)
 8001604:	4920      	ldr	r1, [pc, #128]	; (8001688 <main+0x29c>)
 8001606:	f7ff fe1f 	bl	8001248 <Process_Command>
 800160a:	4603      	mov	r3, r0
 800160c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

			  HAL_Delay(700);
 8001610:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001614:	f000 fb1c 	bl	8001c50 <HAL_Delay>

			  if (result == CMD_SUCCESS) {
 8001618:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800161c:	2b00      	cmp	r3, #0
 800161e:	d119      	bne.n	8001654 <main+0x268>
				  LCD_YX(&LCD_1602, 0, 0);
 8001620:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f006 fb8a 	bl	8007d42 <LCD_YX>
				  LCD_String(&LCD_1602, "Success!");
 800162e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001632:	4932      	ldr	r1, [pc, #200]	; (80016fc <main+0x310>)
 8001634:	4618      	mov	r0, r3
 8001636:	f006 fb61 	bl	8007cfc <LCD_String>

				  status = AWAITING;
 800163a:	4b28      	ldr	r3, [pc, #160]	; (80016dc <main+0x2f0>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]

				  memset(RX_Data, 0, COMMAND_LENGTH);
 8001640:	220b      	movs	r2, #11
 8001642:	2100      	movs	r1, #0
 8001644:	4810      	ldr	r0, [pc, #64]	; (8001688 <main+0x29c>)
 8001646:	f006 ff3f 	bl	80084c8 <memset>

				  HAL_Delay(700);
 800164a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800164e:	f000 faff 	bl	8001c50 <HAL_Delay>
 8001652:	e72e      	b.n	80014b2 <main+0xc6>
			  }
			  else {
				  LCD_YX(&LCD_1602, 0, 0);
 8001654:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f006 fb70 	bl	8007d42 <LCD_YX>
				  LCD_String(&LCD_1602, "Failure!");
 8001662:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001666:	4926      	ldr	r1, [pc, #152]	; (8001700 <main+0x314>)
 8001668:	4618      	mov	r0, r3
 800166a:	f006 fb47 	bl	8007cfc <LCD_String>

				  status = AWAITING;
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <main+0x2f0>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]

				  memset(RX_Data, 0, COMMAND_LENGTH);
 8001674:	220b      	movs	r2, #11
 8001676:	2100      	movs	r1, #0
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <main+0x29c>)
 800167a:	f006 ff25 	bl	80084c8 <memset>

				  HAL_Delay(700);
 800167e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001682:	f000 fae5 	bl	8001c50 <HAL_Delay>
	  if (mode == MANUAL) {
 8001686:	e714      	b.n	80014b2 <main+0xc6>
 8001688:	20000324 	.word	0x20000324
 800168c:	200003d4 	.word	0x200003d4
 8001690:	48000400 	.word	0x48000400
 8001694:	20000010 	.word	0x20000010
 8001698:	20000000 	.word	0x20000000
 800169c:	19200040 	.word	0x19200040
 80016a0:	14f00020 	.word	0x14f00020
 80016a4:	20000214 	.word	0x20000214
 80016a8:	40013400 	.word	0x40013400
 80016ac:	48000800 	.word	0x48000800
 80016b0:	20000260 	.word	0x20000260
 80016b4:	40000800 	.word	0x40000800
 80016b8:	200002ac 	.word	0x200002ac
 80016bc:	40000400 	.word	0x40000400
 80016c0:	200002f8 	.word	0x200002f8
 80016c4:	20000304 	.word	0x20000304
 80016c8:	200002fc 	.word	0x200002fc
 80016cc:	0800e650 	.word	0x0800e650
 80016d0:	20000310 	.word	0x20000310
 80016d4:	0800e660 	.word	0x0800e660
 80016d8:	0800e670 	.word	0x0800e670
 80016dc:	200002f9 	.word	0x200002f9
 80016e0:	2000030c 	.word	0x2000030c
 80016e4:	0800e67c 	.word	0x0800e67c
 80016e8:	0800e690 	.word	0x0800e690
 80016ec:	0800e694 	.word	0x0800e694
 80016f0:	20000330 	.word	0x20000330
 80016f4:	20000300 	.word	0x20000300
 80016f8:	20000308 	.word	0x20000308
 80016fc:	0800e6a8 	.word	0x0800e6a8
 8001700:	0800e6b4 	.word	0x0800e6b4

08001704 <HAL_GPIO_EXTI_Callback>:
}


//Interrupt callbacks
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == JOYSTICK_BUTTON_Pin) {
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001714:	d10a      	bne.n	800172c <HAL_GPIO_EXTI_Callback+0x28>
		button_state = (button_state == 0) ? 1 : 0;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_GPIO_EXTI_Callback+0x54>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf0c      	ite	eq
 800171e:	2301      	moveq	r3, #1
 8001720:	2300      	movne	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_GPIO_EXTI_Callback+0x54>)
 8001728:	601a      	str	r2, [r3, #0]
	}

	else if (GPIO_Pin == MODE_CHANGE_Pin) {
		mode = (mode == MANUAL) ? SERIAL : MANUAL;
	}
}
 800172a:	e00e      	b.n	800174a <HAL_GPIO_EXTI_Callback+0x46>
	else if (GPIO_Pin == MODE_CHANGE_Pin) {
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001732:	d10a      	bne.n	800174a <HAL_GPIO_EXTI_Callback+0x46>
		mode = (mode == MANUAL) ? SERIAL : MANUAL;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_GPIO_EXTI_Callback+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf0c      	ite	eq
 800173e:	2301      	moveq	r3, #1
 8001740:	2300      	movne	r3, #0
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_GPIO_EXTI_Callback+0x58>)
 8001748:	701a      	strb	r2, [r3, #0]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	200002fc 	.word	0x200002fc
 800175c:	200002f8 	.word	0x200002f8

08001760 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uartHandler)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(uartHandler, &RX_Data[1], COMMAND_LENGTH);
 8001768:	220b      	movs	r2, #11
 800176a:	4905      	ldr	r1, [pc, #20]	; (8001780 <HAL_UART_RxCpltCallback+0x20>)
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f004 fbd9 	bl	8005f24 <HAL_UART_Receive_IT>
    status = RECIEVED;
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <HAL_UART_RxCpltCallback+0x24>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000325 	.word	0x20000325
 8001784:	200002f9 	.word	0x200002f9

08001788 <__io_putchar>:

int __io_putchar(int ch);
int _write(int file, char *ptr, int len);


int __io_putchar(int ch) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&USART2_I, &c[0], 1, 100);
 8001796:	f107 010c 	add.w	r1, r7, #12
 800179a:	2364      	movs	r3, #100	; 0x64
 800179c:	2201      	movs	r2, #1
 800179e:	4804      	ldr	r0, [pc, #16]	; (80017b0 <__io_putchar+0x28>)
 80017a0:	f004 fb2b 	bl	8005dfa <HAL_UART_Transmit>
	return ch;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003d4 	.word	0x200003d4

080017b4 <_write>:


int _write(int file, char *ptr, int len) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e009      	b.n	80017da <_write+0x26>
		__io_putchar(*ptr++);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	60ba      	str	r2, [r7, #8]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ffda 	bl	8001788 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	429a      	cmp	r2, r3
 80017e0:	dbf1      	blt.n	80017c6 <_write+0x12>
	}

	return len;
 80017e2:	687b      	ldr	r3, [r7, #4]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_MspInit+0x44>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_MspInit+0x44>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6613      	str	r3, [r2, #96]	; 0x60
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_MspInit+0x44>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_MspInit+0x44>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_MspInit+0x44>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_MspInit+0x44>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0ac      	sub	sp, #176	; 0xb0
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2288      	movs	r2, #136	; 0x88
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f006 fe37 	bl	80084c8 <memset>
  if(hadc->Instance==ADC1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a27      	ldr	r2, [pc, #156]	; (80018fc <HAL_ADC_MspInit+0xc8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d147      	bne.n	80018f4 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001868:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800186a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800186e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001872:	2302      	movs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001876:	2301      	movs	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800187a:	2308      	movs	r3, #8
 800187c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800187e:	2307      	movs	r3, #7
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001882:	2302      	movs	r3, #2
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001886:	2302      	movs	r3, #2
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800188a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4618      	mov	r0, r3
 8001896:	f002 fdc7 	bl	8004428 <HAL_RCCEx_PeriphCLKConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80018a0:	f006 fd1f 	bl	80082e2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_ADC_MspInit+0xcc>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	4a15      	ldr	r2, [pc, #84]	; (8001900 <HAL_ADC_MspInit+0xcc>)
 80018aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_ADC_MspInit+0xcc>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_ADC_MspInit+0xcc>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <HAL_ADC_MspInit+0xcc>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_ADC_MspInit+0xcc>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018da:	230b      	movs	r3, #11
 80018dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ea:	4619      	mov	r1, r3
 80018ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f0:	f001 fd5c 	bl	80033ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f4:	bf00      	nop
 80018f6:	37b0      	adds	r7, #176	; 0xb0
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	50040000 	.word	0x50040000
 8001900:	40021000 	.word	0x40021000

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f000 f95e 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <EXTI9_5_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */

void Joystick_Button_IRQ_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(JOYSTICK_BUTTON_Pin);
 800195c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001960:	f001 fee6 	bl	8003730 <HAL_GPIO_EXTI_IRQHandler>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <EXTI15_10_IRQHandler>:


void Mode_Change_IRQ_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(MODE_CHANGE_Pin);
 800196c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001970:	f001 fede 	bl	8003730 <HAL_GPIO_EXTI_IRQHandler>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <USART2_IRQHandler>:


void Command_Recieved_Handler(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&USART2_I);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <USART2_IRQHandler+0x10>)
 800197e:	f004 fb27 	bl	8005fd0 <HAL_UART_IRQHandler>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200003d4 	.word	0x200003d4

0800198c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return 1;
 8001990:	2301      	movs	r3, #1
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_kill>:

int _kill(int pid, int sig)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019a6:	f006 fd65 	bl	8008474 <__errno>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2216      	movs	r2, #22
 80019ae:	601a      	str	r2, [r3, #0]
  return -1;
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_exit>:

void _exit (int status)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ffe7 	bl	800199c <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ce:	e7fe      	b.n	80019ce <_exit+0x12>

080019d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e00a      	b.n	80019f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e2:	f3af 8000 	nop.w
 80019e6:	4601      	mov	r1, r0
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	60ba      	str	r2, [r7, #8]
 80019ee:	b2ca      	uxtb	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf0      	blt.n	80019e2 <_read+0x12>
  }

  return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a32:	605a      	str	r2, [r3, #4]
  return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_isatty>:

int _isatty(int file)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f006 fce6 	bl	8008474 <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20018000 	.word	0x20018000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	2000033c 	.word	0x2000033c
 8001adc:	20000468 	.word	0x20000468

08001ae0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b08:	f7ff ffea 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b0e:	490d      	ldr	r1, [pc, #52]	; (8001b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <LoopForever+0xe>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b24:	4c0a      	ldr	r4, [pc, #40]	; (8001b50 <LoopForever+0x16>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b32:	f006 fca5 	bl	8008480 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b36:	f7ff fc59 	bl	80013ec <main>

08001b3a <LoopForever>:

LoopForever:
    b LoopForever
 8001b3a:	e7fe      	b.n	8001b3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001b48:	0800ec18 	.word	0x0800ec18
  ldr r2, =_sbss
 8001b4c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001b50:	20000468 	.word	0x20000468

08001b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC1_2_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_Init+0x3c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_Init+0x3c>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f001 fb6a 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b74:	2000      	movs	r0, #0
 8001b76:	f000 f80f 	bl	8001b98 <HAL_InitTick>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	71fb      	strb	r3, [r7, #7]
 8001b84:	e001      	b.n	8001b8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b86:	f7ff fe31 	bl	80017ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40022000 	.word	0x40022000

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_InitTick+0x6c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d023      	beq.n	8001bf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_InitTick+0x70>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_InitTick+0x6c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 fb67 	bl	8003296 <HAL_SYSTICK_Config>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10f      	bne.n	8001bee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d809      	bhi.n	8001be8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bdc:	f001 fb3f 	bl	800325e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_InitTick+0x74>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e007      	b.n	8001bf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e004      	b.n	8001bf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	e001      	b.n	8001bf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000020 	.word	0x20000020
 8001c08:	20000018 	.word	0x20000018
 8001c0c:	2000001c 	.word	0x2000001c

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000020 	.word	0x20000020
 8001c34:	20000340 	.word	0x20000340

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000340 	.word	0x20000340

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000020 	.word	0x20000020

08001c98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3360      	adds	r3, #96	; 0x60
 8001d12:	461a      	mov	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <LL_ADC_SetOffset+0x44>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d38:	bf00      	nop
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	03fff000 	.word	0x03fff000

08001d48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3360      	adds	r3, #96	; 0x60
 8001d56:	461a      	mov	r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3360      	adds	r3, #96	; 0x60
 8001d84:	461a      	mov	r2, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3330      	adds	r3, #48	; 0x30
 8001de0:	461a      	mov	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	4413      	add	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	211f      	movs	r1, #31
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	401a      	ands	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	0e9b      	lsrs	r3, r3, #26
 8001e08:	f003 011f 	and.w	r1, r3, #31
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	431a      	orrs	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3314      	adds	r3, #20
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	0e5b      	lsrs	r3, r3, #25
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	4413      	add	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	0d1b      	lsrs	r3, r3, #20
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2107      	movs	r1, #7
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	0d1b      	lsrs	r3, r3, #20
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0318 	and.w	r3, r3, #24
 8001ea2:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ea4:	40d9      	lsrs	r1, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	400b      	ands	r3, r1
 8001eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	0007ffff 	.word	0x0007ffff

08001ec8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 031f 	and.w	r3, r3, #31
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6093      	str	r3, [r2, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f38:	d101      	bne.n	8001f3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f88:	d101      	bne.n	8001f8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb0:	f043 0201 	orr.w	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <LL_ADC_IsEnabled+0x18>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <LL_ADC_IsEnabled+0x1a>
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ffa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ffe:	f043 0204 	orr.w	r2, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b04      	cmp	r3, #4
 8002024:	d101      	bne.n	800202a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b08      	cmp	r3, #8
 800204a:	d101      	bne.n	8002050 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e136      	b.n	80022e8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff fbd3 	bl	8001834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff3f 	bl	8001f24 <LL_ADC_IsDeepPowerDownEnabled>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff25 	bl	8001f00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff5a 	bl	8001f74 <LL_ADC_IsInternalRegulatorEnabled>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d115      	bne.n	80020f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff3e 	bl	8001f4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d0:	4b87      	ldr	r3, [pc, #540]	; (80022f0 <HAL_ADC_Init+0x290>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	4a87      	ldr	r2, [pc, #540]	; (80022f4 <HAL_ADC_Init+0x294>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020e4:	e002      	b.n	80020ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f9      	bne.n	80020e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff3c 	bl	8001f74 <LL_ADC_IsInternalRegulatorEnabled>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	f043 0210 	orr.w	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff75 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 8002128:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 80cf 	bne.w	80022d6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 80cb 	bne.w	80022d6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002148:	f043 0202 	orr.w	r2, r3, #2
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff35 	bl	8001fc4 <LL_ADC_IsEnabled>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d115      	bne.n	800218c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002160:	4865      	ldr	r0, [pc, #404]	; (80022f8 <HAL_ADC_Init+0x298>)
 8002162:	f7ff ff2f 	bl	8001fc4 <LL_ADC_IsEnabled>
 8002166:	4604      	mov	r4, r0
 8002168:	4864      	ldr	r0, [pc, #400]	; (80022fc <HAL_ADC_Init+0x29c>)
 800216a:	f7ff ff2b 	bl	8001fc4 <LL_ADC_IsEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	431c      	orrs	r4, r3
 8002172:	4863      	ldr	r0, [pc, #396]	; (8002300 <HAL_ADC_Init+0x2a0>)
 8002174:	f7ff ff26 	bl	8001fc4 <LL_ADC_IsEnabled>
 8002178:	4603      	mov	r3, r0
 800217a:	4323      	orrs	r3, r4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4619      	mov	r1, r3
 8002186:	485f      	ldr	r0, [pc, #380]	; (8002304 <HAL_ADC_Init+0x2a4>)
 8002188:	f7ff fd86 	bl	8001c98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7e5b      	ldrb	r3, [r3, #25]
 8002190:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002196:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800219c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d106      	bne.n	80021c8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	3b01      	subs	r3, #1
 80021c0:	045b      	lsls	r3, r3, #17
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_ADC_Init+0x2a8>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	69b9      	ldr	r1, [r7, #24]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff08 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 8002202:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff15 	bl	8002038 <LL_ADC_INJ_IsConversionOngoing>
 800220e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d13d      	bne.n	8002292 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d13a      	bne.n	8002292 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002220:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002228:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002238:	f023 0302 	bic.w	r3, r3, #2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	69b9      	ldr	r1, [r7, #24]
 8002242:	430b      	orrs	r3, r1
 8002244:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800224c:	2b01      	cmp	r3, #1
 800224e:	d118      	bne.n	8002282 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800225a:	f023 0304 	bic.w	r3, r3, #4
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002266:	4311      	orrs	r1, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800226c:	4311      	orrs	r1, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002272:	430a      	orrs	r2, r1
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	611a      	str	r2, [r3, #16]
 8002280:	e007      	b.n	8002292 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0201 	bic.w	r2, r2, #1
 8002290:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d10c      	bne.n	80022b4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	f023 010f 	bic.w	r1, r3, #15
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	1e5a      	subs	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
 80022b2:	e007      	b.n	80022c4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 020f 	bic.w	r2, r2, #15
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f023 0303 	bic.w	r3, r3, #3
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
 80022d4:	e007      	b.n	80022e6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	f043 0210 	orr.w	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3724      	adds	r7, #36	; 0x24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd90      	pop	{r4, r7, pc}
 80022f0:	20000018 	.word	0x20000018
 80022f4:	053e2d63 	.word	0x053e2d63
 80022f8:	50040000 	.word	0x50040000
 80022fc:	50040100 	.word	0x50040100
 8002300:	50040200 	.word	0x50040200
 8002304:	50040300 	.word	0x50040300
 8002308:	fff0c007 	.word	0xfff0c007

0800230c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002314:	4857      	ldr	r0, [pc, #348]	; (8002474 <HAL_ADC_Start+0x168>)
 8002316:	f7ff fdd7 	bl	8001ec8 <LL_ADC_GetMultimode>
 800231a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe76 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 809c 	bne.w	8002466 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_ADC_Start+0x30>
 8002338:	2302      	movs	r3, #2
 800233a:	e097      	b.n	800246c <HAL_ADC_Start+0x160>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fd71 	bl	8002e2c <ADC_Enable>
 800234a:	4603      	mov	r3, r0
 800234c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f040 8083 	bne.w	800245c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a42      	ldr	r2, [pc, #264]	; (8002478 <HAL_ADC_Start+0x16c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d002      	beq.n	800237a <HAL_ADC_Start+0x6e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	e000      	b.n	800237c <HAL_ADC_Start+0x70>
 800237a:	4b40      	ldr	r3, [pc, #256]	; (800247c <HAL_ADC_Start+0x170>)
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	4293      	cmp	r3, r2
 8002382:	d002      	beq.n	800238a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d105      	bne.n	8002396 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	d106      	bne.n	80023b2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f023 0206 	bic.w	r2, r3, #6
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	659a      	str	r2, [r3, #88]	; 0x58
 80023b0:	e002      	b.n	80023b8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	221c      	movs	r2, #28
 80023be:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <HAL_ADC_Start+0x16c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d002      	beq.n	80023d8 <HAL_ADC_Start+0xcc>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	e000      	b.n	80023da <HAL_ADC_Start+0xce>
 80023d8:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_ADC_Start+0x170>)
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	4293      	cmp	r3, r2
 80023e0:	d008      	beq.n	80023f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2b05      	cmp	r3, #5
 80023ec:	d002      	beq.n	80023f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b09      	cmp	r3, #9
 80023f2:	d114      	bne.n	800241e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800240a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fde7 	bl	8001fea <LL_ADC_REG_StartConversion>
 800241c:	e025      	b.n	800246a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a12      	ldr	r2, [pc, #72]	; (8002478 <HAL_ADC_Start+0x16c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d002      	beq.n	800243a <HAL_ADC_Start+0x12e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	e000      	b.n	800243c <HAL_ADC_Start+0x130>
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_ADC_Start+0x170>)
 800243c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00f      	beq.n	800246a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002452:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
 800245a:	e006      	b.n	800246a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002464:	e001      	b.n	800246a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002466:	2302      	movs	r3, #2
 8002468:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800246a:	7dfb      	ldrb	r3, [r7, #23]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	50040300 	.word	0x50040300
 8002478:	50040100 	.word	0x50040100
 800247c:	50040000 	.word	0x50040000

08002480 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800248a:	4866      	ldr	r0, [pc, #408]	; (8002624 <HAL_ADC_PollForConversion+0x1a4>)
 800248c:	f7ff fd1c 	bl	8001ec8 <LL_ADC_GetMultimode>
 8002490:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	2b08      	cmp	r3, #8
 8002498:	d102      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800249a:	2308      	movs	r3, #8
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e02a      	b.n	80024f6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d002      	beq.n	80024b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b09      	cmp	r3, #9
 80024b0:	d111      	bne.n	80024d6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0a4      	b.n	800261a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024d0:	2304      	movs	r3, #4
 80024d2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024d4:	e00f      	b.n	80024f6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024d6:	4853      	ldr	r0, [pc, #332]	; (8002624 <HAL_ADC_PollForConversion+0x1a4>)
 80024d8:	f7ff fd04 	bl	8001ee4 <LL_ADC_GetMultiDMATransfer>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	f043 0220 	orr.w	r2, r3, #32
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e093      	b.n	800261a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024f2:	2304      	movs	r3, #4
 80024f4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024f6:	f7ff fb9f 	bl	8001c38 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024fc:	e021      	b.n	8002542 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002504:	d01d      	beq.n	8002542 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002506:	f7ff fb97 	bl	8001c38 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <HAL_ADC_PollForConversion+0x9c>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d112      	bne.n	8002542 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10b      	bne.n	8002542 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f043 0204 	orr.w	r2, r3, #4
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e06b      	b.n	800261a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0d6      	beq.n	80024fe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fc22 	bl	8001daa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01c      	beq.n	80025a6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7e5b      	ldrb	r3, [r3, #25]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d118      	bne.n	80025a6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b08      	cmp	r3, #8
 8002580:	d111      	bne.n	80025a6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259e:	f043 0201 	orr.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_ADC_PollForConversion+0x1a8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d002      	beq.n	80025b6 <HAL_ADC_PollForConversion+0x136>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	e000      	b.n	80025b8 <HAL_ADC_PollForConversion+0x138>
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_ADC_PollForConversion+0x1ac>)
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	4293      	cmp	r3, r2
 80025be:	d008      	beq.n	80025d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d002      	beq.n	80025d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2b09      	cmp	r3, #9
 80025d0:	d104      	bne.n	80025dc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	e00c      	b.n	80025f6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a11      	ldr	r2, [pc, #68]	; (8002628 <HAL_ADC_PollForConversion+0x1a8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d002      	beq.n	80025ec <HAL_ADC_PollForConversion+0x16c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	e000      	b.n	80025ee <HAL_ADC_PollForConversion+0x16e>
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_ADC_PollForConversion+0x1ac>)
 80025ee:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d104      	bne.n	8002606 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2208      	movs	r2, #8
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e008      	b.n	8002618 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d103      	bne.n	8002618 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	220c      	movs	r2, #12
 8002616:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3720      	adds	r7, #32
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	50040300 	.word	0x50040300
 8002628:	50040100 	.word	0x50040100
 800262c:	50040000 	.word	0x50040000

08002630 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b0b6      	sub	sp, #216	; 0xd8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x22>
 800266a:	2302      	movs	r3, #2
 800266c:	e3c7      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x7b2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fcc9 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 83a8 	bne.w	8002dd8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d824      	bhi.n	80026da <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	3b02      	subs	r3, #2
 8002696:	2b03      	cmp	r3, #3
 8002698:	d81b      	bhi.n	80026d2 <HAL_ADC_ConfigChannel+0x86>
 800269a:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_ADC_ConfigChannel+0x54>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	080026b1 	.word	0x080026b1
 80026a4:	080026b9 	.word	0x080026b9
 80026a8:	080026c1 	.word	0x080026c1
 80026ac:	080026c9 	.word	0x080026c9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	220c      	movs	r2, #12
 80026b4:	605a      	str	r2, [r3, #4]
          break;
 80026b6:	e011      	b.n	80026dc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2212      	movs	r2, #18
 80026bc:	605a      	str	r2, [r3, #4]
          break;
 80026be:	e00d      	b.n	80026dc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2218      	movs	r2, #24
 80026c4:	605a      	str	r2, [r3, #4]
          break;
 80026c6:	e009      	b.n	80026dc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ce:	605a      	str	r2, [r3, #4]
          break;
 80026d0:	e004      	b.n	80026dc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2206      	movs	r2, #6
 80026d6:	605a      	str	r2, [r3, #4]
          break;
 80026d8:	e000      	b.n	80026dc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80026da:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	f7ff fb71 	bl	8001dd0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fc8d 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 80026f8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fc99 	bl	8002038 <LL_ADC_INJ_IsConversionOngoing>
 8002706:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800270a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 81a6 	bne.w	8002a60 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 81a1 	bne.w	8002a60 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	461a      	mov	r2, r3
 800272c:	f7ff fb7c 	bl	8001e28 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	08db      	lsrs	r3, r3, #3
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b04      	cmp	r3, #4
 8002750:	d00a      	beq.n	8002768 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6919      	ldr	r1, [r3, #16]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002762:	f7ff facd 	bl	8001d00 <LL_ADC_SetOffset>
 8002766:	e17b      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff faea 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x148>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fadf 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	f003 021f 	and.w	r2, r3, #31
 8002792:	e01e      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x186>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fad4 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80027c2:	2320      	movs	r3, #32
 80027c4:	e004      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80027c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x19e>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0e9b      	lsrs	r3, r3, #26
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	e018      	b.n	800281c <HAL_ADC_ConfigChannel+0x1d0>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800280e:	2320      	movs	r3, #32
 8002810:	e004      	b.n	800281c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002812:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800281c:	429a      	cmp	r2, r3
 800281e:	d106      	bne.n	800282e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff faa3 	bl	8001d74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fa87 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <HAL_ADC_ConfigChannel+0x20e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2101      	movs	r1, #1
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fa7c 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	e01e      	b.n	8002898 <HAL_ADC_ConfigChannel+0x24c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fa71 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002878:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800287c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002888:	2320      	movs	r3, #32
 800288a:	e004      	b.n	8002896 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800288c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x264>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	e018      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x296>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80028d4:	2320      	movs	r3, #32
 80028d6:	e004      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80028d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d106      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	2101      	movs	r1, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fa40 	bl	8001d74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2102      	movs	r1, #2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fa24 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 8002900:	4603      	mov	r3, r0
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x2d4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2102      	movs	r1, #2
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fa19 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	f003 021f 	and.w	r2, r3, #31
 800291e:	e01e      	b.n	800295e <HAL_ADC_ConfigChannel+0x312>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2102      	movs	r1, #2
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fa0e 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800293e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002946:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800294e:	2320      	movs	r3, #32
 8002950:	e004      	b.n	800295c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002952:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x32a>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	e016      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x358>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002988:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800298a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800298e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002996:	2320      	movs	r3, #32
 8002998:	e004      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800299a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d106      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	2102      	movs	r1, #2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff f9df 	bl	8001d74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2103      	movs	r1, #3
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff f9c3 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x396>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2103      	movs	r1, #3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f9b8 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	0e9b      	lsrs	r3, r3, #26
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	e017      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x3c6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2103      	movs	r1, #3
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f9ad 	bl	8001d48 <LL_ADC_GetOffsetChannel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029fc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d105      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x3de>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	0e9b      	lsrs	r3, r3, #26
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	e011      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x402>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002a42:	2320      	movs	r3, #32
 8002a44:	e003      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d106      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	2103      	movs	r1, #3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff f98a 	bl	8001d74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff faad 	bl	8001fc4 <LL_ADC_IsEnabled>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 813f 	bne.w	8002cf0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f7ff f9fe 	bl	8001e80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a8e      	ldr	r2, [pc, #568]	; (8002cc4 <HAL_ADC_ConfigChannel+0x678>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	f040 8130 	bne.w	8002cf0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x46c>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	2b09      	cmp	r3, #9
 8002aae:	bf94      	ite	ls
 8002ab0:	2301      	movls	r3, #1
 8002ab2:	2300      	movhi	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e019      	b.n	8002aec <HAL_ADC_ConfigChannel+0x4a0>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	e003      	b.n	8002adc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	bf94      	ite	ls
 8002ae6:	2301      	movls	r3, #1
 8002ae8:	2300      	movhi	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d079      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d107      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x4c0>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	069b      	lsls	r3, r3, #26
 8002b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b0a:	e015      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x4ec>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e003      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	069b      	lsls	r3, r3, #26
 8002b34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x50c>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0e9b      	lsrs	r3, r3, #26
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	e017      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x53c>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b70:	2320      	movs	r3, #32
 8002b72:	e003      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	ea42 0103 	orr.w	r1, r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x562>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0e9b      	lsrs	r3, r3, #26
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	051b      	lsls	r3, r3, #20
 8002bac:	e018      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x594>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e003      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be0:	430b      	orrs	r3, r1
 8002be2:	e080      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x5b4>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	069b      	lsls	r3, r3, #26
 8002bfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bfe:	e015      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x5e0>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e003      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	069b      	lsls	r3, r3, #26
 8002c28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x600>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	0e9b      	lsrs	r3, r3, #26
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	2101      	movs	r1, #1
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	e017      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x630>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	61fb      	str	r3, [r7, #28]
  return result;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	ea42 0103 	orr.w	r1, r2, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x65c>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	3301      	adds	r3, #1
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b1e      	subs	r3, #30
 8002ca0:	051b      	lsls	r3, r3, #20
 8002ca2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	e01d      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x698>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	613b      	str	r3, [r7, #16]
  return result;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	e005      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x684>
 8002cc4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f003 021f 	and.w	r2, r3, #31
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	3b1e      	subs	r3, #30
 8002cde:	051b      	lsls	r3, r3, #20
 8002ce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	6892      	ldr	r2, [r2, #8]
 8002cea:	4619      	mov	r1, r3
 8002cec:	f7ff f89c 	bl	8001e28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_ADC_ConfigChannel+0x7bc>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d07a      	beq.n	8002df2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cfc:	4843      	ldr	r0, [pc, #268]	; (8002e0c <HAL_ADC_ConfigChannel+0x7c0>)
 8002cfe:	f7fe fff1 	bl	8001ce4 <LL_ADC_GetCommonPathInternalCh>
 8002d02:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a41      	ldr	r2, [pc, #260]	; (8002e10 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d12c      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d126      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3c      	ldr	r2, [pc, #240]	; (8002e14 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <HAL_ADC_ConfigChannel+0x6e4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a3b      	ldr	r2, [pc, #236]	; (8002e18 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d15d      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4834      	ldr	r0, [pc, #208]	; (8002e0c <HAL_ADC_ConfigChannel+0x7c0>)
 8002d3c:	f7fe ffbf 	bl	8001cbe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_ADC_ConfigChannel+0x7d0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	4a36      	ldr	r2, [pc, #216]	; (8002e20 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	099b      	lsrs	r3, r3, #6
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d5a:	e002      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f9      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d68:	e040      	b.n	8002dec <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2d      	ldr	r2, [pc, #180]	; (8002e24 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d118      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x75a>
 8002d74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d112      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a23      	ldr	r2, [pc, #140]	; (8002e14 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_ADC_ConfigChannel+0x748>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d12d      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	481b      	ldr	r0, [pc, #108]	; (8002e0c <HAL_ADC_ConfigChannel+0x7c0>)
 8002da0:	f7fe ff8d 	bl	8001cbe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002da4:	e024      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1f      	ldr	r2, [pc, #124]	; (8002e28 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d120      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11a      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <HAL_ADC_ConfigChannel+0x7c8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d115      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dce:	4619      	mov	r1, r3
 8002dd0:	480e      	ldr	r0, [pc, #56]	; (8002e0c <HAL_ADC_ConfigChannel+0x7c0>)
 8002dd2:	f7fe ff74 	bl	8001cbe <LL_ADC_SetCommonPathInternalCh>
 8002dd6:	e00c      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dea:	e002      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dec:	bf00      	nop
 8002dee:	e000      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002df0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dfa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	37d8      	adds	r7, #216	; 0xd8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	80080000 	.word	0x80080000
 8002e0c:	50040300 	.word	0x50040300
 8002e10:	c7520000 	.word	0xc7520000
 8002e14:	50040000 	.word	0x50040000
 8002e18:	50040200 	.word	0x50040200
 8002e1c:	20000018 	.word	0x20000018
 8002e20:	053e2d63 	.word	0x053e2d63
 8002e24:	cb840000 	.word	0xcb840000
 8002e28:	80000001 	.word	0x80000001

08002e2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff f8c1 	bl	8001fc4 <LL_ADC_IsEnabled>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d169      	bne.n	8002f1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <ADC_Enable+0xfc>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f043 0210 	orr.w	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e055      	b.n	8002f1e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f890 	bl	8001f9c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e7c:	482b      	ldr	r0, [pc, #172]	; (8002f2c <ADC_Enable+0x100>)
 8002e7e:	f7fe ff31 	bl	8001ce4 <LL_ADC_GetCommonPathInternalCh>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <ADC_Enable+0x104>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <ADC_Enable+0x108>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002ea6:	e002      	b.n	8002eae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f9      	bne.n	8002ea8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fec0 	bl	8001c38 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eba:	e028      	b.n	8002f0e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff f87f 	bl	8001fc4 <LL_ADC_IsEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff f863 	bl	8001f9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ed6:	f7fe feaf 	bl	8001c38 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d914      	bls.n	8002f0e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d00d      	beq.n	8002f0e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e007      	b.n	8002f1e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d1cf      	bne.n	8002ebc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	8000003f 	.word	0x8000003f
 8002f2c:	50040300 	.word	0x50040300
 8002f30:	20000018 	.word	0x20000018
 8002f34:	053e2d63 	.word	0x053e2d63

08002f38 <LL_ADC_IsEnabled>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <LL_ADC_IsEnabled+0x18>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <LL_ADC_IsEnabled+0x1a>
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d101      	bne.n	8002f76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b09f      	sub	sp, #124	; 0x7c
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e093      	b.n	80030ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002faa:	2300      	movs	r3, #0
 8002fac:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a47      	ldr	r2, [pc, #284]	; (80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d102      	bne.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fbc:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	e001      	b.n	8002fc6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e072      	b.n	80030ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ffb9 	bl	8002f5e <LL_ADC_REG_IsConversionOngoing>
 8002fec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ffb3 	bl	8002f5e <LL_ADC_REG_IsConversionOngoing>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d154      	bne.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003000:	2b00      	cmp	r3, #0
 8003002:	d151      	bne.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003004:	4b35      	ldr	r3, [pc, #212]	; (80030dc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003006:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d02c      	beq.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003022:	035b      	lsls	r3, r3, #13
 8003024:	430b      	orrs	r3, r1
 8003026:	431a      	orrs	r2, r3
 8003028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800302c:	4829      	ldr	r0, [pc, #164]	; (80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800302e:	f7ff ff83 	bl	8002f38 <LL_ADC_IsEnabled>
 8003032:	4604      	mov	r4, r0
 8003034:	4828      	ldr	r0, [pc, #160]	; (80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003036:	f7ff ff7f 	bl	8002f38 <LL_ADC_IsEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	431c      	orrs	r4, r3
 800303e:	4828      	ldr	r0, [pc, #160]	; (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003040:	f7ff ff7a 	bl	8002f38 <LL_ADC_IsEnabled>
 8003044:	4603      	mov	r3, r0
 8003046:	4323      	orrs	r3, r4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d137      	bne.n	80030bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800304c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003054:	f023 030f 	bic.w	r3, r3, #15
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	6811      	ldr	r1, [r2, #0]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	6892      	ldr	r2, [r2, #8]
 8003060:	430a      	orrs	r2, r1
 8003062:	431a      	orrs	r2, r3
 8003064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003066:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003068:	e028      	b.n	80030bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800306a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003074:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003076:	4817      	ldr	r0, [pc, #92]	; (80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003078:	f7ff ff5e 	bl	8002f38 <LL_ADC_IsEnabled>
 800307c:	4604      	mov	r4, r0
 800307e:	4816      	ldr	r0, [pc, #88]	; (80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003080:	f7ff ff5a 	bl	8002f38 <LL_ADC_IsEnabled>
 8003084:	4603      	mov	r3, r0
 8003086:	431c      	orrs	r4, r3
 8003088:	4815      	ldr	r0, [pc, #84]	; (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800308a:	f7ff ff55 	bl	8002f38 <LL_ADC_IsEnabled>
 800308e:	4603      	mov	r3, r0
 8003090:	4323      	orrs	r3, r4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d112      	bne.n	80030bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800309e:	f023 030f 	bic.w	r3, r3, #15
 80030a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030a6:	e009      	b.n	80030bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80030ba:	e000      	b.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	377c      	adds	r7, #124	; 0x7c
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd90      	pop	{r4, r7, pc}
 80030d2:	bf00      	nop
 80030d4:	50040000 	.word	0x50040000
 80030d8:	50040100 	.word	0x50040100
 80030dc:	50040300 	.word	0x50040300
 80030e0:	50040200 	.word	0x50040200

080030e4 <__NVIC_SetPriorityGrouping>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800310c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003116:	4a04      	ldr	r2, [pc, #16]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_GetPriorityGrouping>:
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <__NVIC_GetPriorityGrouping+0x18>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 0307 	and.w	r3, r3, #7
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_SetPriority>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db0a      	blt.n	8003172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	490c      	ldr	r1, [pc, #48]	; (8003194 <__NVIC_SetPriority+0x4c>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	440b      	add	r3, r1
 800316c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003170:	e00a      	b.n	8003188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4908      	ldr	r1, [pc, #32]	; (8003198 <__NVIC_SetPriority+0x50>)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3b04      	subs	r3, #4
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	440b      	add	r3, r1
 8003186:	761a      	strb	r2, [r3, #24]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f1c3 0307 	rsb	r3, r3, #7
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf28      	it	cs
 80031ba:	2304      	movcs	r3, #4
 80031bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d902      	bls.n	80031cc <NVIC_EncodePriority+0x30>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	e000      	b.n	80031ce <NVIC_EncodePriority+0x32>
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43d9      	mvns	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	4313      	orrs	r3, r2
         );
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003214:	d301      	bcc.n	800321a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003216:	2301      	movs	r3, #1
 8003218:	e00f      	b.n	800323a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <SysTick_Config+0x40>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003222:	210f      	movs	r1, #15
 8003224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003228:	f7ff ff8e 	bl	8003148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <SysTick_Config+0x40>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <SysTick_Config+0x40>)
 8003234:	2207      	movs	r2, #7
 8003236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000e010 	.word	0xe000e010

08003248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff47 	bl	80030e4 <__NVIC_SetPriorityGrouping>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003270:	f7ff ff5c 	bl	800312c <__NVIC_GetPriorityGrouping>
 8003274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7ff ff8e 	bl	800319c <NVIC_EncodePriority>
 8003280:	4602      	mov	r2, r0
 8003282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff5d 	bl	8003148 <__NVIC_SetPriority>
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffb0 	bl	8003204 <SysTick_Config>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d008      	beq.n	80032d8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2204      	movs	r2, #4
 80032ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e022      	b.n	800331e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 020e 	bic.w	r2, r2, #14
 80032e6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f003 021c 	and.w	r2, r3, #28
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	2101      	movs	r1, #1
 8003306:	fa01 f202 	lsl.w	r2, r1, r2
 800330a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d005      	beq.n	800334e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2204      	movs	r2, #4
 8003346:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	e029      	b.n	80033a2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 020e 	bic.w	r2, r2, #14
 800335c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f003 021c 	and.w	r2, r3, #28
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	2101      	movs	r1, #1
 800337c:	fa01 f202 	lsl.w	r2, r1, r2
 8003380:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
    }
  }
  return status;
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ba:	e17f      	b.n	80036bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	4013      	ands	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8171 	beq.w	80036b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d005      	beq.n	80033ec <HAL_GPIO_Init+0x40>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d130      	bne.n	800344e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2203      	movs	r2, #3
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003422:	2201      	movs	r2, #1
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 0201 	and.w	r2, r3, #1
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b03      	cmp	r3, #3
 8003458:	d118      	bne.n	800348c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003460:	2201      	movs	r2, #1
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	08db      	lsrs	r3, r3, #3
 8003476:	f003 0201 	and.w	r2, r3, #1
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b03      	cmp	r3, #3
 8003496:	d017      	beq.n	80034c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d123      	bne.n	800351c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	08da      	lsrs	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3208      	adds	r2, #8
 80034dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	220f      	movs	r2, #15
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	08da      	lsrs	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3208      	adds	r2, #8
 8003516:	6939      	ldr	r1, [r7, #16]
 8003518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80ac 	beq.w	80036b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355e:	4b5f      	ldr	r3, [pc, #380]	; (80036dc <HAL_GPIO_Init+0x330>)
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	4a5e      	ldr	r2, [pc, #376]	; (80036dc <HAL_GPIO_Init+0x330>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6613      	str	r3, [r2, #96]	; 0x60
 800356a:	4b5c      	ldr	r3, [pc, #368]	; (80036dc <HAL_GPIO_Init+0x330>)
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003576:	4a5a      	ldr	r2, [pc, #360]	; (80036e0 <HAL_GPIO_Init+0x334>)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	3302      	adds	r3, #2
 800357e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	220f      	movs	r2, #15
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035a0:	d025      	beq.n	80035ee <HAL_GPIO_Init+0x242>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4f      	ldr	r2, [pc, #316]	; (80036e4 <HAL_GPIO_Init+0x338>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01f      	beq.n	80035ea <HAL_GPIO_Init+0x23e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4e      	ldr	r2, [pc, #312]	; (80036e8 <HAL_GPIO_Init+0x33c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d019      	beq.n	80035e6 <HAL_GPIO_Init+0x23a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4d      	ldr	r2, [pc, #308]	; (80036ec <HAL_GPIO_Init+0x340>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d013      	beq.n	80035e2 <HAL_GPIO_Init+0x236>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4c      	ldr	r2, [pc, #304]	; (80036f0 <HAL_GPIO_Init+0x344>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00d      	beq.n	80035de <HAL_GPIO_Init+0x232>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4b      	ldr	r2, [pc, #300]	; (80036f4 <HAL_GPIO_Init+0x348>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d007      	beq.n	80035da <HAL_GPIO_Init+0x22e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a4a      	ldr	r2, [pc, #296]	; (80036f8 <HAL_GPIO_Init+0x34c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d101      	bne.n	80035d6 <HAL_GPIO_Init+0x22a>
 80035d2:	2306      	movs	r3, #6
 80035d4:	e00c      	b.n	80035f0 <HAL_GPIO_Init+0x244>
 80035d6:	2307      	movs	r3, #7
 80035d8:	e00a      	b.n	80035f0 <HAL_GPIO_Init+0x244>
 80035da:	2305      	movs	r3, #5
 80035dc:	e008      	b.n	80035f0 <HAL_GPIO_Init+0x244>
 80035de:	2304      	movs	r3, #4
 80035e0:	e006      	b.n	80035f0 <HAL_GPIO_Init+0x244>
 80035e2:	2303      	movs	r3, #3
 80035e4:	e004      	b.n	80035f0 <HAL_GPIO_Init+0x244>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e002      	b.n	80035f0 <HAL_GPIO_Init+0x244>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_GPIO_Init+0x244>
 80035ee:	2300      	movs	r3, #0
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	f002 0203 	and.w	r2, r2, #3
 80035f6:	0092      	lsls	r2, r2, #2
 80035f8:	4093      	lsls	r3, r2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003600:	4937      	ldr	r1, [pc, #220]	; (80036e0 <HAL_GPIO_Init+0x334>)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	3302      	adds	r3, #2
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_GPIO_Init+0x350>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003632:	4a32      	ldr	r2, [pc, #200]	; (80036fc <HAL_GPIO_Init+0x350>)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <HAL_GPIO_Init+0x350>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800365c:	4a27      	ldr	r2, [pc, #156]	; (80036fc <HAL_GPIO_Init+0x350>)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003662:	4b26      	ldr	r3, [pc, #152]	; (80036fc <HAL_GPIO_Init+0x350>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <HAL_GPIO_Init+0x350>)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <HAL_GPIO_Init+0x350>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	43db      	mvns	r3, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036b0:	4a12      	ldr	r2, [pc, #72]	; (80036fc <HAL_GPIO_Init+0x350>)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	3301      	adds	r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fa22 f303 	lsr.w	r3, r2, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f47f ae78 	bne.w	80033bc <HAL_GPIO_Init+0x10>
  }
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40010000 	.word	0x40010000
 80036e4:	48000400 	.word	0x48000400
 80036e8:	48000800 	.word	0x48000800
 80036ec:	48000c00 	.word	0x48000c00
 80036f0:	48001000 	.word	0x48001000
 80036f4:	48001400 	.word	0x48001400
 80036f8:	48001800 	.word	0x48001800
 80036fc:	40010400 	.word	0x40010400

08003700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	807b      	strh	r3, [r7, #2]
 800370c:	4613      	mov	r3, r2
 800370e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003710:	787b      	ldrb	r3, [r7, #1]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800371c:	e002      	b.n	8003724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d006      	beq.n	8003754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003746:	4a05      	ldr	r2, [pc, #20]	; (800375c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd ffd8 	bl	8001704 <HAL_GPIO_EXTI_Callback>
  }
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40010400 	.word	0x40010400

08003760 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <HAL_PWREx_GetVoltageRange+0x18>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40007000 	.word	0x40007000

0800377c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800378a:	d130      	bne.n	80037ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800378c:	4b23      	ldr	r3, [pc, #140]	; (800381c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003798:	d038      	beq.n	800380c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800379a:	4b20      	ldr	r3, [pc, #128]	; (800381c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037a2:	4a1e      	ldr	r2, [pc, #120]	; (800381c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2232      	movs	r2, #50	; 0x32
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0c9b      	lsrs	r3, r3, #18
 80037bc:	3301      	adds	r3, #1
 80037be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c0:	e002      	b.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d4:	d102      	bne.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f2      	bne.n	80037c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d110      	bne.n	800380c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e00f      	b.n	800380e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fa:	d007      	beq.n	800380c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037fc:	4b07      	ldr	r3, [pc, #28]	; (800381c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003804:	4a05      	ldr	r2, [pc, #20]	; (800381c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40007000 	.word	0x40007000
 8003820:	20000018 	.word	0x20000018
 8003824:	431bde83 	.word	0x431bde83

08003828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e3ca      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383a:	4b97      	ldr	r3, [pc, #604]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003844:	4b94      	ldr	r3, [pc, #592]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80e4 	beq.w	8003a24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_RCC_OscConfig+0x4a>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b0c      	cmp	r3, #12
 8003866:	f040 808b 	bne.w	8003980 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b01      	cmp	r3, #1
 800386e:	f040 8087 	bne.w	8003980 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003872:	4b89      	ldr	r3, [pc, #548]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_RCC_OscConfig+0x62>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e3a2      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1a      	ldr	r2, [r3, #32]
 800388e:	4b82      	ldr	r3, [pc, #520]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d004      	beq.n	80038a4 <HAL_RCC_OscConfig+0x7c>
 800389a:	4b7f      	ldr	r3, [pc, #508]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a2:	e005      	b.n	80038b0 <HAL_RCC_OscConfig+0x88>
 80038a4:	4b7c      	ldr	r3, [pc, #496]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d223      	bcs.n	80038fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fd55 	bl	8004368 <RCC_SetFlashLatencyFromMSIRange>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e383      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c8:	4b73      	ldr	r3, [pc, #460]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a72      	ldr	r2, [pc, #456]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038ce:	f043 0308 	orr.w	r3, r3, #8
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4b70      	ldr	r3, [pc, #448]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	496d      	ldr	r1, [pc, #436]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e6:	4b6c      	ldr	r3, [pc, #432]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	4968      	ldr	r1, [pc, #416]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
 80038fa:	e025      	b.n	8003948 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038fc:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a65      	ldr	r2, [pc, #404]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003902:	f043 0308 	orr.w	r3, r3, #8
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4960      	ldr	r1, [pc, #384]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800391a:	4b5f      	ldr	r3, [pc, #380]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	495b      	ldr	r1, [pc, #364]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fd15 	bl	8004368 <RCC_SetFlashLatencyFromMSIRange>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e343      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003948:	f000 fc4a 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 800394c:	4602      	mov	r2, r0
 800394e:	4b52      	ldr	r3, [pc, #328]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	4950      	ldr	r1, [pc, #320]	; (8003a9c <HAL_RCC_OscConfig+0x274>)
 800395a:	5ccb      	ldrb	r3, [r1, r3]
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
 8003964:	4a4e      	ldr	r2, [pc, #312]	; (8003aa0 <HAL_RCC_OscConfig+0x278>)
 8003966:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003968:	4b4e      	ldr	r3, [pc, #312]	; (8003aa4 <HAL_RCC_OscConfig+0x27c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe f913 	bl	8001b98 <HAL_InitTick>
 8003972:	4603      	mov	r3, r0
 8003974:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d052      	beq.n	8003a22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	e327      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d032      	beq.n	80039ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003988:	4b43      	ldr	r3, [pc, #268]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a42      	ldr	r2, [pc, #264]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003994:	f7fe f950 	bl	8001c38 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800399c:	f7fe f94c 	bl	8001c38 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e310      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ae:	4b3a      	ldr	r3, [pc, #232]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ba:	4b37      	ldr	r3, [pc, #220]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a36      	ldr	r2, [pc, #216]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039c0:	f043 0308 	orr.w	r3, r3, #8
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4931      	ldr	r1, [pc, #196]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039d8:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	492c      	ldr	r1, [pc, #176]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
 80039ec:	e01a      	b.n	8003a24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039ee:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a29      	ldr	r2, [pc, #164]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039fa:	f7fe f91d 	bl	8001c38 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a02:	f7fe f919 	bl	8001c38 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e2dd      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a14:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1f0      	bne.n	8003a02 <HAL_RCC_OscConfig+0x1da>
 8003a20:	e000      	b.n	8003a24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d074      	beq.n	8003b1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d005      	beq.n	8003a42 <HAL_RCC_OscConfig+0x21a>
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b0c      	cmp	r3, #12
 8003a3a:	d10e      	bne.n	8003a5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d10b      	bne.n	8003a5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d064      	beq.n	8003b18 <HAL_RCC_OscConfig+0x2f0>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d160      	bne.n	8003b18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e2ba      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x24a>
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e026      	b.n	8003ac0 <HAL_RCC_OscConfig+0x298>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a7a:	d115      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x280>
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a02      	ldr	r2, [pc, #8]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e014      	b.n	8003ac0 <HAL_RCC_OscConfig+0x298>
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	0800e6cc 	.word	0x0800e6cc
 8003aa0:	20000018 	.word	0x20000018
 8003aa4:	2000001c 	.word	0x2000001c
 8003aa8:	4ba0      	ldr	r3, [pc, #640]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a9f      	ldr	r2, [pc, #636]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b9d      	ldr	r3, [pc, #628]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a9c      	ldr	r2, [pc, #624]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe f8b6 	bl	8001c38 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fe f8b2 	bl	8001c38 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e276      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ae2:	4b92      	ldr	r3, [pc, #584]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x2a8>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe f8a2 	bl	8001c38 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fe f89e 	bl	8001c38 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e262      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b0a:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x2d0>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d060      	beq.n	8003be8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_OscConfig+0x310>
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d119      	bne.n	8003b66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d116      	bne.n	8003b66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b38:	4b7c      	ldr	r3, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_OscConfig+0x328>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e23f      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b50:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	4973      	ldr	r1, [pc, #460]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b64:	e040      	b.n	8003be8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d023      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6e:	4b6f      	ldr	r3, [pc, #444]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6e      	ldr	r2, [pc, #440]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fe f85d 	bl	8001c38 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b82:	f7fe f859 	bl	8001c38 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e21d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b94:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba0:	4b62      	ldr	r3, [pc, #392]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	495f      	ldr	r1, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
 8003bb4:	e018      	b.n	8003be8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb6:	4b5d      	ldr	r3, [pc, #372]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a5c      	ldr	r2, [pc, #368]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fe f839 	bl	8001c38 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bca:	f7fe f835 	bl	8001c38 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e1f9      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bdc:	4b53      	ldr	r3, [pc, #332]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d03c      	beq.n	8003c6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01c      	beq.n	8003c36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c02:	4a4a      	ldr	r2, [pc, #296]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fe f814 	bl	8001c38 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c14:	f7fe f810 	bl	8001c38 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1d4      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c26:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ef      	beq.n	8003c14 <HAL_RCC_OscConfig+0x3ec>
 8003c34:	e01b      	b.n	8003c6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c36:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c3c:	4a3b      	ldr	r2, [pc, #236]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c46:	f7fd fff7 	bl	8001c38 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c4e:	f7fd fff3 	bl	8001c38 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e1b7      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ef      	bne.n	8003c4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80a6 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10d      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	4a26      	ldr	r2, [pc, #152]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c96:	6593      	str	r3, [r2, #88]	; 0x58
 8003c98:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <HAL_RCC_OscConfig+0x508>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d118      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <HAL_RCC_OscConfig+0x508>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_RCC_OscConfig+0x508>)
 8003cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc0:	f7fd ffba 	bl	8001c38 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc8:	f7fd ffb6 	bl	8001c38 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e17a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <HAL_RCC_OscConfig+0x508>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d108      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4d8>
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cfe:	e029      	b.n	8003d54 <HAL_RCC_OscConfig+0x52c>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d115      	bne.n	8003d34 <HAL_RCC_OscConfig+0x50c>
 8003d08:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	4a03      	ldr	r2, [pc, #12]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d28:	e014      	b.n	8003d54 <HAL_RCC_OscConfig+0x52c>
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40007000 	.word	0x40007000
 8003d34:	4b9c      	ldr	r3, [pc, #624]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	4a9b      	ldr	r2, [pc, #620]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d44:	4b98      	ldr	r3, [pc, #608]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	4a97      	ldr	r2, [pc, #604]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003d4c:	f023 0304 	bic.w	r3, r3, #4
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d016      	beq.n	8003d8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fd ff6c 	bl	8001c38 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7fd ff68 	bl	8001c38 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e12a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7a:	4b8b      	ldr	r3, [pc, #556]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ed      	beq.n	8003d64 <HAL_RCC_OscConfig+0x53c>
 8003d88:	e015      	b.n	8003db6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8a:	f7fd ff55 	bl	8001c38 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d90:	e00a      	b.n	8003da8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d92:	f7fd ff51 	bl	8001c38 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e113      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da8:	4b7f      	ldr	r3, [pc, #508]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1ed      	bne.n	8003d92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db6:	7ffb      	ldrb	r3, [r7, #31]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbc:	4b7a      	ldr	r3, [pc, #488]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	4a79      	ldr	r2, [pc, #484]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80fe 	beq.w	8003fce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	f040 80d0 	bne.w	8003f7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ddc:	4b72      	ldr	r3, [pc, #456]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f003 0203 	and.w	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d130      	bne.n	8003e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d127      	bne.n	8003e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d11f      	bne.n	8003e52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e1c:	2a07      	cmp	r2, #7
 8003e1e:	bf14      	ite	ne
 8003e20:	2201      	movne	r2, #1
 8003e22:	2200      	moveq	r2, #0
 8003e24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d113      	bne.n	8003e52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	3b01      	subs	r3, #1
 8003e38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d109      	bne.n	8003e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d06e      	beq.n	8003f30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	d069      	beq.n	8003f2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e58:	4b53      	ldr	r3, [pc, #332]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d105      	bne.n	8003e70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e64:	4b50      	ldr	r3, [pc, #320]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0ad      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e74:	4b4c      	ldr	r3, [pc, #304]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a4b      	ldr	r2, [pc, #300]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e80:	f7fd feda 	bl	8001c38 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd fed6 	bl	8001c38 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e09a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9a:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea6:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	4b40      	ldr	r3, [pc, #256]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003eb6:	3a01      	subs	r2, #1
 8003eb8:	0112      	lsls	r2, r2, #4
 8003eba:	4311      	orrs	r1, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ec0:	0212      	lsls	r2, r2, #8
 8003ec2:	4311      	orrs	r1, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ec8:	0852      	lsrs	r2, r2, #1
 8003eca:	3a01      	subs	r2, #1
 8003ecc:	0552      	lsls	r2, r2, #21
 8003ece:	4311      	orrs	r1, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ed4:	0852      	lsrs	r2, r2, #1
 8003ed6:	3a01      	subs	r2, #1
 8003ed8:	0652      	lsls	r2, r2, #25
 8003eda:	4311      	orrs	r1, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee0:	0912      	lsrs	r2, r2, #4
 8003ee2:	0452      	lsls	r2, r2, #17
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	4930      	ldr	r1, [pc, #192]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eec:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2d      	ldr	r2, [pc, #180]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a2a      	ldr	r2, [pc, #168]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f04:	f7fd fe98 	bl	8001c38 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fd fe94 	bl	8001c38 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e058      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f2a:	e050      	b.n	8003fce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e04f      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f30:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d148      	bne.n	8003fce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f48:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f54:	f7fd fe70 	bl	8001c38 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fd fe6c 	bl	8001c38 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e030      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0x734>
 8003f7a:	e028      	b.n	8003fce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b0c      	cmp	r3, #12
 8003f80:	d023      	beq.n	8003fca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <HAL_RCC_OscConfig+0x780>)
 8003f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fd fe53 	bl	8001c38 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f94:	e00c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f96:	f7fd fe4f 	bl	8001c38 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d905      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e013      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb0:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_RCC_OscConfig+0x7b0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ec      	bne.n	8003f96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <HAL_RCC_OscConfig+0x7b0>)
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	4905      	ldr	r1, [pc, #20]	; (8003fd8 <HAL_RCC_OscConfig+0x7b0>)
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCC_OscConfig+0x7b4>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60cb      	str	r3, [r1, #12]
 8003fc8:	e001      	b.n	8003fce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3720      	adds	r7, #32
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	feeefffc 	.word	0xfeeefffc

08003fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0e7      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b75      	ldr	r3, [pc, #468]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d910      	bls.n	8004024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b72      	ldr	r3, [pc, #456]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f023 0207 	bic.w	r2, r3, #7
 800400a:	4970      	ldr	r1, [pc, #448]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	4313      	orrs	r3, r2
 8004010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b6e      	ldr	r3, [pc, #440]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0cf      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d010      	beq.n	8004052 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	4b66      	ldr	r3, [pc, #408]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403c:	429a      	cmp	r2, r3
 800403e:	d908      	bls.n	8004052 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004040:	4b63      	ldr	r3, [pc, #396]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4960      	ldr	r1, [pc, #384]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d04c      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b03      	cmp	r3, #3
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004066:	4b5a      	ldr	r3, [pc, #360]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d121      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e0a6      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d107      	bne.n	800408e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800407e:	4b54      	ldr	r3, [pc, #336]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d115      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e09a      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d107      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004096:	4b4e      	ldr	r3, [pc, #312]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e08e      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a6:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e086      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040b6:	4b46      	ldr	r3, [pc, #280]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f023 0203 	bic.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4943      	ldr	r1, [pc, #268]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c8:	f7fd fdb6 	bl	8001c38 <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d0:	f7fd fdb2 	bl	8001c38 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	; 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e06e      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 020c 	and.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d1eb      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d010      	beq.n	8004126 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004110:	429a      	cmp	r2, r3
 8004112:	d208      	bcs.n	8004126 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	492b      	ldr	r1, [pc, #172]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004126:	4b29      	ldr	r3, [pc, #164]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d210      	bcs.n	8004156 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004134:	4b25      	ldr	r3, [pc, #148]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f023 0207 	bic.w	r2, r3, #7
 800413c:	4923      	ldr	r1, [pc, #140]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004144:	4b21      	ldr	r3, [pc, #132]	; (80041cc <HAL_RCC_ClockConfig+0x1ec>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d001      	beq.n	8004156 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e036      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004162:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4918      	ldr	r1, [pc, #96]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4910      	ldr	r1, [pc, #64]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	4313      	orrs	r3, r2
 8004192:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004194:	f000 f824 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	490b      	ldr	r1, [pc, #44]	; (80041d4 <HAL_RCC_ClockConfig+0x1f4>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1f8>)
 80041b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <HAL_RCC_ClockConfig+0x1fc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fd fced 	bl	8001b98 <HAL_InitTick>
 80041be:	4603      	mov	r3, r0
 80041c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80041c2:	7afb      	ldrb	r3, [r7, #11]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40022000 	.word	0x40022000
 80041d0:	40021000 	.word	0x40021000
 80041d4:	0800e6cc 	.word	0x0800e6cc
 80041d8:	20000018 	.word	0x20000018
 80041dc:	2000001c 	.word	0x2000001c

080041e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b089      	sub	sp, #36	; 0x24
 80041e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ee:	4b3e      	ldr	r3, [pc, #248]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041f8:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0x34>
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d121      	bne.n	8004252 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d11e      	bne.n	8004252 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004214:	4b34      	ldr	r3, [pc, #208]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d107      	bne.n	8004230 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004220:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004226:	0a1b      	lsrs	r3, r3, #8
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	e005      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004230:	4b2d      	ldr	r3, [pc, #180]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800423c:	4a2b      	ldr	r2, [pc, #172]	; (80042ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004244:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10d      	bne.n	8004268 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d102      	bne.n	800425e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004258:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	e004      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d101      	bne.n	8004268 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004264:	4b23      	ldr	r3, [pc, #140]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004266:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b0c      	cmp	r3, #12
 800426c:	d134      	bne.n	80042d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d003      	beq.n	8004286 <HAL_RCC_GetSysClockFreq+0xa6>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b03      	cmp	r3, #3
 8004282:	d003      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0xac>
 8004284:	e005      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004286:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004288:	617b      	str	r3, [r7, #20]
      break;
 800428a:	e005      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800428e:	617b      	str	r3, [r7, #20]
      break;
 8004290:	e002      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	617b      	str	r3, [r7, #20]
      break;
 8004296:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	3301      	adds	r3, #1
 80042a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	0a1b      	lsrs	r3, r3, #8
 80042ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	fb03 f202 	mul.w	r2, r3, r2
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	0e5b      	lsrs	r3, r3, #25
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	3301      	adds	r3, #1
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042d8:	69bb      	ldr	r3, [r7, #24]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3724      	adds	r7, #36	; 0x24
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000
 80042ec:	0800e6e4 	.word	0x0800e6e4
 80042f0:	00f42400 	.word	0x00f42400
 80042f4:	007a1200 	.word	0x007a1200

080042f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <HAL_RCC_GetHCLKFreq+0x14>)
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000018 	.word	0x20000018

08004310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004314:	f7ff fff0 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	4904      	ldr	r1, [pc, #16]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40021000 	.word	0x40021000
 8004338:	0800e6dc 	.word	0x0800e6dc

0800433c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004340:	f7ff ffda 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	0adb      	lsrs	r3, r3, #11
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4904      	ldr	r1, [pc, #16]	; (8004364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000
 8004364:	0800e6dc 	.word	0x0800e6dc

08004368 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004374:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004380:	f7ff f9ee 	bl	8003760 <HAL_PWREx_GetVoltageRange>
 8004384:	6178      	str	r0, [r7, #20]
 8004386:	e014      	b.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004388:	4b25      	ldr	r3, [pc, #148]	; (8004420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	4a24      	ldr	r2, [pc, #144]	; (8004420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800438e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004392:	6593      	str	r3, [r2, #88]	; 0x58
 8004394:	4b22      	ldr	r3, [pc, #136]	; (8004420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043a0:	f7ff f9de 	bl	8003760 <HAL_PWREx_GetVoltageRange>
 80043a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043a6:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b8:	d10b      	bne.n	80043d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b80      	cmp	r3, #128	; 0x80
 80043be:	d919      	bls.n	80043f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2ba0      	cmp	r3, #160	; 0xa0
 80043c4:	d902      	bls.n	80043cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043c6:	2302      	movs	r3, #2
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	e013      	b.n	80043f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043cc:	2301      	movs	r3, #1
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	e010      	b.n	80043f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b80      	cmp	r3, #128	; 0x80
 80043d6:	d902      	bls.n	80043de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043d8:	2303      	movs	r3, #3
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	e00a      	b.n	80043f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b80      	cmp	r3, #128	; 0x80
 80043e2:	d102      	bne.n	80043ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043e4:	2302      	movs	r3, #2
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	e004      	b.n	80043f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b70      	cmp	r3, #112	; 0x70
 80043ee:	d101      	bne.n	80043f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043f0:	2301      	movs	r3, #1
 80043f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f023 0207 	bic.w	r2, r3, #7
 80043fc:	4909      	ldr	r1, [pc, #36]	; (8004424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004404:	4b07      	ldr	r3, [pc, #28]	; (8004424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	429a      	cmp	r2, r3
 8004410:	d001      	beq.n	8004416 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000
 8004424:	40022000 	.word	0x40022000

08004428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004430:	2300      	movs	r3, #0
 8004432:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004434:	2300      	movs	r3, #0
 8004436:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004440:	2b00      	cmp	r3, #0
 8004442:	d041      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004448:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800444c:	d02a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800444e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004452:	d824      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004454:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004458:	d008      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800445a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800445e:	d81e      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004468:	d010      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800446a:	e018      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800446c:	4b86      	ldr	r3, [pc, #536]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a85      	ldr	r2, [pc, #532]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004476:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004478:	e015      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3304      	adds	r3, #4
 800447e:	2100      	movs	r1, #0
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fabb 	bl	80049fc <RCCEx_PLLSAI1_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800448a:	e00c      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3320      	adds	r3, #32
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fba6 	bl	8004be4 <RCCEx_PLLSAI2_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800449c:	e003      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	74fb      	strb	r3, [r7, #19]
      break;
 80044a2:	e000      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a6:	7cfb      	ldrb	r3, [r7, #19]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044ac:	4b76      	ldr	r3, [pc, #472]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ba:	4973      	ldr	r1, [pc, #460]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044c2:	e001      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d041      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044dc:	d02a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044e2:	d824      	bhi.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044e8:	d008      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ee:	d81e      	bhi.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044f8:	d010      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044fa:	e018      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044fc:	4b62      	ldr	r3, [pc, #392]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4a61      	ldr	r2, [pc, #388]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004508:	e015      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fa73 	bl	80049fc <RCCEx_PLLSAI1_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800451a:	e00c      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3320      	adds	r3, #32
 8004520:	2100      	movs	r1, #0
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fb5e 	bl	8004be4 <RCCEx_PLLSAI2_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800452c:	e003      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	74fb      	strb	r3, [r7, #19]
      break;
 8004532:	e000      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004536:	7cfb      	ldrb	r3, [r7, #19]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800453c:	4b52      	ldr	r3, [pc, #328]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454a:	494f      	ldr	r1, [pc, #316]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004552:	e001      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004554:	7cfb      	ldrb	r3, [r7, #19]
 8004556:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80a0 	beq.w	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004566:	2300      	movs	r3, #0
 8004568:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800456a:	4b47      	ldr	r3, [pc, #284]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800457a:	2300      	movs	r3, #0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00d      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004580:	4b41      	ldr	r3, [pc, #260]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	4a40      	ldr	r2, [pc, #256]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458a:	6593      	str	r3, [r2, #88]	; 0x58
 800458c:	4b3e      	ldr	r3, [pc, #248]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004598:	2301      	movs	r3, #1
 800459a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800459c:	4b3b      	ldr	r3, [pc, #236]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a3a      	ldr	r2, [pc, #232]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045a8:	f7fd fb46 	bl	8001c38 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045ae:	e009      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b0:	f7fd fb42 	bl	8001c38 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d902      	bls.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	74fb      	strb	r3, [r7, #19]
        break;
 80045c2:	e005      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045c4:	4b31      	ldr	r3, [pc, #196]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ef      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d15c      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045d6:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01f      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d019      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045f4:	4b24      	ldr	r3, [pc, #144]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004600:	4b21      	ldr	r3, [pc, #132]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	4a20      	ldr	r2, [pc, #128]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004610:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004620:	4a19      	ldr	r2, [pc, #100]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fd fb01 	bl	8001c38 <HAL_GetTick>
 8004636:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004638:	e00b      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463a:	f7fd fafd 	bl	8001c38 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f241 3288 	movw	r2, #5000	; 0x1388
 8004648:	4293      	cmp	r3, r2
 800464a:	d902      	bls.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	74fb      	strb	r3, [r7, #19]
            break;
 8004650:	e006      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004652:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ec      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10c      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004666:	4b08      	ldr	r3, [pc, #32]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004676:	4904      	ldr	r1, [pc, #16]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800467e:	e009      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	74bb      	strb	r3, [r7, #18]
 8004684:	e006      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004694:	7c7b      	ldrb	r3, [r7, #17]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d105      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469a:	4b9e      	ldr	r3, [pc, #632]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	4a9d      	ldr	r2, [pc, #628]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046b2:	4b98      	ldr	r3, [pc, #608]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	f023 0203 	bic.w	r2, r3, #3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	4994      	ldr	r1, [pc, #592]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046d4:	4b8f      	ldr	r3, [pc, #572]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	f023 020c 	bic.w	r2, r3, #12
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e2:	498c      	ldr	r1, [pc, #560]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046f6:	4b87      	ldr	r3, [pc, #540]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	4983      	ldr	r1, [pc, #524]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004718:	4b7e      	ldr	r3, [pc, #504]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004726:	497b      	ldr	r1, [pc, #492]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800473a:	4b76      	ldr	r3, [pc, #472]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004748:	4972      	ldr	r1, [pc, #456]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800475c:	4b6d      	ldr	r3, [pc, #436]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	496a      	ldr	r1, [pc, #424]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800477e:	4b65      	ldr	r3, [pc, #404]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004784:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	4961      	ldr	r1, [pc, #388]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047a0:	4b5c      	ldr	r3, [pc, #368]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ae:	4959      	ldr	r1, [pc, #356]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c2:	4b54      	ldr	r3, [pc, #336]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	4950      	ldr	r1, [pc, #320]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047e4:	4b4b      	ldr	r3, [pc, #300]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	4948      	ldr	r1, [pc, #288]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004806:	4b43      	ldr	r3, [pc, #268]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004814:	493f      	ldr	r1, [pc, #252]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d028      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004828:	4b3a      	ldr	r3, [pc, #232]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004836:	4937      	ldr	r1, [pc, #220]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004846:	d106      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004848:	4b32      	ldr	r3, [pc, #200]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4a31      	ldr	r2, [pc, #196]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004852:	60d3      	str	r3, [r2, #12]
 8004854:	e011      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800485a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800485e:	d10c      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	2101      	movs	r1, #1
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f8c8 	bl	80049fc <RCCEx_PLLSAI1_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004876:	7cfb      	ldrb	r3, [r7, #19]
 8004878:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d028      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004886:	4b23      	ldr	r3, [pc, #140]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004894:	491f      	ldr	r1, [pc, #124]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a4:	d106      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a6:	4b1b      	ldr	r3, [pc, #108]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048b0:	60d3      	str	r3, [r2, #12]
 80048b2:	e011      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	2101      	movs	r1, #1
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 f899 	bl	80049fc <RCCEx_PLLSAI1_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ce:	7cfb      	ldrb	r3, [r7, #19]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d02b      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f2:	4908      	ldr	r1, [pc, #32]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004902:	d109      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004904:	4b03      	ldr	r3, [pc, #12]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4a02      	ldr	r2, [pc, #8]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490e:	60d3      	str	r3, [r2, #12]
 8004910:	e014      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004920:	d10c      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3304      	adds	r3, #4
 8004926:	2101      	movs	r1, #1
 8004928:	4618      	mov	r0, r3
 800492a:	f000 f867 	bl	80049fc <RCCEx_PLLSAI1_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02f      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004948:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004956:	4928      	ldr	r1, [pc, #160]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004966:	d10d      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	2102      	movs	r1, #2
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f844 	bl	80049fc <RCCEx_PLLSAI1_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004978:	7cfb      	ldrb	r3, [r7, #19]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d014      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	74bb      	strb	r3, [r7, #18]
 8004982:	e011      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800498c:	d10c      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3320      	adds	r3, #32
 8004992:	2102      	movs	r1, #2
 8004994:	4618      	mov	r0, r3
 8004996:	f000 f925 	bl	8004be4 <RCCEx_PLLSAI2_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049a4:	7cfb      	ldrb	r3, [r7, #19]
 80049a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049b4:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c2:	490d      	ldr	r1, [pc, #52]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049d6:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049e6:	4904      	ldr	r1, [pc, #16]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40021000 	.word	0x40021000

080049fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a0a:	4b75      	ldr	r3, [pc, #468]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d018      	beq.n	8004a48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a16:	4b72      	ldr	r3, [pc, #456]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0203 	and.w	r2, r3, #3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d10d      	bne.n	8004a42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
       ||
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a2e:	4b6c      	ldr	r3, [pc, #432]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	091b      	lsrs	r3, r3, #4
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d047      	beq.n	8004ad2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
 8004a46:	e044      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d018      	beq.n	8004a82 <RCCEx_PLLSAI1_Config+0x86>
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d825      	bhi.n	8004aa0 <RCCEx_PLLSAI1_Config+0xa4>
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d002      	beq.n	8004a5e <RCCEx_PLLSAI1_Config+0x62>
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d009      	beq.n	8004a70 <RCCEx_PLLSAI1_Config+0x74>
 8004a5c:	e020      	b.n	8004aa0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a5e:	4b60      	ldr	r3, [pc, #384]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d11d      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a6e:	e01a      	b.n	8004aa6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a70:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d116      	bne.n	8004aaa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a80:	e013      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a82:	4b57      	ldr	r3, [pc, #348]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a8e:	4b54      	ldr	r3, [pc, #336]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a9e:	e006      	b.n	8004aae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa4:	e004      	b.n	8004ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e002      	b.n	8004ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aaa:	bf00      	nop
 8004aac:	e000      	b.n	8004ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10d      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ab6:	4b4a      	ldr	r3, [pc, #296]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	430b      	orrs	r3, r1
 8004acc:	4944      	ldr	r1, [pc, #272]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d17d      	bne.n	8004bd4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ad8:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a40      	ldr	r2, [pc, #256]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ade:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae4:	f7fd f8a8 	bl	8001c38 <HAL_GetTick>
 8004ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004aea:	e009      	b.n	8004b00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aec:	f7fd f8a4 	bl	8001c38 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d902      	bls.n	8004b00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	73fb      	strb	r3, [r7, #15]
        break;
 8004afe:	e005      	b.n	8004b0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b00:	4b37      	ldr	r3, [pc, #220]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1ef      	bne.n	8004aec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d160      	bne.n	8004bd4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d111      	bne.n	8004b3c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b18:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6892      	ldr	r2, [r2, #8]
 8004b28:	0211      	lsls	r1, r2, #8
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68d2      	ldr	r2, [r2, #12]
 8004b2e:	0912      	lsrs	r2, r2, #4
 8004b30:	0452      	lsls	r2, r2, #17
 8004b32:	430a      	orrs	r2, r1
 8004b34:	492a      	ldr	r1, [pc, #168]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	610b      	str	r3, [r1, #16]
 8004b3a:	e027      	b.n	8004b8c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d112      	bne.n	8004b68 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b42:	4b27      	ldr	r3, [pc, #156]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6892      	ldr	r2, [r2, #8]
 8004b52:	0211      	lsls	r1, r2, #8
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6912      	ldr	r2, [r2, #16]
 8004b58:	0852      	lsrs	r2, r2, #1
 8004b5a:	3a01      	subs	r2, #1
 8004b5c:	0552      	lsls	r2, r2, #21
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	491f      	ldr	r1, [pc, #124]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	610b      	str	r3, [r1, #16]
 8004b66:	e011      	b.n	8004b8c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6892      	ldr	r2, [r2, #8]
 8004b78:	0211      	lsls	r1, r2, #8
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6952      	ldr	r2, [r2, #20]
 8004b7e:	0852      	lsrs	r2, r2, #1
 8004b80:	3a01      	subs	r2, #1
 8004b82:	0652      	lsls	r2, r2, #25
 8004b84:	430a      	orrs	r2, r1
 8004b86:	4916      	ldr	r1, [pc, #88]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b8c:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b98:	f7fd f84e 	bl	8001c38 <HAL_GetTick>
 8004b9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b9e:	e009      	b.n	8004bb4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ba0:	f7fd f84a 	bl	8001c38 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d902      	bls.n	8004bb4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	73fb      	strb	r3, [r7, #15]
          break;
 8004bb2:	e005      	b.n	8004bc0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0ef      	beq.n	8004ba0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	4904      	ldr	r1, [pc, #16]	; (8004be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000

08004be4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bf2:	4b6a      	ldr	r3, [pc, #424]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d018      	beq.n	8004c30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004bfe:	4b67      	ldr	r3, [pc, #412]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0203 	and.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d10d      	bne.n	8004c2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
       ||
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c16:	4b61      	ldr	r3, [pc, #388]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
       ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d047      	beq.n	8004cba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	e044      	b.n	8004cba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d018      	beq.n	8004c6a <RCCEx_PLLSAI2_Config+0x86>
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d825      	bhi.n	8004c88 <RCCEx_PLLSAI2_Config+0xa4>
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d002      	beq.n	8004c46 <RCCEx_PLLSAI2_Config+0x62>
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d009      	beq.n	8004c58 <RCCEx_PLLSAI2_Config+0x74>
 8004c44:	e020      	b.n	8004c88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c46:	4b55      	ldr	r3, [pc, #340]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d11d      	bne.n	8004c8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c56:	e01a      	b.n	8004c8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c58:	4b50      	ldr	r3, [pc, #320]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d116      	bne.n	8004c92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c68:	e013      	b.n	8004c92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c6a:	4b4c      	ldr	r3, [pc, #304]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10f      	bne.n	8004c96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c76:	4b49      	ldr	r3, [pc, #292]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c86:	e006      	b.n	8004c96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	e004      	b.n	8004c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e002      	b.n	8004c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c92:	bf00      	nop
 8004c94:	e000      	b.n	8004c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c9e:	4b3f      	ldr	r3, [pc, #252]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	4939      	ldr	r1, [pc, #228]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d167      	bne.n	8004d90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004cc0:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a35      	ldr	r2, [pc, #212]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ccc:	f7fc ffb4 	bl	8001c38 <HAL_GetTick>
 8004cd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cd2:	e009      	b.n	8004ce8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cd4:	f7fc ffb0 	bl	8001c38 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d902      	bls.n	8004ce8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ce6:	e005      	b.n	8004cf4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ce8:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ef      	bne.n	8004cd4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d14a      	bne.n	8004d90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d111      	bne.n	8004d24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d00:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6892      	ldr	r2, [r2, #8]
 8004d10:	0211      	lsls	r1, r2, #8
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68d2      	ldr	r2, [r2, #12]
 8004d16:	0912      	lsrs	r2, r2, #4
 8004d18:	0452      	lsls	r2, r2, #17
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	491f      	ldr	r1, [pc, #124]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	614b      	str	r3, [r1, #20]
 8004d22:	e011      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d24:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6892      	ldr	r2, [r2, #8]
 8004d34:	0211      	lsls	r1, r2, #8
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6912      	ldr	r2, [r2, #16]
 8004d3a:	0852      	lsrs	r2, r2, #1
 8004d3c:	3a01      	subs	r2, #1
 8004d3e:	0652      	lsls	r2, r2, #25
 8004d40:	430a      	orrs	r2, r1
 8004d42:	4916      	ldr	r1, [pc, #88]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d48:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a13      	ldr	r2, [pc, #76]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fc ff70 	bl	8001c38 <HAL_GetTick>
 8004d58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d5a:	e009      	b.n	8004d70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d5c:	f7fc ff6c 	bl	8001c38 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d902      	bls.n	8004d70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d6e:	e005      	b.n	8004d7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ef      	beq.n	8004d5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d82:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	4904      	ldr	r1, [pc, #16]	; (8004d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000

08004da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e049      	b.n	8004e46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f841 	bl	8004e4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f000 fb84 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e049      	b.n	8004f08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f841 	bl	8004f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f000 fb23 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <HAL_TIM_PWM_Start+0x24>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	e03c      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x9e>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d109      	bne.n	8004f62 <HAL_TIM_PWM_Start+0x3e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	bf14      	ite	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	2300      	moveq	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	e02f      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x9e>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d109      	bne.n	8004f7c <HAL_TIM_PWM_Start+0x58>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e022      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x9e>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	d109      	bne.n	8004f96 <HAL_TIM_PWM_Start+0x72>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	bf14      	ite	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	2300      	moveq	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	e015      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x9e>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d109      	bne.n	8004fb0 <HAL_TIM_PWM_Start+0x8c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e008      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x9e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e09c      	b.n	8005104 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start+0xb6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd8:	e023      	b.n	8005022 <HAL_TIM_PWM_Start+0xfe>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start+0xc6>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe8:	e01b      	b.n	8005022 <HAL_TIM_PWM_Start+0xfe>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start+0xd6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff8:	e013      	b.n	8005022 <HAL_TIM_PWM_Start+0xfe>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b0c      	cmp	r3, #12
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start+0xe6>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005008:	e00b      	b.n	8005022 <HAL_TIM_PWM_Start+0xfe>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b10      	cmp	r3, #16
 800500e:	d104      	bne.n	800501a <HAL_TIM_PWM_Start+0xf6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005018:	e003      	b.n	8005022 <HAL_TIM_PWM_Start+0xfe>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2201      	movs	r2, #1
 8005028:	6839      	ldr	r1, [r7, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fe68 	bl	8005d00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a35      	ldr	r2, [pc, #212]	; (800510c <HAL_TIM_PWM_Start+0x1e8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <HAL_TIM_PWM_Start+0x13e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a34      	ldr	r2, [pc, #208]	; (8005110 <HAL_TIM_PWM_Start+0x1ec>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00e      	beq.n	8005062 <HAL_TIM_PWM_Start+0x13e>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a32      	ldr	r2, [pc, #200]	; (8005114 <HAL_TIM_PWM_Start+0x1f0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d009      	beq.n	8005062 <HAL_TIM_PWM_Start+0x13e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a31      	ldr	r2, [pc, #196]	; (8005118 <HAL_TIM_PWM_Start+0x1f4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_TIM_PWM_Start+0x13e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a2f      	ldr	r2, [pc, #188]	; (800511c <HAL_TIM_PWM_Start+0x1f8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d101      	bne.n	8005066 <HAL_TIM_PWM_Start+0x142>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <HAL_TIM_PWM_Start+0x144>
 8005066:	2300      	movs	r3, #0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800507a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a22      	ldr	r2, [pc, #136]	; (800510c <HAL_TIM_PWM_Start+0x1e8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01d      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x19e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508e:	d018      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x19e>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a22      	ldr	r2, [pc, #136]	; (8005120 <HAL_TIM_PWM_Start+0x1fc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x19e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a21      	ldr	r2, [pc, #132]	; (8005124 <HAL_TIM_PWM_Start+0x200>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00e      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x19e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <HAL_TIM_PWM_Start+0x204>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x19e>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a17      	ldr	r2, [pc, #92]	; (8005110 <HAL_TIM_PWM_Start+0x1ec>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x19e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a15      	ldr	r2, [pc, #84]	; (8005114 <HAL_TIM_PWM_Start+0x1f0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d115      	bne.n	80050ee <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	4b18      	ldr	r3, [pc, #96]	; (800512c <HAL_TIM_PWM_Start+0x208>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b06      	cmp	r3, #6
 80050d2:	d015      	beq.n	8005100 <HAL_TIM_PWM_Start+0x1dc>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050da:	d011      	beq.n	8005100 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ec:	e008      	b.n	8005100 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e000      	b.n	8005102 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005100:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40013400 	.word	0x40013400
 8005114:	40014000 	.word	0x40014000
 8005118:	40014400 	.word	0x40014400
 800511c:	40014800 	.word	0x40014800
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800
 8005128:	40000c00 	.word	0x40000c00
 800512c:	00010007 	.word	0x00010007

08005130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800514a:	2302      	movs	r3, #2
 800514c:	e0ff      	b.n	800534e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b14      	cmp	r3, #20
 800515a:	f200 80f0 	bhi.w	800533e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	080051b9 	.word	0x080051b9
 8005168:	0800533f 	.word	0x0800533f
 800516c:	0800533f 	.word	0x0800533f
 8005170:	0800533f 	.word	0x0800533f
 8005174:	080051f9 	.word	0x080051f9
 8005178:	0800533f 	.word	0x0800533f
 800517c:	0800533f 	.word	0x0800533f
 8005180:	0800533f 	.word	0x0800533f
 8005184:	0800523b 	.word	0x0800523b
 8005188:	0800533f 	.word	0x0800533f
 800518c:	0800533f 	.word	0x0800533f
 8005190:	0800533f 	.word	0x0800533f
 8005194:	0800527b 	.word	0x0800527b
 8005198:	0800533f 	.word	0x0800533f
 800519c:	0800533f 	.word	0x0800533f
 80051a0:	0800533f 	.word	0x0800533f
 80051a4:	080052bd 	.word	0x080052bd
 80051a8:	0800533f 	.word	0x0800533f
 80051ac:	0800533f 	.word	0x0800533f
 80051b0:	0800533f 	.word	0x0800533f
 80051b4:	080052fd 	.word	0x080052fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fa2e 	bl	8005620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0204 	bic.w	r2, r2, #4
 80051e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6999      	ldr	r1, [r3, #24]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	619a      	str	r2, [r3, #24]
      break;
 80051f6:	e0a5      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fa9e 	bl	8005740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6999      	ldr	r1, [r3, #24]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	021a      	lsls	r2, r3, #8
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	619a      	str	r2, [r3, #24]
      break;
 8005238:	e084      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fb07 	bl	8005854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0208 	orr.w	r2, r2, #8
 8005254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0204 	bic.w	r2, r2, #4
 8005264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69d9      	ldr	r1, [r3, #28]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	61da      	str	r2, [r3, #28]
      break;
 8005278:	e064      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fb6f 	bl	8005964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69d9      	ldr	r1, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	021a      	lsls	r2, r3, #8
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	61da      	str	r2, [r3, #28]
      break;
 80052ba:	e043      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fbb8 	bl	8005a38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0208 	orr.w	r2, r2, #8
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0204 	bic.w	r2, r2, #4
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052fa:	e023      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fbfc 	bl	8005b00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005316:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005326:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800533c:	e002      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
      break;
 8005342:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800534c:	7dfb      	ldrb	r3, [r7, #23]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop

08005358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_TIM_ConfigClockSource+0x1c>
 8005370:	2302      	movs	r3, #2
 8005372:	e0b6      	b.n	80054e2 <HAL_TIM_ConfigClockSource+0x18a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005392:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800539e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b0:	d03e      	beq.n	8005430 <HAL_TIM_ConfigClockSource+0xd8>
 80053b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b6:	f200 8087 	bhi.w	80054c8 <HAL_TIM_ConfigClockSource+0x170>
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053be:	f000 8086 	beq.w	80054ce <HAL_TIM_ConfigClockSource+0x176>
 80053c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c6:	d87f      	bhi.n	80054c8 <HAL_TIM_ConfigClockSource+0x170>
 80053c8:	2b70      	cmp	r3, #112	; 0x70
 80053ca:	d01a      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0xaa>
 80053cc:	2b70      	cmp	r3, #112	; 0x70
 80053ce:	d87b      	bhi.n	80054c8 <HAL_TIM_ConfigClockSource+0x170>
 80053d0:	2b60      	cmp	r3, #96	; 0x60
 80053d2:	d050      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x11e>
 80053d4:	2b60      	cmp	r3, #96	; 0x60
 80053d6:	d877      	bhi.n	80054c8 <HAL_TIM_ConfigClockSource+0x170>
 80053d8:	2b50      	cmp	r3, #80	; 0x50
 80053da:	d03c      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0xfe>
 80053dc:	2b50      	cmp	r3, #80	; 0x50
 80053de:	d873      	bhi.n	80054c8 <HAL_TIM_ConfigClockSource+0x170>
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d058      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0x13e>
 80053e4:	2b40      	cmp	r3, #64	; 0x40
 80053e6:	d86f      	bhi.n	80054c8 <HAL_TIM_ConfigClockSource+0x170>
 80053e8:	2b30      	cmp	r3, #48	; 0x30
 80053ea:	d064      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0x15e>
 80053ec:	2b30      	cmp	r3, #48	; 0x30
 80053ee:	d86b      	bhi.n	80054c8 <HAL_TIM_ConfigClockSource+0x170>
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d060      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0x15e>
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d867      	bhi.n	80054c8 <HAL_TIM_ConfigClockSource+0x170>
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d05c      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0x15e>
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d05a      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0x15e>
 8005400:	e062      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6899      	ldr	r1, [r3, #8]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f000 fc55 	bl	8005cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005424:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	609a      	str	r2, [r3, #8]
      break;
 800542e:	e04f      	b.n	80054d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	6899      	ldr	r1, [r3, #8]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f000 fc3e 	bl	8005cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005452:	609a      	str	r2, [r3, #8]
      break;
 8005454:	e03c      	b.n	80054d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6859      	ldr	r1, [r3, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	461a      	mov	r2, r3
 8005464:	f000 fbb2 	bl	8005bcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2150      	movs	r1, #80	; 0x50
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fc0b 	bl	8005c8a <TIM_ITRx_SetConfig>
      break;
 8005474:	e02c      	b.n	80054d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	461a      	mov	r2, r3
 8005484:	f000 fbd1 	bl	8005c2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2160      	movs	r1, #96	; 0x60
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fbfb 	bl	8005c8a <TIM_ITRx_SetConfig>
      break;
 8005494:	e01c      	b.n	80054d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6859      	ldr	r1, [r3, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f000 fb92 	bl	8005bcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2140      	movs	r1, #64	; 0x40
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fbeb 	bl	8005c8a <TIM_ITRx_SetConfig>
      break;
 80054b4:	e00c      	b.n	80054d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f000 fbe2 	bl	8005c8a <TIM_ITRx_SetConfig>
      break;
 80054c6:	e003      	b.n	80054d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
      break;
 80054cc:	e000      	b.n	80054d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80054ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a40      	ldr	r2, [pc, #256]	; (8005600 <TIM_Base_SetConfig+0x114>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550a:	d00f      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a3d      	ldr	r2, [pc, #244]	; (8005604 <TIM_Base_SetConfig+0x118>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00b      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3c      	ldr	r2, [pc, #240]	; (8005608 <TIM_Base_SetConfig+0x11c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3b      	ldr	r2, [pc, #236]	; (800560c <TIM_Base_SetConfig+0x120>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a3a      	ldr	r2, [pc, #232]	; (8005610 <TIM_Base_SetConfig+0x124>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d108      	bne.n	800553e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a2f      	ldr	r2, [pc, #188]	; (8005600 <TIM_Base_SetConfig+0x114>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01f      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554c:	d01b      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2c      	ldr	r2, [pc, #176]	; (8005604 <TIM_Base_SetConfig+0x118>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d017      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2b      	ldr	r2, [pc, #172]	; (8005608 <TIM_Base_SetConfig+0x11c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2a      	ldr	r2, [pc, #168]	; (800560c <TIM_Base_SetConfig+0x120>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a29      	ldr	r2, [pc, #164]	; (8005610 <TIM_Base_SetConfig+0x124>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a28      	ldr	r2, [pc, #160]	; (8005614 <TIM_Base_SetConfig+0x128>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a27      	ldr	r2, [pc, #156]	; (8005618 <TIM_Base_SetConfig+0x12c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a26      	ldr	r2, [pc, #152]	; (800561c <TIM_Base_SetConfig+0x130>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a10      	ldr	r2, [pc, #64]	; (8005600 <TIM_Base_SetConfig+0x114>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00f      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a12      	ldr	r2, [pc, #72]	; (8005610 <TIM_Base_SetConfig+0x124>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a11      	ldr	r2, [pc, #68]	; (8005614 <TIM_Base_SetConfig+0x128>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a10      	ldr	r2, [pc, #64]	; (8005618 <TIM_Base_SetConfig+0x12c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_Base_SetConfig+0xf8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a0f      	ldr	r2, [pc, #60]	; (800561c <TIM_Base_SetConfig+0x130>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d103      	bne.n	80055ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	615a      	str	r2, [r3, #20]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40000400 	.word	0x40000400
 8005608:	40000800 	.word	0x40000800
 800560c:	40000c00 	.word	0x40000c00
 8005610:	40013400 	.word	0x40013400
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800

08005620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0201 	bic.w	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0303 	bic.w	r3, r3, #3
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 0302 	bic.w	r3, r3, #2
 800566c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a2c      	ldr	r2, [pc, #176]	; (800572c <TIM_OC1_SetConfig+0x10c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00f      	beq.n	80056a0 <TIM_OC1_SetConfig+0x80>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a2b      	ldr	r2, [pc, #172]	; (8005730 <TIM_OC1_SetConfig+0x110>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00b      	beq.n	80056a0 <TIM_OC1_SetConfig+0x80>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <TIM_OC1_SetConfig+0x114>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_OC1_SetConfig+0x80>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a29      	ldr	r2, [pc, #164]	; (8005738 <TIM_OC1_SetConfig+0x118>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_OC1_SetConfig+0x80>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a28      	ldr	r2, [pc, #160]	; (800573c <TIM_OC1_SetConfig+0x11c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d10c      	bne.n	80056ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f023 0308 	bic.w	r3, r3, #8
 80056a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f023 0304 	bic.w	r3, r3, #4
 80056b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1b      	ldr	r2, [pc, #108]	; (800572c <TIM_OC1_SetConfig+0x10c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00f      	beq.n	80056e2 <TIM_OC1_SetConfig+0xc2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a1a      	ldr	r2, [pc, #104]	; (8005730 <TIM_OC1_SetConfig+0x110>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00b      	beq.n	80056e2 <TIM_OC1_SetConfig+0xc2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a19      	ldr	r2, [pc, #100]	; (8005734 <TIM_OC1_SetConfig+0x114>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d007      	beq.n	80056e2 <TIM_OC1_SetConfig+0xc2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a18      	ldr	r2, [pc, #96]	; (8005738 <TIM_OC1_SetConfig+0x118>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d003      	beq.n	80056e2 <TIM_OC1_SetConfig+0xc2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a17      	ldr	r2, [pc, #92]	; (800573c <TIM_OC1_SetConfig+0x11c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d111      	bne.n	8005706 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	621a      	str	r2, [r3, #32]
}
 8005720:	bf00      	nop
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40013400 	.word	0x40013400
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800

08005740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f023 0210 	bic.w	r2, r3, #16
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800576e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f023 0320 	bic.w	r3, r3, #32
 800578e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a28      	ldr	r2, [pc, #160]	; (8005840 <TIM_OC2_SetConfig+0x100>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_OC2_SetConfig+0x6c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a27      	ldr	r2, [pc, #156]	; (8005844 <TIM_OC2_SetConfig+0x104>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d10d      	bne.n	80057c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a1d      	ldr	r2, [pc, #116]	; (8005840 <TIM_OC2_SetConfig+0x100>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00f      	beq.n	80057f0 <TIM_OC2_SetConfig+0xb0>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a1c      	ldr	r2, [pc, #112]	; (8005844 <TIM_OC2_SetConfig+0x104>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00b      	beq.n	80057f0 <TIM_OC2_SetConfig+0xb0>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a1b      	ldr	r2, [pc, #108]	; (8005848 <TIM_OC2_SetConfig+0x108>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d007      	beq.n	80057f0 <TIM_OC2_SetConfig+0xb0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a1a      	ldr	r2, [pc, #104]	; (800584c <TIM_OC2_SetConfig+0x10c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_OC2_SetConfig+0xb0>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a19      	ldr	r2, [pc, #100]	; (8005850 <TIM_OC2_SetConfig+0x110>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d113      	bne.n	8005818 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40013400 	.word	0x40013400
 8005848:	40014000 	.word	0x40014000
 800584c:	40014400 	.word	0x40014400
 8005850:	40014800 	.word	0x40014800

08005854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0303 	bic.w	r3, r3, #3
 800588e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a27      	ldr	r2, [pc, #156]	; (8005950 <TIM_OC3_SetConfig+0xfc>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d003      	beq.n	80058be <TIM_OC3_SetConfig+0x6a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a26      	ldr	r2, [pc, #152]	; (8005954 <TIM_OC3_SetConfig+0x100>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d10d      	bne.n	80058da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	021b      	lsls	r3, r3, #8
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1c      	ldr	r2, [pc, #112]	; (8005950 <TIM_OC3_SetConfig+0xfc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00f      	beq.n	8005902 <TIM_OC3_SetConfig+0xae>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a1b      	ldr	r2, [pc, #108]	; (8005954 <TIM_OC3_SetConfig+0x100>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00b      	beq.n	8005902 <TIM_OC3_SetConfig+0xae>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1a      	ldr	r2, [pc, #104]	; (8005958 <TIM_OC3_SetConfig+0x104>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d007      	beq.n	8005902 <TIM_OC3_SetConfig+0xae>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a19      	ldr	r2, [pc, #100]	; (800595c <TIM_OC3_SetConfig+0x108>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_OC3_SetConfig+0xae>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a18      	ldr	r2, [pc, #96]	; (8005960 <TIM_OC3_SetConfig+0x10c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d113      	bne.n	800592a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	621a      	str	r2, [r3, #32]
}
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40013400 	.word	0x40013400
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800

08005964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	031b      	lsls	r3, r3, #12
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a18      	ldr	r2, [pc, #96]	; (8005a24 <TIM_OC4_SetConfig+0xc0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00f      	beq.n	80059e8 <TIM_OC4_SetConfig+0x84>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a17      	ldr	r2, [pc, #92]	; (8005a28 <TIM_OC4_SetConfig+0xc4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00b      	beq.n	80059e8 <TIM_OC4_SetConfig+0x84>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a16      	ldr	r2, [pc, #88]	; (8005a2c <TIM_OC4_SetConfig+0xc8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d007      	beq.n	80059e8 <TIM_OC4_SetConfig+0x84>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <TIM_OC4_SetConfig+0xcc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC4_SetConfig+0x84>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <TIM_OC4_SetConfig+0xd0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d109      	bne.n	80059fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	019b      	lsls	r3, r3, #6
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40013400 	.word	0x40013400
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	40014400 	.word	0x40014400
 8005a34:	40014800 	.word	0x40014800

08005a38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	041b      	lsls	r3, r3, #16
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a17      	ldr	r2, [pc, #92]	; (8005aec <TIM_OC5_SetConfig+0xb4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00f      	beq.n	8005ab2 <TIM_OC5_SetConfig+0x7a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <TIM_OC5_SetConfig+0xb8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00b      	beq.n	8005ab2 <TIM_OC5_SetConfig+0x7a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a15      	ldr	r2, [pc, #84]	; (8005af4 <TIM_OC5_SetConfig+0xbc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d007      	beq.n	8005ab2 <TIM_OC5_SetConfig+0x7a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a14      	ldr	r2, [pc, #80]	; (8005af8 <TIM_OC5_SetConfig+0xc0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <TIM_OC5_SetConfig+0x7a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a13      	ldr	r2, [pc, #76]	; (8005afc <TIM_OC5_SetConfig+0xc4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d109      	bne.n	8005ac6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	021b      	lsls	r3, r3, #8
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	621a      	str	r2, [r3, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40013400 	.word	0x40013400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40014400 	.word	0x40014400
 8005afc:	40014800 	.word	0x40014800

08005b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	051b      	lsls	r3, r3, #20
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <TIM_OC6_SetConfig+0xb8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00f      	beq.n	8005b7c <TIM_OC6_SetConfig+0x7c>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <TIM_OC6_SetConfig+0xbc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <TIM_OC6_SetConfig+0x7c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a16      	ldr	r2, [pc, #88]	; (8005bc0 <TIM_OC6_SetConfig+0xc0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <TIM_OC6_SetConfig+0x7c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <TIM_OC6_SetConfig+0xc4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_OC6_SetConfig+0x7c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a14      	ldr	r2, [pc, #80]	; (8005bc8 <TIM_OC6_SetConfig+0xc8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d109      	bne.n	8005b90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	029b      	lsls	r3, r3, #10
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40012c00 	.word	0x40012c00
 8005bbc:	40013400 	.word	0x40013400
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40014400 	.word	0x40014400
 8005bc8:	40014800 	.word	0x40014800

08005bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f023 0201 	bic.w	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f023 030a 	bic.w	r3, r3, #10
 8005c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	621a      	str	r2, [r3, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b087      	sub	sp, #28
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 0210 	bic.w	r2, r3, #16
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	031b      	lsls	r3, r3, #12
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f043 0307 	orr.w	r3, r3, #7
 8005cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	609a      	str	r2, [r3, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	021a      	lsls	r2, r3, #8
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	609a      	str	r2, [r3, #8]
}
 8005cf4:	bf00      	nop
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	2201      	movs	r2, #1
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1a      	ldr	r2, [r3, #32]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	401a      	ands	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1a      	ldr	r2, [r3, #32]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	fa01 f303 	lsl.w	r3, r1, r3
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e040      	b.n	8005dde <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f83a 	bl	8005de6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2224      	movs	r2, #36	; 0x24
 8005d76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0201 	bic.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fc23 	bl	80065d4 <UART_SetConfig>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e022      	b.n	8005dde <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fecf 	bl	8006b44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005db4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0201 	orr.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 ff56 	bl	8006c88 <UART_CheckIdleState>
 8005ddc:	4603      	mov	r3, r0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b08a      	sub	sp, #40	; 0x28
 8005dfe:	af02      	add	r7, sp, #8
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	603b      	str	r3, [r7, #0]
 8005e06:	4613      	mov	r3, r2
 8005e08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	f040 8082 	bne.w	8005f18 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_UART_Transmit+0x26>
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e07a      	b.n	8005f1a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_UART_Transmit+0x38>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e073      	b.n	8005f1a <HAL_UART_Transmit+0x120>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2221      	movs	r2, #33	; 0x21
 8005e46:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e48:	f7fb fef6 	bl	8001c38 <HAL_GetTick>
 8005e4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	88fa      	ldrh	r2, [r7, #6]
 8005e52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e66:	d108      	bne.n	8005e7a <HAL_UART_Transmit+0x80>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	61bb      	str	r3, [r7, #24]
 8005e78:	e003      	b.n	8005e82 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005e8a:	e02d      	b.n	8005ee8 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2200      	movs	r2, #0
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 ff3f 	bl	8006d1a <UART_WaitOnFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e039      	b.n	8005f1a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	881a      	ldrh	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eb8:	b292      	uxth	r2, r2
 8005eba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	e008      	b.n	8005ed6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	781a      	ldrb	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	b292      	uxth	r2, r2
 8005ece:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1cb      	bne.n	8005e8c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2200      	movs	r2, #0
 8005efc:	2140      	movs	r1, #64	; 0x40
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 ff0b 	bl	8006d1a <UART_WaitOnFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e005      	b.n	8005f1a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2220      	movs	r2, #32
 8005f12:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	e000      	b.n	8005f1a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005f18:	2302      	movs	r3, #2
  }
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3720      	adds	r7, #32
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	; 0x28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	d142      	bne.n	8005fc0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_UART_Receive_IT+0x22>
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e03b      	b.n	8005fc2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_UART_Receive_IT+0x34>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e034      	b.n	8005fc2 <HAL_UART_Receive_IT+0x9e>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a18      	ldr	r2, [pc, #96]	; (8005fcc <HAL_UART_Receive_IT+0xa8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d01f      	beq.n	8005fb0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d018      	beq.n	8005fb0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	623b      	str	r3, [r7, #32]
 8005f9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	69f9      	ldr	r1, [r7, #28]
 8005fa2:	6a3a      	ldr	r2, [r7, #32]
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e6      	bne.n	8005f7e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 ff74 	bl	8006ea4 <UART_Start_Receive_IT>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	e000      	b.n	8005fc2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005fc0:	2302      	movs	r3, #2
  }
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3728      	adds	r7, #40	; 0x28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	40008000 	.word	0x40008000

08005fd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b0ba      	sub	sp, #232	; 0xe8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ff6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ffa:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ffe:	4013      	ands	r3, r2
 8006000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006008:	2b00      	cmp	r3, #0
 800600a:	d115      	bne.n	8006038 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800600c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00f      	beq.n	8006038 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d009      	beq.n	8006038 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 82a6 	beq.w	800657a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4798      	blx	r3
      }
      return;
 8006036:	e2a0      	b.n	800657a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8117 	beq.w	8006270 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800604e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006052:	4b85      	ldr	r3, [pc, #532]	; (8006268 <HAL_UART_IRQHandler+0x298>)
 8006054:	4013      	ands	r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 810a 	beq.w	8006270 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800605c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d011      	beq.n	800608c <HAL_UART_IRQHandler+0xbc>
 8006068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800606c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00b      	beq.n	800608c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2201      	movs	r2, #1
 800607a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006082:	f043 0201 	orr.w	r2, r3, #1
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800608c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d011      	beq.n	80060bc <HAL_UART_IRQHandler+0xec>
 8006098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00b      	beq.n	80060bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2202      	movs	r2, #2
 80060aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b2:	f043 0204 	orr.w	r2, r3, #4
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d011      	beq.n	80060ec <HAL_UART_IRQHandler+0x11c>
 80060c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00b      	beq.n	80060ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2204      	movs	r2, #4
 80060da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060e2:	f043 0202 	orr.w	r2, r3, #2
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d017      	beq.n	8006128 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006108:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00b      	beq.n	8006128 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2208      	movs	r2, #8
 8006116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800611e:	f043 0208 	orr.w	r2, r3, #8
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006130:	2b00      	cmp	r3, #0
 8006132:	d012      	beq.n	800615a <HAL_UART_IRQHandler+0x18a>
 8006134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006138:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00c      	beq.n	800615a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 820c 	beq.w	800657e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00d      	beq.n	800618e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d007      	beq.n	800618e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006194:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d005      	beq.n	80061b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d04f      	beq.n	8006252 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 ff40 	bl	8007038 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d141      	bne.n	800624a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3308      	adds	r3, #8
 80061cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3308      	adds	r3, #8
 80061ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800620a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1d9      	bne.n	80061c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	2b00      	cmp	r3, #0
 8006218:	d013      	beq.n	8006242 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	4a13      	ldr	r2, [pc, #76]	; (800626c <HAL_UART_IRQHandler+0x29c>)
 8006220:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006226:	4618      	mov	r0, r3
 8006228:	f7fd f87f 	bl	800332a <HAL_DMA_Abort_IT>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d017      	beq.n	8006262 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800623c:	4610      	mov	r0, r2
 800623e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006240:	e00f      	b.n	8006262 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f9b0 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006248:	e00b      	b.n	8006262 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f9ac 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006250:	e007      	b.n	8006262 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f9a8 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006260:	e18d      	b.n	800657e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006262:	bf00      	nop
    return;
 8006264:	e18b      	b.n	800657e <HAL_UART_IRQHandler+0x5ae>
 8006266:	bf00      	nop
 8006268:	04000120 	.word	0x04000120
 800626c:	080070ff 	.word	0x080070ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006274:	2b01      	cmp	r3, #1
 8006276:	f040 8146 	bne.w	8006506 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800627a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 813f 	beq.w	8006506 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 8138 	beq.w	8006506 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2210      	movs	r2, #16
 800629c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b40      	cmp	r3, #64	; 0x40
 80062aa:	f040 80b4 	bne.w	8006416 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 815f 	beq.w	8006582 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ce:	429a      	cmp	r2, r3
 80062d0:	f080 8157 	bcs.w	8006582 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f040 8085 	bne.w	80063fa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800630c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800631a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800631e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006326:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1da      	bne.n	80062f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3308      	adds	r3, #8
 8006340:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800634a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800635e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006362:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006366:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e1      	bne.n	800633a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800638c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3308      	adds	r3, #8
 8006396:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800639a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800639c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e3      	bne.n	8006376 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ca:	f023 0310 	bic.w	r3, r3, #16
 80063ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80063de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e4      	bne.n	80063ba <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fc ff5a 	bl	80032ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006406:	b29b      	uxth	r3, r3
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	b29b      	uxth	r3, r3
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8d4 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006414:	e0b5      	b.n	8006582 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006422:	b29b      	uxth	r3, r3
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 80a7 	beq.w	8006586 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80a2 	beq.w	8006586 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006452:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006464:	647b      	str	r3, [r7, #68]	; 0x44
 8006466:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800646a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e4      	bne.n	8006442 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3308      	adds	r3, #8
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	623b      	str	r3, [r7, #32]
   return(result);
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	f023 0301 	bic.w	r3, r3, #1
 800648e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3308      	adds	r3, #8
 8006498:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800649c:	633a      	str	r2, [r7, #48]	; 0x30
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e3      	bne.n	8006478 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0310 	bic.w	r3, r3, #16
 80064d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	69b9      	ldr	r1, [r7, #24]
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	617b      	str	r3, [r7, #20]
   return(result);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e4      	bne.n	80064c2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f85c 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006504:	e03f      	b.n	8006586 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800650a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00e      	beq.n	8006530 <HAL_UART_IRQHandler+0x560>
 8006512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006526:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 ff88 	bl	800743e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800652e:	e02d      	b.n	800658c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00e      	beq.n	800655a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800653c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006544:	2b00      	cmp	r3, #0
 8006546:	d008      	beq.n	800655a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01c      	beq.n	800658a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4798      	blx	r3
    }
    return;
 8006558:	e017      	b.n	800658a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800655a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d012      	beq.n	800658c <HAL_UART_IRQHandler+0x5bc>
 8006566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00c      	beq.n	800658c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fdd9 	bl	800712a <UART_EndTransmit_IT>
    return;
 8006578:	e008      	b.n	800658c <HAL_UART_IRQHandler+0x5bc>
      return;
 800657a:	bf00      	nop
 800657c:	e006      	b.n	800658c <HAL_UART_IRQHandler+0x5bc>
    return;
 800657e:	bf00      	nop
 8006580:	e004      	b.n	800658c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006582:	bf00      	nop
 8006584:	e002      	b.n	800658c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <HAL_UART_IRQHandler+0x5bc>
    return;
 800658a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800658c:	37e8      	adds	r7, #232	; 0xe8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop

08006594 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d8:	b08a      	sub	sp, #40	; 0x28
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4ba4      	ldr	r3, [pc, #656]	; (8006894 <UART_SetConfig+0x2c0>)
 8006604:	4013      	ands	r3, r2
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	6812      	ldr	r2, [r2, #0]
 800660a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800660c:	430b      	orrs	r3, r1
 800660e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a99      	ldr	r2, [pc, #612]	; (8006898 <UART_SetConfig+0x2c4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d004      	beq.n	8006640 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663c:	4313      	orrs	r3, r2
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006650:	430a      	orrs	r2, r1
 8006652:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a90      	ldr	r2, [pc, #576]	; (800689c <UART_SetConfig+0x2c8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d126      	bne.n	80066ac <UART_SetConfig+0xd8>
 800665e:	4b90      	ldr	r3, [pc, #576]	; (80068a0 <UART_SetConfig+0x2cc>)
 8006660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006664:	f003 0303 	and.w	r3, r3, #3
 8006668:	2b03      	cmp	r3, #3
 800666a:	d81b      	bhi.n	80066a4 <UART_SetConfig+0xd0>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <UART_SetConfig+0xa0>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	08006685 	.word	0x08006685
 8006678:	08006695 	.word	0x08006695
 800667c:	0800668d 	.word	0x0800668d
 8006680:	0800669d 	.word	0x0800669d
 8006684:	2301      	movs	r3, #1
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668a:	e116      	b.n	80068ba <UART_SetConfig+0x2e6>
 800668c:	2302      	movs	r3, #2
 800668e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006692:	e112      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006694:	2304      	movs	r3, #4
 8006696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800669a:	e10e      	b.n	80068ba <UART_SetConfig+0x2e6>
 800669c:	2308      	movs	r3, #8
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a2:	e10a      	b.n	80068ba <UART_SetConfig+0x2e6>
 80066a4:	2310      	movs	r3, #16
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066aa:	e106      	b.n	80068ba <UART_SetConfig+0x2e6>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a7c      	ldr	r2, [pc, #496]	; (80068a4 <UART_SetConfig+0x2d0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d138      	bne.n	8006728 <UART_SetConfig+0x154>
 80066b6:	4b7a      	ldr	r3, [pc, #488]	; (80068a0 <UART_SetConfig+0x2cc>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066bc:	f003 030c 	and.w	r3, r3, #12
 80066c0:	2b0c      	cmp	r3, #12
 80066c2:	d82d      	bhi.n	8006720 <UART_SetConfig+0x14c>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <UART_SetConfig+0xf8>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	08006701 	.word	0x08006701
 80066d0:	08006721 	.word	0x08006721
 80066d4:	08006721 	.word	0x08006721
 80066d8:	08006721 	.word	0x08006721
 80066dc:	08006711 	.word	0x08006711
 80066e0:	08006721 	.word	0x08006721
 80066e4:	08006721 	.word	0x08006721
 80066e8:	08006721 	.word	0x08006721
 80066ec:	08006709 	.word	0x08006709
 80066f0:	08006721 	.word	0x08006721
 80066f4:	08006721 	.word	0x08006721
 80066f8:	08006721 	.word	0x08006721
 80066fc:	08006719 	.word	0x08006719
 8006700:	2300      	movs	r3, #0
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006706:	e0d8      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006708:	2302      	movs	r3, #2
 800670a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670e:	e0d4      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006716:	e0d0      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671e:	e0cc      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006726:	e0c8      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a5e      	ldr	r2, [pc, #376]	; (80068a8 <UART_SetConfig+0x2d4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d125      	bne.n	800677e <UART_SetConfig+0x1aa>
 8006732:	4b5b      	ldr	r3, [pc, #364]	; (80068a0 <UART_SetConfig+0x2cc>)
 8006734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006738:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800673c:	2b30      	cmp	r3, #48	; 0x30
 800673e:	d016      	beq.n	800676e <UART_SetConfig+0x19a>
 8006740:	2b30      	cmp	r3, #48	; 0x30
 8006742:	d818      	bhi.n	8006776 <UART_SetConfig+0x1a2>
 8006744:	2b20      	cmp	r3, #32
 8006746:	d00a      	beq.n	800675e <UART_SetConfig+0x18a>
 8006748:	2b20      	cmp	r3, #32
 800674a:	d814      	bhi.n	8006776 <UART_SetConfig+0x1a2>
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <UART_SetConfig+0x182>
 8006750:	2b10      	cmp	r3, #16
 8006752:	d008      	beq.n	8006766 <UART_SetConfig+0x192>
 8006754:	e00f      	b.n	8006776 <UART_SetConfig+0x1a2>
 8006756:	2300      	movs	r3, #0
 8006758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675c:	e0ad      	b.n	80068ba <UART_SetConfig+0x2e6>
 800675e:	2302      	movs	r3, #2
 8006760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006764:	e0a9      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006766:	2304      	movs	r3, #4
 8006768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676c:	e0a5      	b.n	80068ba <UART_SetConfig+0x2e6>
 800676e:	2308      	movs	r3, #8
 8006770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006774:	e0a1      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006776:	2310      	movs	r3, #16
 8006778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677c:	e09d      	b.n	80068ba <UART_SetConfig+0x2e6>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a4a      	ldr	r2, [pc, #296]	; (80068ac <UART_SetConfig+0x2d8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d125      	bne.n	80067d4 <UART_SetConfig+0x200>
 8006788:	4b45      	ldr	r3, [pc, #276]	; (80068a0 <UART_SetConfig+0x2cc>)
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006792:	2bc0      	cmp	r3, #192	; 0xc0
 8006794:	d016      	beq.n	80067c4 <UART_SetConfig+0x1f0>
 8006796:	2bc0      	cmp	r3, #192	; 0xc0
 8006798:	d818      	bhi.n	80067cc <UART_SetConfig+0x1f8>
 800679a:	2b80      	cmp	r3, #128	; 0x80
 800679c:	d00a      	beq.n	80067b4 <UART_SetConfig+0x1e0>
 800679e:	2b80      	cmp	r3, #128	; 0x80
 80067a0:	d814      	bhi.n	80067cc <UART_SetConfig+0x1f8>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <UART_SetConfig+0x1d8>
 80067a6:	2b40      	cmp	r3, #64	; 0x40
 80067a8:	d008      	beq.n	80067bc <UART_SetConfig+0x1e8>
 80067aa:	e00f      	b.n	80067cc <UART_SetConfig+0x1f8>
 80067ac:	2300      	movs	r3, #0
 80067ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b2:	e082      	b.n	80068ba <UART_SetConfig+0x2e6>
 80067b4:	2302      	movs	r3, #2
 80067b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ba:	e07e      	b.n	80068ba <UART_SetConfig+0x2e6>
 80067bc:	2304      	movs	r3, #4
 80067be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c2:	e07a      	b.n	80068ba <UART_SetConfig+0x2e6>
 80067c4:	2308      	movs	r3, #8
 80067c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ca:	e076      	b.n	80068ba <UART_SetConfig+0x2e6>
 80067cc:	2310      	movs	r3, #16
 80067ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d2:	e072      	b.n	80068ba <UART_SetConfig+0x2e6>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a35      	ldr	r2, [pc, #212]	; (80068b0 <UART_SetConfig+0x2dc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d12a      	bne.n	8006834 <UART_SetConfig+0x260>
 80067de:	4b30      	ldr	r3, [pc, #192]	; (80068a0 <UART_SetConfig+0x2cc>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ec:	d01a      	beq.n	8006824 <UART_SetConfig+0x250>
 80067ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f2:	d81b      	bhi.n	800682c <UART_SetConfig+0x258>
 80067f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f8:	d00c      	beq.n	8006814 <UART_SetConfig+0x240>
 80067fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fe:	d815      	bhi.n	800682c <UART_SetConfig+0x258>
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <UART_SetConfig+0x238>
 8006804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006808:	d008      	beq.n	800681c <UART_SetConfig+0x248>
 800680a:	e00f      	b.n	800682c <UART_SetConfig+0x258>
 800680c:	2300      	movs	r3, #0
 800680e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006812:	e052      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006814:	2302      	movs	r3, #2
 8006816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681a:	e04e      	b.n	80068ba <UART_SetConfig+0x2e6>
 800681c:	2304      	movs	r3, #4
 800681e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006822:	e04a      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006824:	2308      	movs	r3, #8
 8006826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800682a:	e046      	b.n	80068ba <UART_SetConfig+0x2e6>
 800682c:	2310      	movs	r3, #16
 800682e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006832:	e042      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a17      	ldr	r2, [pc, #92]	; (8006898 <UART_SetConfig+0x2c4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d13a      	bne.n	80068b4 <UART_SetConfig+0x2e0>
 800683e:	4b18      	ldr	r3, [pc, #96]	; (80068a0 <UART_SetConfig+0x2cc>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006844:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006848:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800684c:	d01a      	beq.n	8006884 <UART_SetConfig+0x2b0>
 800684e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006852:	d81b      	bhi.n	800688c <UART_SetConfig+0x2b8>
 8006854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006858:	d00c      	beq.n	8006874 <UART_SetConfig+0x2a0>
 800685a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685e:	d815      	bhi.n	800688c <UART_SetConfig+0x2b8>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <UART_SetConfig+0x298>
 8006864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006868:	d008      	beq.n	800687c <UART_SetConfig+0x2a8>
 800686a:	e00f      	b.n	800688c <UART_SetConfig+0x2b8>
 800686c:	2300      	movs	r3, #0
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006872:	e022      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006874:	2302      	movs	r3, #2
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687a:	e01e      	b.n	80068ba <UART_SetConfig+0x2e6>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006882:	e01a      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800688a:	e016      	b.n	80068ba <UART_SetConfig+0x2e6>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006892:	e012      	b.n	80068ba <UART_SetConfig+0x2e6>
 8006894:	efff69f3 	.word	0xefff69f3
 8006898:	40008000 	.word	0x40008000
 800689c:	40013800 	.word	0x40013800
 80068a0:	40021000 	.word	0x40021000
 80068a4:	40004400 	.word	0x40004400
 80068a8:	40004800 	.word	0x40004800
 80068ac:	40004c00 	.word	0x40004c00
 80068b0:	40005000 	.word	0x40005000
 80068b4:	2310      	movs	r3, #16
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a9f      	ldr	r2, [pc, #636]	; (8006b3c <UART_SetConfig+0x568>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d17a      	bne.n	80069ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d824      	bhi.n	8006916 <UART_SetConfig+0x342>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <UART_SetConfig+0x300>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	080068f9 	.word	0x080068f9
 80068d8:	08006917 	.word	0x08006917
 80068dc:	08006901 	.word	0x08006901
 80068e0:	08006917 	.word	0x08006917
 80068e4:	08006907 	.word	0x08006907
 80068e8:	08006917 	.word	0x08006917
 80068ec:	08006917 	.word	0x08006917
 80068f0:	08006917 	.word	0x08006917
 80068f4:	0800690f 	.word	0x0800690f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f8:	f7fd fd0a 	bl	8004310 <HAL_RCC_GetPCLK1Freq>
 80068fc:	61f8      	str	r0, [r7, #28]
        break;
 80068fe:	e010      	b.n	8006922 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006900:	4b8f      	ldr	r3, [pc, #572]	; (8006b40 <UART_SetConfig+0x56c>)
 8006902:	61fb      	str	r3, [r7, #28]
        break;
 8006904:	e00d      	b.n	8006922 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006906:	f7fd fc6b 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 800690a:	61f8      	str	r0, [r7, #28]
        break;
 800690c:	e009      	b.n	8006922 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006912:	61fb      	str	r3, [r7, #28]
        break;
 8006914:	e005      	b.n	8006922 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006920:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80fb 	beq.w	8006b20 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	4613      	mov	r3, r2
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	4413      	add	r3, r2
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	429a      	cmp	r2, r3
 8006938:	d305      	bcc.n	8006946 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	429a      	cmp	r2, r3
 8006944:	d903      	bls.n	800694e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800694c:	e0e8      	b.n	8006b20 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	2200      	movs	r2, #0
 8006952:	461c      	mov	r4, r3
 8006954:	4615      	mov	r5, r2
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	022b      	lsls	r3, r5, #8
 8006960:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006964:	0222      	lsls	r2, r4, #8
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	6849      	ldr	r1, [r1, #4]
 800696a:	0849      	lsrs	r1, r1, #1
 800696c:	2000      	movs	r0, #0
 800696e:	4688      	mov	r8, r1
 8006970:	4681      	mov	r9, r0
 8006972:	eb12 0a08 	adds.w	sl, r2, r8
 8006976:	eb43 0b09 	adc.w	fp, r3, r9
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	603b      	str	r3, [r7, #0]
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006988:	4650      	mov	r0, sl
 800698a:	4659      	mov	r1, fp
 800698c:	f7fa f98c 	bl	8000ca8 <__aeabi_uldivmod>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4613      	mov	r3, r2
 8006996:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800699e:	d308      	bcc.n	80069b2 <UART_SetConfig+0x3de>
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a6:	d204      	bcs.n	80069b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	60da      	str	r2, [r3, #12]
 80069b0:	e0b6      	b.n	8006b20 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069b8:	e0b2      	b.n	8006b20 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c2:	d15e      	bne.n	8006a82 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80069c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d828      	bhi.n	8006a1e <UART_SetConfig+0x44a>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <UART_SetConfig+0x400>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	08006a1f 	.word	0x08006a1f
 80069e4:	08006a0f 	.word	0x08006a0f
 80069e8:	08006a1f 	.word	0x08006a1f
 80069ec:	08006a1f 	.word	0x08006a1f
 80069f0:	08006a1f 	.word	0x08006a1f
 80069f4:	08006a17 	.word	0x08006a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f8:	f7fd fc8a 	bl	8004310 <HAL_RCC_GetPCLK1Freq>
 80069fc:	61f8      	str	r0, [r7, #28]
        break;
 80069fe:	e014      	b.n	8006a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a00:	f7fd fc9c 	bl	800433c <HAL_RCC_GetPCLK2Freq>
 8006a04:	61f8      	str	r0, [r7, #28]
        break;
 8006a06:	e010      	b.n	8006a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a08:	4b4d      	ldr	r3, [pc, #308]	; (8006b40 <UART_SetConfig+0x56c>)
 8006a0a:	61fb      	str	r3, [r7, #28]
        break;
 8006a0c:	e00d      	b.n	8006a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a0e:	f7fd fbe7 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 8006a12:	61f8      	str	r0, [r7, #28]
        break;
 8006a14:	e009      	b.n	8006a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1a:	61fb      	str	r3, [r7, #28]
        break;
 8006a1c:	e005      	b.n	8006a2a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d077      	beq.n	8006b20 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	005a      	lsls	r2, r3, #1
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	085b      	lsrs	r3, r3, #1
 8006a3a:	441a      	add	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b0f      	cmp	r3, #15
 8006a4a:	d916      	bls.n	8006a7a <UART_SetConfig+0x4a6>
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a52:	d212      	bcs.n	8006a7a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f023 030f 	bic.w	r3, r3, #15
 8006a5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	8afb      	ldrh	r3, [r7, #22]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	8afa      	ldrh	r2, [r7, #22]
 8006a76:	60da      	str	r2, [r3, #12]
 8006a78:	e052      	b.n	8006b20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a80:	e04e      	b.n	8006b20 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d827      	bhi.n	8006ada <UART_SetConfig+0x506>
 8006a8a:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <UART_SetConfig+0x4bc>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006abd 	.word	0x08006abd
 8006a98:	08006ac5 	.word	0x08006ac5
 8006a9c:	08006adb 	.word	0x08006adb
 8006aa0:	08006acb 	.word	0x08006acb
 8006aa4:	08006adb 	.word	0x08006adb
 8006aa8:	08006adb 	.word	0x08006adb
 8006aac:	08006adb 	.word	0x08006adb
 8006ab0:	08006ad3 	.word	0x08006ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab4:	f7fd fc2c 	bl	8004310 <HAL_RCC_GetPCLK1Freq>
 8006ab8:	61f8      	str	r0, [r7, #28]
        break;
 8006aba:	e014      	b.n	8006ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006abc:	f7fd fc3e 	bl	800433c <HAL_RCC_GetPCLK2Freq>
 8006ac0:	61f8      	str	r0, [r7, #28]
        break;
 8006ac2:	e010      	b.n	8006ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac4:	4b1e      	ldr	r3, [pc, #120]	; (8006b40 <UART_SetConfig+0x56c>)
 8006ac6:	61fb      	str	r3, [r7, #28]
        break;
 8006ac8:	e00d      	b.n	8006ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aca:	f7fd fb89 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 8006ace:	61f8      	str	r0, [r7, #28]
        break;
 8006ad0:	e009      	b.n	8006ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ad6:	61fb      	str	r3, [r7, #28]
        break;
 8006ad8:	e005      	b.n	8006ae6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ae4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d019      	beq.n	8006b20 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	085a      	lsrs	r2, r3, #1
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	441a      	add	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b0f      	cmp	r3, #15
 8006b04:	d909      	bls.n	8006b1a <UART_SetConfig+0x546>
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b0c:	d205      	bcs.n	8006b1a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60da      	str	r2, [r3, #12]
 8006b18:	e002      	b.n	8006b20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3728      	adds	r7, #40	; 0x28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40008000 	.word	0x40008000
 8006b40:	00f42400 	.word	0x00f42400

08006b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00a      	beq.n	8006b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00a      	beq.n	8006bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01a      	beq.n	8006c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c42:	d10a      	bne.n	8006c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	605a      	str	r2, [r3, #4]
  }
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c98:	f7fa ffce 	bl	8001c38 <HAL_GetTick>
 8006c9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d10e      	bne.n	8006cca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f82d 	bl	8006d1a <UART_WaitOnFlagUntilTimeout>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e023      	b.n	8006d12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d10e      	bne.n	8006cf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f817 	bl	8006d1a <UART_WaitOnFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e00d      	b.n	8006d12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b09c      	sub	sp, #112	; 0x70
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	603b      	str	r3, [r7, #0]
 8006d26:	4613      	mov	r3, r2
 8006d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d2a:	e0a5      	b.n	8006e78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d32:	f000 80a1 	beq.w	8006e78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d36:	f7fa ff7f 	bl	8001c38 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d302      	bcc.n	8006d4c <UART_WaitOnFlagUntilTimeout+0x32>
 8006d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d13e      	bne.n	8006dca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d60:	667b      	str	r3, [r7, #100]	; 0x64
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e6      	bne.n	8006d4c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3308      	adds	r3, #8
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	f023 0301 	bic.w	r3, r3, #1
 8006d94:	663b      	str	r3, [r7, #96]	; 0x60
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006da0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e5      	bne.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e067      	b.n	8006e9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d04f      	beq.n	8006e78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de6:	d147      	bne.n	8006e78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006df0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e10:	637b      	str	r3, [r7, #52]	; 0x34
 8006e12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e6      	bne.n	8006df2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	613b      	str	r3, [r7, #16]
   return(result);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3308      	adds	r3, #8
 8006e42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e44:	623a      	str	r2, [r7, #32]
 8006e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	69f9      	ldr	r1, [r7, #28]
 8006e4a:	6a3a      	ldr	r2, [r7, #32]
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e5      	bne.n	8006e24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2220      	movs	r2, #32
 8006e62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e010      	b.n	8006e9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69da      	ldr	r2, [r3, #28]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	4013      	ands	r3, r2
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	bf0c      	ite	eq
 8006e88:	2301      	moveq	r3, #1
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	461a      	mov	r2, r3
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	f43f af4a 	beq.w	8006d2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3770      	adds	r7, #112	; 0x70
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b097      	sub	sp, #92	; 0x5c
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	88fa      	ldrh	r2, [r7, #6]
 8006ebc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	88fa      	ldrh	r2, [r7, #6]
 8006ec4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed6:	d10e      	bne.n	8006ef6 <UART_Start_Receive_IT+0x52>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d105      	bne.n	8006eec <UART_Start_Receive_IT+0x48>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ee6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eea:	e02d      	b.n	8006f48 <UART_Start_Receive_IT+0xa4>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	22ff      	movs	r2, #255	; 0xff
 8006ef0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ef4:	e028      	b.n	8006f48 <UART_Start_Receive_IT+0xa4>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10d      	bne.n	8006f1a <UART_Start_Receive_IT+0x76>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d104      	bne.n	8006f10 <UART_Start_Receive_IT+0x6c>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	22ff      	movs	r2, #255	; 0xff
 8006f0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f0e:	e01b      	b.n	8006f48 <UART_Start_Receive_IT+0xa4>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	227f      	movs	r2, #127	; 0x7f
 8006f14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f18:	e016      	b.n	8006f48 <UART_Start_Receive_IT+0xa4>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f22:	d10d      	bne.n	8006f40 <UART_Start_Receive_IT+0x9c>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d104      	bne.n	8006f36 <UART_Start_Receive_IT+0x92>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	227f      	movs	r2, #127	; 0x7f
 8006f30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f34:	e008      	b.n	8006f48 <UART_Start_Receive_IT+0xa4>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	223f      	movs	r2, #63	; 0x3f
 8006f3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f3e:	e003      	b.n	8006f48 <UART_Start_Receive_IT+0xa4>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2222      	movs	r2, #34	; 0x22
 8006f54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	657b      	str	r3, [r7, #84]	; 0x54
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3308      	adds	r3, #8
 8006f74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f76:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e5      	bne.n	8006f56 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f92:	d107      	bne.n	8006fa4 <UART_Start_Receive_IT+0x100>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d103      	bne.n	8006fa4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4a24      	ldr	r2, [pc, #144]	; (8007030 <UART_Start_Receive_IT+0x18c>)
 8006fa0:	665a      	str	r2, [r3, #100]	; 0x64
 8006fa2:	e002      	b.n	8006faa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4a23      	ldr	r2, [pc, #140]	; (8007034 <UART_Start_Receive_IT+0x190>)
 8006fa8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d019      	beq.n	8006fee <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	e853 3f00 	ldrex	r3, [r3]
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e6      	bne.n	8006fba <UART_Start_Receive_IT+0x116>
 8006fec:	e018      	b.n	8007020 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f043 0320 	orr.w	r3, r3, #32
 8007002:	653b      	str	r3, [r7, #80]	; 0x50
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700c:	623b      	str	r3, [r7, #32]
 800700e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	69f9      	ldr	r1, [r7, #28]
 8007012:	6a3a      	ldr	r2, [r7, #32]
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	61bb      	str	r3, [r7, #24]
   return(result);
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e6      	bne.n	8006fee <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	375c      	adds	r7, #92	; 0x5c
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	080072df 	.word	0x080072df
 8007034:	0800717f 	.word	0x0800717f

08007038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b095      	sub	sp, #84	; 0x54
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800705e:	643b      	str	r3, [r7, #64]	; 0x40
 8007060:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e6      	bne.n	8007040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3308      	adds	r3, #8
 8007078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	61fb      	str	r3, [r7, #28]
   return(result);
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	f023 0301 	bic.w	r3, r3, #1
 8007088:	64bb      	str	r3, [r7, #72]	; 0x48
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3308      	adds	r3, #8
 8007090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e5      	bne.n	8007072 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d118      	bne.n	80070e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f023 0310 	bic.w	r3, r3, #16
 80070c2:	647b      	str	r3, [r7, #68]	; 0x44
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	461a      	mov	r2, r3
 80070ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070cc:	61bb      	str	r3, [r7, #24]
 80070ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6979      	ldr	r1, [r7, #20]
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	613b      	str	r3, [r7, #16]
   return(result);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e6      	bne.n	80070ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80070f2:	bf00      	nop
 80070f4:	3754      	adds	r7, #84	; 0x54
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f7ff fa43 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007122:	bf00      	nop
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b088      	sub	sp, #32
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007146:	61fb      	str	r3, [r7, #28]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	61bb      	str	r3, [r7, #24]
 8007152:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6979      	ldr	r1, [r7, #20]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	613b      	str	r3, [r7, #16]
   return(result);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e6      	bne.n	8007132 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff fa0f 	bl	8006594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007176:	bf00      	nop
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b096      	sub	sp, #88	; 0x58
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800718c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007194:	2b22      	cmp	r3, #34	; 0x22
 8007196:	f040 8094 	bne.w	80072c2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80071a8:	b2d9      	uxtb	r1, r3
 80071aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b4:	400a      	ands	r2, r1
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d179      	bne.n	80072d6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071f6:	653b      	str	r3, [r7, #80]	; 0x50
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007200:	647b      	str	r3, [r7, #68]	; 0x44
 8007202:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e6      	bne.n	80071e2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3308      	adds	r3, #8
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	623b      	str	r3, [r7, #32]
   return(result);
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	f023 0301 	bic.w	r3, r3, #1
 800722a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3308      	adds	r3, #8
 8007232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007234:	633a      	str	r2, [r7, #48]	; 0x30
 8007236:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800723a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e5      	bne.n	8007214 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007258:	2b01      	cmp	r3, #1
 800725a:	d12e      	bne.n	80072ba <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0310 	bic.w	r3, r3, #16
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007280:	61fb      	str	r3, [r7, #28]
 8007282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	69b9      	ldr	r1, [r7, #24]
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	617b      	str	r3, [r7, #20]
   return(result);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e6      	bne.n	8007262 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d103      	bne.n	80072aa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2210      	movs	r2, #16
 80072a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff f982 	bl	80065bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072b8:	e00d      	b.n	80072d6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fa fa50 	bl	8001760 <HAL_UART_RxCpltCallback>
}
 80072c0:	e009      	b.n	80072d6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	8b1b      	ldrh	r3, [r3, #24]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0208 	orr.w	r2, r2, #8
 80072d2:	b292      	uxth	r2, r2
 80072d4:	831a      	strh	r2, [r3, #24]
}
 80072d6:	bf00      	nop
 80072d8:	3758      	adds	r7, #88	; 0x58
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b096      	sub	sp, #88	; 0x58
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f4:	2b22      	cmp	r3, #34	; 0x22
 80072f6:	f040 8094 	bne.w	8007422 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007300:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007308:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800730a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800730e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007312:	4013      	ands	r3, r2
 8007314:	b29a      	uxth	r2, r3
 8007316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007318:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	1c9a      	adds	r2, r3, #2
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d179      	bne.n	8007436 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007360:	643b      	str	r3, [r7, #64]	; 0x40
 8007362:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e6      	bne.n	8007342 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	61fb      	str	r3, [r7, #28]
   return(result);
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	64bb      	str	r3, [r7, #72]	; 0x48
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800739a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e5      	bne.n	8007374 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d12e      	bne.n	800741a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f023 0310 	bic.w	r3, r3, #16
 80073d6:	647b      	str	r3, [r7, #68]	; 0x44
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6979      	ldr	r1, [r7, #20]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	613b      	str	r3, [r7, #16]
   return(result);
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e6      	bne.n	80073c2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f003 0310 	and.w	r3, r3, #16
 80073fe:	2b10      	cmp	r3, #16
 8007400:	d103      	bne.n	800740a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2210      	movs	r2, #16
 8007408:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff f8d2 	bl	80065bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007418:	e00d      	b.n	8007436 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fa f9a0 	bl	8001760 <HAL_UART_RxCpltCallback>
}
 8007420:	e009      	b.n	8007436 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	8b1b      	ldrh	r3, [r3, #24]
 8007428:	b29a      	uxth	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0208 	orr.w	r2, r2, #8
 8007432:	b292      	uxth	r2, r2
 8007434:	831a      	strh	r2, [r3, #24]
}
 8007436:	bf00      	nop
 8007438:	3758      	adds	r7, #88	; 0x58
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <Global_GPIO_Init>:
 *      Author: felipe
 */
#include "GPIO.h"


void Global_GPIO_Init() {
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800745a:	4b1b      	ldr	r3, [pc, #108]	; (80074c8 <Global_GPIO_Init+0x74>)
 800745c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745e:	4a1a      	ldr	r2, [pc, #104]	; (80074c8 <Global_GPIO_Init+0x74>)
 8007460:	f043 0304 	orr.w	r3, r3, #4
 8007464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007466:	4b18      	ldr	r3, [pc, #96]	; (80074c8 <Global_GPIO_Init+0x74>)
 8007468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007472:	4b15      	ldr	r3, [pc, #84]	; (80074c8 <Global_GPIO_Init+0x74>)
 8007474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007476:	4a14      	ldr	r2, [pc, #80]	; (80074c8 <Global_GPIO_Init+0x74>)
 8007478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800747c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <Global_GPIO_Init+0x74>)
 8007480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007486:	60bb      	str	r3, [r7, #8]
 8007488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <Global_GPIO_Init+0x74>)
 800748c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748e:	4a0e      	ldr	r2, [pc, #56]	; (80074c8 <Global_GPIO_Init+0x74>)
 8007490:	f043 0301 	orr.w	r3, r3, #1
 8007494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <Global_GPIO_Init+0x74>)
 8007498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	607b      	str	r3, [r7, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074a2:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <Global_GPIO_Init+0x74>)
 80074a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a6:	4a08      	ldr	r2, [pc, #32]	; (80074c8 <Global_GPIO_Init+0x74>)
 80074a8:	f043 0302 	orr.w	r3, r3, #2
 80074ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074ae:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <Global_GPIO_Init+0x74>)
 80074b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	683b      	ldr	r3, [r7, #0]
}
 80074ba:	bf00      	nop
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	40021000 	.word	0x40021000

080074cc <__NVIC_EnableIRQ>:
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	db0b      	blt.n	80074f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	f003 021f 	and.w	r2, r3, #31
 80074e4:	4907      	ldr	r1, [pc, #28]	; (8007504 <__NVIC_EnableIRQ+0x38>)
 80074e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	2001      	movs	r0, #1
 80074ee:	fa00 f202 	lsl.w	r2, r0, r2
 80074f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	e000e100 	.word	0xe000e100

08007508 <__NVIC_SetPriority>:
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007518:	2b00      	cmp	r3, #0
 800751a:	db0a      	blt.n	8007532 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	b2da      	uxtb	r2, r3
 8007520:	490c      	ldr	r1, [pc, #48]	; (8007554 <__NVIC_SetPriority+0x4c>)
 8007522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007526:	0112      	lsls	r2, r2, #4
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	440b      	add	r3, r1
 800752c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007530:	e00a      	b.n	8007548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	b2da      	uxtb	r2, r3
 8007536:	4908      	ldr	r1, [pc, #32]	; (8007558 <__NVIC_SetPriority+0x50>)
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	3b04      	subs	r3, #4
 8007540:	0112      	lsls	r2, r2, #4
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	440b      	add	r3, r1
 8007546:	761a      	strb	r2, [r3, #24]
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	e000e100 	.word	0xe000e100
 8007558:	e000ed00 	.word	0xe000ed00

0800755c <Joystick_Button_Interrupt_Init>:

ADC_ChannelConfTypeDef channel_conf;
ADC_HandleTypeDef adc_handler;


static void Joystick_Button_Interrupt_Init(GPIO_TypeDef* Port, uint16_t Pin) {
 800755c:	b580      	push	{r7, lr}
 800755e:	b08a      	sub	sp, #40	; 0x28
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef gpioInit = {0};
 8007568:	f107 0314 	add.w	r3, r7, #20
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	605a      	str	r2, [r3, #4]
 8007572:	609a      	str	r2, [r3, #8]
 8007574:	60da      	str	r2, [r3, #12]
 8007576:	611a      	str	r2, [r3, #16]

	if (Port == GPIOA) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800757e:	d10c      	bne.n	800759a <Joystick_Button_Interrupt_Init+0x3e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007580:	4b23      	ldr	r3, [pc, #140]	; (8007610 <Joystick_Button_Interrupt_Init+0xb4>)
 8007582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007584:	4a22      	ldr	r2, [pc, #136]	; (8007610 <Joystick_Button_Interrupt_Init+0xb4>)
 8007586:	f043 0301 	orr.w	r3, r3, #1
 800758a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800758c:	4b20      	ldr	r3, [pc, #128]	; (8007610 <Joystick_Button_Interrupt_Init+0xb4>)
 800758e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	e020      	b.n	80075dc <Joystick_Button_Interrupt_Init+0x80>
	}

	else if (Port == GPIOB) {
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a1d      	ldr	r2, [pc, #116]	; (8007614 <Joystick_Button_Interrupt_Init+0xb8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d10c      	bne.n	80075bc <Joystick_Button_Interrupt_Init+0x60>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80075a2:	4b1b      	ldr	r3, [pc, #108]	; (8007610 <Joystick_Button_Interrupt_Init+0xb4>)
 80075a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a6:	4a1a      	ldr	r2, [pc, #104]	; (8007610 <Joystick_Button_Interrupt_Init+0xb4>)
 80075a8:	f043 0302 	orr.w	r3, r3, #2
 80075ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075ae:	4b18      	ldr	r3, [pc, #96]	; (8007610 <Joystick_Button_Interrupt_Init+0xb4>)
 80075b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	e00f      	b.n	80075dc <Joystick_Button_Interrupt_Init+0x80>
	}

	else if (Port == GPIOC) {
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a16      	ldr	r2, [pc, #88]	; (8007618 <Joystick_Button_Interrupt_Init+0xbc>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d10b      	bne.n	80075dc <Joystick_Button_Interrupt_Init+0x80>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80075c4:	4b12      	ldr	r3, [pc, #72]	; (8007610 <Joystick_Button_Interrupt_Init+0xb4>)
 80075c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c8:	4a11      	ldr	r2, [pc, #68]	; (8007610 <Joystick_Button_Interrupt_Init+0xb4>)
 80075ca:	f043 0304 	orr.w	r3, r3, #4
 80075ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075d0:	4b0f      	ldr	r3, [pc, #60]	; (8007610 <Joystick_Button_Interrupt_Init+0xb4>)
 80075d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	60bb      	str	r3, [r7, #8]
 80075da:	68bb      	ldr	r3, [r7, #8]
	}

	gpioInit.Pin = Pin;
 80075dc:	887b      	ldrh	r3, [r7, #2]
 80075de:	617b      	str	r3, [r7, #20]
	gpioInit.Mode = GPIO_MODE_IT_RISING;  //Sets Interrupt on rising edge
 80075e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80075e4:	61bb      	str	r3, [r7, #24]
	gpioInit.Pull = GPIO_PULLDOWN;
 80075e6:	2302      	movs	r3, #2
 80075e8:	61fb      	str	r3, [r7, #28]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 80075ea:	2300      	movs	r3, #0
 80075ec:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(Port, &gpioInit);
 80075ee:	f107 0314 	add.w	r3, r7, #20
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7fb fed9 	bl	80033ac <HAL_GPIO_Init>

	//ENABLE INTERRUPT
	NVIC_SetPriority(EXTI9_5_IRQn, 5);  //Sets priority of the interrupt to 5
 80075fa:	2105      	movs	r1, #5
 80075fc:	2017      	movs	r0, #23
 80075fe:	f7ff ff83 	bl	8007508 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007602:	2017      	movs	r0, #23
 8007604:	f7ff ff62 	bl	80074cc <__NVIC_EnableIRQ>
}
 8007608:	bf00      	nop
 800760a:	3728      	adds	r7, #40	; 0x28
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40021000 	.word	0x40021000
 8007614:	48000400 	.word	0x48000400
 8007618:	48000800 	.word	0x48000800

0800761c <Joystick_Gpio_XY>:


static void Joystick_Gpio_XY(GPIO_TypeDef* Port, uint16_t Pin) {
 800761c:	b580      	push	{r7, lr}
 800761e:	b08a      	sub	sp, #40	; 0x28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	807b      	strh	r3, [r7, #2]
	//Intended for analog pins A0 - A5
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007628:	f107 0314 	add.w	r3, r7, #20
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	609a      	str	r2, [r3, #8]
 8007634:	60da      	str	r2, [r3, #12]
 8007636:	611a      	str	r2, [r3, #16]

	if (Port == GPIOA) {
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800763e:	d10c      	bne.n	800765a <Joystick_Gpio_XY+0x3e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007640:	4b1e      	ldr	r3, [pc, #120]	; (80076bc <Joystick_Gpio_XY+0xa0>)
 8007642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007644:	4a1d      	ldr	r2, [pc, #116]	; (80076bc <Joystick_Gpio_XY+0xa0>)
 8007646:	f043 0301 	orr.w	r3, r3, #1
 800764a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800764c:	4b1b      	ldr	r3, [pc, #108]	; (80076bc <Joystick_Gpio_XY+0xa0>)
 800764e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	613b      	str	r3, [r7, #16]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	e020      	b.n	800769c <Joystick_Gpio_XY+0x80>
	}

	else if (Port == GPIOB) {
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <Joystick_Gpio_XY+0xa4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d10c      	bne.n	800767c <Joystick_Gpio_XY+0x60>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8007662:	4b16      	ldr	r3, [pc, #88]	; (80076bc <Joystick_Gpio_XY+0xa0>)
 8007664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007666:	4a15      	ldr	r2, [pc, #84]	; (80076bc <Joystick_Gpio_XY+0xa0>)
 8007668:	f043 0302 	orr.w	r3, r3, #2
 800766c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800766e:	4b13      	ldr	r3, [pc, #76]	; (80076bc <Joystick_Gpio_XY+0xa0>)
 8007670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	e00f      	b.n	800769c <Joystick_Gpio_XY+0x80>
	}

	else if (Port == GPIOC) {
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a11      	ldr	r2, [pc, #68]	; (80076c4 <Joystick_Gpio_XY+0xa8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d10b      	bne.n	800769c <Joystick_Gpio_XY+0x80>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8007684:	4b0d      	ldr	r3, [pc, #52]	; (80076bc <Joystick_Gpio_XY+0xa0>)
 8007686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007688:	4a0c      	ldr	r2, [pc, #48]	; (80076bc <Joystick_Gpio_XY+0xa0>)
 800768a:	f043 0304 	orr.w	r3, r3, #4
 800768e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <Joystick_Gpio_XY+0xa0>)
 8007692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	60bb      	str	r3, [r7, #8]
 800769a:	68bb      	ldr	r3, [r7, #8]
	}

	GPIO_InitStruct.Pin = Pin;
 800769c:	887b      	ldrh	r3, [r7, #2]
 800769e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80076a0:	230b      	movs	r3, #11
 80076a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Port, &GPIO_InitStruct);
 80076a8:	f107 0314 	add.w	r3, r7, #20
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fb fe7c 	bl	80033ac <HAL_GPIO_Init>
}
 80076b4:	bf00      	nop
 80076b6:	3728      	adds	r7, #40	; 0x28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40021000 	.word	0x40021000
 80076c0:	48000400 	.word	0x48000400
 80076c4:	48000800 	.word	0x48000800

080076c8 <Joystick_ClkConfig>:


static void Joystick_ClkConfig() {
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b0a4      	sub	sp, #144	; 0x90
 80076cc:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80076ce:	f107 0308 	add.w	r3, r7, #8
 80076d2:	2288      	movs	r2, #136	; 0x88
 80076d4:	2100      	movs	r1, #0
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fef6 	bl	80084c8 <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80076dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80076e0:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80076e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80076ea:	2302      	movs	r3, #2
 80076ec:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80076ee:	2301      	movs	r3, #1
 80076f0:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80076f2:	2308      	movs	r3, #8
 80076f4:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80076f6:	2307      	movs	r3, #7
 80076f8:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80076fa:	2302      	movs	r3, #2
 80076fc:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80076fe:	2302      	movs	r3, #2
 8007700:	623b      	str	r3, [r7, #32]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8007702:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007706:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8007708:	f107 0308 	add.w	r3, r7, #8
 800770c:	4618      	mov	r0, r3
 800770e:	f7fc fe8b 	bl	8004428 <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_ADC_CLK_ENABLE();
 8007712:	4b08      	ldr	r3, [pc, #32]	; (8007734 <Joystick_ClkConfig+0x6c>)
 8007714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007716:	4a07      	ldr	r2, [pc, #28]	; (8007734 <Joystick_ClkConfig+0x6c>)
 8007718:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800771c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800771e:	4b05      	ldr	r3, [pc, #20]	; (8007734 <Joystick_ClkConfig+0x6c>)
 8007720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007726:	607b      	str	r3, [r7, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
}
 800772a:	bf00      	nop
 800772c:	3790      	adds	r7, #144	; 0x90
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	40021000 	.word	0x40021000

08007738 <Joystick_Init>:


static void Joystick_Init(Joystick_Struct_t* Joystick) {
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	ADC_MultiModeTypeDef multimode = {0};
 8007740:	f107 030c 	add.w	r3, r7, #12
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	605a      	str	r2, [r3, #4]
 800774a:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	Joystick->ADC_Handler->Instance = ADC1;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	4a42      	ldr	r2, [pc, #264]	; (800785c <Joystick_Init+0x124>)
 8007752:	601a      	str	r2, [r3, #0]
	Joystick->ADC_Handler->Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2200      	movs	r2, #0
 800775a:	605a      	str	r2, [r3, #4]
	Joystick->ADC_Handler->Init.Resolution = ADC_RESOLUTION_12B;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	2200      	movs	r2, #0
 8007762:	609a      	str	r2, [r3, #8]
	Joystick->ADC_Handler->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	2200      	movs	r2, #0
 800776a:	60da      	str	r2, [r3, #12]
	Joystick->ADC_Handler->Init.ScanConvMode = ADC_SCAN_DISABLE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	2200      	movs	r2, #0
 8007772:	611a      	str	r2, [r3, #16]
	Joystick->ADC_Handler->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2204      	movs	r2, #4
 800777a:	615a      	str	r2, [r3, #20]
	Joystick->ADC_Handler->Init.LowPowerAutoWait = DISABLE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	2200      	movs	r2, #0
 8007782:	761a      	strb	r2, [r3, #24]
	Joystick->ADC_Handler->Init.ContinuousConvMode = DISABLE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2200      	movs	r2, #0
 800778a:	765a      	strb	r2, [r3, #25]
	Joystick->ADC_Handler->Init.NbrOfConversion = 1;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2201      	movs	r2, #1
 8007792:	61da      	str	r2, [r3, #28]
	Joystick->ADC_Handler->Init.DiscontinuousConvMode = DISABLE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2020 	strb.w	r2, [r3, #32]
	Joystick->ADC_Handler->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a2:	2200      	movs	r2, #0
 80077a4:	629a      	str	r2, [r3, #40]	; 0x28
	Joystick->ADC_Handler->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	2200      	movs	r2, #0
 80077ac:	62da      	str	r2, [r3, #44]	; 0x2c
	Joystick->ADC_Handler->Init.DMAContinuousRequests = DISABLE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Joystick->ADC_Handler->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	2200      	movs	r2, #0
 80077be:	635a      	str	r2, [r3, #52]	; 0x34
	Joystick->ADC_Handler->Init.OversamplingMode = DISABLE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	HAL_ADC_Init(Joystick->ADC_Handler);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fa fc46 	bl	8002060 <HAL_ADC_Init>

	multimode.Mode = ADC_MODE_INDEPENDENT;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]

	HAL_ADCEx_MultiModeConfigChannel(Joystick->ADC_Handler, &multimode);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	f107 020c 	add.w	r2, r7, #12
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fb fbce 	bl	8002f84 <HAL_ADCEx_MultiModeConfigChannel>


	Joystick->ChannelConf->Rank = ADC_REGULAR_RANK_1;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	2206      	movs	r2, #6
 80077ee:	605a      	str	r2, [r3, #4]
	Joystick->ChannelConf->SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	2200      	movs	r2, #0
 80077f6:	609a      	str	r2, [r3, #8]
	Joystick->ChannelConf->SingleDiff = ADC_SINGLE_ENDED;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	227f      	movs	r2, #127	; 0x7f
 80077fe:	60da      	str	r2, [r3, #12]
	Joystick->ChannelConf->OffsetNumber = ADC_OFFSET_NONE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	2204      	movs	r2, #4
 8007806:	611a      	str	r2, [r3, #16]
	Joystick->ChannelConf->Offset = 0;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	2200      	movs	r2, #0
 800780e:	615a      	str	r2, [r3, #20]

	HAL_ADC_ConfigChannel(Joystick->ADC_Handler, Joystick->ChannelConf);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7fa ff16 	bl	800264c <HAL_ADC_ConfigChannel>

	Joystick_ClkConfig();
 8007820:	f7ff ff52 	bl	80076c8 <Joystick_ClkConfig>

	Joystick_Gpio_XY(Joystick->X_Port, Joystick->X_Pin);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	889b      	ldrh	r3, [r3, #4]
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f7ff fef4 	bl	800761c <Joystick_Gpio_XY>
	Joystick_Gpio_XY(Joystick->Y_Port, Joystick->Y_Pin);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	8a1b      	ldrh	r3, [r3, #16]
 800783c:	4619      	mov	r1, r3
 800783e:	4610      	mov	r0, r2
 8007840:	f7ff feec 	bl	800761c <Joystick_Gpio_XY>

	Joystick_Button_Interrupt_Init(Joystick->But_Port, Joystick->But_Pin);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	8b9b      	ldrh	r3, [r3, #28]
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f7ff fe84 	bl	800755c <Joystick_Button_Interrupt_Init>

}
 8007854:	bf00      	nop
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	50040000 	.word	0x50040000

08007860 <Joystick_Create>:
Joystick_Struct_t Joystick_Create(
	GPIO_TypeDef* x_port, uint16_t x_pin, uint32_t x_adc_channel,
	GPIO_TypeDef* y_port, uint16_t y_pin, uint32_t y_adc_channel,
	GPIO_TypeDef* but_port, uint16_t but_pin
)
{
 8007860:	b5b0      	push	{r4, r5, r7, lr}
 8007862:	b08e      	sub	sp, #56	; 0x38
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	4613      	mov	r3, r2
 800786e:	80fb      	strh	r3, [r7, #6]
	Joystick_Struct_t Joystick;

	Joystick.X_Port = x_port;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	613b      	str	r3, [r7, #16]
	Joystick.X_Pin = x_pin;
 8007874:	88fb      	ldrh	r3, [r7, #6]
 8007876:	82bb      	strh	r3, [r7, #20]
	Joystick.Y_Port = y_port;
 8007878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800787a:	61fb      	str	r3, [r7, #28]
	Joystick.Y_Pin = y_pin;
 800787c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007880:	843b      	strh	r3, [r7, #32]
	Joystick.But_Port = but_port;
 8007882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
	Joystick.But_Pin = but_pin;
 8007886:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800788a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	Joystick.X_ADC_Channel = x_adc_channel;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	61bb      	str	r3, [r7, #24]
	Joystick.Y_ADC_Channel = y_adc_channel;
 8007890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007892:	627b      	str	r3, [r7, #36]	; 0x24
	Joystick.ChannelConf = &channel_conf;
 8007894:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <Joystick_Create+0x68>)
 8007896:	633b      	str	r3, [r7, #48]	; 0x30
	Joystick.ADC_Handler = &adc_handler;
 8007898:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <Joystick_Create+0x6c>)
 800789a:	637b      	str	r3, [r7, #52]	; 0x34

	Joystick_Init(&Joystick);
 800789c:	f107 0310 	add.w	r3, r7, #16
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7ff ff49 	bl	8007738 <Joystick_Init>

	return Joystick;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	461d      	mov	r5, r3
 80078aa:	f107 0410 	add.w	r4, r7, #16
 80078ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078ba:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	3738      	adds	r7, #56	; 0x38
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bdb0      	pop	{r4, r5, r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000344 	.word	0x20000344
 80078cc:	2000035c 	.word	0x2000035c

080078d0 <ADC_To_Joystic>:


static int16_t ADC_To_Joystic(uint32_t adcValue) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
	return (int16_t)((90 / pow(4095, 2)) * pow(adcValue, 2) - 45);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7f8 fe23 	bl	8000524 <__aeabi_ui2d>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8007928 <ADC_To_Joystic+0x58>
 80078e6:	ec43 2b10 	vmov	d0, r2, r3
 80078ea:	f005 ff1d 	bl	800d728 <pow>
 80078ee:	ec51 0b10 	vmov	r0, r1, d0
 80078f2:	a310      	add	r3, pc, #64	; (adr r3, 8007934 <ADC_To_Joystic+0x64>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	f7f8 fe8e 	bl	8000618 <__aeabi_dmul>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4610      	mov	r0, r2
 8007902:	4619      	mov	r1, r3
 8007904:	f04f 0200 	mov.w	r2, #0
 8007908:	4b09      	ldr	r3, [pc, #36]	; (8007930 <ADC_To_Joystic+0x60>)
 800790a:	f7f8 fccd 	bl	80002a8 <__aeabi_dsub>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4610      	mov	r0, r2
 8007914:	4619      	mov	r1, r3
 8007916:	f7f9 f92f 	bl	8000b78 <__aeabi_d2iz>
 800791a:	4603      	mov	r3, r0
 800791c:	b21b      	sxth	r3, r3
}
 800791e:	4618      	mov	r0, r3
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	00000000 	.word	0x00000000
 800792c:	40000000 	.word	0x40000000
 8007930:	40468000 	.word	0x40468000
 8007934:	4385a071 	.word	0x4385a071
 8007938:	3ed682d0 	.word	0x3ed682d0

0800793c <Joystick_Read>:


void Joystick_Read(Joystick_Struct_t* Joystick, int16_t* xy) {
 800793c:	b590      	push	{r4, r7, lr}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]

	//Configure and read from channel X
	Joystick->ChannelConf->Channel = Joystick->X_ADC_Channel;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6892      	ldr	r2, [r2, #8]
 800794e:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(Joystick->ADC_Handler, Joystick->ChannelConf);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	4619      	mov	r1, r3
 800795a:	4610      	mov	r0, r2
 800795c:	f7fa fe76 	bl	800264c <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(Joystick->ADC_Handler);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	4618      	mov	r0, r3
 8007966:	f7fa fcd1 	bl	800230c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(Joystick->ADC_Handler, 100);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	2164      	movs	r1, #100	; 0x64
 8007970:	4618      	mov	r0, r3
 8007972:	f7fa fd85 	bl	8002480 <HAL_ADC_PollForConversion>

    xy[0] = ADC_To_Joystic(HAL_ADC_GetValue(Joystick->ADC_Handler));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	4618      	mov	r0, r3
 800797c:	f7fa fe58 	bl	8002630 <HAL_ADC_GetValue>
 8007980:	4603      	mov	r3, r0
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff ffa4 	bl	80078d0 <ADC_To_Joystic>
 8007988:	4603      	mov	r3, r0
 800798a:	461a      	mov	r2, r3
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	801a      	strh	r2, [r3, #0]

	//Configure and read from channel Y
	Joystick->ChannelConf->Channel = Joystick->Y_ADC_Channel;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6952      	ldr	r2, [r2, #20]
 8007998:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(Joystick->ADC_Handler, Joystick->ChannelConf);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	4619      	mov	r1, r3
 80079a4:	4610      	mov	r0, r2
 80079a6:	f7fa fe51 	bl	800264c <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(Joystick->ADC_Handler);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fa fcac 	bl	800230c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(Joystick->ADC_Handler, 100);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	2164      	movs	r1, #100	; 0x64
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fa fd60 	bl	8002480 <HAL_ADC_PollForConversion>

    xy[1] = ADC_To_Joystic(HAL_ADC_GetValue(Joystick->ADC_Handler));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fa fe33 	bl	8002630 <HAL_ADC_GetValue>
 80079ca:	4602      	mov	r2, r0
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	1c9c      	adds	r4, r3, #2
 80079d0:	4610      	mov	r0, r2
 80079d2:	f7ff ff7d 	bl	80078d0 <ADC_To_Joystic>
 80079d6:	4603      	mov	r3, r0
 80079d8:	8023      	strh	r3, [r4, #0]
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd90      	pop	{r4, r7, pc}

080079e2 <LCD_Command>:
 */

#include "LCD.h"


static void LCD_Command(LCD_Struct_t *LCD_1602, char cmd){
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
	char command = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	737b      	strb	r3, [r7, #13]
	//RS has to be 0 before sending any command
	HAL_GPIO_WritePin(LCD_1602->RS_port, LCD_1602->RS_pin, GPIO_PIN_RESET);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6898      	ldr	r0, [r3, #8]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	899b      	ldrh	r3, [r3, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	4619      	mov	r1, r3
 80079fe:	f7fb fe7f 	bl	8003700 <HAL_GPIO_WritePin>


	// Sending packets of 4 bits (get first 4 bits and set the last 4 to 0)
	command = (cmd>>4) & 0x0F;
 8007a02:	78fb      	ldrb	r3, [r7, #3]
 8007a04:	091b      	lsrs	r3, r3, #4
 8007a06:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 4; i++){
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73fb      	strb	r3, [r7, #15]
 8007a0c:	e019      	b.n	8007a42 <LCD_Command+0x60>
		HAL_GPIO_WritePin(LCD_1602->dataport[i], LCD_1602->datapin[i], (command>>i) & 0x01);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	4413      	add	r3, r2
 8007a24:	8819      	ldrh	r1, [r3, #0]
 8007a26:	7b7a      	ldrb	r2, [r7, #13]
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	fa42 f303 	asr.w	r3, r2, r3
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	f7fb fe62 	bl	8003700 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++){
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	73fb      	strb	r3, [r7, #15]
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d9e2      	bls.n	8007a0e <LCD_Command+0x2c>
		And so on...
		*/
	}

	// At the end of every command Enable has to be on for 1ms and then be turned off
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_SET);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6918      	ldr	r0, [r3, #16]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	8a9b      	ldrh	r3, [r3, #20]
 8007a50:	2201      	movs	r2, #1
 8007a52:	4619      	mov	r1, r3
 8007a54:	f7fb fe54 	bl	8003700 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007a58:	2001      	movs	r0, #1
 8007a5a:	f7fa f8f9 	bl	8001c50 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_RESET);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6918      	ldr	r0, [r3, #16]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	8a9b      	ldrh	r3, [r3, #20]
 8007a66:	2200      	movs	r2, #0
 8007a68:	4619      	mov	r1, r3
 8007a6a:	f7fb fe49 	bl	8003700 <HAL_GPIO_WritePin>

	//Repeats process for the last 4 bits

	command = cmd & 0x0F;
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 4; i++){
 8007a76:	2300      	movs	r3, #0
 8007a78:	73bb      	strb	r3, [r7, #14]
 8007a7a:	e019      	b.n	8007ab0 <LCD_Command+0xce>
		HAL_GPIO_WritePin(LCD_1602->dataport[i], LCD_1602->datapin[i], (command>>i) & 0x01);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	4413      	add	r3, r2
 8007a92:	8819      	ldrh	r1, [r3, #0]
 8007a94:	7b7a      	ldrb	r2, [r7, #13]
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	fa42 f303 	asr.w	r3, r2, r3
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	f7fb fe2b 	bl	8003700 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++){
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	3301      	adds	r3, #1
 8007aae:	73bb      	strb	r3, [r7, #14]
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d9e2      	bls.n	8007a7c <LCD_Command+0x9a>
	}

	// At the end of every command Enable has to be on for 1ms and then be turned off
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_SET);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6918      	ldr	r0, [r3, #16]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	8a9b      	ldrh	r3, [r3, #20]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f7fb fe1d 	bl	8003700 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	f7fa f8c2 	bl	8001c50 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_RESET);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6918      	ldr	r0, [r3, #16]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	8a9b      	ldrh	r3, [r3, #20]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	f7fb fe12 	bl	8003700 <HAL_GPIO_WritePin>
}
 8007adc:	bf00      	nop
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <LCD_Init>:


static void LCD_Init(LCD_Struct_t *LCD_1602) {
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioInit = {0};
 8007aec:	f107 030c 	add.w	r3, r7, #12
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	605a      	str	r2, [r3, #4]
 8007af6:	609a      	str	r2, [r3, #8]
 8007af8:	60da      	str	r2, [r3, #12]
 8007afa:	611a      	str	r2, [r3, #16]

	gpioInit.Pin = LCD_1602->datapin[0] | LCD_1602->datapin[1] |
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	881a      	ldrh	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	3302      	adds	r3, #2
 8007b08:	881b      	ldrh	r3, [r3, #0]
				   LCD_1602->datapin[2] | LCD_1602->datapin[3] |
				   LCD_1602->RS_pin     | LCD_1602->E_pin;
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	b29a      	uxth	r2, r3
				   LCD_1602->datapin[2] | LCD_1602->datapin[3] |
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	881b      	ldrh	r3, [r3, #0]
				   LCD_1602->RS_pin     | LCD_1602->E_pin;
 8007b16:	4313      	orrs	r3, r2
 8007b18:	b29a      	uxth	r2, r3
				   LCD_1602->datapin[2] | LCD_1602->datapin[3] |
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	3306      	adds	r3, #6
 8007b20:	881b      	ldrh	r3, [r3, #0]
				   LCD_1602->RS_pin     | LCD_1602->E_pin;
 8007b22:	4313      	orrs	r3, r2
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	899b      	ldrh	r3, [r3, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	8a9b      	ldrh	r3, [r3, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	b29b      	uxth	r3, r3
	gpioInit.Pin = LCD_1602->datapin[0] | LCD_1602->datapin[1] |
 8007b36:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode = GPIO_MODE_OUTPUT_PP;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(LCD_1602->dataport[0], &gpioInit);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f107 020c 	add.w	r2, r7, #12
 8007b4e:	4611      	mov	r1, r2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fb fc2b 	bl	80033ac <HAL_GPIO_Init>

	//Execute LCD initialization sequence
	HAL_Delay(100);
 8007b56:	2064      	movs	r0, #100	; 0x64
 8007b58:	f7fa f87a 	bl	8001c50 <HAL_Delay>
	LCD_Command(LCD_1602, 0x30);
 8007b5c:	2130      	movs	r1, #48	; 0x30
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff ff3f 	bl	80079e2 <LCD_Command>
	HAL_Delay(5);
 8007b64:	2005      	movs	r0, #5
 8007b66:	f7fa f873 	bl	8001c50 <HAL_Delay>
	LCD_Command(LCD_1602, 0x30);
 8007b6a:	2130      	movs	r1, #48	; 0x30
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7ff ff38 	bl	80079e2 <LCD_Command>
	HAL_Delay(1);
 8007b72:	2001      	movs	r0, #1
 8007b74:	f7fa f86c 	bl	8001c50 <HAL_Delay>
	LCD_Command(LCD_1602, 0x32);
 8007b78:	2132      	movs	r1, #50	; 0x32
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff ff31 	bl	80079e2 <LCD_Command>
	LCD_Command(LCD_1602, 0x28);  //2 rows of 5x8 characters
 8007b80:	2128      	movs	r1, #40	; 0x28
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff ff2d 	bl	80079e2 <LCD_Command>
	LCD_Command(LCD_1602, 0x0C);  //Enable display, no cursor, no cursor blinking
 8007b88:	210c      	movs	r1, #12
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7ff ff29 	bl	80079e2 <LCD_Command>
	LCD_Command(LCD_1602, 0x01);  //Clears screen
 8007b90:	2101      	movs	r1, #1
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff ff25 	bl	80079e2 <LCD_Command>
	LCD_Command(LCD_1602, 0x06);  //Increment DDRAM
 8007b98:	2106      	movs	r1, #6
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff ff21 	bl	80079e2 <LCD_Command>
}
 8007ba0:	bf00      	nop
 8007ba2:	3720      	adds	r7, #32
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <LCD_Character>:



void LCD_Character(LCD_Struct_t *LCD_1602, char data) {
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
	char dat = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	737b      	strb	r3, [r7, #13]
	//RS has to be 1 before writing a character
	HAL_GPIO_WritePin(LCD_1602->RS_port, LCD_1602->RS_pin, GPIO_PIN_SET);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6898      	ldr	r0, [r3, #8]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	899b      	ldrh	r3, [r3, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	f7fb fd9c 	bl	8003700 <HAL_GPIO_WritePin>


	// Sending packets of 4 bits (get first 4 bits and set the last 4 to 0)
	dat = (data>>4) & 0x0F;
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	091b      	lsrs	r3, r3, #4
 8007bcc:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 4; i++){
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]
 8007bd2:	e019      	b.n	8007c08 <LCD_Character+0x60>
		HAL_GPIO_WritePin(LCD_1602->dataport[i], LCD_1602->datapin[i], (dat>>i) & 0x01);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	6818      	ldr	r0, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	4413      	add	r3, r2
 8007bea:	8819      	ldrh	r1, [r3, #0]
 8007bec:	7b7a      	ldrb	r2, [r7, #13]
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	fa42 f303 	asr.w	r3, r2, r3
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f7fb fd7f 	bl	8003700 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++){
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	3301      	adds	r3, #1
 8007c06:	73fb      	strb	r3, [r7, #15]
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d9e2      	bls.n	8007bd4 <LCD_Character+0x2c>
	}

	// At the end of every command Enable has to be on for 1ms and then be turned off
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_SET);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6918      	ldr	r0, [r3, #16]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	8a9b      	ldrh	r3, [r3, #20]
 8007c16:	2201      	movs	r2, #1
 8007c18:	4619      	mov	r1, r3
 8007c1a:	f7fb fd71 	bl	8003700 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007c1e:	2001      	movs	r0, #1
 8007c20:	f7fa f816 	bl	8001c50 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_RESET);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6918      	ldr	r0, [r3, #16]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	8a9b      	ldrh	r3, [r3, #20]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	4619      	mov	r1, r3
 8007c30:	f7fb fd66 	bl	8003700 <HAL_GPIO_WritePin>

	//Repeats process for the last 4 bits

	dat = data & 0x0F;
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 4; i++){
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73bb      	strb	r3, [r7, #14]
 8007c40:	e019      	b.n	8007c76 <LCD_Character+0xce>
		HAL_GPIO_WritePin(LCD_1602->dataport[i], LCD_1602->datapin[i], (dat>>i) & 0x01);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	4413      	add	r3, r2
 8007c58:	8819      	ldrh	r1, [r3, #0]
 8007c5a:	7b7a      	ldrb	r2, [r7, #13]
 8007c5c:	7bbb      	ldrb	r3, [r7, #14]
 8007c5e:	fa42 f303 	asr.w	r3, r2, r3
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7fb fd48 	bl	8003700 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++){
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	3301      	adds	r3, #1
 8007c74:	73bb      	strb	r3, [r7, #14]
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d9e2      	bls.n	8007c42 <LCD_Character+0x9a>
	}

	// At the end of every command Enable has to be on for 1ms and then be turned off
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_SET);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6918      	ldr	r0, [r3, #16]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	8a9b      	ldrh	r3, [r3, #20]
 8007c84:	2201      	movs	r2, #1
 8007c86:	4619      	mov	r1, r3
 8007c88:	f7fb fd3a 	bl	8003700 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	f7f9 ffdf 	bl	8001c50 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_RESET);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6918      	ldr	r0, [r3, #16]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	8a9b      	ldrh	r3, [r3, #20]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	f7fb fd2f 	bl	8003700 <HAL_GPIO_WritePin>
}
 8007ca2:	bf00      	nop
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <LCD_PadString>:

//Ensures the string takes up all of the line
static char *LCD_PadString(const char *str) {
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
    static char padded_str[17];
    uint8_t length = strlen(str);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7f8 fa95 	bl	80001e4 <strlen>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73bb      	strb	r3, [r7, #14]
    strcpy(padded_str, str);
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	480d      	ldr	r0, [pc, #52]	; (8007cf8 <LCD_PadString+0x4c>)
 8007cc2:	f001 fb90 	bl	80093e6 <strcpy>
    if (length < 16) {
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b0f      	cmp	r3, #15
 8007cca:	d80f      	bhi.n	8007cec <LCD_PadString+0x40>
        for (uint8_t i = length; i < 16; i++) {
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	73fb      	strb	r3, [r7, #15]
 8007cd0:	e006      	b.n	8007ce0 <LCD_PadString+0x34>
            padded_str[i] = ' ';
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	4a08      	ldr	r2, [pc, #32]	; (8007cf8 <LCD_PadString+0x4c>)
 8007cd6:	2120      	movs	r1, #32
 8007cd8:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = length; i < 16; i++) {
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	73fb      	strb	r3, [r7, #15]
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	2b0f      	cmp	r3, #15
 8007ce4:	d9f5      	bls.n	8007cd2 <LCD_PadString+0x26>
        }
        padded_str[16] = '\0';
 8007ce6:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <LCD_PadString+0x4c>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	741a      	strb	r2, [r3, #16]
    }
    return padded_str;
 8007cec:	4b02      	ldr	r3, [pc, #8]	; (8007cf8 <LCD_PadString+0x4c>)
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	200003c0 	.word	0x200003c0

08007cfc <LCD_String>:

//Writes a string into the current cursor position
void LCD_String(LCD_Struct_t *LCD_1602, char *string) {
 8007cfc:	b590      	push	{r4, r7, lr}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
	char *padded_str = LCD_PadString(string);
 8007d06:	6838      	ldr	r0, [r7, #0]
 8007d08:	f7ff ffd0 	bl	8007cac <LCD_PadString>
 8007d0c:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < strlen(padded_str); i++) {
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
 8007d12:	e00a      	b.n	8007d2a <LCD_String+0x2e>
		LCD_Character(LCD_1602, padded_str[i]);
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	4413      	add	r3, r2
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff ff42 	bl	8007ba8 <LCD_Character>
	for (uint8_t i = 0; i < strlen(padded_str); i++) {
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	3301      	adds	r3, #1
 8007d28:	73fb      	strb	r3, [r7, #15]
 8007d2a:	7bfc      	ldrb	r4, [r7, #15]
 8007d2c:	68b8      	ldr	r0, [r7, #8]
 8007d2e:	f7f8 fa59 	bl	80001e4 <strlen>
 8007d32:	4603      	mov	r3, r0
 8007d34:	429c      	cmp	r4, r3
 8007d36:	d3ed      	bcc.n	8007d14 <LCD_String+0x18>
	}
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd90      	pop	{r4, r7, pc}

08007d42 <LCD_YX>:

//Sets the cursor in position (x, y)
void LCD_YX(LCD_Struct_t *LCD_1602, char x, char y) {
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	70fb      	strb	r3, [r7, #3]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	70bb      	strb	r3, [r7, #2]
	if (x > 0) {
 8007d52:	78fb      	ldrb	r3, [r7, #3]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d007      	beq.n	8007d68 <LCD_YX+0x26>
		LCD_Command(LCD_1602, 0xC0 + y);
 8007d58:	78bb      	ldrb	r3, [r7, #2]
 8007d5a:	3b40      	subs	r3, #64	; 0x40
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff fe3e 	bl	80079e2 <LCD_Command>
	}
	else {
		LCD_Command(LCD_1602, 0x80 + y);
	}
}
 8007d66:	e006      	b.n	8007d76 <LCD_YX+0x34>
		LCD_Command(LCD_1602, 0x80 + y);
 8007d68:	78bb      	ldrb	r3, [r7, #2]
 8007d6a:	3b80      	subs	r3, #128	; 0x80
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fe36 	bl	80079e2 <LCD_Command>
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <uint8_to_char>:


void uint8_to_char(uint8_t* uint_array, char* char_array, uint8_t size) {
 8007d7e:	b480      	push	{r7}
 8007d80:	b087      	sub	sp, #28
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < size; i++) {
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	75fb      	strb	r3, [r7, #23]
 8007d90:	e00a      	b.n	8007da8 <uint8_to_char+0x2a>
        char_array[i] = (char)uint_array[i];
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	441a      	add	r2, r3
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	68b9      	ldr	r1, [r7, #8]
 8007d9c:	440b      	add	r3, r1
 8007d9e:	7812      	ldrb	r2, [r2, #0]
 8007da0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < size; i++) {
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	3301      	adds	r3, #1
 8007da6:	75fb      	strb	r3, [r7, #23]
 8007da8:	7dfa      	ldrb	r2, [r7, #23]
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d3f0      	bcc.n	8007d92 <uint8_to_char+0x14>
    }
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <LCD_Create>:
LCD_Struct_t LCD_Create(
	LCD_PortType port[], LCD_PinType pin[],
	LCD_PortType rs_port, LCD_PinType rs_pin,
	LCD_PortType e_port, LCD_PinType e_pin
)
{
 8007dbe:	b5b0      	push	{r4, r5, r7, lr}
 8007dc0:	b08a      	sub	sp, #40	; 0x28
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	607a      	str	r2, [r7, #4]
 8007dca:	603b      	str	r3, [r7, #0]
	LCD_Struct_t LCD_1602;

	LCD_1602.datapin = pin;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	617b      	str	r3, [r7, #20]
	LCD_1602.dataport = port;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	613b      	str	r3, [r7, #16]

	LCD_1602.RS_pin = rs_pin;
 8007dd4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007dd6:	83bb      	strh	r3, [r7, #28]
	LCD_1602.RS_port = rs_port;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	61bb      	str	r3, [r7, #24]

	LCD_1602.E_pin = e_pin;
 8007ddc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007de0:	84bb      	strh	r3, [r7, #36]	; 0x24
	LCD_1602.E_port = e_port;
 8007de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de4:	623b      	str	r3, [r7, #32]

	LCD_Init(&LCD_1602);
 8007de6:	f107 0310 	add.w	r3, r7, #16
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7ff fe7a 	bl	8007ae4 <LCD_Init>

	return LCD_1602;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	461d      	mov	r5, r3
 8007df4:	f107 0410 	add.w	r4, r7, #16
 8007df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e00:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	3728      	adds	r7, #40	; 0x28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bdb0      	pop	{r4, r5, r7, pc}

08007e0c <SG90_Gpio>:
 */

#include "SG90.h"


static void SG90_Gpio(SG90_Struct_t *Servo) {
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	; 0x28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GpioInit = {0};
 8007e14:	f107 0314 	add.w	r3, r7, #20
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	605a      	str	r2, [r3, #4]
 8007e1e:	609a      	str	r2, [r3, #8]
 8007e20:	60da      	str	r2, [r3, #12]
 8007e22:	611a      	str	r2, [r3, #16]

	if (Servo->SG90_GPIO == GPIOA){
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007e2c:	d10c      	bne.n	8007e48 <SG90_Gpio+0x3c>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007e2e:	4b36      	ldr	r3, [pc, #216]	; (8007f08 <SG90_Gpio+0xfc>)
 8007e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e32:	4a35      	ldr	r2, [pc, #212]	; (8007f08 <SG90_Gpio+0xfc>)
 8007e34:	f043 0301 	orr.w	r3, r3, #1
 8007e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e3a:	4b33      	ldr	r3, [pc, #204]	; (8007f08 <SG90_Gpio+0xfc>)
 8007e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	613b      	str	r3, [r7, #16]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	e022      	b.n	8007e8e <SG90_Gpio+0x82>
	}

	else if (Servo->SG90_GPIO == GPIOB){
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a2f      	ldr	r2, [pc, #188]	; (8007f0c <SG90_Gpio+0x100>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d10c      	bne.n	8007e6c <SG90_Gpio+0x60>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8007e52:	4b2d      	ldr	r3, [pc, #180]	; (8007f08 <SG90_Gpio+0xfc>)
 8007e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e56:	4a2c      	ldr	r2, [pc, #176]	; (8007f08 <SG90_Gpio+0xfc>)
 8007e58:	f043 0302 	orr.w	r3, r3, #2
 8007e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e5e:	4b2a      	ldr	r3, [pc, #168]	; (8007f08 <SG90_Gpio+0xfc>)
 8007e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	e010      	b.n	8007e8e <SG90_Gpio+0x82>
	}

	else if (Servo->SG90_GPIO == GPIOC){
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a27      	ldr	r2, [pc, #156]	; (8007f10 <SG90_Gpio+0x104>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d10b      	bne.n	8007e8e <SG90_Gpio+0x82>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8007e76:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <SG90_Gpio+0xfc>)
 8007e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e7a:	4a23      	ldr	r2, [pc, #140]	; (8007f08 <SG90_Gpio+0xfc>)
 8007e7c:	f043 0304 	orr.w	r3, r3, #4
 8007e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e82:	4b21      	ldr	r3, [pc, #132]	; (8007f08 <SG90_Gpio+0xfc>)
 8007e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e86:	f003 0304 	and.w	r3, r3, #4
 8007e8a:	60bb      	str	r3, [r7, #8]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
	}

	GpioInit.Pin = Servo->SG90_PIN;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	889b      	ldrh	r3, [r3, #4]
 8007e92:	617b      	str	r3, [r7, #20]
	GpioInit.Mode = GPIO_MODE_AF_PP;
 8007e94:	2302      	movs	r3, #2
 8007e96:	61bb      	str	r3, [r7, #24]
	GpioInit.Pull = GPIO_NOPULL;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	61fb      	str	r3, [r7, #28]
	GpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	623b      	str	r3, [r7, #32]

	if (Servo->TIM_Instance == TIM1) {
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	; (8007f14 <SG90_Gpio+0x108>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d102      	bne.n	8007eb0 <SG90_Gpio+0xa4>
		GpioInit.Alternate = GPIO_AF2_TIM1;
 8007eaa:	2302      	movs	r3, #2
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
 8007eae:	e01e      	b.n	8007eee <SG90_Gpio+0xe2>
	}

	else if (Servo->TIM_Instance == TIM2) {
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb8:	d102      	bne.n	8007ec0 <SG90_Gpio+0xb4>
		GpioInit.Alternate = GPIO_AF2_TIM2;
 8007eba:	2302      	movs	r3, #2
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ebe:	e016      	b.n	8007eee <SG90_Gpio+0xe2>
	}

	else if (Servo->TIM_Instance == TIM3) {
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <SG90_Gpio+0x10c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d102      	bne.n	8007ed0 <SG90_Gpio+0xc4>
		GpioInit.Alternate = GPIO_AF2_TIM3;
 8007eca:	2302      	movs	r3, #2
 8007ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ece:	e00e      	b.n	8007eee <SG90_Gpio+0xe2>
	}

	else if (Servo->TIM_Instance == TIM4) {
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	4a11      	ldr	r2, [pc, #68]	; (8007f1c <SG90_Gpio+0x110>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d102      	bne.n	8007ee0 <SG90_Gpio+0xd4>
		GpioInit.Alternate = GPIO_AF2_TIM4;
 8007eda:	2302      	movs	r3, #2
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ede:	e006      	b.n	8007eee <SG90_Gpio+0xe2>
	}

	else if (Servo->TIM_Instance == TIM8) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	4a0e      	ldr	r2, [pc, #56]	; (8007f20 <SG90_Gpio+0x114>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d101      	bne.n	8007eee <SG90_Gpio+0xe2>
		GpioInit.Alternate = GPIO_AF3_TIM8;
 8007eea:	2303      	movs	r3, #3
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
	}


	HAL_GPIO_Init(Servo->SG90_GPIO, &GpioInit);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f107 0214 	add.w	r2, r7, #20
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fb fa57 	bl	80033ac <HAL_GPIO_Init>
}
 8007efe:	bf00      	nop
 8007f00:	3728      	adds	r7, #40	; 0x28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	40021000 	.word	0x40021000
 8007f0c:	48000400 	.word	0x48000400
 8007f10:	48000800 	.word	0x48000800
 8007f14:	40012c00 	.word	0x40012c00
 8007f18:	40000400 	.word	0x40000400
 8007f1c:	40000800 	.word	0x40000800
 8007f20:	40013400 	.word	0x40013400

08007f24 <SG90_Init>:


static void SG90_Init(SG90_Struct_t *Servo) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b092      	sub	sp, #72	; 0x48
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
	SG90_Gpio(Servo);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff ff6d 	bl	8007e0c <SG90_Gpio>

	if (Servo->TIM_Instance == TIM1) {
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	4a5a      	ldr	r2, [pc, #360]	; (80080a0 <SG90_Init+0x17c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d10c      	bne.n	8007f56 <SG90_Init+0x32>
		__HAL_RCC_TIM1_CLK_ENABLE();
 8007f3c:	4b59      	ldr	r3, [pc, #356]	; (80080a4 <SG90_Init+0x180>)
 8007f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f40:	4a58      	ldr	r2, [pc, #352]	; (80080a4 <SG90_Init+0x180>)
 8007f42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f46:	6613      	str	r3, [r2, #96]	; 0x60
 8007f48:	4b56      	ldr	r3, [pc, #344]	; (80080a4 <SG90_Init+0x180>)
 8007f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f50:	61bb      	str	r3, [r7, #24]
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	e046      	b.n	8007fe4 <SG90_Init+0xc0>
	}

	else if (Servo->TIM_Instance == TIM2) {
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5e:	d10c      	bne.n	8007f7a <SG90_Init+0x56>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8007f60:	4b50      	ldr	r3, [pc, #320]	; (80080a4 <SG90_Init+0x180>)
 8007f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f64:	4a4f      	ldr	r2, [pc, #316]	; (80080a4 <SG90_Init+0x180>)
 8007f66:	f043 0301 	orr.w	r3, r3, #1
 8007f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8007f6c:	4b4d      	ldr	r3, [pc, #308]	; (80080a4 <SG90_Init+0x180>)
 8007f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	617b      	str	r3, [r7, #20]
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	e034      	b.n	8007fe4 <SG90_Init+0xc0>
	}

	else if (Servo->TIM_Instance == TIM3) {
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	4a4a      	ldr	r2, [pc, #296]	; (80080a8 <SG90_Init+0x184>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d10c      	bne.n	8007f9e <SG90_Init+0x7a>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8007f84:	4b47      	ldr	r3, [pc, #284]	; (80080a4 <SG90_Init+0x180>)
 8007f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f88:	4a46      	ldr	r2, [pc, #280]	; (80080a4 <SG90_Init+0x180>)
 8007f8a:	f043 0302 	orr.w	r3, r3, #2
 8007f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8007f90:	4b44      	ldr	r3, [pc, #272]	; (80080a4 <SG90_Init+0x180>)
 8007f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	613b      	str	r3, [r7, #16]
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	e022      	b.n	8007fe4 <SG90_Init+0xc0>
	}

	else if (Servo->TIM_Instance == TIM4) {
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	4a42      	ldr	r2, [pc, #264]	; (80080ac <SG90_Init+0x188>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d10c      	bne.n	8007fc2 <SG90_Init+0x9e>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8007fa8:	4b3e      	ldr	r3, [pc, #248]	; (80080a4 <SG90_Init+0x180>)
 8007faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fac:	4a3d      	ldr	r2, [pc, #244]	; (80080a4 <SG90_Init+0x180>)
 8007fae:	f043 0304 	orr.w	r3, r3, #4
 8007fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8007fb4:	4b3b      	ldr	r3, [pc, #236]	; (80080a4 <SG90_Init+0x180>)
 8007fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	e010      	b.n	8007fe4 <SG90_Init+0xc0>
	}

	else if (Servo->TIM_Instance == TIM8) {
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	4a3a      	ldr	r2, [pc, #232]	; (80080b0 <SG90_Init+0x18c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d10b      	bne.n	8007fe4 <SG90_Init+0xc0>
		__HAL_RCC_TIM8_CLK_ENABLE();
 8007fcc:	4b35      	ldr	r3, [pc, #212]	; (80080a4 <SG90_Init+0x180>)
 8007fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd0:	4a34      	ldr	r2, [pc, #208]	; (80080a4 <SG90_Init+0x180>)
 8007fd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fd6:	6613      	str	r3, [r2, #96]	; 0x60
 8007fd8:	4b32      	ldr	r3, [pc, #200]	; (80080a4 <SG90_Init+0x180>)
 8007fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fe0:	60bb      	str	r3, [r7, #8]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
	}


	Servo->TIM_Handle->Instance = Servo->TIM_Instance;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6892      	ldr	r2, [r2, #8]
 8007fec:	601a      	str	r2, [r3, #0]
	Servo->TIM_Handle->Init.Prescaler = 80 - 1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	224f      	movs	r2, #79	; 0x4f
 8007ff4:	605a      	str	r2, [r3, #4]
	Servo->TIM_Handle->Init.Period = 20000 - 1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8007ffe:	60da      	str	r2, [r3, #12]
	Servo->TIM_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2200      	movs	r2, #0
 8008006:	609a      	str	r2, [r3, #8]
	Servo->TIM_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	2200      	movs	r2, #0
 800800e:	611a      	str	r2, [r3, #16]
	Servo->TIM_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2200      	movs	r2, #0
 8008016:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(Servo->TIM_Handle);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	4618      	mov	r0, r3
 800801e:	f7fc febf 	bl	8004da0 <HAL_TIM_Base_Init>

	TIM_ClockConfigTypeDef sClock = {0};
 8008022:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	605a      	str	r2, [r3, #4]
 800802c:	609a      	str	r2, [r3, #8]
 800802e:	60da      	str	r2, [r3, #12]

	sClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008034:	63bb      	str	r3, [r7, #56]	; 0x38

	HAL_TIM_ConfigClockSource(Servo->TIM_Handle, &sClock);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800803e:	4611      	mov	r1, r2
 8008040:	4618      	mov	r0, r3
 8008042:	f7fd f989 	bl	8005358 <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(Servo->TIM_Handle);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	4618      	mov	r0, r3
 800804c:	f7fc ff09 	bl	8004e62 <HAL_TIM_PWM_Init>

	TIM_OC_InitTypeDef Tim_OC = {0};
 8008050:	f107 031c 	add.w	r3, r7, #28
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	605a      	str	r2, [r3, #4]
 800805a:	609a      	str	r2, [r3, #8]
 800805c:	60da      	str	r2, [r3, #12]
 800805e:	611a      	str	r2, [r3, #16]
 8008060:	615a      	str	r2, [r3, #20]
 8008062:	619a      	str	r2, [r3, #24]

	Tim_OC.OCMode = TIM_OCMODE_PWM1;
 8008064:	2360      	movs	r3, #96	; 0x60
 8008066:	61fb      	str	r3, [r7, #28]
	Tim_OC.Pulse = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	623b      	str	r3, [r7, #32]
	Tim_OC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800806c:	2300      	movs	r3, #0
 800806e:	627b      	str	r3, [r7, #36]	; 0x24
	Tim_OC.OCFastMode = TIM_OCFAST_DISABLE;
 8008070:	2300      	movs	r3, #0
 8008072:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_TIM_PWM_ConfigChannel(Servo->TIM_Handle, &Tim_OC, Servo->PWM_TIM_Channel);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6918      	ldr	r0, [r3, #16]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	f107 031c 	add.w	r3, r7, #28
 8008080:	4619      	mov	r1, r3
 8008082:	f7fd f855 	bl	8005130 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(Servo->TIM_Handle, Servo->PWM_TIM_Channel);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691a      	ldr	r2, [r3, #16]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	4619      	mov	r1, r3
 8008090:	4610      	mov	r0, r2
 8008092:	f7fc ff47 	bl	8004f24 <HAL_TIM_PWM_Start>
}
 8008096:	bf00      	nop
 8008098:	3748      	adds	r7, #72	; 0x48
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	40012c00 	.word	0x40012c00
 80080a4:	40021000 	.word	0x40021000
 80080a8:	40000400 	.word	0x40000400
 80080ac:	40000800 	.word	0x40000800
 80080b0:	40013400 	.word	0x40013400

080080b4 <Servo_SetDutyCyle>:


static void Servo_SetDutyCyle(SG90_Struct_t *Servo, float duty_cycle) {
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	ed87 0a00 	vstr	s0, [r7]
	uint16_t ccr_value;

	if (duty_cycle > 100.0f) {
 80080c0:	edd7 7a00 	vldr	s15, [r7]
 80080c4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8008194 <Servo_SetDutyCyle+0xe0>
 80080c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d0:	dd01      	ble.n	80080d6 <Servo_SetDutyCyle+0x22>
		duty_cycle = 100.0f;
 80080d2:	4b31      	ldr	r3, [pc, #196]	; (8008198 <Servo_SetDutyCyle+0xe4>)
 80080d4:	603b      	str	r3, [r7, #0]
	}

	ccr_value = (uint16_t)(__HAL_TIM_GET_AUTORELOAD(Servo->TIM_Handle) + 0.0f) * (duty_cycle/100.0f);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800819c <Servo_SetDutyCyle+0xe8>
 80080ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f2:	ee17 3a90 	vmov	r3, s15
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	ee07 3a90 	vmov	s15, r3
 80080fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008100:	edd7 6a00 	vldr	s13, [r7]
 8008104:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8008194 <Servo_SetDutyCyle+0xe0>
 8008108:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800810c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008114:	ee17 3a90 	vmov	r3, s15
 8008118:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(Servo->TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d105      	bne.n	800812e <Servo_SetDutyCyle+0x7a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	89fa      	ldrh	r2, [r7, #14]
 800812a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800812c:	e02c      	b.n	8008188 <Servo_SetDutyCyle+0xd4>
	__HAL_TIM_SET_COMPARE(Servo->TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	2b04      	cmp	r3, #4
 8008134:	d105      	bne.n	8008142 <Servo_SetDutyCyle+0x8e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	89fb      	ldrh	r3, [r7, #14]
 800813e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008140:	e022      	b.n	8008188 <Servo_SetDutyCyle+0xd4>
	__HAL_TIM_SET_COMPARE(Servo->TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	2b08      	cmp	r3, #8
 8008148:	d105      	bne.n	8008156 <Servo_SetDutyCyle+0xa2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	89fb      	ldrh	r3, [r7, #14]
 8008152:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8008154:	e018      	b.n	8008188 <Servo_SetDutyCyle+0xd4>
	__HAL_TIM_SET_COMPARE(Servo->TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	2b0c      	cmp	r3, #12
 800815c:	d105      	bne.n	800816a <Servo_SetDutyCyle+0xb6>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	89fb      	ldrh	r3, [r7, #14]
 8008166:	6413      	str	r3, [r2, #64]	; 0x40
}
 8008168:	e00e      	b.n	8008188 <Servo_SetDutyCyle+0xd4>
	__HAL_TIM_SET_COMPARE(Servo->TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	2b10      	cmp	r3, #16
 8008170:	d105      	bne.n	800817e <Servo_SetDutyCyle+0xca>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	89fb      	ldrh	r3, [r7, #14]
 800817a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800817c:	e004      	b.n	8008188 <Servo_SetDutyCyle+0xd4>
	__HAL_TIM_SET_COMPARE(Servo->TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	89fb      	ldrh	r3, [r7, #14]
 8008186:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8008188:	bf00      	nop
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	42c80000 	.word	0x42c80000
 8008198:	42c80000 	.word	0x42c80000
 800819c:	00000000 	.word	0x00000000

080081a0 <Servo_Create>:
SG90_Struct_t Servo_Create(
	GPIO_TypeDef *sg90_gpio, uint16_t sg90_pin,
	TIM_TypeDef *tim_Instance, uint32_t pwm_channel,
	TIM_HandleTypeDef *Servo_TIM_Handle
)
{
 80081a0:	b5b0      	push	{r4, r5, r7, lr}
 80081a2:	b08a      	sub	sp, #40	; 0x28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	4613      	mov	r3, r2
 80081ae:	80fb      	strh	r3, [r7, #6]
	SG90_Struct_t Servo;

	Servo.SG90_GPIO = sg90_gpio;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	617b      	str	r3, [r7, #20]
	Servo.SG90_PIN = sg90_pin;
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	833b      	strh	r3, [r7, #24]
	Servo.TIM_Instance = tim_Instance;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	61fb      	str	r3, [r7, #28]
	Servo.PWM_TIM_Channel = pwm_channel;
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	623b      	str	r3, [r7, #32]
	Servo.TIM_Handle = Servo_TIM_Handle;
 80081c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24

	SG90_Init(&Servo);
 80081c4:	f107 0314 	add.w	r3, r7, #20
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7ff feab 	bl	8007f24 <SG90_Init>

	return Servo;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	461d      	mov	r5, r3
 80081d2:	f107 0414 	add.w	r4, r7, #20
 80081d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	602b      	str	r3, [r5, #0]
}
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	3728      	adds	r7, #40	; 0x28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080081e8 <Servo_Rotate>:


void Servo_Rotate(SG90_Struct_t *Servo, float angle) {
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	ed87 0a00 	vstr	s0, [r7]
	float converted_cycle = (angle / 36.0) + 5; //Angles from 0 to 180 get mapped to duty cycles from 5 to 10
 80081f4:	6838      	ldr	r0, [r7, #0]
 80081f6:	f7f8 f9b7 	bl	8000568 <__aeabi_f2d>
 80081fa:	f04f 0200 	mov.w	r2, #0
 80081fe:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <Servo_Rotate+0x50>)
 8008200:	f7f8 fb34 	bl	800086c <__aeabi_ddiv>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4610      	mov	r0, r2
 800820a:	4619      	mov	r1, r3
 800820c:	f04f 0200 	mov.w	r2, #0
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <Servo_Rotate+0x54>)
 8008212:	f7f8 f84b 	bl	80002ac <__adddf3>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	4610      	mov	r0, r2
 800821c:	4619      	mov	r1, r3
 800821e:	f7f8 fcf3 	bl	8000c08 <__aeabi_d2f>
 8008222:	4603      	mov	r3, r0
 8008224:	60fb      	str	r3, [r7, #12]

	Servo_SetDutyCyle(Servo, converted_cycle);
 8008226:	ed97 0a03 	vldr	s0, [r7, #12]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7ff ff42 	bl	80080b4 <Servo_SetDutyCyle>
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40420000 	.word	0x40420000
 800823c:	40140000 	.word	0x40140000

08008240 <SysConfigClock>:
 */

#include "SysConfig.h"


void SysConfigClock(void){
 8008240:	b580      	push	{r7, lr}
 8008242:	b096      	sub	sp, #88	; 0x58
 8008244:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008246:	f107 0314 	add.w	r3, r7, #20
 800824a:	2244      	movs	r2, #68	; 0x44
 800824c:	2100      	movs	r1, #0
 800824e:	4618      	mov	r0, r3
 8008250:	f000 f93a 	bl	80084c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008254:	463b      	mov	r3, r7
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	605a      	str	r2, [r3, #4]
 800825c:	609a      	str	r2, [r3, #8]
 800825e:	60da      	str	r2, [r3, #12]
 8008260:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008262:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008266:	f7fb fa89 	bl	800377c <HAL_PWREx_ControlVoltageScaling>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <SysConfigClock+0x34>
	{
		Error_Handler();
 8008270:	f000 f837 	bl	80082e2 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008274:	2302      	movs	r3, #2
 8008276:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800827c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800827e:	2310      	movs	r3, #16
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008282:	2302      	movs	r3, #2
 8008284:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008286:	2302      	movs	r3, #2
 8008288:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800828a:	2301      	movs	r3, #1
 800828c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800828e:	230a      	movs	r3, #10
 8008290:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008292:	2307      	movs	r3, #7
 8008294:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008296:	2302      	movs	r3, #2
 8008298:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800829a:	2302      	movs	r3, #2
 800829c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800829e:	f107 0314 	add.w	r3, r7, #20
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fb fac0 	bl	8003828 <HAL_RCC_OscConfig>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <SysConfigClock+0x72>
	{
		Error_Handler();
 80082ae:	f000 f818 	bl	80082e2 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80082b2:	230f      	movs	r3, #15
 80082b4:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082b6:	2303      	movs	r3, #3
 80082b8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082ba:	2300      	movs	r3, #0
 80082bc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082c2:	2300      	movs	r3, #0
 80082c4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80082c6:	463b      	mov	r3, r7
 80082c8:	2104      	movs	r1, #4
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fb fe88 	bl	8003fe0 <HAL_RCC_ClockConfig>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <SysConfigClock+0x9a>
	{
		Error_Handler();
 80082d6:	f000 f804 	bl	80082e2 <Error_Handler>
	}
}
 80082da:	bf00      	nop
 80082dc:	3758      	adds	r7, #88	; 0x58
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <Error_Handler>:



void Error_Handler(void)
{
 80082e2:	b480      	push	{r7}
 80082e4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80082e6:	b672      	cpsid	i
}
 80082e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80082ea:	e7fe      	b.n	80082ea <Error_Handler+0x8>

080082ec <__NVIC_EnableIRQ>:
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	4603      	mov	r3, r0
 80082f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	db0b      	blt.n	8008316 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	f003 021f 	and.w	r2, r3, #31
 8008304:	4907      	ldr	r1, [pc, #28]	; (8008324 <__NVIC_EnableIRQ+0x38>)
 8008306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800830a:	095b      	lsrs	r3, r3, #5
 800830c:	2001      	movs	r0, #1
 800830e:	fa00 f202 	lsl.w	r2, r0, r2
 8008312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	e000e100 	.word	0xe000e100

08008328 <__NVIC_SetPriority>:
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	6039      	str	r1, [r7, #0]
 8008332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008338:	2b00      	cmp	r3, #0
 800833a:	db0a      	blt.n	8008352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	b2da      	uxtb	r2, r3
 8008340:	490c      	ldr	r1, [pc, #48]	; (8008374 <__NVIC_SetPriority+0x4c>)
 8008342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008346:	0112      	lsls	r2, r2, #4
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	440b      	add	r3, r1
 800834c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008350:	e00a      	b.n	8008368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	b2da      	uxtb	r2, r3
 8008356:	4908      	ldr	r1, [pc, #32]	; (8008378 <__NVIC_SetPriority+0x50>)
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	f003 030f 	and.w	r3, r3, #15
 800835e:	3b04      	subs	r3, #4
 8008360:	0112      	lsls	r2, r2, #4
 8008362:	b2d2      	uxtb	r2, r2
 8008364:	440b      	add	r3, r1
 8008366:	761a      	strb	r2, [r3, #24]
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	e000e100 	.word	0xe000e100
 8008378:	e000ed00 	.word	0xe000ed00

0800837c <USART_Gpio>:
#include "USART.h"


UART_HandleTypeDef USART2_I;

static void USART_Gpio(void){
 800837c:	b580      	push	{r7, lr}
 800837e:	b0a8      	sub	sp, #160	; 0xa0
 8008380:	af00      	add	r7, sp, #0
	// PA2 -> TX & PA3 -> RX

	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008382:	f107 0318 	add.w	r3, r7, #24
 8008386:	2288      	movs	r2, #136	; 0x88
 8008388:	2100      	movs	r1, #0
 800838a:	4618      	mov	r0, r3
 800838c:	f000 f89c 	bl	80084c8 <memset>

    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008390:	2302      	movs	r3, #2
 8008392:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008394:	2300      	movs	r3, #0
 8008396:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8008398:	f107 0318 	add.w	r3, r7, #24
 800839c:	4618      	mov	r0, r3
 800839e:	f7fc f843 	bl	8004428 <HAL_RCCEx_PeriphCLKConfig>


	GPIO_InitTypeDef GpioInit = {0};
 80083a2:	1d3b      	adds	r3, r7, #4
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	605a      	str	r2, [r3, #4]
 80083aa:	609a      	str	r2, [r3, #8]
 80083ac:	60da      	str	r2, [r3, #12]
 80083ae:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80083b0:	4b13      	ldr	r3, [pc, #76]	; (8008400 <USART_Gpio+0x84>)
 80083b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b4:	4a12      	ldr	r2, [pc, #72]	; (8008400 <USART_Gpio+0x84>)
 80083b6:	f043 0301 	orr.w	r3, r3, #1
 80083ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083bc:	4b10      	ldr	r3, [pc, #64]	; (8008400 <USART_Gpio+0x84>)
 80083be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	603b      	str	r3, [r7, #0]
 80083c6:	683b      	ldr	r3, [r7, #0]

	GpioInit.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80083c8:	230c      	movs	r3, #12
 80083ca:	607b      	str	r3, [r7, #4]
	GpioInit.Mode = GPIO_MODE_AF_PP;
 80083cc:	2302      	movs	r3, #2
 80083ce:	60bb      	str	r3, [r7, #8]
	GpioInit.Pull = GPIO_NOPULL;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
	GpioInit.Speed = GPIO_SPEED_FREQ_HIGH;
 80083d4:	2302      	movs	r3, #2
 80083d6:	613b      	str	r3, [r7, #16]
	GpioInit.Alternate = GPIO_AF7_USART2;
 80083d8:	2307      	movs	r3, #7
 80083da:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOA, &GpioInit);
 80083dc:	1d3b      	adds	r3, r7, #4
 80083de:	4619      	mov	r1, r3
 80083e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80083e4:	f7fa ffe2 	bl	80033ac <HAL_GPIO_Init>

    NVIC_SetPriority(USART2_IRQn, 0);
 80083e8:	2100      	movs	r1, #0
 80083ea:	2026      	movs	r0, #38	; 0x26
 80083ec:	f7ff ff9c 	bl	8008328 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 80083f0:	2026      	movs	r0, #38	; 0x26
 80083f2:	f7ff ff7b 	bl	80082ec <__NVIC_EnableIRQ>

}
 80083f6:	bf00      	nop
 80083f8:	37a0      	adds	r7, #160	; 0xa0
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	40021000 	.word	0x40021000

08008404 <USART_Init>:

void USART_Init(uint32_t baud){
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
	USART_Gpio();
 800840c:	f7ff ffb6 	bl	800837c <USART_Gpio>

	__HAL_RCC_USART2_CLK_ENABLE();
 8008410:	4b15      	ldr	r3, [pc, #84]	; (8008468 <USART_Init+0x64>)
 8008412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008414:	4a14      	ldr	r2, [pc, #80]	; (8008468 <USART_Init+0x64>)
 8008416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800841a:	6593      	str	r3, [r2, #88]	; 0x58
 800841c:	4b12      	ldr	r3, [pc, #72]	; (8008468 <USART_Init+0x64>)
 800841e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	68fb      	ldr	r3, [r7, #12]

	USART2_I.Instance = USART2;
 8008428:	4b10      	ldr	r3, [pc, #64]	; (800846c <USART_Init+0x68>)
 800842a:	4a11      	ldr	r2, [pc, #68]	; (8008470 <USART_Init+0x6c>)
 800842c:	601a      	str	r2, [r3, #0]
	USART2_I.Init.BaudRate = baud;
 800842e:	4a0f      	ldr	r2, [pc, #60]	; (800846c <USART_Init+0x68>)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6053      	str	r3, [r2, #4]
	USART2_I.Init.WordLength = UART_WORDLENGTH_8B;
 8008434:	4b0d      	ldr	r3, [pc, #52]	; (800846c <USART_Init+0x68>)
 8008436:	2200      	movs	r2, #0
 8008438:	609a      	str	r2, [r3, #8]
	USART2_I.Init.StopBits = UART_STOPBITS_1;
 800843a:	4b0c      	ldr	r3, [pc, #48]	; (800846c <USART_Init+0x68>)
 800843c:	2200      	movs	r2, #0
 800843e:	60da      	str	r2, [r3, #12]
	USART2_I.Init.Parity = UART_PARITY_NONE;
 8008440:	4b0a      	ldr	r3, [pc, #40]	; (800846c <USART_Init+0x68>)
 8008442:	2200      	movs	r2, #0
 8008444:	611a      	str	r2, [r3, #16]
	USART2_I.Init.Mode = UART_MODE_TX_RX;
 8008446:	4b09      	ldr	r3, [pc, #36]	; (800846c <USART_Init+0x68>)
 8008448:	220c      	movs	r2, #12
 800844a:	615a      	str	r2, [r3, #20]
	USART2_I.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800844c:	4b07      	ldr	r3, [pc, #28]	; (800846c <USART_Init+0x68>)
 800844e:	2200      	movs	r2, #0
 8008450:	619a      	str	r2, [r3, #24]
	USART2_I.Init.OverSampling = UART_OVERSAMPLING_16;
 8008452:	4b06      	ldr	r3, [pc, #24]	; (800846c <USART_Init+0x68>)
 8008454:	2200      	movs	r2, #0
 8008456:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&USART2_I);
 8008458:	4804      	ldr	r0, [pc, #16]	; (800846c <USART_Init+0x68>)
 800845a:	f7fd fc76 	bl	8005d4a <HAL_UART_Init>
}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	40021000 	.word	0x40021000
 800846c:	200003d4 	.word	0x200003d4
 8008470:	40004400 	.word	0x40004400

08008474 <__errno>:
 8008474:	4b01      	ldr	r3, [pc, #4]	; (800847c <__errno+0x8>)
 8008476:	6818      	ldr	r0, [r3, #0]
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20000024 	.word	0x20000024

08008480 <__libc_init_array>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	4d0d      	ldr	r5, [pc, #52]	; (80084b8 <__libc_init_array+0x38>)
 8008484:	4c0d      	ldr	r4, [pc, #52]	; (80084bc <__libc_init_array+0x3c>)
 8008486:	1b64      	subs	r4, r4, r5
 8008488:	10a4      	asrs	r4, r4, #2
 800848a:	2600      	movs	r6, #0
 800848c:	42a6      	cmp	r6, r4
 800848e:	d109      	bne.n	80084a4 <__libc_init_array+0x24>
 8008490:	4d0b      	ldr	r5, [pc, #44]	; (80084c0 <__libc_init_array+0x40>)
 8008492:	4c0c      	ldr	r4, [pc, #48]	; (80084c4 <__libc_init_array+0x44>)
 8008494:	f006 f862 	bl	800e55c <_init>
 8008498:	1b64      	subs	r4, r4, r5
 800849a:	10a4      	asrs	r4, r4, #2
 800849c:	2600      	movs	r6, #0
 800849e:	42a6      	cmp	r6, r4
 80084a0:	d105      	bne.n	80084ae <__libc_init_array+0x2e>
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
 80084a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a8:	4798      	blx	r3
 80084aa:	3601      	adds	r6, #1
 80084ac:	e7ee      	b.n	800848c <__libc_init_array+0xc>
 80084ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b2:	4798      	blx	r3
 80084b4:	3601      	adds	r6, #1
 80084b6:	e7f2      	b.n	800849e <__libc_init_array+0x1e>
 80084b8:	0800ec10 	.word	0x0800ec10
 80084bc:	0800ec10 	.word	0x0800ec10
 80084c0:	0800ec10 	.word	0x0800ec10
 80084c4:	0800ec14 	.word	0x0800ec14

080084c8 <memset>:
 80084c8:	4402      	add	r2, r0
 80084ca:	4603      	mov	r3, r0
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d100      	bne.n	80084d2 <memset+0xa>
 80084d0:	4770      	bx	lr
 80084d2:	f803 1b01 	strb.w	r1, [r3], #1
 80084d6:	e7f9      	b.n	80084cc <memset+0x4>

080084d8 <__cvt>:
 80084d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084dc:	ec55 4b10 	vmov	r4, r5, d0
 80084e0:	2d00      	cmp	r5, #0
 80084e2:	460e      	mov	r6, r1
 80084e4:	4619      	mov	r1, r3
 80084e6:	462b      	mov	r3, r5
 80084e8:	bfbb      	ittet	lt
 80084ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084ee:	461d      	movlt	r5, r3
 80084f0:	2300      	movge	r3, #0
 80084f2:	232d      	movlt	r3, #45	; 0x2d
 80084f4:	700b      	strb	r3, [r1, #0]
 80084f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80084fc:	4691      	mov	r9, r2
 80084fe:	f023 0820 	bic.w	r8, r3, #32
 8008502:	bfbc      	itt	lt
 8008504:	4622      	movlt	r2, r4
 8008506:	4614      	movlt	r4, r2
 8008508:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800850c:	d005      	beq.n	800851a <__cvt+0x42>
 800850e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008512:	d100      	bne.n	8008516 <__cvt+0x3e>
 8008514:	3601      	adds	r6, #1
 8008516:	2102      	movs	r1, #2
 8008518:	e000      	b.n	800851c <__cvt+0x44>
 800851a:	2103      	movs	r1, #3
 800851c:	ab03      	add	r3, sp, #12
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	ab02      	add	r3, sp, #8
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	ec45 4b10 	vmov	d0, r4, r5
 8008528:	4653      	mov	r3, sl
 800852a:	4632      	mov	r2, r6
 800852c:	f001 ff80 	bl	800a430 <_dtoa_r>
 8008530:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008534:	4607      	mov	r7, r0
 8008536:	d102      	bne.n	800853e <__cvt+0x66>
 8008538:	f019 0f01 	tst.w	r9, #1
 800853c:	d022      	beq.n	8008584 <__cvt+0xac>
 800853e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008542:	eb07 0906 	add.w	r9, r7, r6
 8008546:	d110      	bne.n	800856a <__cvt+0x92>
 8008548:	783b      	ldrb	r3, [r7, #0]
 800854a:	2b30      	cmp	r3, #48	; 0x30
 800854c:	d10a      	bne.n	8008564 <__cvt+0x8c>
 800854e:	2200      	movs	r2, #0
 8008550:	2300      	movs	r3, #0
 8008552:	4620      	mov	r0, r4
 8008554:	4629      	mov	r1, r5
 8008556:	f7f8 fac7 	bl	8000ae8 <__aeabi_dcmpeq>
 800855a:	b918      	cbnz	r0, 8008564 <__cvt+0x8c>
 800855c:	f1c6 0601 	rsb	r6, r6, #1
 8008560:	f8ca 6000 	str.w	r6, [sl]
 8008564:	f8da 3000 	ldr.w	r3, [sl]
 8008568:	4499      	add	r9, r3
 800856a:	2200      	movs	r2, #0
 800856c:	2300      	movs	r3, #0
 800856e:	4620      	mov	r0, r4
 8008570:	4629      	mov	r1, r5
 8008572:	f7f8 fab9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008576:	b108      	cbz	r0, 800857c <__cvt+0xa4>
 8008578:	f8cd 900c 	str.w	r9, [sp, #12]
 800857c:	2230      	movs	r2, #48	; 0x30
 800857e:	9b03      	ldr	r3, [sp, #12]
 8008580:	454b      	cmp	r3, r9
 8008582:	d307      	bcc.n	8008594 <__cvt+0xbc>
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008588:	1bdb      	subs	r3, r3, r7
 800858a:	4638      	mov	r0, r7
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	b004      	add	sp, #16
 8008590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008594:	1c59      	adds	r1, r3, #1
 8008596:	9103      	str	r1, [sp, #12]
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	e7f0      	b.n	800857e <__cvt+0xa6>

0800859c <__exponent>:
 800859c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800859e:	4603      	mov	r3, r0
 80085a0:	2900      	cmp	r1, #0
 80085a2:	bfb8      	it	lt
 80085a4:	4249      	neglt	r1, r1
 80085a6:	f803 2b02 	strb.w	r2, [r3], #2
 80085aa:	bfb4      	ite	lt
 80085ac:	222d      	movlt	r2, #45	; 0x2d
 80085ae:	222b      	movge	r2, #43	; 0x2b
 80085b0:	2909      	cmp	r1, #9
 80085b2:	7042      	strb	r2, [r0, #1]
 80085b4:	dd2a      	ble.n	800860c <__exponent+0x70>
 80085b6:	f10d 0407 	add.w	r4, sp, #7
 80085ba:	46a4      	mov	ip, r4
 80085bc:	270a      	movs	r7, #10
 80085be:	46a6      	mov	lr, r4
 80085c0:	460a      	mov	r2, r1
 80085c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80085c6:	fb07 1516 	mls	r5, r7, r6, r1
 80085ca:	3530      	adds	r5, #48	; 0x30
 80085cc:	2a63      	cmp	r2, #99	; 0x63
 80085ce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80085d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085d6:	4631      	mov	r1, r6
 80085d8:	dcf1      	bgt.n	80085be <__exponent+0x22>
 80085da:	3130      	adds	r1, #48	; 0x30
 80085dc:	f1ae 0502 	sub.w	r5, lr, #2
 80085e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085e4:	1c44      	adds	r4, r0, #1
 80085e6:	4629      	mov	r1, r5
 80085e8:	4561      	cmp	r1, ip
 80085ea:	d30a      	bcc.n	8008602 <__exponent+0x66>
 80085ec:	f10d 0209 	add.w	r2, sp, #9
 80085f0:	eba2 020e 	sub.w	r2, r2, lr
 80085f4:	4565      	cmp	r5, ip
 80085f6:	bf88      	it	hi
 80085f8:	2200      	movhi	r2, #0
 80085fa:	4413      	add	r3, r2
 80085fc:	1a18      	subs	r0, r3, r0
 80085fe:	b003      	add	sp, #12
 8008600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008606:	f804 2f01 	strb.w	r2, [r4, #1]!
 800860a:	e7ed      	b.n	80085e8 <__exponent+0x4c>
 800860c:	2330      	movs	r3, #48	; 0x30
 800860e:	3130      	adds	r1, #48	; 0x30
 8008610:	7083      	strb	r3, [r0, #2]
 8008612:	70c1      	strb	r1, [r0, #3]
 8008614:	1d03      	adds	r3, r0, #4
 8008616:	e7f1      	b.n	80085fc <__exponent+0x60>

08008618 <_printf_float>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	ed2d 8b02 	vpush	{d8}
 8008620:	b08d      	sub	sp, #52	; 0x34
 8008622:	460c      	mov	r4, r1
 8008624:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008628:	4616      	mov	r6, r2
 800862a:	461f      	mov	r7, r3
 800862c:	4605      	mov	r5, r0
 800862e:	f003 fa13 	bl	800ba58 <_localeconv_r>
 8008632:	f8d0 a000 	ldr.w	sl, [r0]
 8008636:	4650      	mov	r0, sl
 8008638:	f7f7 fdd4 	bl	80001e4 <strlen>
 800863c:	2300      	movs	r3, #0
 800863e:	930a      	str	r3, [sp, #40]	; 0x28
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	9305      	str	r3, [sp, #20]
 8008644:	f8d8 3000 	ldr.w	r3, [r8]
 8008648:	f894 b018 	ldrb.w	fp, [r4, #24]
 800864c:	3307      	adds	r3, #7
 800864e:	f023 0307 	bic.w	r3, r3, #7
 8008652:	f103 0208 	add.w	r2, r3, #8
 8008656:	f8c8 2000 	str.w	r2, [r8]
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008662:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008666:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800866a:	9307      	str	r3, [sp, #28]
 800866c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008670:	ee08 0a10 	vmov	s16, r0
 8008674:	4b9f      	ldr	r3, [pc, #636]	; (80088f4 <_printf_float+0x2dc>)
 8008676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800867a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800867e:	f7f8 fa65 	bl	8000b4c <__aeabi_dcmpun>
 8008682:	bb88      	cbnz	r0, 80086e8 <_printf_float+0xd0>
 8008684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008688:	4b9a      	ldr	r3, [pc, #616]	; (80088f4 <_printf_float+0x2dc>)
 800868a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800868e:	f7f8 fa3f 	bl	8000b10 <__aeabi_dcmple>
 8008692:	bb48      	cbnz	r0, 80086e8 <_printf_float+0xd0>
 8008694:	2200      	movs	r2, #0
 8008696:	2300      	movs	r3, #0
 8008698:	4640      	mov	r0, r8
 800869a:	4649      	mov	r1, r9
 800869c:	f7f8 fa2e 	bl	8000afc <__aeabi_dcmplt>
 80086a0:	b110      	cbz	r0, 80086a8 <_printf_float+0x90>
 80086a2:	232d      	movs	r3, #45	; 0x2d
 80086a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a8:	4b93      	ldr	r3, [pc, #588]	; (80088f8 <_printf_float+0x2e0>)
 80086aa:	4894      	ldr	r0, [pc, #592]	; (80088fc <_printf_float+0x2e4>)
 80086ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086b0:	bf94      	ite	ls
 80086b2:	4698      	movls	r8, r3
 80086b4:	4680      	movhi	r8, r0
 80086b6:	2303      	movs	r3, #3
 80086b8:	6123      	str	r3, [r4, #16]
 80086ba:	9b05      	ldr	r3, [sp, #20]
 80086bc:	f023 0204 	bic.w	r2, r3, #4
 80086c0:	6022      	str	r2, [r4, #0]
 80086c2:	f04f 0900 	mov.w	r9, #0
 80086c6:	9700      	str	r7, [sp, #0]
 80086c8:	4633      	mov	r3, r6
 80086ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80086cc:	4621      	mov	r1, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 f9d8 	bl	8008a84 <_printf_common>
 80086d4:	3001      	adds	r0, #1
 80086d6:	f040 8090 	bne.w	80087fa <_printf_float+0x1e2>
 80086da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086de:	b00d      	add	sp, #52	; 0x34
 80086e0:	ecbd 8b02 	vpop	{d8}
 80086e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e8:	4642      	mov	r2, r8
 80086ea:	464b      	mov	r3, r9
 80086ec:	4640      	mov	r0, r8
 80086ee:	4649      	mov	r1, r9
 80086f0:	f7f8 fa2c 	bl	8000b4c <__aeabi_dcmpun>
 80086f4:	b140      	cbz	r0, 8008708 <_printf_float+0xf0>
 80086f6:	464b      	mov	r3, r9
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bfbc      	itt	lt
 80086fc:	232d      	movlt	r3, #45	; 0x2d
 80086fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008702:	487f      	ldr	r0, [pc, #508]	; (8008900 <_printf_float+0x2e8>)
 8008704:	4b7f      	ldr	r3, [pc, #508]	; (8008904 <_printf_float+0x2ec>)
 8008706:	e7d1      	b.n	80086ac <_printf_float+0x94>
 8008708:	6863      	ldr	r3, [r4, #4]
 800870a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800870e:	9206      	str	r2, [sp, #24]
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	d13f      	bne.n	8008794 <_printf_float+0x17c>
 8008714:	2306      	movs	r3, #6
 8008716:	6063      	str	r3, [r4, #4]
 8008718:	9b05      	ldr	r3, [sp, #20]
 800871a:	6861      	ldr	r1, [r4, #4]
 800871c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008720:	2300      	movs	r3, #0
 8008722:	9303      	str	r3, [sp, #12]
 8008724:	ab0a      	add	r3, sp, #40	; 0x28
 8008726:	e9cd b301 	strd	fp, r3, [sp, #4]
 800872a:	ab09      	add	r3, sp, #36	; 0x24
 800872c:	ec49 8b10 	vmov	d0, r8, r9
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	6022      	str	r2, [r4, #0]
 8008734:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008738:	4628      	mov	r0, r5
 800873a:	f7ff fecd 	bl	80084d8 <__cvt>
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008742:	2b47      	cmp	r3, #71	; 0x47
 8008744:	4680      	mov	r8, r0
 8008746:	d108      	bne.n	800875a <_printf_float+0x142>
 8008748:	1cc8      	adds	r0, r1, #3
 800874a:	db02      	blt.n	8008752 <_printf_float+0x13a>
 800874c:	6863      	ldr	r3, [r4, #4]
 800874e:	4299      	cmp	r1, r3
 8008750:	dd41      	ble.n	80087d6 <_printf_float+0x1be>
 8008752:	f1ab 0b02 	sub.w	fp, fp, #2
 8008756:	fa5f fb8b 	uxtb.w	fp, fp
 800875a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800875e:	d820      	bhi.n	80087a2 <_printf_float+0x18a>
 8008760:	3901      	subs	r1, #1
 8008762:	465a      	mov	r2, fp
 8008764:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008768:	9109      	str	r1, [sp, #36]	; 0x24
 800876a:	f7ff ff17 	bl	800859c <__exponent>
 800876e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008770:	1813      	adds	r3, r2, r0
 8008772:	2a01      	cmp	r2, #1
 8008774:	4681      	mov	r9, r0
 8008776:	6123      	str	r3, [r4, #16]
 8008778:	dc02      	bgt.n	8008780 <_printf_float+0x168>
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	07d2      	lsls	r2, r2, #31
 800877e:	d501      	bpl.n	8008784 <_printf_float+0x16c>
 8008780:	3301      	adds	r3, #1
 8008782:	6123      	str	r3, [r4, #16]
 8008784:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008788:	2b00      	cmp	r3, #0
 800878a:	d09c      	beq.n	80086c6 <_printf_float+0xae>
 800878c:	232d      	movs	r3, #45	; 0x2d
 800878e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008792:	e798      	b.n	80086c6 <_printf_float+0xae>
 8008794:	9a06      	ldr	r2, [sp, #24]
 8008796:	2a47      	cmp	r2, #71	; 0x47
 8008798:	d1be      	bne.n	8008718 <_printf_float+0x100>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1bc      	bne.n	8008718 <_printf_float+0x100>
 800879e:	2301      	movs	r3, #1
 80087a0:	e7b9      	b.n	8008716 <_printf_float+0xfe>
 80087a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087a6:	d118      	bne.n	80087da <_printf_float+0x1c2>
 80087a8:	2900      	cmp	r1, #0
 80087aa:	6863      	ldr	r3, [r4, #4]
 80087ac:	dd0b      	ble.n	80087c6 <_printf_float+0x1ae>
 80087ae:	6121      	str	r1, [r4, #16]
 80087b0:	b913      	cbnz	r3, 80087b8 <_printf_float+0x1a0>
 80087b2:	6822      	ldr	r2, [r4, #0]
 80087b4:	07d0      	lsls	r0, r2, #31
 80087b6:	d502      	bpl.n	80087be <_printf_float+0x1a6>
 80087b8:	3301      	adds	r3, #1
 80087ba:	440b      	add	r3, r1
 80087bc:	6123      	str	r3, [r4, #16]
 80087be:	65a1      	str	r1, [r4, #88]	; 0x58
 80087c0:	f04f 0900 	mov.w	r9, #0
 80087c4:	e7de      	b.n	8008784 <_printf_float+0x16c>
 80087c6:	b913      	cbnz	r3, 80087ce <_printf_float+0x1b6>
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	07d2      	lsls	r2, r2, #31
 80087cc:	d501      	bpl.n	80087d2 <_printf_float+0x1ba>
 80087ce:	3302      	adds	r3, #2
 80087d0:	e7f4      	b.n	80087bc <_printf_float+0x1a4>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e7f2      	b.n	80087bc <_printf_float+0x1a4>
 80087d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087dc:	4299      	cmp	r1, r3
 80087de:	db05      	blt.n	80087ec <_printf_float+0x1d4>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	6121      	str	r1, [r4, #16]
 80087e4:	07d8      	lsls	r0, r3, #31
 80087e6:	d5ea      	bpl.n	80087be <_printf_float+0x1a6>
 80087e8:	1c4b      	adds	r3, r1, #1
 80087ea:	e7e7      	b.n	80087bc <_printf_float+0x1a4>
 80087ec:	2900      	cmp	r1, #0
 80087ee:	bfd4      	ite	le
 80087f0:	f1c1 0202 	rsble	r2, r1, #2
 80087f4:	2201      	movgt	r2, #1
 80087f6:	4413      	add	r3, r2
 80087f8:	e7e0      	b.n	80087bc <_printf_float+0x1a4>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	055a      	lsls	r2, r3, #21
 80087fe:	d407      	bmi.n	8008810 <_printf_float+0x1f8>
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	4642      	mov	r2, r8
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	d12c      	bne.n	8008868 <_printf_float+0x250>
 800880e:	e764      	b.n	80086da <_printf_float+0xc2>
 8008810:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008814:	f240 80e0 	bls.w	80089d8 <_printf_float+0x3c0>
 8008818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800881c:	2200      	movs	r2, #0
 800881e:	2300      	movs	r3, #0
 8008820:	f7f8 f962 	bl	8000ae8 <__aeabi_dcmpeq>
 8008824:	2800      	cmp	r0, #0
 8008826:	d034      	beq.n	8008892 <_printf_float+0x27a>
 8008828:	4a37      	ldr	r2, [pc, #220]	; (8008908 <_printf_float+0x2f0>)
 800882a:	2301      	movs	r3, #1
 800882c:	4631      	mov	r1, r6
 800882e:	4628      	mov	r0, r5
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	f43f af51 	beq.w	80086da <_printf_float+0xc2>
 8008838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800883c:	429a      	cmp	r2, r3
 800883e:	db02      	blt.n	8008846 <_printf_float+0x22e>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	07d8      	lsls	r0, r3, #31
 8008844:	d510      	bpl.n	8008868 <_printf_float+0x250>
 8008846:	ee18 3a10 	vmov	r3, s16
 800884a:	4652      	mov	r2, sl
 800884c:	4631      	mov	r1, r6
 800884e:	4628      	mov	r0, r5
 8008850:	47b8      	blx	r7
 8008852:	3001      	adds	r0, #1
 8008854:	f43f af41 	beq.w	80086da <_printf_float+0xc2>
 8008858:	f04f 0800 	mov.w	r8, #0
 800885c:	f104 091a 	add.w	r9, r4, #26
 8008860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008862:	3b01      	subs	r3, #1
 8008864:	4543      	cmp	r3, r8
 8008866:	dc09      	bgt.n	800887c <_printf_float+0x264>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	079b      	lsls	r3, r3, #30
 800886c:	f100 8105 	bmi.w	8008a7a <_printf_float+0x462>
 8008870:	68e0      	ldr	r0, [r4, #12]
 8008872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008874:	4298      	cmp	r0, r3
 8008876:	bfb8      	it	lt
 8008878:	4618      	movlt	r0, r3
 800887a:	e730      	b.n	80086de <_printf_float+0xc6>
 800887c:	2301      	movs	r3, #1
 800887e:	464a      	mov	r2, r9
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	f43f af27 	beq.w	80086da <_printf_float+0xc2>
 800888c:	f108 0801 	add.w	r8, r8, #1
 8008890:	e7e6      	b.n	8008860 <_printf_float+0x248>
 8008892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	dc39      	bgt.n	800890c <_printf_float+0x2f4>
 8008898:	4a1b      	ldr	r2, [pc, #108]	; (8008908 <_printf_float+0x2f0>)
 800889a:	2301      	movs	r3, #1
 800889c:	4631      	mov	r1, r6
 800889e:	4628      	mov	r0, r5
 80088a0:	47b8      	blx	r7
 80088a2:	3001      	adds	r0, #1
 80088a4:	f43f af19 	beq.w	80086da <_printf_float+0xc2>
 80088a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ac:	4313      	orrs	r3, r2
 80088ae:	d102      	bne.n	80088b6 <_printf_float+0x29e>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	07d9      	lsls	r1, r3, #31
 80088b4:	d5d8      	bpl.n	8008868 <_printf_float+0x250>
 80088b6:	ee18 3a10 	vmov	r3, s16
 80088ba:	4652      	mov	r2, sl
 80088bc:	4631      	mov	r1, r6
 80088be:	4628      	mov	r0, r5
 80088c0:	47b8      	blx	r7
 80088c2:	3001      	adds	r0, #1
 80088c4:	f43f af09 	beq.w	80086da <_printf_float+0xc2>
 80088c8:	f04f 0900 	mov.w	r9, #0
 80088cc:	f104 0a1a 	add.w	sl, r4, #26
 80088d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d2:	425b      	negs	r3, r3
 80088d4:	454b      	cmp	r3, r9
 80088d6:	dc01      	bgt.n	80088dc <_printf_float+0x2c4>
 80088d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088da:	e792      	b.n	8008802 <_printf_float+0x1ea>
 80088dc:	2301      	movs	r3, #1
 80088de:	4652      	mov	r2, sl
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	f43f aef7 	beq.w	80086da <_printf_float+0xc2>
 80088ec:	f109 0901 	add.w	r9, r9, #1
 80088f0:	e7ee      	b.n	80088d0 <_printf_float+0x2b8>
 80088f2:	bf00      	nop
 80088f4:	7fefffff 	.word	0x7fefffff
 80088f8:	0800e718 	.word	0x0800e718
 80088fc:	0800e71c 	.word	0x0800e71c
 8008900:	0800e724 	.word	0x0800e724
 8008904:	0800e720 	.word	0x0800e720
 8008908:	0800eb81 	.word	0x0800eb81
 800890c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800890e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008910:	429a      	cmp	r2, r3
 8008912:	bfa8      	it	ge
 8008914:	461a      	movge	r2, r3
 8008916:	2a00      	cmp	r2, #0
 8008918:	4691      	mov	r9, r2
 800891a:	dc37      	bgt.n	800898c <_printf_float+0x374>
 800891c:	f04f 0b00 	mov.w	fp, #0
 8008920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008924:	f104 021a 	add.w	r2, r4, #26
 8008928:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800892a:	9305      	str	r3, [sp, #20]
 800892c:	eba3 0309 	sub.w	r3, r3, r9
 8008930:	455b      	cmp	r3, fp
 8008932:	dc33      	bgt.n	800899c <_printf_float+0x384>
 8008934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008938:	429a      	cmp	r2, r3
 800893a:	db3b      	blt.n	80089b4 <_printf_float+0x39c>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	07da      	lsls	r2, r3, #31
 8008940:	d438      	bmi.n	80089b4 <_printf_float+0x39c>
 8008942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008944:	9a05      	ldr	r2, [sp, #20]
 8008946:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008948:	1a9a      	subs	r2, r3, r2
 800894a:	eba3 0901 	sub.w	r9, r3, r1
 800894e:	4591      	cmp	r9, r2
 8008950:	bfa8      	it	ge
 8008952:	4691      	movge	r9, r2
 8008954:	f1b9 0f00 	cmp.w	r9, #0
 8008958:	dc35      	bgt.n	80089c6 <_printf_float+0x3ae>
 800895a:	f04f 0800 	mov.w	r8, #0
 800895e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008962:	f104 0a1a 	add.w	sl, r4, #26
 8008966:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800896a:	1a9b      	subs	r3, r3, r2
 800896c:	eba3 0309 	sub.w	r3, r3, r9
 8008970:	4543      	cmp	r3, r8
 8008972:	f77f af79 	ble.w	8008868 <_printf_float+0x250>
 8008976:	2301      	movs	r3, #1
 8008978:	4652      	mov	r2, sl
 800897a:	4631      	mov	r1, r6
 800897c:	4628      	mov	r0, r5
 800897e:	47b8      	blx	r7
 8008980:	3001      	adds	r0, #1
 8008982:	f43f aeaa 	beq.w	80086da <_printf_float+0xc2>
 8008986:	f108 0801 	add.w	r8, r8, #1
 800898a:	e7ec      	b.n	8008966 <_printf_float+0x34e>
 800898c:	4613      	mov	r3, r2
 800898e:	4631      	mov	r1, r6
 8008990:	4642      	mov	r2, r8
 8008992:	4628      	mov	r0, r5
 8008994:	47b8      	blx	r7
 8008996:	3001      	adds	r0, #1
 8008998:	d1c0      	bne.n	800891c <_printf_float+0x304>
 800899a:	e69e      	b.n	80086da <_printf_float+0xc2>
 800899c:	2301      	movs	r3, #1
 800899e:	4631      	mov	r1, r6
 80089a0:	4628      	mov	r0, r5
 80089a2:	9205      	str	r2, [sp, #20]
 80089a4:	47b8      	blx	r7
 80089a6:	3001      	adds	r0, #1
 80089a8:	f43f ae97 	beq.w	80086da <_printf_float+0xc2>
 80089ac:	9a05      	ldr	r2, [sp, #20]
 80089ae:	f10b 0b01 	add.w	fp, fp, #1
 80089b2:	e7b9      	b.n	8008928 <_printf_float+0x310>
 80089b4:	ee18 3a10 	vmov	r3, s16
 80089b8:	4652      	mov	r2, sl
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	d1be      	bne.n	8008942 <_printf_float+0x32a>
 80089c4:	e689      	b.n	80086da <_printf_float+0xc2>
 80089c6:	9a05      	ldr	r2, [sp, #20]
 80089c8:	464b      	mov	r3, r9
 80089ca:	4442      	add	r2, r8
 80089cc:	4631      	mov	r1, r6
 80089ce:	4628      	mov	r0, r5
 80089d0:	47b8      	blx	r7
 80089d2:	3001      	adds	r0, #1
 80089d4:	d1c1      	bne.n	800895a <_printf_float+0x342>
 80089d6:	e680      	b.n	80086da <_printf_float+0xc2>
 80089d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089da:	2a01      	cmp	r2, #1
 80089dc:	dc01      	bgt.n	80089e2 <_printf_float+0x3ca>
 80089de:	07db      	lsls	r3, r3, #31
 80089e0:	d538      	bpl.n	8008a54 <_printf_float+0x43c>
 80089e2:	2301      	movs	r3, #1
 80089e4:	4642      	mov	r2, r8
 80089e6:	4631      	mov	r1, r6
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b8      	blx	r7
 80089ec:	3001      	adds	r0, #1
 80089ee:	f43f ae74 	beq.w	80086da <_printf_float+0xc2>
 80089f2:	ee18 3a10 	vmov	r3, s16
 80089f6:	4652      	mov	r2, sl
 80089f8:	4631      	mov	r1, r6
 80089fa:	4628      	mov	r0, r5
 80089fc:	47b8      	blx	r7
 80089fe:	3001      	adds	r0, #1
 8008a00:	f43f ae6b 	beq.w	80086da <_printf_float+0xc2>
 8008a04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f7f8 f86c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a10:	b9d8      	cbnz	r0, 8008a4a <_printf_float+0x432>
 8008a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a14:	f108 0201 	add.w	r2, r8, #1
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	47b8      	blx	r7
 8008a20:	3001      	adds	r0, #1
 8008a22:	d10e      	bne.n	8008a42 <_printf_float+0x42a>
 8008a24:	e659      	b.n	80086da <_printf_float+0xc2>
 8008a26:	2301      	movs	r3, #1
 8008a28:	4652      	mov	r2, sl
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	47b8      	blx	r7
 8008a30:	3001      	adds	r0, #1
 8008a32:	f43f ae52 	beq.w	80086da <_printf_float+0xc2>
 8008a36:	f108 0801 	add.w	r8, r8, #1
 8008a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	4543      	cmp	r3, r8
 8008a40:	dcf1      	bgt.n	8008a26 <_printf_float+0x40e>
 8008a42:	464b      	mov	r3, r9
 8008a44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a48:	e6dc      	b.n	8008804 <_printf_float+0x1ec>
 8008a4a:	f04f 0800 	mov.w	r8, #0
 8008a4e:	f104 0a1a 	add.w	sl, r4, #26
 8008a52:	e7f2      	b.n	8008a3a <_printf_float+0x422>
 8008a54:	2301      	movs	r3, #1
 8008a56:	4642      	mov	r2, r8
 8008a58:	e7df      	b.n	8008a1a <_printf_float+0x402>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	464a      	mov	r2, r9
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	f43f ae38 	beq.w	80086da <_printf_float+0xc2>
 8008a6a:	f108 0801 	add.w	r8, r8, #1
 8008a6e:	68e3      	ldr	r3, [r4, #12]
 8008a70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a72:	1a5b      	subs	r3, r3, r1
 8008a74:	4543      	cmp	r3, r8
 8008a76:	dcf0      	bgt.n	8008a5a <_printf_float+0x442>
 8008a78:	e6fa      	b.n	8008870 <_printf_float+0x258>
 8008a7a:	f04f 0800 	mov.w	r8, #0
 8008a7e:	f104 0919 	add.w	r9, r4, #25
 8008a82:	e7f4      	b.n	8008a6e <_printf_float+0x456>

08008a84 <_printf_common>:
 8008a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a88:	4616      	mov	r6, r2
 8008a8a:	4699      	mov	r9, r3
 8008a8c:	688a      	ldr	r2, [r1, #8]
 8008a8e:	690b      	ldr	r3, [r1, #16]
 8008a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a94:	4293      	cmp	r3, r2
 8008a96:	bfb8      	it	lt
 8008a98:	4613      	movlt	r3, r2
 8008a9a:	6033      	str	r3, [r6, #0]
 8008a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008aa0:	4607      	mov	r7, r0
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	b10a      	cbz	r2, 8008aaa <_printf_common+0x26>
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	6033      	str	r3, [r6, #0]
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	0699      	lsls	r1, r3, #26
 8008aae:	bf42      	ittt	mi
 8008ab0:	6833      	ldrmi	r3, [r6, #0]
 8008ab2:	3302      	addmi	r3, #2
 8008ab4:	6033      	strmi	r3, [r6, #0]
 8008ab6:	6825      	ldr	r5, [r4, #0]
 8008ab8:	f015 0506 	ands.w	r5, r5, #6
 8008abc:	d106      	bne.n	8008acc <_printf_common+0x48>
 8008abe:	f104 0a19 	add.w	sl, r4, #25
 8008ac2:	68e3      	ldr	r3, [r4, #12]
 8008ac4:	6832      	ldr	r2, [r6, #0]
 8008ac6:	1a9b      	subs	r3, r3, r2
 8008ac8:	42ab      	cmp	r3, r5
 8008aca:	dc26      	bgt.n	8008b1a <_printf_common+0x96>
 8008acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ad0:	1e13      	subs	r3, r2, #0
 8008ad2:	6822      	ldr	r2, [r4, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	2301      	movne	r3, #1
 8008ad8:	0692      	lsls	r2, r2, #26
 8008ada:	d42b      	bmi.n	8008b34 <_printf_common+0xb0>
 8008adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	47c0      	blx	r8
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d01e      	beq.n	8008b28 <_printf_common+0xa4>
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	68e5      	ldr	r5, [r4, #12]
 8008aee:	6832      	ldr	r2, [r6, #0]
 8008af0:	f003 0306 	and.w	r3, r3, #6
 8008af4:	2b04      	cmp	r3, #4
 8008af6:	bf08      	it	eq
 8008af8:	1aad      	subeq	r5, r5, r2
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	6922      	ldr	r2, [r4, #16]
 8008afe:	bf0c      	ite	eq
 8008b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b04:	2500      	movne	r5, #0
 8008b06:	4293      	cmp	r3, r2
 8008b08:	bfc4      	itt	gt
 8008b0a:	1a9b      	subgt	r3, r3, r2
 8008b0c:	18ed      	addgt	r5, r5, r3
 8008b0e:	2600      	movs	r6, #0
 8008b10:	341a      	adds	r4, #26
 8008b12:	42b5      	cmp	r5, r6
 8008b14:	d11a      	bne.n	8008b4c <_printf_common+0xc8>
 8008b16:	2000      	movs	r0, #0
 8008b18:	e008      	b.n	8008b2c <_printf_common+0xa8>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	4652      	mov	r2, sl
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4638      	mov	r0, r7
 8008b22:	47c0      	blx	r8
 8008b24:	3001      	adds	r0, #1
 8008b26:	d103      	bne.n	8008b30 <_printf_common+0xac>
 8008b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b30:	3501      	adds	r5, #1
 8008b32:	e7c6      	b.n	8008ac2 <_printf_common+0x3e>
 8008b34:	18e1      	adds	r1, r4, r3
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	2030      	movs	r0, #48	; 0x30
 8008b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b3e:	4422      	add	r2, r4
 8008b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b48:	3302      	adds	r3, #2
 8008b4a:	e7c7      	b.n	8008adc <_printf_common+0x58>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	4622      	mov	r2, r4
 8008b50:	4649      	mov	r1, r9
 8008b52:	4638      	mov	r0, r7
 8008b54:	47c0      	blx	r8
 8008b56:	3001      	adds	r0, #1
 8008b58:	d0e6      	beq.n	8008b28 <_printf_common+0xa4>
 8008b5a:	3601      	adds	r6, #1
 8008b5c:	e7d9      	b.n	8008b12 <_printf_common+0x8e>
	...

08008b60 <_printf_i>:
 8008b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	7e0f      	ldrb	r7, [r1, #24]
 8008b66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b68:	2f78      	cmp	r7, #120	; 0x78
 8008b6a:	4691      	mov	r9, r2
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	460c      	mov	r4, r1
 8008b70:	469a      	mov	sl, r3
 8008b72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b76:	d807      	bhi.n	8008b88 <_printf_i+0x28>
 8008b78:	2f62      	cmp	r7, #98	; 0x62
 8008b7a:	d80a      	bhi.n	8008b92 <_printf_i+0x32>
 8008b7c:	2f00      	cmp	r7, #0
 8008b7e:	f000 80d8 	beq.w	8008d32 <_printf_i+0x1d2>
 8008b82:	2f58      	cmp	r7, #88	; 0x58
 8008b84:	f000 80a3 	beq.w	8008cce <_printf_i+0x16e>
 8008b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b90:	e03a      	b.n	8008c08 <_printf_i+0xa8>
 8008b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b96:	2b15      	cmp	r3, #21
 8008b98:	d8f6      	bhi.n	8008b88 <_printf_i+0x28>
 8008b9a:	a101      	add	r1, pc, #4	; (adr r1, 8008ba0 <_printf_i+0x40>)
 8008b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ba0:	08008bf9 	.word	0x08008bf9
 8008ba4:	08008c0d 	.word	0x08008c0d
 8008ba8:	08008b89 	.word	0x08008b89
 8008bac:	08008b89 	.word	0x08008b89
 8008bb0:	08008b89 	.word	0x08008b89
 8008bb4:	08008b89 	.word	0x08008b89
 8008bb8:	08008c0d 	.word	0x08008c0d
 8008bbc:	08008b89 	.word	0x08008b89
 8008bc0:	08008b89 	.word	0x08008b89
 8008bc4:	08008b89 	.word	0x08008b89
 8008bc8:	08008b89 	.word	0x08008b89
 8008bcc:	08008d19 	.word	0x08008d19
 8008bd0:	08008c3d 	.word	0x08008c3d
 8008bd4:	08008cfb 	.word	0x08008cfb
 8008bd8:	08008b89 	.word	0x08008b89
 8008bdc:	08008b89 	.word	0x08008b89
 8008be0:	08008d3b 	.word	0x08008d3b
 8008be4:	08008b89 	.word	0x08008b89
 8008be8:	08008c3d 	.word	0x08008c3d
 8008bec:	08008b89 	.word	0x08008b89
 8008bf0:	08008b89 	.word	0x08008b89
 8008bf4:	08008d03 	.word	0x08008d03
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	1d1a      	adds	r2, r3, #4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	602a      	str	r2, [r5, #0]
 8008c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e0a3      	b.n	8008d54 <_printf_i+0x1f4>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	6829      	ldr	r1, [r5, #0]
 8008c10:	0606      	lsls	r6, r0, #24
 8008c12:	f101 0304 	add.w	r3, r1, #4
 8008c16:	d50a      	bpl.n	8008c2e <_printf_i+0xce>
 8008c18:	680e      	ldr	r6, [r1, #0]
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	2e00      	cmp	r6, #0
 8008c1e:	da03      	bge.n	8008c28 <_printf_i+0xc8>
 8008c20:	232d      	movs	r3, #45	; 0x2d
 8008c22:	4276      	negs	r6, r6
 8008c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c28:	485e      	ldr	r0, [pc, #376]	; (8008da4 <_printf_i+0x244>)
 8008c2a:	230a      	movs	r3, #10
 8008c2c:	e019      	b.n	8008c62 <_printf_i+0x102>
 8008c2e:	680e      	ldr	r6, [r1, #0]
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c36:	bf18      	it	ne
 8008c38:	b236      	sxthne	r6, r6
 8008c3a:	e7ef      	b.n	8008c1c <_printf_i+0xbc>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	6820      	ldr	r0, [r4, #0]
 8008c40:	1d19      	adds	r1, r3, #4
 8008c42:	6029      	str	r1, [r5, #0]
 8008c44:	0601      	lsls	r1, r0, #24
 8008c46:	d501      	bpl.n	8008c4c <_printf_i+0xec>
 8008c48:	681e      	ldr	r6, [r3, #0]
 8008c4a:	e002      	b.n	8008c52 <_printf_i+0xf2>
 8008c4c:	0646      	lsls	r6, r0, #25
 8008c4e:	d5fb      	bpl.n	8008c48 <_printf_i+0xe8>
 8008c50:	881e      	ldrh	r6, [r3, #0]
 8008c52:	4854      	ldr	r0, [pc, #336]	; (8008da4 <_printf_i+0x244>)
 8008c54:	2f6f      	cmp	r7, #111	; 0x6f
 8008c56:	bf0c      	ite	eq
 8008c58:	2308      	moveq	r3, #8
 8008c5a:	230a      	movne	r3, #10
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c62:	6865      	ldr	r5, [r4, #4]
 8008c64:	60a5      	str	r5, [r4, #8]
 8008c66:	2d00      	cmp	r5, #0
 8008c68:	bfa2      	ittt	ge
 8008c6a:	6821      	ldrge	r1, [r4, #0]
 8008c6c:	f021 0104 	bicge.w	r1, r1, #4
 8008c70:	6021      	strge	r1, [r4, #0]
 8008c72:	b90e      	cbnz	r6, 8008c78 <_printf_i+0x118>
 8008c74:	2d00      	cmp	r5, #0
 8008c76:	d04d      	beq.n	8008d14 <_printf_i+0x1b4>
 8008c78:	4615      	mov	r5, r2
 8008c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8008c82:	5dc7      	ldrb	r7, [r0, r7]
 8008c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c88:	4637      	mov	r7, r6
 8008c8a:	42bb      	cmp	r3, r7
 8008c8c:	460e      	mov	r6, r1
 8008c8e:	d9f4      	bls.n	8008c7a <_printf_i+0x11a>
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d10b      	bne.n	8008cac <_printf_i+0x14c>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	07de      	lsls	r6, r3, #31
 8008c98:	d508      	bpl.n	8008cac <_printf_i+0x14c>
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	6861      	ldr	r1, [r4, #4]
 8008c9e:	4299      	cmp	r1, r3
 8008ca0:	bfde      	ittt	le
 8008ca2:	2330      	movle	r3, #48	; 0x30
 8008ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ca8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008cac:	1b52      	subs	r2, r2, r5
 8008cae:	6122      	str	r2, [r4, #16]
 8008cb0:	f8cd a000 	str.w	sl, [sp]
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	aa03      	add	r2, sp, #12
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4640      	mov	r0, r8
 8008cbc:	f7ff fee2 	bl	8008a84 <_printf_common>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d14c      	bne.n	8008d5e <_printf_i+0x1fe>
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cc8:	b004      	add	sp, #16
 8008cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cce:	4835      	ldr	r0, [pc, #212]	; (8008da4 <_printf_i+0x244>)
 8008cd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cd4:	6829      	ldr	r1, [r5, #0]
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cdc:	6029      	str	r1, [r5, #0]
 8008cde:	061d      	lsls	r5, r3, #24
 8008ce0:	d514      	bpl.n	8008d0c <_printf_i+0x1ac>
 8008ce2:	07df      	lsls	r7, r3, #31
 8008ce4:	bf44      	itt	mi
 8008ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cea:	6023      	strmi	r3, [r4, #0]
 8008cec:	b91e      	cbnz	r6, 8008cf6 <_printf_i+0x196>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	f023 0320 	bic.w	r3, r3, #32
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	2310      	movs	r3, #16
 8008cf8:	e7b0      	b.n	8008c5c <_printf_i+0xfc>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	f043 0320 	orr.w	r3, r3, #32
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	2378      	movs	r3, #120	; 0x78
 8008d04:	4828      	ldr	r0, [pc, #160]	; (8008da8 <_printf_i+0x248>)
 8008d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d0a:	e7e3      	b.n	8008cd4 <_printf_i+0x174>
 8008d0c:	0659      	lsls	r1, r3, #25
 8008d0e:	bf48      	it	mi
 8008d10:	b2b6      	uxthmi	r6, r6
 8008d12:	e7e6      	b.n	8008ce2 <_printf_i+0x182>
 8008d14:	4615      	mov	r5, r2
 8008d16:	e7bb      	b.n	8008c90 <_printf_i+0x130>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	6826      	ldr	r6, [r4, #0]
 8008d1c:	6961      	ldr	r1, [r4, #20]
 8008d1e:	1d18      	adds	r0, r3, #4
 8008d20:	6028      	str	r0, [r5, #0]
 8008d22:	0635      	lsls	r5, r6, #24
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	d501      	bpl.n	8008d2c <_printf_i+0x1cc>
 8008d28:	6019      	str	r1, [r3, #0]
 8008d2a:	e002      	b.n	8008d32 <_printf_i+0x1d2>
 8008d2c:	0670      	lsls	r0, r6, #25
 8008d2e:	d5fb      	bpl.n	8008d28 <_printf_i+0x1c8>
 8008d30:	8019      	strh	r1, [r3, #0]
 8008d32:	2300      	movs	r3, #0
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	4615      	mov	r5, r2
 8008d38:	e7ba      	b.n	8008cb0 <_printf_i+0x150>
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	1d1a      	adds	r2, r3, #4
 8008d3e:	602a      	str	r2, [r5, #0]
 8008d40:	681d      	ldr	r5, [r3, #0]
 8008d42:	6862      	ldr	r2, [r4, #4]
 8008d44:	2100      	movs	r1, #0
 8008d46:	4628      	mov	r0, r5
 8008d48:	f7f7 fa5a 	bl	8000200 <memchr>
 8008d4c:	b108      	cbz	r0, 8008d52 <_printf_i+0x1f2>
 8008d4e:	1b40      	subs	r0, r0, r5
 8008d50:	6060      	str	r0, [r4, #4]
 8008d52:	6863      	ldr	r3, [r4, #4]
 8008d54:	6123      	str	r3, [r4, #16]
 8008d56:	2300      	movs	r3, #0
 8008d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d5c:	e7a8      	b.n	8008cb0 <_printf_i+0x150>
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	462a      	mov	r2, r5
 8008d62:	4649      	mov	r1, r9
 8008d64:	4640      	mov	r0, r8
 8008d66:	47d0      	blx	sl
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d0ab      	beq.n	8008cc4 <_printf_i+0x164>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	079b      	lsls	r3, r3, #30
 8008d70:	d413      	bmi.n	8008d9a <_printf_i+0x23a>
 8008d72:	68e0      	ldr	r0, [r4, #12]
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	4298      	cmp	r0, r3
 8008d78:	bfb8      	it	lt
 8008d7a:	4618      	movlt	r0, r3
 8008d7c:	e7a4      	b.n	8008cc8 <_printf_i+0x168>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4632      	mov	r2, r6
 8008d82:	4649      	mov	r1, r9
 8008d84:	4640      	mov	r0, r8
 8008d86:	47d0      	blx	sl
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d09b      	beq.n	8008cc4 <_printf_i+0x164>
 8008d8c:	3501      	adds	r5, #1
 8008d8e:	68e3      	ldr	r3, [r4, #12]
 8008d90:	9903      	ldr	r1, [sp, #12]
 8008d92:	1a5b      	subs	r3, r3, r1
 8008d94:	42ab      	cmp	r3, r5
 8008d96:	dcf2      	bgt.n	8008d7e <_printf_i+0x21e>
 8008d98:	e7eb      	b.n	8008d72 <_printf_i+0x212>
 8008d9a:	2500      	movs	r5, #0
 8008d9c:	f104 0619 	add.w	r6, r4, #25
 8008da0:	e7f5      	b.n	8008d8e <_printf_i+0x22e>
 8008da2:	bf00      	nop
 8008da4:	0800e728 	.word	0x0800e728
 8008da8:	0800e739 	.word	0x0800e739

08008dac <_scanf_float>:
 8008dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	b087      	sub	sp, #28
 8008db2:	4617      	mov	r7, r2
 8008db4:	9303      	str	r3, [sp, #12]
 8008db6:	688b      	ldr	r3, [r1, #8]
 8008db8:	1e5a      	subs	r2, r3, #1
 8008dba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008dbe:	bf83      	ittte	hi
 8008dc0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008dc4:	195b      	addhi	r3, r3, r5
 8008dc6:	9302      	strhi	r3, [sp, #8]
 8008dc8:	2300      	movls	r3, #0
 8008dca:	bf86      	itte	hi
 8008dcc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008dd0:	608b      	strhi	r3, [r1, #8]
 8008dd2:	9302      	strls	r3, [sp, #8]
 8008dd4:	680b      	ldr	r3, [r1, #0]
 8008dd6:	468b      	mov	fp, r1
 8008dd8:	2500      	movs	r5, #0
 8008dda:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008dde:	f84b 3b1c 	str.w	r3, [fp], #28
 8008de2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008de6:	4680      	mov	r8, r0
 8008de8:	460c      	mov	r4, r1
 8008dea:	465e      	mov	r6, fp
 8008dec:	46aa      	mov	sl, r5
 8008dee:	46a9      	mov	r9, r5
 8008df0:	9501      	str	r5, [sp, #4]
 8008df2:	68a2      	ldr	r2, [r4, #8]
 8008df4:	b152      	cbz	r2, 8008e0c <_scanf_float+0x60>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b4e      	cmp	r3, #78	; 0x4e
 8008dfc:	d864      	bhi.n	8008ec8 <_scanf_float+0x11c>
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d83c      	bhi.n	8008e7c <_scanf_float+0xd0>
 8008e02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e06:	b2c8      	uxtb	r0, r1
 8008e08:	280e      	cmp	r0, #14
 8008e0a:	d93a      	bls.n	8008e82 <_scanf_float+0xd6>
 8008e0c:	f1b9 0f00 	cmp.w	r9, #0
 8008e10:	d003      	beq.n	8008e1a <_scanf_float+0x6e>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008e1e:	f1ba 0f01 	cmp.w	sl, #1
 8008e22:	f200 8113 	bhi.w	800904c <_scanf_float+0x2a0>
 8008e26:	455e      	cmp	r6, fp
 8008e28:	f200 8105 	bhi.w	8009036 <_scanf_float+0x28a>
 8008e2c:	2501      	movs	r5, #1
 8008e2e:	4628      	mov	r0, r5
 8008e30:	b007      	add	sp, #28
 8008e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e3a:	2a0d      	cmp	r2, #13
 8008e3c:	d8e6      	bhi.n	8008e0c <_scanf_float+0x60>
 8008e3e:	a101      	add	r1, pc, #4	; (adr r1, 8008e44 <_scanf_float+0x98>)
 8008e40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e44:	08008f83 	.word	0x08008f83
 8008e48:	08008e0d 	.word	0x08008e0d
 8008e4c:	08008e0d 	.word	0x08008e0d
 8008e50:	08008e0d 	.word	0x08008e0d
 8008e54:	08008fe3 	.word	0x08008fe3
 8008e58:	08008fbb 	.word	0x08008fbb
 8008e5c:	08008e0d 	.word	0x08008e0d
 8008e60:	08008e0d 	.word	0x08008e0d
 8008e64:	08008f91 	.word	0x08008f91
 8008e68:	08008e0d 	.word	0x08008e0d
 8008e6c:	08008e0d 	.word	0x08008e0d
 8008e70:	08008e0d 	.word	0x08008e0d
 8008e74:	08008e0d 	.word	0x08008e0d
 8008e78:	08008f49 	.word	0x08008f49
 8008e7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008e80:	e7db      	b.n	8008e3a <_scanf_float+0x8e>
 8008e82:	290e      	cmp	r1, #14
 8008e84:	d8c2      	bhi.n	8008e0c <_scanf_float+0x60>
 8008e86:	a001      	add	r0, pc, #4	; (adr r0, 8008e8c <_scanf_float+0xe0>)
 8008e88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e8c:	08008f3b 	.word	0x08008f3b
 8008e90:	08008e0d 	.word	0x08008e0d
 8008e94:	08008f3b 	.word	0x08008f3b
 8008e98:	08008fcf 	.word	0x08008fcf
 8008e9c:	08008e0d 	.word	0x08008e0d
 8008ea0:	08008ee9 	.word	0x08008ee9
 8008ea4:	08008f25 	.word	0x08008f25
 8008ea8:	08008f25 	.word	0x08008f25
 8008eac:	08008f25 	.word	0x08008f25
 8008eb0:	08008f25 	.word	0x08008f25
 8008eb4:	08008f25 	.word	0x08008f25
 8008eb8:	08008f25 	.word	0x08008f25
 8008ebc:	08008f25 	.word	0x08008f25
 8008ec0:	08008f25 	.word	0x08008f25
 8008ec4:	08008f25 	.word	0x08008f25
 8008ec8:	2b6e      	cmp	r3, #110	; 0x6e
 8008eca:	d809      	bhi.n	8008ee0 <_scanf_float+0x134>
 8008ecc:	2b60      	cmp	r3, #96	; 0x60
 8008ece:	d8b2      	bhi.n	8008e36 <_scanf_float+0x8a>
 8008ed0:	2b54      	cmp	r3, #84	; 0x54
 8008ed2:	d077      	beq.n	8008fc4 <_scanf_float+0x218>
 8008ed4:	2b59      	cmp	r3, #89	; 0x59
 8008ed6:	d199      	bne.n	8008e0c <_scanf_float+0x60>
 8008ed8:	2d07      	cmp	r5, #7
 8008eda:	d197      	bne.n	8008e0c <_scanf_float+0x60>
 8008edc:	2508      	movs	r5, #8
 8008ede:	e029      	b.n	8008f34 <_scanf_float+0x188>
 8008ee0:	2b74      	cmp	r3, #116	; 0x74
 8008ee2:	d06f      	beq.n	8008fc4 <_scanf_float+0x218>
 8008ee4:	2b79      	cmp	r3, #121	; 0x79
 8008ee6:	e7f6      	b.n	8008ed6 <_scanf_float+0x12a>
 8008ee8:	6821      	ldr	r1, [r4, #0]
 8008eea:	05c8      	lsls	r0, r1, #23
 8008eec:	d51a      	bpl.n	8008f24 <_scanf_float+0x178>
 8008eee:	9b02      	ldr	r3, [sp, #8]
 8008ef0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ef4:	6021      	str	r1, [r4, #0]
 8008ef6:	f109 0901 	add.w	r9, r9, #1
 8008efa:	b11b      	cbz	r3, 8008f04 <_scanf_float+0x158>
 8008efc:	3b01      	subs	r3, #1
 8008efe:	3201      	adds	r2, #1
 8008f00:	9302      	str	r3, [sp, #8]
 8008f02:	60a2      	str	r2, [r4, #8]
 8008f04:	68a3      	ldr	r3, [r4, #8]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	60a3      	str	r3, [r4, #8]
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	607b      	str	r3, [r7, #4]
 8008f18:	f340 8084 	ble.w	8009024 <_scanf_float+0x278>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	603b      	str	r3, [r7, #0]
 8008f22:	e766      	b.n	8008df2 <_scanf_float+0x46>
 8008f24:	eb1a 0f05 	cmn.w	sl, r5
 8008f28:	f47f af70 	bne.w	8008e0c <_scanf_float+0x60>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f32:	6022      	str	r2, [r4, #0]
 8008f34:	f806 3b01 	strb.w	r3, [r6], #1
 8008f38:	e7e4      	b.n	8008f04 <_scanf_float+0x158>
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	0610      	lsls	r0, r2, #24
 8008f3e:	f57f af65 	bpl.w	8008e0c <_scanf_float+0x60>
 8008f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f46:	e7f4      	b.n	8008f32 <_scanf_float+0x186>
 8008f48:	f1ba 0f00 	cmp.w	sl, #0
 8008f4c:	d10e      	bne.n	8008f6c <_scanf_float+0x1c0>
 8008f4e:	f1b9 0f00 	cmp.w	r9, #0
 8008f52:	d10e      	bne.n	8008f72 <_scanf_float+0x1c6>
 8008f54:	6822      	ldr	r2, [r4, #0]
 8008f56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f5e:	d108      	bne.n	8008f72 <_scanf_float+0x1c6>
 8008f60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f64:	6022      	str	r2, [r4, #0]
 8008f66:	f04f 0a01 	mov.w	sl, #1
 8008f6a:	e7e3      	b.n	8008f34 <_scanf_float+0x188>
 8008f6c:	f1ba 0f02 	cmp.w	sl, #2
 8008f70:	d055      	beq.n	800901e <_scanf_float+0x272>
 8008f72:	2d01      	cmp	r5, #1
 8008f74:	d002      	beq.n	8008f7c <_scanf_float+0x1d0>
 8008f76:	2d04      	cmp	r5, #4
 8008f78:	f47f af48 	bne.w	8008e0c <_scanf_float+0x60>
 8008f7c:	3501      	adds	r5, #1
 8008f7e:	b2ed      	uxtb	r5, r5
 8008f80:	e7d8      	b.n	8008f34 <_scanf_float+0x188>
 8008f82:	f1ba 0f01 	cmp.w	sl, #1
 8008f86:	f47f af41 	bne.w	8008e0c <_scanf_float+0x60>
 8008f8a:	f04f 0a02 	mov.w	sl, #2
 8008f8e:	e7d1      	b.n	8008f34 <_scanf_float+0x188>
 8008f90:	b97d      	cbnz	r5, 8008fb2 <_scanf_float+0x206>
 8008f92:	f1b9 0f00 	cmp.w	r9, #0
 8008f96:	f47f af3c 	bne.w	8008e12 <_scanf_float+0x66>
 8008f9a:	6822      	ldr	r2, [r4, #0]
 8008f9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fa0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fa4:	f47f af39 	bne.w	8008e1a <_scanf_float+0x6e>
 8008fa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fac:	6022      	str	r2, [r4, #0]
 8008fae:	2501      	movs	r5, #1
 8008fb0:	e7c0      	b.n	8008f34 <_scanf_float+0x188>
 8008fb2:	2d03      	cmp	r5, #3
 8008fb4:	d0e2      	beq.n	8008f7c <_scanf_float+0x1d0>
 8008fb6:	2d05      	cmp	r5, #5
 8008fb8:	e7de      	b.n	8008f78 <_scanf_float+0x1cc>
 8008fba:	2d02      	cmp	r5, #2
 8008fbc:	f47f af26 	bne.w	8008e0c <_scanf_float+0x60>
 8008fc0:	2503      	movs	r5, #3
 8008fc2:	e7b7      	b.n	8008f34 <_scanf_float+0x188>
 8008fc4:	2d06      	cmp	r5, #6
 8008fc6:	f47f af21 	bne.w	8008e0c <_scanf_float+0x60>
 8008fca:	2507      	movs	r5, #7
 8008fcc:	e7b2      	b.n	8008f34 <_scanf_float+0x188>
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	0591      	lsls	r1, r2, #22
 8008fd2:	f57f af1b 	bpl.w	8008e0c <_scanf_float+0x60>
 8008fd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008fda:	6022      	str	r2, [r4, #0]
 8008fdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008fe0:	e7a8      	b.n	8008f34 <_scanf_float+0x188>
 8008fe2:	6822      	ldr	r2, [r4, #0]
 8008fe4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008fe8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008fec:	d006      	beq.n	8008ffc <_scanf_float+0x250>
 8008fee:	0550      	lsls	r0, r2, #21
 8008ff0:	f57f af0c 	bpl.w	8008e0c <_scanf_float+0x60>
 8008ff4:	f1b9 0f00 	cmp.w	r9, #0
 8008ff8:	f43f af0f 	beq.w	8008e1a <_scanf_float+0x6e>
 8008ffc:	0591      	lsls	r1, r2, #22
 8008ffe:	bf58      	it	pl
 8009000:	9901      	ldrpl	r1, [sp, #4]
 8009002:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009006:	bf58      	it	pl
 8009008:	eba9 0101 	subpl.w	r1, r9, r1
 800900c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009010:	bf58      	it	pl
 8009012:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009016:	6022      	str	r2, [r4, #0]
 8009018:	f04f 0900 	mov.w	r9, #0
 800901c:	e78a      	b.n	8008f34 <_scanf_float+0x188>
 800901e:	f04f 0a03 	mov.w	sl, #3
 8009022:	e787      	b.n	8008f34 <_scanf_float+0x188>
 8009024:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009028:	4639      	mov	r1, r7
 800902a:	4640      	mov	r0, r8
 800902c:	4798      	blx	r3
 800902e:	2800      	cmp	r0, #0
 8009030:	f43f aedf 	beq.w	8008df2 <_scanf_float+0x46>
 8009034:	e6ea      	b.n	8008e0c <_scanf_float+0x60>
 8009036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800903a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800903e:	463a      	mov	r2, r7
 8009040:	4640      	mov	r0, r8
 8009042:	4798      	blx	r3
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	3b01      	subs	r3, #1
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	e6ec      	b.n	8008e26 <_scanf_float+0x7a>
 800904c:	1e6b      	subs	r3, r5, #1
 800904e:	2b06      	cmp	r3, #6
 8009050:	d825      	bhi.n	800909e <_scanf_float+0x2f2>
 8009052:	2d02      	cmp	r5, #2
 8009054:	d836      	bhi.n	80090c4 <_scanf_float+0x318>
 8009056:	455e      	cmp	r6, fp
 8009058:	f67f aee8 	bls.w	8008e2c <_scanf_float+0x80>
 800905c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009060:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009064:	463a      	mov	r2, r7
 8009066:	4640      	mov	r0, r8
 8009068:	4798      	blx	r3
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	3b01      	subs	r3, #1
 800906e:	6123      	str	r3, [r4, #16]
 8009070:	e7f1      	b.n	8009056 <_scanf_float+0x2aa>
 8009072:	9802      	ldr	r0, [sp, #8]
 8009074:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009078:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800907c:	9002      	str	r0, [sp, #8]
 800907e:	463a      	mov	r2, r7
 8009080:	4640      	mov	r0, r8
 8009082:	4798      	blx	r3
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	3b01      	subs	r3, #1
 8009088:	6123      	str	r3, [r4, #16]
 800908a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800908e:	fa5f fa8a 	uxtb.w	sl, sl
 8009092:	f1ba 0f02 	cmp.w	sl, #2
 8009096:	d1ec      	bne.n	8009072 <_scanf_float+0x2c6>
 8009098:	3d03      	subs	r5, #3
 800909a:	b2ed      	uxtb	r5, r5
 800909c:	1b76      	subs	r6, r6, r5
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	05da      	lsls	r2, r3, #23
 80090a2:	d52f      	bpl.n	8009104 <_scanf_float+0x358>
 80090a4:	055b      	lsls	r3, r3, #21
 80090a6:	d510      	bpl.n	80090ca <_scanf_float+0x31e>
 80090a8:	455e      	cmp	r6, fp
 80090aa:	f67f aebf 	bls.w	8008e2c <_scanf_float+0x80>
 80090ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090b6:	463a      	mov	r2, r7
 80090b8:	4640      	mov	r0, r8
 80090ba:	4798      	blx	r3
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	3b01      	subs	r3, #1
 80090c0:	6123      	str	r3, [r4, #16]
 80090c2:	e7f1      	b.n	80090a8 <_scanf_float+0x2fc>
 80090c4:	46aa      	mov	sl, r5
 80090c6:	9602      	str	r6, [sp, #8]
 80090c8:	e7df      	b.n	800908a <_scanf_float+0x2de>
 80090ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090ce:	6923      	ldr	r3, [r4, #16]
 80090d0:	2965      	cmp	r1, #101	; 0x65
 80090d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80090d6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80090da:	6123      	str	r3, [r4, #16]
 80090dc:	d00c      	beq.n	80090f8 <_scanf_float+0x34c>
 80090de:	2945      	cmp	r1, #69	; 0x45
 80090e0:	d00a      	beq.n	80090f8 <_scanf_float+0x34c>
 80090e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090e6:	463a      	mov	r2, r7
 80090e8:	4640      	mov	r0, r8
 80090ea:	4798      	blx	r3
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	1eb5      	subs	r5, r6, #2
 80090f6:	6123      	str	r3, [r4, #16]
 80090f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090fc:	463a      	mov	r2, r7
 80090fe:	4640      	mov	r0, r8
 8009100:	4798      	blx	r3
 8009102:	462e      	mov	r6, r5
 8009104:	6825      	ldr	r5, [r4, #0]
 8009106:	f015 0510 	ands.w	r5, r5, #16
 800910a:	d159      	bne.n	80091c0 <_scanf_float+0x414>
 800910c:	7035      	strb	r5, [r6, #0]
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009118:	d11b      	bne.n	8009152 <_scanf_float+0x3a6>
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	454b      	cmp	r3, r9
 800911e:	eba3 0209 	sub.w	r2, r3, r9
 8009122:	d123      	bne.n	800916c <_scanf_float+0x3c0>
 8009124:	2200      	movs	r2, #0
 8009126:	4659      	mov	r1, fp
 8009128:	4640      	mov	r0, r8
 800912a:	f000 ff87 	bl	800a03c <_strtod_r>
 800912e:	6822      	ldr	r2, [r4, #0]
 8009130:	9b03      	ldr	r3, [sp, #12]
 8009132:	f012 0f02 	tst.w	r2, #2
 8009136:	ec57 6b10 	vmov	r6, r7, d0
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	d021      	beq.n	8009182 <_scanf_float+0x3d6>
 800913e:	9903      	ldr	r1, [sp, #12]
 8009140:	1d1a      	adds	r2, r3, #4
 8009142:	600a      	str	r2, [r1, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	e9c3 6700 	strd	r6, r7, [r3]
 800914a:	68e3      	ldr	r3, [r4, #12]
 800914c:	3301      	adds	r3, #1
 800914e:	60e3      	str	r3, [r4, #12]
 8009150:	e66d      	b.n	8008e2e <_scanf_float+0x82>
 8009152:	9b04      	ldr	r3, [sp, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d0e5      	beq.n	8009124 <_scanf_float+0x378>
 8009158:	9905      	ldr	r1, [sp, #20]
 800915a:	230a      	movs	r3, #10
 800915c:	462a      	mov	r2, r5
 800915e:	3101      	adds	r1, #1
 8009160:	4640      	mov	r0, r8
 8009162:	f000 fff3 	bl	800a14c <_strtol_r>
 8009166:	9b04      	ldr	r3, [sp, #16]
 8009168:	9e05      	ldr	r6, [sp, #20]
 800916a:	1ac2      	subs	r2, r0, r3
 800916c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009170:	429e      	cmp	r6, r3
 8009172:	bf28      	it	cs
 8009174:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009178:	4912      	ldr	r1, [pc, #72]	; (80091c4 <_scanf_float+0x418>)
 800917a:	4630      	mov	r0, r6
 800917c:	f000 f8a2 	bl	80092c4 <siprintf>
 8009180:	e7d0      	b.n	8009124 <_scanf_float+0x378>
 8009182:	9903      	ldr	r1, [sp, #12]
 8009184:	f012 0f04 	tst.w	r2, #4
 8009188:	f103 0204 	add.w	r2, r3, #4
 800918c:	600a      	str	r2, [r1, #0]
 800918e:	d1d9      	bne.n	8009144 <_scanf_float+0x398>
 8009190:	f8d3 8000 	ldr.w	r8, [r3]
 8009194:	ee10 2a10 	vmov	r2, s0
 8009198:	ee10 0a10 	vmov	r0, s0
 800919c:	463b      	mov	r3, r7
 800919e:	4639      	mov	r1, r7
 80091a0:	f7f7 fcd4 	bl	8000b4c <__aeabi_dcmpun>
 80091a4:	b128      	cbz	r0, 80091b2 <_scanf_float+0x406>
 80091a6:	4808      	ldr	r0, [pc, #32]	; (80091c8 <_scanf_float+0x41c>)
 80091a8:	f000 f886 	bl	80092b8 <nanf>
 80091ac:	ed88 0a00 	vstr	s0, [r8]
 80091b0:	e7cb      	b.n	800914a <_scanf_float+0x39e>
 80091b2:	4630      	mov	r0, r6
 80091b4:	4639      	mov	r1, r7
 80091b6:	f7f7 fd27 	bl	8000c08 <__aeabi_d2f>
 80091ba:	f8c8 0000 	str.w	r0, [r8]
 80091be:	e7c4      	b.n	800914a <_scanf_float+0x39e>
 80091c0:	2500      	movs	r5, #0
 80091c2:	e634      	b.n	8008e2e <_scanf_float+0x82>
 80091c4:	0800e74a 	.word	0x0800e74a
 80091c8:	0800ebd3 	.word	0x0800ebd3

080091cc <_puts_r>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	460e      	mov	r6, r1
 80091d0:	4605      	mov	r5, r0
 80091d2:	b118      	cbz	r0, 80091dc <_puts_r+0x10>
 80091d4:	6983      	ldr	r3, [r0, #24]
 80091d6:	b90b      	cbnz	r3, 80091dc <_puts_r+0x10>
 80091d8:	f002 f832 	bl	800b240 <__sinit>
 80091dc:	69ab      	ldr	r3, [r5, #24]
 80091de:	68ac      	ldr	r4, [r5, #8]
 80091e0:	b913      	cbnz	r3, 80091e8 <_puts_r+0x1c>
 80091e2:	4628      	mov	r0, r5
 80091e4:	f002 f82c 	bl	800b240 <__sinit>
 80091e8:	4b2c      	ldr	r3, [pc, #176]	; (800929c <_puts_r+0xd0>)
 80091ea:	429c      	cmp	r4, r3
 80091ec:	d120      	bne.n	8009230 <_puts_r+0x64>
 80091ee:	686c      	ldr	r4, [r5, #4]
 80091f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091f2:	07db      	lsls	r3, r3, #31
 80091f4:	d405      	bmi.n	8009202 <_puts_r+0x36>
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	0598      	lsls	r0, r3, #22
 80091fa:	d402      	bmi.n	8009202 <_puts_r+0x36>
 80091fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091fe:	f002 fc30 	bl	800ba62 <__retarget_lock_acquire_recursive>
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	0719      	lsls	r1, r3, #28
 8009206:	d51d      	bpl.n	8009244 <_puts_r+0x78>
 8009208:	6923      	ldr	r3, [r4, #16]
 800920a:	b1db      	cbz	r3, 8009244 <_puts_r+0x78>
 800920c:	3e01      	subs	r6, #1
 800920e:	68a3      	ldr	r3, [r4, #8]
 8009210:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009214:	3b01      	subs	r3, #1
 8009216:	60a3      	str	r3, [r4, #8]
 8009218:	bb39      	cbnz	r1, 800926a <_puts_r+0x9e>
 800921a:	2b00      	cmp	r3, #0
 800921c:	da38      	bge.n	8009290 <_puts_r+0xc4>
 800921e:	4622      	mov	r2, r4
 8009220:	210a      	movs	r1, #10
 8009222:	4628      	mov	r0, r5
 8009224:	f000 ff94 	bl	800a150 <__swbuf_r>
 8009228:	3001      	adds	r0, #1
 800922a:	d011      	beq.n	8009250 <_puts_r+0x84>
 800922c:	250a      	movs	r5, #10
 800922e:	e011      	b.n	8009254 <_puts_r+0x88>
 8009230:	4b1b      	ldr	r3, [pc, #108]	; (80092a0 <_puts_r+0xd4>)
 8009232:	429c      	cmp	r4, r3
 8009234:	d101      	bne.n	800923a <_puts_r+0x6e>
 8009236:	68ac      	ldr	r4, [r5, #8]
 8009238:	e7da      	b.n	80091f0 <_puts_r+0x24>
 800923a:	4b1a      	ldr	r3, [pc, #104]	; (80092a4 <_puts_r+0xd8>)
 800923c:	429c      	cmp	r4, r3
 800923e:	bf08      	it	eq
 8009240:	68ec      	ldreq	r4, [r5, #12]
 8009242:	e7d5      	b.n	80091f0 <_puts_r+0x24>
 8009244:	4621      	mov	r1, r4
 8009246:	4628      	mov	r0, r5
 8009248:	f000 ffe6 	bl	800a218 <__swsetup_r>
 800924c:	2800      	cmp	r0, #0
 800924e:	d0dd      	beq.n	800920c <_puts_r+0x40>
 8009250:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009256:	07da      	lsls	r2, r3, #31
 8009258:	d405      	bmi.n	8009266 <_puts_r+0x9a>
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	059b      	lsls	r3, r3, #22
 800925e:	d402      	bmi.n	8009266 <_puts_r+0x9a>
 8009260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009262:	f002 fbff 	bl	800ba64 <__retarget_lock_release_recursive>
 8009266:	4628      	mov	r0, r5
 8009268:	bd70      	pop	{r4, r5, r6, pc}
 800926a:	2b00      	cmp	r3, #0
 800926c:	da04      	bge.n	8009278 <_puts_r+0xac>
 800926e:	69a2      	ldr	r2, [r4, #24]
 8009270:	429a      	cmp	r2, r3
 8009272:	dc06      	bgt.n	8009282 <_puts_r+0xb6>
 8009274:	290a      	cmp	r1, #10
 8009276:	d004      	beq.n	8009282 <_puts_r+0xb6>
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	6022      	str	r2, [r4, #0]
 800927e:	7019      	strb	r1, [r3, #0]
 8009280:	e7c5      	b.n	800920e <_puts_r+0x42>
 8009282:	4622      	mov	r2, r4
 8009284:	4628      	mov	r0, r5
 8009286:	f000 ff63 	bl	800a150 <__swbuf_r>
 800928a:	3001      	adds	r0, #1
 800928c:	d1bf      	bne.n	800920e <_puts_r+0x42>
 800928e:	e7df      	b.n	8009250 <_puts_r+0x84>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	250a      	movs	r5, #10
 8009294:	1c5a      	adds	r2, r3, #1
 8009296:	6022      	str	r2, [r4, #0]
 8009298:	701d      	strb	r5, [r3, #0]
 800929a:	e7db      	b.n	8009254 <_puts_r+0x88>
 800929c:	0800e954 	.word	0x0800e954
 80092a0:	0800e974 	.word	0x0800e974
 80092a4:	0800e934 	.word	0x0800e934

080092a8 <puts>:
 80092a8:	4b02      	ldr	r3, [pc, #8]	; (80092b4 <puts+0xc>)
 80092aa:	4601      	mov	r1, r0
 80092ac:	6818      	ldr	r0, [r3, #0]
 80092ae:	f7ff bf8d 	b.w	80091cc <_puts_r>
 80092b2:	bf00      	nop
 80092b4:	20000024 	.word	0x20000024

080092b8 <nanf>:
 80092b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80092c0 <nanf+0x8>
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	7fc00000 	.word	0x7fc00000

080092c4 <siprintf>:
 80092c4:	b40e      	push	{r1, r2, r3}
 80092c6:	b500      	push	{lr}
 80092c8:	b09c      	sub	sp, #112	; 0x70
 80092ca:	ab1d      	add	r3, sp, #116	; 0x74
 80092cc:	9002      	str	r0, [sp, #8]
 80092ce:	9006      	str	r0, [sp, #24]
 80092d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092d4:	4809      	ldr	r0, [pc, #36]	; (80092fc <siprintf+0x38>)
 80092d6:	9107      	str	r1, [sp, #28]
 80092d8:	9104      	str	r1, [sp, #16]
 80092da:	4909      	ldr	r1, [pc, #36]	; (8009300 <siprintf+0x3c>)
 80092dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e0:	9105      	str	r1, [sp, #20]
 80092e2:	6800      	ldr	r0, [r0, #0]
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	a902      	add	r1, sp, #8
 80092e8:	f003 fa72 	bl	800c7d0 <_svfiprintf_r>
 80092ec:	9b02      	ldr	r3, [sp, #8]
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	b01c      	add	sp, #112	; 0x70
 80092f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f8:	b003      	add	sp, #12
 80092fa:	4770      	bx	lr
 80092fc:	20000024 	.word	0x20000024
 8009300:	ffff0208 	.word	0xffff0208

08009304 <siscanf>:
 8009304:	b40e      	push	{r1, r2, r3}
 8009306:	b510      	push	{r4, lr}
 8009308:	b09f      	sub	sp, #124	; 0x7c
 800930a:	ac21      	add	r4, sp, #132	; 0x84
 800930c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009310:	f854 2b04 	ldr.w	r2, [r4], #4
 8009314:	9201      	str	r2, [sp, #4]
 8009316:	f8ad 101c 	strh.w	r1, [sp, #28]
 800931a:	9004      	str	r0, [sp, #16]
 800931c:	9008      	str	r0, [sp, #32]
 800931e:	f7f6 ff61 	bl	80001e4 <strlen>
 8009322:	4b0c      	ldr	r3, [pc, #48]	; (8009354 <siscanf+0x50>)
 8009324:	9005      	str	r0, [sp, #20]
 8009326:	9009      	str	r0, [sp, #36]	; 0x24
 8009328:	930d      	str	r3, [sp, #52]	; 0x34
 800932a:	480b      	ldr	r0, [pc, #44]	; (8009358 <siscanf+0x54>)
 800932c:	9a01      	ldr	r2, [sp, #4]
 800932e:	6800      	ldr	r0, [r0, #0]
 8009330:	9403      	str	r4, [sp, #12]
 8009332:	2300      	movs	r3, #0
 8009334:	9311      	str	r3, [sp, #68]	; 0x44
 8009336:	9316      	str	r3, [sp, #88]	; 0x58
 8009338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800933c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009340:	a904      	add	r1, sp, #16
 8009342:	4623      	mov	r3, r4
 8009344:	f003 fb9e 	bl	800ca84 <__ssvfiscanf_r>
 8009348:	b01f      	add	sp, #124	; 0x7c
 800934a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800934e:	b003      	add	sp, #12
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	0800937f 	.word	0x0800937f
 8009358:	20000024 	.word	0x20000024

0800935c <__sread>:
 800935c:	b510      	push	{r4, lr}
 800935e:	460c      	mov	r4, r1
 8009360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009364:	f003 fe58 	bl	800d018 <_read_r>
 8009368:	2800      	cmp	r0, #0
 800936a:	bfab      	itete	ge
 800936c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800936e:	89a3      	ldrhlt	r3, [r4, #12]
 8009370:	181b      	addge	r3, r3, r0
 8009372:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009376:	bfac      	ite	ge
 8009378:	6563      	strge	r3, [r4, #84]	; 0x54
 800937a:	81a3      	strhlt	r3, [r4, #12]
 800937c:	bd10      	pop	{r4, pc}

0800937e <__seofread>:
 800937e:	2000      	movs	r0, #0
 8009380:	4770      	bx	lr

08009382 <__swrite>:
 8009382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009386:	461f      	mov	r7, r3
 8009388:	898b      	ldrh	r3, [r1, #12]
 800938a:	05db      	lsls	r3, r3, #23
 800938c:	4605      	mov	r5, r0
 800938e:	460c      	mov	r4, r1
 8009390:	4616      	mov	r6, r2
 8009392:	d505      	bpl.n	80093a0 <__swrite+0x1e>
 8009394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009398:	2302      	movs	r3, #2
 800939a:	2200      	movs	r2, #0
 800939c:	f002 fb64 	bl	800ba68 <_lseek_r>
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093aa:	81a3      	strh	r3, [r4, #12]
 80093ac:	4632      	mov	r2, r6
 80093ae:	463b      	mov	r3, r7
 80093b0:	4628      	mov	r0, r5
 80093b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093b6:	f000 bf1d 	b.w	800a1f4 <_write_r>

080093ba <__sseek>:
 80093ba:	b510      	push	{r4, lr}
 80093bc:	460c      	mov	r4, r1
 80093be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c2:	f002 fb51 	bl	800ba68 <_lseek_r>
 80093c6:	1c43      	adds	r3, r0, #1
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	bf15      	itete	ne
 80093cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80093ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093d6:	81a3      	strheq	r3, [r4, #12]
 80093d8:	bf18      	it	ne
 80093da:	81a3      	strhne	r3, [r4, #12]
 80093dc:	bd10      	pop	{r4, pc}

080093de <__sclose>:
 80093de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e2:	f000 bf87 	b.w	800a2f4 <_close_r>

080093e6 <strcpy>:
 80093e6:	4603      	mov	r3, r0
 80093e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ec:	f803 2b01 	strb.w	r2, [r3], #1
 80093f0:	2a00      	cmp	r2, #0
 80093f2:	d1f9      	bne.n	80093e8 <strcpy+0x2>
 80093f4:	4770      	bx	lr

080093f6 <sulp>:
 80093f6:	b570      	push	{r4, r5, r6, lr}
 80093f8:	4604      	mov	r4, r0
 80093fa:	460d      	mov	r5, r1
 80093fc:	ec45 4b10 	vmov	d0, r4, r5
 8009400:	4616      	mov	r6, r2
 8009402:	f002 ff43 	bl	800c28c <__ulp>
 8009406:	ec51 0b10 	vmov	r0, r1, d0
 800940a:	b17e      	cbz	r6, 800942c <sulp+0x36>
 800940c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009410:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009414:	2b00      	cmp	r3, #0
 8009416:	dd09      	ble.n	800942c <sulp+0x36>
 8009418:	051b      	lsls	r3, r3, #20
 800941a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800941e:	2400      	movs	r4, #0
 8009420:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009424:	4622      	mov	r2, r4
 8009426:	462b      	mov	r3, r5
 8009428:	f7f7 f8f6 	bl	8000618 <__aeabi_dmul>
 800942c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009430 <_strtod_l>:
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	ed2d 8b02 	vpush	{d8}
 8009438:	b09d      	sub	sp, #116	; 0x74
 800943a:	461f      	mov	r7, r3
 800943c:	2300      	movs	r3, #0
 800943e:	9318      	str	r3, [sp, #96]	; 0x60
 8009440:	4ba2      	ldr	r3, [pc, #648]	; (80096cc <_strtod_l+0x29c>)
 8009442:	9213      	str	r2, [sp, #76]	; 0x4c
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	9305      	str	r3, [sp, #20]
 8009448:	4604      	mov	r4, r0
 800944a:	4618      	mov	r0, r3
 800944c:	4688      	mov	r8, r1
 800944e:	f7f6 fec9 	bl	80001e4 <strlen>
 8009452:	f04f 0a00 	mov.w	sl, #0
 8009456:	4605      	mov	r5, r0
 8009458:	f04f 0b00 	mov.w	fp, #0
 800945c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009462:	781a      	ldrb	r2, [r3, #0]
 8009464:	2a2b      	cmp	r2, #43	; 0x2b
 8009466:	d04e      	beq.n	8009506 <_strtod_l+0xd6>
 8009468:	d83b      	bhi.n	80094e2 <_strtod_l+0xb2>
 800946a:	2a0d      	cmp	r2, #13
 800946c:	d834      	bhi.n	80094d8 <_strtod_l+0xa8>
 800946e:	2a08      	cmp	r2, #8
 8009470:	d834      	bhi.n	80094dc <_strtod_l+0xac>
 8009472:	2a00      	cmp	r2, #0
 8009474:	d03e      	beq.n	80094f4 <_strtod_l+0xc4>
 8009476:	2300      	movs	r3, #0
 8009478:	930a      	str	r3, [sp, #40]	; 0x28
 800947a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800947c:	7833      	ldrb	r3, [r6, #0]
 800947e:	2b30      	cmp	r3, #48	; 0x30
 8009480:	f040 80b0 	bne.w	80095e4 <_strtod_l+0x1b4>
 8009484:	7873      	ldrb	r3, [r6, #1]
 8009486:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800948a:	2b58      	cmp	r3, #88	; 0x58
 800948c:	d168      	bne.n	8009560 <_strtod_l+0x130>
 800948e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009490:	9301      	str	r3, [sp, #4]
 8009492:	ab18      	add	r3, sp, #96	; 0x60
 8009494:	9702      	str	r7, [sp, #8]
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	4a8d      	ldr	r2, [pc, #564]	; (80096d0 <_strtod_l+0x2a0>)
 800949a:	ab19      	add	r3, sp, #100	; 0x64
 800949c:	a917      	add	r1, sp, #92	; 0x5c
 800949e:	4620      	mov	r0, r4
 80094a0:	f001 ffd2 	bl	800b448 <__gethex>
 80094a4:	f010 0707 	ands.w	r7, r0, #7
 80094a8:	4605      	mov	r5, r0
 80094aa:	d005      	beq.n	80094b8 <_strtod_l+0x88>
 80094ac:	2f06      	cmp	r7, #6
 80094ae:	d12c      	bne.n	800950a <_strtod_l+0xda>
 80094b0:	3601      	adds	r6, #1
 80094b2:	2300      	movs	r3, #0
 80094b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80094b6:	930a      	str	r3, [sp, #40]	; 0x28
 80094b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f040 8590 	bne.w	8009fe0 <_strtod_l+0xbb0>
 80094c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c2:	b1eb      	cbz	r3, 8009500 <_strtod_l+0xd0>
 80094c4:	4652      	mov	r2, sl
 80094c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80094ca:	ec43 2b10 	vmov	d0, r2, r3
 80094ce:	b01d      	add	sp, #116	; 0x74
 80094d0:	ecbd 8b02 	vpop	{d8}
 80094d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d8:	2a20      	cmp	r2, #32
 80094da:	d1cc      	bne.n	8009476 <_strtod_l+0x46>
 80094dc:	3301      	adds	r3, #1
 80094de:	9317      	str	r3, [sp, #92]	; 0x5c
 80094e0:	e7be      	b.n	8009460 <_strtod_l+0x30>
 80094e2:	2a2d      	cmp	r2, #45	; 0x2d
 80094e4:	d1c7      	bne.n	8009476 <_strtod_l+0x46>
 80094e6:	2201      	movs	r2, #1
 80094e8:	920a      	str	r2, [sp, #40]	; 0x28
 80094ea:	1c5a      	adds	r2, r3, #1
 80094ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80094ee:	785b      	ldrb	r3, [r3, #1]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1c2      	bne.n	800947a <_strtod_l+0x4a>
 80094f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f040 856e 	bne.w	8009fdc <_strtod_l+0xbac>
 8009500:	4652      	mov	r2, sl
 8009502:	465b      	mov	r3, fp
 8009504:	e7e1      	b.n	80094ca <_strtod_l+0x9a>
 8009506:	2200      	movs	r2, #0
 8009508:	e7ee      	b.n	80094e8 <_strtod_l+0xb8>
 800950a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800950c:	b13a      	cbz	r2, 800951e <_strtod_l+0xee>
 800950e:	2135      	movs	r1, #53	; 0x35
 8009510:	a81a      	add	r0, sp, #104	; 0x68
 8009512:	f002 ffc6 	bl	800c4a2 <__copybits>
 8009516:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009518:	4620      	mov	r0, r4
 800951a:	f002 fb85 	bl	800bc28 <_Bfree>
 800951e:	3f01      	subs	r7, #1
 8009520:	2f04      	cmp	r7, #4
 8009522:	d806      	bhi.n	8009532 <_strtod_l+0x102>
 8009524:	e8df f007 	tbb	[pc, r7]
 8009528:	1714030a 	.word	0x1714030a
 800952c:	0a          	.byte	0x0a
 800952d:	00          	.byte	0x00
 800952e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009532:	0728      	lsls	r0, r5, #28
 8009534:	d5c0      	bpl.n	80094b8 <_strtod_l+0x88>
 8009536:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800953a:	e7bd      	b.n	80094b8 <_strtod_l+0x88>
 800953c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009540:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009542:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009546:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800954a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800954e:	e7f0      	b.n	8009532 <_strtod_l+0x102>
 8009550:	f8df b180 	ldr.w	fp, [pc, #384]	; 80096d4 <_strtod_l+0x2a4>
 8009554:	e7ed      	b.n	8009532 <_strtod_l+0x102>
 8009556:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800955a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800955e:	e7e8      	b.n	8009532 <_strtod_l+0x102>
 8009560:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	9217      	str	r2, [sp, #92]	; 0x5c
 8009566:	785b      	ldrb	r3, [r3, #1]
 8009568:	2b30      	cmp	r3, #48	; 0x30
 800956a:	d0f9      	beq.n	8009560 <_strtod_l+0x130>
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0a3      	beq.n	80094b8 <_strtod_l+0x88>
 8009570:	2301      	movs	r3, #1
 8009572:	f04f 0900 	mov.w	r9, #0
 8009576:	9304      	str	r3, [sp, #16]
 8009578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800957a:	9308      	str	r3, [sp, #32]
 800957c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009580:	464f      	mov	r7, r9
 8009582:	220a      	movs	r2, #10
 8009584:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009586:	7806      	ldrb	r6, [r0, #0]
 8009588:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800958c:	b2d9      	uxtb	r1, r3
 800958e:	2909      	cmp	r1, #9
 8009590:	d92a      	bls.n	80095e8 <_strtod_l+0x1b8>
 8009592:	9905      	ldr	r1, [sp, #20]
 8009594:	462a      	mov	r2, r5
 8009596:	f003 fda3 	bl	800d0e0 <strncmp>
 800959a:	b398      	cbz	r0, 8009604 <_strtod_l+0x1d4>
 800959c:	2000      	movs	r0, #0
 800959e:	4632      	mov	r2, r6
 80095a0:	463d      	mov	r5, r7
 80095a2:	9005      	str	r0, [sp, #20]
 80095a4:	4603      	mov	r3, r0
 80095a6:	2a65      	cmp	r2, #101	; 0x65
 80095a8:	d001      	beq.n	80095ae <_strtod_l+0x17e>
 80095aa:	2a45      	cmp	r2, #69	; 0x45
 80095ac:	d118      	bne.n	80095e0 <_strtod_l+0x1b0>
 80095ae:	b91d      	cbnz	r5, 80095b8 <_strtod_l+0x188>
 80095b0:	9a04      	ldr	r2, [sp, #16]
 80095b2:	4302      	orrs	r2, r0
 80095b4:	d09e      	beq.n	80094f4 <_strtod_l+0xc4>
 80095b6:	2500      	movs	r5, #0
 80095b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80095bc:	f108 0201 	add.w	r2, r8, #1
 80095c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80095c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80095c6:	2a2b      	cmp	r2, #43	; 0x2b
 80095c8:	d075      	beq.n	80096b6 <_strtod_l+0x286>
 80095ca:	2a2d      	cmp	r2, #45	; 0x2d
 80095cc:	d07b      	beq.n	80096c6 <_strtod_l+0x296>
 80095ce:	f04f 0c00 	mov.w	ip, #0
 80095d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80095d6:	2909      	cmp	r1, #9
 80095d8:	f240 8082 	bls.w	80096e0 <_strtod_l+0x2b0>
 80095dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80095e0:	2600      	movs	r6, #0
 80095e2:	e09d      	b.n	8009720 <_strtod_l+0x2f0>
 80095e4:	2300      	movs	r3, #0
 80095e6:	e7c4      	b.n	8009572 <_strtod_l+0x142>
 80095e8:	2f08      	cmp	r7, #8
 80095ea:	bfd8      	it	le
 80095ec:	9907      	ldrle	r1, [sp, #28]
 80095ee:	f100 0001 	add.w	r0, r0, #1
 80095f2:	bfda      	itte	le
 80095f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80095f8:	9307      	strle	r3, [sp, #28]
 80095fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80095fe:	3701      	adds	r7, #1
 8009600:	9017      	str	r0, [sp, #92]	; 0x5c
 8009602:	e7bf      	b.n	8009584 <_strtod_l+0x154>
 8009604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009606:	195a      	adds	r2, r3, r5
 8009608:	9217      	str	r2, [sp, #92]	; 0x5c
 800960a:	5d5a      	ldrb	r2, [r3, r5]
 800960c:	2f00      	cmp	r7, #0
 800960e:	d037      	beq.n	8009680 <_strtod_l+0x250>
 8009610:	9005      	str	r0, [sp, #20]
 8009612:	463d      	mov	r5, r7
 8009614:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009618:	2b09      	cmp	r3, #9
 800961a:	d912      	bls.n	8009642 <_strtod_l+0x212>
 800961c:	2301      	movs	r3, #1
 800961e:	e7c2      	b.n	80095a6 <_strtod_l+0x176>
 8009620:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	9217      	str	r2, [sp, #92]	; 0x5c
 8009626:	785a      	ldrb	r2, [r3, #1]
 8009628:	3001      	adds	r0, #1
 800962a:	2a30      	cmp	r2, #48	; 0x30
 800962c:	d0f8      	beq.n	8009620 <_strtod_l+0x1f0>
 800962e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009632:	2b08      	cmp	r3, #8
 8009634:	f200 84d9 	bhi.w	8009fea <_strtod_l+0xbba>
 8009638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800963a:	9005      	str	r0, [sp, #20]
 800963c:	2000      	movs	r0, #0
 800963e:	9308      	str	r3, [sp, #32]
 8009640:	4605      	mov	r5, r0
 8009642:	3a30      	subs	r2, #48	; 0x30
 8009644:	f100 0301 	add.w	r3, r0, #1
 8009648:	d014      	beq.n	8009674 <_strtod_l+0x244>
 800964a:	9905      	ldr	r1, [sp, #20]
 800964c:	4419      	add	r1, r3
 800964e:	9105      	str	r1, [sp, #20]
 8009650:	462b      	mov	r3, r5
 8009652:	eb00 0e05 	add.w	lr, r0, r5
 8009656:	210a      	movs	r1, #10
 8009658:	4573      	cmp	r3, lr
 800965a:	d113      	bne.n	8009684 <_strtod_l+0x254>
 800965c:	182b      	adds	r3, r5, r0
 800965e:	2b08      	cmp	r3, #8
 8009660:	f105 0501 	add.w	r5, r5, #1
 8009664:	4405      	add	r5, r0
 8009666:	dc1c      	bgt.n	80096a2 <_strtod_l+0x272>
 8009668:	9907      	ldr	r1, [sp, #28]
 800966a:	230a      	movs	r3, #10
 800966c:	fb03 2301 	mla	r3, r3, r1, r2
 8009670:	9307      	str	r3, [sp, #28]
 8009672:	2300      	movs	r3, #0
 8009674:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009676:	1c51      	adds	r1, r2, #1
 8009678:	9117      	str	r1, [sp, #92]	; 0x5c
 800967a:	7852      	ldrb	r2, [r2, #1]
 800967c:	4618      	mov	r0, r3
 800967e:	e7c9      	b.n	8009614 <_strtod_l+0x1e4>
 8009680:	4638      	mov	r0, r7
 8009682:	e7d2      	b.n	800962a <_strtod_l+0x1fa>
 8009684:	2b08      	cmp	r3, #8
 8009686:	dc04      	bgt.n	8009692 <_strtod_l+0x262>
 8009688:	9e07      	ldr	r6, [sp, #28]
 800968a:	434e      	muls	r6, r1
 800968c:	9607      	str	r6, [sp, #28]
 800968e:	3301      	adds	r3, #1
 8009690:	e7e2      	b.n	8009658 <_strtod_l+0x228>
 8009692:	f103 0c01 	add.w	ip, r3, #1
 8009696:	f1bc 0f10 	cmp.w	ip, #16
 800969a:	bfd8      	it	le
 800969c:	fb01 f909 	mulle.w	r9, r1, r9
 80096a0:	e7f5      	b.n	800968e <_strtod_l+0x25e>
 80096a2:	2d10      	cmp	r5, #16
 80096a4:	bfdc      	itt	le
 80096a6:	230a      	movle	r3, #10
 80096a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80096ac:	e7e1      	b.n	8009672 <_strtod_l+0x242>
 80096ae:	2300      	movs	r3, #0
 80096b0:	9305      	str	r3, [sp, #20]
 80096b2:	2301      	movs	r3, #1
 80096b4:	e77c      	b.n	80095b0 <_strtod_l+0x180>
 80096b6:	f04f 0c00 	mov.w	ip, #0
 80096ba:	f108 0202 	add.w	r2, r8, #2
 80096be:	9217      	str	r2, [sp, #92]	; 0x5c
 80096c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80096c4:	e785      	b.n	80095d2 <_strtod_l+0x1a2>
 80096c6:	f04f 0c01 	mov.w	ip, #1
 80096ca:	e7f6      	b.n	80096ba <_strtod_l+0x28a>
 80096cc:	0800e9fc 	.word	0x0800e9fc
 80096d0:	0800e750 	.word	0x0800e750
 80096d4:	7ff00000 	.word	0x7ff00000
 80096d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096da:	1c51      	adds	r1, r2, #1
 80096dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80096de:	7852      	ldrb	r2, [r2, #1]
 80096e0:	2a30      	cmp	r2, #48	; 0x30
 80096e2:	d0f9      	beq.n	80096d8 <_strtod_l+0x2a8>
 80096e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80096e8:	2908      	cmp	r1, #8
 80096ea:	f63f af79 	bhi.w	80095e0 <_strtod_l+0x1b0>
 80096ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80096f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096f4:	9206      	str	r2, [sp, #24]
 80096f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096f8:	1c51      	adds	r1, r2, #1
 80096fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80096fc:	7852      	ldrb	r2, [r2, #1]
 80096fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009702:	2e09      	cmp	r6, #9
 8009704:	d937      	bls.n	8009776 <_strtod_l+0x346>
 8009706:	9e06      	ldr	r6, [sp, #24]
 8009708:	1b89      	subs	r1, r1, r6
 800970a:	2908      	cmp	r1, #8
 800970c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009710:	dc02      	bgt.n	8009718 <_strtod_l+0x2e8>
 8009712:	4576      	cmp	r6, lr
 8009714:	bfa8      	it	ge
 8009716:	4676      	movge	r6, lr
 8009718:	f1bc 0f00 	cmp.w	ip, #0
 800971c:	d000      	beq.n	8009720 <_strtod_l+0x2f0>
 800971e:	4276      	negs	r6, r6
 8009720:	2d00      	cmp	r5, #0
 8009722:	d14d      	bne.n	80097c0 <_strtod_l+0x390>
 8009724:	9904      	ldr	r1, [sp, #16]
 8009726:	4301      	orrs	r1, r0
 8009728:	f47f aec6 	bne.w	80094b8 <_strtod_l+0x88>
 800972c:	2b00      	cmp	r3, #0
 800972e:	f47f aee1 	bne.w	80094f4 <_strtod_l+0xc4>
 8009732:	2a69      	cmp	r2, #105	; 0x69
 8009734:	d027      	beq.n	8009786 <_strtod_l+0x356>
 8009736:	dc24      	bgt.n	8009782 <_strtod_l+0x352>
 8009738:	2a49      	cmp	r2, #73	; 0x49
 800973a:	d024      	beq.n	8009786 <_strtod_l+0x356>
 800973c:	2a4e      	cmp	r2, #78	; 0x4e
 800973e:	f47f aed9 	bne.w	80094f4 <_strtod_l+0xc4>
 8009742:	499f      	ldr	r1, [pc, #636]	; (80099c0 <_strtod_l+0x590>)
 8009744:	a817      	add	r0, sp, #92	; 0x5c
 8009746:	f002 f8d7 	bl	800b8f8 <__match>
 800974a:	2800      	cmp	r0, #0
 800974c:	f43f aed2 	beq.w	80094f4 <_strtod_l+0xc4>
 8009750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	2b28      	cmp	r3, #40	; 0x28
 8009756:	d12d      	bne.n	80097b4 <_strtod_l+0x384>
 8009758:	499a      	ldr	r1, [pc, #616]	; (80099c4 <_strtod_l+0x594>)
 800975a:	aa1a      	add	r2, sp, #104	; 0x68
 800975c:	a817      	add	r0, sp, #92	; 0x5c
 800975e:	f002 f8df 	bl	800b920 <__hexnan>
 8009762:	2805      	cmp	r0, #5
 8009764:	d126      	bne.n	80097b4 <_strtod_l+0x384>
 8009766:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009768:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800976c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009770:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009774:	e6a0      	b.n	80094b8 <_strtod_l+0x88>
 8009776:	210a      	movs	r1, #10
 8009778:	fb01 2e0e 	mla	lr, r1, lr, r2
 800977c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009780:	e7b9      	b.n	80096f6 <_strtod_l+0x2c6>
 8009782:	2a6e      	cmp	r2, #110	; 0x6e
 8009784:	e7db      	b.n	800973e <_strtod_l+0x30e>
 8009786:	4990      	ldr	r1, [pc, #576]	; (80099c8 <_strtod_l+0x598>)
 8009788:	a817      	add	r0, sp, #92	; 0x5c
 800978a:	f002 f8b5 	bl	800b8f8 <__match>
 800978e:	2800      	cmp	r0, #0
 8009790:	f43f aeb0 	beq.w	80094f4 <_strtod_l+0xc4>
 8009794:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009796:	498d      	ldr	r1, [pc, #564]	; (80099cc <_strtod_l+0x59c>)
 8009798:	3b01      	subs	r3, #1
 800979a:	a817      	add	r0, sp, #92	; 0x5c
 800979c:	9317      	str	r3, [sp, #92]	; 0x5c
 800979e:	f002 f8ab 	bl	800b8f8 <__match>
 80097a2:	b910      	cbnz	r0, 80097aa <_strtod_l+0x37a>
 80097a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097a6:	3301      	adds	r3, #1
 80097a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80097aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 80099dc <_strtod_l+0x5ac>
 80097ae:	f04f 0a00 	mov.w	sl, #0
 80097b2:	e681      	b.n	80094b8 <_strtod_l+0x88>
 80097b4:	4886      	ldr	r0, [pc, #536]	; (80099d0 <_strtod_l+0x5a0>)
 80097b6:	f003 fc43 	bl	800d040 <nan>
 80097ba:	ec5b ab10 	vmov	sl, fp, d0
 80097be:	e67b      	b.n	80094b8 <_strtod_l+0x88>
 80097c0:	9b05      	ldr	r3, [sp, #20]
 80097c2:	9807      	ldr	r0, [sp, #28]
 80097c4:	1af3      	subs	r3, r6, r3
 80097c6:	2f00      	cmp	r7, #0
 80097c8:	bf08      	it	eq
 80097ca:	462f      	moveq	r7, r5
 80097cc:	2d10      	cmp	r5, #16
 80097ce:	9306      	str	r3, [sp, #24]
 80097d0:	46a8      	mov	r8, r5
 80097d2:	bfa8      	it	ge
 80097d4:	f04f 0810 	movge.w	r8, #16
 80097d8:	f7f6 fea4 	bl	8000524 <__aeabi_ui2d>
 80097dc:	2d09      	cmp	r5, #9
 80097de:	4682      	mov	sl, r0
 80097e0:	468b      	mov	fp, r1
 80097e2:	dd13      	ble.n	800980c <_strtod_l+0x3dc>
 80097e4:	4b7b      	ldr	r3, [pc, #492]	; (80099d4 <_strtod_l+0x5a4>)
 80097e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80097ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80097ee:	f7f6 ff13 	bl	8000618 <__aeabi_dmul>
 80097f2:	4682      	mov	sl, r0
 80097f4:	4648      	mov	r0, r9
 80097f6:	468b      	mov	fp, r1
 80097f8:	f7f6 fe94 	bl	8000524 <__aeabi_ui2d>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4650      	mov	r0, sl
 8009802:	4659      	mov	r1, fp
 8009804:	f7f6 fd52 	bl	80002ac <__adddf3>
 8009808:	4682      	mov	sl, r0
 800980a:	468b      	mov	fp, r1
 800980c:	2d0f      	cmp	r5, #15
 800980e:	dc38      	bgt.n	8009882 <_strtod_l+0x452>
 8009810:	9b06      	ldr	r3, [sp, #24]
 8009812:	2b00      	cmp	r3, #0
 8009814:	f43f ae50 	beq.w	80094b8 <_strtod_l+0x88>
 8009818:	dd24      	ble.n	8009864 <_strtod_l+0x434>
 800981a:	2b16      	cmp	r3, #22
 800981c:	dc0b      	bgt.n	8009836 <_strtod_l+0x406>
 800981e:	496d      	ldr	r1, [pc, #436]	; (80099d4 <_strtod_l+0x5a4>)
 8009820:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009828:	4652      	mov	r2, sl
 800982a:	465b      	mov	r3, fp
 800982c:	f7f6 fef4 	bl	8000618 <__aeabi_dmul>
 8009830:	4682      	mov	sl, r0
 8009832:	468b      	mov	fp, r1
 8009834:	e640      	b.n	80094b8 <_strtod_l+0x88>
 8009836:	9a06      	ldr	r2, [sp, #24]
 8009838:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800983c:	4293      	cmp	r3, r2
 800983e:	db20      	blt.n	8009882 <_strtod_l+0x452>
 8009840:	4c64      	ldr	r4, [pc, #400]	; (80099d4 <_strtod_l+0x5a4>)
 8009842:	f1c5 050f 	rsb	r5, r5, #15
 8009846:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800984a:	4652      	mov	r2, sl
 800984c:	465b      	mov	r3, fp
 800984e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009852:	f7f6 fee1 	bl	8000618 <__aeabi_dmul>
 8009856:	9b06      	ldr	r3, [sp, #24]
 8009858:	1b5d      	subs	r5, r3, r5
 800985a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800985e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009862:	e7e3      	b.n	800982c <_strtod_l+0x3fc>
 8009864:	9b06      	ldr	r3, [sp, #24]
 8009866:	3316      	adds	r3, #22
 8009868:	db0b      	blt.n	8009882 <_strtod_l+0x452>
 800986a:	9b05      	ldr	r3, [sp, #20]
 800986c:	1b9e      	subs	r6, r3, r6
 800986e:	4b59      	ldr	r3, [pc, #356]	; (80099d4 <_strtod_l+0x5a4>)
 8009870:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009874:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009878:	4650      	mov	r0, sl
 800987a:	4659      	mov	r1, fp
 800987c:	f7f6 fff6 	bl	800086c <__aeabi_ddiv>
 8009880:	e7d6      	b.n	8009830 <_strtod_l+0x400>
 8009882:	9b06      	ldr	r3, [sp, #24]
 8009884:	eba5 0808 	sub.w	r8, r5, r8
 8009888:	4498      	add	r8, r3
 800988a:	f1b8 0f00 	cmp.w	r8, #0
 800988e:	dd74      	ble.n	800997a <_strtod_l+0x54a>
 8009890:	f018 030f 	ands.w	r3, r8, #15
 8009894:	d00a      	beq.n	80098ac <_strtod_l+0x47c>
 8009896:	494f      	ldr	r1, [pc, #316]	; (80099d4 <_strtod_l+0x5a4>)
 8009898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800989c:	4652      	mov	r2, sl
 800989e:	465b      	mov	r3, fp
 80098a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098a4:	f7f6 feb8 	bl	8000618 <__aeabi_dmul>
 80098a8:	4682      	mov	sl, r0
 80098aa:	468b      	mov	fp, r1
 80098ac:	f038 080f 	bics.w	r8, r8, #15
 80098b0:	d04f      	beq.n	8009952 <_strtod_l+0x522>
 80098b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80098b6:	dd22      	ble.n	80098fe <_strtod_l+0x4ce>
 80098b8:	2500      	movs	r5, #0
 80098ba:	462e      	mov	r6, r5
 80098bc:	9507      	str	r5, [sp, #28]
 80098be:	9505      	str	r5, [sp, #20]
 80098c0:	2322      	movs	r3, #34	; 0x22
 80098c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80099dc <_strtod_l+0x5ac>
 80098c6:	6023      	str	r3, [r4, #0]
 80098c8:	f04f 0a00 	mov.w	sl, #0
 80098cc:	9b07      	ldr	r3, [sp, #28]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f43f adf2 	beq.w	80094b8 <_strtod_l+0x88>
 80098d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098d6:	4620      	mov	r0, r4
 80098d8:	f002 f9a6 	bl	800bc28 <_Bfree>
 80098dc:	9905      	ldr	r1, [sp, #20]
 80098de:	4620      	mov	r0, r4
 80098e0:	f002 f9a2 	bl	800bc28 <_Bfree>
 80098e4:	4631      	mov	r1, r6
 80098e6:	4620      	mov	r0, r4
 80098e8:	f002 f99e 	bl	800bc28 <_Bfree>
 80098ec:	9907      	ldr	r1, [sp, #28]
 80098ee:	4620      	mov	r0, r4
 80098f0:	f002 f99a 	bl	800bc28 <_Bfree>
 80098f4:	4629      	mov	r1, r5
 80098f6:	4620      	mov	r0, r4
 80098f8:	f002 f996 	bl	800bc28 <_Bfree>
 80098fc:	e5dc      	b.n	80094b8 <_strtod_l+0x88>
 80098fe:	4b36      	ldr	r3, [pc, #216]	; (80099d8 <_strtod_l+0x5a8>)
 8009900:	9304      	str	r3, [sp, #16]
 8009902:	2300      	movs	r3, #0
 8009904:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009908:	4650      	mov	r0, sl
 800990a:	4659      	mov	r1, fp
 800990c:	4699      	mov	r9, r3
 800990e:	f1b8 0f01 	cmp.w	r8, #1
 8009912:	dc21      	bgt.n	8009958 <_strtod_l+0x528>
 8009914:	b10b      	cbz	r3, 800991a <_strtod_l+0x4ea>
 8009916:	4682      	mov	sl, r0
 8009918:	468b      	mov	fp, r1
 800991a:	4b2f      	ldr	r3, [pc, #188]	; (80099d8 <_strtod_l+0x5a8>)
 800991c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009920:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009924:	4652      	mov	r2, sl
 8009926:	465b      	mov	r3, fp
 8009928:	e9d9 0100 	ldrd	r0, r1, [r9]
 800992c:	f7f6 fe74 	bl	8000618 <__aeabi_dmul>
 8009930:	4b2a      	ldr	r3, [pc, #168]	; (80099dc <_strtod_l+0x5ac>)
 8009932:	460a      	mov	r2, r1
 8009934:	400b      	ands	r3, r1
 8009936:	492a      	ldr	r1, [pc, #168]	; (80099e0 <_strtod_l+0x5b0>)
 8009938:	428b      	cmp	r3, r1
 800993a:	4682      	mov	sl, r0
 800993c:	d8bc      	bhi.n	80098b8 <_strtod_l+0x488>
 800993e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009942:	428b      	cmp	r3, r1
 8009944:	bf86      	itte	hi
 8009946:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80099e4 <_strtod_l+0x5b4>
 800994a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800994e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009952:	2300      	movs	r3, #0
 8009954:	9304      	str	r3, [sp, #16]
 8009956:	e084      	b.n	8009a62 <_strtod_l+0x632>
 8009958:	f018 0f01 	tst.w	r8, #1
 800995c:	d005      	beq.n	800996a <_strtod_l+0x53a>
 800995e:	9b04      	ldr	r3, [sp, #16]
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	f7f6 fe58 	bl	8000618 <__aeabi_dmul>
 8009968:	2301      	movs	r3, #1
 800996a:	9a04      	ldr	r2, [sp, #16]
 800996c:	3208      	adds	r2, #8
 800996e:	f109 0901 	add.w	r9, r9, #1
 8009972:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009976:	9204      	str	r2, [sp, #16]
 8009978:	e7c9      	b.n	800990e <_strtod_l+0x4de>
 800997a:	d0ea      	beq.n	8009952 <_strtod_l+0x522>
 800997c:	f1c8 0800 	rsb	r8, r8, #0
 8009980:	f018 020f 	ands.w	r2, r8, #15
 8009984:	d00a      	beq.n	800999c <_strtod_l+0x56c>
 8009986:	4b13      	ldr	r3, [pc, #76]	; (80099d4 <_strtod_l+0x5a4>)
 8009988:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800998c:	4650      	mov	r0, sl
 800998e:	4659      	mov	r1, fp
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f7f6 ff6a 	bl	800086c <__aeabi_ddiv>
 8009998:	4682      	mov	sl, r0
 800999a:	468b      	mov	fp, r1
 800999c:	ea5f 1828 	movs.w	r8, r8, asr #4
 80099a0:	d0d7      	beq.n	8009952 <_strtod_l+0x522>
 80099a2:	f1b8 0f1f 	cmp.w	r8, #31
 80099a6:	dd1f      	ble.n	80099e8 <_strtod_l+0x5b8>
 80099a8:	2500      	movs	r5, #0
 80099aa:	462e      	mov	r6, r5
 80099ac:	9507      	str	r5, [sp, #28]
 80099ae:	9505      	str	r5, [sp, #20]
 80099b0:	2322      	movs	r3, #34	; 0x22
 80099b2:	f04f 0a00 	mov.w	sl, #0
 80099b6:	f04f 0b00 	mov.w	fp, #0
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	e786      	b.n	80098cc <_strtod_l+0x49c>
 80099be:	bf00      	nop
 80099c0:	0800e725 	.word	0x0800e725
 80099c4:	0800e764 	.word	0x0800e764
 80099c8:	0800e71d 	.word	0x0800e71d
 80099cc:	0800e8a4 	.word	0x0800e8a4
 80099d0:	0800ebd3 	.word	0x0800ebd3
 80099d4:	0800ea98 	.word	0x0800ea98
 80099d8:	0800ea70 	.word	0x0800ea70
 80099dc:	7ff00000 	.word	0x7ff00000
 80099e0:	7ca00000 	.word	0x7ca00000
 80099e4:	7fefffff 	.word	0x7fefffff
 80099e8:	f018 0310 	ands.w	r3, r8, #16
 80099ec:	bf18      	it	ne
 80099ee:	236a      	movne	r3, #106	; 0x6a
 80099f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009da0 <_strtod_l+0x970>
 80099f4:	9304      	str	r3, [sp, #16]
 80099f6:	4650      	mov	r0, sl
 80099f8:	4659      	mov	r1, fp
 80099fa:	2300      	movs	r3, #0
 80099fc:	f018 0f01 	tst.w	r8, #1
 8009a00:	d004      	beq.n	8009a0c <_strtod_l+0x5dc>
 8009a02:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009a06:	f7f6 fe07 	bl	8000618 <__aeabi_dmul>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009a10:	f109 0908 	add.w	r9, r9, #8
 8009a14:	d1f2      	bne.n	80099fc <_strtod_l+0x5cc>
 8009a16:	b10b      	cbz	r3, 8009a1c <_strtod_l+0x5ec>
 8009a18:	4682      	mov	sl, r0
 8009a1a:	468b      	mov	fp, r1
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	b1c3      	cbz	r3, 8009a52 <_strtod_l+0x622>
 8009a20:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009a24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	4659      	mov	r1, fp
 8009a2c:	dd11      	ble.n	8009a52 <_strtod_l+0x622>
 8009a2e:	2b1f      	cmp	r3, #31
 8009a30:	f340 8124 	ble.w	8009c7c <_strtod_l+0x84c>
 8009a34:	2b34      	cmp	r3, #52	; 0x34
 8009a36:	bfde      	ittt	le
 8009a38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009a3c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8009a40:	fa03 f202 	lslle.w	r2, r3, r2
 8009a44:	f04f 0a00 	mov.w	sl, #0
 8009a48:	bfcc      	ite	gt
 8009a4a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009a4e:	ea02 0b01 	andle.w	fp, r2, r1
 8009a52:	2200      	movs	r2, #0
 8009a54:	2300      	movs	r3, #0
 8009a56:	4650      	mov	r0, sl
 8009a58:	4659      	mov	r1, fp
 8009a5a:	f7f7 f845 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d1a2      	bne.n	80099a8 <_strtod_l+0x578>
 8009a62:	9b07      	ldr	r3, [sp, #28]
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	9908      	ldr	r1, [sp, #32]
 8009a68:	462b      	mov	r3, r5
 8009a6a:	463a      	mov	r2, r7
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f002 f943 	bl	800bcf8 <__s2b>
 8009a72:	9007      	str	r0, [sp, #28]
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f43f af1f 	beq.w	80098b8 <_strtod_l+0x488>
 8009a7a:	9b05      	ldr	r3, [sp, #20]
 8009a7c:	1b9e      	subs	r6, r3, r6
 8009a7e:	9b06      	ldr	r3, [sp, #24]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	bfb4      	ite	lt
 8009a84:	4633      	movlt	r3, r6
 8009a86:	2300      	movge	r3, #0
 8009a88:	930c      	str	r3, [sp, #48]	; 0x30
 8009a8a:	9b06      	ldr	r3, [sp, #24]
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a92:	9312      	str	r3, [sp, #72]	; 0x48
 8009a94:	462e      	mov	r6, r5
 8009a96:	9b07      	ldr	r3, [sp, #28]
 8009a98:	4620      	mov	r0, r4
 8009a9a:	6859      	ldr	r1, [r3, #4]
 8009a9c:	f002 f884 	bl	800bba8 <_Balloc>
 8009aa0:	9005      	str	r0, [sp, #20]
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f43f af0c 	beq.w	80098c0 <_strtod_l+0x490>
 8009aa8:	9b07      	ldr	r3, [sp, #28]
 8009aaa:	691a      	ldr	r2, [r3, #16]
 8009aac:	3202      	adds	r2, #2
 8009aae:	f103 010c 	add.w	r1, r3, #12
 8009ab2:	0092      	lsls	r2, r2, #2
 8009ab4:	300c      	adds	r0, #12
 8009ab6:	f002 f869 	bl	800bb8c <memcpy>
 8009aba:	ec4b ab10 	vmov	d0, sl, fp
 8009abe:	aa1a      	add	r2, sp, #104	; 0x68
 8009ac0:	a919      	add	r1, sp, #100	; 0x64
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f002 fc5e 	bl	800c384 <__d2b>
 8009ac8:	ec4b ab18 	vmov	d8, sl, fp
 8009acc:	9018      	str	r0, [sp, #96]	; 0x60
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	f43f aef6 	beq.w	80098c0 <_strtod_l+0x490>
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f002 f9a8 	bl	800be2c <__i2b>
 8009adc:	4606      	mov	r6, r0
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	f43f aeee 	beq.w	80098c0 <_strtod_l+0x490>
 8009ae4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ae6:	9904      	ldr	r1, [sp, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	bfab      	itete	ge
 8009aec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009aee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009af0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009af2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009af6:	bfac      	ite	ge
 8009af8:	eb03 0902 	addge.w	r9, r3, r2
 8009afc:	1ad7      	sublt	r7, r2, r3
 8009afe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b00:	eba3 0801 	sub.w	r8, r3, r1
 8009b04:	4490      	add	r8, r2
 8009b06:	4ba1      	ldr	r3, [pc, #644]	; (8009d8c <_strtod_l+0x95c>)
 8009b08:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009b0c:	4598      	cmp	r8, r3
 8009b0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b12:	f280 80c7 	bge.w	8009ca4 <_strtod_l+0x874>
 8009b16:	eba3 0308 	sub.w	r3, r3, r8
 8009b1a:	2b1f      	cmp	r3, #31
 8009b1c:	eba2 0203 	sub.w	r2, r2, r3
 8009b20:	f04f 0101 	mov.w	r1, #1
 8009b24:	f300 80b1 	bgt.w	8009c8a <_strtod_l+0x85a>
 8009b28:	fa01 f303 	lsl.w	r3, r1, r3
 8009b2c:	930d      	str	r3, [sp, #52]	; 0x34
 8009b2e:	2300      	movs	r3, #0
 8009b30:	9308      	str	r3, [sp, #32]
 8009b32:	eb09 0802 	add.w	r8, r9, r2
 8009b36:	9b04      	ldr	r3, [sp, #16]
 8009b38:	45c1      	cmp	r9, r8
 8009b3a:	4417      	add	r7, r2
 8009b3c:	441f      	add	r7, r3
 8009b3e:	464b      	mov	r3, r9
 8009b40:	bfa8      	it	ge
 8009b42:	4643      	movge	r3, r8
 8009b44:	42bb      	cmp	r3, r7
 8009b46:	bfa8      	it	ge
 8009b48:	463b      	movge	r3, r7
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	bfc2      	ittt	gt
 8009b4e:	eba8 0803 	subgt.w	r8, r8, r3
 8009b52:	1aff      	subgt	r7, r7, r3
 8009b54:	eba9 0903 	subgt.w	r9, r9, r3
 8009b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	dd17      	ble.n	8009b8e <_strtod_l+0x75e>
 8009b5e:	4631      	mov	r1, r6
 8009b60:	461a      	mov	r2, r3
 8009b62:	4620      	mov	r0, r4
 8009b64:	f002 fa22 	bl	800bfac <__pow5mult>
 8009b68:	4606      	mov	r6, r0
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	f43f aea8 	beq.w	80098c0 <_strtod_l+0x490>
 8009b70:	4601      	mov	r1, r0
 8009b72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b74:	4620      	mov	r0, r4
 8009b76:	f002 f96f 	bl	800be58 <__multiply>
 8009b7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f43f ae9f 	beq.w	80098c0 <_strtod_l+0x490>
 8009b82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b84:	4620      	mov	r0, r4
 8009b86:	f002 f84f 	bl	800bc28 <_Bfree>
 8009b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b8c:	9318      	str	r3, [sp, #96]	; 0x60
 8009b8e:	f1b8 0f00 	cmp.w	r8, #0
 8009b92:	f300 808c 	bgt.w	8009cae <_strtod_l+0x87e>
 8009b96:	9b06      	ldr	r3, [sp, #24]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	dd08      	ble.n	8009bae <_strtod_l+0x77e>
 8009b9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b9e:	9905      	ldr	r1, [sp, #20]
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f002 fa03 	bl	800bfac <__pow5mult>
 8009ba6:	9005      	str	r0, [sp, #20]
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	f43f ae89 	beq.w	80098c0 <_strtod_l+0x490>
 8009bae:	2f00      	cmp	r7, #0
 8009bb0:	dd08      	ble.n	8009bc4 <_strtod_l+0x794>
 8009bb2:	9905      	ldr	r1, [sp, #20]
 8009bb4:	463a      	mov	r2, r7
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f002 fa52 	bl	800c060 <__lshift>
 8009bbc:	9005      	str	r0, [sp, #20]
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	f43f ae7e 	beq.w	80098c0 <_strtod_l+0x490>
 8009bc4:	f1b9 0f00 	cmp.w	r9, #0
 8009bc8:	dd08      	ble.n	8009bdc <_strtod_l+0x7ac>
 8009bca:	4631      	mov	r1, r6
 8009bcc:	464a      	mov	r2, r9
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f002 fa46 	bl	800c060 <__lshift>
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	f43f ae72 	beq.w	80098c0 <_strtod_l+0x490>
 8009bdc:	9a05      	ldr	r2, [sp, #20]
 8009bde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009be0:	4620      	mov	r0, r4
 8009be2:	f002 fac9 	bl	800c178 <__mdiff>
 8009be6:	4605      	mov	r5, r0
 8009be8:	2800      	cmp	r0, #0
 8009bea:	f43f ae69 	beq.w	80098c0 <_strtod_l+0x490>
 8009bee:	68c3      	ldr	r3, [r0, #12]
 8009bf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	60c3      	str	r3, [r0, #12]
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	f002 faa2 	bl	800c140 <__mcmp>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	da60      	bge.n	8009cc2 <_strtod_l+0x892>
 8009c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c02:	ea53 030a 	orrs.w	r3, r3, sl
 8009c06:	f040 8082 	bne.w	8009d0e <_strtod_l+0x8de>
 8009c0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d17d      	bne.n	8009d0e <_strtod_l+0x8de>
 8009c12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c16:	0d1b      	lsrs	r3, r3, #20
 8009c18:	051b      	lsls	r3, r3, #20
 8009c1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009c1e:	d976      	bls.n	8009d0e <_strtod_l+0x8de>
 8009c20:	696b      	ldr	r3, [r5, #20]
 8009c22:	b913      	cbnz	r3, 8009c2a <_strtod_l+0x7fa>
 8009c24:	692b      	ldr	r3, [r5, #16]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	dd71      	ble.n	8009d0e <_strtod_l+0x8de>
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f002 fa16 	bl	800c060 <__lshift>
 8009c34:	4631      	mov	r1, r6
 8009c36:	4605      	mov	r5, r0
 8009c38:	f002 fa82 	bl	800c140 <__mcmp>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	dd66      	ble.n	8009d0e <_strtod_l+0x8de>
 8009c40:	9904      	ldr	r1, [sp, #16]
 8009c42:	4a53      	ldr	r2, [pc, #332]	; (8009d90 <_strtod_l+0x960>)
 8009c44:	465b      	mov	r3, fp
 8009c46:	2900      	cmp	r1, #0
 8009c48:	f000 8081 	beq.w	8009d4e <_strtod_l+0x91e>
 8009c4c:	ea02 010b 	and.w	r1, r2, fp
 8009c50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c54:	dc7b      	bgt.n	8009d4e <_strtod_l+0x91e>
 8009c56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c5a:	f77f aea9 	ble.w	80099b0 <_strtod_l+0x580>
 8009c5e:	4b4d      	ldr	r3, [pc, #308]	; (8009d94 <_strtod_l+0x964>)
 8009c60:	4650      	mov	r0, sl
 8009c62:	4659      	mov	r1, fp
 8009c64:	2200      	movs	r2, #0
 8009c66:	f7f6 fcd7 	bl	8000618 <__aeabi_dmul>
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4303      	orrs	r3, r0
 8009c6e:	bf08      	it	eq
 8009c70:	2322      	moveq	r3, #34	; 0x22
 8009c72:	4682      	mov	sl, r0
 8009c74:	468b      	mov	fp, r1
 8009c76:	bf08      	it	eq
 8009c78:	6023      	streq	r3, [r4, #0]
 8009c7a:	e62b      	b.n	80098d4 <_strtod_l+0x4a4>
 8009c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c80:	fa02 f303 	lsl.w	r3, r2, r3
 8009c84:	ea03 0a0a 	and.w	sl, r3, sl
 8009c88:	e6e3      	b.n	8009a52 <_strtod_l+0x622>
 8009c8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009c8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009c92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009c96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009c9a:	fa01 f308 	lsl.w	r3, r1, r8
 8009c9e:	9308      	str	r3, [sp, #32]
 8009ca0:	910d      	str	r1, [sp, #52]	; 0x34
 8009ca2:	e746      	b.n	8009b32 <_strtod_l+0x702>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9308      	str	r3, [sp, #32]
 8009ca8:	2301      	movs	r3, #1
 8009caa:	930d      	str	r3, [sp, #52]	; 0x34
 8009cac:	e741      	b.n	8009b32 <_strtod_l+0x702>
 8009cae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f002 f9d4 	bl	800c060 <__lshift>
 8009cb8:	9018      	str	r0, [sp, #96]	; 0x60
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	f47f af6b 	bne.w	8009b96 <_strtod_l+0x766>
 8009cc0:	e5fe      	b.n	80098c0 <_strtod_l+0x490>
 8009cc2:	465f      	mov	r7, fp
 8009cc4:	d16e      	bne.n	8009da4 <_strtod_l+0x974>
 8009cc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ccc:	b342      	cbz	r2, 8009d20 <_strtod_l+0x8f0>
 8009cce:	4a32      	ldr	r2, [pc, #200]	; (8009d98 <_strtod_l+0x968>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d128      	bne.n	8009d26 <_strtod_l+0x8f6>
 8009cd4:	9b04      	ldr	r3, [sp, #16]
 8009cd6:	4651      	mov	r1, sl
 8009cd8:	b1eb      	cbz	r3, 8009d16 <_strtod_l+0x8e6>
 8009cda:	4b2d      	ldr	r3, [pc, #180]	; (8009d90 <_strtod_l+0x960>)
 8009cdc:	403b      	ands	r3, r7
 8009cde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ce6:	d819      	bhi.n	8009d1c <_strtod_l+0x8ec>
 8009ce8:	0d1b      	lsrs	r3, r3, #20
 8009cea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009cee:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf2:	4299      	cmp	r1, r3
 8009cf4:	d117      	bne.n	8009d26 <_strtod_l+0x8f6>
 8009cf6:	4b29      	ldr	r3, [pc, #164]	; (8009d9c <_strtod_l+0x96c>)
 8009cf8:	429f      	cmp	r7, r3
 8009cfa:	d102      	bne.n	8009d02 <_strtod_l+0x8d2>
 8009cfc:	3101      	adds	r1, #1
 8009cfe:	f43f addf 	beq.w	80098c0 <_strtod_l+0x490>
 8009d02:	4b23      	ldr	r3, [pc, #140]	; (8009d90 <_strtod_l+0x960>)
 8009d04:	403b      	ands	r3, r7
 8009d06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009d0a:	f04f 0a00 	mov.w	sl, #0
 8009d0e:	9b04      	ldr	r3, [sp, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1a4      	bne.n	8009c5e <_strtod_l+0x82e>
 8009d14:	e5de      	b.n	80098d4 <_strtod_l+0x4a4>
 8009d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d1a:	e7ea      	b.n	8009cf2 <_strtod_l+0x8c2>
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	e7e8      	b.n	8009cf2 <_strtod_l+0x8c2>
 8009d20:	ea53 030a 	orrs.w	r3, r3, sl
 8009d24:	d08c      	beq.n	8009c40 <_strtod_l+0x810>
 8009d26:	9b08      	ldr	r3, [sp, #32]
 8009d28:	b1db      	cbz	r3, 8009d62 <_strtod_l+0x932>
 8009d2a:	423b      	tst	r3, r7
 8009d2c:	d0ef      	beq.n	8009d0e <_strtod_l+0x8de>
 8009d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d30:	9a04      	ldr	r2, [sp, #16]
 8009d32:	4650      	mov	r0, sl
 8009d34:	4659      	mov	r1, fp
 8009d36:	b1c3      	cbz	r3, 8009d6a <_strtod_l+0x93a>
 8009d38:	f7ff fb5d 	bl	80093f6 <sulp>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	ec51 0b18 	vmov	r0, r1, d8
 8009d44:	f7f6 fab2 	bl	80002ac <__adddf3>
 8009d48:	4682      	mov	sl, r0
 8009d4a:	468b      	mov	fp, r1
 8009d4c:	e7df      	b.n	8009d0e <_strtod_l+0x8de>
 8009d4e:	4013      	ands	r3, r2
 8009d50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009d54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d5c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009d60:	e7d5      	b.n	8009d0e <_strtod_l+0x8de>
 8009d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d64:	ea13 0f0a 	tst.w	r3, sl
 8009d68:	e7e0      	b.n	8009d2c <_strtod_l+0x8fc>
 8009d6a:	f7ff fb44 	bl	80093f6 <sulp>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	ec51 0b18 	vmov	r0, r1, d8
 8009d76:	f7f6 fa97 	bl	80002a8 <__aeabi_dsub>
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4682      	mov	sl, r0
 8009d80:	468b      	mov	fp, r1
 8009d82:	f7f6 feb1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d0c1      	beq.n	8009d0e <_strtod_l+0x8de>
 8009d8a:	e611      	b.n	80099b0 <_strtod_l+0x580>
 8009d8c:	fffffc02 	.word	0xfffffc02
 8009d90:	7ff00000 	.word	0x7ff00000
 8009d94:	39500000 	.word	0x39500000
 8009d98:	000fffff 	.word	0x000fffff
 8009d9c:	7fefffff 	.word	0x7fefffff
 8009da0:	0800e778 	.word	0x0800e778
 8009da4:	4631      	mov	r1, r6
 8009da6:	4628      	mov	r0, r5
 8009da8:	f002 fb48 	bl	800c43c <__ratio>
 8009dac:	ec59 8b10 	vmov	r8, r9, d0
 8009db0:	ee10 0a10 	vmov	r0, s0
 8009db4:	2200      	movs	r2, #0
 8009db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009dba:	4649      	mov	r1, r9
 8009dbc:	f7f6 fea8 	bl	8000b10 <__aeabi_dcmple>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d07a      	beq.n	8009eba <_strtod_l+0xa8a>
 8009dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d04a      	beq.n	8009e60 <_strtod_l+0xa30>
 8009dca:	4b95      	ldr	r3, [pc, #596]	; (800a020 <_strtod_l+0xbf0>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009dd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a020 <_strtod_l+0xbf0>
 8009dd6:	f04f 0800 	mov.w	r8, #0
 8009dda:	4b92      	ldr	r3, [pc, #584]	; (800a024 <_strtod_l+0xbf4>)
 8009ddc:	403b      	ands	r3, r7
 8009dde:	930d      	str	r3, [sp, #52]	; 0x34
 8009de0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009de2:	4b91      	ldr	r3, [pc, #580]	; (800a028 <_strtod_l+0xbf8>)
 8009de4:	429a      	cmp	r2, r3
 8009de6:	f040 80b0 	bne.w	8009f4a <_strtod_l+0xb1a>
 8009dea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009dee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009df2:	ec4b ab10 	vmov	d0, sl, fp
 8009df6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009dfa:	f002 fa47 	bl	800c28c <__ulp>
 8009dfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e02:	ec53 2b10 	vmov	r2, r3, d0
 8009e06:	f7f6 fc07 	bl	8000618 <__aeabi_dmul>
 8009e0a:	4652      	mov	r2, sl
 8009e0c:	465b      	mov	r3, fp
 8009e0e:	f7f6 fa4d 	bl	80002ac <__adddf3>
 8009e12:	460b      	mov	r3, r1
 8009e14:	4983      	ldr	r1, [pc, #524]	; (800a024 <_strtod_l+0xbf4>)
 8009e16:	4a85      	ldr	r2, [pc, #532]	; (800a02c <_strtod_l+0xbfc>)
 8009e18:	4019      	ands	r1, r3
 8009e1a:	4291      	cmp	r1, r2
 8009e1c:	4682      	mov	sl, r0
 8009e1e:	d960      	bls.n	8009ee2 <_strtod_l+0xab2>
 8009e20:	ee18 3a90 	vmov	r3, s17
 8009e24:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d104      	bne.n	8009e36 <_strtod_l+0xa06>
 8009e2c:	ee18 3a10 	vmov	r3, s16
 8009e30:	3301      	adds	r3, #1
 8009e32:	f43f ad45 	beq.w	80098c0 <_strtod_l+0x490>
 8009e36:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a038 <_strtod_l+0xc08>
 8009e3a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009e3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e40:	4620      	mov	r0, r4
 8009e42:	f001 fef1 	bl	800bc28 <_Bfree>
 8009e46:	9905      	ldr	r1, [sp, #20]
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f001 feed 	bl	800bc28 <_Bfree>
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4620      	mov	r0, r4
 8009e52:	f001 fee9 	bl	800bc28 <_Bfree>
 8009e56:	4629      	mov	r1, r5
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f001 fee5 	bl	800bc28 <_Bfree>
 8009e5e:	e61a      	b.n	8009a96 <_strtod_l+0x666>
 8009e60:	f1ba 0f00 	cmp.w	sl, #0
 8009e64:	d11b      	bne.n	8009e9e <_strtod_l+0xa6e>
 8009e66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e6a:	b9f3      	cbnz	r3, 8009eaa <_strtod_l+0xa7a>
 8009e6c:	4b6c      	ldr	r3, [pc, #432]	; (800a020 <_strtod_l+0xbf0>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	4640      	mov	r0, r8
 8009e72:	4649      	mov	r1, r9
 8009e74:	f7f6 fe42 	bl	8000afc <__aeabi_dcmplt>
 8009e78:	b9d0      	cbnz	r0, 8009eb0 <_strtod_l+0xa80>
 8009e7a:	4640      	mov	r0, r8
 8009e7c:	4649      	mov	r1, r9
 8009e7e:	4b6c      	ldr	r3, [pc, #432]	; (800a030 <_strtod_l+0xc00>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	f7f6 fbc9 	bl	8000618 <__aeabi_dmul>
 8009e86:	4680      	mov	r8, r0
 8009e88:	4689      	mov	r9, r1
 8009e8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009e8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009e92:	9315      	str	r3, [sp, #84]	; 0x54
 8009e94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e9c:	e79d      	b.n	8009dda <_strtod_l+0x9aa>
 8009e9e:	f1ba 0f01 	cmp.w	sl, #1
 8009ea2:	d102      	bne.n	8009eaa <_strtod_l+0xa7a>
 8009ea4:	2f00      	cmp	r7, #0
 8009ea6:	f43f ad83 	beq.w	80099b0 <_strtod_l+0x580>
 8009eaa:	4b62      	ldr	r3, [pc, #392]	; (800a034 <_strtod_l+0xc04>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	e78e      	b.n	8009dce <_strtod_l+0x99e>
 8009eb0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a030 <_strtod_l+0xc00>
 8009eb4:	f04f 0800 	mov.w	r8, #0
 8009eb8:	e7e7      	b.n	8009e8a <_strtod_l+0xa5a>
 8009eba:	4b5d      	ldr	r3, [pc, #372]	; (800a030 <_strtod_l+0xc00>)
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f7f6 fba9 	bl	8000618 <__aeabi_dmul>
 8009ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ec8:	4680      	mov	r8, r0
 8009eca:	4689      	mov	r9, r1
 8009ecc:	b933      	cbnz	r3, 8009edc <_strtod_l+0xaac>
 8009ece:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ed2:	900e      	str	r0, [sp, #56]	; 0x38
 8009ed4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ed6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009eda:	e7dd      	b.n	8009e98 <_strtod_l+0xa68>
 8009edc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009ee0:	e7f9      	b.n	8009ed6 <_strtod_l+0xaa6>
 8009ee2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009ee6:	9b04      	ldr	r3, [sp, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1a8      	bne.n	8009e3e <_strtod_l+0xa0e>
 8009eec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ef2:	0d1b      	lsrs	r3, r3, #20
 8009ef4:	051b      	lsls	r3, r3, #20
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d1a1      	bne.n	8009e3e <_strtod_l+0xa0e>
 8009efa:	4640      	mov	r0, r8
 8009efc:	4649      	mov	r1, r9
 8009efe:	f7f6 feeb 	bl	8000cd8 <__aeabi_d2lz>
 8009f02:	f7f6 fb5b 	bl	80005bc <__aeabi_l2d>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	4640      	mov	r0, r8
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	f7f6 f9cb 	bl	80002a8 <__aeabi_dsub>
 8009f12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f18:	ea43 030a 	orr.w	r3, r3, sl
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	4680      	mov	r8, r0
 8009f20:	4689      	mov	r9, r1
 8009f22:	d055      	beq.n	8009fd0 <_strtod_l+0xba0>
 8009f24:	a336      	add	r3, pc, #216	; (adr r3, 800a000 <_strtod_l+0xbd0>)
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	f7f6 fde7 	bl	8000afc <__aeabi_dcmplt>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f47f acd0 	bne.w	80098d4 <_strtod_l+0x4a4>
 8009f34:	a334      	add	r3, pc, #208	; (adr r3, 800a008 <_strtod_l+0xbd8>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	f7f6 fdfb 	bl	8000b38 <__aeabi_dcmpgt>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	f43f af7b 	beq.w	8009e3e <_strtod_l+0xa0e>
 8009f48:	e4c4      	b.n	80098d4 <_strtod_l+0x4a4>
 8009f4a:	9b04      	ldr	r3, [sp, #16]
 8009f4c:	b333      	cbz	r3, 8009f9c <_strtod_l+0xb6c>
 8009f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f54:	d822      	bhi.n	8009f9c <_strtod_l+0xb6c>
 8009f56:	a32e      	add	r3, pc, #184	; (adr r3, 800a010 <_strtod_l+0xbe0>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	4640      	mov	r0, r8
 8009f5e:	4649      	mov	r1, r9
 8009f60:	f7f6 fdd6 	bl	8000b10 <__aeabi_dcmple>
 8009f64:	b1a0      	cbz	r0, 8009f90 <_strtod_l+0xb60>
 8009f66:	4649      	mov	r1, r9
 8009f68:	4640      	mov	r0, r8
 8009f6a:	f7f6 fe2d 	bl	8000bc8 <__aeabi_d2uiz>
 8009f6e:	2801      	cmp	r0, #1
 8009f70:	bf38      	it	cc
 8009f72:	2001      	movcc	r0, #1
 8009f74:	f7f6 fad6 	bl	8000524 <__aeabi_ui2d>
 8009f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f7a:	4680      	mov	r8, r0
 8009f7c:	4689      	mov	r9, r1
 8009f7e:	bb23      	cbnz	r3, 8009fca <_strtod_l+0xb9a>
 8009f80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f84:	9010      	str	r0, [sp, #64]	; 0x40
 8009f86:	9311      	str	r3, [sp, #68]	; 0x44
 8009f88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009f98:	1a9b      	subs	r3, r3, r2
 8009f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fa0:	eeb0 0a48 	vmov.f32	s0, s16
 8009fa4:	eef0 0a68 	vmov.f32	s1, s17
 8009fa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009fac:	f002 f96e 	bl	800c28c <__ulp>
 8009fb0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fb4:	ec53 2b10 	vmov	r2, r3, d0
 8009fb8:	f7f6 fb2e 	bl	8000618 <__aeabi_dmul>
 8009fbc:	ec53 2b18 	vmov	r2, r3, d8
 8009fc0:	f7f6 f974 	bl	80002ac <__adddf3>
 8009fc4:	4682      	mov	sl, r0
 8009fc6:	468b      	mov	fp, r1
 8009fc8:	e78d      	b.n	8009ee6 <_strtod_l+0xab6>
 8009fca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009fce:	e7db      	b.n	8009f88 <_strtod_l+0xb58>
 8009fd0:	a311      	add	r3, pc, #68	; (adr r3, 800a018 <_strtod_l+0xbe8>)
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	f7f6 fd91 	bl	8000afc <__aeabi_dcmplt>
 8009fda:	e7b2      	b.n	8009f42 <_strtod_l+0xb12>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	930a      	str	r3, [sp, #40]	; 0x28
 8009fe0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009fe2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fe4:	6013      	str	r3, [r2, #0]
 8009fe6:	f7ff ba6b 	b.w	80094c0 <_strtod_l+0x90>
 8009fea:	2a65      	cmp	r2, #101	; 0x65
 8009fec:	f43f ab5f 	beq.w	80096ae <_strtod_l+0x27e>
 8009ff0:	2a45      	cmp	r2, #69	; 0x45
 8009ff2:	f43f ab5c 	beq.w	80096ae <_strtod_l+0x27e>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	f7ff bb94 	b.w	8009724 <_strtod_l+0x2f4>
 8009ffc:	f3af 8000 	nop.w
 800a000:	94a03595 	.word	0x94a03595
 800a004:	3fdfffff 	.word	0x3fdfffff
 800a008:	35afe535 	.word	0x35afe535
 800a00c:	3fe00000 	.word	0x3fe00000
 800a010:	ffc00000 	.word	0xffc00000
 800a014:	41dfffff 	.word	0x41dfffff
 800a018:	94a03595 	.word	0x94a03595
 800a01c:	3fcfffff 	.word	0x3fcfffff
 800a020:	3ff00000 	.word	0x3ff00000
 800a024:	7ff00000 	.word	0x7ff00000
 800a028:	7fe00000 	.word	0x7fe00000
 800a02c:	7c9fffff 	.word	0x7c9fffff
 800a030:	3fe00000 	.word	0x3fe00000
 800a034:	bff00000 	.word	0xbff00000
 800a038:	7fefffff 	.word	0x7fefffff

0800a03c <_strtod_r>:
 800a03c:	4b01      	ldr	r3, [pc, #4]	; (800a044 <_strtod_r+0x8>)
 800a03e:	f7ff b9f7 	b.w	8009430 <_strtod_l>
 800a042:	bf00      	nop
 800a044:	2000008c 	.word	0x2000008c

0800a048 <_strtol_l.constprop.0>:
 800a048:	2b01      	cmp	r3, #1
 800a04a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a04e:	d001      	beq.n	800a054 <_strtol_l.constprop.0+0xc>
 800a050:	2b24      	cmp	r3, #36	; 0x24
 800a052:	d906      	bls.n	800a062 <_strtol_l.constprop.0+0x1a>
 800a054:	f7fe fa0e 	bl	8008474 <__errno>
 800a058:	2316      	movs	r3, #22
 800a05a:	6003      	str	r3, [r0, #0]
 800a05c:	2000      	movs	r0, #0
 800a05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a062:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a148 <_strtol_l.constprop.0+0x100>
 800a066:	460d      	mov	r5, r1
 800a068:	462e      	mov	r6, r5
 800a06a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a06e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a072:	f017 0708 	ands.w	r7, r7, #8
 800a076:	d1f7      	bne.n	800a068 <_strtol_l.constprop.0+0x20>
 800a078:	2c2d      	cmp	r4, #45	; 0x2d
 800a07a:	d132      	bne.n	800a0e2 <_strtol_l.constprop.0+0x9a>
 800a07c:	782c      	ldrb	r4, [r5, #0]
 800a07e:	2701      	movs	r7, #1
 800a080:	1cb5      	adds	r5, r6, #2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d05b      	beq.n	800a13e <_strtol_l.constprop.0+0xf6>
 800a086:	2b10      	cmp	r3, #16
 800a088:	d109      	bne.n	800a09e <_strtol_l.constprop.0+0x56>
 800a08a:	2c30      	cmp	r4, #48	; 0x30
 800a08c:	d107      	bne.n	800a09e <_strtol_l.constprop.0+0x56>
 800a08e:	782c      	ldrb	r4, [r5, #0]
 800a090:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a094:	2c58      	cmp	r4, #88	; 0x58
 800a096:	d14d      	bne.n	800a134 <_strtol_l.constprop.0+0xec>
 800a098:	786c      	ldrb	r4, [r5, #1]
 800a09a:	2310      	movs	r3, #16
 800a09c:	3502      	adds	r5, #2
 800a09e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a0a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a0a6:	f04f 0c00 	mov.w	ip, #0
 800a0aa:	fbb8 f9f3 	udiv	r9, r8, r3
 800a0ae:	4666      	mov	r6, ip
 800a0b0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a0b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a0b8:	f1be 0f09 	cmp.w	lr, #9
 800a0bc:	d816      	bhi.n	800a0ec <_strtol_l.constprop.0+0xa4>
 800a0be:	4674      	mov	r4, lr
 800a0c0:	42a3      	cmp	r3, r4
 800a0c2:	dd24      	ble.n	800a10e <_strtol_l.constprop.0+0xc6>
 800a0c4:	f1bc 0f00 	cmp.w	ip, #0
 800a0c8:	db1e      	blt.n	800a108 <_strtol_l.constprop.0+0xc0>
 800a0ca:	45b1      	cmp	r9, r6
 800a0cc:	d31c      	bcc.n	800a108 <_strtol_l.constprop.0+0xc0>
 800a0ce:	d101      	bne.n	800a0d4 <_strtol_l.constprop.0+0x8c>
 800a0d0:	45a2      	cmp	sl, r4
 800a0d2:	db19      	blt.n	800a108 <_strtol_l.constprop.0+0xc0>
 800a0d4:	fb06 4603 	mla	r6, r6, r3, r4
 800a0d8:	f04f 0c01 	mov.w	ip, #1
 800a0dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0e0:	e7e8      	b.n	800a0b4 <_strtol_l.constprop.0+0x6c>
 800a0e2:	2c2b      	cmp	r4, #43	; 0x2b
 800a0e4:	bf04      	itt	eq
 800a0e6:	782c      	ldrbeq	r4, [r5, #0]
 800a0e8:	1cb5      	addeq	r5, r6, #2
 800a0ea:	e7ca      	b.n	800a082 <_strtol_l.constprop.0+0x3a>
 800a0ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a0f0:	f1be 0f19 	cmp.w	lr, #25
 800a0f4:	d801      	bhi.n	800a0fa <_strtol_l.constprop.0+0xb2>
 800a0f6:	3c37      	subs	r4, #55	; 0x37
 800a0f8:	e7e2      	b.n	800a0c0 <_strtol_l.constprop.0+0x78>
 800a0fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a0fe:	f1be 0f19 	cmp.w	lr, #25
 800a102:	d804      	bhi.n	800a10e <_strtol_l.constprop.0+0xc6>
 800a104:	3c57      	subs	r4, #87	; 0x57
 800a106:	e7db      	b.n	800a0c0 <_strtol_l.constprop.0+0x78>
 800a108:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a10c:	e7e6      	b.n	800a0dc <_strtol_l.constprop.0+0x94>
 800a10e:	f1bc 0f00 	cmp.w	ip, #0
 800a112:	da05      	bge.n	800a120 <_strtol_l.constprop.0+0xd8>
 800a114:	2322      	movs	r3, #34	; 0x22
 800a116:	6003      	str	r3, [r0, #0]
 800a118:	4646      	mov	r6, r8
 800a11a:	b942      	cbnz	r2, 800a12e <_strtol_l.constprop.0+0xe6>
 800a11c:	4630      	mov	r0, r6
 800a11e:	e79e      	b.n	800a05e <_strtol_l.constprop.0+0x16>
 800a120:	b107      	cbz	r7, 800a124 <_strtol_l.constprop.0+0xdc>
 800a122:	4276      	negs	r6, r6
 800a124:	2a00      	cmp	r2, #0
 800a126:	d0f9      	beq.n	800a11c <_strtol_l.constprop.0+0xd4>
 800a128:	f1bc 0f00 	cmp.w	ip, #0
 800a12c:	d000      	beq.n	800a130 <_strtol_l.constprop.0+0xe8>
 800a12e:	1e69      	subs	r1, r5, #1
 800a130:	6011      	str	r1, [r2, #0]
 800a132:	e7f3      	b.n	800a11c <_strtol_l.constprop.0+0xd4>
 800a134:	2430      	movs	r4, #48	; 0x30
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1b1      	bne.n	800a09e <_strtol_l.constprop.0+0x56>
 800a13a:	2308      	movs	r3, #8
 800a13c:	e7af      	b.n	800a09e <_strtol_l.constprop.0+0x56>
 800a13e:	2c30      	cmp	r4, #48	; 0x30
 800a140:	d0a5      	beq.n	800a08e <_strtol_l.constprop.0+0x46>
 800a142:	230a      	movs	r3, #10
 800a144:	e7ab      	b.n	800a09e <_strtol_l.constprop.0+0x56>
 800a146:	bf00      	nop
 800a148:	0800e7a1 	.word	0x0800e7a1

0800a14c <_strtol_r>:
 800a14c:	f7ff bf7c 	b.w	800a048 <_strtol_l.constprop.0>

0800a150 <__swbuf_r>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	460e      	mov	r6, r1
 800a154:	4614      	mov	r4, r2
 800a156:	4605      	mov	r5, r0
 800a158:	b118      	cbz	r0, 800a162 <__swbuf_r+0x12>
 800a15a:	6983      	ldr	r3, [r0, #24]
 800a15c:	b90b      	cbnz	r3, 800a162 <__swbuf_r+0x12>
 800a15e:	f001 f86f 	bl	800b240 <__sinit>
 800a162:	4b21      	ldr	r3, [pc, #132]	; (800a1e8 <__swbuf_r+0x98>)
 800a164:	429c      	cmp	r4, r3
 800a166:	d12b      	bne.n	800a1c0 <__swbuf_r+0x70>
 800a168:	686c      	ldr	r4, [r5, #4]
 800a16a:	69a3      	ldr	r3, [r4, #24]
 800a16c:	60a3      	str	r3, [r4, #8]
 800a16e:	89a3      	ldrh	r3, [r4, #12]
 800a170:	071a      	lsls	r2, r3, #28
 800a172:	d52f      	bpl.n	800a1d4 <__swbuf_r+0x84>
 800a174:	6923      	ldr	r3, [r4, #16]
 800a176:	b36b      	cbz	r3, 800a1d4 <__swbuf_r+0x84>
 800a178:	6923      	ldr	r3, [r4, #16]
 800a17a:	6820      	ldr	r0, [r4, #0]
 800a17c:	1ac0      	subs	r0, r0, r3
 800a17e:	6963      	ldr	r3, [r4, #20]
 800a180:	b2f6      	uxtb	r6, r6
 800a182:	4283      	cmp	r3, r0
 800a184:	4637      	mov	r7, r6
 800a186:	dc04      	bgt.n	800a192 <__swbuf_r+0x42>
 800a188:	4621      	mov	r1, r4
 800a18a:	4628      	mov	r0, r5
 800a18c:	f000 ffc4 	bl	800b118 <_fflush_r>
 800a190:	bb30      	cbnz	r0, 800a1e0 <__swbuf_r+0x90>
 800a192:	68a3      	ldr	r3, [r4, #8]
 800a194:	3b01      	subs	r3, #1
 800a196:	60a3      	str	r3, [r4, #8]
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	6022      	str	r2, [r4, #0]
 800a19e:	701e      	strb	r6, [r3, #0]
 800a1a0:	6963      	ldr	r3, [r4, #20]
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	4283      	cmp	r3, r0
 800a1a6:	d004      	beq.n	800a1b2 <__swbuf_r+0x62>
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	07db      	lsls	r3, r3, #31
 800a1ac:	d506      	bpl.n	800a1bc <__swbuf_r+0x6c>
 800a1ae:	2e0a      	cmp	r6, #10
 800a1b0:	d104      	bne.n	800a1bc <__swbuf_r+0x6c>
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f000 ffaf 	bl	800b118 <_fflush_r>
 800a1ba:	b988      	cbnz	r0, 800a1e0 <__swbuf_r+0x90>
 800a1bc:	4638      	mov	r0, r7
 800a1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1c0:	4b0a      	ldr	r3, [pc, #40]	; (800a1ec <__swbuf_r+0x9c>)
 800a1c2:	429c      	cmp	r4, r3
 800a1c4:	d101      	bne.n	800a1ca <__swbuf_r+0x7a>
 800a1c6:	68ac      	ldr	r4, [r5, #8]
 800a1c8:	e7cf      	b.n	800a16a <__swbuf_r+0x1a>
 800a1ca:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <__swbuf_r+0xa0>)
 800a1cc:	429c      	cmp	r4, r3
 800a1ce:	bf08      	it	eq
 800a1d0:	68ec      	ldreq	r4, [r5, #12]
 800a1d2:	e7ca      	b.n	800a16a <__swbuf_r+0x1a>
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f000 f81e 	bl	800a218 <__swsetup_r>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d0cb      	beq.n	800a178 <__swbuf_r+0x28>
 800a1e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a1e4:	e7ea      	b.n	800a1bc <__swbuf_r+0x6c>
 800a1e6:	bf00      	nop
 800a1e8:	0800e954 	.word	0x0800e954
 800a1ec:	0800e974 	.word	0x0800e974
 800a1f0:	0800e934 	.word	0x0800e934

0800a1f4 <_write_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4d07      	ldr	r5, [pc, #28]	; (800a214 <_write_r+0x20>)
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	2200      	movs	r2, #0
 800a200:	602a      	str	r2, [r5, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	f7f7 fad6 	bl	80017b4 <_write>
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	d102      	bne.n	800a212 <_write_r+0x1e>
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	b103      	cbz	r3, 800a212 <_write_r+0x1e>
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	bd38      	pop	{r3, r4, r5, pc}
 800a214:	20000464 	.word	0x20000464

0800a218 <__swsetup_r>:
 800a218:	4b32      	ldr	r3, [pc, #200]	; (800a2e4 <__swsetup_r+0xcc>)
 800a21a:	b570      	push	{r4, r5, r6, lr}
 800a21c:	681d      	ldr	r5, [r3, #0]
 800a21e:	4606      	mov	r6, r0
 800a220:	460c      	mov	r4, r1
 800a222:	b125      	cbz	r5, 800a22e <__swsetup_r+0x16>
 800a224:	69ab      	ldr	r3, [r5, #24]
 800a226:	b913      	cbnz	r3, 800a22e <__swsetup_r+0x16>
 800a228:	4628      	mov	r0, r5
 800a22a:	f001 f809 	bl	800b240 <__sinit>
 800a22e:	4b2e      	ldr	r3, [pc, #184]	; (800a2e8 <__swsetup_r+0xd0>)
 800a230:	429c      	cmp	r4, r3
 800a232:	d10f      	bne.n	800a254 <__swsetup_r+0x3c>
 800a234:	686c      	ldr	r4, [r5, #4]
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a23c:	0719      	lsls	r1, r3, #28
 800a23e:	d42c      	bmi.n	800a29a <__swsetup_r+0x82>
 800a240:	06dd      	lsls	r5, r3, #27
 800a242:	d411      	bmi.n	800a268 <__swsetup_r+0x50>
 800a244:	2309      	movs	r3, #9
 800a246:	6033      	str	r3, [r6, #0]
 800a248:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a252:	e03e      	b.n	800a2d2 <__swsetup_r+0xba>
 800a254:	4b25      	ldr	r3, [pc, #148]	; (800a2ec <__swsetup_r+0xd4>)
 800a256:	429c      	cmp	r4, r3
 800a258:	d101      	bne.n	800a25e <__swsetup_r+0x46>
 800a25a:	68ac      	ldr	r4, [r5, #8]
 800a25c:	e7eb      	b.n	800a236 <__swsetup_r+0x1e>
 800a25e:	4b24      	ldr	r3, [pc, #144]	; (800a2f0 <__swsetup_r+0xd8>)
 800a260:	429c      	cmp	r4, r3
 800a262:	bf08      	it	eq
 800a264:	68ec      	ldreq	r4, [r5, #12]
 800a266:	e7e6      	b.n	800a236 <__swsetup_r+0x1e>
 800a268:	0758      	lsls	r0, r3, #29
 800a26a:	d512      	bpl.n	800a292 <__swsetup_r+0x7a>
 800a26c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a26e:	b141      	cbz	r1, 800a282 <__swsetup_r+0x6a>
 800a270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a274:	4299      	cmp	r1, r3
 800a276:	d002      	beq.n	800a27e <__swsetup_r+0x66>
 800a278:	4630      	mov	r0, r6
 800a27a:	f002 f96d 	bl	800c558 <_free_r>
 800a27e:	2300      	movs	r3, #0
 800a280:	6363      	str	r3, [r4, #52]	; 0x34
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a288:	81a3      	strh	r3, [r4, #12]
 800a28a:	2300      	movs	r3, #0
 800a28c:	6063      	str	r3, [r4, #4]
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	f043 0308 	orr.w	r3, r3, #8
 800a298:	81a3      	strh	r3, [r4, #12]
 800a29a:	6923      	ldr	r3, [r4, #16]
 800a29c:	b94b      	cbnz	r3, 800a2b2 <__swsetup_r+0x9a>
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2a8:	d003      	beq.n	800a2b2 <__swsetup_r+0x9a>
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f001 fc13 	bl	800bad8 <__smakebuf_r>
 800a2b2:	89a0      	ldrh	r0, [r4, #12]
 800a2b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2b8:	f010 0301 	ands.w	r3, r0, #1
 800a2bc:	d00a      	beq.n	800a2d4 <__swsetup_r+0xbc>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60a3      	str	r3, [r4, #8]
 800a2c2:	6963      	ldr	r3, [r4, #20]
 800a2c4:	425b      	negs	r3, r3
 800a2c6:	61a3      	str	r3, [r4, #24]
 800a2c8:	6923      	ldr	r3, [r4, #16]
 800a2ca:	b943      	cbnz	r3, 800a2de <__swsetup_r+0xc6>
 800a2cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2d0:	d1ba      	bne.n	800a248 <__swsetup_r+0x30>
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	0781      	lsls	r1, r0, #30
 800a2d6:	bf58      	it	pl
 800a2d8:	6963      	ldrpl	r3, [r4, #20]
 800a2da:	60a3      	str	r3, [r4, #8]
 800a2dc:	e7f4      	b.n	800a2c8 <__swsetup_r+0xb0>
 800a2de:	2000      	movs	r0, #0
 800a2e0:	e7f7      	b.n	800a2d2 <__swsetup_r+0xba>
 800a2e2:	bf00      	nop
 800a2e4:	20000024 	.word	0x20000024
 800a2e8:	0800e954 	.word	0x0800e954
 800a2ec:	0800e974 	.word	0x0800e974
 800a2f0:	0800e934 	.word	0x0800e934

0800a2f4 <_close_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4d06      	ldr	r5, [pc, #24]	; (800a310 <_close_r+0x1c>)
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	602b      	str	r3, [r5, #0]
 800a300:	f7f7 fb83 	bl	8001a0a <_close>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_close_r+0x1a>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_close_r+0x1a>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20000464 	.word	0x20000464

0800a314 <quorem>:
 800a314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a318:	6903      	ldr	r3, [r0, #16]
 800a31a:	690c      	ldr	r4, [r1, #16]
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	4607      	mov	r7, r0
 800a320:	f2c0 8081 	blt.w	800a426 <quorem+0x112>
 800a324:	3c01      	subs	r4, #1
 800a326:	f101 0814 	add.w	r8, r1, #20
 800a32a:	f100 0514 	add.w	r5, r0, #20
 800a32e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a332:	9301      	str	r3, [sp, #4]
 800a334:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a33c:	3301      	adds	r3, #1
 800a33e:	429a      	cmp	r2, r3
 800a340:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a348:	fbb2 f6f3 	udiv	r6, r2, r3
 800a34c:	d331      	bcc.n	800a3b2 <quorem+0x9e>
 800a34e:	f04f 0e00 	mov.w	lr, #0
 800a352:	4640      	mov	r0, r8
 800a354:	46ac      	mov	ip, r5
 800a356:	46f2      	mov	sl, lr
 800a358:	f850 2b04 	ldr.w	r2, [r0], #4
 800a35c:	b293      	uxth	r3, r2
 800a35e:	fb06 e303 	mla	r3, r6, r3, lr
 800a362:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a366:	b29b      	uxth	r3, r3
 800a368:	ebaa 0303 	sub.w	r3, sl, r3
 800a36c:	f8dc a000 	ldr.w	sl, [ip]
 800a370:	0c12      	lsrs	r2, r2, #16
 800a372:	fa13 f38a 	uxtah	r3, r3, sl
 800a376:	fb06 e202 	mla	r2, r6, r2, lr
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	9b00      	ldr	r3, [sp, #0]
 800a37e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a382:	b292      	uxth	r2, r2
 800a384:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a38c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a390:	4581      	cmp	r9, r0
 800a392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a396:	f84c 3b04 	str.w	r3, [ip], #4
 800a39a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a39e:	d2db      	bcs.n	800a358 <quorem+0x44>
 800a3a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3a4:	b92b      	cbnz	r3, 800a3b2 <quorem+0x9e>
 800a3a6:	9b01      	ldr	r3, [sp, #4]
 800a3a8:	3b04      	subs	r3, #4
 800a3aa:	429d      	cmp	r5, r3
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	d32e      	bcc.n	800a40e <quorem+0xfa>
 800a3b0:	613c      	str	r4, [r7, #16]
 800a3b2:	4638      	mov	r0, r7
 800a3b4:	f001 fec4 	bl	800c140 <__mcmp>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	db24      	blt.n	800a406 <quorem+0xf2>
 800a3bc:	3601      	adds	r6, #1
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f04f 0c00 	mov.w	ip, #0
 800a3c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3c8:	f8d0 e000 	ldr.w	lr, [r0]
 800a3cc:	b293      	uxth	r3, r2
 800a3ce:	ebac 0303 	sub.w	r3, ip, r3
 800a3d2:	0c12      	lsrs	r2, r2, #16
 800a3d4:	fa13 f38e 	uxtah	r3, r3, lr
 800a3d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3e6:	45c1      	cmp	r9, r8
 800a3e8:	f840 3b04 	str.w	r3, [r0], #4
 800a3ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3f0:	d2e8      	bcs.n	800a3c4 <quorem+0xb0>
 800a3f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3fa:	b922      	cbnz	r2, 800a406 <quorem+0xf2>
 800a3fc:	3b04      	subs	r3, #4
 800a3fe:	429d      	cmp	r5, r3
 800a400:	461a      	mov	r2, r3
 800a402:	d30a      	bcc.n	800a41a <quorem+0x106>
 800a404:	613c      	str	r4, [r7, #16]
 800a406:	4630      	mov	r0, r6
 800a408:	b003      	add	sp, #12
 800a40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40e:	6812      	ldr	r2, [r2, #0]
 800a410:	3b04      	subs	r3, #4
 800a412:	2a00      	cmp	r2, #0
 800a414:	d1cc      	bne.n	800a3b0 <quorem+0x9c>
 800a416:	3c01      	subs	r4, #1
 800a418:	e7c7      	b.n	800a3aa <quorem+0x96>
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	3b04      	subs	r3, #4
 800a41e:	2a00      	cmp	r2, #0
 800a420:	d1f0      	bne.n	800a404 <quorem+0xf0>
 800a422:	3c01      	subs	r4, #1
 800a424:	e7eb      	b.n	800a3fe <quorem+0xea>
 800a426:	2000      	movs	r0, #0
 800a428:	e7ee      	b.n	800a408 <quorem+0xf4>
 800a42a:	0000      	movs	r0, r0
 800a42c:	0000      	movs	r0, r0
	...

0800a430 <_dtoa_r>:
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	ed2d 8b04 	vpush	{d8-d9}
 800a438:	ec57 6b10 	vmov	r6, r7, d0
 800a43c:	b093      	sub	sp, #76	; 0x4c
 800a43e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a444:	9106      	str	r1, [sp, #24]
 800a446:	ee10 aa10 	vmov	sl, s0
 800a44a:	4604      	mov	r4, r0
 800a44c:	9209      	str	r2, [sp, #36]	; 0x24
 800a44e:	930c      	str	r3, [sp, #48]	; 0x30
 800a450:	46bb      	mov	fp, r7
 800a452:	b975      	cbnz	r5, 800a472 <_dtoa_r+0x42>
 800a454:	2010      	movs	r0, #16
 800a456:	f001 fb7f 	bl	800bb58 <malloc>
 800a45a:	4602      	mov	r2, r0
 800a45c:	6260      	str	r0, [r4, #36]	; 0x24
 800a45e:	b920      	cbnz	r0, 800a46a <_dtoa_r+0x3a>
 800a460:	4ba7      	ldr	r3, [pc, #668]	; (800a700 <_dtoa_r+0x2d0>)
 800a462:	21ea      	movs	r1, #234	; 0xea
 800a464:	48a7      	ldr	r0, [pc, #668]	; (800a704 <_dtoa_r+0x2d4>)
 800a466:	f002 ff0b 	bl	800d280 <__assert_func>
 800a46a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a46e:	6005      	str	r5, [r0, #0]
 800a470:	60c5      	str	r5, [r0, #12]
 800a472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a474:	6819      	ldr	r1, [r3, #0]
 800a476:	b151      	cbz	r1, 800a48e <_dtoa_r+0x5e>
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	604a      	str	r2, [r1, #4]
 800a47c:	2301      	movs	r3, #1
 800a47e:	4093      	lsls	r3, r2
 800a480:	608b      	str	r3, [r1, #8]
 800a482:	4620      	mov	r0, r4
 800a484:	f001 fbd0 	bl	800bc28 <_Bfree>
 800a488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	1e3b      	subs	r3, r7, #0
 800a490:	bfaa      	itet	ge
 800a492:	2300      	movge	r3, #0
 800a494:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a498:	f8c8 3000 	strge.w	r3, [r8]
 800a49c:	4b9a      	ldr	r3, [pc, #616]	; (800a708 <_dtoa_r+0x2d8>)
 800a49e:	bfbc      	itt	lt
 800a4a0:	2201      	movlt	r2, #1
 800a4a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a4a6:	ea33 030b 	bics.w	r3, r3, fp
 800a4aa:	d11b      	bne.n	800a4e4 <_dtoa_r+0xb4>
 800a4ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4b2:	6013      	str	r3, [r2, #0]
 800a4b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4b8:	4333      	orrs	r3, r6
 800a4ba:	f000 8592 	beq.w	800afe2 <_dtoa_r+0xbb2>
 800a4be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4c0:	b963      	cbnz	r3, 800a4dc <_dtoa_r+0xac>
 800a4c2:	4b92      	ldr	r3, [pc, #584]	; (800a70c <_dtoa_r+0x2dc>)
 800a4c4:	e022      	b.n	800a50c <_dtoa_r+0xdc>
 800a4c6:	4b92      	ldr	r3, [pc, #584]	; (800a710 <_dtoa_r+0x2e0>)
 800a4c8:	9301      	str	r3, [sp, #4]
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	9801      	ldr	r0, [sp, #4]
 800a4d2:	b013      	add	sp, #76	; 0x4c
 800a4d4:	ecbd 8b04 	vpop	{d8-d9}
 800a4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4dc:	4b8b      	ldr	r3, [pc, #556]	; (800a70c <_dtoa_r+0x2dc>)
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	3303      	adds	r3, #3
 800a4e2:	e7f3      	b.n	800a4cc <_dtoa_r+0x9c>
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	4650      	mov	r0, sl
 800a4ea:	4659      	mov	r1, fp
 800a4ec:	f7f6 fafc 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4f0:	ec4b ab19 	vmov	d9, sl, fp
 800a4f4:	4680      	mov	r8, r0
 800a4f6:	b158      	cbz	r0, 800a510 <_dtoa_r+0xe0>
 800a4f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a500:	2b00      	cmp	r3, #0
 800a502:	f000 856b 	beq.w	800afdc <_dtoa_r+0xbac>
 800a506:	4883      	ldr	r0, [pc, #524]	; (800a714 <_dtoa_r+0x2e4>)
 800a508:	6018      	str	r0, [r3, #0]
 800a50a:	1e43      	subs	r3, r0, #1
 800a50c:	9301      	str	r3, [sp, #4]
 800a50e:	e7df      	b.n	800a4d0 <_dtoa_r+0xa0>
 800a510:	ec4b ab10 	vmov	d0, sl, fp
 800a514:	aa10      	add	r2, sp, #64	; 0x40
 800a516:	a911      	add	r1, sp, #68	; 0x44
 800a518:	4620      	mov	r0, r4
 800a51a:	f001 ff33 	bl	800c384 <__d2b>
 800a51e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a522:	ee08 0a10 	vmov	s16, r0
 800a526:	2d00      	cmp	r5, #0
 800a528:	f000 8084 	beq.w	800a634 <_dtoa_r+0x204>
 800a52c:	ee19 3a90 	vmov	r3, s19
 800a530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a534:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a538:	4656      	mov	r6, sl
 800a53a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a53e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a542:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a546:	4b74      	ldr	r3, [pc, #464]	; (800a718 <_dtoa_r+0x2e8>)
 800a548:	2200      	movs	r2, #0
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f5 feab 	bl	80002a8 <__aeabi_dsub>
 800a552:	a365      	add	r3, pc, #404	; (adr r3, 800a6e8 <_dtoa_r+0x2b8>)
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	f7f6 f85e 	bl	8000618 <__aeabi_dmul>
 800a55c:	a364      	add	r3, pc, #400	; (adr r3, 800a6f0 <_dtoa_r+0x2c0>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f7f5 fea3 	bl	80002ac <__adddf3>
 800a566:	4606      	mov	r6, r0
 800a568:	4628      	mov	r0, r5
 800a56a:	460f      	mov	r7, r1
 800a56c:	f7f5 ffea 	bl	8000544 <__aeabi_i2d>
 800a570:	a361      	add	r3, pc, #388	; (adr r3, 800a6f8 <_dtoa_r+0x2c8>)
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	f7f6 f84f 	bl	8000618 <__aeabi_dmul>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	4630      	mov	r0, r6
 800a580:	4639      	mov	r1, r7
 800a582:	f7f5 fe93 	bl	80002ac <__adddf3>
 800a586:	4606      	mov	r6, r0
 800a588:	460f      	mov	r7, r1
 800a58a:	f7f6 faf5 	bl	8000b78 <__aeabi_d2iz>
 800a58e:	2200      	movs	r2, #0
 800a590:	9000      	str	r0, [sp, #0]
 800a592:	2300      	movs	r3, #0
 800a594:	4630      	mov	r0, r6
 800a596:	4639      	mov	r1, r7
 800a598:	f7f6 fab0 	bl	8000afc <__aeabi_dcmplt>
 800a59c:	b150      	cbz	r0, 800a5b4 <_dtoa_r+0x184>
 800a59e:	9800      	ldr	r0, [sp, #0]
 800a5a0:	f7f5 ffd0 	bl	8000544 <__aeabi_i2d>
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	f7f6 fa9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5ac:	b910      	cbnz	r0, 800a5b4 <_dtoa_r+0x184>
 800a5ae:	9b00      	ldr	r3, [sp, #0]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	9b00      	ldr	r3, [sp, #0]
 800a5b6:	2b16      	cmp	r3, #22
 800a5b8:	d85a      	bhi.n	800a670 <_dtoa_r+0x240>
 800a5ba:	9a00      	ldr	r2, [sp, #0]
 800a5bc:	4b57      	ldr	r3, [pc, #348]	; (800a71c <_dtoa_r+0x2ec>)
 800a5be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	ec51 0b19 	vmov	r0, r1, d9
 800a5ca:	f7f6 fa97 	bl	8000afc <__aeabi_dcmplt>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d050      	beq.n	800a674 <_dtoa_r+0x244>
 800a5d2:	9b00      	ldr	r3, [sp, #0]
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5de:	1b5d      	subs	r5, r3, r5
 800a5e0:	1e6b      	subs	r3, r5, #1
 800a5e2:	9305      	str	r3, [sp, #20]
 800a5e4:	bf45      	ittet	mi
 800a5e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a5ea:	9304      	strmi	r3, [sp, #16]
 800a5ec:	2300      	movpl	r3, #0
 800a5ee:	2300      	movmi	r3, #0
 800a5f0:	bf4c      	ite	mi
 800a5f2:	9305      	strmi	r3, [sp, #20]
 800a5f4:	9304      	strpl	r3, [sp, #16]
 800a5f6:	9b00      	ldr	r3, [sp, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	db3d      	blt.n	800a678 <_dtoa_r+0x248>
 800a5fc:	9b05      	ldr	r3, [sp, #20]
 800a5fe:	9a00      	ldr	r2, [sp, #0]
 800a600:	920a      	str	r2, [sp, #40]	; 0x28
 800a602:	4413      	add	r3, r2
 800a604:	9305      	str	r3, [sp, #20]
 800a606:	2300      	movs	r3, #0
 800a608:	9307      	str	r3, [sp, #28]
 800a60a:	9b06      	ldr	r3, [sp, #24]
 800a60c:	2b09      	cmp	r3, #9
 800a60e:	f200 8089 	bhi.w	800a724 <_dtoa_r+0x2f4>
 800a612:	2b05      	cmp	r3, #5
 800a614:	bfc4      	itt	gt
 800a616:	3b04      	subgt	r3, #4
 800a618:	9306      	strgt	r3, [sp, #24]
 800a61a:	9b06      	ldr	r3, [sp, #24]
 800a61c:	f1a3 0302 	sub.w	r3, r3, #2
 800a620:	bfcc      	ite	gt
 800a622:	2500      	movgt	r5, #0
 800a624:	2501      	movle	r5, #1
 800a626:	2b03      	cmp	r3, #3
 800a628:	f200 8087 	bhi.w	800a73a <_dtoa_r+0x30a>
 800a62c:	e8df f003 	tbb	[pc, r3]
 800a630:	59383a2d 	.word	0x59383a2d
 800a634:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a638:	441d      	add	r5, r3
 800a63a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a63e:	2b20      	cmp	r3, #32
 800a640:	bfc1      	itttt	gt
 800a642:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a646:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a64a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a64e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a652:	bfda      	itte	le
 800a654:	f1c3 0320 	rsble	r3, r3, #32
 800a658:	fa06 f003 	lslle.w	r0, r6, r3
 800a65c:	4318      	orrgt	r0, r3
 800a65e:	f7f5 ff61 	bl	8000524 <__aeabi_ui2d>
 800a662:	2301      	movs	r3, #1
 800a664:	4606      	mov	r6, r0
 800a666:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a66a:	3d01      	subs	r5, #1
 800a66c:	930e      	str	r3, [sp, #56]	; 0x38
 800a66e:	e76a      	b.n	800a546 <_dtoa_r+0x116>
 800a670:	2301      	movs	r3, #1
 800a672:	e7b2      	b.n	800a5da <_dtoa_r+0x1aa>
 800a674:	900b      	str	r0, [sp, #44]	; 0x2c
 800a676:	e7b1      	b.n	800a5dc <_dtoa_r+0x1ac>
 800a678:	9b04      	ldr	r3, [sp, #16]
 800a67a:	9a00      	ldr	r2, [sp, #0]
 800a67c:	1a9b      	subs	r3, r3, r2
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	4253      	negs	r3, r2
 800a682:	9307      	str	r3, [sp, #28]
 800a684:	2300      	movs	r3, #0
 800a686:	930a      	str	r3, [sp, #40]	; 0x28
 800a688:	e7bf      	b.n	800a60a <_dtoa_r+0x1da>
 800a68a:	2300      	movs	r3, #0
 800a68c:	9308      	str	r3, [sp, #32]
 800a68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a690:	2b00      	cmp	r3, #0
 800a692:	dc55      	bgt.n	800a740 <_dtoa_r+0x310>
 800a694:	2301      	movs	r3, #1
 800a696:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a69a:	461a      	mov	r2, r3
 800a69c:	9209      	str	r2, [sp, #36]	; 0x24
 800a69e:	e00c      	b.n	800a6ba <_dtoa_r+0x28a>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e7f3      	b.n	800a68c <_dtoa_r+0x25c>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6a8:	9308      	str	r3, [sp, #32]
 800a6aa:	9b00      	ldr	r3, [sp, #0]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	9302      	str	r3, [sp, #8]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	9303      	str	r3, [sp, #12]
 800a6b6:	bfb8      	it	lt
 800a6b8:	2301      	movlt	r3, #1
 800a6ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a6bc:	2200      	movs	r2, #0
 800a6be:	6042      	str	r2, [r0, #4]
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	f102 0614 	add.w	r6, r2, #20
 800a6c6:	429e      	cmp	r6, r3
 800a6c8:	6841      	ldr	r1, [r0, #4]
 800a6ca:	d93d      	bls.n	800a748 <_dtoa_r+0x318>
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f001 fa6b 	bl	800bba8 <_Balloc>
 800a6d2:	9001      	str	r0, [sp, #4]
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d13b      	bne.n	800a750 <_dtoa_r+0x320>
 800a6d8:	4b11      	ldr	r3, [pc, #68]	; (800a720 <_dtoa_r+0x2f0>)
 800a6da:	4602      	mov	r2, r0
 800a6dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6e0:	e6c0      	b.n	800a464 <_dtoa_r+0x34>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e7df      	b.n	800a6a6 <_dtoa_r+0x276>
 800a6e6:	bf00      	nop
 800a6e8:	636f4361 	.word	0x636f4361
 800a6ec:	3fd287a7 	.word	0x3fd287a7
 800a6f0:	8b60c8b3 	.word	0x8b60c8b3
 800a6f4:	3fc68a28 	.word	0x3fc68a28
 800a6f8:	509f79fb 	.word	0x509f79fb
 800a6fc:	3fd34413 	.word	0x3fd34413
 800a700:	0800e8ae 	.word	0x0800e8ae
 800a704:	0800e8c5 	.word	0x0800e8c5
 800a708:	7ff00000 	.word	0x7ff00000
 800a70c:	0800e8aa 	.word	0x0800e8aa
 800a710:	0800e8a1 	.word	0x0800e8a1
 800a714:	0800eb82 	.word	0x0800eb82
 800a718:	3ff80000 	.word	0x3ff80000
 800a71c:	0800ea98 	.word	0x0800ea98
 800a720:	0800e920 	.word	0x0800e920
 800a724:	2501      	movs	r5, #1
 800a726:	2300      	movs	r3, #0
 800a728:	9306      	str	r3, [sp, #24]
 800a72a:	9508      	str	r5, [sp, #32]
 800a72c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a730:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a734:	2200      	movs	r2, #0
 800a736:	2312      	movs	r3, #18
 800a738:	e7b0      	b.n	800a69c <_dtoa_r+0x26c>
 800a73a:	2301      	movs	r3, #1
 800a73c:	9308      	str	r3, [sp, #32]
 800a73e:	e7f5      	b.n	800a72c <_dtoa_r+0x2fc>
 800a740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a746:	e7b8      	b.n	800a6ba <_dtoa_r+0x28a>
 800a748:	3101      	adds	r1, #1
 800a74a:	6041      	str	r1, [r0, #4]
 800a74c:	0052      	lsls	r2, r2, #1
 800a74e:	e7b8      	b.n	800a6c2 <_dtoa_r+0x292>
 800a750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a752:	9a01      	ldr	r2, [sp, #4]
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	2b0e      	cmp	r3, #14
 800a75a:	f200 809d 	bhi.w	800a898 <_dtoa_r+0x468>
 800a75e:	2d00      	cmp	r5, #0
 800a760:	f000 809a 	beq.w	800a898 <_dtoa_r+0x468>
 800a764:	9b00      	ldr	r3, [sp, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	dd32      	ble.n	800a7d0 <_dtoa_r+0x3a0>
 800a76a:	4ab7      	ldr	r2, [pc, #732]	; (800aa48 <_dtoa_r+0x618>)
 800a76c:	f003 030f 	and.w	r3, r3, #15
 800a770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a774:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a778:	9b00      	ldr	r3, [sp, #0]
 800a77a:	05d8      	lsls	r0, r3, #23
 800a77c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a780:	d516      	bpl.n	800a7b0 <_dtoa_r+0x380>
 800a782:	4bb2      	ldr	r3, [pc, #712]	; (800aa4c <_dtoa_r+0x61c>)
 800a784:	ec51 0b19 	vmov	r0, r1, d9
 800a788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a78c:	f7f6 f86e 	bl	800086c <__aeabi_ddiv>
 800a790:	f007 070f 	and.w	r7, r7, #15
 800a794:	4682      	mov	sl, r0
 800a796:	468b      	mov	fp, r1
 800a798:	2503      	movs	r5, #3
 800a79a:	4eac      	ldr	r6, [pc, #688]	; (800aa4c <_dtoa_r+0x61c>)
 800a79c:	b957      	cbnz	r7, 800a7b4 <_dtoa_r+0x384>
 800a79e:	4642      	mov	r2, r8
 800a7a0:	464b      	mov	r3, r9
 800a7a2:	4650      	mov	r0, sl
 800a7a4:	4659      	mov	r1, fp
 800a7a6:	f7f6 f861 	bl	800086c <__aeabi_ddiv>
 800a7aa:	4682      	mov	sl, r0
 800a7ac:	468b      	mov	fp, r1
 800a7ae:	e028      	b.n	800a802 <_dtoa_r+0x3d2>
 800a7b0:	2502      	movs	r5, #2
 800a7b2:	e7f2      	b.n	800a79a <_dtoa_r+0x36a>
 800a7b4:	07f9      	lsls	r1, r7, #31
 800a7b6:	d508      	bpl.n	800a7ca <_dtoa_r+0x39a>
 800a7b8:	4640      	mov	r0, r8
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7c0:	f7f5 ff2a 	bl	8000618 <__aeabi_dmul>
 800a7c4:	3501      	adds	r5, #1
 800a7c6:	4680      	mov	r8, r0
 800a7c8:	4689      	mov	r9, r1
 800a7ca:	107f      	asrs	r7, r7, #1
 800a7cc:	3608      	adds	r6, #8
 800a7ce:	e7e5      	b.n	800a79c <_dtoa_r+0x36c>
 800a7d0:	f000 809b 	beq.w	800a90a <_dtoa_r+0x4da>
 800a7d4:	9b00      	ldr	r3, [sp, #0]
 800a7d6:	4f9d      	ldr	r7, [pc, #628]	; (800aa4c <_dtoa_r+0x61c>)
 800a7d8:	425e      	negs	r6, r3
 800a7da:	4b9b      	ldr	r3, [pc, #620]	; (800aa48 <_dtoa_r+0x618>)
 800a7dc:	f006 020f 	and.w	r2, r6, #15
 800a7e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e8:	ec51 0b19 	vmov	r0, r1, d9
 800a7ec:	f7f5 ff14 	bl	8000618 <__aeabi_dmul>
 800a7f0:	1136      	asrs	r6, r6, #4
 800a7f2:	4682      	mov	sl, r0
 800a7f4:	468b      	mov	fp, r1
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2502      	movs	r5, #2
 800a7fa:	2e00      	cmp	r6, #0
 800a7fc:	d17a      	bne.n	800a8f4 <_dtoa_r+0x4c4>
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1d3      	bne.n	800a7aa <_dtoa_r+0x37a>
 800a802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 8082 	beq.w	800a90e <_dtoa_r+0x4de>
 800a80a:	4b91      	ldr	r3, [pc, #580]	; (800aa50 <_dtoa_r+0x620>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	4650      	mov	r0, sl
 800a810:	4659      	mov	r1, fp
 800a812:	f7f6 f973 	bl	8000afc <__aeabi_dcmplt>
 800a816:	2800      	cmp	r0, #0
 800a818:	d079      	beq.n	800a90e <_dtoa_r+0x4de>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d076      	beq.n	800a90e <_dtoa_r+0x4de>
 800a820:	9b02      	ldr	r3, [sp, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	dd36      	ble.n	800a894 <_dtoa_r+0x464>
 800a826:	9b00      	ldr	r3, [sp, #0]
 800a828:	4650      	mov	r0, sl
 800a82a:	4659      	mov	r1, fp
 800a82c:	1e5f      	subs	r7, r3, #1
 800a82e:	2200      	movs	r2, #0
 800a830:	4b88      	ldr	r3, [pc, #544]	; (800aa54 <_dtoa_r+0x624>)
 800a832:	f7f5 fef1 	bl	8000618 <__aeabi_dmul>
 800a836:	9e02      	ldr	r6, [sp, #8]
 800a838:	4682      	mov	sl, r0
 800a83a:	468b      	mov	fp, r1
 800a83c:	3501      	adds	r5, #1
 800a83e:	4628      	mov	r0, r5
 800a840:	f7f5 fe80 	bl	8000544 <__aeabi_i2d>
 800a844:	4652      	mov	r2, sl
 800a846:	465b      	mov	r3, fp
 800a848:	f7f5 fee6 	bl	8000618 <__aeabi_dmul>
 800a84c:	4b82      	ldr	r3, [pc, #520]	; (800aa58 <_dtoa_r+0x628>)
 800a84e:	2200      	movs	r2, #0
 800a850:	f7f5 fd2c 	bl	80002ac <__adddf3>
 800a854:	46d0      	mov	r8, sl
 800a856:	46d9      	mov	r9, fp
 800a858:	4682      	mov	sl, r0
 800a85a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a85e:	2e00      	cmp	r6, #0
 800a860:	d158      	bne.n	800a914 <_dtoa_r+0x4e4>
 800a862:	4b7e      	ldr	r3, [pc, #504]	; (800aa5c <_dtoa_r+0x62c>)
 800a864:	2200      	movs	r2, #0
 800a866:	4640      	mov	r0, r8
 800a868:	4649      	mov	r1, r9
 800a86a:	f7f5 fd1d 	bl	80002a8 <__aeabi_dsub>
 800a86e:	4652      	mov	r2, sl
 800a870:	465b      	mov	r3, fp
 800a872:	4680      	mov	r8, r0
 800a874:	4689      	mov	r9, r1
 800a876:	f7f6 f95f 	bl	8000b38 <__aeabi_dcmpgt>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	f040 8295 	bne.w	800adaa <_dtoa_r+0x97a>
 800a880:	4652      	mov	r2, sl
 800a882:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a886:	4640      	mov	r0, r8
 800a888:	4649      	mov	r1, r9
 800a88a:	f7f6 f937 	bl	8000afc <__aeabi_dcmplt>
 800a88e:	2800      	cmp	r0, #0
 800a890:	f040 8289 	bne.w	800ada6 <_dtoa_r+0x976>
 800a894:	ec5b ab19 	vmov	sl, fp, d9
 800a898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f2c0 8148 	blt.w	800ab30 <_dtoa_r+0x700>
 800a8a0:	9a00      	ldr	r2, [sp, #0]
 800a8a2:	2a0e      	cmp	r2, #14
 800a8a4:	f300 8144 	bgt.w	800ab30 <_dtoa_r+0x700>
 800a8a8:	4b67      	ldr	r3, [pc, #412]	; (800aa48 <_dtoa_r+0x618>)
 800a8aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f280 80d5 	bge.w	800aa64 <_dtoa_r+0x634>
 800a8ba:	9b03      	ldr	r3, [sp, #12]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f300 80d1 	bgt.w	800aa64 <_dtoa_r+0x634>
 800a8c2:	f040 826f 	bne.w	800ada4 <_dtoa_r+0x974>
 800a8c6:	4b65      	ldr	r3, [pc, #404]	; (800aa5c <_dtoa_r+0x62c>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	f7f5 fea3 	bl	8000618 <__aeabi_dmul>
 800a8d2:	4652      	mov	r2, sl
 800a8d4:	465b      	mov	r3, fp
 800a8d6:	f7f6 f925 	bl	8000b24 <__aeabi_dcmpge>
 800a8da:	9e03      	ldr	r6, [sp, #12]
 800a8dc:	4637      	mov	r7, r6
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	f040 8245 	bne.w	800ad6e <_dtoa_r+0x93e>
 800a8e4:	9d01      	ldr	r5, [sp, #4]
 800a8e6:	2331      	movs	r3, #49	; 0x31
 800a8e8:	f805 3b01 	strb.w	r3, [r5], #1
 800a8ec:	9b00      	ldr	r3, [sp, #0]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	e240      	b.n	800ad76 <_dtoa_r+0x946>
 800a8f4:	07f2      	lsls	r2, r6, #31
 800a8f6:	d505      	bpl.n	800a904 <_dtoa_r+0x4d4>
 800a8f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8fc:	f7f5 fe8c 	bl	8000618 <__aeabi_dmul>
 800a900:	3501      	adds	r5, #1
 800a902:	2301      	movs	r3, #1
 800a904:	1076      	asrs	r6, r6, #1
 800a906:	3708      	adds	r7, #8
 800a908:	e777      	b.n	800a7fa <_dtoa_r+0x3ca>
 800a90a:	2502      	movs	r5, #2
 800a90c:	e779      	b.n	800a802 <_dtoa_r+0x3d2>
 800a90e:	9f00      	ldr	r7, [sp, #0]
 800a910:	9e03      	ldr	r6, [sp, #12]
 800a912:	e794      	b.n	800a83e <_dtoa_r+0x40e>
 800a914:	9901      	ldr	r1, [sp, #4]
 800a916:	4b4c      	ldr	r3, [pc, #304]	; (800aa48 <_dtoa_r+0x618>)
 800a918:	4431      	add	r1, r6
 800a91a:	910d      	str	r1, [sp, #52]	; 0x34
 800a91c:	9908      	ldr	r1, [sp, #32]
 800a91e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a922:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a926:	2900      	cmp	r1, #0
 800a928:	d043      	beq.n	800a9b2 <_dtoa_r+0x582>
 800a92a:	494d      	ldr	r1, [pc, #308]	; (800aa60 <_dtoa_r+0x630>)
 800a92c:	2000      	movs	r0, #0
 800a92e:	f7f5 ff9d 	bl	800086c <__aeabi_ddiv>
 800a932:	4652      	mov	r2, sl
 800a934:	465b      	mov	r3, fp
 800a936:	f7f5 fcb7 	bl	80002a8 <__aeabi_dsub>
 800a93a:	9d01      	ldr	r5, [sp, #4]
 800a93c:	4682      	mov	sl, r0
 800a93e:	468b      	mov	fp, r1
 800a940:	4649      	mov	r1, r9
 800a942:	4640      	mov	r0, r8
 800a944:	f7f6 f918 	bl	8000b78 <__aeabi_d2iz>
 800a948:	4606      	mov	r6, r0
 800a94a:	f7f5 fdfb 	bl	8000544 <__aeabi_i2d>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	4640      	mov	r0, r8
 800a954:	4649      	mov	r1, r9
 800a956:	f7f5 fca7 	bl	80002a8 <__aeabi_dsub>
 800a95a:	3630      	adds	r6, #48	; 0x30
 800a95c:	f805 6b01 	strb.w	r6, [r5], #1
 800a960:	4652      	mov	r2, sl
 800a962:	465b      	mov	r3, fp
 800a964:	4680      	mov	r8, r0
 800a966:	4689      	mov	r9, r1
 800a968:	f7f6 f8c8 	bl	8000afc <__aeabi_dcmplt>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d163      	bne.n	800aa38 <_dtoa_r+0x608>
 800a970:	4642      	mov	r2, r8
 800a972:	464b      	mov	r3, r9
 800a974:	4936      	ldr	r1, [pc, #216]	; (800aa50 <_dtoa_r+0x620>)
 800a976:	2000      	movs	r0, #0
 800a978:	f7f5 fc96 	bl	80002a8 <__aeabi_dsub>
 800a97c:	4652      	mov	r2, sl
 800a97e:	465b      	mov	r3, fp
 800a980:	f7f6 f8bc 	bl	8000afc <__aeabi_dcmplt>
 800a984:	2800      	cmp	r0, #0
 800a986:	f040 80b5 	bne.w	800aaf4 <_dtoa_r+0x6c4>
 800a98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a98c:	429d      	cmp	r5, r3
 800a98e:	d081      	beq.n	800a894 <_dtoa_r+0x464>
 800a990:	4b30      	ldr	r3, [pc, #192]	; (800aa54 <_dtoa_r+0x624>)
 800a992:	2200      	movs	r2, #0
 800a994:	4650      	mov	r0, sl
 800a996:	4659      	mov	r1, fp
 800a998:	f7f5 fe3e 	bl	8000618 <__aeabi_dmul>
 800a99c:	4b2d      	ldr	r3, [pc, #180]	; (800aa54 <_dtoa_r+0x624>)
 800a99e:	4682      	mov	sl, r0
 800a9a0:	468b      	mov	fp, r1
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f7f5 fe36 	bl	8000618 <__aeabi_dmul>
 800a9ac:	4680      	mov	r8, r0
 800a9ae:	4689      	mov	r9, r1
 800a9b0:	e7c6      	b.n	800a940 <_dtoa_r+0x510>
 800a9b2:	4650      	mov	r0, sl
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	f7f5 fe2f 	bl	8000618 <__aeabi_dmul>
 800a9ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9bc:	9d01      	ldr	r5, [sp, #4]
 800a9be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9c0:	4682      	mov	sl, r0
 800a9c2:	468b      	mov	fp, r1
 800a9c4:	4649      	mov	r1, r9
 800a9c6:	4640      	mov	r0, r8
 800a9c8:	f7f6 f8d6 	bl	8000b78 <__aeabi_d2iz>
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	f7f5 fdb9 	bl	8000544 <__aeabi_i2d>
 800a9d2:	3630      	adds	r6, #48	; 0x30
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4640      	mov	r0, r8
 800a9da:	4649      	mov	r1, r9
 800a9dc:	f7f5 fc64 	bl	80002a8 <__aeabi_dsub>
 800a9e0:	f805 6b01 	strb.w	r6, [r5], #1
 800a9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9e6:	429d      	cmp	r5, r3
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	4689      	mov	r9, r1
 800a9ec:	f04f 0200 	mov.w	r2, #0
 800a9f0:	d124      	bne.n	800aa3c <_dtoa_r+0x60c>
 800a9f2:	4b1b      	ldr	r3, [pc, #108]	; (800aa60 <_dtoa_r+0x630>)
 800a9f4:	4650      	mov	r0, sl
 800a9f6:	4659      	mov	r1, fp
 800a9f8:	f7f5 fc58 	bl	80002ac <__adddf3>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	4640      	mov	r0, r8
 800aa02:	4649      	mov	r1, r9
 800aa04:	f7f6 f898 	bl	8000b38 <__aeabi_dcmpgt>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d173      	bne.n	800aaf4 <_dtoa_r+0x6c4>
 800aa0c:	4652      	mov	r2, sl
 800aa0e:	465b      	mov	r3, fp
 800aa10:	4913      	ldr	r1, [pc, #76]	; (800aa60 <_dtoa_r+0x630>)
 800aa12:	2000      	movs	r0, #0
 800aa14:	f7f5 fc48 	bl	80002a8 <__aeabi_dsub>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	4649      	mov	r1, r9
 800aa20:	f7f6 f86c 	bl	8000afc <__aeabi_dcmplt>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	f43f af35 	beq.w	800a894 <_dtoa_r+0x464>
 800aa2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aa2c:	1e6b      	subs	r3, r5, #1
 800aa2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa34:	2b30      	cmp	r3, #48	; 0x30
 800aa36:	d0f8      	beq.n	800aa2a <_dtoa_r+0x5fa>
 800aa38:	9700      	str	r7, [sp, #0]
 800aa3a:	e049      	b.n	800aad0 <_dtoa_r+0x6a0>
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <_dtoa_r+0x624>)
 800aa3e:	f7f5 fdeb 	bl	8000618 <__aeabi_dmul>
 800aa42:	4680      	mov	r8, r0
 800aa44:	4689      	mov	r9, r1
 800aa46:	e7bd      	b.n	800a9c4 <_dtoa_r+0x594>
 800aa48:	0800ea98 	.word	0x0800ea98
 800aa4c:	0800ea70 	.word	0x0800ea70
 800aa50:	3ff00000 	.word	0x3ff00000
 800aa54:	40240000 	.word	0x40240000
 800aa58:	401c0000 	.word	0x401c0000
 800aa5c:	40140000 	.word	0x40140000
 800aa60:	3fe00000 	.word	0x3fe00000
 800aa64:	9d01      	ldr	r5, [sp, #4]
 800aa66:	4656      	mov	r6, sl
 800aa68:	465f      	mov	r7, fp
 800aa6a:	4642      	mov	r2, r8
 800aa6c:	464b      	mov	r3, r9
 800aa6e:	4630      	mov	r0, r6
 800aa70:	4639      	mov	r1, r7
 800aa72:	f7f5 fefb 	bl	800086c <__aeabi_ddiv>
 800aa76:	f7f6 f87f 	bl	8000b78 <__aeabi_d2iz>
 800aa7a:	4682      	mov	sl, r0
 800aa7c:	f7f5 fd62 	bl	8000544 <__aeabi_i2d>
 800aa80:	4642      	mov	r2, r8
 800aa82:	464b      	mov	r3, r9
 800aa84:	f7f5 fdc8 	bl	8000618 <__aeabi_dmul>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4639      	mov	r1, r7
 800aa90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aa94:	f7f5 fc08 	bl	80002a8 <__aeabi_dsub>
 800aa98:	f805 6b01 	strb.w	r6, [r5], #1
 800aa9c:	9e01      	ldr	r6, [sp, #4]
 800aa9e:	9f03      	ldr	r7, [sp, #12]
 800aaa0:	1bae      	subs	r6, r5, r6
 800aaa2:	42b7      	cmp	r7, r6
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	d135      	bne.n	800ab16 <_dtoa_r+0x6e6>
 800aaaa:	f7f5 fbff 	bl	80002ac <__adddf3>
 800aaae:	4642      	mov	r2, r8
 800aab0:	464b      	mov	r3, r9
 800aab2:	4606      	mov	r6, r0
 800aab4:	460f      	mov	r7, r1
 800aab6:	f7f6 f83f 	bl	8000b38 <__aeabi_dcmpgt>
 800aaba:	b9d0      	cbnz	r0, 800aaf2 <_dtoa_r+0x6c2>
 800aabc:	4642      	mov	r2, r8
 800aabe:	464b      	mov	r3, r9
 800aac0:	4630      	mov	r0, r6
 800aac2:	4639      	mov	r1, r7
 800aac4:	f7f6 f810 	bl	8000ae8 <__aeabi_dcmpeq>
 800aac8:	b110      	cbz	r0, 800aad0 <_dtoa_r+0x6a0>
 800aaca:	f01a 0f01 	tst.w	sl, #1
 800aace:	d110      	bne.n	800aaf2 <_dtoa_r+0x6c2>
 800aad0:	4620      	mov	r0, r4
 800aad2:	ee18 1a10 	vmov	r1, s16
 800aad6:	f001 f8a7 	bl	800bc28 <_Bfree>
 800aada:	2300      	movs	r3, #0
 800aadc:	9800      	ldr	r0, [sp, #0]
 800aade:	702b      	strb	r3, [r5, #0]
 800aae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aae2:	3001      	adds	r0, #1
 800aae4:	6018      	str	r0, [r3, #0]
 800aae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f43f acf1 	beq.w	800a4d0 <_dtoa_r+0xa0>
 800aaee:	601d      	str	r5, [r3, #0]
 800aaf0:	e4ee      	b.n	800a4d0 <_dtoa_r+0xa0>
 800aaf2:	9f00      	ldr	r7, [sp, #0]
 800aaf4:	462b      	mov	r3, r5
 800aaf6:	461d      	mov	r5, r3
 800aaf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aafc:	2a39      	cmp	r2, #57	; 0x39
 800aafe:	d106      	bne.n	800ab0e <_dtoa_r+0x6de>
 800ab00:	9a01      	ldr	r2, [sp, #4]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d1f7      	bne.n	800aaf6 <_dtoa_r+0x6c6>
 800ab06:	9901      	ldr	r1, [sp, #4]
 800ab08:	2230      	movs	r2, #48	; 0x30
 800ab0a:	3701      	adds	r7, #1
 800ab0c:	700a      	strb	r2, [r1, #0]
 800ab0e:	781a      	ldrb	r2, [r3, #0]
 800ab10:	3201      	adds	r2, #1
 800ab12:	701a      	strb	r2, [r3, #0]
 800ab14:	e790      	b.n	800aa38 <_dtoa_r+0x608>
 800ab16:	4ba6      	ldr	r3, [pc, #664]	; (800adb0 <_dtoa_r+0x980>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f7f5 fd7d 	bl	8000618 <__aeabi_dmul>
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2300      	movs	r3, #0
 800ab22:	4606      	mov	r6, r0
 800ab24:	460f      	mov	r7, r1
 800ab26:	f7f5 ffdf 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d09d      	beq.n	800aa6a <_dtoa_r+0x63a>
 800ab2e:	e7cf      	b.n	800aad0 <_dtoa_r+0x6a0>
 800ab30:	9a08      	ldr	r2, [sp, #32]
 800ab32:	2a00      	cmp	r2, #0
 800ab34:	f000 80d7 	beq.w	800ace6 <_dtoa_r+0x8b6>
 800ab38:	9a06      	ldr	r2, [sp, #24]
 800ab3a:	2a01      	cmp	r2, #1
 800ab3c:	f300 80ba 	bgt.w	800acb4 <_dtoa_r+0x884>
 800ab40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	f000 80b2 	beq.w	800acac <_dtoa_r+0x87c>
 800ab48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab4c:	9e07      	ldr	r6, [sp, #28]
 800ab4e:	9d04      	ldr	r5, [sp, #16]
 800ab50:	9a04      	ldr	r2, [sp, #16]
 800ab52:	441a      	add	r2, r3
 800ab54:	9204      	str	r2, [sp, #16]
 800ab56:	9a05      	ldr	r2, [sp, #20]
 800ab58:	2101      	movs	r1, #1
 800ab5a:	441a      	add	r2, r3
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	9205      	str	r2, [sp, #20]
 800ab60:	f001 f964 	bl	800be2c <__i2b>
 800ab64:	4607      	mov	r7, r0
 800ab66:	2d00      	cmp	r5, #0
 800ab68:	dd0c      	ble.n	800ab84 <_dtoa_r+0x754>
 800ab6a:	9b05      	ldr	r3, [sp, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dd09      	ble.n	800ab84 <_dtoa_r+0x754>
 800ab70:	42ab      	cmp	r3, r5
 800ab72:	9a04      	ldr	r2, [sp, #16]
 800ab74:	bfa8      	it	ge
 800ab76:	462b      	movge	r3, r5
 800ab78:	1ad2      	subs	r2, r2, r3
 800ab7a:	9204      	str	r2, [sp, #16]
 800ab7c:	9a05      	ldr	r2, [sp, #20]
 800ab7e:	1aed      	subs	r5, r5, r3
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	9305      	str	r3, [sp, #20]
 800ab84:	9b07      	ldr	r3, [sp, #28]
 800ab86:	b31b      	cbz	r3, 800abd0 <_dtoa_r+0x7a0>
 800ab88:	9b08      	ldr	r3, [sp, #32]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f000 80af 	beq.w	800acee <_dtoa_r+0x8be>
 800ab90:	2e00      	cmp	r6, #0
 800ab92:	dd13      	ble.n	800abbc <_dtoa_r+0x78c>
 800ab94:	4639      	mov	r1, r7
 800ab96:	4632      	mov	r2, r6
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f001 fa07 	bl	800bfac <__pow5mult>
 800ab9e:	ee18 2a10 	vmov	r2, s16
 800aba2:	4601      	mov	r1, r0
 800aba4:	4607      	mov	r7, r0
 800aba6:	4620      	mov	r0, r4
 800aba8:	f001 f956 	bl	800be58 <__multiply>
 800abac:	ee18 1a10 	vmov	r1, s16
 800abb0:	4680      	mov	r8, r0
 800abb2:	4620      	mov	r0, r4
 800abb4:	f001 f838 	bl	800bc28 <_Bfree>
 800abb8:	ee08 8a10 	vmov	s16, r8
 800abbc:	9b07      	ldr	r3, [sp, #28]
 800abbe:	1b9a      	subs	r2, r3, r6
 800abc0:	d006      	beq.n	800abd0 <_dtoa_r+0x7a0>
 800abc2:	ee18 1a10 	vmov	r1, s16
 800abc6:	4620      	mov	r0, r4
 800abc8:	f001 f9f0 	bl	800bfac <__pow5mult>
 800abcc:	ee08 0a10 	vmov	s16, r0
 800abd0:	2101      	movs	r1, #1
 800abd2:	4620      	mov	r0, r4
 800abd4:	f001 f92a 	bl	800be2c <__i2b>
 800abd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abda:	2b00      	cmp	r3, #0
 800abdc:	4606      	mov	r6, r0
 800abde:	f340 8088 	ble.w	800acf2 <_dtoa_r+0x8c2>
 800abe2:	461a      	mov	r2, r3
 800abe4:	4601      	mov	r1, r0
 800abe6:	4620      	mov	r0, r4
 800abe8:	f001 f9e0 	bl	800bfac <__pow5mult>
 800abec:	9b06      	ldr	r3, [sp, #24]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	4606      	mov	r6, r0
 800abf2:	f340 8081 	ble.w	800acf8 <_dtoa_r+0x8c8>
 800abf6:	f04f 0800 	mov.w	r8, #0
 800abfa:	6933      	ldr	r3, [r6, #16]
 800abfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ac00:	6918      	ldr	r0, [r3, #16]
 800ac02:	f001 f8c3 	bl	800bd8c <__hi0bits>
 800ac06:	f1c0 0020 	rsb	r0, r0, #32
 800ac0a:	9b05      	ldr	r3, [sp, #20]
 800ac0c:	4418      	add	r0, r3
 800ac0e:	f010 001f 	ands.w	r0, r0, #31
 800ac12:	f000 8092 	beq.w	800ad3a <_dtoa_r+0x90a>
 800ac16:	f1c0 0320 	rsb	r3, r0, #32
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	f340 808a 	ble.w	800ad34 <_dtoa_r+0x904>
 800ac20:	f1c0 001c 	rsb	r0, r0, #28
 800ac24:	9b04      	ldr	r3, [sp, #16]
 800ac26:	4403      	add	r3, r0
 800ac28:	9304      	str	r3, [sp, #16]
 800ac2a:	9b05      	ldr	r3, [sp, #20]
 800ac2c:	4403      	add	r3, r0
 800ac2e:	4405      	add	r5, r0
 800ac30:	9305      	str	r3, [sp, #20]
 800ac32:	9b04      	ldr	r3, [sp, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	dd07      	ble.n	800ac48 <_dtoa_r+0x818>
 800ac38:	ee18 1a10 	vmov	r1, s16
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f001 fa0e 	bl	800c060 <__lshift>
 800ac44:	ee08 0a10 	vmov	s16, r0
 800ac48:	9b05      	ldr	r3, [sp, #20]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	dd05      	ble.n	800ac5a <_dtoa_r+0x82a>
 800ac4e:	4631      	mov	r1, r6
 800ac50:	461a      	mov	r2, r3
 800ac52:	4620      	mov	r0, r4
 800ac54:	f001 fa04 	bl	800c060 <__lshift>
 800ac58:	4606      	mov	r6, r0
 800ac5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d06e      	beq.n	800ad3e <_dtoa_r+0x90e>
 800ac60:	ee18 0a10 	vmov	r0, s16
 800ac64:	4631      	mov	r1, r6
 800ac66:	f001 fa6b 	bl	800c140 <__mcmp>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	da67      	bge.n	800ad3e <_dtoa_r+0x90e>
 800ac6e:	9b00      	ldr	r3, [sp, #0]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	ee18 1a10 	vmov	r1, s16
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	220a      	movs	r2, #10
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 fff5 	bl	800bc6c <__multadd>
 800ac82:	9b08      	ldr	r3, [sp, #32]
 800ac84:	ee08 0a10 	vmov	s16, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f000 81b1 	beq.w	800aff0 <_dtoa_r+0xbc0>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	4639      	mov	r1, r7
 800ac92:	220a      	movs	r2, #10
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 ffe9 	bl	800bc6c <__multadd>
 800ac9a:	9b02      	ldr	r3, [sp, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	4607      	mov	r7, r0
 800aca0:	f300 808e 	bgt.w	800adc0 <_dtoa_r+0x990>
 800aca4:	9b06      	ldr	r3, [sp, #24]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	dc51      	bgt.n	800ad4e <_dtoa_r+0x91e>
 800acaa:	e089      	b.n	800adc0 <_dtoa_r+0x990>
 800acac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acb2:	e74b      	b.n	800ab4c <_dtoa_r+0x71c>
 800acb4:	9b03      	ldr	r3, [sp, #12]
 800acb6:	1e5e      	subs	r6, r3, #1
 800acb8:	9b07      	ldr	r3, [sp, #28]
 800acba:	42b3      	cmp	r3, r6
 800acbc:	bfbf      	itttt	lt
 800acbe:	9b07      	ldrlt	r3, [sp, #28]
 800acc0:	9607      	strlt	r6, [sp, #28]
 800acc2:	1af2      	sublt	r2, r6, r3
 800acc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800acc6:	bfb6      	itet	lt
 800acc8:	189b      	addlt	r3, r3, r2
 800acca:	1b9e      	subge	r6, r3, r6
 800accc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800acce:	9b03      	ldr	r3, [sp, #12]
 800acd0:	bfb8      	it	lt
 800acd2:	2600      	movlt	r6, #0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bfb7      	itett	lt
 800acd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800acdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ace0:	1a9d      	sublt	r5, r3, r2
 800ace2:	2300      	movlt	r3, #0
 800ace4:	e734      	b.n	800ab50 <_dtoa_r+0x720>
 800ace6:	9e07      	ldr	r6, [sp, #28]
 800ace8:	9d04      	ldr	r5, [sp, #16]
 800acea:	9f08      	ldr	r7, [sp, #32]
 800acec:	e73b      	b.n	800ab66 <_dtoa_r+0x736>
 800acee:	9a07      	ldr	r2, [sp, #28]
 800acf0:	e767      	b.n	800abc2 <_dtoa_r+0x792>
 800acf2:	9b06      	ldr	r3, [sp, #24]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	dc18      	bgt.n	800ad2a <_dtoa_r+0x8fa>
 800acf8:	f1ba 0f00 	cmp.w	sl, #0
 800acfc:	d115      	bne.n	800ad2a <_dtoa_r+0x8fa>
 800acfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad02:	b993      	cbnz	r3, 800ad2a <_dtoa_r+0x8fa>
 800ad04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad08:	0d1b      	lsrs	r3, r3, #20
 800ad0a:	051b      	lsls	r3, r3, #20
 800ad0c:	b183      	cbz	r3, 800ad30 <_dtoa_r+0x900>
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	3301      	adds	r3, #1
 800ad12:	9304      	str	r3, [sp, #16]
 800ad14:	9b05      	ldr	r3, [sp, #20]
 800ad16:	3301      	adds	r3, #1
 800ad18:	9305      	str	r3, [sp, #20]
 800ad1a:	f04f 0801 	mov.w	r8, #1
 800ad1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f47f af6a 	bne.w	800abfa <_dtoa_r+0x7ca>
 800ad26:	2001      	movs	r0, #1
 800ad28:	e76f      	b.n	800ac0a <_dtoa_r+0x7da>
 800ad2a:	f04f 0800 	mov.w	r8, #0
 800ad2e:	e7f6      	b.n	800ad1e <_dtoa_r+0x8ee>
 800ad30:	4698      	mov	r8, r3
 800ad32:	e7f4      	b.n	800ad1e <_dtoa_r+0x8ee>
 800ad34:	f43f af7d 	beq.w	800ac32 <_dtoa_r+0x802>
 800ad38:	4618      	mov	r0, r3
 800ad3a:	301c      	adds	r0, #28
 800ad3c:	e772      	b.n	800ac24 <_dtoa_r+0x7f4>
 800ad3e:	9b03      	ldr	r3, [sp, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	dc37      	bgt.n	800adb4 <_dtoa_r+0x984>
 800ad44:	9b06      	ldr	r3, [sp, #24]
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	dd34      	ble.n	800adb4 <_dtoa_r+0x984>
 800ad4a:	9b03      	ldr	r3, [sp, #12]
 800ad4c:	9302      	str	r3, [sp, #8]
 800ad4e:	9b02      	ldr	r3, [sp, #8]
 800ad50:	b96b      	cbnz	r3, 800ad6e <_dtoa_r+0x93e>
 800ad52:	4631      	mov	r1, r6
 800ad54:	2205      	movs	r2, #5
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 ff88 	bl	800bc6c <__multadd>
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	4606      	mov	r6, r0
 800ad60:	ee18 0a10 	vmov	r0, s16
 800ad64:	f001 f9ec 	bl	800c140 <__mcmp>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	f73f adbb 	bgt.w	800a8e4 <_dtoa_r+0x4b4>
 800ad6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad70:	9d01      	ldr	r5, [sp, #4]
 800ad72:	43db      	mvns	r3, r3
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	f04f 0800 	mov.w	r8, #0
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 ff53 	bl	800bc28 <_Bfree>
 800ad82:	2f00      	cmp	r7, #0
 800ad84:	f43f aea4 	beq.w	800aad0 <_dtoa_r+0x6a0>
 800ad88:	f1b8 0f00 	cmp.w	r8, #0
 800ad8c:	d005      	beq.n	800ad9a <_dtoa_r+0x96a>
 800ad8e:	45b8      	cmp	r8, r7
 800ad90:	d003      	beq.n	800ad9a <_dtoa_r+0x96a>
 800ad92:	4641      	mov	r1, r8
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 ff47 	bl	800bc28 <_Bfree>
 800ad9a:	4639      	mov	r1, r7
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f000 ff43 	bl	800bc28 <_Bfree>
 800ada2:	e695      	b.n	800aad0 <_dtoa_r+0x6a0>
 800ada4:	2600      	movs	r6, #0
 800ada6:	4637      	mov	r7, r6
 800ada8:	e7e1      	b.n	800ad6e <_dtoa_r+0x93e>
 800adaa:	9700      	str	r7, [sp, #0]
 800adac:	4637      	mov	r7, r6
 800adae:	e599      	b.n	800a8e4 <_dtoa_r+0x4b4>
 800adb0:	40240000 	.word	0x40240000
 800adb4:	9b08      	ldr	r3, [sp, #32]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f000 80ca 	beq.w	800af50 <_dtoa_r+0xb20>
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	9302      	str	r3, [sp, #8]
 800adc0:	2d00      	cmp	r5, #0
 800adc2:	dd05      	ble.n	800add0 <_dtoa_r+0x9a0>
 800adc4:	4639      	mov	r1, r7
 800adc6:	462a      	mov	r2, r5
 800adc8:	4620      	mov	r0, r4
 800adca:	f001 f949 	bl	800c060 <__lshift>
 800adce:	4607      	mov	r7, r0
 800add0:	f1b8 0f00 	cmp.w	r8, #0
 800add4:	d05b      	beq.n	800ae8e <_dtoa_r+0xa5e>
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	4620      	mov	r0, r4
 800adda:	f000 fee5 	bl	800bba8 <_Balloc>
 800adde:	4605      	mov	r5, r0
 800ade0:	b928      	cbnz	r0, 800adee <_dtoa_r+0x9be>
 800ade2:	4b87      	ldr	r3, [pc, #540]	; (800b000 <_dtoa_r+0xbd0>)
 800ade4:	4602      	mov	r2, r0
 800ade6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adea:	f7ff bb3b 	b.w	800a464 <_dtoa_r+0x34>
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	3202      	adds	r2, #2
 800adf2:	0092      	lsls	r2, r2, #2
 800adf4:	f107 010c 	add.w	r1, r7, #12
 800adf8:	300c      	adds	r0, #12
 800adfa:	f000 fec7 	bl	800bb8c <memcpy>
 800adfe:	2201      	movs	r2, #1
 800ae00:	4629      	mov	r1, r5
 800ae02:	4620      	mov	r0, r4
 800ae04:	f001 f92c 	bl	800c060 <__lshift>
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	f103 0901 	add.w	r9, r3, #1
 800ae0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ae12:	4413      	add	r3, r2
 800ae14:	9305      	str	r3, [sp, #20]
 800ae16:	f00a 0301 	and.w	r3, sl, #1
 800ae1a:	46b8      	mov	r8, r7
 800ae1c:	9304      	str	r3, [sp, #16]
 800ae1e:	4607      	mov	r7, r0
 800ae20:	4631      	mov	r1, r6
 800ae22:	ee18 0a10 	vmov	r0, s16
 800ae26:	f7ff fa75 	bl	800a314 <quorem>
 800ae2a:	4641      	mov	r1, r8
 800ae2c:	9002      	str	r0, [sp, #8]
 800ae2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae32:	ee18 0a10 	vmov	r0, s16
 800ae36:	f001 f983 	bl	800c140 <__mcmp>
 800ae3a:	463a      	mov	r2, r7
 800ae3c:	9003      	str	r0, [sp, #12]
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4620      	mov	r0, r4
 800ae42:	f001 f999 	bl	800c178 <__mdiff>
 800ae46:	68c2      	ldr	r2, [r0, #12]
 800ae48:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	bb02      	cbnz	r2, 800ae92 <_dtoa_r+0xa62>
 800ae50:	4601      	mov	r1, r0
 800ae52:	ee18 0a10 	vmov	r0, s16
 800ae56:	f001 f973 	bl	800c140 <__mcmp>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	4620      	mov	r0, r4
 800ae60:	9207      	str	r2, [sp, #28]
 800ae62:	f000 fee1 	bl	800bc28 <_Bfree>
 800ae66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ae6a:	ea43 0102 	orr.w	r1, r3, r2
 800ae6e:	9b04      	ldr	r3, [sp, #16]
 800ae70:	430b      	orrs	r3, r1
 800ae72:	464d      	mov	r5, r9
 800ae74:	d10f      	bne.n	800ae96 <_dtoa_r+0xa66>
 800ae76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae7a:	d02a      	beq.n	800aed2 <_dtoa_r+0xaa2>
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	dd02      	ble.n	800ae88 <_dtoa_r+0xa58>
 800ae82:	9b02      	ldr	r3, [sp, #8]
 800ae84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ae88:	f88b a000 	strb.w	sl, [fp]
 800ae8c:	e775      	b.n	800ad7a <_dtoa_r+0x94a>
 800ae8e:	4638      	mov	r0, r7
 800ae90:	e7ba      	b.n	800ae08 <_dtoa_r+0x9d8>
 800ae92:	2201      	movs	r2, #1
 800ae94:	e7e2      	b.n	800ae5c <_dtoa_r+0xa2c>
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	db04      	blt.n	800aea6 <_dtoa_r+0xa76>
 800ae9c:	9906      	ldr	r1, [sp, #24]
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	9904      	ldr	r1, [sp, #16]
 800aea2:	430b      	orrs	r3, r1
 800aea4:	d122      	bne.n	800aeec <_dtoa_r+0xabc>
 800aea6:	2a00      	cmp	r2, #0
 800aea8:	ddee      	ble.n	800ae88 <_dtoa_r+0xa58>
 800aeaa:	ee18 1a10 	vmov	r1, s16
 800aeae:	2201      	movs	r2, #1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f001 f8d5 	bl	800c060 <__lshift>
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	ee08 0a10 	vmov	s16, r0
 800aebc:	f001 f940 	bl	800c140 <__mcmp>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	dc03      	bgt.n	800aecc <_dtoa_r+0xa9c>
 800aec4:	d1e0      	bne.n	800ae88 <_dtoa_r+0xa58>
 800aec6:	f01a 0f01 	tst.w	sl, #1
 800aeca:	d0dd      	beq.n	800ae88 <_dtoa_r+0xa58>
 800aecc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aed0:	d1d7      	bne.n	800ae82 <_dtoa_r+0xa52>
 800aed2:	2339      	movs	r3, #57	; 0x39
 800aed4:	f88b 3000 	strb.w	r3, [fp]
 800aed8:	462b      	mov	r3, r5
 800aeda:	461d      	mov	r5, r3
 800aedc:	3b01      	subs	r3, #1
 800aede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aee2:	2a39      	cmp	r2, #57	; 0x39
 800aee4:	d071      	beq.n	800afca <_dtoa_r+0xb9a>
 800aee6:	3201      	adds	r2, #1
 800aee8:	701a      	strb	r2, [r3, #0]
 800aeea:	e746      	b.n	800ad7a <_dtoa_r+0x94a>
 800aeec:	2a00      	cmp	r2, #0
 800aeee:	dd07      	ble.n	800af00 <_dtoa_r+0xad0>
 800aef0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aef4:	d0ed      	beq.n	800aed2 <_dtoa_r+0xaa2>
 800aef6:	f10a 0301 	add.w	r3, sl, #1
 800aefa:	f88b 3000 	strb.w	r3, [fp]
 800aefe:	e73c      	b.n	800ad7a <_dtoa_r+0x94a>
 800af00:	9b05      	ldr	r3, [sp, #20]
 800af02:	f809 ac01 	strb.w	sl, [r9, #-1]
 800af06:	4599      	cmp	r9, r3
 800af08:	d047      	beq.n	800af9a <_dtoa_r+0xb6a>
 800af0a:	ee18 1a10 	vmov	r1, s16
 800af0e:	2300      	movs	r3, #0
 800af10:	220a      	movs	r2, #10
 800af12:	4620      	mov	r0, r4
 800af14:	f000 feaa 	bl	800bc6c <__multadd>
 800af18:	45b8      	cmp	r8, r7
 800af1a:	ee08 0a10 	vmov	s16, r0
 800af1e:	f04f 0300 	mov.w	r3, #0
 800af22:	f04f 020a 	mov.w	r2, #10
 800af26:	4641      	mov	r1, r8
 800af28:	4620      	mov	r0, r4
 800af2a:	d106      	bne.n	800af3a <_dtoa_r+0xb0a>
 800af2c:	f000 fe9e 	bl	800bc6c <__multadd>
 800af30:	4680      	mov	r8, r0
 800af32:	4607      	mov	r7, r0
 800af34:	f109 0901 	add.w	r9, r9, #1
 800af38:	e772      	b.n	800ae20 <_dtoa_r+0x9f0>
 800af3a:	f000 fe97 	bl	800bc6c <__multadd>
 800af3e:	4639      	mov	r1, r7
 800af40:	4680      	mov	r8, r0
 800af42:	2300      	movs	r3, #0
 800af44:	220a      	movs	r2, #10
 800af46:	4620      	mov	r0, r4
 800af48:	f000 fe90 	bl	800bc6c <__multadd>
 800af4c:	4607      	mov	r7, r0
 800af4e:	e7f1      	b.n	800af34 <_dtoa_r+0xb04>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	9302      	str	r3, [sp, #8]
 800af54:	9d01      	ldr	r5, [sp, #4]
 800af56:	ee18 0a10 	vmov	r0, s16
 800af5a:	4631      	mov	r1, r6
 800af5c:	f7ff f9da 	bl	800a314 <quorem>
 800af60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af64:	9b01      	ldr	r3, [sp, #4]
 800af66:	f805 ab01 	strb.w	sl, [r5], #1
 800af6a:	1aea      	subs	r2, r5, r3
 800af6c:	9b02      	ldr	r3, [sp, #8]
 800af6e:	4293      	cmp	r3, r2
 800af70:	dd09      	ble.n	800af86 <_dtoa_r+0xb56>
 800af72:	ee18 1a10 	vmov	r1, s16
 800af76:	2300      	movs	r3, #0
 800af78:	220a      	movs	r2, #10
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 fe76 	bl	800bc6c <__multadd>
 800af80:	ee08 0a10 	vmov	s16, r0
 800af84:	e7e7      	b.n	800af56 <_dtoa_r+0xb26>
 800af86:	9b02      	ldr	r3, [sp, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	bfc8      	it	gt
 800af8c:	461d      	movgt	r5, r3
 800af8e:	9b01      	ldr	r3, [sp, #4]
 800af90:	bfd8      	it	le
 800af92:	2501      	movle	r5, #1
 800af94:	441d      	add	r5, r3
 800af96:	f04f 0800 	mov.w	r8, #0
 800af9a:	ee18 1a10 	vmov	r1, s16
 800af9e:	2201      	movs	r2, #1
 800afa0:	4620      	mov	r0, r4
 800afa2:	f001 f85d 	bl	800c060 <__lshift>
 800afa6:	4631      	mov	r1, r6
 800afa8:	ee08 0a10 	vmov	s16, r0
 800afac:	f001 f8c8 	bl	800c140 <__mcmp>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	dc91      	bgt.n	800aed8 <_dtoa_r+0xaa8>
 800afb4:	d102      	bne.n	800afbc <_dtoa_r+0xb8c>
 800afb6:	f01a 0f01 	tst.w	sl, #1
 800afba:	d18d      	bne.n	800aed8 <_dtoa_r+0xaa8>
 800afbc:	462b      	mov	r3, r5
 800afbe:	461d      	mov	r5, r3
 800afc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afc4:	2a30      	cmp	r2, #48	; 0x30
 800afc6:	d0fa      	beq.n	800afbe <_dtoa_r+0xb8e>
 800afc8:	e6d7      	b.n	800ad7a <_dtoa_r+0x94a>
 800afca:	9a01      	ldr	r2, [sp, #4]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d184      	bne.n	800aeda <_dtoa_r+0xaaa>
 800afd0:	9b00      	ldr	r3, [sp, #0]
 800afd2:	3301      	adds	r3, #1
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	2331      	movs	r3, #49	; 0x31
 800afd8:	7013      	strb	r3, [r2, #0]
 800afda:	e6ce      	b.n	800ad7a <_dtoa_r+0x94a>
 800afdc:	4b09      	ldr	r3, [pc, #36]	; (800b004 <_dtoa_r+0xbd4>)
 800afde:	f7ff ba95 	b.w	800a50c <_dtoa_r+0xdc>
 800afe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f47f aa6e 	bne.w	800a4c6 <_dtoa_r+0x96>
 800afea:	4b07      	ldr	r3, [pc, #28]	; (800b008 <_dtoa_r+0xbd8>)
 800afec:	f7ff ba8e 	b.w	800a50c <_dtoa_r+0xdc>
 800aff0:	9b02      	ldr	r3, [sp, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	dcae      	bgt.n	800af54 <_dtoa_r+0xb24>
 800aff6:	9b06      	ldr	r3, [sp, #24]
 800aff8:	2b02      	cmp	r3, #2
 800affa:	f73f aea8 	bgt.w	800ad4e <_dtoa_r+0x91e>
 800affe:	e7a9      	b.n	800af54 <_dtoa_r+0xb24>
 800b000:	0800e920 	.word	0x0800e920
 800b004:	0800eb81 	.word	0x0800eb81
 800b008:	0800e8a1 	.word	0x0800e8a1

0800b00c <__sflush_r>:
 800b00c:	898a      	ldrh	r2, [r1, #12]
 800b00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b012:	4605      	mov	r5, r0
 800b014:	0710      	lsls	r0, r2, #28
 800b016:	460c      	mov	r4, r1
 800b018:	d458      	bmi.n	800b0cc <__sflush_r+0xc0>
 800b01a:	684b      	ldr	r3, [r1, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dc05      	bgt.n	800b02c <__sflush_r+0x20>
 800b020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b022:	2b00      	cmp	r3, #0
 800b024:	dc02      	bgt.n	800b02c <__sflush_r+0x20>
 800b026:	2000      	movs	r0, #0
 800b028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b02e:	2e00      	cmp	r6, #0
 800b030:	d0f9      	beq.n	800b026 <__sflush_r+0x1a>
 800b032:	2300      	movs	r3, #0
 800b034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b038:	682f      	ldr	r7, [r5, #0]
 800b03a:	602b      	str	r3, [r5, #0]
 800b03c:	d032      	beq.n	800b0a4 <__sflush_r+0x98>
 800b03e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	075a      	lsls	r2, r3, #29
 800b044:	d505      	bpl.n	800b052 <__sflush_r+0x46>
 800b046:	6863      	ldr	r3, [r4, #4]
 800b048:	1ac0      	subs	r0, r0, r3
 800b04a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b04c:	b10b      	cbz	r3, 800b052 <__sflush_r+0x46>
 800b04e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b050:	1ac0      	subs	r0, r0, r3
 800b052:	2300      	movs	r3, #0
 800b054:	4602      	mov	r2, r0
 800b056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b058:	6a21      	ldr	r1, [r4, #32]
 800b05a:	4628      	mov	r0, r5
 800b05c:	47b0      	blx	r6
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	d106      	bne.n	800b072 <__sflush_r+0x66>
 800b064:	6829      	ldr	r1, [r5, #0]
 800b066:	291d      	cmp	r1, #29
 800b068:	d82c      	bhi.n	800b0c4 <__sflush_r+0xb8>
 800b06a:	4a2a      	ldr	r2, [pc, #168]	; (800b114 <__sflush_r+0x108>)
 800b06c:	40ca      	lsrs	r2, r1
 800b06e:	07d6      	lsls	r6, r2, #31
 800b070:	d528      	bpl.n	800b0c4 <__sflush_r+0xb8>
 800b072:	2200      	movs	r2, #0
 800b074:	6062      	str	r2, [r4, #4]
 800b076:	04d9      	lsls	r1, r3, #19
 800b078:	6922      	ldr	r2, [r4, #16]
 800b07a:	6022      	str	r2, [r4, #0]
 800b07c:	d504      	bpl.n	800b088 <__sflush_r+0x7c>
 800b07e:	1c42      	adds	r2, r0, #1
 800b080:	d101      	bne.n	800b086 <__sflush_r+0x7a>
 800b082:	682b      	ldr	r3, [r5, #0]
 800b084:	b903      	cbnz	r3, 800b088 <__sflush_r+0x7c>
 800b086:	6560      	str	r0, [r4, #84]	; 0x54
 800b088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b08a:	602f      	str	r7, [r5, #0]
 800b08c:	2900      	cmp	r1, #0
 800b08e:	d0ca      	beq.n	800b026 <__sflush_r+0x1a>
 800b090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b094:	4299      	cmp	r1, r3
 800b096:	d002      	beq.n	800b09e <__sflush_r+0x92>
 800b098:	4628      	mov	r0, r5
 800b09a:	f001 fa5d 	bl	800c558 <_free_r>
 800b09e:	2000      	movs	r0, #0
 800b0a0:	6360      	str	r0, [r4, #52]	; 0x34
 800b0a2:	e7c1      	b.n	800b028 <__sflush_r+0x1c>
 800b0a4:	6a21      	ldr	r1, [r4, #32]
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	47b0      	blx	r6
 800b0ac:	1c41      	adds	r1, r0, #1
 800b0ae:	d1c7      	bne.n	800b040 <__sflush_r+0x34>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0c4      	beq.n	800b040 <__sflush_r+0x34>
 800b0b6:	2b1d      	cmp	r3, #29
 800b0b8:	d001      	beq.n	800b0be <__sflush_r+0xb2>
 800b0ba:	2b16      	cmp	r3, #22
 800b0bc:	d101      	bne.n	800b0c2 <__sflush_r+0xb6>
 800b0be:	602f      	str	r7, [r5, #0]
 800b0c0:	e7b1      	b.n	800b026 <__sflush_r+0x1a>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0c8:	81a3      	strh	r3, [r4, #12]
 800b0ca:	e7ad      	b.n	800b028 <__sflush_r+0x1c>
 800b0cc:	690f      	ldr	r7, [r1, #16]
 800b0ce:	2f00      	cmp	r7, #0
 800b0d0:	d0a9      	beq.n	800b026 <__sflush_r+0x1a>
 800b0d2:	0793      	lsls	r3, r2, #30
 800b0d4:	680e      	ldr	r6, [r1, #0]
 800b0d6:	bf08      	it	eq
 800b0d8:	694b      	ldreq	r3, [r1, #20]
 800b0da:	600f      	str	r7, [r1, #0]
 800b0dc:	bf18      	it	ne
 800b0de:	2300      	movne	r3, #0
 800b0e0:	eba6 0807 	sub.w	r8, r6, r7
 800b0e4:	608b      	str	r3, [r1, #8]
 800b0e6:	f1b8 0f00 	cmp.w	r8, #0
 800b0ea:	dd9c      	ble.n	800b026 <__sflush_r+0x1a>
 800b0ec:	6a21      	ldr	r1, [r4, #32]
 800b0ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0f0:	4643      	mov	r3, r8
 800b0f2:	463a      	mov	r2, r7
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	47b0      	blx	r6
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	dc06      	bgt.n	800b10a <__sflush_r+0xfe>
 800b0fc:	89a3      	ldrh	r3, [r4, #12]
 800b0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b102:	81a3      	strh	r3, [r4, #12]
 800b104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b108:	e78e      	b.n	800b028 <__sflush_r+0x1c>
 800b10a:	4407      	add	r7, r0
 800b10c:	eba8 0800 	sub.w	r8, r8, r0
 800b110:	e7e9      	b.n	800b0e6 <__sflush_r+0xda>
 800b112:	bf00      	nop
 800b114:	20400001 	.word	0x20400001

0800b118 <_fflush_r>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	690b      	ldr	r3, [r1, #16]
 800b11c:	4605      	mov	r5, r0
 800b11e:	460c      	mov	r4, r1
 800b120:	b913      	cbnz	r3, 800b128 <_fflush_r+0x10>
 800b122:	2500      	movs	r5, #0
 800b124:	4628      	mov	r0, r5
 800b126:	bd38      	pop	{r3, r4, r5, pc}
 800b128:	b118      	cbz	r0, 800b132 <_fflush_r+0x1a>
 800b12a:	6983      	ldr	r3, [r0, #24]
 800b12c:	b90b      	cbnz	r3, 800b132 <_fflush_r+0x1a>
 800b12e:	f000 f887 	bl	800b240 <__sinit>
 800b132:	4b14      	ldr	r3, [pc, #80]	; (800b184 <_fflush_r+0x6c>)
 800b134:	429c      	cmp	r4, r3
 800b136:	d11b      	bne.n	800b170 <_fflush_r+0x58>
 800b138:	686c      	ldr	r4, [r5, #4]
 800b13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d0ef      	beq.n	800b122 <_fflush_r+0xa>
 800b142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b144:	07d0      	lsls	r0, r2, #31
 800b146:	d404      	bmi.n	800b152 <_fflush_r+0x3a>
 800b148:	0599      	lsls	r1, r3, #22
 800b14a:	d402      	bmi.n	800b152 <_fflush_r+0x3a>
 800b14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b14e:	f000 fc88 	bl	800ba62 <__retarget_lock_acquire_recursive>
 800b152:	4628      	mov	r0, r5
 800b154:	4621      	mov	r1, r4
 800b156:	f7ff ff59 	bl	800b00c <__sflush_r>
 800b15a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b15c:	07da      	lsls	r2, r3, #31
 800b15e:	4605      	mov	r5, r0
 800b160:	d4e0      	bmi.n	800b124 <_fflush_r+0xc>
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	059b      	lsls	r3, r3, #22
 800b166:	d4dd      	bmi.n	800b124 <_fflush_r+0xc>
 800b168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b16a:	f000 fc7b 	bl	800ba64 <__retarget_lock_release_recursive>
 800b16e:	e7d9      	b.n	800b124 <_fflush_r+0xc>
 800b170:	4b05      	ldr	r3, [pc, #20]	; (800b188 <_fflush_r+0x70>)
 800b172:	429c      	cmp	r4, r3
 800b174:	d101      	bne.n	800b17a <_fflush_r+0x62>
 800b176:	68ac      	ldr	r4, [r5, #8]
 800b178:	e7df      	b.n	800b13a <_fflush_r+0x22>
 800b17a:	4b04      	ldr	r3, [pc, #16]	; (800b18c <_fflush_r+0x74>)
 800b17c:	429c      	cmp	r4, r3
 800b17e:	bf08      	it	eq
 800b180:	68ec      	ldreq	r4, [r5, #12]
 800b182:	e7da      	b.n	800b13a <_fflush_r+0x22>
 800b184:	0800e954 	.word	0x0800e954
 800b188:	0800e974 	.word	0x0800e974
 800b18c:	0800e934 	.word	0x0800e934

0800b190 <std>:
 800b190:	2300      	movs	r3, #0
 800b192:	b510      	push	{r4, lr}
 800b194:	4604      	mov	r4, r0
 800b196:	e9c0 3300 	strd	r3, r3, [r0]
 800b19a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b19e:	6083      	str	r3, [r0, #8]
 800b1a0:	8181      	strh	r1, [r0, #12]
 800b1a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b1a4:	81c2      	strh	r2, [r0, #14]
 800b1a6:	6183      	str	r3, [r0, #24]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	2208      	movs	r2, #8
 800b1ac:	305c      	adds	r0, #92	; 0x5c
 800b1ae:	f7fd f98b 	bl	80084c8 <memset>
 800b1b2:	4b05      	ldr	r3, [pc, #20]	; (800b1c8 <std+0x38>)
 800b1b4:	6263      	str	r3, [r4, #36]	; 0x24
 800b1b6:	4b05      	ldr	r3, [pc, #20]	; (800b1cc <std+0x3c>)
 800b1b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1ba:	4b05      	ldr	r3, [pc, #20]	; (800b1d0 <std+0x40>)
 800b1bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1be:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <std+0x44>)
 800b1c0:	6224      	str	r4, [r4, #32]
 800b1c2:	6323      	str	r3, [r4, #48]	; 0x30
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	bf00      	nop
 800b1c8:	0800935d 	.word	0x0800935d
 800b1cc:	08009383 	.word	0x08009383
 800b1d0:	080093bb 	.word	0x080093bb
 800b1d4:	080093df 	.word	0x080093df

0800b1d8 <_cleanup_r>:
 800b1d8:	4901      	ldr	r1, [pc, #4]	; (800b1e0 <_cleanup_r+0x8>)
 800b1da:	f000 b8af 	b.w	800b33c <_fwalk_reent>
 800b1de:	bf00      	nop
 800b1e0:	0800b119 	.word	0x0800b119

0800b1e4 <__sfmoreglue>:
 800b1e4:	b570      	push	{r4, r5, r6, lr}
 800b1e6:	2268      	movs	r2, #104	; 0x68
 800b1e8:	1e4d      	subs	r5, r1, #1
 800b1ea:	4355      	muls	r5, r2
 800b1ec:	460e      	mov	r6, r1
 800b1ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1f2:	f001 fa1d 	bl	800c630 <_malloc_r>
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	b140      	cbz	r0, 800b20c <__sfmoreglue+0x28>
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	e9c0 1600 	strd	r1, r6, [r0]
 800b200:	300c      	adds	r0, #12
 800b202:	60a0      	str	r0, [r4, #8]
 800b204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b208:	f7fd f95e 	bl	80084c8 <memset>
 800b20c:	4620      	mov	r0, r4
 800b20e:	bd70      	pop	{r4, r5, r6, pc}

0800b210 <__sfp_lock_acquire>:
 800b210:	4801      	ldr	r0, [pc, #4]	; (800b218 <__sfp_lock_acquire+0x8>)
 800b212:	f000 bc26 	b.w	800ba62 <__retarget_lock_acquire_recursive>
 800b216:	bf00      	nop
 800b218:	20000459 	.word	0x20000459

0800b21c <__sfp_lock_release>:
 800b21c:	4801      	ldr	r0, [pc, #4]	; (800b224 <__sfp_lock_release+0x8>)
 800b21e:	f000 bc21 	b.w	800ba64 <__retarget_lock_release_recursive>
 800b222:	bf00      	nop
 800b224:	20000459 	.word	0x20000459

0800b228 <__sinit_lock_acquire>:
 800b228:	4801      	ldr	r0, [pc, #4]	; (800b230 <__sinit_lock_acquire+0x8>)
 800b22a:	f000 bc1a 	b.w	800ba62 <__retarget_lock_acquire_recursive>
 800b22e:	bf00      	nop
 800b230:	2000045a 	.word	0x2000045a

0800b234 <__sinit_lock_release>:
 800b234:	4801      	ldr	r0, [pc, #4]	; (800b23c <__sinit_lock_release+0x8>)
 800b236:	f000 bc15 	b.w	800ba64 <__retarget_lock_release_recursive>
 800b23a:	bf00      	nop
 800b23c:	2000045a 	.word	0x2000045a

0800b240 <__sinit>:
 800b240:	b510      	push	{r4, lr}
 800b242:	4604      	mov	r4, r0
 800b244:	f7ff fff0 	bl	800b228 <__sinit_lock_acquire>
 800b248:	69a3      	ldr	r3, [r4, #24]
 800b24a:	b11b      	cbz	r3, 800b254 <__sinit+0x14>
 800b24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b250:	f7ff bff0 	b.w	800b234 <__sinit_lock_release>
 800b254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b258:	6523      	str	r3, [r4, #80]	; 0x50
 800b25a:	4b13      	ldr	r3, [pc, #76]	; (800b2a8 <__sinit+0x68>)
 800b25c:	4a13      	ldr	r2, [pc, #76]	; (800b2ac <__sinit+0x6c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	62a2      	str	r2, [r4, #40]	; 0x28
 800b262:	42a3      	cmp	r3, r4
 800b264:	bf04      	itt	eq
 800b266:	2301      	moveq	r3, #1
 800b268:	61a3      	streq	r3, [r4, #24]
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 f820 	bl	800b2b0 <__sfp>
 800b270:	6060      	str	r0, [r4, #4]
 800b272:	4620      	mov	r0, r4
 800b274:	f000 f81c 	bl	800b2b0 <__sfp>
 800b278:	60a0      	str	r0, [r4, #8]
 800b27a:	4620      	mov	r0, r4
 800b27c:	f000 f818 	bl	800b2b0 <__sfp>
 800b280:	2200      	movs	r2, #0
 800b282:	60e0      	str	r0, [r4, #12]
 800b284:	2104      	movs	r1, #4
 800b286:	6860      	ldr	r0, [r4, #4]
 800b288:	f7ff ff82 	bl	800b190 <std>
 800b28c:	68a0      	ldr	r0, [r4, #8]
 800b28e:	2201      	movs	r2, #1
 800b290:	2109      	movs	r1, #9
 800b292:	f7ff ff7d 	bl	800b190 <std>
 800b296:	68e0      	ldr	r0, [r4, #12]
 800b298:	2202      	movs	r2, #2
 800b29a:	2112      	movs	r1, #18
 800b29c:	f7ff ff78 	bl	800b190 <std>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	61a3      	str	r3, [r4, #24]
 800b2a4:	e7d2      	b.n	800b24c <__sinit+0xc>
 800b2a6:	bf00      	nop
 800b2a8:	0800e714 	.word	0x0800e714
 800b2ac:	0800b1d9 	.word	0x0800b1d9

0800b2b0 <__sfp>:
 800b2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b2:	4607      	mov	r7, r0
 800b2b4:	f7ff ffac 	bl	800b210 <__sfp_lock_acquire>
 800b2b8:	4b1e      	ldr	r3, [pc, #120]	; (800b334 <__sfp+0x84>)
 800b2ba:	681e      	ldr	r6, [r3, #0]
 800b2bc:	69b3      	ldr	r3, [r6, #24]
 800b2be:	b913      	cbnz	r3, 800b2c6 <__sfp+0x16>
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f7ff ffbd 	bl	800b240 <__sinit>
 800b2c6:	3648      	adds	r6, #72	; 0x48
 800b2c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	d503      	bpl.n	800b2d8 <__sfp+0x28>
 800b2d0:	6833      	ldr	r3, [r6, #0]
 800b2d2:	b30b      	cbz	r3, 800b318 <__sfp+0x68>
 800b2d4:	6836      	ldr	r6, [r6, #0]
 800b2d6:	e7f7      	b.n	800b2c8 <__sfp+0x18>
 800b2d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2dc:	b9d5      	cbnz	r5, 800b314 <__sfp+0x64>
 800b2de:	4b16      	ldr	r3, [pc, #88]	; (800b338 <__sfp+0x88>)
 800b2e0:	60e3      	str	r3, [r4, #12]
 800b2e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2e6:	6665      	str	r5, [r4, #100]	; 0x64
 800b2e8:	f000 fbba 	bl	800ba60 <__retarget_lock_init_recursive>
 800b2ec:	f7ff ff96 	bl	800b21c <__sfp_lock_release>
 800b2f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2f8:	6025      	str	r5, [r4, #0]
 800b2fa:	61a5      	str	r5, [r4, #24]
 800b2fc:	2208      	movs	r2, #8
 800b2fe:	4629      	mov	r1, r5
 800b300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b304:	f7fd f8e0 	bl	80084c8 <memset>
 800b308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b30c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b310:	4620      	mov	r0, r4
 800b312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b314:	3468      	adds	r4, #104	; 0x68
 800b316:	e7d9      	b.n	800b2cc <__sfp+0x1c>
 800b318:	2104      	movs	r1, #4
 800b31a:	4638      	mov	r0, r7
 800b31c:	f7ff ff62 	bl	800b1e4 <__sfmoreglue>
 800b320:	4604      	mov	r4, r0
 800b322:	6030      	str	r0, [r6, #0]
 800b324:	2800      	cmp	r0, #0
 800b326:	d1d5      	bne.n	800b2d4 <__sfp+0x24>
 800b328:	f7ff ff78 	bl	800b21c <__sfp_lock_release>
 800b32c:	230c      	movs	r3, #12
 800b32e:	603b      	str	r3, [r7, #0]
 800b330:	e7ee      	b.n	800b310 <__sfp+0x60>
 800b332:	bf00      	nop
 800b334:	0800e714 	.word	0x0800e714
 800b338:	ffff0001 	.word	0xffff0001

0800b33c <_fwalk_reent>:
 800b33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b340:	4606      	mov	r6, r0
 800b342:	4688      	mov	r8, r1
 800b344:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b348:	2700      	movs	r7, #0
 800b34a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b34e:	f1b9 0901 	subs.w	r9, r9, #1
 800b352:	d505      	bpl.n	800b360 <_fwalk_reent+0x24>
 800b354:	6824      	ldr	r4, [r4, #0]
 800b356:	2c00      	cmp	r4, #0
 800b358:	d1f7      	bne.n	800b34a <_fwalk_reent+0xe>
 800b35a:	4638      	mov	r0, r7
 800b35c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b360:	89ab      	ldrh	r3, [r5, #12]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d907      	bls.n	800b376 <_fwalk_reent+0x3a>
 800b366:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b36a:	3301      	adds	r3, #1
 800b36c:	d003      	beq.n	800b376 <_fwalk_reent+0x3a>
 800b36e:	4629      	mov	r1, r5
 800b370:	4630      	mov	r0, r6
 800b372:	47c0      	blx	r8
 800b374:	4307      	orrs	r7, r0
 800b376:	3568      	adds	r5, #104	; 0x68
 800b378:	e7e9      	b.n	800b34e <_fwalk_reent+0x12>

0800b37a <rshift>:
 800b37a:	6903      	ldr	r3, [r0, #16]
 800b37c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b384:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b388:	f100 0414 	add.w	r4, r0, #20
 800b38c:	dd45      	ble.n	800b41a <rshift+0xa0>
 800b38e:	f011 011f 	ands.w	r1, r1, #31
 800b392:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b396:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b39a:	d10c      	bne.n	800b3b6 <rshift+0x3c>
 800b39c:	f100 0710 	add.w	r7, r0, #16
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	42b1      	cmp	r1, r6
 800b3a4:	d334      	bcc.n	800b410 <rshift+0x96>
 800b3a6:	1a9b      	subs	r3, r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	1eea      	subs	r2, r5, #3
 800b3ac:	4296      	cmp	r6, r2
 800b3ae:	bf38      	it	cc
 800b3b0:	2300      	movcc	r3, #0
 800b3b2:	4423      	add	r3, r4
 800b3b4:	e015      	b.n	800b3e2 <rshift+0x68>
 800b3b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3ba:	f1c1 0820 	rsb	r8, r1, #32
 800b3be:	40cf      	lsrs	r7, r1
 800b3c0:	f105 0e04 	add.w	lr, r5, #4
 800b3c4:	46a1      	mov	r9, r4
 800b3c6:	4576      	cmp	r6, lr
 800b3c8:	46f4      	mov	ip, lr
 800b3ca:	d815      	bhi.n	800b3f8 <rshift+0x7e>
 800b3cc:	1a9a      	subs	r2, r3, r2
 800b3ce:	0092      	lsls	r2, r2, #2
 800b3d0:	3a04      	subs	r2, #4
 800b3d2:	3501      	adds	r5, #1
 800b3d4:	42ae      	cmp	r6, r5
 800b3d6:	bf38      	it	cc
 800b3d8:	2200      	movcc	r2, #0
 800b3da:	18a3      	adds	r3, r4, r2
 800b3dc:	50a7      	str	r7, [r4, r2]
 800b3de:	b107      	cbz	r7, 800b3e2 <rshift+0x68>
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	1b1a      	subs	r2, r3, r4
 800b3e4:	42a3      	cmp	r3, r4
 800b3e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3ea:	bf08      	it	eq
 800b3ec:	2300      	moveq	r3, #0
 800b3ee:	6102      	str	r2, [r0, #16]
 800b3f0:	bf08      	it	eq
 800b3f2:	6143      	streq	r3, [r0, #20]
 800b3f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3f8:	f8dc c000 	ldr.w	ip, [ip]
 800b3fc:	fa0c fc08 	lsl.w	ip, ip, r8
 800b400:	ea4c 0707 	orr.w	r7, ip, r7
 800b404:	f849 7b04 	str.w	r7, [r9], #4
 800b408:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b40c:	40cf      	lsrs	r7, r1
 800b40e:	e7da      	b.n	800b3c6 <rshift+0x4c>
 800b410:	f851 cb04 	ldr.w	ip, [r1], #4
 800b414:	f847 cf04 	str.w	ip, [r7, #4]!
 800b418:	e7c3      	b.n	800b3a2 <rshift+0x28>
 800b41a:	4623      	mov	r3, r4
 800b41c:	e7e1      	b.n	800b3e2 <rshift+0x68>

0800b41e <__hexdig_fun>:
 800b41e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b422:	2b09      	cmp	r3, #9
 800b424:	d802      	bhi.n	800b42c <__hexdig_fun+0xe>
 800b426:	3820      	subs	r0, #32
 800b428:	b2c0      	uxtb	r0, r0
 800b42a:	4770      	bx	lr
 800b42c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b430:	2b05      	cmp	r3, #5
 800b432:	d801      	bhi.n	800b438 <__hexdig_fun+0x1a>
 800b434:	3847      	subs	r0, #71	; 0x47
 800b436:	e7f7      	b.n	800b428 <__hexdig_fun+0xa>
 800b438:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b43c:	2b05      	cmp	r3, #5
 800b43e:	d801      	bhi.n	800b444 <__hexdig_fun+0x26>
 800b440:	3827      	subs	r0, #39	; 0x27
 800b442:	e7f1      	b.n	800b428 <__hexdig_fun+0xa>
 800b444:	2000      	movs	r0, #0
 800b446:	4770      	bx	lr

0800b448 <__gethex>:
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	ed2d 8b02 	vpush	{d8}
 800b450:	b089      	sub	sp, #36	; 0x24
 800b452:	ee08 0a10 	vmov	s16, r0
 800b456:	9304      	str	r3, [sp, #16]
 800b458:	4bb4      	ldr	r3, [pc, #720]	; (800b72c <__gethex+0x2e4>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	4618      	mov	r0, r3
 800b460:	468b      	mov	fp, r1
 800b462:	4690      	mov	r8, r2
 800b464:	f7f4 febe 	bl	80001e4 <strlen>
 800b468:	9b01      	ldr	r3, [sp, #4]
 800b46a:	f8db 2000 	ldr.w	r2, [fp]
 800b46e:	4403      	add	r3, r0
 800b470:	4682      	mov	sl, r0
 800b472:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b476:	9305      	str	r3, [sp, #20]
 800b478:	1c93      	adds	r3, r2, #2
 800b47a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b47e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b482:	32fe      	adds	r2, #254	; 0xfe
 800b484:	18d1      	adds	r1, r2, r3
 800b486:	461f      	mov	r7, r3
 800b488:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b48c:	9100      	str	r1, [sp, #0]
 800b48e:	2830      	cmp	r0, #48	; 0x30
 800b490:	d0f8      	beq.n	800b484 <__gethex+0x3c>
 800b492:	f7ff ffc4 	bl	800b41e <__hexdig_fun>
 800b496:	4604      	mov	r4, r0
 800b498:	2800      	cmp	r0, #0
 800b49a:	d13a      	bne.n	800b512 <__gethex+0xca>
 800b49c:	9901      	ldr	r1, [sp, #4]
 800b49e:	4652      	mov	r2, sl
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f001 fe1d 	bl	800d0e0 <strncmp>
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d168      	bne.n	800b57e <__gethex+0x136>
 800b4ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b4b0:	eb07 060a 	add.w	r6, r7, sl
 800b4b4:	f7ff ffb3 	bl	800b41e <__hexdig_fun>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d062      	beq.n	800b582 <__gethex+0x13a>
 800b4bc:	4633      	mov	r3, r6
 800b4be:	7818      	ldrb	r0, [r3, #0]
 800b4c0:	2830      	cmp	r0, #48	; 0x30
 800b4c2:	461f      	mov	r7, r3
 800b4c4:	f103 0301 	add.w	r3, r3, #1
 800b4c8:	d0f9      	beq.n	800b4be <__gethex+0x76>
 800b4ca:	f7ff ffa8 	bl	800b41e <__hexdig_fun>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	fab0 f480 	clz	r4, r0
 800b4d4:	0964      	lsrs	r4, r4, #5
 800b4d6:	4635      	mov	r5, r6
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	463a      	mov	r2, r7
 800b4dc:	4616      	mov	r6, r2
 800b4de:	3201      	adds	r2, #1
 800b4e0:	7830      	ldrb	r0, [r6, #0]
 800b4e2:	f7ff ff9c 	bl	800b41e <__hexdig_fun>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d1f8      	bne.n	800b4dc <__gethex+0x94>
 800b4ea:	9901      	ldr	r1, [sp, #4]
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	f001 fdf6 	bl	800d0e0 <strncmp>
 800b4f4:	b980      	cbnz	r0, 800b518 <__gethex+0xd0>
 800b4f6:	b94d      	cbnz	r5, 800b50c <__gethex+0xc4>
 800b4f8:	eb06 050a 	add.w	r5, r6, sl
 800b4fc:	462a      	mov	r2, r5
 800b4fe:	4616      	mov	r6, r2
 800b500:	3201      	adds	r2, #1
 800b502:	7830      	ldrb	r0, [r6, #0]
 800b504:	f7ff ff8b 	bl	800b41e <__hexdig_fun>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1f8      	bne.n	800b4fe <__gethex+0xb6>
 800b50c:	1bad      	subs	r5, r5, r6
 800b50e:	00ad      	lsls	r5, r5, #2
 800b510:	e004      	b.n	800b51c <__gethex+0xd4>
 800b512:	2400      	movs	r4, #0
 800b514:	4625      	mov	r5, r4
 800b516:	e7e0      	b.n	800b4da <__gethex+0x92>
 800b518:	2d00      	cmp	r5, #0
 800b51a:	d1f7      	bne.n	800b50c <__gethex+0xc4>
 800b51c:	7833      	ldrb	r3, [r6, #0]
 800b51e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b522:	2b50      	cmp	r3, #80	; 0x50
 800b524:	d13b      	bne.n	800b59e <__gethex+0x156>
 800b526:	7873      	ldrb	r3, [r6, #1]
 800b528:	2b2b      	cmp	r3, #43	; 0x2b
 800b52a:	d02c      	beq.n	800b586 <__gethex+0x13e>
 800b52c:	2b2d      	cmp	r3, #45	; 0x2d
 800b52e:	d02e      	beq.n	800b58e <__gethex+0x146>
 800b530:	1c71      	adds	r1, r6, #1
 800b532:	f04f 0900 	mov.w	r9, #0
 800b536:	7808      	ldrb	r0, [r1, #0]
 800b538:	f7ff ff71 	bl	800b41e <__hexdig_fun>
 800b53c:	1e43      	subs	r3, r0, #1
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b18      	cmp	r3, #24
 800b542:	d82c      	bhi.n	800b59e <__gethex+0x156>
 800b544:	f1a0 0210 	sub.w	r2, r0, #16
 800b548:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b54c:	f7ff ff67 	bl	800b41e <__hexdig_fun>
 800b550:	1e43      	subs	r3, r0, #1
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b18      	cmp	r3, #24
 800b556:	d91d      	bls.n	800b594 <__gethex+0x14c>
 800b558:	f1b9 0f00 	cmp.w	r9, #0
 800b55c:	d000      	beq.n	800b560 <__gethex+0x118>
 800b55e:	4252      	negs	r2, r2
 800b560:	4415      	add	r5, r2
 800b562:	f8cb 1000 	str.w	r1, [fp]
 800b566:	b1e4      	cbz	r4, 800b5a2 <__gethex+0x15a>
 800b568:	9b00      	ldr	r3, [sp, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	bf14      	ite	ne
 800b56e:	2700      	movne	r7, #0
 800b570:	2706      	moveq	r7, #6
 800b572:	4638      	mov	r0, r7
 800b574:	b009      	add	sp, #36	; 0x24
 800b576:	ecbd 8b02 	vpop	{d8}
 800b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57e:	463e      	mov	r6, r7
 800b580:	4625      	mov	r5, r4
 800b582:	2401      	movs	r4, #1
 800b584:	e7ca      	b.n	800b51c <__gethex+0xd4>
 800b586:	f04f 0900 	mov.w	r9, #0
 800b58a:	1cb1      	adds	r1, r6, #2
 800b58c:	e7d3      	b.n	800b536 <__gethex+0xee>
 800b58e:	f04f 0901 	mov.w	r9, #1
 800b592:	e7fa      	b.n	800b58a <__gethex+0x142>
 800b594:	230a      	movs	r3, #10
 800b596:	fb03 0202 	mla	r2, r3, r2, r0
 800b59a:	3a10      	subs	r2, #16
 800b59c:	e7d4      	b.n	800b548 <__gethex+0x100>
 800b59e:	4631      	mov	r1, r6
 800b5a0:	e7df      	b.n	800b562 <__gethex+0x11a>
 800b5a2:	1bf3      	subs	r3, r6, r7
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	2b07      	cmp	r3, #7
 800b5aa:	dc0b      	bgt.n	800b5c4 <__gethex+0x17c>
 800b5ac:	ee18 0a10 	vmov	r0, s16
 800b5b0:	f000 fafa 	bl	800bba8 <_Balloc>
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	b940      	cbnz	r0, 800b5ca <__gethex+0x182>
 800b5b8:	4b5d      	ldr	r3, [pc, #372]	; (800b730 <__gethex+0x2e8>)
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	21de      	movs	r1, #222	; 0xde
 800b5be:	485d      	ldr	r0, [pc, #372]	; (800b734 <__gethex+0x2ec>)
 800b5c0:	f001 fe5e 	bl	800d280 <__assert_func>
 800b5c4:	3101      	adds	r1, #1
 800b5c6:	105b      	asrs	r3, r3, #1
 800b5c8:	e7ee      	b.n	800b5a8 <__gethex+0x160>
 800b5ca:	f100 0914 	add.w	r9, r0, #20
 800b5ce:	f04f 0b00 	mov.w	fp, #0
 800b5d2:	f1ca 0301 	rsb	r3, sl, #1
 800b5d6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b5da:	f8cd b000 	str.w	fp, [sp]
 800b5de:	9306      	str	r3, [sp, #24]
 800b5e0:	42b7      	cmp	r7, r6
 800b5e2:	d340      	bcc.n	800b666 <__gethex+0x21e>
 800b5e4:	9802      	ldr	r0, [sp, #8]
 800b5e6:	9b00      	ldr	r3, [sp, #0]
 800b5e8:	f840 3b04 	str.w	r3, [r0], #4
 800b5ec:	eba0 0009 	sub.w	r0, r0, r9
 800b5f0:	1080      	asrs	r0, r0, #2
 800b5f2:	0146      	lsls	r6, r0, #5
 800b5f4:	6120      	str	r0, [r4, #16]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 fbc8 	bl	800bd8c <__hi0bits>
 800b5fc:	1a30      	subs	r0, r6, r0
 800b5fe:	f8d8 6000 	ldr.w	r6, [r8]
 800b602:	42b0      	cmp	r0, r6
 800b604:	dd63      	ble.n	800b6ce <__gethex+0x286>
 800b606:	1b87      	subs	r7, r0, r6
 800b608:	4639      	mov	r1, r7
 800b60a:	4620      	mov	r0, r4
 800b60c:	f000 ff6c 	bl	800c4e8 <__any_on>
 800b610:	4682      	mov	sl, r0
 800b612:	b1a8      	cbz	r0, 800b640 <__gethex+0x1f8>
 800b614:	1e7b      	subs	r3, r7, #1
 800b616:	1159      	asrs	r1, r3, #5
 800b618:	f003 021f 	and.w	r2, r3, #31
 800b61c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b620:	f04f 0a01 	mov.w	sl, #1
 800b624:	fa0a f202 	lsl.w	r2, sl, r2
 800b628:	420a      	tst	r2, r1
 800b62a:	d009      	beq.n	800b640 <__gethex+0x1f8>
 800b62c:	4553      	cmp	r3, sl
 800b62e:	dd05      	ble.n	800b63c <__gethex+0x1f4>
 800b630:	1eb9      	subs	r1, r7, #2
 800b632:	4620      	mov	r0, r4
 800b634:	f000 ff58 	bl	800c4e8 <__any_on>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d145      	bne.n	800b6c8 <__gethex+0x280>
 800b63c:	f04f 0a02 	mov.w	sl, #2
 800b640:	4639      	mov	r1, r7
 800b642:	4620      	mov	r0, r4
 800b644:	f7ff fe99 	bl	800b37a <rshift>
 800b648:	443d      	add	r5, r7
 800b64a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b64e:	42ab      	cmp	r3, r5
 800b650:	da4c      	bge.n	800b6ec <__gethex+0x2a4>
 800b652:	ee18 0a10 	vmov	r0, s16
 800b656:	4621      	mov	r1, r4
 800b658:	f000 fae6 	bl	800bc28 <_Bfree>
 800b65c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b65e:	2300      	movs	r3, #0
 800b660:	6013      	str	r3, [r2, #0]
 800b662:	27a3      	movs	r7, #163	; 0xa3
 800b664:	e785      	b.n	800b572 <__gethex+0x12a>
 800b666:	1e73      	subs	r3, r6, #1
 800b668:	9a05      	ldr	r2, [sp, #20]
 800b66a:	9303      	str	r3, [sp, #12]
 800b66c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b670:	4293      	cmp	r3, r2
 800b672:	d019      	beq.n	800b6a8 <__gethex+0x260>
 800b674:	f1bb 0f20 	cmp.w	fp, #32
 800b678:	d107      	bne.n	800b68a <__gethex+0x242>
 800b67a:	9b02      	ldr	r3, [sp, #8]
 800b67c:	9a00      	ldr	r2, [sp, #0]
 800b67e:	f843 2b04 	str.w	r2, [r3], #4
 800b682:	9302      	str	r3, [sp, #8]
 800b684:	2300      	movs	r3, #0
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	469b      	mov	fp, r3
 800b68a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b68e:	f7ff fec6 	bl	800b41e <__hexdig_fun>
 800b692:	9b00      	ldr	r3, [sp, #0]
 800b694:	f000 000f 	and.w	r0, r0, #15
 800b698:	fa00 f00b 	lsl.w	r0, r0, fp
 800b69c:	4303      	orrs	r3, r0
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	f10b 0b04 	add.w	fp, fp, #4
 800b6a4:	9b03      	ldr	r3, [sp, #12]
 800b6a6:	e00d      	b.n	800b6c4 <__gethex+0x27c>
 800b6a8:	9b03      	ldr	r3, [sp, #12]
 800b6aa:	9a06      	ldr	r2, [sp, #24]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	42bb      	cmp	r3, r7
 800b6b0:	d3e0      	bcc.n	800b674 <__gethex+0x22c>
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	9901      	ldr	r1, [sp, #4]
 800b6b6:	9307      	str	r3, [sp, #28]
 800b6b8:	4652      	mov	r2, sl
 800b6ba:	f001 fd11 	bl	800d0e0 <strncmp>
 800b6be:	9b07      	ldr	r3, [sp, #28]
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d1d7      	bne.n	800b674 <__gethex+0x22c>
 800b6c4:	461e      	mov	r6, r3
 800b6c6:	e78b      	b.n	800b5e0 <__gethex+0x198>
 800b6c8:	f04f 0a03 	mov.w	sl, #3
 800b6cc:	e7b8      	b.n	800b640 <__gethex+0x1f8>
 800b6ce:	da0a      	bge.n	800b6e6 <__gethex+0x29e>
 800b6d0:	1a37      	subs	r7, r6, r0
 800b6d2:	4621      	mov	r1, r4
 800b6d4:	ee18 0a10 	vmov	r0, s16
 800b6d8:	463a      	mov	r2, r7
 800b6da:	f000 fcc1 	bl	800c060 <__lshift>
 800b6de:	1bed      	subs	r5, r5, r7
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	f100 0914 	add.w	r9, r0, #20
 800b6e6:	f04f 0a00 	mov.w	sl, #0
 800b6ea:	e7ae      	b.n	800b64a <__gethex+0x202>
 800b6ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b6f0:	42a8      	cmp	r0, r5
 800b6f2:	dd72      	ble.n	800b7da <__gethex+0x392>
 800b6f4:	1b45      	subs	r5, r0, r5
 800b6f6:	42ae      	cmp	r6, r5
 800b6f8:	dc36      	bgt.n	800b768 <__gethex+0x320>
 800b6fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d02a      	beq.n	800b758 <__gethex+0x310>
 800b702:	2b03      	cmp	r3, #3
 800b704:	d02c      	beq.n	800b760 <__gethex+0x318>
 800b706:	2b01      	cmp	r3, #1
 800b708:	d11c      	bne.n	800b744 <__gethex+0x2fc>
 800b70a:	42ae      	cmp	r6, r5
 800b70c:	d11a      	bne.n	800b744 <__gethex+0x2fc>
 800b70e:	2e01      	cmp	r6, #1
 800b710:	d112      	bne.n	800b738 <__gethex+0x2f0>
 800b712:	9a04      	ldr	r2, [sp, #16]
 800b714:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b718:	6013      	str	r3, [r2, #0]
 800b71a:	2301      	movs	r3, #1
 800b71c:	6123      	str	r3, [r4, #16]
 800b71e:	f8c9 3000 	str.w	r3, [r9]
 800b722:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b724:	2762      	movs	r7, #98	; 0x62
 800b726:	601c      	str	r4, [r3, #0]
 800b728:	e723      	b.n	800b572 <__gethex+0x12a>
 800b72a:	bf00      	nop
 800b72c:	0800e9fc 	.word	0x0800e9fc
 800b730:	0800e920 	.word	0x0800e920
 800b734:	0800e994 	.word	0x0800e994
 800b738:	1e71      	subs	r1, r6, #1
 800b73a:	4620      	mov	r0, r4
 800b73c:	f000 fed4 	bl	800c4e8 <__any_on>
 800b740:	2800      	cmp	r0, #0
 800b742:	d1e6      	bne.n	800b712 <__gethex+0x2ca>
 800b744:	ee18 0a10 	vmov	r0, s16
 800b748:	4621      	mov	r1, r4
 800b74a:	f000 fa6d 	bl	800bc28 <_Bfree>
 800b74e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b750:	2300      	movs	r3, #0
 800b752:	6013      	str	r3, [r2, #0]
 800b754:	2750      	movs	r7, #80	; 0x50
 800b756:	e70c      	b.n	800b572 <__gethex+0x12a>
 800b758:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1f2      	bne.n	800b744 <__gethex+0x2fc>
 800b75e:	e7d8      	b.n	800b712 <__gethex+0x2ca>
 800b760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1d5      	bne.n	800b712 <__gethex+0x2ca>
 800b766:	e7ed      	b.n	800b744 <__gethex+0x2fc>
 800b768:	1e6f      	subs	r7, r5, #1
 800b76a:	f1ba 0f00 	cmp.w	sl, #0
 800b76e:	d131      	bne.n	800b7d4 <__gethex+0x38c>
 800b770:	b127      	cbz	r7, 800b77c <__gethex+0x334>
 800b772:	4639      	mov	r1, r7
 800b774:	4620      	mov	r0, r4
 800b776:	f000 feb7 	bl	800c4e8 <__any_on>
 800b77a:	4682      	mov	sl, r0
 800b77c:	117b      	asrs	r3, r7, #5
 800b77e:	2101      	movs	r1, #1
 800b780:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b784:	f007 071f 	and.w	r7, r7, #31
 800b788:	fa01 f707 	lsl.w	r7, r1, r7
 800b78c:	421f      	tst	r7, r3
 800b78e:	4629      	mov	r1, r5
 800b790:	4620      	mov	r0, r4
 800b792:	bf18      	it	ne
 800b794:	f04a 0a02 	orrne.w	sl, sl, #2
 800b798:	1b76      	subs	r6, r6, r5
 800b79a:	f7ff fdee 	bl	800b37a <rshift>
 800b79e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b7a2:	2702      	movs	r7, #2
 800b7a4:	f1ba 0f00 	cmp.w	sl, #0
 800b7a8:	d048      	beq.n	800b83c <__gethex+0x3f4>
 800b7aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d015      	beq.n	800b7de <__gethex+0x396>
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d017      	beq.n	800b7e6 <__gethex+0x39e>
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d109      	bne.n	800b7ce <__gethex+0x386>
 800b7ba:	f01a 0f02 	tst.w	sl, #2
 800b7be:	d006      	beq.n	800b7ce <__gethex+0x386>
 800b7c0:	f8d9 0000 	ldr.w	r0, [r9]
 800b7c4:	ea4a 0a00 	orr.w	sl, sl, r0
 800b7c8:	f01a 0f01 	tst.w	sl, #1
 800b7cc:	d10e      	bne.n	800b7ec <__gethex+0x3a4>
 800b7ce:	f047 0710 	orr.w	r7, r7, #16
 800b7d2:	e033      	b.n	800b83c <__gethex+0x3f4>
 800b7d4:	f04f 0a01 	mov.w	sl, #1
 800b7d8:	e7d0      	b.n	800b77c <__gethex+0x334>
 800b7da:	2701      	movs	r7, #1
 800b7dc:	e7e2      	b.n	800b7a4 <__gethex+0x35c>
 800b7de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7e0:	f1c3 0301 	rsb	r3, r3, #1
 800b7e4:	9315      	str	r3, [sp, #84]	; 0x54
 800b7e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0f0      	beq.n	800b7ce <__gethex+0x386>
 800b7ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b7f0:	f104 0314 	add.w	r3, r4, #20
 800b7f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b7f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b7fc:	f04f 0c00 	mov.w	ip, #0
 800b800:	4618      	mov	r0, r3
 800b802:	f853 2b04 	ldr.w	r2, [r3], #4
 800b806:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b80a:	d01c      	beq.n	800b846 <__gethex+0x3fe>
 800b80c:	3201      	adds	r2, #1
 800b80e:	6002      	str	r2, [r0, #0]
 800b810:	2f02      	cmp	r7, #2
 800b812:	f104 0314 	add.w	r3, r4, #20
 800b816:	d13f      	bne.n	800b898 <__gethex+0x450>
 800b818:	f8d8 2000 	ldr.w	r2, [r8]
 800b81c:	3a01      	subs	r2, #1
 800b81e:	42b2      	cmp	r2, r6
 800b820:	d10a      	bne.n	800b838 <__gethex+0x3f0>
 800b822:	1171      	asrs	r1, r6, #5
 800b824:	2201      	movs	r2, #1
 800b826:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b82a:	f006 061f 	and.w	r6, r6, #31
 800b82e:	fa02 f606 	lsl.w	r6, r2, r6
 800b832:	421e      	tst	r6, r3
 800b834:	bf18      	it	ne
 800b836:	4617      	movne	r7, r2
 800b838:	f047 0720 	orr.w	r7, r7, #32
 800b83c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b83e:	601c      	str	r4, [r3, #0]
 800b840:	9b04      	ldr	r3, [sp, #16]
 800b842:	601d      	str	r5, [r3, #0]
 800b844:	e695      	b.n	800b572 <__gethex+0x12a>
 800b846:	4299      	cmp	r1, r3
 800b848:	f843 cc04 	str.w	ip, [r3, #-4]
 800b84c:	d8d8      	bhi.n	800b800 <__gethex+0x3b8>
 800b84e:	68a3      	ldr	r3, [r4, #8]
 800b850:	459b      	cmp	fp, r3
 800b852:	db19      	blt.n	800b888 <__gethex+0x440>
 800b854:	6861      	ldr	r1, [r4, #4]
 800b856:	ee18 0a10 	vmov	r0, s16
 800b85a:	3101      	adds	r1, #1
 800b85c:	f000 f9a4 	bl	800bba8 <_Balloc>
 800b860:	4681      	mov	r9, r0
 800b862:	b918      	cbnz	r0, 800b86c <__gethex+0x424>
 800b864:	4b1a      	ldr	r3, [pc, #104]	; (800b8d0 <__gethex+0x488>)
 800b866:	4602      	mov	r2, r0
 800b868:	2184      	movs	r1, #132	; 0x84
 800b86a:	e6a8      	b.n	800b5be <__gethex+0x176>
 800b86c:	6922      	ldr	r2, [r4, #16]
 800b86e:	3202      	adds	r2, #2
 800b870:	f104 010c 	add.w	r1, r4, #12
 800b874:	0092      	lsls	r2, r2, #2
 800b876:	300c      	adds	r0, #12
 800b878:	f000 f988 	bl	800bb8c <memcpy>
 800b87c:	4621      	mov	r1, r4
 800b87e:	ee18 0a10 	vmov	r0, s16
 800b882:	f000 f9d1 	bl	800bc28 <_Bfree>
 800b886:	464c      	mov	r4, r9
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	1c5a      	adds	r2, r3, #1
 800b88c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b890:	6122      	str	r2, [r4, #16]
 800b892:	2201      	movs	r2, #1
 800b894:	615a      	str	r2, [r3, #20]
 800b896:	e7bb      	b.n	800b810 <__gethex+0x3c8>
 800b898:	6922      	ldr	r2, [r4, #16]
 800b89a:	455a      	cmp	r2, fp
 800b89c:	dd0b      	ble.n	800b8b6 <__gethex+0x46e>
 800b89e:	2101      	movs	r1, #1
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f7ff fd6a 	bl	800b37a <rshift>
 800b8a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8aa:	3501      	adds	r5, #1
 800b8ac:	42ab      	cmp	r3, r5
 800b8ae:	f6ff aed0 	blt.w	800b652 <__gethex+0x20a>
 800b8b2:	2701      	movs	r7, #1
 800b8b4:	e7c0      	b.n	800b838 <__gethex+0x3f0>
 800b8b6:	f016 061f 	ands.w	r6, r6, #31
 800b8ba:	d0fa      	beq.n	800b8b2 <__gethex+0x46a>
 800b8bc:	4453      	add	r3, sl
 800b8be:	f1c6 0620 	rsb	r6, r6, #32
 800b8c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b8c6:	f000 fa61 	bl	800bd8c <__hi0bits>
 800b8ca:	42b0      	cmp	r0, r6
 800b8cc:	dbe7      	blt.n	800b89e <__gethex+0x456>
 800b8ce:	e7f0      	b.n	800b8b2 <__gethex+0x46a>
 800b8d0:	0800e920 	.word	0x0800e920

0800b8d4 <L_shift>:
 800b8d4:	f1c2 0208 	rsb	r2, r2, #8
 800b8d8:	0092      	lsls	r2, r2, #2
 800b8da:	b570      	push	{r4, r5, r6, lr}
 800b8dc:	f1c2 0620 	rsb	r6, r2, #32
 800b8e0:	6843      	ldr	r3, [r0, #4]
 800b8e2:	6804      	ldr	r4, [r0, #0]
 800b8e4:	fa03 f506 	lsl.w	r5, r3, r6
 800b8e8:	432c      	orrs	r4, r5
 800b8ea:	40d3      	lsrs	r3, r2
 800b8ec:	6004      	str	r4, [r0, #0]
 800b8ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800b8f2:	4288      	cmp	r0, r1
 800b8f4:	d3f4      	bcc.n	800b8e0 <L_shift+0xc>
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}

0800b8f8 <__match>:
 800b8f8:	b530      	push	{r4, r5, lr}
 800b8fa:	6803      	ldr	r3, [r0, #0]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b902:	b914      	cbnz	r4, 800b90a <__match+0x12>
 800b904:	6003      	str	r3, [r0, #0]
 800b906:	2001      	movs	r0, #1
 800b908:	bd30      	pop	{r4, r5, pc}
 800b90a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b90e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b912:	2d19      	cmp	r5, #25
 800b914:	bf98      	it	ls
 800b916:	3220      	addls	r2, #32
 800b918:	42a2      	cmp	r2, r4
 800b91a:	d0f0      	beq.n	800b8fe <__match+0x6>
 800b91c:	2000      	movs	r0, #0
 800b91e:	e7f3      	b.n	800b908 <__match+0x10>

0800b920 <__hexnan>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	680b      	ldr	r3, [r1, #0]
 800b926:	115e      	asrs	r6, r3, #5
 800b928:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b92c:	f013 031f 	ands.w	r3, r3, #31
 800b930:	b087      	sub	sp, #28
 800b932:	bf18      	it	ne
 800b934:	3604      	addne	r6, #4
 800b936:	2500      	movs	r5, #0
 800b938:	1f37      	subs	r7, r6, #4
 800b93a:	4690      	mov	r8, r2
 800b93c:	6802      	ldr	r2, [r0, #0]
 800b93e:	9301      	str	r3, [sp, #4]
 800b940:	4682      	mov	sl, r0
 800b942:	f846 5c04 	str.w	r5, [r6, #-4]
 800b946:	46b9      	mov	r9, r7
 800b948:	463c      	mov	r4, r7
 800b94a:	9502      	str	r5, [sp, #8]
 800b94c:	46ab      	mov	fp, r5
 800b94e:	7851      	ldrb	r1, [r2, #1]
 800b950:	1c53      	adds	r3, r2, #1
 800b952:	9303      	str	r3, [sp, #12]
 800b954:	b341      	cbz	r1, 800b9a8 <__hexnan+0x88>
 800b956:	4608      	mov	r0, r1
 800b958:	9205      	str	r2, [sp, #20]
 800b95a:	9104      	str	r1, [sp, #16]
 800b95c:	f7ff fd5f 	bl	800b41e <__hexdig_fun>
 800b960:	2800      	cmp	r0, #0
 800b962:	d14f      	bne.n	800ba04 <__hexnan+0xe4>
 800b964:	9904      	ldr	r1, [sp, #16]
 800b966:	9a05      	ldr	r2, [sp, #20]
 800b968:	2920      	cmp	r1, #32
 800b96a:	d818      	bhi.n	800b99e <__hexnan+0x7e>
 800b96c:	9b02      	ldr	r3, [sp, #8]
 800b96e:	459b      	cmp	fp, r3
 800b970:	dd13      	ble.n	800b99a <__hexnan+0x7a>
 800b972:	454c      	cmp	r4, r9
 800b974:	d206      	bcs.n	800b984 <__hexnan+0x64>
 800b976:	2d07      	cmp	r5, #7
 800b978:	dc04      	bgt.n	800b984 <__hexnan+0x64>
 800b97a:	462a      	mov	r2, r5
 800b97c:	4649      	mov	r1, r9
 800b97e:	4620      	mov	r0, r4
 800b980:	f7ff ffa8 	bl	800b8d4 <L_shift>
 800b984:	4544      	cmp	r4, r8
 800b986:	d950      	bls.n	800ba2a <__hexnan+0x10a>
 800b988:	2300      	movs	r3, #0
 800b98a:	f1a4 0904 	sub.w	r9, r4, #4
 800b98e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b992:	f8cd b008 	str.w	fp, [sp, #8]
 800b996:	464c      	mov	r4, r9
 800b998:	461d      	mov	r5, r3
 800b99a:	9a03      	ldr	r2, [sp, #12]
 800b99c:	e7d7      	b.n	800b94e <__hexnan+0x2e>
 800b99e:	2929      	cmp	r1, #41	; 0x29
 800b9a0:	d156      	bne.n	800ba50 <__hexnan+0x130>
 800b9a2:	3202      	adds	r2, #2
 800b9a4:	f8ca 2000 	str.w	r2, [sl]
 800b9a8:	f1bb 0f00 	cmp.w	fp, #0
 800b9ac:	d050      	beq.n	800ba50 <__hexnan+0x130>
 800b9ae:	454c      	cmp	r4, r9
 800b9b0:	d206      	bcs.n	800b9c0 <__hexnan+0xa0>
 800b9b2:	2d07      	cmp	r5, #7
 800b9b4:	dc04      	bgt.n	800b9c0 <__hexnan+0xa0>
 800b9b6:	462a      	mov	r2, r5
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f7ff ff8a 	bl	800b8d4 <L_shift>
 800b9c0:	4544      	cmp	r4, r8
 800b9c2:	d934      	bls.n	800ba2e <__hexnan+0x10e>
 800b9c4:	f1a8 0204 	sub.w	r2, r8, #4
 800b9c8:	4623      	mov	r3, r4
 800b9ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800b9ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800b9d2:	429f      	cmp	r7, r3
 800b9d4:	d2f9      	bcs.n	800b9ca <__hexnan+0xaa>
 800b9d6:	1b3b      	subs	r3, r7, r4
 800b9d8:	f023 0303 	bic.w	r3, r3, #3
 800b9dc:	3304      	adds	r3, #4
 800b9de:	3401      	adds	r4, #1
 800b9e0:	3e03      	subs	r6, #3
 800b9e2:	42b4      	cmp	r4, r6
 800b9e4:	bf88      	it	hi
 800b9e6:	2304      	movhi	r3, #4
 800b9e8:	4443      	add	r3, r8
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f843 2b04 	str.w	r2, [r3], #4
 800b9f0:	429f      	cmp	r7, r3
 800b9f2:	d2fb      	bcs.n	800b9ec <__hexnan+0xcc>
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	b91b      	cbnz	r3, 800ba00 <__hexnan+0xe0>
 800b9f8:	4547      	cmp	r7, r8
 800b9fa:	d127      	bne.n	800ba4c <__hexnan+0x12c>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	603b      	str	r3, [r7, #0]
 800ba00:	2005      	movs	r0, #5
 800ba02:	e026      	b.n	800ba52 <__hexnan+0x132>
 800ba04:	3501      	adds	r5, #1
 800ba06:	2d08      	cmp	r5, #8
 800ba08:	f10b 0b01 	add.w	fp, fp, #1
 800ba0c:	dd06      	ble.n	800ba1c <__hexnan+0xfc>
 800ba0e:	4544      	cmp	r4, r8
 800ba10:	d9c3      	bls.n	800b99a <__hexnan+0x7a>
 800ba12:	2300      	movs	r3, #0
 800ba14:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba18:	2501      	movs	r5, #1
 800ba1a:	3c04      	subs	r4, #4
 800ba1c:	6822      	ldr	r2, [r4, #0]
 800ba1e:	f000 000f 	and.w	r0, r0, #15
 800ba22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ba26:	6022      	str	r2, [r4, #0]
 800ba28:	e7b7      	b.n	800b99a <__hexnan+0x7a>
 800ba2a:	2508      	movs	r5, #8
 800ba2c:	e7b5      	b.n	800b99a <__hexnan+0x7a>
 800ba2e:	9b01      	ldr	r3, [sp, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d0df      	beq.n	800b9f4 <__hexnan+0xd4>
 800ba34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba38:	f1c3 0320 	rsb	r3, r3, #32
 800ba3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ba44:	401a      	ands	r2, r3
 800ba46:	f846 2c04 	str.w	r2, [r6, #-4]
 800ba4a:	e7d3      	b.n	800b9f4 <__hexnan+0xd4>
 800ba4c:	3f04      	subs	r7, #4
 800ba4e:	e7d1      	b.n	800b9f4 <__hexnan+0xd4>
 800ba50:	2004      	movs	r0, #4
 800ba52:	b007      	add	sp, #28
 800ba54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba58 <_localeconv_r>:
 800ba58:	4800      	ldr	r0, [pc, #0]	; (800ba5c <_localeconv_r+0x4>)
 800ba5a:	4770      	bx	lr
 800ba5c:	2000017c 	.word	0x2000017c

0800ba60 <__retarget_lock_init_recursive>:
 800ba60:	4770      	bx	lr

0800ba62 <__retarget_lock_acquire_recursive>:
 800ba62:	4770      	bx	lr

0800ba64 <__retarget_lock_release_recursive>:
 800ba64:	4770      	bx	lr
	...

0800ba68 <_lseek_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4d07      	ldr	r5, [pc, #28]	; (800ba88 <_lseek_r+0x20>)
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	4608      	mov	r0, r1
 800ba70:	4611      	mov	r1, r2
 800ba72:	2200      	movs	r2, #0
 800ba74:	602a      	str	r2, [r5, #0]
 800ba76:	461a      	mov	r2, r3
 800ba78:	f7f5 ffee 	bl	8001a58 <_lseek>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d102      	bne.n	800ba86 <_lseek_r+0x1e>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	b103      	cbz	r3, 800ba86 <_lseek_r+0x1e>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	20000464 	.word	0x20000464

0800ba8c <__swhatbuf_r>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	460e      	mov	r6, r1
 800ba90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba94:	2900      	cmp	r1, #0
 800ba96:	b096      	sub	sp, #88	; 0x58
 800ba98:	4614      	mov	r4, r2
 800ba9a:	461d      	mov	r5, r3
 800ba9c:	da08      	bge.n	800bab0 <__swhatbuf_r+0x24>
 800ba9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	602a      	str	r2, [r5, #0]
 800baa6:	061a      	lsls	r2, r3, #24
 800baa8:	d410      	bmi.n	800bacc <__swhatbuf_r+0x40>
 800baaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baae:	e00e      	b.n	800bace <__swhatbuf_r+0x42>
 800bab0:	466a      	mov	r2, sp
 800bab2:	f001 fc15 	bl	800d2e0 <_fstat_r>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	dbf1      	blt.n	800ba9e <__swhatbuf_r+0x12>
 800baba:	9a01      	ldr	r2, [sp, #4]
 800babc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bac0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bac4:	425a      	negs	r2, r3
 800bac6:	415a      	adcs	r2, r3
 800bac8:	602a      	str	r2, [r5, #0]
 800baca:	e7ee      	b.n	800baaa <__swhatbuf_r+0x1e>
 800bacc:	2340      	movs	r3, #64	; 0x40
 800bace:	2000      	movs	r0, #0
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	b016      	add	sp, #88	; 0x58
 800bad4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bad8 <__smakebuf_r>:
 800bad8:	898b      	ldrh	r3, [r1, #12]
 800bada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800badc:	079d      	lsls	r5, r3, #30
 800bade:	4606      	mov	r6, r0
 800bae0:	460c      	mov	r4, r1
 800bae2:	d507      	bpl.n	800baf4 <__smakebuf_r+0x1c>
 800bae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	6123      	str	r3, [r4, #16]
 800baec:	2301      	movs	r3, #1
 800baee:	6163      	str	r3, [r4, #20]
 800baf0:	b002      	add	sp, #8
 800baf2:	bd70      	pop	{r4, r5, r6, pc}
 800baf4:	ab01      	add	r3, sp, #4
 800baf6:	466a      	mov	r2, sp
 800baf8:	f7ff ffc8 	bl	800ba8c <__swhatbuf_r>
 800bafc:	9900      	ldr	r1, [sp, #0]
 800bafe:	4605      	mov	r5, r0
 800bb00:	4630      	mov	r0, r6
 800bb02:	f000 fd95 	bl	800c630 <_malloc_r>
 800bb06:	b948      	cbnz	r0, 800bb1c <__smakebuf_r+0x44>
 800bb08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb0c:	059a      	lsls	r2, r3, #22
 800bb0e:	d4ef      	bmi.n	800baf0 <__smakebuf_r+0x18>
 800bb10:	f023 0303 	bic.w	r3, r3, #3
 800bb14:	f043 0302 	orr.w	r3, r3, #2
 800bb18:	81a3      	strh	r3, [r4, #12]
 800bb1a:	e7e3      	b.n	800bae4 <__smakebuf_r+0xc>
 800bb1c:	4b0d      	ldr	r3, [pc, #52]	; (800bb54 <__smakebuf_r+0x7c>)
 800bb1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb20:	89a3      	ldrh	r3, [r4, #12]
 800bb22:	6020      	str	r0, [r4, #0]
 800bb24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb28:	81a3      	strh	r3, [r4, #12]
 800bb2a:	9b00      	ldr	r3, [sp, #0]
 800bb2c:	6163      	str	r3, [r4, #20]
 800bb2e:	9b01      	ldr	r3, [sp, #4]
 800bb30:	6120      	str	r0, [r4, #16]
 800bb32:	b15b      	cbz	r3, 800bb4c <__smakebuf_r+0x74>
 800bb34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f001 fbe3 	bl	800d304 <_isatty_r>
 800bb3e:	b128      	cbz	r0, 800bb4c <__smakebuf_r+0x74>
 800bb40:	89a3      	ldrh	r3, [r4, #12]
 800bb42:	f023 0303 	bic.w	r3, r3, #3
 800bb46:	f043 0301 	orr.w	r3, r3, #1
 800bb4a:	81a3      	strh	r3, [r4, #12]
 800bb4c:	89a0      	ldrh	r0, [r4, #12]
 800bb4e:	4305      	orrs	r5, r0
 800bb50:	81a5      	strh	r5, [r4, #12]
 800bb52:	e7cd      	b.n	800baf0 <__smakebuf_r+0x18>
 800bb54:	0800b1d9 	.word	0x0800b1d9

0800bb58 <malloc>:
 800bb58:	4b02      	ldr	r3, [pc, #8]	; (800bb64 <malloc+0xc>)
 800bb5a:	4601      	mov	r1, r0
 800bb5c:	6818      	ldr	r0, [r3, #0]
 800bb5e:	f000 bd67 	b.w	800c630 <_malloc_r>
 800bb62:	bf00      	nop
 800bb64:	20000024 	.word	0x20000024

0800bb68 <__ascii_mbtowc>:
 800bb68:	b082      	sub	sp, #8
 800bb6a:	b901      	cbnz	r1, 800bb6e <__ascii_mbtowc+0x6>
 800bb6c:	a901      	add	r1, sp, #4
 800bb6e:	b142      	cbz	r2, 800bb82 <__ascii_mbtowc+0x1a>
 800bb70:	b14b      	cbz	r3, 800bb86 <__ascii_mbtowc+0x1e>
 800bb72:	7813      	ldrb	r3, [r2, #0]
 800bb74:	600b      	str	r3, [r1, #0]
 800bb76:	7812      	ldrb	r2, [r2, #0]
 800bb78:	1e10      	subs	r0, r2, #0
 800bb7a:	bf18      	it	ne
 800bb7c:	2001      	movne	r0, #1
 800bb7e:	b002      	add	sp, #8
 800bb80:	4770      	bx	lr
 800bb82:	4610      	mov	r0, r2
 800bb84:	e7fb      	b.n	800bb7e <__ascii_mbtowc+0x16>
 800bb86:	f06f 0001 	mvn.w	r0, #1
 800bb8a:	e7f8      	b.n	800bb7e <__ascii_mbtowc+0x16>

0800bb8c <memcpy>:
 800bb8c:	440a      	add	r2, r1
 800bb8e:	4291      	cmp	r1, r2
 800bb90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bb94:	d100      	bne.n	800bb98 <memcpy+0xc>
 800bb96:	4770      	bx	lr
 800bb98:	b510      	push	{r4, lr}
 800bb9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bba2:	4291      	cmp	r1, r2
 800bba4:	d1f9      	bne.n	800bb9a <memcpy+0xe>
 800bba6:	bd10      	pop	{r4, pc}

0800bba8 <_Balloc>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbac:	4604      	mov	r4, r0
 800bbae:	460d      	mov	r5, r1
 800bbb0:	b976      	cbnz	r6, 800bbd0 <_Balloc+0x28>
 800bbb2:	2010      	movs	r0, #16
 800bbb4:	f7ff ffd0 	bl	800bb58 <malloc>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	6260      	str	r0, [r4, #36]	; 0x24
 800bbbc:	b920      	cbnz	r0, 800bbc8 <_Balloc+0x20>
 800bbbe:	4b18      	ldr	r3, [pc, #96]	; (800bc20 <_Balloc+0x78>)
 800bbc0:	4818      	ldr	r0, [pc, #96]	; (800bc24 <_Balloc+0x7c>)
 800bbc2:	2166      	movs	r1, #102	; 0x66
 800bbc4:	f001 fb5c 	bl	800d280 <__assert_func>
 800bbc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbcc:	6006      	str	r6, [r0, #0]
 800bbce:	60c6      	str	r6, [r0, #12]
 800bbd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bbd2:	68f3      	ldr	r3, [r6, #12]
 800bbd4:	b183      	cbz	r3, 800bbf8 <_Balloc+0x50>
 800bbd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbde:	b9b8      	cbnz	r0, 800bc10 <_Balloc+0x68>
 800bbe0:	2101      	movs	r1, #1
 800bbe2:	fa01 f605 	lsl.w	r6, r1, r5
 800bbe6:	1d72      	adds	r2, r6, #5
 800bbe8:	0092      	lsls	r2, r2, #2
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 fc9d 	bl	800c52a <_calloc_r>
 800bbf0:	b160      	cbz	r0, 800bc0c <_Balloc+0x64>
 800bbf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbf6:	e00e      	b.n	800bc16 <_Balloc+0x6e>
 800bbf8:	2221      	movs	r2, #33	; 0x21
 800bbfa:	2104      	movs	r1, #4
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f000 fc94 	bl	800c52a <_calloc_r>
 800bc02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc04:	60f0      	str	r0, [r6, #12]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1e4      	bne.n	800bbd6 <_Balloc+0x2e>
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	bd70      	pop	{r4, r5, r6, pc}
 800bc10:	6802      	ldr	r2, [r0, #0]
 800bc12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc16:	2300      	movs	r3, #0
 800bc18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc1c:	e7f7      	b.n	800bc0e <_Balloc+0x66>
 800bc1e:	bf00      	nop
 800bc20:	0800e8ae 	.word	0x0800e8ae
 800bc24:	0800ea10 	.word	0x0800ea10

0800bc28 <_Bfree>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc2c:	4605      	mov	r5, r0
 800bc2e:	460c      	mov	r4, r1
 800bc30:	b976      	cbnz	r6, 800bc50 <_Bfree+0x28>
 800bc32:	2010      	movs	r0, #16
 800bc34:	f7ff ff90 	bl	800bb58 <malloc>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	6268      	str	r0, [r5, #36]	; 0x24
 800bc3c:	b920      	cbnz	r0, 800bc48 <_Bfree+0x20>
 800bc3e:	4b09      	ldr	r3, [pc, #36]	; (800bc64 <_Bfree+0x3c>)
 800bc40:	4809      	ldr	r0, [pc, #36]	; (800bc68 <_Bfree+0x40>)
 800bc42:	218a      	movs	r1, #138	; 0x8a
 800bc44:	f001 fb1c 	bl	800d280 <__assert_func>
 800bc48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc4c:	6006      	str	r6, [r0, #0]
 800bc4e:	60c6      	str	r6, [r0, #12]
 800bc50:	b13c      	cbz	r4, 800bc62 <_Bfree+0x3a>
 800bc52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc54:	6862      	ldr	r2, [r4, #4]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc5c:	6021      	str	r1, [r4, #0]
 800bc5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc62:	bd70      	pop	{r4, r5, r6, pc}
 800bc64:	0800e8ae 	.word	0x0800e8ae
 800bc68:	0800ea10 	.word	0x0800ea10

0800bc6c <__multadd>:
 800bc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc70:	690d      	ldr	r5, [r1, #16]
 800bc72:	4607      	mov	r7, r0
 800bc74:	460c      	mov	r4, r1
 800bc76:	461e      	mov	r6, r3
 800bc78:	f101 0c14 	add.w	ip, r1, #20
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	f8dc 3000 	ldr.w	r3, [ip]
 800bc82:	b299      	uxth	r1, r3
 800bc84:	fb02 6101 	mla	r1, r2, r1, r6
 800bc88:	0c1e      	lsrs	r6, r3, #16
 800bc8a:	0c0b      	lsrs	r3, r1, #16
 800bc8c:	fb02 3306 	mla	r3, r2, r6, r3
 800bc90:	b289      	uxth	r1, r1
 800bc92:	3001      	adds	r0, #1
 800bc94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc98:	4285      	cmp	r5, r0
 800bc9a:	f84c 1b04 	str.w	r1, [ip], #4
 800bc9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bca2:	dcec      	bgt.n	800bc7e <__multadd+0x12>
 800bca4:	b30e      	cbz	r6, 800bcea <__multadd+0x7e>
 800bca6:	68a3      	ldr	r3, [r4, #8]
 800bca8:	42ab      	cmp	r3, r5
 800bcaa:	dc19      	bgt.n	800bce0 <__multadd+0x74>
 800bcac:	6861      	ldr	r1, [r4, #4]
 800bcae:	4638      	mov	r0, r7
 800bcb0:	3101      	adds	r1, #1
 800bcb2:	f7ff ff79 	bl	800bba8 <_Balloc>
 800bcb6:	4680      	mov	r8, r0
 800bcb8:	b928      	cbnz	r0, 800bcc6 <__multadd+0x5a>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	4b0c      	ldr	r3, [pc, #48]	; (800bcf0 <__multadd+0x84>)
 800bcbe:	480d      	ldr	r0, [pc, #52]	; (800bcf4 <__multadd+0x88>)
 800bcc0:	21b5      	movs	r1, #181	; 0xb5
 800bcc2:	f001 fadd 	bl	800d280 <__assert_func>
 800bcc6:	6922      	ldr	r2, [r4, #16]
 800bcc8:	3202      	adds	r2, #2
 800bcca:	f104 010c 	add.w	r1, r4, #12
 800bcce:	0092      	lsls	r2, r2, #2
 800bcd0:	300c      	adds	r0, #12
 800bcd2:	f7ff ff5b 	bl	800bb8c <memcpy>
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	4638      	mov	r0, r7
 800bcda:	f7ff ffa5 	bl	800bc28 <_Bfree>
 800bcde:	4644      	mov	r4, r8
 800bce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bce4:	3501      	adds	r5, #1
 800bce6:	615e      	str	r6, [r3, #20]
 800bce8:	6125      	str	r5, [r4, #16]
 800bcea:	4620      	mov	r0, r4
 800bcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf0:	0800e920 	.word	0x0800e920
 800bcf4:	0800ea10 	.word	0x0800ea10

0800bcf8 <__s2b>:
 800bcf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcfc:	460c      	mov	r4, r1
 800bcfe:	4615      	mov	r5, r2
 800bd00:	461f      	mov	r7, r3
 800bd02:	2209      	movs	r2, #9
 800bd04:	3308      	adds	r3, #8
 800bd06:	4606      	mov	r6, r0
 800bd08:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	2201      	movs	r2, #1
 800bd10:	429a      	cmp	r2, r3
 800bd12:	db09      	blt.n	800bd28 <__s2b+0x30>
 800bd14:	4630      	mov	r0, r6
 800bd16:	f7ff ff47 	bl	800bba8 <_Balloc>
 800bd1a:	b940      	cbnz	r0, 800bd2e <__s2b+0x36>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	4b19      	ldr	r3, [pc, #100]	; (800bd84 <__s2b+0x8c>)
 800bd20:	4819      	ldr	r0, [pc, #100]	; (800bd88 <__s2b+0x90>)
 800bd22:	21ce      	movs	r1, #206	; 0xce
 800bd24:	f001 faac 	bl	800d280 <__assert_func>
 800bd28:	0052      	lsls	r2, r2, #1
 800bd2a:	3101      	adds	r1, #1
 800bd2c:	e7f0      	b.n	800bd10 <__s2b+0x18>
 800bd2e:	9b08      	ldr	r3, [sp, #32]
 800bd30:	6143      	str	r3, [r0, #20]
 800bd32:	2d09      	cmp	r5, #9
 800bd34:	f04f 0301 	mov.w	r3, #1
 800bd38:	6103      	str	r3, [r0, #16]
 800bd3a:	dd16      	ble.n	800bd6a <__s2b+0x72>
 800bd3c:	f104 0909 	add.w	r9, r4, #9
 800bd40:	46c8      	mov	r8, r9
 800bd42:	442c      	add	r4, r5
 800bd44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd48:	4601      	mov	r1, r0
 800bd4a:	3b30      	subs	r3, #48	; 0x30
 800bd4c:	220a      	movs	r2, #10
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f7ff ff8c 	bl	800bc6c <__multadd>
 800bd54:	45a0      	cmp	r8, r4
 800bd56:	d1f5      	bne.n	800bd44 <__s2b+0x4c>
 800bd58:	f1a5 0408 	sub.w	r4, r5, #8
 800bd5c:	444c      	add	r4, r9
 800bd5e:	1b2d      	subs	r5, r5, r4
 800bd60:	1963      	adds	r3, r4, r5
 800bd62:	42bb      	cmp	r3, r7
 800bd64:	db04      	blt.n	800bd70 <__s2b+0x78>
 800bd66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd6a:	340a      	adds	r4, #10
 800bd6c:	2509      	movs	r5, #9
 800bd6e:	e7f6      	b.n	800bd5e <__s2b+0x66>
 800bd70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd74:	4601      	mov	r1, r0
 800bd76:	3b30      	subs	r3, #48	; 0x30
 800bd78:	220a      	movs	r2, #10
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f7ff ff76 	bl	800bc6c <__multadd>
 800bd80:	e7ee      	b.n	800bd60 <__s2b+0x68>
 800bd82:	bf00      	nop
 800bd84:	0800e920 	.word	0x0800e920
 800bd88:	0800ea10 	.word	0x0800ea10

0800bd8c <__hi0bits>:
 800bd8c:	0c03      	lsrs	r3, r0, #16
 800bd8e:	041b      	lsls	r3, r3, #16
 800bd90:	b9d3      	cbnz	r3, 800bdc8 <__hi0bits+0x3c>
 800bd92:	0400      	lsls	r0, r0, #16
 800bd94:	2310      	movs	r3, #16
 800bd96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd9a:	bf04      	itt	eq
 800bd9c:	0200      	lsleq	r0, r0, #8
 800bd9e:	3308      	addeq	r3, #8
 800bda0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bda4:	bf04      	itt	eq
 800bda6:	0100      	lsleq	r0, r0, #4
 800bda8:	3304      	addeq	r3, #4
 800bdaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdae:	bf04      	itt	eq
 800bdb0:	0080      	lsleq	r0, r0, #2
 800bdb2:	3302      	addeq	r3, #2
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	db05      	blt.n	800bdc4 <__hi0bits+0x38>
 800bdb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bdbc:	f103 0301 	add.w	r3, r3, #1
 800bdc0:	bf08      	it	eq
 800bdc2:	2320      	moveq	r3, #32
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	4770      	bx	lr
 800bdc8:	2300      	movs	r3, #0
 800bdca:	e7e4      	b.n	800bd96 <__hi0bits+0xa>

0800bdcc <__lo0bits>:
 800bdcc:	6803      	ldr	r3, [r0, #0]
 800bdce:	f013 0207 	ands.w	r2, r3, #7
 800bdd2:	4601      	mov	r1, r0
 800bdd4:	d00b      	beq.n	800bdee <__lo0bits+0x22>
 800bdd6:	07da      	lsls	r2, r3, #31
 800bdd8:	d423      	bmi.n	800be22 <__lo0bits+0x56>
 800bdda:	0798      	lsls	r0, r3, #30
 800bddc:	bf49      	itett	mi
 800bdde:	085b      	lsrmi	r3, r3, #1
 800bde0:	089b      	lsrpl	r3, r3, #2
 800bde2:	2001      	movmi	r0, #1
 800bde4:	600b      	strmi	r3, [r1, #0]
 800bde6:	bf5c      	itt	pl
 800bde8:	600b      	strpl	r3, [r1, #0]
 800bdea:	2002      	movpl	r0, #2
 800bdec:	4770      	bx	lr
 800bdee:	b298      	uxth	r0, r3
 800bdf0:	b9a8      	cbnz	r0, 800be1e <__lo0bits+0x52>
 800bdf2:	0c1b      	lsrs	r3, r3, #16
 800bdf4:	2010      	movs	r0, #16
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	b90a      	cbnz	r2, 800bdfe <__lo0bits+0x32>
 800bdfa:	3008      	adds	r0, #8
 800bdfc:	0a1b      	lsrs	r3, r3, #8
 800bdfe:	071a      	lsls	r2, r3, #28
 800be00:	bf04      	itt	eq
 800be02:	091b      	lsreq	r3, r3, #4
 800be04:	3004      	addeq	r0, #4
 800be06:	079a      	lsls	r2, r3, #30
 800be08:	bf04      	itt	eq
 800be0a:	089b      	lsreq	r3, r3, #2
 800be0c:	3002      	addeq	r0, #2
 800be0e:	07da      	lsls	r2, r3, #31
 800be10:	d403      	bmi.n	800be1a <__lo0bits+0x4e>
 800be12:	085b      	lsrs	r3, r3, #1
 800be14:	f100 0001 	add.w	r0, r0, #1
 800be18:	d005      	beq.n	800be26 <__lo0bits+0x5a>
 800be1a:	600b      	str	r3, [r1, #0]
 800be1c:	4770      	bx	lr
 800be1e:	4610      	mov	r0, r2
 800be20:	e7e9      	b.n	800bdf6 <__lo0bits+0x2a>
 800be22:	2000      	movs	r0, #0
 800be24:	4770      	bx	lr
 800be26:	2020      	movs	r0, #32
 800be28:	4770      	bx	lr
	...

0800be2c <__i2b>:
 800be2c:	b510      	push	{r4, lr}
 800be2e:	460c      	mov	r4, r1
 800be30:	2101      	movs	r1, #1
 800be32:	f7ff feb9 	bl	800bba8 <_Balloc>
 800be36:	4602      	mov	r2, r0
 800be38:	b928      	cbnz	r0, 800be46 <__i2b+0x1a>
 800be3a:	4b05      	ldr	r3, [pc, #20]	; (800be50 <__i2b+0x24>)
 800be3c:	4805      	ldr	r0, [pc, #20]	; (800be54 <__i2b+0x28>)
 800be3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be42:	f001 fa1d 	bl	800d280 <__assert_func>
 800be46:	2301      	movs	r3, #1
 800be48:	6144      	str	r4, [r0, #20]
 800be4a:	6103      	str	r3, [r0, #16]
 800be4c:	bd10      	pop	{r4, pc}
 800be4e:	bf00      	nop
 800be50:	0800e920 	.word	0x0800e920
 800be54:	0800ea10 	.word	0x0800ea10

0800be58 <__multiply>:
 800be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	4691      	mov	r9, r2
 800be5e:	690a      	ldr	r2, [r1, #16]
 800be60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be64:	429a      	cmp	r2, r3
 800be66:	bfb8      	it	lt
 800be68:	460b      	movlt	r3, r1
 800be6a:	460c      	mov	r4, r1
 800be6c:	bfbc      	itt	lt
 800be6e:	464c      	movlt	r4, r9
 800be70:	4699      	movlt	r9, r3
 800be72:	6927      	ldr	r7, [r4, #16]
 800be74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be78:	68a3      	ldr	r3, [r4, #8]
 800be7a:	6861      	ldr	r1, [r4, #4]
 800be7c:	eb07 060a 	add.w	r6, r7, sl
 800be80:	42b3      	cmp	r3, r6
 800be82:	b085      	sub	sp, #20
 800be84:	bfb8      	it	lt
 800be86:	3101      	addlt	r1, #1
 800be88:	f7ff fe8e 	bl	800bba8 <_Balloc>
 800be8c:	b930      	cbnz	r0, 800be9c <__multiply+0x44>
 800be8e:	4602      	mov	r2, r0
 800be90:	4b44      	ldr	r3, [pc, #272]	; (800bfa4 <__multiply+0x14c>)
 800be92:	4845      	ldr	r0, [pc, #276]	; (800bfa8 <__multiply+0x150>)
 800be94:	f240 115d 	movw	r1, #349	; 0x15d
 800be98:	f001 f9f2 	bl	800d280 <__assert_func>
 800be9c:	f100 0514 	add.w	r5, r0, #20
 800bea0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bea4:	462b      	mov	r3, r5
 800bea6:	2200      	movs	r2, #0
 800bea8:	4543      	cmp	r3, r8
 800beaa:	d321      	bcc.n	800bef0 <__multiply+0x98>
 800beac:	f104 0314 	add.w	r3, r4, #20
 800beb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800beb4:	f109 0314 	add.w	r3, r9, #20
 800beb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bebc:	9202      	str	r2, [sp, #8]
 800bebe:	1b3a      	subs	r2, r7, r4
 800bec0:	3a15      	subs	r2, #21
 800bec2:	f022 0203 	bic.w	r2, r2, #3
 800bec6:	3204      	adds	r2, #4
 800bec8:	f104 0115 	add.w	r1, r4, #21
 800becc:	428f      	cmp	r7, r1
 800bece:	bf38      	it	cc
 800bed0:	2204      	movcc	r2, #4
 800bed2:	9201      	str	r2, [sp, #4]
 800bed4:	9a02      	ldr	r2, [sp, #8]
 800bed6:	9303      	str	r3, [sp, #12]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d80c      	bhi.n	800bef6 <__multiply+0x9e>
 800bedc:	2e00      	cmp	r6, #0
 800bede:	dd03      	ble.n	800bee8 <__multiply+0x90>
 800bee0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d05a      	beq.n	800bf9e <__multiply+0x146>
 800bee8:	6106      	str	r6, [r0, #16]
 800beea:	b005      	add	sp, #20
 800beec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef0:	f843 2b04 	str.w	r2, [r3], #4
 800bef4:	e7d8      	b.n	800bea8 <__multiply+0x50>
 800bef6:	f8b3 a000 	ldrh.w	sl, [r3]
 800befa:	f1ba 0f00 	cmp.w	sl, #0
 800befe:	d024      	beq.n	800bf4a <__multiply+0xf2>
 800bf00:	f104 0e14 	add.w	lr, r4, #20
 800bf04:	46a9      	mov	r9, r5
 800bf06:	f04f 0c00 	mov.w	ip, #0
 800bf0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf0e:	f8d9 1000 	ldr.w	r1, [r9]
 800bf12:	fa1f fb82 	uxth.w	fp, r2
 800bf16:	b289      	uxth	r1, r1
 800bf18:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf20:	f8d9 2000 	ldr.w	r2, [r9]
 800bf24:	4461      	add	r1, ip
 800bf26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf2a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf32:	b289      	uxth	r1, r1
 800bf34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf38:	4577      	cmp	r7, lr
 800bf3a:	f849 1b04 	str.w	r1, [r9], #4
 800bf3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf42:	d8e2      	bhi.n	800bf0a <__multiply+0xb2>
 800bf44:	9a01      	ldr	r2, [sp, #4]
 800bf46:	f845 c002 	str.w	ip, [r5, r2]
 800bf4a:	9a03      	ldr	r2, [sp, #12]
 800bf4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf50:	3304      	adds	r3, #4
 800bf52:	f1b9 0f00 	cmp.w	r9, #0
 800bf56:	d020      	beq.n	800bf9a <__multiply+0x142>
 800bf58:	6829      	ldr	r1, [r5, #0]
 800bf5a:	f104 0c14 	add.w	ip, r4, #20
 800bf5e:	46ae      	mov	lr, r5
 800bf60:	f04f 0a00 	mov.w	sl, #0
 800bf64:	f8bc b000 	ldrh.w	fp, [ip]
 800bf68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf6c:	fb09 220b 	mla	r2, r9, fp, r2
 800bf70:	4492      	add	sl, r2
 800bf72:	b289      	uxth	r1, r1
 800bf74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bf78:	f84e 1b04 	str.w	r1, [lr], #4
 800bf7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf80:	f8be 1000 	ldrh.w	r1, [lr]
 800bf84:	0c12      	lsrs	r2, r2, #16
 800bf86:	fb09 1102 	mla	r1, r9, r2, r1
 800bf8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bf8e:	4567      	cmp	r7, ip
 800bf90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf94:	d8e6      	bhi.n	800bf64 <__multiply+0x10c>
 800bf96:	9a01      	ldr	r2, [sp, #4]
 800bf98:	50a9      	str	r1, [r5, r2]
 800bf9a:	3504      	adds	r5, #4
 800bf9c:	e79a      	b.n	800bed4 <__multiply+0x7c>
 800bf9e:	3e01      	subs	r6, #1
 800bfa0:	e79c      	b.n	800bedc <__multiply+0x84>
 800bfa2:	bf00      	nop
 800bfa4:	0800e920 	.word	0x0800e920
 800bfa8:	0800ea10 	.word	0x0800ea10

0800bfac <__pow5mult>:
 800bfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb0:	4615      	mov	r5, r2
 800bfb2:	f012 0203 	ands.w	r2, r2, #3
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	460f      	mov	r7, r1
 800bfba:	d007      	beq.n	800bfcc <__pow5mult+0x20>
 800bfbc:	4c25      	ldr	r4, [pc, #148]	; (800c054 <__pow5mult+0xa8>)
 800bfbe:	3a01      	subs	r2, #1
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfc6:	f7ff fe51 	bl	800bc6c <__multadd>
 800bfca:	4607      	mov	r7, r0
 800bfcc:	10ad      	asrs	r5, r5, #2
 800bfce:	d03d      	beq.n	800c04c <__pow5mult+0xa0>
 800bfd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bfd2:	b97c      	cbnz	r4, 800bff4 <__pow5mult+0x48>
 800bfd4:	2010      	movs	r0, #16
 800bfd6:	f7ff fdbf 	bl	800bb58 <malloc>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	6270      	str	r0, [r6, #36]	; 0x24
 800bfde:	b928      	cbnz	r0, 800bfec <__pow5mult+0x40>
 800bfe0:	4b1d      	ldr	r3, [pc, #116]	; (800c058 <__pow5mult+0xac>)
 800bfe2:	481e      	ldr	r0, [pc, #120]	; (800c05c <__pow5mult+0xb0>)
 800bfe4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bfe8:	f001 f94a 	bl	800d280 <__assert_func>
 800bfec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bff0:	6004      	str	r4, [r0, #0]
 800bff2:	60c4      	str	r4, [r0, #12]
 800bff4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bffc:	b94c      	cbnz	r4, 800c012 <__pow5mult+0x66>
 800bffe:	f240 2171 	movw	r1, #625	; 0x271
 800c002:	4630      	mov	r0, r6
 800c004:	f7ff ff12 	bl	800be2c <__i2b>
 800c008:	2300      	movs	r3, #0
 800c00a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c00e:	4604      	mov	r4, r0
 800c010:	6003      	str	r3, [r0, #0]
 800c012:	f04f 0900 	mov.w	r9, #0
 800c016:	07eb      	lsls	r3, r5, #31
 800c018:	d50a      	bpl.n	800c030 <__pow5mult+0x84>
 800c01a:	4639      	mov	r1, r7
 800c01c:	4622      	mov	r2, r4
 800c01e:	4630      	mov	r0, r6
 800c020:	f7ff ff1a 	bl	800be58 <__multiply>
 800c024:	4639      	mov	r1, r7
 800c026:	4680      	mov	r8, r0
 800c028:	4630      	mov	r0, r6
 800c02a:	f7ff fdfd 	bl	800bc28 <_Bfree>
 800c02e:	4647      	mov	r7, r8
 800c030:	106d      	asrs	r5, r5, #1
 800c032:	d00b      	beq.n	800c04c <__pow5mult+0xa0>
 800c034:	6820      	ldr	r0, [r4, #0]
 800c036:	b938      	cbnz	r0, 800c048 <__pow5mult+0x9c>
 800c038:	4622      	mov	r2, r4
 800c03a:	4621      	mov	r1, r4
 800c03c:	4630      	mov	r0, r6
 800c03e:	f7ff ff0b 	bl	800be58 <__multiply>
 800c042:	6020      	str	r0, [r4, #0]
 800c044:	f8c0 9000 	str.w	r9, [r0]
 800c048:	4604      	mov	r4, r0
 800c04a:	e7e4      	b.n	800c016 <__pow5mult+0x6a>
 800c04c:	4638      	mov	r0, r7
 800c04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c052:	bf00      	nop
 800c054:	0800eb60 	.word	0x0800eb60
 800c058:	0800e8ae 	.word	0x0800e8ae
 800c05c:	0800ea10 	.word	0x0800ea10

0800c060 <__lshift>:
 800c060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c064:	460c      	mov	r4, r1
 800c066:	6849      	ldr	r1, [r1, #4]
 800c068:	6923      	ldr	r3, [r4, #16]
 800c06a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c06e:	68a3      	ldr	r3, [r4, #8]
 800c070:	4607      	mov	r7, r0
 800c072:	4691      	mov	r9, r2
 800c074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c078:	f108 0601 	add.w	r6, r8, #1
 800c07c:	42b3      	cmp	r3, r6
 800c07e:	db0b      	blt.n	800c098 <__lshift+0x38>
 800c080:	4638      	mov	r0, r7
 800c082:	f7ff fd91 	bl	800bba8 <_Balloc>
 800c086:	4605      	mov	r5, r0
 800c088:	b948      	cbnz	r0, 800c09e <__lshift+0x3e>
 800c08a:	4602      	mov	r2, r0
 800c08c:	4b2a      	ldr	r3, [pc, #168]	; (800c138 <__lshift+0xd8>)
 800c08e:	482b      	ldr	r0, [pc, #172]	; (800c13c <__lshift+0xdc>)
 800c090:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c094:	f001 f8f4 	bl	800d280 <__assert_func>
 800c098:	3101      	adds	r1, #1
 800c09a:	005b      	lsls	r3, r3, #1
 800c09c:	e7ee      	b.n	800c07c <__lshift+0x1c>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f100 0114 	add.w	r1, r0, #20
 800c0a4:	f100 0210 	add.w	r2, r0, #16
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	4553      	cmp	r3, sl
 800c0ac:	db37      	blt.n	800c11e <__lshift+0xbe>
 800c0ae:	6920      	ldr	r0, [r4, #16]
 800c0b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0b4:	f104 0314 	add.w	r3, r4, #20
 800c0b8:	f019 091f 	ands.w	r9, r9, #31
 800c0bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c0c4:	d02f      	beq.n	800c126 <__lshift+0xc6>
 800c0c6:	f1c9 0e20 	rsb	lr, r9, #32
 800c0ca:	468a      	mov	sl, r1
 800c0cc:	f04f 0c00 	mov.w	ip, #0
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	fa02 f209 	lsl.w	r2, r2, r9
 800c0d6:	ea42 020c 	orr.w	r2, r2, ip
 800c0da:	f84a 2b04 	str.w	r2, [sl], #4
 800c0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e2:	4298      	cmp	r0, r3
 800c0e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c0e8:	d8f2      	bhi.n	800c0d0 <__lshift+0x70>
 800c0ea:	1b03      	subs	r3, r0, r4
 800c0ec:	3b15      	subs	r3, #21
 800c0ee:	f023 0303 	bic.w	r3, r3, #3
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	f104 0215 	add.w	r2, r4, #21
 800c0f8:	4290      	cmp	r0, r2
 800c0fa:	bf38      	it	cc
 800c0fc:	2304      	movcc	r3, #4
 800c0fe:	f841 c003 	str.w	ip, [r1, r3]
 800c102:	f1bc 0f00 	cmp.w	ip, #0
 800c106:	d001      	beq.n	800c10c <__lshift+0xac>
 800c108:	f108 0602 	add.w	r6, r8, #2
 800c10c:	3e01      	subs	r6, #1
 800c10e:	4638      	mov	r0, r7
 800c110:	612e      	str	r6, [r5, #16]
 800c112:	4621      	mov	r1, r4
 800c114:	f7ff fd88 	bl	800bc28 <_Bfree>
 800c118:	4628      	mov	r0, r5
 800c11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c122:	3301      	adds	r3, #1
 800c124:	e7c1      	b.n	800c0aa <__lshift+0x4a>
 800c126:	3904      	subs	r1, #4
 800c128:	f853 2b04 	ldr.w	r2, [r3], #4
 800c12c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c130:	4298      	cmp	r0, r3
 800c132:	d8f9      	bhi.n	800c128 <__lshift+0xc8>
 800c134:	e7ea      	b.n	800c10c <__lshift+0xac>
 800c136:	bf00      	nop
 800c138:	0800e920 	.word	0x0800e920
 800c13c:	0800ea10 	.word	0x0800ea10

0800c140 <__mcmp>:
 800c140:	b530      	push	{r4, r5, lr}
 800c142:	6902      	ldr	r2, [r0, #16]
 800c144:	690c      	ldr	r4, [r1, #16]
 800c146:	1b12      	subs	r2, r2, r4
 800c148:	d10e      	bne.n	800c168 <__mcmp+0x28>
 800c14a:	f100 0314 	add.w	r3, r0, #20
 800c14e:	3114      	adds	r1, #20
 800c150:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c154:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c158:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c15c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c160:	42a5      	cmp	r5, r4
 800c162:	d003      	beq.n	800c16c <__mcmp+0x2c>
 800c164:	d305      	bcc.n	800c172 <__mcmp+0x32>
 800c166:	2201      	movs	r2, #1
 800c168:	4610      	mov	r0, r2
 800c16a:	bd30      	pop	{r4, r5, pc}
 800c16c:	4283      	cmp	r3, r0
 800c16e:	d3f3      	bcc.n	800c158 <__mcmp+0x18>
 800c170:	e7fa      	b.n	800c168 <__mcmp+0x28>
 800c172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c176:	e7f7      	b.n	800c168 <__mcmp+0x28>

0800c178 <__mdiff>:
 800c178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17c:	460c      	mov	r4, r1
 800c17e:	4606      	mov	r6, r0
 800c180:	4611      	mov	r1, r2
 800c182:	4620      	mov	r0, r4
 800c184:	4690      	mov	r8, r2
 800c186:	f7ff ffdb 	bl	800c140 <__mcmp>
 800c18a:	1e05      	subs	r5, r0, #0
 800c18c:	d110      	bne.n	800c1b0 <__mdiff+0x38>
 800c18e:	4629      	mov	r1, r5
 800c190:	4630      	mov	r0, r6
 800c192:	f7ff fd09 	bl	800bba8 <_Balloc>
 800c196:	b930      	cbnz	r0, 800c1a6 <__mdiff+0x2e>
 800c198:	4b3a      	ldr	r3, [pc, #232]	; (800c284 <__mdiff+0x10c>)
 800c19a:	4602      	mov	r2, r0
 800c19c:	f240 2132 	movw	r1, #562	; 0x232
 800c1a0:	4839      	ldr	r0, [pc, #228]	; (800c288 <__mdiff+0x110>)
 800c1a2:	f001 f86d 	bl	800d280 <__assert_func>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b0:	bfa4      	itt	ge
 800c1b2:	4643      	movge	r3, r8
 800c1b4:	46a0      	movge	r8, r4
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1bc:	bfa6      	itte	ge
 800c1be:	461c      	movge	r4, r3
 800c1c0:	2500      	movge	r5, #0
 800c1c2:	2501      	movlt	r5, #1
 800c1c4:	f7ff fcf0 	bl	800bba8 <_Balloc>
 800c1c8:	b920      	cbnz	r0, 800c1d4 <__mdiff+0x5c>
 800c1ca:	4b2e      	ldr	r3, [pc, #184]	; (800c284 <__mdiff+0x10c>)
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c1d2:	e7e5      	b.n	800c1a0 <__mdiff+0x28>
 800c1d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1d8:	6926      	ldr	r6, [r4, #16]
 800c1da:	60c5      	str	r5, [r0, #12]
 800c1dc:	f104 0914 	add.w	r9, r4, #20
 800c1e0:	f108 0514 	add.w	r5, r8, #20
 800c1e4:	f100 0e14 	add.w	lr, r0, #20
 800c1e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c1ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c1f0:	f108 0210 	add.w	r2, r8, #16
 800c1f4:	46f2      	mov	sl, lr
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c200:	fa1f f883 	uxth.w	r8, r3
 800c204:	fa11 f18b 	uxtah	r1, r1, fp
 800c208:	0c1b      	lsrs	r3, r3, #16
 800c20a:	eba1 0808 	sub.w	r8, r1, r8
 800c20e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c212:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c216:	fa1f f888 	uxth.w	r8, r8
 800c21a:	1419      	asrs	r1, r3, #16
 800c21c:	454e      	cmp	r6, r9
 800c21e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c222:	f84a 3b04 	str.w	r3, [sl], #4
 800c226:	d8e7      	bhi.n	800c1f8 <__mdiff+0x80>
 800c228:	1b33      	subs	r3, r6, r4
 800c22a:	3b15      	subs	r3, #21
 800c22c:	f023 0303 	bic.w	r3, r3, #3
 800c230:	3304      	adds	r3, #4
 800c232:	3415      	adds	r4, #21
 800c234:	42a6      	cmp	r6, r4
 800c236:	bf38      	it	cc
 800c238:	2304      	movcc	r3, #4
 800c23a:	441d      	add	r5, r3
 800c23c:	4473      	add	r3, lr
 800c23e:	469e      	mov	lr, r3
 800c240:	462e      	mov	r6, r5
 800c242:	4566      	cmp	r6, ip
 800c244:	d30e      	bcc.n	800c264 <__mdiff+0xec>
 800c246:	f10c 0203 	add.w	r2, ip, #3
 800c24a:	1b52      	subs	r2, r2, r5
 800c24c:	f022 0203 	bic.w	r2, r2, #3
 800c250:	3d03      	subs	r5, #3
 800c252:	45ac      	cmp	ip, r5
 800c254:	bf38      	it	cc
 800c256:	2200      	movcc	r2, #0
 800c258:	441a      	add	r2, r3
 800c25a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c25e:	b17b      	cbz	r3, 800c280 <__mdiff+0x108>
 800c260:	6107      	str	r7, [r0, #16]
 800c262:	e7a3      	b.n	800c1ac <__mdiff+0x34>
 800c264:	f856 8b04 	ldr.w	r8, [r6], #4
 800c268:	fa11 f288 	uxtah	r2, r1, r8
 800c26c:	1414      	asrs	r4, r2, #16
 800c26e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c272:	b292      	uxth	r2, r2
 800c274:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c278:	f84e 2b04 	str.w	r2, [lr], #4
 800c27c:	1421      	asrs	r1, r4, #16
 800c27e:	e7e0      	b.n	800c242 <__mdiff+0xca>
 800c280:	3f01      	subs	r7, #1
 800c282:	e7ea      	b.n	800c25a <__mdiff+0xe2>
 800c284:	0800e920 	.word	0x0800e920
 800c288:	0800ea10 	.word	0x0800ea10

0800c28c <__ulp>:
 800c28c:	b082      	sub	sp, #8
 800c28e:	ed8d 0b00 	vstr	d0, [sp]
 800c292:	9b01      	ldr	r3, [sp, #4]
 800c294:	4912      	ldr	r1, [pc, #72]	; (800c2e0 <__ulp+0x54>)
 800c296:	4019      	ands	r1, r3
 800c298:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c29c:	2900      	cmp	r1, #0
 800c29e:	dd05      	ble.n	800c2ac <__ulp+0x20>
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	ec43 2b10 	vmov	d0, r2, r3
 800c2a8:	b002      	add	sp, #8
 800c2aa:	4770      	bx	lr
 800c2ac:	4249      	negs	r1, r1
 800c2ae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c2b2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c2b6:	f04f 0200 	mov.w	r2, #0
 800c2ba:	f04f 0300 	mov.w	r3, #0
 800c2be:	da04      	bge.n	800c2ca <__ulp+0x3e>
 800c2c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c2c4:	fa41 f300 	asr.w	r3, r1, r0
 800c2c8:	e7ec      	b.n	800c2a4 <__ulp+0x18>
 800c2ca:	f1a0 0114 	sub.w	r1, r0, #20
 800c2ce:	291e      	cmp	r1, #30
 800c2d0:	bfda      	itte	le
 800c2d2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c2d6:	fa20 f101 	lsrle.w	r1, r0, r1
 800c2da:	2101      	movgt	r1, #1
 800c2dc:	460a      	mov	r2, r1
 800c2de:	e7e1      	b.n	800c2a4 <__ulp+0x18>
 800c2e0:	7ff00000 	.word	0x7ff00000

0800c2e4 <__b2d>:
 800c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e6:	6905      	ldr	r5, [r0, #16]
 800c2e8:	f100 0714 	add.w	r7, r0, #20
 800c2ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c2f0:	1f2e      	subs	r6, r5, #4
 800c2f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f7ff fd48 	bl	800bd8c <__hi0bits>
 800c2fc:	f1c0 0320 	rsb	r3, r0, #32
 800c300:	280a      	cmp	r0, #10
 800c302:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c380 <__b2d+0x9c>
 800c306:	600b      	str	r3, [r1, #0]
 800c308:	dc14      	bgt.n	800c334 <__b2d+0x50>
 800c30a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c30e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c312:	42b7      	cmp	r7, r6
 800c314:	ea41 030c 	orr.w	r3, r1, ip
 800c318:	bf34      	ite	cc
 800c31a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c31e:	2100      	movcs	r1, #0
 800c320:	3015      	adds	r0, #21
 800c322:	fa04 f000 	lsl.w	r0, r4, r0
 800c326:	fa21 f10e 	lsr.w	r1, r1, lr
 800c32a:	ea40 0201 	orr.w	r2, r0, r1
 800c32e:	ec43 2b10 	vmov	d0, r2, r3
 800c332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c334:	42b7      	cmp	r7, r6
 800c336:	bf3a      	itte	cc
 800c338:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c33c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c340:	2100      	movcs	r1, #0
 800c342:	380b      	subs	r0, #11
 800c344:	d017      	beq.n	800c376 <__b2d+0x92>
 800c346:	f1c0 0c20 	rsb	ip, r0, #32
 800c34a:	fa04 f500 	lsl.w	r5, r4, r0
 800c34e:	42be      	cmp	r6, r7
 800c350:	fa21 f40c 	lsr.w	r4, r1, ip
 800c354:	ea45 0504 	orr.w	r5, r5, r4
 800c358:	bf8c      	ite	hi
 800c35a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c35e:	2400      	movls	r4, #0
 800c360:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c364:	fa01 f000 	lsl.w	r0, r1, r0
 800c368:	fa24 f40c 	lsr.w	r4, r4, ip
 800c36c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c370:	ea40 0204 	orr.w	r2, r0, r4
 800c374:	e7db      	b.n	800c32e <__b2d+0x4a>
 800c376:	ea44 030c 	orr.w	r3, r4, ip
 800c37a:	460a      	mov	r2, r1
 800c37c:	e7d7      	b.n	800c32e <__b2d+0x4a>
 800c37e:	bf00      	nop
 800c380:	3ff00000 	.word	0x3ff00000

0800c384 <__d2b>:
 800c384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c388:	4689      	mov	r9, r1
 800c38a:	2101      	movs	r1, #1
 800c38c:	ec57 6b10 	vmov	r6, r7, d0
 800c390:	4690      	mov	r8, r2
 800c392:	f7ff fc09 	bl	800bba8 <_Balloc>
 800c396:	4604      	mov	r4, r0
 800c398:	b930      	cbnz	r0, 800c3a8 <__d2b+0x24>
 800c39a:	4602      	mov	r2, r0
 800c39c:	4b25      	ldr	r3, [pc, #148]	; (800c434 <__d2b+0xb0>)
 800c39e:	4826      	ldr	r0, [pc, #152]	; (800c438 <__d2b+0xb4>)
 800c3a0:	f240 310a 	movw	r1, #778	; 0x30a
 800c3a4:	f000 ff6c 	bl	800d280 <__assert_func>
 800c3a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c3ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3b0:	bb35      	cbnz	r5, 800c400 <__d2b+0x7c>
 800c3b2:	2e00      	cmp	r6, #0
 800c3b4:	9301      	str	r3, [sp, #4]
 800c3b6:	d028      	beq.n	800c40a <__d2b+0x86>
 800c3b8:	4668      	mov	r0, sp
 800c3ba:	9600      	str	r6, [sp, #0]
 800c3bc:	f7ff fd06 	bl	800bdcc <__lo0bits>
 800c3c0:	9900      	ldr	r1, [sp, #0]
 800c3c2:	b300      	cbz	r0, 800c406 <__d2b+0x82>
 800c3c4:	9a01      	ldr	r2, [sp, #4]
 800c3c6:	f1c0 0320 	rsb	r3, r0, #32
 800c3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ce:	430b      	orrs	r3, r1
 800c3d0:	40c2      	lsrs	r2, r0
 800c3d2:	6163      	str	r3, [r4, #20]
 800c3d4:	9201      	str	r2, [sp, #4]
 800c3d6:	9b01      	ldr	r3, [sp, #4]
 800c3d8:	61a3      	str	r3, [r4, #24]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	bf14      	ite	ne
 800c3de:	2202      	movne	r2, #2
 800c3e0:	2201      	moveq	r2, #1
 800c3e2:	6122      	str	r2, [r4, #16]
 800c3e4:	b1d5      	cbz	r5, 800c41c <__d2b+0x98>
 800c3e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c3ea:	4405      	add	r5, r0
 800c3ec:	f8c9 5000 	str.w	r5, [r9]
 800c3f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3f4:	f8c8 0000 	str.w	r0, [r8]
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	b003      	add	sp, #12
 800c3fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c404:	e7d5      	b.n	800c3b2 <__d2b+0x2e>
 800c406:	6161      	str	r1, [r4, #20]
 800c408:	e7e5      	b.n	800c3d6 <__d2b+0x52>
 800c40a:	a801      	add	r0, sp, #4
 800c40c:	f7ff fcde 	bl	800bdcc <__lo0bits>
 800c410:	9b01      	ldr	r3, [sp, #4]
 800c412:	6163      	str	r3, [r4, #20]
 800c414:	2201      	movs	r2, #1
 800c416:	6122      	str	r2, [r4, #16]
 800c418:	3020      	adds	r0, #32
 800c41a:	e7e3      	b.n	800c3e4 <__d2b+0x60>
 800c41c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c420:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c424:	f8c9 0000 	str.w	r0, [r9]
 800c428:	6918      	ldr	r0, [r3, #16]
 800c42a:	f7ff fcaf 	bl	800bd8c <__hi0bits>
 800c42e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c432:	e7df      	b.n	800c3f4 <__d2b+0x70>
 800c434:	0800e920 	.word	0x0800e920
 800c438:	0800ea10 	.word	0x0800ea10

0800c43c <__ratio>:
 800c43c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c440:	4688      	mov	r8, r1
 800c442:	4669      	mov	r1, sp
 800c444:	4681      	mov	r9, r0
 800c446:	f7ff ff4d 	bl	800c2e4 <__b2d>
 800c44a:	a901      	add	r1, sp, #4
 800c44c:	4640      	mov	r0, r8
 800c44e:	ec55 4b10 	vmov	r4, r5, d0
 800c452:	f7ff ff47 	bl	800c2e4 <__b2d>
 800c456:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c45a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c45e:	eba3 0c02 	sub.w	ip, r3, r2
 800c462:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c466:	1a9b      	subs	r3, r3, r2
 800c468:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c46c:	ec51 0b10 	vmov	r0, r1, d0
 800c470:	2b00      	cmp	r3, #0
 800c472:	bfd6      	itet	le
 800c474:	460a      	movle	r2, r1
 800c476:	462a      	movgt	r2, r5
 800c478:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c47c:	468b      	mov	fp, r1
 800c47e:	462f      	mov	r7, r5
 800c480:	bfd4      	ite	le
 800c482:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c486:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c48a:	4620      	mov	r0, r4
 800c48c:	ee10 2a10 	vmov	r2, s0
 800c490:	465b      	mov	r3, fp
 800c492:	4639      	mov	r1, r7
 800c494:	f7f4 f9ea 	bl	800086c <__aeabi_ddiv>
 800c498:	ec41 0b10 	vmov	d0, r0, r1
 800c49c:	b003      	add	sp, #12
 800c49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4a2 <__copybits>:
 800c4a2:	3901      	subs	r1, #1
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	1149      	asrs	r1, r1, #5
 800c4a8:	6914      	ldr	r4, [r2, #16]
 800c4aa:	3101      	adds	r1, #1
 800c4ac:	f102 0314 	add.w	r3, r2, #20
 800c4b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c4b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c4b8:	1f05      	subs	r5, r0, #4
 800c4ba:	42a3      	cmp	r3, r4
 800c4bc:	d30c      	bcc.n	800c4d8 <__copybits+0x36>
 800c4be:	1aa3      	subs	r3, r4, r2
 800c4c0:	3b11      	subs	r3, #17
 800c4c2:	f023 0303 	bic.w	r3, r3, #3
 800c4c6:	3211      	adds	r2, #17
 800c4c8:	42a2      	cmp	r2, r4
 800c4ca:	bf88      	it	hi
 800c4cc:	2300      	movhi	r3, #0
 800c4ce:	4418      	add	r0, r3
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	4288      	cmp	r0, r1
 800c4d4:	d305      	bcc.n	800c4e2 <__copybits+0x40>
 800c4d6:	bd70      	pop	{r4, r5, r6, pc}
 800c4d8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c4dc:	f845 6f04 	str.w	r6, [r5, #4]!
 800c4e0:	e7eb      	b.n	800c4ba <__copybits+0x18>
 800c4e2:	f840 3b04 	str.w	r3, [r0], #4
 800c4e6:	e7f4      	b.n	800c4d2 <__copybits+0x30>

0800c4e8 <__any_on>:
 800c4e8:	f100 0214 	add.w	r2, r0, #20
 800c4ec:	6900      	ldr	r0, [r0, #16]
 800c4ee:	114b      	asrs	r3, r1, #5
 800c4f0:	4298      	cmp	r0, r3
 800c4f2:	b510      	push	{r4, lr}
 800c4f4:	db11      	blt.n	800c51a <__any_on+0x32>
 800c4f6:	dd0a      	ble.n	800c50e <__any_on+0x26>
 800c4f8:	f011 011f 	ands.w	r1, r1, #31
 800c4fc:	d007      	beq.n	800c50e <__any_on+0x26>
 800c4fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c502:	fa24 f001 	lsr.w	r0, r4, r1
 800c506:	fa00 f101 	lsl.w	r1, r0, r1
 800c50a:	428c      	cmp	r4, r1
 800c50c:	d10b      	bne.n	800c526 <__any_on+0x3e>
 800c50e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c512:	4293      	cmp	r3, r2
 800c514:	d803      	bhi.n	800c51e <__any_on+0x36>
 800c516:	2000      	movs	r0, #0
 800c518:	bd10      	pop	{r4, pc}
 800c51a:	4603      	mov	r3, r0
 800c51c:	e7f7      	b.n	800c50e <__any_on+0x26>
 800c51e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c522:	2900      	cmp	r1, #0
 800c524:	d0f5      	beq.n	800c512 <__any_on+0x2a>
 800c526:	2001      	movs	r0, #1
 800c528:	e7f6      	b.n	800c518 <__any_on+0x30>

0800c52a <_calloc_r>:
 800c52a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c52c:	fba1 2402 	umull	r2, r4, r1, r2
 800c530:	b94c      	cbnz	r4, 800c546 <_calloc_r+0x1c>
 800c532:	4611      	mov	r1, r2
 800c534:	9201      	str	r2, [sp, #4]
 800c536:	f000 f87b 	bl	800c630 <_malloc_r>
 800c53a:	9a01      	ldr	r2, [sp, #4]
 800c53c:	4605      	mov	r5, r0
 800c53e:	b930      	cbnz	r0, 800c54e <_calloc_r+0x24>
 800c540:	4628      	mov	r0, r5
 800c542:	b003      	add	sp, #12
 800c544:	bd30      	pop	{r4, r5, pc}
 800c546:	220c      	movs	r2, #12
 800c548:	6002      	str	r2, [r0, #0]
 800c54a:	2500      	movs	r5, #0
 800c54c:	e7f8      	b.n	800c540 <_calloc_r+0x16>
 800c54e:	4621      	mov	r1, r4
 800c550:	f7fb ffba 	bl	80084c8 <memset>
 800c554:	e7f4      	b.n	800c540 <_calloc_r+0x16>
	...

0800c558 <_free_r>:
 800c558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c55a:	2900      	cmp	r1, #0
 800c55c:	d044      	beq.n	800c5e8 <_free_r+0x90>
 800c55e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c562:	9001      	str	r0, [sp, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	f1a1 0404 	sub.w	r4, r1, #4
 800c56a:	bfb8      	it	lt
 800c56c:	18e4      	addlt	r4, r4, r3
 800c56e:	f000 fef3 	bl	800d358 <__malloc_lock>
 800c572:	4a1e      	ldr	r2, [pc, #120]	; (800c5ec <_free_r+0x94>)
 800c574:	9801      	ldr	r0, [sp, #4]
 800c576:	6813      	ldr	r3, [r2, #0]
 800c578:	b933      	cbnz	r3, 800c588 <_free_r+0x30>
 800c57a:	6063      	str	r3, [r4, #4]
 800c57c:	6014      	str	r4, [r2, #0]
 800c57e:	b003      	add	sp, #12
 800c580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c584:	f000 beee 	b.w	800d364 <__malloc_unlock>
 800c588:	42a3      	cmp	r3, r4
 800c58a:	d908      	bls.n	800c59e <_free_r+0x46>
 800c58c:	6825      	ldr	r5, [r4, #0]
 800c58e:	1961      	adds	r1, r4, r5
 800c590:	428b      	cmp	r3, r1
 800c592:	bf01      	itttt	eq
 800c594:	6819      	ldreq	r1, [r3, #0]
 800c596:	685b      	ldreq	r3, [r3, #4]
 800c598:	1949      	addeq	r1, r1, r5
 800c59a:	6021      	streq	r1, [r4, #0]
 800c59c:	e7ed      	b.n	800c57a <_free_r+0x22>
 800c59e:	461a      	mov	r2, r3
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	b10b      	cbz	r3, 800c5a8 <_free_r+0x50>
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	d9fa      	bls.n	800c59e <_free_r+0x46>
 800c5a8:	6811      	ldr	r1, [r2, #0]
 800c5aa:	1855      	adds	r5, r2, r1
 800c5ac:	42a5      	cmp	r5, r4
 800c5ae:	d10b      	bne.n	800c5c8 <_free_r+0x70>
 800c5b0:	6824      	ldr	r4, [r4, #0]
 800c5b2:	4421      	add	r1, r4
 800c5b4:	1854      	adds	r4, r2, r1
 800c5b6:	42a3      	cmp	r3, r4
 800c5b8:	6011      	str	r1, [r2, #0]
 800c5ba:	d1e0      	bne.n	800c57e <_free_r+0x26>
 800c5bc:	681c      	ldr	r4, [r3, #0]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	6053      	str	r3, [r2, #4]
 800c5c2:	4421      	add	r1, r4
 800c5c4:	6011      	str	r1, [r2, #0]
 800c5c6:	e7da      	b.n	800c57e <_free_r+0x26>
 800c5c8:	d902      	bls.n	800c5d0 <_free_r+0x78>
 800c5ca:	230c      	movs	r3, #12
 800c5cc:	6003      	str	r3, [r0, #0]
 800c5ce:	e7d6      	b.n	800c57e <_free_r+0x26>
 800c5d0:	6825      	ldr	r5, [r4, #0]
 800c5d2:	1961      	adds	r1, r4, r5
 800c5d4:	428b      	cmp	r3, r1
 800c5d6:	bf04      	itt	eq
 800c5d8:	6819      	ldreq	r1, [r3, #0]
 800c5da:	685b      	ldreq	r3, [r3, #4]
 800c5dc:	6063      	str	r3, [r4, #4]
 800c5de:	bf04      	itt	eq
 800c5e0:	1949      	addeq	r1, r1, r5
 800c5e2:	6021      	streq	r1, [r4, #0]
 800c5e4:	6054      	str	r4, [r2, #4]
 800c5e6:	e7ca      	b.n	800c57e <_free_r+0x26>
 800c5e8:	b003      	add	sp, #12
 800c5ea:	bd30      	pop	{r4, r5, pc}
 800c5ec:	2000045c 	.word	0x2000045c

0800c5f0 <sbrk_aligned>:
 800c5f0:	b570      	push	{r4, r5, r6, lr}
 800c5f2:	4e0e      	ldr	r6, [pc, #56]	; (800c62c <sbrk_aligned+0x3c>)
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	6831      	ldr	r1, [r6, #0]
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	b911      	cbnz	r1, 800c602 <sbrk_aligned+0x12>
 800c5fc:	f000 fd28 	bl	800d050 <_sbrk_r>
 800c600:	6030      	str	r0, [r6, #0]
 800c602:	4621      	mov	r1, r4
 800c604:	4628      	mov	r0, r5
 800c606:	f000 fd23 	bl	800d050 <_sbrk_r>
 800c60a:	1c43      	adds	r3, r0, #1
 800c60c:	d00a      	beq.n	800c624 <sbrk_aligned+0x34>
 800c60e:	1cc4      	adds	r4, r0, #3
 800c610:	f024 0403 	bic.w	r4, r4, #3
 800c614:	42a0      	cmp	r0, r4
 800c616:	d007      	beq.n	800c628 <sbrk_aligned+0x38>
 800c618:	1a21      	subs	r1, r4, r0
 800c61a:	4628      	mov	r0, r5
 800c61c:	f000 fd18 	bl	800d050 <_sbrk_r>
 800c620:	3001      	adds	r0, #1
 800c622:	d101      	bne.n	800c628 <sbrk_aligned+0x38>
 800c624:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c628:	4620      	mov	r0, r4
 800c62a:	bd70      	pop	{r4, r5, r6, pc}
 800c62c:	20000460 	.word	0x20000460

0800c630 <_malloc_r>:
 800c630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c634:	1ccd      	adds	r5, r1, #3
 800c636:	f025 0503 	bic.w	r5, r5, #3
 800c63a:	3508      	adds	r5, #8
 800c63c:	2d0c      	cmp	r5, #12
 800c63e:	bf38      	it	cc
 800c640:	250c      	movcc	r5, #12
 800c642:	2d00      	cmp	r5, #0
 800c644:	4607      	mov	r7, r0
 800c646:	db01      	blt.n	800c64c <_malloc_r+0x1c>
 800c648:	42a9      	cmp	r1, r5
 800c64a:	d905      	bls.n	800c658 <_malloc_r+0x28>
 800c64c:	230c      	movs	r3, #12
 800c64e:	603b      	str	r3, [r7, #0]
 800c650:	2600      	movs	r6, #0
 800c652:	4630      	mov	r0, r6
 800c654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c658:	4e2e      	ldr	r6, [pc, #184]	; (800c714 <_malloc_r+0xe4>)
 800c65a:	f000 fe7d 	bl	800d358 <__malloc_lock>
 800c65e:	6833      	ldr	r3, [r6, #0]
 800c660:	461c      	mov	r4, r3
 800c662:	bb34      	cbnz	r4, 800c6b2 <_malloc_r+0x82>
 800c664:	4629      	mov	r1, r5
 800c666:	4638      	mov	r0, r7
 800c668:	f7ff ffc2 	bl	800c5f0 <sbrk_aligned>
 800c66c:	1c43      	adds	r3, r0, #1
 800c66e:	4604      	mov	r4, r0
 800c670:	d14d      	bne.n	800c70e <_malloc_r+0xde>
 800c672:	6834      	ldr	r4, [r6, #0]
 800c674:	4626      	mov	r6, r4
 800c676:	2e00      	cmp	r6, #0
 800c678:	d140      	bne.n	800c6fc <_malloc_r+0xcc>
 800c67a:	6823      	ldr	r3, [r4, #0]
 800c67c:	4631      	mov	r1, r6
 800c67e:	4638      	mov	r0, r7
 800c680:	eb04 0803 	add.w	r8, r4, r3
 800c684:	f000 fce4 	bl	800d050 <_sbrk_r>
 800c688:	4580      	cmp	r8, r0
 800c68a:	d13a      	bne.n	800c702 <_malloc_r+0xd2>
 800c68c:	6821      	ldr	r1, [r4, #0]
 800c68e:	3503      	adds	r5, #3
 800c690:	1a6d      	subs	r5, r5, r1
 800c692:	f025 0503 	bic.w	r5, r5, #3
 800c696:	3508      	adds	r5, #8
 800c698:	2d0c      	cmp	r5, #12
 800c69a:	bf38      	it	cc
 800c69c:	250c      	movcc	r5, #12
 800c69e:	4629      	mov	r1, r5
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	f7ff ffa5 	bl	800c5f0 <sbrk_aligned>
 800c6a6:	3001      	adds	r0, #1
 800c6a8:	d02b      	beq.n	800c702 <_malloc_r+0xd2>
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	442b      	add	r3, r5
 800c6ae:	6023      	str	r3, [r4, #0]
 800c6b0:	e00e      	b.n	800c6d0 <_malloc_r+0xa0>
 800c6b2:	6822      	ldr	r2, [r4, #0]
 800c6b4:	1b52      	subs	r2, r2, r5
 800c6b6:	d41e      	bmi.n	800c6f6 <_malloc_r+0xc6>
 800c6b8:	2a0b      	cmp	r2, #11
 800c6ba:	d916      	bls.n	800c6ea <_malloc_r+0xba>
 800c6bc:	1961      	adds	r1, r4, r5
 800c6be:	42a3      	cmp	r3, r4
 800c6c0:	6025      	str	r5, [r4, #0]
 800c6c2:	bf18      	it	ne
 800c6c4:	6059      	strne	r1, [r3, #4]
 800c6c6:	6863      	ldr	r3, [r4, #4]
 800c6c8:	bf08      	it	eq
 800c6ca:	6031      	streq	r1, [r6, #0]
 800c6cc:	5162      	str	r2, [r4, r5]
 800c6ce:	604b      	str	r3, [r1, #4]
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f104 060b 	add.w	r6, r4, #11
 800c6d6:	f000 fe45 	bl	800d364 <__malloc_unlock>
 800c6da:	f026 0607 	bic.w	r6, r6, #7
 800c6de:	1d23      	adds	r3, r4, #4
 800c6e0:	1af2      	subs	r2, r6, r3
 800c6e2:	d0b6      	beq.n	800c652 <_malloc_r+0x22>
 800c6e4:	1b9b      	subs	r3, r3, r6
 800c6e6:	50a3      	str	r3, [r4, r2]
 800c6e8:	e7b3      	b.n	800c652 <_malloc_r+0x22>
 800c6ea:	6862      	ldr	r2, [r4, #4]
 800c6ec:	42a3      	cmp	r3, r4
 800c6ee:	bf0c      	ite	eq
 800c6f0:	6032      	streq	r2, [r6, #0]
 800c6f2:	605a      	strne	r2, [r3, #4]
 800c6f4:	e7ec      	b.n	800c6d0 <_malloc_r+0xa0>
 800c6f6:	4623      	mov	r3, r4
 800c6f8:	6864      	ldr	r4, [r4, #4]
 800c6fa:	e7b2      	b.n	800c662 <_malloc_r+0x32>
 800c6fc:	4634      	mov	r4, r6
 800c6fe:	6876      	ldr	r6, [r6, #4]
 800c700:	e7b9      	b.n	800c676 <_malloc_r+0x46>
 800c702:	230c      	movs	r3, #12
 800c704:	603b      	str	r3, [r7, #0]
 800c706:	4638      	mov	r0, r7
 800c708:	f000 fe2c 	bl	800d364 <__malloc_unlock>
 800c70c:	e7a1      	b.n	800c652 <_malloc_r+0x22>
 800c70e:	6025      	str	r5, [r4, #0]
 800c710:	e7de      	b.n	800c6d0 <_malloc_r+0xa0>
 800c712:	bf00      	nop
 800c714:	2000045c 	.word	0x2000045c

0800c718 <__ssputs_r>:
 800c718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c71c:	688e      	ldr	r6, [r1, #8]
 800c71e:	429e      	cmp	r6, r3
 800c720:	4682      	mov	sl, r0
 800c722:	460c      	mov	r4, r1
 800c724:	4690      	mov	r8, r2
 800c726:	461f      	mov	r7, r3
 800c728:	d838      	bhi.n	800c79c <__ssputs_r+0x84>
 800c72a:	898a      	ldrh	r2, [r1, #12]
 800c72c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c730:	d032      	beq.n	800c798 <__ssputs_r+0x80>
 800c732:	6825      	ldr	r5, [r4, #0]
 800c734:	6909      	ldr	r1, [r1, #16]
 800c736:	eba5 0901 	sub.w	r9, r5, r1
 800c73a:	6965      	ldr	r5, [r4, #20]
 800c73c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c744:	3301      	adds	r3, #1
 800c746:	444b      	add	r3, r9
 800c748:	106d      	asrs	r5, r5, #1
 800c74a:	429d      	cmp	r5, r3
 800c74c:	bf38      	it	cc
 800c74e:	461d      	movcc	r5, r3
 800c750:	0553      	lsls	r3, r2, #21
 800c752:	d531      	bpl.n	800c7b8 <__ssputs_r+0xa0>
 800c754:	4629      	mov	r1, r5
 800c756:	f7ff ff6b 	bl	800c630 <_malloc_r>
 800c75a:	4606      	mov	r6, r0
 800c75c:	b950      	cbnz	r0, 800c774 <__ssputs_r+0x5c>
 800c75e:	230c      	movs	r3, #12
 800c760:	f8ca 3000 	str.w	r3, [sl]
 800c764:	89a3      	ldrh	r3, [r4, #12]
 800c766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c76a:	81a3      	strh	r3, [r4, #12]
 800c76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c774:	6921      	ldr	r1, [r4, #16]
 800c776:	464a      	mov	r2, r9
 800c778:	f7ff fa08 	bl	800bb8c <memcpy>
 800c77c:	89a3      	ldrh	r3, [r4, #12]
 800c77e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c786:	81a3      	strh	r3, [r4, #12]
 800c788:	6126      	str	r6, [r4, #16]
 800c78a:	6165      	str	r5, [r4, #20]
 800c78c:	444e      	add	r6, r9
 800c78e:	eba5 0509 	sub.w	r5, r5, r9
 800c792:	6026      	str	r6, [r4, #0]
 800c794:	60a5      	str	r5, [r4, #8]
 800c796:	463e      	mov	r6, r7
 800c798:	42be      	cmp	r6, r7
 800c79a:	d900      	bls.n	800c79e <__ssputs_r+0x86>
 800c79c:	463e      	mov	r6, r7
 800c79e:	6820      	ldr	r0, [r4, #0]
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	4641      	mov	r1, r8
 800c7a4:	f000 fdbe 	bl	800d324 <memmove>
 800c7a8:	68a3      	ldr	r3, [r4, #8]
 800c7aa:	1b9b      	subs	r3, r3, r6
 800c7ac:	60a3      	str	r3, [r4, #8]
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	4433      	add	r3, r6
 800c7b2:	6023      	str	r3, [r4, #0]
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	e7db      	b.n	800c770 <__ssputs_r+0x58>
 800c7b8:	462a      	mov	r2, r5
 800c7ba:	f000 fdd9 	bl	800d370 <_realloc_r>
 800c7be:	4606      	mov	r6, r0
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d1e1      	bne.n	800c788 <__ssputs_r+0x70>
 800c7c4:	6921      	ldr	r1, [r4, #16]
 800c7c6:	4650      	mov	r0, sl
 800c7c8:	f7ff fec6 	bl	800c558 <_free_r>
 800c7cc:	e7c7      	b.n	800c75e <__ssputs_r+0x46>
	...

0800c7d0 <_svfiprintf_r>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	4698      	mov	r8, r3
 800c7d6:	898b      	ldrh	r3, [r1, #12]
 800c7d8:	061b      	lsls	r3, r3, #24
 800c7da:	b09d      	sub	sp, #116	; 0x74
 800c7dc:	4607      	mov	r7, r0
 800c7de:	460d      	mov	r5, r1
 800c7e0:	4614      	mov	r4, r2
 800c7e2:	d50e      	bpl.n	800c802 <_svfiprintf_r+0x32>
 800c7e4:	690b      	ldr	r3, [r1, #16]
 800c7e6:	b963      	cbnz	r3, 800c802 <_svfiprintf_r+0x32>
 800c7e8:	2140      	movs	r1, #64	; 0x40
 800c7ea:	f7ff ff21 	bl	800c630 <_malloc_r>
 800c7ee:	6028      	str	r0, [r5, #0]
 800c7f0:	6128      	str	r0, [r5, #16]
 800c7f2:	b920      	cbnz	r0, 800c7fe <_svfiprintf_r+0x2e>
 800c7f4:	230c      	movs	r3, #12
 800c7f6:	603b      	str	r3, [r7, #0]
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7fc:	e0d1      	b.n	800c9a2 <_svfiprintf_r+0x1d2>
 800c7fe:	2340      	movs	r3, #64	; 0x40
 800c800:	616b      	str	r3, [r5, #20]
 800c802:	2300      	movs	r3, #0
 800c804:	9309      	str	r3, [sp, #36]	; 0x24
 800c806:	2320      	movs	r3, #32
 800c808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c80c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c810:	2330      	movs	r3, #48	; 0x30
 800c812:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9bc <_svfiprintf_r+0x1ec>
 800c816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c81a:	f04f 0901 	mov.w	r9, #1
 800c81e:	4623      	mov	r3, r4
 800c820:	469a      	mov	sl, r3
 800c822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c826:	b10a      	cbz	r2, 800c82c <_svfiprintf_r+0x5c>
 800c828:	2a25      	cmp	r2, #37	; 0x25
 800c82a:	d1f9      	bne.n	800c820 <_svfiprintf_r+0x50>
 800c82c:	ebba 0b04 	subs.w	fp, sl, r4
 800c830:	d00b      	beq.n	800c84a <_svfiprintf_r+0x7a>
 800c832:	465b      	mov	r3, fp
 800c834:	4622      	mov	r2, r4
 800c836:	4629      	mov	r1, r5
 800c838:	4638      	mov	r0, r7
 800c83a:	f7ff ff6d 	bl	800c718 <__ssputs_r>
 800c83e:	3001      	adds	r0, #1
 800c840:	f000 80aa 	beq.w	800c998 <_svfiprintf_r+0x1c8>
 800c844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c846:	445a      	add	r2, fp
 800c848:	9209      	str	r2, [sp, #36]	; 0x24
 800c84a:	f89a 3000 	ldrb.w	r3, [sl]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 80a2 	beq.w	800c998 <_svfiprintf_r+0x1c8>
 800c854:	2300      	movs	r3, #0
 800c856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c85e:	f10a 0a01 	add.w	sl, sl, #1
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	9307      	str	r3, [sp, #28]
 800c866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c86a:	931a      	str	r3, [sp, #104]	; 0x68
 800c86c:	4654      	mov	r4, sl
 800c86e:	2205      	movs	r2, #5
 800c870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c874:	4851      	ldr	r0, [pc, #324]	; (800c9bc <_svfiprintf_r+0x1ec>)
 800c876:	f7f3 fcc3 	bl	8000200 <memchr>
 800c87a:	9a04      	ldr	r2, [sp, #16]
 800c87c:	b9d8      	cbnz	r0, 800c8b6 <_svfiprintf_r+0xe6>
 800c87e:	06d0      	lsls	r0, r2, #27
 800c880:	bf44      	itt	mi
 800c882:	2320      	movmi	r3, #32
 800c884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c888:	0711      	lsls	r1, r2, #28
 800c88a:	bf44      	itt	mi
 800c88c:	232b      	movmi	r3, #43	; 0x2b
 800c88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c892:	f89a 3000 	ldrb.w	r3, [sl]
 800c896:	2b2a      	cmp	r3, #42	; 0x2a
 800c898:	d015      	beq.n	800c8c6 <_svfiprintf_r+0xf6>
 800c89a:	9a07      	ldr	r2, [sp, #28]
 800c89c:	4654      	mov	r4, sl
 800c89e:	2000      	movs	r0, #0
 800c8a0:	f04f 0c0a 	mov.w	ip, #10
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8aa:	3b30      	subs	r3, #48	; 0x30
 800c8ac:	2b09      	cmp	r3, #9
 800c8ae:	d94e      	bls.n	800c94e <_svfiprintf_r+0x17e>
 800c8b0:	b1b0      	cbz	r0, 800c8e0 <_svfiprintf_r+0x110>
 800c8b2:	9207      	str	r2, [sp, #28]
 800c8b4:	e014      	b.n	800c8e0 <_svfiprintf_r+0x110>
 800c8b6:	eba0 0308 	sub.w	r3, r0, r8
 800c8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	9304      	str	r3, [sp, #16]
 800c8c2:	46a2      	mov	sl, r4
 800c8c4:	e7d2      	b.n	800c86c <_svfiprintf_r+0x9c>
 800c8c6:	9b03      	ldr	r3, [sp, #12]
 800c8c8:	1d19      	adds	r1, r3, #4
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	9103      	str	r1, [sp, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	bfbb      	ittet	lt
 800c8d2:	425b      	neglt	r3, r3
 800c8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8d8:	9307      	strge	r3, [sp, #28]
 800c8da:	9307      	strlt	r3, [sp, #28]
 800c8dc:	bfb8      	it	lt
 800c8de:	9204      	strlt	r2, [sp, #16]
 800c8e0:	7823      	ldrb	r3, [r4, #0]
 800c8e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8e4:	d10c      	bne.n	800c900 <_svfiprintf_r+0x130>
 800c8e6:	7863      	ldrb	r3, [r4, #1]
 800c8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ea:	d135      	bne.n	800c958 <_svfiprintf_r+0x188>
 800c8ec:	9b03      	ldr	r3, [sp, #12]
 800c8ee:	1d1a      	adds	r2, r3, #4
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	9203      	str	r2, [sp, #12]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	bfb8      	it	lt
 800c8f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8fc:	3402      	adds	r4, #2
 800c8fe:	9305      	str	r3, [sp, #20]
 800c900:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c9cc <_svfiprintf_r+0x1fc>
 800c904:	7821      	ldrb	r1, [r4, #0]
 800c906:	2203      	movs	r2, #3
 800c908:	4650      	mov	r0, sl
 800c90a:	f7f3 fc79 	bl	8000200 <memchr>
 800c90e:	b140      	cbz	r0, 800c922 <_svfiprintf_r+0x152>
 800c910:	2340      	movs	r3, #64	; 0x40
 800c912:	eba0 000a 	sub.w	r0, r0, sl
 800c916:	fa03 f000 	lsl.w	r0, r3, r0
 800c91a:	9b04      	ldr	r3, [sp, #16]
 800c91c:	4303      	orrs	r3, r0
 800c91e:	3401      	adds	r4, #1
 800c920:	9304      	str	r3, [sp, #16]
 800c922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c926:	4826      	ldr	r0, [pc, #152]	; (800c9c0 <_svfiprintf_r+0x1f0>)
 800c928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c92c:	2206      	movs	r2, #6
 800c92e:	f7f3 fc67 	bl	8000200 <memchr>
 800c932:	2800      	cmp	r0, #0
 800c934:	d038      	beq.n	800c9a8 <_svfiprintf_r+0x1d8>
 800c936:	4b23      	ldr	r3, [pc, #140]	; (800c9c4 <_svfiprintf_r+0x1f4>)
 800c938:	bb1b      	cbnz	r3, 800c982 <_svfiprintf_r+0x1b2>
 800c93a:	9b03      	ldr	r3, [sp, #12]
 800c93c:	3307      	adds	r3, #7
 800c93e:	f023 0307 	bic.w	r3, r3, #7
 800c942:	3308      	adds	r3, #8
 800c944:	9303      	str	r3, [sp, #12]
 800c946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c948:	4433      	add	r3, r6
 800c94a:	9309      	str	r3, [sp, #36]	; 0x24
 800c94c:	e767      	b.n	800c81e <_svfiprintf_r+0x4e>
 800c94e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c952:	460c      	mov	r4, r1
 800c954:	2001      	movs	r0, #1
 800c956:	e7a5      	b.n	800c8a4 <_svfiprintf_r+0xd4>
 800c958:	2300      	movs	r3, #0
 800c95a:	3401      	adds	r4, #1
 800c95c:	9305      	str	r3, [sp, #20]
 800c95e:	4619      	mov	r1, r3
 800c960:	f04f 0c0a 	mov.w	ip, #10
 800c964:	4620      	mov	r0, r4
 800c966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c96a:	3a30      	subs	r2, #48	; 0x30
 800c96c:	2a09      	cmp	r2, #9
 800c96e:	d903      	bls.n	800c978 <_svfiprintf_r+0x1a8>
 800c970:	2b00      	cmp	r3, #0
 800c972:	d0c5      	beq.n	800c900 <_svfiprintf_r+0x130>
 800c974:	9105      	str	r1, [sp, #20]
 800c976:	e7c3      	b.n	800c900 <_svfiprintf_r+0x130>
 800c978:	fb0c 2101 	mla	r1, ip, r1, r2
 800c97c:	4604      	mov	r4, r0
 800c97e:	2301      	movs	r3, #1
 800c980:	e7f0      	b.n	800c964 <_svfiprintf_r+0x194>
 800c982:	ab03      	add	r3, sp, #12
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	462a      	mov	r2, r5
 800c988:	4b0f      	ldr	r3, [pc, #60]	; (800c9c8 <_svfiprintf_r+0x1f8>)
 800c98a:	a904      	add	r1, sp, #16
 800c98c:	4638      	mov	r0, r7
 800c98e:	f7fb fe43 	bl	8008618 <_printf_float>
 800c992:	1c42      	adds	r2, r0, #1
 800c994:	4606      	mov	r6, r0
 800c996:	d1d6      	bne.n	800c946 <_svfiprintf_r+0x176>
 800c998:	89ab      	ldrh	r3, [r5, #12]
 800c99a:	065b      	lsls	r3, r3, #25
 800c99c:	f53f af2c 	bmi.w	800c7f8 <_svfiprintf_r+0x28>
 800c9a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9a2:	b01d      	add	sp, #116	; 0x74
 800c9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a8:	ab03      	add	r3, sp, #12
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	462a      	mov	r2, r5
 800c9ae:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <_svfiprintf_r+0x1f8>)
 800c9b0:	a904      	add	r1, sp, #16
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	f7fc f8d4 	bl	8008b60 <_printf_i>
 800c9b8:	e7eb      	b.n	800c992 <_svfiprintf_r+0x1c2>
 800c9ba:	bf00      	nop
 800c9bc:	0800eb6c 	.word	0x0800eb6c
 800c9c0:	0800eb76 	.word	0x0800eb76
 800c9c4:	08008619 	.word	0x08008619
 800c9c8:	0800c719 	.word	0x0800c719
 800c9cc:	0800eb72 	.word	0x0800eb72

0800c9d0 <_sungetc_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	1c4b      	adds	r3, r1, #1
 800c9d4:	4614      	mov	r4, r2
 800c9d6:	d103      	bne.n	800c9e0 <_sungetc_r+0x10>
 800c9d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c9dc:	4628      	mov	r0, r5
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	8993      	ldrh	r3, [r2, #12]
 800c9e2:	f023 0320 	bic.w	r3, r3, #32
 800c9e6:	8193      	strh	r3, [r2, #12]
 800c9e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9ea:	6852      	ldr	r2, [r2, #4]
 800c9ec:	b2cd      	uxtb	r5, r1
 800c9ee:	b18b      	cbz	r3, 800ca14 <_sungetc_r+0x44>
 800c9f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	dd08      	ble.n	800ca08 <_sungetc_r+0x38>
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	1e5a      	subs	r2, r3, #1
 800c9fa:	6022      	str	r2, [r4, #0]
 800c9fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ca00:	6863      	ldr	r3, [r4, #4]
 800ca02:	3301      	adds	r3, #1
 800ca04:	6063      	str	r3, [r4, #4]
 800ca06:	e7e9      	b.n	800c9dc <_sungetc_r+0xc>
 800ca08:	4621      	mov	r1, r4
 800ca0a:	f000 fbf1 	bl	800d1f0 <__submore>
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d0f1      	beq.n	800c9f6 <_sungetc_r+0x26>
 800ca12:	e7e1      	b.n	800c9d8 <_sungetc_r+0x8>
 800ca14:	6921      	ldr	r1, [r4, #16]
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	b151      	cbz	r1, 800ca30 <_sungetc_r+0x60>
 800ca1a:	4299      	cmp	r1, r3
 800ca1c:	d208      	bcs.n	800ca30 <_sungetc_r+0x60>
 800ca1e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ca22:	42a9      	cmp	r1, r5
 800ca24:	d104      	bne.n	800ca30 <_sungetc_r+0x60>
 800ca26:	3b01      	subs	r3, #1
 800ca28:	3201      	adds	r2, #1
 800ca2a:	6023      	str	r3, [r4, #0]
 800ca2c:	6062      	str	r2, [r4, #4]
 800ca2e:	e7d5      	b.n	800c9dc <_sungetc_r+0xc>
 800ca30:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ca34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca38:	6363      	str	r3, [r4, #52]	; 0x34
 800ca3a:	2303      	movs	r3, #3
 800ca3c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ca3e:	4623      	mov	r3, r4
 800ca40:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ca44:	6023      	str	r3, [r4, #0]
 800ca46:	2301      	movs	r3, #1
 800ca48:	e7dc      	b.n	800ca04 <_sungetc_r+0x34>

0800ca4a <__ssrefill_r>:
 800ca4a:	b510      	push	{r4, lr}
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ca50:	b169      	cbz	r1, 800ca6e <__ssrefill_r+0x24>
 800ca52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca56:	4299      	cmp	r1, r3
 800ca58:	d001      	beq.n	800ca5e <__ssrefill_r+0x14>
 800ca5a:	f7ff fd7d 	bl	800c558 <_free_r>
 800ca5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca60:	6063      	str	r3, [r4, #4]
 800ca62:	2000      	movs	r0, #0
 800ca64:	6360      	str	r0, [r4, #52]	; 0x34
 800ca66:	b113      	cbz	r3, 800ca6e <__ssrefill_r+0x24>
 800ca68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ca6a:	6023      	str	r3, [r4, #0]
 800ca6c:	bd10      	pop	{r4, pc}
 800ca6e:	6923      	ldr	r3, [r4, #16]
 800ca70:	6023      	str	r3, [r4, #0]
 800ca72:	2300      	movs	r3, #0
 800ca74:	6063      	str	r3, [r4, #4]
 800ca76:	89a3      	ldrh	r3, [r4, #12]
 800ca78:	f043 0320 	orr.w	r3, r3, #32
 800ca7c:	81a3      	strh	r3, [r4, #12]
 800ca7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca82:	e7f3      	b.n	800ca6c <__ssrefill_r+0x22>

0800ca84 <__ssvfiscanf_r>:
 800ca84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca88:	460c      	mov	r4, r1
 800ca8a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ca8e:	2100      	movs	r1, #0
 800ca90:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ca94:	49a6      	ldr	r1, [pc, #664]	; (800cd30 <__ssvfiscanf_r+0x2ac>)
 800ca96:	91a0      	str	r1, [sp, #640]	; 0x280
 800ca98:	f10d 0804 	add.w	r8, sp, #4
 800ca9c:	49a5      	ldr	r1, [pc, #660]	; (800cd34 <__ssvfiscanf_r+0x2b0>)
 800ca9e:	4fa6      	ldr	r7, [pc, #664]	; (800cd38 <__ssvfiscanf_r+0x2b4>)
 800caa0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cd3c <__ssvfiscanf_r+0x2b8>
 800caa4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800caa8:	4606      	mov	r6, r0
 800caaa:	91a1      	str	r1, [sp, #644]	; 0x284
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	7813      	ldrb	r3, [r2, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f000 815a 	beq.w	800cd6a <__ssvfiscanf_r+0x2e6>
 800cab6:	5dd9      	ldrb	r1, [r3, r7]
 800cab8:	f011 0108 	ands.w	r1, r1, #8
 800cabc:	f102 0501 	add.w	r5, r2, #1
 800cac0:	d019      	beq.n	800caf6 <__ssvfiscanf_r+0x72>
 800cac2:	6863      	ldr	r3, [r4, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	dd0f      	ble.n	800cae8 <__ssvfiscanf_r+0x64>
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	781a      	ldrb	r2, [r3, #0]
 800cacc:	5cba      	ldrb	r2, [r7, r2]
 800cace:	0712      	lsls	r2, r2, #28
 800cad0:	d401      	bmi.n	800cad6 <__ssvfiscanf_r+0x52>
 800cad2:	462a      	mov	r2, r5
 800cad4:	e7eb      	b.n	800caae <__ssvfiscanf_r+0x2a>
 800cad6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cad8:	3201      	adds	r2, #1
 800cada:	9245      	str	r2, [sp, #276]	; 0x114
 800cadc:	6862      	ldr	r2, [r4, #4]
 800cade:	3301      	adds	r3, #1
 800cae0:	3a01      	subs	r2, #1
 800cae2:	6062      	str	r2, [r4, #4]
 800cae4:	6023      	str	r3, [r4, #0]
 800cae6:	e7ec      	b.n	800cac2 <__ssvfiscanf_r+0x3e>
 800cae8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800caea:	4621      	mov	r1, r4
 800caec:	4630      	mov	r0, r6
 800caee:	4798      	blx	r3
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d0e9      	beq.n	800cac8 <__ssvfiscanf_r+0x44>
 800caf4:	e7ed      	b.n	800cad2 <__ssvfiscanf_r+0x4e>
 800caf6:	2b25      	cmp	r3, #37	; 0x25
 800caf8:	d012      	beq.n	800cb20 <__ssvfiscanf_r+0x9c>
 800cafa:	469a      	mov	sl, r3
 800cafc:	6863      	ldr	r3, [r4, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f340 8091 	ble.w	800cc26 <__ssvfiscanf_r+0x1a2>
 800cb04:	6822      	ldr	r2, [r4, #0]
 800cb06:	7813      	ldrb	r3, [r2, #0]
 800cb08:	4553      	cmp	r3, sl
 800cb0a:	f040 812e 	bne.w	800cd6a <__ssvfiscanf_r+0x2e6>
 800cb0e:	6863      	ldr	r3, [r4, #4]
 800cb10:	3b01      	subs	r3, #1
 800cb12:	6063      	str	r3, [r4, #4]
 800cb14:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cb16:	3201      	adds	r2, #1
 800cb18:	3301      	adds	r3, #1
 800cb1a:	6022      	str	r2, [r4, #0]
 800cb1c:	9345      	str	r3, [sp, #276]	; 0x114
 800cb1e:	e7d8      	b.n	800cad2 <__ssvfiscanf_r+0x4e>
 800cb20:	9141      	str	r1, [sp, #260]	; 0x104
 800cb22:	9143      	str	r1, [sp, #268]	; 0x10c
 800cb24:	7853      	ldrb	r3, [r2, #1]
 800cb26:	2b2a      	cmp	r3, #42	; 0x2a
 800cb28:	bf02      	ittt	eq
 800cb2a:	2310      	moveq	r3, #16
 800cb2c:	1c95      	addeq	r5, r2, #2
 800cb2e:	9341      	streq	r3, [sp, #260]	; 0x104
 800cb30:	220a      	movs	r2, #10
 800cb32:	46aa      	mov	sl, r5
 800cb34:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cb38:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cb3c:	2b09      	cmp	r3, #9
 800cb3e:	d91d      	bls.n	800cb7c <__ssvfiscanf_r+0xf8>
 800cb40:	487e      	ldr	r0, [pc, #504]	; (800cd3c <__ssvfiscanf_r+0x2b8>)
 800cb42:	2203      	movs	r2, #3
 800cb44:	f7f3 fb5c 	bl	8000200 <memchr>
 800cb48:	b140      	cbz	r0, 800cb5c <__ssvfiscanf_r+0xd8>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	eba0 0009 	sub.w	r0, r0, r9
 800cb50:	fa03 f000 	lsl.w	r0, r3, r0
 800cb54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb56:	4318      	orrs	r0, r3
 800cb58:	9041      	str	r0, [sp, #260]	; 0x104
 800cb5a:	4655      	mov	r5, sl
 800cb5c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb60:	2b78      	cmp	r3, #120	; 0x78
 800cb62:	d806      	bhi.n	800cb72 <__ssvfiscanf_r+0xee>
 800cb64:	2b57      	cmp	r3, #87	; 0x57
 800cb66:	d810      	bhi.n	800cb8a <__ssvfiscanf_r+0x106>
 800cb68:	2b25      	cmp	r3, #37	; 0x25
 800cb6a:	d0c6      	beq.n	800cafa <__ssvfiscanf_r+0x76>
 800cb6c:	d856      	bhi.n	800cc1c <__ssvfiscanf_r+0x198>
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d064      	beq.n	800cc3c <__ssvfiscanf_r+0x1b8>
 800cb72:	2303      	movs	r3, #3
 800cb74:	9347      	str	r3, [sp, #284]	; 0x11c
 800cb76:	230a      	movs	r3, #10
 800cb78:	9342      	str	r3, [sp, #264]	; 0x108
 800cb7a:	e071      	b.n	800cc60 <__ssvfiscanf_r+0x1dc>
 800cb7c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cb7e:	fb02 1103 	mla	r1, r2, r3, r1
 800cb82:	3930      	subs	r1, #48	; 0x30
 800cb84:	9143      	str	r1, [sp, #268]	; 0x10c
 800cb86:	4655      	mov	r5, sl
 800cb88:	e7d3      	b.n	800cb32 <__ssvfiscanf_r+0xae>
 800cb8a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800cb8e:	2a20      	cmp	r2, #32
 800cb90:	d8ef      	bhi.n	800cb72 <__ssvfiscanf_r+0xee>
 800cb92:	a101      	add	r1, pc, #4	; (adr r1, 800cb98 <__ssvfiscanf_r+0x114>)
 800cb94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb98:	0800cc4b 	.word	0x0800cc4b
 800cb9c:	0800cb73 	.word	0x0800cb73
 800cba0:	0800cb73 	.word	0x0800cb73
 800cba4:	0800cca9 	.word	0x0800cca9
 800cba8:	0800cb73 	.word	0x0800cb73
 800cbac:	0800cb73 	.word	0x0800cb73
 800cbb0:	0800cb73 	.word	0x0800cb73
 800cbb4:	0800cb73 	.word	0x0800cb73
 800cbb8:	0800cb73 	.word	0x0800cb73
 800cbbc:	0800cb73 	.word	0x0800cb73
 800cbc0:	0800cb73 	.word	0x0800cb73
 800cbc4:	0800ccbf 	.word	0x0800ccbf
 800cbc8:	0800cc95 	.word	0x0800cc95
 800cbcc:	0800cc23 	.word	0x0800cc23
 800cbd0:	0800cc23 	.word	0x0800cc23
 800cbd4:	0800cc23 	.word	0x0800cc23
 800cbd8:	0800cb73 	.word	0x0800cb73
 800cbdc:	0800cc99 	.word	0x0800cc99
 800cbe0:	0800cb73 	.word	0x0800cb73
 800cbe4:	0800cb73 	.word	0x0800cb73
 800cbe8:	0800cb73 	.word	0x0800cb73
 800cbec:	0800cb73 	.word	0x0800cb73
 800cbf0:	0800cccf 	.word	0x0800cccf
 800cbf4:	0800cca1 	.word	0x0800cca1
 800cbf8:	0800cc43 	.word	0x0800cc43
 800cbfc:	0800cb73 	.word	0x0800cb73
 800cc00:	0800cb73 	.word	0x0800cb73
 800cc04:	0800cccb 	.word	0x0800cccb
 800cc08:	0800cb73 	.word	0x0800cb73
 800cc0c:	0800cc95 	.word	0x0800cc95
 800cc10:	0800cb73 	.word	0x0800cb73
 800cc14:	0800cb73 	.word	0x0800cb73
 800cc18:	0800cc4b 	.word	0x0800cc4b
 800cc1c:	3b45      	subs	r3, #69	; 0x45
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d8a7      	bhi.n	800cb72 <__ssvfiscanf_r+0xee>
 800cc22:	2305      	movs	r3, #5
 800cc24:	e01b      	b.n	800cc5e <__ssvfiscanf_r+0x1da>
 800cc26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cc28:	4621      	mov	r1, r4
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	4798      	blx	r3
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	f43f af68 	beq.w	800cb04 <__ssvfiscanf_r+0x80>
 800cc34:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cc36:	2800      	cmp	r0, #0
 800cc38:	f040 808d 	bne.w	800cd56 <__ssvfiscanf_r+0x2d2>
 800cc3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc40:	e08f      	b.n	800cd62 <__ssvfiscanf_r+0x2de>
 800cc42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cc44:	f042 0220 	orr.w	r2, r2, #32
 800cc48:	9241      	str	r2, [sp, #260]	; 0x104
 800cc4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cc4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc50:	9241      	str	r2, [sp, #260]	; 0x104
 800cc52:	2210      	movs	r2, #16
 800cc54:	2b6f      	cmp	r3, #111	; 0x6f
 800cc56:	9242      	str	r2, [sp, #264]	; 0x108
 800cc58:	bf34      	ite	cc
 800cc5a:	2303      	movcc	r3, #3
 800cc5c:	2304      	movcs	r3, #4
 800cc5e:	9347      	str	r3, [sp, #284]	; 0x11c
 800cc60:	6863      	ldr	r3, [r4, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	dd42      	ble.n	800ccec <__ssvfiscanf_r+0x268>
 800cc66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cc68:	0659      	lsls	r1, r3, #25
 800cc6a:	d404      	bmi.n	800cc76 <__ssvfiscanf_r+0x1f2>
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	781a      	ldrb	r2, [r3, #0]
 800cc70:	5cba      	ldrb	r2, [r7, r2]
 800cc72:	0712      	lsls	r2, r2, #28
 800cc74:	d441      	bmi.n	800ccfa <__ssvfiscanf_r+0x276>
 800cc76:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cc78:	2b02      	cmp	r3, #2
 800cc7a:	dc50      	bgt.n	800cd1e <__ssvfiscanf_r+0x29a>
 800cc7c:	466b      	mov	r3, sp
 800cc7e:	4622      	mov	r2, r4
 800cc80:	a941      	add	r1, sp, #260	; 0x104
 800cc82:	4630      	mov	r0, r6
 800cc84:	f000 f876 	bl	800cd74 <_scanf_chars>
 800cc88:	2801      	cmp	r0, #1
 800cc8a:	d06e      	beq.n	800cd6a <__ssvfiscanf_r+0x2e6>
 800cc8c:	2802      	cmp	r0, #2
 800cc8e:	f47f af20 	bne.w	800cad2 <__ssvfiscanf_r+0x4e>
 800cc92:	e7cf      	b.n	800cc34 <__ssvfiscanf_r+0x1b0>
 800cc94:	220a      	movs	r2, #10
 800cc96:	e7dd      	b.n	800cc54 <__ssvfiscanf_r+0x1d0>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	9342      	str	r3, [sp, #264]	; 0x108
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	e7de      	b.n	800cc5e <__ssvfiscanf_r+0x1da>
 800cca0:	2308      	movs	r3, #8
 800cca2:	9342      	str	r3, [sp, #264]	; 0x108
 800cca4:	2304      	movs	r3, #4
 800cca6:	e7da      	b.n	800cc5e <__ssvfiscanf_r+0x1da>
 800cca8:	4629      	mov	r1, r5
 800ccaa:	4640      	mov	r0, r8
 800ccac:	f000 f9e0 	bl	800d070 <__sccl>
 800ccb0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ccb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb6:	9341      	str	r3, [sp, #260]	; 0x104
 800ccb8:	4605      	mov	r5, r0
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e7cf      	b.n	800cc5e <__ssvfiscanf_r+0x1da>
 800ccbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ccc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccc4:	9341      	str	r3, [sp, #260]	; 0x104
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	e7c9      	b.n	800cc5e <__ssvfiscanf_r+0x1da>
 800ccca:	2302      	movs	r3, #2
 800cccc:	e7c7      	b.n	800cc5e <__ssvfiscanf_r+0x1da>
 800ccce:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ccd0:	06c3      	lsls	r3, r0, #27
 800ccd2:	f53f aefe 	bmi.w	800cad2 <__ssvfiscanf_r+0x4e>
 800ccd6:	9b00      	ldr	r3, [sp, #0]
 800ccd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ccda:	1d19      	adds	r1, r3, #4
 800ccdc:	9100      	str	r1, [sp, #0]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f010 0f01 	tst.w	r0, #1
 800cce4:	bf14      	ite	ne
 800cce6:	801a      	strhne	r2, [r3, #0]
 800cce8:	601a      	streq	r2, [r3, #0]
 800ccea:	e6f2      	b.n	800cad2 <__ssvfiscanf_r+0x4e>
 800ccec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ccee:	4621      	mov	r1, r4
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	4798      	blx	r3
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d0b6      	beq.n	800cc66 <__ssvfiscanf_r+0x1e2>
 800ccf8:	e79c      	b.n	800cc34 <__ssvfiscanf_r+0x1b0>
 800ccfa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ccfc:	3201      	adds	r2, #1
 800ccfe:	9245      	str	r2, [sp, #276]	; 0x114
 800cd00:	6862      	ldr	r2, [r4, #4]
 800cd02:	3a01      	subs	r2, #1
 800cd04:	2a00      	cmp	r2, #0
 800cd06:	6062      	str	r2, [r4, #4]
 800cd08:	dd02      	ble.n	800cd10 <__ssvfiscanf_r+0x28c>
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	e7ad      	b.n	800cc6c <__ssvfiscanf_r+0x1e8>
 800cd10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cd12:	4621      	mov	r1, r4
 800cd14:	4630      	mov	r0, r6
 800cd16:	4798      	blx	r3
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d0a7      	beq.n	800cc6c <__ssvfiscanf_r+0x1e8>
 800cd1c:	e78a      	b.n	800cc34 <__ssvfiscanf_r+0x1b0>
 800cd1e:	2b04      	cmp	r3, #4
 800cd20:	dc0e      	bgt.n	800cd40 <__ssvfiscanf_r+0x2bc>
 800cd22:	466b      	mov	r3, sp
 800cd24:	4622      	mov	r2, r4
 800cd26:	a941      	add	r1, sp, #260	; 0x104
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f000 f87d 	bl	800ce28 <_scanf_i>
 800cd2e:	e7ab      	b.n	800cc88 <__ssvfiscanf_r+0x204>
 800cd30:	0800c9d1 	.word	0x0800c9d1
 800cd34:	0800ca4b 	.word	0x0800ca4b
 800cd38:	0800e7a1 	.word	0x0800e7a1
 800cd3c:	0800eb72 	.word	0x0800eb72
 800cd40:	4b0b      	ldr	r3, [pc, #44]	; (800cd70 <__ssvfiscanf_r+0x2ec>)
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f43f aec5 	beq.w	800cad2 <__ssvfiscanf_r+0x4e>
 800cd48:	466b      	mov	r3, sp
 800cd4a:	4622      	mov	r2, r4
 800cd4c:	a941      	add	r1, sp, #260	; 0x104
 800cd4e:	4630      	mov	r0, r6
 800cd50:	f7fc f82c 	bl	8008dac <_scanf_float>
 800cd54:	e798      	b.n	800cc88 <__ssvfiscanf_r+0x204>
 800cd56:	89a3      	ldrh	r3, [r4, #12]
 800cd58:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cd5c:	bf18      	it	ne
 800cd5e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800cd62:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd6a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cd6c:	e7f9      	b.n	800cd62 <__ssvfiscanf_r+0x2de>
 800cd6e:	bf00      	nop
 800cd70:	08008dad 	.word	0x08008dad

0800cd74 <_scanf_chars>:
 800cd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd78:	4615      	mov	r5, r2
 800cd7a:	688a      	ldr	r2, [r1, #8]
 800cd7c:	4680      	mov	r8, r0
 800cd7e:	460c      	mov	r4, r1
 800cd80:	b932      	cbnz	r2, 800cd90 <_scanf_chars+0x1c>
 800cd82:	698a      	ldr	r2, [r1, #24]
 800cd84:	2a00      	cmp	r2, #0
 800cd86:	bf0c      	ite	eq
 800cd88:	2201      	moveq	r2, #1
 800cd8a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800cd8e:	608a      	str	r2, [r1, #8]
 800cd90:	6822      	ldr	r2, [r4, #0]
 800cd92:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ce24 <_scanf_chars+0xb0>
 800cd96:	06d1      	lsls	r1, r2, #27
 800cd98:	bf5f      	itttt	pl
 800cd9a:	681a      	ldrpl	r2, [r3, #0]
 800cd9c:	1d11      	addpl	r1, r2, #4
 800cd9e:	6019      	strpl	r1, [r3, #0]
 800cda0:	6816      	ldrpl	r6, [r2, #0]
 800cda2:	2700      	movs	r7, #0
 800cda4:	69a0      	ldr	r0, [r4, #24]
 800cda6:	b188      	cbz	r0, 800cdcc <_scanf_chars+0x58>
 800cda8:	2801      	cmp	r0, #1
 800cdaa:	d107      	bne.n	800cdbc <_scanf_chars+0x48>
 800cdac:	682a      	ldr	r2, [r5, #0]
 800cdae:	7811      	ldrb	r1, [r2, #0]
 800cdb0:	6962      	ldr	r2, [r4, #20]
 800cdb2:	5c52      	ldrb	r2, [r2, r1]
 800cdb4:	b952      	cbnz	r2, 800cdcc <_scanf_chars+0x58>
 800cdb6:	2f00      	cmp	r7, #0
 800cdb8:	d031      	beq.n	800ce1e <_scanf_chars+0xaa>
 800cdba:	e022      	b.n	800ce02 <_scanf_chars+0x8e>
 800cdbc:	2802      	cmp	r0, #2
 800cdbe:	d120      	bne.n	800ce02 <_scanf_chars+0x8e>
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cdc8:	071b      	lsls	r3, r3, #28
 800cdca:	d41a      	bmi.n	800ce02 <_scanf_chars+0x8e>
 800cdcc:	6823      	ldr	r3, [r4, #0]
 800cdce:	06da      	lsls	r2, r3, #27
 800cdd0:	bf5e      	ittt	pl
 800cdd2:	682b      	ldrpl	r3, [r5, #0]
 800cdd4:	781b      	ldrbpl	r3, [r3, #0]
 800cdd6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cdda:	682a      	ldr	r2, [r5, #0]
 800cddc:	686b      	ldr	r3, [r5, #4]
 800cdde:	3201      	adds	r2, #1
 800cde0:	602a      	str	r2, [r5, #0]
 800cde2:	68a2      	ldr	r2, [r4, #8]
 800cde4:	3b01      	subs	r3, #1
 800cde6:	3a01      	subs	r2, #1
 800cde8:	606b      	str	r3, [r5, #4]
 800cdea:	3701      	adds	r7, #1
 800cdec:	60a2      	str	r2, [r4, #8]
 800cdee:	b142      	cbz	r2, 800ce02 <_scanf_chars+0x8e>
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	dcd7      	bgt.n	800cda4 <_scanf_chars+0x30>
 800cdf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	4798      	blx	r3
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d0d0      	beq.n	800cda4 <_scanf_chars+0x30>
 800ce02:	6823      	ldr	r3, [r4, #0]
 800ce04:	f013 0310 	ands.w	r3, r3, #16
 800ce08:	d105      	bne.n	800ce16 <_scanf_chars+0xa2>
 800ce0a:	68e2      	ldr	r2, [r4, #12]
 800ce0c:	3201      	adds	r2, #1
 800ce0e:	60e2      	str	r2, [r4, #12]
 800ce10:	69a2      	ldr	r2, [r4, #24]
 800ce12:	b102      	cbz	r2, 800ce16 <_scanf_chars+0xa2>
 800ce14:	7033      	strb	r3, [r6, #0]
 800ce16:	6923      	ldr	r3, [r4, #16]
 800ce18:	443b      	add	r3, r7
 800ce1a:	6123      	str	r3, [r4, #16]
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce22:	bf00      	nop
 800ce24:	0800e7a1 	.word	0x0800e7a1

0800ce28 <_scanf_i>:
 800ce28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2c:	4698      	mov	r8, r3
 800ce2e:	4b76      	ldr	r3, [pc, #472]	; (800d008 <_scanf_i+0x1e0>)
 800ce30:	460c      	mov	r4, r1
 800ce32:	4682      	mov	sl, r0
 800ce34:	4616      	mov	r6, r2
 800ce36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ce3a:	b087      	sub	sp, #28
 800ce3c:	ab03      	add	r3, sp, #12
 800ce3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ce42:	4b72      	ldr	r3, [pc, #456]	; (800d00c <_scanf_i+0x1e4>)
 800ce44:	69a1      	ldr	r1, [r4, #24]
 800ce46:	4a72      	ldr	r2, [pc, #456]	; (800d010 <_scanf_i+0x1e8>)
 800ce48:	2903      	cmp	r1, #3
 800ce4a:	bf18      	it	ne
 800ce4c:	461a      	movne	r2, r3
 800ce4e:	68a3      	ldr	r3, [r4, #8]
 800ce50:	9201      	str	r2, [sp, #4]
 800ce52:	1e5a      	subs	r2, r3, #1
 800ce54:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ce58:	bf88      	it	hi
 800ce5a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ce5e:	4627      	mov	r7, r4
 800ce60:	bf82      	ittt	hi
 800ce62:	eb03 0905 	addhi.w	r9, r3, r5
 800ce66:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ce6a:	60a3      	strhi	r3, [r4, #8]
 800ce6c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ce70:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ce74:	bf98      	it	ls
 800ce76:	f04f 0900 	movls.w	r9, #0
 800ce7a:	6023      	str	r3, [r4, #0]
 800ce7c:	463d      	mov	r5, r7
 800ce7e:	f04f 0b00 	mov.w	fp, #0
 800ce82:	6831      	ldr	r1, [r6, #0]
 800ce84:	ab03      	add	r3, sp, #12
 800ce86:	7809      	ldrb	r1, [r1, #0]
 800ce88:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ce8c:	2202      	movs	r2, #2
 800ce8e:	f7f3 f9b7 	bl	8000200 <memchr>
 800ce92:	b328      	cbz	r0, 800cee0 <_scanf_i+0xb8>
 800ce94:	f1bb 0f01 	cmp.w	fp, #1
 800ce98:	d159      	bne.n	800cf4e <_scanf_i+0x126>
 800ce9a:	6862      	ldr	r2, [r4, #4]
 800ce9c:	b92a      	cbnz	r2, 800ceaa <_scanf_i+0x82>
 800ce9e:	6822      	ldr	r2, [r4, #0]
 800cea0:	2308      	movs	r3, #8
 800cea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cea6:	6063      	str	r3, [r4, #4]
 800cea8:	6022      	str	r2, [r4, #0]
 800ceaa:	6822      	ldr	r2, [r4, #0]
 800ceac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ceb0:	6022      	str	r2, [r4, #0]
 800ceb2:	68a2      	ldr	r2, [r4, #8]
 800ceb4:	1e51      	subs	r1, r2, #1
 800ceb6:	60a1      	str	r1, [r4, #8]
 800ceb8:	b192      	cbz	r2, 800cee0 <_scanf_i+0xb8>
 800ceba:	6832      	ldr	r2, [r6, #0]
 800cebc:	1c51      	adds	r1, r2, #1
 800cebe:	6031      	str	r1, [r6, #0]
 800cec0:	7812      	ldrb	r2, [r2, #0]
 800cec2:	f805 2b01 	strb.w	r2, [r5], #1
 800cec6:	6872      	ldr	r2, [r6, #4]
 800cec8:	3a01      	subs	r2, #1
 800ceca:	2a00      	cmp	r2, #0
 800cecc:	6072      	str	r2, [r6, #4]
 800cece:	dc07      	bgt.n	800cee0 <_scanf_i+0xb8>
 800ced0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ced4:	4631      	mov	r1, r6
 800ced6:	4650      	mov	r0, sl
 800ced8:	4790      	blx	r2
 800ceda:	2800      	cmp	r0, #0
 800cedc:	f040 8085 	bne.w	800cfea <_scanf_i+0x1c2>
 800cee0:	f10b 0b01 	add.w	fp, fp, #1
 800cee4:	f1bb 0f03 	cmp.w	fp, #3
 800cee8:	d1cb      	bne.n	800ce82 <_scanf_i+0x5a>
 800ceea:	6863      	ldr	r3, [r4, #4]
 800ceec:	b90b      	cbnz	r3, 800cef2 <_scanf_i+0xca>
 800ceee:	230a      	movs	r3, #10
 800cef0:	6063      	str	r3, [r4, #4]
 800cef2:	6863      	ldr	r3, [r4, #4]
 800cef4:	4947      	ldr	r1, [pc, #284]	; (800d014 <_scanf_i+0x1ec>)
 800cef6:	6960      	ldr	r0, [r4, #20]
 800cef8:	1ac9      	subs	r1, r1, r3
 800cefa:	f000 f8b9 	bl	800d070 <__sccl>
 800cefe:	f04f 0b00 	mov.w	fp, #0
 800cf02:	68a3      	ldr	r3, [r4, #8]
 800cf04:	6822      	ldr	r2, [r4, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d03d      	beq.n	800cf86 <_scanf_i+0x15e>
 800cf0a:	6831      	ldr	r1, [r6, #0]
 800cf0c:	6960      	ldr	r0, [r4, #20]
 800cf0e:	f891 c000 	ldrb.w	ip, [r1]
 800cf12:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d035      	beq.n	800cf86 <_scanf_i+0x15e>
 800cf1a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cf1e:	d124      	bne.n	800cf6a <_scanf_i+0x142>
 800cf20:	0510      	lsls	r0, r2, #20
 800cf22:	d522      	bpl.n	800cf6a <_scanf_i+0x142>
 800cf24:	f10b 0b01 	add.w	fp, fp, #1
 800cf28:	f1b9 0f00 	cmp.w	r9, #0
 800cf2c:	d003      	beq.n	800cf36 <_scanf_i+0x10e>
 800cf2e:	3301      	adds	r3, #1
 800cf30:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800cf34:	60a3      	str	r3, [r4, #8]
 800cf36:	6873      	ldr	r3, [r6, #4]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	6073      	str	r3, [r6, #4]
 800cf3e:	dd1b      	ble.n	800cf78 <_scanf_i+0x150>
 800cf40:	6833      	ldr	r3, [r6, #0]
 800cf42:	3301      	adds	r3, #1
 800cf44:	6033      	str	r3, [r6, #0]
 800cf46:	68a3      	ldr	r3, [r4, #8]
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	60a3      	str	r3, [r4, #8]
 800cf4c:	e7d9      	b.n	800cf02 <_scanf_i+0xda>
 800cf4e:	f1bb 0f02 	cmp.w	fp, #2
 800cf52:	d1ae      	bne.n	800ceb2 <_scanf_i+0x8a>
 800cf54:	6822      	ldr	r2, [r4, #0]
 800cf56:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cf5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cf5e:	d1bf      	bne.n	800cee0 <_scanf_i+0xb8>
 800cf60:	2310      	movs	r3, #16
 800cf62:	6063      	str	r3, [r4, #4]
 800cf64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf68:	e7a2      	b.n	800ceb0 <_scanf_i+0x88>
 800cf6a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cf6e:	6022      	str	r2, [r4, #0]
 800cf70:	780b      	ldrb	r3, [r1, #0]
 800cf72:	f805 3b01 	strb.w	r3, [r5], #1
 800cf76:	e7de      	b.n	800cf36 <_scanf_i+0x10e>
 800cf78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf7c:	4631      	mov	r1, r6
 800cf7e:	4650      	mov	r0, sl
 800cf80:	4798      	blx	r3
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d0df      	beq.n	800cf46 <_scanf_i+0x11e>
 800cf86:	6823      	ldr	r3, [r4, #0]
 800cf88:	05db      	lsls	r3, r3, #23
 800cf8a:	d50d      	bpl.n	800cfa8 <_scanf_i+0x180>
 800cf8c:	42bd      	cmp	r5, r7
 800cf8e:	d909      	bls.n	800cfa4 <_scanf_i+0x17c>
 800cf90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cf94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf98:	4632      	mov	r2, r6
 800cf9a:	4650      	mov	r0, sl
 800cf9c:	4798      	blx	r3
 800cf9e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800cfa2:	464d      	mov	r5, r9
 800cfa4:	42bd      	cmp	r5, r7
 800cfa6:	d02d      	beq.n	800d004 <_scanf_i+0x1dc>
 800cfa8:	6822      	ldr	r2, [r4, #0]
 800cfaa:	f012 0210 	ands.w	r2, r2, #16
 800cfae:	d113      	bne.n	800cfd8 <_scanf_i+0x1b0>
 800cfb0:	702a      	strb	r2, [r5, #0]
 800cfb2:	6863      	ldr	r3, [r4, #4]
 800cfb4:	9e01      	ldr	r6, [sp, #4]
 800cfb6:	4639      	mov	r1, r7
 800cfb8:	4650      	mov	r0, sl
 800cfba:	47b0      	blx	r6
 800cfbc:	6821      	ldr	r1, [r4, #0]
 800cfbe:	f8d8 3000 	ldr.w	r3, [r8]
 800cfc2:	f011 0f20 	tst.w	r1, #32
 800cfc6:	d013      	beq.n	800cff0 <_scanf_i+0x1c8>
 800cfc8:	1d1a      	adds	r2, r3, #4
 800cfca:	f8c8 2000 	str.w	r2, [r8]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6018      	str	r0, [r3, #0]
 800cfd2:	68e3      	ldr	r3, [r4, #12]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	60e3      	str	r3, [r4, #12]
 800cfd8:	1bed      	subs	r5, r5, r7
 800cfda:	44ab      	add	fp, r5
 800cfdc:	6925      	ldr	r5, [r4, #16]
 800cfde:	445d      	add	r5, fp
 800cfe0:	6125      	str	r5, [r4, #16]
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	b007      	add	sp, #28
 800cfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfea:	f04f 0b00 	mov.w	fp, #0
 800cfee:	e7ca      	b.n	800cf86 <_scanf_i+0x15e>
 800cff0:	1d1a      	adds	r2, r3, #4
 800cff2:	f8c8 2000 	str.w	r2, [r8]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f011 0f01 	tst.w	r1, #1
 800cffc:	bf14      	ite	ne
 800cffe:	8018      	strhne	r0, [r3, #0]
 800d000:	6018      	streq	r0, [r3, #0]
 800d002:	e7e6      	b.n	800cfd2 <_scanf_i+0x1aa>
 800d004:	2001      	movs	r0, #1
 800d006:	e7ed      	b.n	800cfe4 <_scanf_i+0x1bc>
 800d008:	0800e6c0 	.word	0x0800e6c0
 800d00c:	0800d1ed 	.word	0x0800d1ed
 800d010:	0800a14d 	.word	0x0800a14d
 800d014:	0800eb96 	.word	0x0800eb96

0800d018 <_read_r>:
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	4d07      	ldr	r5, [pc, #28]	; (800d038 <_read_r+0x20>)
 800d01c:	4604      	mov	r4, r0
 800d01e:	4608      	mov	r0, r1
 800d020:	4611      	mov	r1, r2
 800d022:	2200      	movs	r2, #0
 800d024:	602a      	str	r2, [r5, #0]
 800d026:	461a      	mov	r2, r3
 800d028:	f7f4 fcd2 	bl	80019d0 <_read>
 800d02c:	1c43      	adds	r3, r0, #1
 800d02e:	d102      	bne.n	800d036 <_read_r+0x1e>
 800d030:	682b      	ldr	r3, [r5, #0]
 800d032:	b103      	cbz	r3, 800d036 <_read_r+0x1e>
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	20000464 	.word	0x20000464
 800d03c:	00000000 	.word	0x00000000

0800d040 <nan>:
 800d040:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d048 <nan+0x8>
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	00000000 	.word	0x00000000
 800d04c:	7ff80000 	.word	0x7ff80000

0800d050 <_sbrk_r>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	4d06      	ldr	r5, [pc, #24]	; (800d06c <_sbrk_r+0x1c>)
 800d054:	2300      	movs	r3, #0
 800d056:	4604      	mov	r4, r0
 800d058:	4608      	mov	r0, r1
 800d05a:	602b      	str	r3, [r5, #0]
 800d05c:	f7f4 fd0a 	bl	8001a74 <_sbrk>
 800d060:	1c43      	adds	r3, r0, #1
 800d062:	d102      	bne.n	800d06a <_sbrk_r+0x1a>
 800d064:	682b      	ldr	r3, [r5, #0]
 800d066:	b103      	cbz	r3, 800d06a <_sbrk_r+0x1a>
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	bd38      	pop	{r3, r4, r5, pc}
 800d06c:	20000464 	.word	0x20000464

0800d070 <__sccl>:
 800d070:	b570      	push	{r4, r5, r6, lr}
 800d072:	780b      	ldrb	r3, [r1, #0]
 800d074:	4604      	mov	r4, r0
 800d076:	2b5e      	cmp	r3, #94	; 0x5e
 800d078:	bf0b      	itete	eq
 800d07a:	784b      	ldrbeq	r3, [r1, #1]
 800d07c:	1c48      	addne	r0, r1, #1
 800d07e:	1c88      	addeq	r0, r1, #2
 800d080:	2200      	movne	r2, #0
 800d082:	bf08      	it	eq
 800d084:	2201      	moveq	r2, #1
 800d086:	1e61      	subs	r1, r4, #1
 800d088:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d08c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d090:	42a9      	cmp	r1, r5
 800d092:	d1fb      	bne.n	800d08c <__sccl+0x1c>
 800d094:	b90b      	cbnz	r3, 800d09a <__sccl+0x2a>
 800d096:	3801      	subs	r0, #1
 800d098:	bd70      	pop	{r4, r5, r6, pc}
 800d09a:	f082 0201 	eor.w	r2, r2, #1
 800d09e:	54e2      	strb	r2, [r4, r3]
 800d0a0:	4605      	mov	r5, r0
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d0a8:	292d      	cmp	r1, #45	; 0x2d
 800d0aa:	d006      	beq.n	800d0ba <__sccl+0x4a>
 800d0ac:	295d      	cmp	r1, #93	; 0x5d
 800d0ae:	d0f3      	beq.n	800d098 <__sccl+0x28>
 800d0b0:	b909      	cbnz	r1, 800d0b6 <__sccl+0x46>
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	e7f0      	b.n	800d098 <__sccl+0x28>
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	e7f1      	b.n	800d09e <__sccl+0x2e>
 800d0ba:	786e      	ldrb	r6, [r5, #1]
 800d0bc:	2e5d      	cmp	r6, #93	; 0x5d
 800d0be:	d0fa      	beq.n	800d0b6 <__sccl+0x46>
 800d0c0:	42b3      	cmp	r3, r6
 800d0c2:	dcf8      	bgt.n	800d0b6 <__sccl+0x46>
 800d0c4:	3502      	adds	r5, #2
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	3101      	adds	r1, #1
 800d0ca:	428e      	cmp	r6, r1
 800d0cc:	5462      	strb	r2, [r4, r1]
 800d0ce:	dcfb      	bgt.n	800d0c8 <__sccl+0x58>
 800d0d0:	1af1      	subs	r1, r6, r3
 800d0d2:	3901      	subs	r1, #1
 800d0d4:	1c58      	adds	r0, r3, #1
 800d0d6:	42b3      	cmp	r3, r6
 800d0d8:	bfa8      	it	ge
 800d0da:	2100      	movge	r1, #0
 800d0dc:	1843      	adds	r3, r0, r1
 800d0de:	e7e0      	b.n	800d0a2 <__sccl+0x32>

0800d0e0 <strncmp>:
 800d0e0:	b510      	push	{r4, lr}
 800d0e2:	b17a      	cbz	r2, 800d104 <strncmp+0x24>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	3901      	subs	r1, #1
 800d0e8:	1884      	adds	r4, r0, r2
 800d0ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d0ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d0f2:	4290      	cmp	r0, r2
 800d0f4:	d101      	bne.n	800d0fa <strncmp+0x1a>
 800d0f6:	42a3      	cmp	r3, r4
 800d0f8:	d101      	bne.n	800d0fe <strncmp+0x1e>
 800d0fa:	1a80      	subs	r0, r0, r2
 800d0fc:	bd10      	pop	{r4, pc}
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d1f3      	bne.n	800d0ea <strncmp+0xa>
 800d102:	e7fa      	b.n	800d0fa <strncmp+0x1a>
 800d104:	4610      	mov	r0, r2
 800d106:	e7f9      	b.n	800d0fc <strncmp+0x1c>

0800d108 <_strtoul_l.constprop.0>:
 800d108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d10c:	4f36      	ldr	r7, [pc, #216]	; (800d1e8 <_strtoul_l.constprop.0+0xe0>)
 800d10e:	4686      	mov	lr, r0
 800d110:	460d      	mov	r5, r1
 800d112:	4628      	mov	r0, r5
 800d114:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d118:	5de6      	ldrb	r6, [r4, r7]
 800d11a:	f016 0608 	ands.w	r6, r6, #8
 800d11e:	d1f8      	bne.n	800d112 <_strtoul_l.constprop.0+0xa>
 800d120:	2c2d      	cmp	r4, #45	; 0x2d
 800d122:	d12f      	bne.n	800d184 <_strtoul_l.constprop.0+0x7c>
 800d124:	782c      	ldrb	r4, [r5, #0]
 800d126:	2601      	movs	r6, #1
 800d128:	1c85      	adds	r5, r0, #2
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d057      	beq.n	800d1de <_strtoul_l.constprop.0+0xd6>
 800d12e:	2b10      	cmp	r3, #16
 800d130:	d109      	bne.n	800d146 <_strtoul_l.constprop.0+0x3e>
 800d132:	2c30      	cmp	r4, #48	; 0x30
 800d134:	d107      	bne.n	800d146 <_strtoul_l.constprop.0+0x3e>
 800d136:	7828      	ldrb	r0, [r5, #0]
 800d138:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d13c:	2858      	cmp	r0, #88	; 0x58
 800d13e:	d149      	bne.n	800d1d4 <_strtoul_l.constprop.0+0xcc>
 800d140:	786c      	ldrb	r4, [r5, #1]
 800d142:	2310      	movs	r3, #16
 800d144:	3502      	adds	r5, #2
 800d146:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800d14a:	2700      	movs	r7, #0
 800d14c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d150:	fb03 f908 	mul.w	r9, r3, r8
 800d154:	ea6f 0909 	mvn.w	r9, r9
 800d158:	4638      	mov	r0, r7
 800d15a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d15e:	f1bc 0f09 	cmp.w	ip, #9
 800d162:	d814      	bhi.n	800d18e <_strtoul_l.constprop.0+0x86>
 800d164:	4664      	mov	r4, ip
 800d166:	42a3      	cmp	r3, r4
 800d168:	dd22      	ble.n	800d1b0 <_strtoul_l.constprop.0+0xa8>
 800d16a:	2f00      	cmp	r7, #0
 800d16c:	db1d      	blt.n	800d1aa <_strtoul_l.constprop.0+0xa2>
 800d16e:	4580      	cmp	r8, r0
 800d170:	d31b      	bcc.n	800d1aa <_strtoul_l.constprop.0+0xa2>
 800d172:	d101      	bne.n	800d178 <_strtoul_l.constprop.0+0x70>
 800d174:	45a1      	cmp	r9, r4
 800d176:	db18      	blt.n	800d1aa <_strtoul_l.constprop.0+0xa2>
 800d178:	fb00 4003 	mla	r0, r0, r3, r4
 800d17c:	2701      	movs	r7, #1
 800d17e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d182:	e7ea      	b.n	800d15a <_strtoul_l.constprop.0+0x52>
 800d184:	2c2b      	cmp	r4, #43	; 0x2b
 800d186:	bf04      	itt	eq
 800d188:	782c      	ldrbeq	r4, [r5, #0]
 800d18a:	1c85      	addeq	r5, r0, #2
 800d18c:	e7cd      	b.n	800d12a <_strtoul_l.constprop.0+0x22>
 800d18e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d192:	f1bc 0f19 	cmp.w	ip, #25
 800d196:	d801      	bhi.n	800d19c <_strtoul_l.constprop.0+0x94>
 800d198:	3c37      	subs	r4, #55	; 0x37
 800d19a:	e7e4      	b.n	800d166 <_strtoul_l.constprop.0+0x5e>
 800d19c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d1a0:	f1bc 0f19 	cmp.w	ip, #25
 800d1a4:	d804      	bhi.n	800d1b0 <_strtoul_l.constprop.0+0xa8>
 800d1a6:	3c57      	subs	r4, #87	; 0x57
 800d1a8:	e7dd      	b.n	800d166 <_strtoul_l.constprop.0+0x5e>
 800d1aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d1ae:	e7e6      	b.n	800d17e <_strtoul_l.constprop.0+0x76>
 800d1b0:	2f00      	cmp	r7, #0
 800d1b2:	da07      	bge.n	800d1c4 <_strtoul_l.constprop.0+0xbc>
 800d1b4:	2322      	movs	r3, #34	; 0x22
 800d1b6:	f8ce 3000 	str.w	r3, [lr]
 800d1ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1be:	b932      	cbnz	r2, 800d1ce <_strtoul_l.constprop.0+0xc6>
 800d1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1c4:	b106      	cbz	r6, 800d1c8 <_strtoul_l.constprop.0+0xc0>
 800d1c6:	4240      	negs	r0, r0
 800d1c8:	2a00      	cmp	r2, #0
 800d1ca:	d0f9      	beq.n	800d1c0 <_strtoul_l.constprop.0+0xb8>
 800d1cc:	b107      	cbz	r7, 800d1d0 <_strtoul_l.constprop.0+0xc8>
 800d1ce:	1e69      	subs	r1, r5, #1
 800d1d0:	6011      	str	r1, [r2, #0]
 800d1d2:	e7f5      	b.n	800d1c0 <_strtoul_l.constprop.0+0xb8>
 800d1d4:	2430      	movs	r4, #48	; 0x30
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1b5      	bne.n	800d146 <_strtoul_l.constprop.0+0x3e>
 800d1da:	2308      	movs	r3, #8
 800d1dc:	e7b3      	b.n	800d146 <_strtoul_l.constprop.0+0x3e>
 800d1de:	2c30      	cmp	r4, #48	; 0x30
 800d1e0:	d0a9      	beq.n	800d136 <_strtoul_l.constprop.0+0x2e>
 800d1e2:	230a      	movs	r3, #10
 800d1e4:	e7af      	b.n	800d146 <_strtoul_l.constprop.0+0x3e>
 800d1e6:	bf00      	nop
 800d1e8:	0800e7a1 	.word	0x0800e7a1

0800d1ec <_strtoul_r>:
 800d1ec:	f7ff bf8c 	b.w	800d108 <_strtoul_l.constprop.0>

0800d1f0 <__submore>:
 800d1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d1f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1fc:	4299      	cmp	r1, r3
 800d1fe:	d11d      	bne.n	800d23c <__submore+0x4c>
 800d200:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d204:	f7ff fa14 	bl	800c630 <_malloc_r>
 800d208:	b918      	cbnz	r0, 800d212 <__submore+0x22>
 800d20a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d216:	63a3      	str	r3, [r4, #56]	; 0x38
 800d218:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d21c:	6360      	str	r0, [r4, #52]	; 0x34
 800d21e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d222:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d226:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d22a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d22e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d232:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d236:	6020      	str	r0, [r4, #0]
 800d238:	2000      	movs	r0, #0
 800d23a:	e7e8      	b.n	800d20e <__submore+0x1e>
 800d23c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d23e:	0077      	lsls	r7, r6, #1
 800d240:	463a      	mov	r2, r7
 800d242:	f000 f895 	bl	800d370 <_realloc_r>
 800d246:	4605      	mov	r5, r0
 800d248:	2800      	cmp	r0, #0
 800d24a:	d0de      	beq.n	800d20a <__submore+0x1a>
 800d24c:	eb00 0806 	add.w	r8, r0, r6
 800d250:	4601      	mov	r1, r0
 800d252:	4632      	mov	r2, r6
 800d254:	4640      	mov	r0, r8
 800d256:	f7fe fc99 	bl	800bb8c <memcpy>
 800d25a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d25e:	f8c4 8000 	str.w	r8, [r4]
 800d262:	e7e9      	b.n	800d238 <__submore+0x48>

0800d264 <__ascii_wctomb>:
 800d264:	b149      	cbz	r1, 800d27a <__ascii_wctomb+0x16>
 800d266:	2aff      	cmp	r2, #255	; 0xff
 800d268:	bf85      	ittet	hi
 800d26a:	238a      	movhi	r3, #138	; 0x8a
 800d26c:	6003      	strhi	r3, [r0, #0]
 800d26e:	700a      	strbls	r2, [r1, #0]
 800d270:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d274:	bf98      	it	ls
 800d276:	2001      	movls	r0, #1
 800d278:	4770      	bx	lr
 800d27a:	4608      	mov	r0, r1
 800d27c:	4770      	bx	lr
	...

0800d280 <__assert_func>:
 800d280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d282:	4614      	mov	r4, r2
 800d284:	461a      	mov	r2, r3
 800d286:	4b09      	ldr	r3, [pc, #36]	; (800d2ac <__assert_func+0x2c>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4605      	mov	r5, r0
 800d28c:	68d8      	ldr	r0, [r3, #12]
 800d28e:	b14c      	cbz	r4, 800d2a4 <__assert_func+0x24>
 800d290:	4b07      	ldr	r3, [pc, #28]	; (800d2b0 <__assert_func+0x30>)
 800d292:	9100      	str	r1, [sp, #0]
 800d294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d298:	4906      	ldr	r1, [pc, #24]	; (800d2b4 <__assert_func+0x34>)
 800d29a:	462b      	mov	r3, r5
 800d29c:	f000 f80e 	bl	800d2bc <fiprintf>
 800d2a0:	f000 f9ee 	bl	800d680 <abort>
 800d2a4:	4b04      	ldr	r3, [pc, #16]	; (800d2b8 <__assert_func+0x38>)
 800d2a6:	461c      	mov	r4, r3
 800d2a8:	e7f3      	b.n	800d292 <__assert_func+0x12>
 800d2aa:	bf00      	nop
 800d2ac:	20000024 	.word	0x20000024
 800d2b0:	0800eb98 	.word	0x0800eb98
 800d2b4:	0800eba5 	.word	0x0800eba5
 800d2b8:	0800ebd3 	.word	0x0800ebd3

0800d2bc <fiprintf>:
 800d2bc:	b40e      	push	{r1, r2, r3}
 800d2be:	b503      	push	{r0, r1, lr}
 800d2c0:	4601      	mov	r1, r0
 800d2c2:	ab03      	add	r3, sp, #12
 800d2c4:	4805      	ldr	r0, [pc, #20]	; (800d2dc <fiprintf+0x20>)
 800d2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ca:	6800      	ldr	r0, [r0, #0]
 800d2cc:	9301      	str	r3, [sp, #4]
 800d2ce:	f000 f8a7 	bl	800d420 <_vfiprintf_r>
 800d2d2:	b002      	add	sp, #8
 800d2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2d8:	b003      	add	sp, #12
 800d2da:	4770      	bx	lr
 800d2dc:	20000024 	.word	0x20000024

0800d2e0 <_fstat_r>:
 800d2e0:	b538      	push	{r3, r4, r5, lr}
 800d2e2:	4d07      	ldr	r5, [pc, #28]	; (800d300 <_fstat_r+0x20>)
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	4608      	mov	r0, r1
 800d2ea:	4611      	mov	r1, r2
 800d2ec:	602b      	str	r3, [r5, #0]
 800d2ee:	f7f4 fb98 	bl	8001a22 <_fstat>
 800d2f2:	1c43      	adds	r3, r0, #1
 800d2f4:	d102      	bne.n	800d2fc <_fstat_r+0x1c>
 800d2f6:	682b      	ldr	r3, [r5, #0]
 800d2f8:	b103      	cbz	r3, 800d2fc <_fstat_r+0x1c>
 800d2fa:	6023      	str	r3, [r4, #0]
 800d2fc:	bd38      	pop	{r3, r4, r5, pc}
 800d2fe:	bf00      	nop
 800d300:	20000464 	.word	0x20000464

0800d304 <_isatty_r>:
 800d304:	b538      	push	{r3, r4, r5, lr}
 800d306:	4d06      	ldr	r5, [pc, #24]	; (800d320 <_isatty_r+0x1c>)
 800d308:	2300      	movs	r3, #0
 800d30a:	4604      	mov	r4, r0
 800d30c:	4608      	mov	r0, r1
 800d30e:	602b      	str	r3, [r5, #0]
 800d310:	f7f4 fb97 	bl	8001a42 <_isatty>
 800d314:	1c43      	adds	r3, r0, #1
 800d316:	d102      	bne.n	800d31e <_isatty_r+0x1a>
 800d318:	682b      	ldr	r3, [r5, #0]
 800d31a:	b103      	cbz	r3, 800d31e <_isatty_r+0x1a>
 800d31c:	6023      	str	r3, [r4, #0]
 800d31e:	bd38      	pop	{r3, r4, r5, pc}
 800d320:	20000464 	.word	0x20000464

0800d324 <memmove>:
 800d324:	4288      	cmp	r0, r1
 800d326:	b510      	push	{r4, lr}
 800d328:	eb01 0402 	add.w	r4, r1, r2
 800d32c:	d902      	bls.n	800d334 <memmove+0x10>
 800d32e:	4284      	cmp	r4, r0
 800d330:	4623      	mov	r3, r4
 800d332:	d807      	bhi.n	800d344 <memmove+0x20>
 800d334:	1e43      	subs	r3, r0, #1
 800d336:	42a1      	cmp	r1, r4
 800d338:	d008      	beq.n	800d34c <memmove+0x28>
 800d33a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d33e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d342:	e7f8      	b.n	800d336 <memmove+0x12>
 800d344:	4402      	add	r2, r0
 800d346:	4601      	mov	r1, r0
 800d348:	428a      	cmp	r2, r1
 800d34a:	d100      	bne.n	800d34e <memmove+0x2a>
 800d34c:	bd10      	pop	{r4, pc}
 800d34e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d356:	e7f7      	b.n	800d348 <memmove+0x24>

0800d358 <__malloc_lock>:
 800d358:	4801      	ldr	r0, [pc, #4]	; (800d360 <__malloc_lock+0x8>)
 800d35a:	f7fe bb82 	b.w	800ba62 <__retarget_lock_acquire_recursive>
 800d35e:	bf00      	nop
 800d360:	20000458 	.word	0x20000458

0800d364 <__malloc_unlock>:
 800d364:	4801      	ldr	r0, [pc, #4]	; (800d36c <__malloc_unlock+0x8>)
 800d366:	f7fe bb7d 	b.w	800ba64 <__retarget_lock_release_recursive>
 800d36a:	bf00      	nop
 800d36c:	20000458 	.word	0x20000458

0800d370 <_realloc_r>:
 800d370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d374:	4680      	mov	r8, r0
 800d376:	4614      	mov	r4, r2
 800d378:	460e      	mov	r6, r1
 800d37a:	b921      	cbnz	r1, 800d386 <_realloc_r+0x16>
 800d37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d380:	4611      	mov	r1, r2
 800d382:	f7ff b955 	b.w	800c630 <_malloc_r>
 800d386:	b92a      	cbnz	r2, 800d394 <_realloc_r+0x24>
 800d388:	f7ff f8e6 	bl	800c558 <_free_r>
 800d38c:	4625      	mov	r5, r4
 800d38e:	4628      	mov	r0, r5
 800d390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d394:	f000 f97b 	bl	800d68e <_malloc_usable_size_r>
 800d398:	4284      	cmp	r4, r0
 800d39a:	4607      	mov	r7, r0
 800d39c:	d802      	bhi.n	800d3a4 <_realloc_r+0x34>
 800d39e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3a2:	d812      	bhi.n	800d3ca <_realloc_r+0x5a>
 800d3a4:	4621      	mov	r1, r4
 800d3a6:	4640      	mov	r0, r8
 800d3a8:	f7ff f942 	bl	800c630 <_malloc_r>
 800d3ac:	4605      	mov	r5, r0
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d0ed      	beq.n	800d38e <_realloc_r+0x1e>
 800d3b2:	42bc      	cmp	r4, r7
 800d3b4:	4622      	mov	r2, r4
 800d3b6:	4631      	mov	r1, r6
 800d3b8:	bf28      	it	cs
 800d3ba:	463a      	movcs	r2, r7
 800d3bc:	f7fe fbe6 	bl	800bb8c <memcpy>
 800d3c0:	4631      	mov	r1, r6
 800d3c2:	4640      	mov	r0, r8
 800d3c4:	f7ff f8c8 	bl	800c558 <_free_r>
 800d3c8:	e7e1      	b.n	800d38e <_realloc_r+0x1e>
 800d3ca:	4635      	mov	r5, r6
 800d3cc:	e7df      	b.n	800d38e <_realloc_r+0x1e>

0800d3ce <__sfputc_r>:
 800d3ce:	6893      	ldr	r3, [r2, #8]
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	b410      	push	{r4}
 800d3d6:	6093      	str	r3, [r2, #8]
 800d3d8:	da08      	bge.n	800d3ec <__sfputc_r+0x1e>
 800d3da:	6994      	ldr	r4, [r2, #24]
 800d3dc:	42a3      	cmp	r3, r4
 800d3de:	db01      	blt.n	800d3e4 <__sfputc_r+0x16>
 800d3e0:	290a      	cmp	r1, #10
 800d3e2:	d103      	bne.n	800d3ec <__sfputc_r+0x1e>
 800d3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3e8:	f7fc beb2 	b.w	800a150 <__swbuf_r>
 800d3ec:	6813      	ldr	r3, [r2, #0]
 800d3ee:	1c58      	adds	r0, r3, #1
 800d3f0:	6010      	str	r0, [r2, #0]
 800d3f2:	7019      	strb	r1, [r3, #0]
 800d3f4:	4608      	mov	r0, r1
 800d3f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <__sfputs_r>:
 800d3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fe:	4606      	mov	r6, r0
 800d400:	460f      	mov	r7, r1
 800d402:	4614      	mov	r4, r2
 800d404:	18d5      	adds	r5, r2, r3
 800d406:	42ac      	cmp	r4, r5
 800d408:	d101      	bne.n	800d40e <__sfputs_r+0x12>
 800d40a:	2000      	movs	r0, #0
 800d40c:	e007      	b.n	800d41e <__sfputs_r+0x22>
 800d40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d412:	463a      	mov	r2, r7
 800d414:	4630      	mov	r0, r6
 800d416:	f7ff ffda 	bl	800d3ce <__sfputc_r>
 800d41a:	1c43      	adds	r3, r0, #1
 800d41c:	d1f3      	bne.n	800d406 <__sfputs_r+0xa>
 800d41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d420 <_vfiprintf_r>:
 800d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d424:	460d      	mov	r5, r1
 800d426:	b09d      	sub	sp, #116	; 0x74
 800d428:	4614      	mov	r4, r2
 800d42a:	4698      	mov	r8, r3
 800d42c:	4606      	mov	r6, r0
 800d42e:	b118      	cbz	r0, 800d438 <_vfiprintf_r+0x18>
 800d430:	6983      	ldr	r3, [r0, #24]
 800d432:	b90b      	cbnz	r3, 800d438 <_vfiprintf_r+0x18>
 800d434:	f7fd ff04 	bl	800b240 <__sinit>
 800d438:	4b89      	ldr	r3, [pc, #548]	; (800d660 <_vfiprintf_r+0x240>)
 800d43a:	429d      	cmp	r5, r3
 800d43c:	d11b      	bne.n	800d476 <_vfiprintf_r+0x56>
 800d43e:	6875      	ldr	r5, [r6, #4]
 800d440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d442:	07d9      	lsls	r1, r3, #31
 800d444:	d405      	bmi.n	800d452 <_vfiprintf_r+0x32>
 800d446:	89ab      	ldrh	r3, [r5, #12]
 800d448:	059a      	lsls	r2, r3, #22
 800d44a:	d402      	bmi.n	800d452 <_vfiprintf_r+0x32>
 800d44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d44e:	f7fe fb08 	bl	800ba62 <__retarget_lock_acquire_recursive>
 800d452:	89ab      	ldrh	r3, [r5, #12]
 800d454:	071b      	lsls	r3, r3, #28
 800d456:	d501      	bpl.n	800d45c <_vfiprintf_r+0x3c>
 800d458:	692b      	ldr	r3, [r5, #16]
 800d45a:	b9eb      	cbnz	r3, 800d498 <_vfiprintf_r+0x78>
 800d45c:	4629      	mov	r1, r5
 800d45e:	4630      	mov	r0, r6
 800d460:	f7fc feda 	bl	800a218 <__swsetup_r>
 800d464:	b1c0      	cbz	r0, 800d498 <_vfiprintf_r+0x78>
 800d466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d468:	07dc      	lsls	r4, r3, #31
 800d46a:	d50e      	bpl.n	800d48a <_vfiprintf_r+0x6a>
 800d46c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d470:	b01d      	add	sp, #116	; 0x74
 800d472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d476:	4b7b      	ldr	r3, [pc, #492]	; (800d664 <_vfiprintf_r+0x244>)
 800d478:	429d      	cmp	r5, r3
 800d47a:	d101      	bne.n	800d480 <_vfiprintf_r+0x60>
 800d47c:	68b5      	ldr	r5, [r6, #8]
 800d47e:	e7df      	b.n	800d440 <_vfiprintf_r+0x20>
 800d480:	4b79      	ldr	r3, [pc, #484]	; (800d668 <_vfiprintf_r+0x248>)
 800d482:	429d      	cmp	r5, r3
 800d484:	bf08      	it	eq
 800d486:	68f5      	ldreq	r5, [r6, #12]
 800d488:	e7da      	b.n	800d440 <_vfiprintf_r+0x20>
 800d48a:	89ab      	ldrh	r3, [r5, #12]
 800d48c:	0598      	lsls	r0, r3, #22
 800d48e:	d4ed      	bmi.n	800d46c <_vfiprintf_r+0x4c>
 800d490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d492:	f7fe fae7 	bl	800ba64 <__retarget_lock_release_recursive>
 800d496:	e7e9      	b.n	800d46c <_vfiprintf_r+0x4c>
 800d498:	2300      	movs	r3, #0
 800d49a:	9309      	str	r3, [sp, #36]	; 0x24
 800d49c:	2320      	movs	r3, #32
 800d49e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4a6:	2330      	movs	r3, #48	; 0x30
 800d4a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d66c <_vfiprintf_r+0x24c>
 800d4ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4b0:	f04f 0901 	mov.w	r9, #1
 800d4b4:	4623      	mov	r3, r4
 800d4b6:	469a      	mov	sl, r3
 800d4b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4bc:	b10a      	cbz	r2, 800d4c2 <_vfiprintf_r+0xa2>
 800d4be:	2a25      	cmp	r2, #37	; 0x25
 800d4c0:	d1f9      	bne.n	800d4b6 <_vfiprintf_r+0x96>
 800d4c2:	ebba 0b04 	subs.w	fp, sl, r4
 800d4c6:	d00b      	beq.n	800d4e0 <_vfiprintf_r+0xc0>
 800d4c8:	465b      	mov	r3, fp
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	f7ff ff94 	bl	800d3fc <__sfputs_r>
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	f000 80aa 	beq.w	800d62e <_vfiprintf_r+0x20e>
 800d4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4dc:	445a      	add	r2, fp
 800d4de:	9209      	str	r2, [sp, #36]	; 0x24
 800d4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	f000 80a2 	beq.w	800d62e <_vfiprintf_r+0x20e>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4f4:	f10a 0a01 	add.w	sl, sl, #1
 800d4f8:	9304      	str	r3, [sp, #16]
 800d4fa:	9307      	str	r3, [sp, #28]
 800d4fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d500:	931a      	str	r3, [sp, #104]	; 0x68
 800d502:	4654      	mov	r4, sl
 800d504:	2205      	movs	r2, #5
 800d506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d50a:	4858      	ldr	r0, [pc, #352]	; (800d66c <_vfiprintf_r+0x24c>)
 800d50c:	f7f2 fe78 	bl	8000200 <memchr>
 800d510:	9a04      	ldr	r2, [sp, #16]
 800d512:	b9d8      	cbnz	r0, 800d54c <_vfiprintf_r+0x12c>
 800d514:	06d1      	lsls	r1, r2, #27
 800d516:	bf44      	itt	mi
 800d518:	2320      	movmi	r3, #32
 800d51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d51e:	0713      	lsls	r3, r2, #28
 800d520:	bf44      	itt	mi
 800d522:	232b      	movmi	r3, #43	; 0x2b
 800d524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d528:	f89a 3000 	ldrb.w	r3, [sl]
 800d52c:	2b2a      	cmp	r3, #42	; 0x2a
 800d52e:	d015      	beq.n	800d55c <_vfiprintf_r+0x13c>
 800d530:	9a07      	ldr	r2, [sp, #28]
 800d532:	4654      	mov	r4, sl
 800d534:	2000      	movs	r0, #0
 800d536:	f04f 0c0a 	mov.w	ip, #10
 800d53a:	4621      	mov	r1, r4
 800d53c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d540:	3b30      	subs	r3, #48	; 0x30
 800d542:	2b09      	cmp	r3, #9
 800d544:	d94e      	bls.n	800d5e4 <_vfiprintf_r+0x1c4>
 800d546:	b1b0      	cbz	r0, 800d576 <_vfiprintf_r+0x156>
 800d548:	9207      	str	r2, [sp, #28]
 800d54a:	e014      	b.n	800d576 <_vfiprintf_r+0x156>
 800d54c:	eba0 0308 	sub.w	r3, r0, r8
 800d550:	fa09 f303 	lsl.w	r3, r9, r3
 800d554:	4313      	orrs	r3, r2
 800d556:	9304      	str	r3, [sp, #16]
 800d558:	46a2      	mov	sl, r4
 800d55a:	e7d2      	b.n	800d502 <_vfiprintf_r+0xe2>
 800d55c:	9b03      	ldr	r3, [sp, #12]
 800d55e:	1d19      	adds	r1, r3, #4
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	9103      	str	r1, [sp, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	bfbb      	ittet	lt
 800d568:	425b      	neglt	r3, r3
 800d56a:	f042 0202 	orrlt.w	r2, r2, #2
 800d56e:	9307      	strge	r3, [sp, #28]
 800d570:	9307      	strlt	r3, [sp, #28]
 800d572:	bfb8      	it	lt
 800d574:	9204      	strlt	r2, [sp, #16]
 800d576:	7823      	ldrb	r3, [r4, #0]
 800d578:	2b2e      	cmp	r3, #46	; 0x2e
 800d57a:	d10c      	bne.n	800d596 <_vfiprintf_r+0x176>
 800d57c:	7863      	ldrb	r3, [r4, #1]
 800d57e:	2b2a      	cmp	r3, #42	; 0x2a
 800d580:	d135      	bne.n	800d5ee <_vfiprintf_r+0x1ce>
 800d582:	9b03      	ldr	r3, [sp, #12]
 800d584:	1d1a      	adds	r2, r3, #4
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	9203      	str	r2, [sp, #12]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	bfb8      	it	lt
 800d58e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d592:	3402      	adds	r4, #2
 800d594:	9305      	str	r3, [sp, #20]
 800d596:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d67c <_vfiprintf_r+0x25c>
 800d59a:	7821      	ldrb	r1, [r4, #0]
 800d59c:	2203      	movs	r2, #3
 800d59e:	4650      	mov	r0, sl
 800d5a0:	f7f2 fe2e 	bl	8000200 <memchr>
 800d5a4:	b140      	cbz	r0, 800d5b8 <_vfiprintf_r+0x198>
 800d5a6:	2340      	movs	r3, #64	; 0x40
 800d5a8:	eba0 000a 	sub.w	r0, r0, sl
 800d5ac:	fa03 f000 	lsl.w	r0, r3, r0
 800d5b0:	9b04      	ldr	r3, [sp, #16]
 800d5b2:	4303      	orrs	r3, r0
 800d5b4:	3401      	adds	r4, #1
 800d5b6:	9304      	str	r3, [sp, #16]
 800d5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5bc:	482c      	ldr	r0, [pc, #176]	; (800d670 <_vfiprintf_r+0x250>)
 800d5be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5c2:	2206      	movs	r2, #6
 800d5c4:	f7f2 fe1c 	bl	8000200 <memchr>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d03f      	beq.n	800d64c <_vfiprintf_r+0x22c>
 800d5cc:	4b29      	ldr	r3, [pc, #164]	; (800d674 <_vfiprintf_r+0x254>)
 800d5ce:	bb1b      	cbnz	r3, 800d618 <_vfiprintf_r+0x1f8>
 800d5d0:	9b03      	ldr	r3, [sp, #12]
 800d5d2:	3307      	adds	r3, #7
 800d5d4:	f023 0307 	bic.w	r3, r3, #7
 800d5d8:	3308      	adds	r3, #8
 800d5da:	9303      	str	r3, [sp, #12]
 800d5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5de:	443b      	add	r3, r7
 800d5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e2:	e767      	b.n	800d4b4 <_vfiprintf_r+0x94>
 800d5e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5e8:	460c      	mov	r4, r1
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	e7a5      	b.n	800d53a <_vfiprintf_r+0x11a>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	3401      	adds	r4, #1
 800d5f2:	9305      	str	r3, [sp, #20]
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	f04f 0c0a 	mov.w	ip, #10
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d600:	3a30      	subs	r2, #48	; 0x30
 800d602:	2a09      	cmp	r2, #9
 800d604:	d903      	bls.n	800d60e <_vfiprintf_r+0x1ee>
 800d606:	2b00      	cmp	r3, #0
 800d608:	d0c5      	beq.n	800d596 <_vfiprintf_r+0x176>
 800d60a:	9105      	str	r1, [sp, #20]
 800d60c:	e7c3      	b.n	800d596 <_vfiprintf_r+0x176>
 800d60e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d612:	4604      	mov	r4, r0
 800d614:	2301      	movs	r3, #1
 800d616:	e7f0      	b.n	800d5fa <_vfiprintf_r+0x1da>
 800d618:	ab03      	add	r3, sp, #12
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	462a      	mov	r2, r5
 800d61e:	4b16      	ldr	r3, [pc, #88]	; (800d678 <_vfiprintf_r+0x258>)
 800d620:	a904      	add	r1, sp, #16
 800d622:	4630      	mov	r0, r6
 800d624:	f7fa fff8 	bl	8008618 <_printf_float>
 800d628:	4607      	mov	r7, r0
 800d62a:	1c78      	adds	r0, r7, #1
 800d62c:	d1d6      	bne.n	800d5dc <_vfiprintf_r+0x1bc>
 800d62e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d630:	07d9      	lsls	r1, r3, #31
 800d632:	d405      	bmi.n	800d640 <_vfiprintf_r+0x220>
 800d634:	89ab      	ldrh	r3, [r5, #12]
 800d636:	059a      	lsls	r2, r3, #22
 800d638:	d402      	bmi.n	800d640 <_vfiprintf_r+0x220>
 800d63a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d63c:	f7fe fa12 	bl	800ba64 <__retarget_lock_release_recursive>
 800d640:	89ab      	ldrh	r3, [r5, #12]
 800d642:	065b      	lsls	r3, r3, #25
 800d644:	f53f af12 	bmi.w	800d46c <_vfiprintf_r+0x4c>
 800d648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d64a:	e711      	b.n	800d470 <_vfiprintf_r+0x50>
 800d64c:	ab03      	add	r3, sp, #12
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	462a      	mov	r2, r5
 800d652:	4b09      	ldr	r3, [pc, #36]	; (800d678 <_vfiprintf_r+0x258>)
 800d654:	a904      	add	r1, sp, #16
 800d656:	4630      	mov	r0, r6
 800d658:	f7fb fa82 	bl	8008b60 <_printf_i>
 800d65c:	e7e4      	b.n	800d628 <_vfiprintf_r+0x208>
 800d65e:	bf00      	nop
 800d660:	0800e954 	.word	0x0800e954
 800d664:	0800e974 	.word	0x0800e974
 800d668:	0800e934 	.word	0x0800e934
 800d66c:	0800eb6c 	.word	0x0800eb6c
 800d670:	0800eb76 	.word	0x0800eb76
 800d674:	08008619 	.word	0x08008619
 800d678:	0800d3fd 	.word	0x0800d3fd
 800d67c:	0800eb72 	.word	0x0800eb72

0800d680 <abort>:
 800d680:	b508      	push	{r3, lr}
 800d682:	2006      	movs	r0, #6
 800d684:	f000 f834 	bl	800d6f0 <raise>
 800d688:	2001      	movs	r0, #1
 800d68a:	f7f4 f997 	bl	80019bc <_exit>

0800d68e <_malloc_usable_size_r>:
 800d68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d692:	1f18      	subs	r0, r3, #4
 800d694:	2b00      	cmp	r3, #0
 800d696:	bfbc      	itt	lt
 800d698:	580b      	ldrlt	r3, [r1, r0]
 800d69a:	18c0      	addlt	r0, r0, r3
 800d69c:	4770      	bx	lr

0800d69e <_raise_r>:
 800d69e:	291f      	cmp	r1, #31
 800d6a0:	b538      	push	{r3, r4, r5, lr}
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	460d      	mov	r5, r1
 800d6a6:	d904      	bls.n	800d6b2 <_raise_r+0x14>
 800d6a8:	2316      	movs	r3, #22
 800d6aa:	6003      	str	r3, [r0, #0]
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6b0:	bd38      	pop	{r3, r4, r5, pc}
 800d6b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d6b4:	b112      	cbz	r2, 800d6bc <_raise_r+0x1e>
 800d6b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6ba:	b94b      	cbnz	r3, 800d6d0 <_raise_r+0x32>
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f000 f831 	bl	800d724 <_getpid_r>
 800d6c2:	462a      	mov	r2, r5
 800d6c4:	4601      	mov	r1, r0
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6cc:	f000 b818 	b.w	800d700 <_kill_r>
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d00a      	beq.n	800d6ea <_raise_r+0x4c>
 800d6d4:	1c59      	adds	r1, r3, #1
 800d6d6:	d103      	bne.n	800d6e0 <_raise_r+0x42>
 800d6d8:	2316      	movs	r3, #22
 800d6da:	6003      	str	r3, [r0, #0]
 800d6dc:	2001      	movs	r0, #1
 800d6de:	e7e7      	b.n	800d6b0 <_raise_r+0x12>
 800d6e0:	2400      	movs	r4, #0
 800d6e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	4798      	blx	r3
 800d6ea:	2000      	movs	r0, #0
 800d6ec:	e7e0      	b.n	800d6b0 <_raise_r+0x12>
	...

0800d6f0 <raise>:
 800d6f0:	4b02      	ldr	r3, [pc, #8]	; (800d6fc <raise+0xc>)
 800d6f2:	4601      	mov	r1, r0
 800d6f4:	6818      	ldr	r0, [r3, #0]
 800d6f6:	f7ff bfd2 	b.w	800d69e <_raise_r>
 800d6fa:	bf00      	nop
 800d6fc:	20000024 	.word	0x20000024

0800d700 <_kill_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4d07      	ldr	r5, [pc, #28]	; (800d720 <_kill_r+0x20>)
 800d704:	2300      	movs	r3, #0
 800d706:	4604      	mov	r4, r0
 800d708:	4608      	mov	r0, r1
 800d70a:	4611      	mov	r1, r2
 800d70c:	602b      	str	r3, [r5, #0]
 800d70e:	f7f4 f945 	bl	800199c <_kill>
 800d712:	1c43      	adds	r3, r0, #1
 800d714:	d102      	bne.n	800d71c <_kill_r+0x1c>
 800d716:	682b      	ldr	r3, [r5, #0]
 800d718:	b103      	cbz	r3, 800d71c <_kill_r+0x1c>
 800d71a:	6023      	str	r3, [r4, #0]
 800d71c:	bd38      	pop	{r3, r4, r5, pc}
 800d71e:	bf00      	nop
 800d720:	20000464 	.word	0x20000464

0800d724 <_getpid_r>:
 800d724:	f7f4 b932 	b.w	800198c <_getpid>

0800d728 <pow>:
 800d728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72a:	ed2d 8b02 	vpush	{d8}
 800d72e:	eeb0 8a40 	vmov.f32	s16, s0
 800d732:	eef0 8a60 	vmov.f32	s17, s1
 800d736:	ec55 4b11 	vmov	r4, r5, d1
 800d73a:	f000 f865 	bl	800d808 <__ieee754_pow>
 800d73e:	4622      	mov	r2, r4
 800d740:	462b      	mov	r3, r5
 800d742:	4620      	mov	r0, r4
 800d744:	4629      	mov	r1, r5
 800d746:	ec57 6b10 	vmov	r6, r7, d0
 800d74a:	f7f3 f9ff 	bl	8000b4c <__aeabi_dcmpun>
 800d74e:	2800      	cmp	r0, #0
 800d750:	d13b      	bne.n	800d7ca <pow+0xa2>
 800d752:	ec51 0b18 	vmov	r0, r1, d8
 800d756:	2200      	movs	r2, #0
 800d758:	2300      	movs	r3, #0
 800d75a:	f7f3 f9c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800d75e:	b1b8      	cbz	r0, 800d790 <pow+0x68>
 800d760:	2200      	movs	r2, #0
 800d762:	2300      	movs	r3, #0
 800d764:	4620      	mov	r0, r4
 800d766:	4629      	mov	r1, r5
 800d768:	f7f3 f9be 	bl	8000ae8 <__aeabi_dcmpeq>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	d146      	bne.n	800d7fe <pow+0xd6>
 800d770:	ec45 4b10 	vmov	d0, r4, r5
 800d774:	f000 fe61 	bl	800e43a <finite>
 800d778:	b338      	cbz	r0, 800d7ca <pow+0xa2>
 800d77a:	2200      	movs	r2, #0
 800d77c:	2300      	movs	r3, #0
 800d77e:	4620      	mov	r0, r4
 800d780:	4629      	mov	r1, r5
 800d782:	f7f3 f9bb 	bl	8000afc <__aeabi_dcmplt>
 800d786:	b300      	cbz	r0, 800d7ca <pow+0xa2>
 800d788:	f7fa fe74 	bl	8008474 <__errno>
 800d78c:	2322      	movs	r3, #34	; 0x22
 800d78e:	e01b      	b.n	800d7c8 <pow+0xa0>
 800d790:	ec47 6b10 	vmov	d0, r6, r7
 800d794:	f000 fe51 	bl	800e43a <finite>
 800d798:	b9e0      	cbnz	r0, 800d7d4 <pow+0xac>
 800d79a:	eeb0 0a48 	vmov.f32	s0, s16
 800d79e:	eef0 0a68 	vmov.f32	s1, s17
 800d7a2:	f000 fe4a 	bl	800e43a <finite>
 800d7a6:	b1a8      	cbz	r0, 800d7d4 <pow+0xac>
 800d7a8:	ec45 4b10 	vmov	d0, r4, r5
 800d7ac:	f000 fe45 	bl	800e43a <finite>
 800d7b0:	b180      	cbz	r0, 800d7d4 <pow+0xac>
 800d7b2:	4632      	mov	r2, r6
 800d7b4:	463b      	mov	r3, r7
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	4639      	mov	r1, r7
 800d7ba:	f7f3 f9c7 	bl	8000b4c <__aeabi_dcmpun>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d0e2      	beq.n	800d788 <pow+0x60>
 800d7c2:	f7fa fe57 	bl	8008474 <__errno>
 800d7c6:	2321      	movs	r3, #33	; 0x21
 800d7c8:	6003      	str	r3, [r0, #0]
 800d7ca:	ecbd 8b02 	vpop	{d8}
 800d7ce:	ec47 6b10 	vmov	d0, r6, r7
 800d7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	4630      	mov	r0, r6
 800d7da:	4639      	mov	r1, r7
 800d7dc:	f7f3 f984 	bl	8000ae8 <__aeabi_dcmpeq>
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d0f2      	beq.n	800d7ca <pow+0xa2>
 800d7e4:	eeb0 0a48 	vmov.f32	s0, s16
 800d7e8:	eef0 0a68 	vmov.f32	s1, s17
 800d7ec:	f000 fe25 	bl	800e43a <finite>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d0ea      	beq.n	800d7ca <pow+0xa2>
 800d7f4:	ec45 4b10 	vmov	d0, r4, r5
 800d7f8:	f000 fe1f 	bl	800e43a <finite>
 800d7fc:	e7c3      	b.n	800d786 <pow+0x5e>
 800d7fe:	4f01      	ldr	r7, [pc, #4]	; (800d804 <pow+0xdc>)
 800d800:	2600      	movs	r6, #0
 800d802:	e7e2      	b.n	800d7ca <pow+0xa2>
 800d804:	3ff00000 	.word	0x3ff00000

0800d808 <__ieee754_pow>:
 800d808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80c:	ed2d 8b06 	vpush	{d8-d10}
 800d810:	b089      	sub	sp, #36	; 0x24
 800d812:	ed8d 1b00 	vstr	d1, [sp]
 800d816:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d81a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d81e:	ea58 0102 	orrs.w	r1, r8, r2
 800d822:	ec57 6b10 	vmov	r6, r7, d0
 800d826:	d115      	bne.n	800d854 <__ieee754_pow+0x4c>
 800d828:	19b3      	adds	r3, r6, r6
 800d82a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d82e:	4152      	adcs	r2, r2
 800d830:	4299      	cmp	r1, r3
 800d832:	4b89      	ldr	r3, [pc, #548]	; (800da58 <__ieee754_pow+0x250>)
 800d834:	4193      	sbcs	r3, r2
 800d836:	f080 84d2 	bcs.w	800e1de <__ieee754_pow+0x9d6>
 800d83a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d83e:	4630      	mov	r0, r6
 800d840:	4639      	mov	r1, r7
 800d842:	f7f2 fd33 	bl	80002ac <__adddf3>
 800d846:	ec41 0b10 	vmov	d0, r0, r1
 800d84a:	b009      	add	sp, #36	; 0x24
 800d84c:	ecbd 8b06 	vpop	{d8-d10}
 800d850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d854:	4b81      	ldr	r3, [pc, #516]	; (800da5c <__ieee754_pow+0x254>)
 800d856:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d85a:	429c      	cmp	r4, r3
 800d85c:	ee10 aa10 	vmov	sl, s0
 800d860:	463d      	mov	r5, r7
 800d862:	dc06      	bgt.n	800d872 <__ieee754_pow+0x6a>
 800d864:	d101      	bne.n	800d86a <__ieee754_pow+0x62>
 800d866:	2e00      	cmp	r6, #0
 800d868:	d1e7      	bne.n	800d83a <__ieee754_pow+0x32>
 800d86a:	4598      	cmp	r8, r3
 800d86c:	dc01      	bgt.n	800d872 <__ieee754_pow+0x6a>
 800d86e:	d10f      	bne.n	800d890 <__ieee754_pow+0x88>
 800d870:	b172      	cbz	r2, 800d890 <__ieee754_pow+0x88>
 800d872:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d876:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d87a:	ea55 050a 	orrs.w	r5, r5, sl
 800d87e:	d1dc      	bne.n	800d83a <__ieee754_pow+0x32>
 800d880:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d884:	18db      	adds	r3, r3, r3
 800d886:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d88a:	4152      	adcs	r2, r2
 800d88c:	429d      	cmp	r5, r3
 800d88e:	e7d0      	b.n	800d832 <__ieee754_pow+0x2a>
 800d890:	2d00      	cmp	r5, #0
 800d892:	da3b      	bge.n	800d90c <__ieee754_pow+0x104>
 800d894:	4b72      	ldr	r3, [pc, #456]	; (800da60 <__ieee754_pow+0x258>)
 800d896:	4598      	cmp	r8, r3
 800d898:	dc51      	bgt.n	800d93e <__ieee754_pow+0x136>
 800d89a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d89e:	4598      	cmp	r8, r3
 800d8a0:	f340 84ac 	ble.w	800e1fc <__ieee754_pow+0x9f4>
 800d8a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d8a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d8ac:	2b14      	cmp	r3, #20
 800d8ae:	dd0f      	ble.n	800d8d0 <__ieee754_pow+0xc8>
 800d8b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d8b4:	fa22 f103 	lsr.w	r1, r2, r3
 800d8b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	f040 849d 	bne.w	800e1fc <__ieee754_pow+0x9f4>
 800d8c2:	f001 0101 	and.w	r1, r1, #1
 800d8c6:	f1c1 0302 	rsb	r3, r1, #2
 800d8ca:	9304      	str	r3, [sp, #16]
 800d8cc:	b182      	cbz	r2, 800d8f0 <__ieee754_pow+0xe8>
 800d8ce:	e05f      	b.n	800d990 <__ieee754_pow+0x188>
 800d8d0:	2a00      	cmp	r2, #0
 800d8d2:	d15b      	bne.n	800d98c <__ieee754_pow+0x184>
 800d8d4:	f1c3 0314 	rsb	r3, r3, #20
 800d8d8:	fa48 f103 	asr.w	r1, r8, r3
 800d8dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d8e0:	4543      	cmp	r3, r8
 800d8e2:	f040 8488 	bne.w	800e1f6 <__ieee754_pow+0x9ee>
 800d8e6:	f001 0101 	and.w	r1, r1, #1
 800d8ea:	f1c1 0302 	rsb	r3, r1, #2
 800d8ee:	9304      	str	r3, [sp, #16]
 800d8f0:	4b5c      	ldr	r3, [pc, #368]	; (800da64 <__ieee754_pow+0x25c>)
 800d8f2:	4598      	cmp	r8, r3
 800d8f4:	d132      	bne.n	800d95c <__ieee754_pow+0x154>
 800d8f6:	f1b9 0f00 	cmp.w	r9, #0
 800d8fa:	f280 8478 	bge.w	800e1ee <__ieee754_pow+0x9e6>
 800d8fe:	4959      	ldr	r1, [pc, #356]	; (800da64 <__ieee754_pow+0x25c>)
 800d900:	4632      	mov	r2, r6
 800d902:	463b      	mov	r3, r7
 800d904:	2000      	movs	r0, #0
 800d906:	f7f2 ffb1 	bl	800086c <__aeabi_ddiv>
 800d90a:	e79c      	b.n	800d846 <__ieee754_pow+0x3e>
 800d90c:	2300      	movs	r3, #0
 800d90e:	9304      	str	r3, [sp, #16]
 800d910:	2a00      	cmp	r2, #0
 800d912:	d13d      	bne.n	800d990 <__ieee754_pow+0x188>
 800d914:	4b51      	ldr	r3, [pc, #324]	; (800da5c <__ieee754_pow+0x254>)
 800d916:	4598      	cmp	r8, r3
 800d918:	d1ea      	bne.n	800d8f0 <__ieee754_pow+0xe8>
 800d91a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d91e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d922:	ea53 030a 	orrs.w	r3, r3, sl
 800d926:	f000 845a 	beq.w	800e1de <__ieee754_pow+0x9d6>
 800d92a:	4b4f      	ldr	r3, [pc, #316]	; (800da68 <__ieee754_pow+0x260>)
 800d92c:	429c      	cmp	r4, r3
 800d92e:	dd08      	ble.n	800d942 <__ieee754_pow+0x13a>
 800d930:	f1b9 0f00 	cmp.w	r9, #0
 800d934:	f2c0 8457 	blt.w	800e1e6 <__ieee754_pow+0x9de>
 800d938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d93c:	e783      	b.n	800d846 <__ieee754_pow+0x3e>
 800d93e:	2302      	movs	r3, #2
 800d940:	e7e5      	b.n	800d90e <__ieee754_pow+0x106>
 800d942:	f1b9 0f00 	cmp.w	r9, #0
 800d946:	f04f 0000 	mov.w	r0, #0
 800d94a:	f04f 0100 	mov.w	r1, #0
 800d94e:	f6bf af7a 	bge.w	800d846 <__ieee754_pow+0x3e>
 800d952:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d956:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d95a:	e774      	b.n	800d846 <__ieee754_pow+0x3e>
 800d95c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d960:	d106      	bne.n	800d970 <__ieee754_pow+0x168>
 800d962:	4632      	mov	r2, r6
 800d964:	463b      	mov	r3, r7
 800d966:	4630      	mov	r0, r6
 800d968:	4639      	mov	r1, r7
 800d96a:	f7f2 fe55 	bl	8000618 <__aeabi_dmul>
 800d96e:	e76a      	b.n	800d846 <__ieee754_pow+0x3e>
 800d970:	4b3e      	ldr	r3, [pc, #248]	; (800da6c <__ieee754_pow+0x264>)
 800d972:	4599      	cmp	r9, r3
 800d974:	d10c      	bne.n	800d990 <__ieee754_pow+0x188>
 800d976:	2d00      	cmp	r5, #0
 800d978:	db0a      	blt.n	800d990 <__ieee754_pow+0x188>
 800d97a:	ec47 6b10 	vmov	d0, r6, r7
 800d97e:	b009      	add	sp, #36	; 0x24
 800d980:	ecbd 8b06 	vpop	{d8-d10}
 800d984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d988:	f000 bc6c 	b.w	800e264 <__ieee754_sqrt>
 800d98c:	2300      	movs	r3, #0
 800d98e:	9304      	str	r3, [sp, #16]
 800d990:	ec47 6b10 	vmov	d0, r6, r7
 800d994:	f000 fd48 	bl	800e428 <fabs>
 800d998:	ec51 0b10 	vmov	r0, r1, d0
 800d99c:	f1ba 0f00 	cmp.w	sl, #0
 800d9a0:	d129      	bne.n	800d9f6 <__ieee754_pow+0x1ee>
 800d9a2:	b124      	cbz	r4, 800d9ae <__ieee754_pow+0x1a6>
 800d9a4:	4b2f      	ldr	r3, [pc, #188]	; (800da64 <__ieee754_pow+0x25c>)
 800d9a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d123      	bne.n	800d9f6 <__ieee754_pow+0x1ee>
 800d9ae:	f1b9 0f00 	cmp.w	r9, #0
 800d9b2:	da05      	bge.n	800d9c0 <__ieee754_pow+0x1b8>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	492a      	ldr	r1, [pc, #168]	; (800da64 <__ieee754_pow+0x25c>)
 800d9bc:	f7f2 ff56 	bl	800086c <__aeabi_ddiv>
 800d9c0:	2d00      	cmp	r5, #0
 800d9c2:	f6bf af40 	bge.w	800d846 <__ieee754_pow+0x3e>
 800d9c6:	9b04      	ldr	r3, [sp, #16]
 800d9c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d9cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d9d0:	4323      	orrs	r3, r4
 800d9d2:	d108      	bne.n	800d9e6 <__ieee754_pow+0x1de>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	4610      	mov	r0, r2
 800d9da:	4619      	mov	r1, r3
 800d9dc:	f7f2 fc64 	bl	80002a8 <__aeabi_dsub>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	e78f      	b.n	800d906 <__ieee754_pow+0xfe>
 800d9e6:	9b04      	ldr	r3, [sp, #16]
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	f47f af2c 	bne.w	800d846 <__ieee754_pow+0x3e>
 800d9ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	e727      	b.n	800d846 <__ieee754_pow+0x3e>
 800d9f6:	0feb      	lsrs	r3, r5, #31
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	9306      	str	r3, [sp, #24]
 800d9fc:	9a06      	ldr	r2, [sp, #24]
 800d9fe:	9b04      	ldr	r3, [sp, #16]
 800da00:	4313      	orrs	r3, r2
 800da02:	d102      	bne.n	800da0a <__ieee754_pow+0x202>
 800da04:	4632      	mov	r2, r6
 800da06:	463b      	mov	r3, r7
 800da08:	e7e6      	b.n	800d9d8 <__ieee754_pow+0x1d0>
 800da0a:	4b19      	ldr	r3, [pc, #100]	; (800da70 <__ieee754_pow+0x268>)
 800da0c:	4598      	cmp	r8, r3
 800da0e:	f340 80fb 	ble.w	800dc08 <__ieee754_pow+0x400>
 800da12:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800da16:	4598      	cmp	r8, r3
 800da18:	4b13      	ldr	r3, [pc, #76]	; (800da68 <__ieee754_pow+0x260>)
 800da1a:	dd0c      	ble.n	800da36 <__ieee754_pow+0x22e>
 800da1c:	429c      	cmp	r4, r3
 800da1e:	dc0f      	bgt.n	800da40 <__ieee754_pow+0x238>
 800da20:	f1b9 0f00 	cmp.w	r9, #0
 800da24:	da0f      	bge.n	800da46 <__ieee754_pow+0x23e>
 800da26:	2000      	movs	r0, #0
 800da28:	b009      	add	sp, #36	; 0x24
 800da2a:	ecbd 8b06 	vpop	{d8-d10}
 800da2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da32:	f000 bcf0 	b.w	800e416 <__math_oflow>
 800da36:	429c      	cmp	r4, r3
 800da38:	dbf2      	blt.n	800da20 <__ieee754_pow+0x218>
 800da3a:	4b0a      	ldr	r3, [pc, #40]	; (800da64 <__ieee754_pow+0x25c>)
 800da3c:	429c      	cmp	r4, r3
 800da3e:	dd19      	ble.n	800da74 <__ieee754_pow+0x26c>
 800da40:	f1b9 0f00 	cmp.w	r9, #0
 800da44:	dcef      	bgt.n	800da26 <__ieee754_pow+0x21e>
 800da46:	2000      	movs	r0, #0
 800da48:	b009      	add	sp, #36	; 0x24
 800da4a:	ecbd 8b06 	vpop	{d8-d10}
 800da4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da52:	f000 bcd7 	b.w	800e404 <__math_uflow>
 800da56:	bf00      	nop
 800da58:	fff00000 	.word	0xfff00000
 800da5c:	7ff00000 	.word	0x7ff00000
 800da60:	433fffff 	.word	0x433fffff
 800da64:	3ff00000 	.word	0x3ff00000
 800da68:	3fefffff 	.word	0x3fefffff
 800da6c:	3fe00000 	.word	0x3fe00000
 800da70:	41e00000 	.word	0x41e00000
 800da74:	4b60      	ldr	r3, [pc, #384]	; (800dbf8 <__ieee754_pow+0x3f0>)
 800da76:	2200      	movs	r2, #0
 800da78:	f7f2 fc16 	bl	80002a8 <__aeabi_dsub>
 800da7c:	a354      	add	r3, pc, #336	; (adr r3, 800dbd0 <__ieee754_pow+0x3c8>)
 800da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da82:	4604      	mov	r4, r0
 800da84:	460d      	mov	r5, r1
 800da86:	f7f2 fdc7 	bl	8000618 <__aeabi_dmul>
 800da8a:	a353      	add	r3, pc, #332	; (adr r3, 800dbd8 <__ieee754_pow+0x3d0>)
 800da8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da90:	4606      	mov	r6, r0
 800da92:	460f      	mov	r7, r1
 800da94:	4620      	mov	r0, r4
 800da96:	4629      	mov	r1, r5
 800da98:	f7f2 fdbe 	bl	8000618 <__aeabi_dmul>
 800da9c:	4b57      	ldr	r3, [pc, #348]	; (800dbfc <__ieee754_pow+0x3f4>)
 800da9e:	4682      	mov	sl, r0
 800daa0:	468b      	mov	fp, r1
 800daa2:	2200      	movs	r2, #0
 800daa4:	4620      	mov	r0, r4
 800daa6:	4629      	mov	r1, r5
 800daa8:	f7f2 fdb6 	bl	8000618 <__aeabi_dmul>
 800daac:	4602      	mov	r2, r0
 800daae:	460b      	mov	r3, r1
 800dab0:	a14b      	add	r1, pc, #300	; (adr r1, 800dbe0 <__ieee754_pow+0x3d8>)
 800dab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dab6:	f7f2 fbf7 	bl	80002a8 <__aeabi_dsub>
 800daba:	4622      	mov	r2, r4
 800dabc:	462b      	mov	r3, r5
 800dabe:	f7f2 fdab 	bl	8000618 <__aeabi_dmul>
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	2000      	movs	r0, #0
 800dac8:	494d      	ldr	r1, [pc, #308]	; (800dc00 <__ieee754_pow+0x3f8>)
 800daca:	f7f2 fbed 	bl	80002a8 <__aeabi_dsub>
 800dace:	4622      	mov	r2, r4
 800dad0:	4680      	mov	r8, r0
 800dad2:	4689      	mov	r9, r1
 800dad4:	462b      	mov	r3, r5
 800dad6:	4620      	mov	r0, r4
 800dad8:	4629      	mov	r1, r5
 800dada:	f7f2 fd9d 	bl	8000618 <__aeabi_dmul>
 800dade:	4602      	mov	r2, r0
 800dae0:	460b      	mov	r3, r1
 800dae2:	4640      	mov	r0, r8
 800dae4:	4649      	mov	r1, r9
 800dae6:	f7f2 fd97 	bl	8000618 <__aeabi_dmul>
 800daea:	a33f      	add	r3, pc, #252	; (adr r3, 800dbe8 <__ieee754_pow+0x3e0>)
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	f7f2 fd92 	bl	8000618 <__aeabi_dmul>
 800daf4:	4602      	mov	r2, r0
 800daf6:	460b      	mov	r3, r1
 800daf8:	4650      	mov	r0, sl
 800dafa:	4659      	mov	r1, fp
 800dafc:	f7f2 fbd4 	bl	80002a8 <__aeabi_dsub>
 800db00:	4602      	mov	r2, r0
 800db02:	460b      	mov	r3, r1
 800db04:	4680      	mov	r8, r0
 800db06:	4689      	mov	r9, r1
 800db08:	4630      	mov	r0, r6
 800db0a:	4639      	mov	r1, r7
 800db0c:	f7f2 fbce 	bl	80002ac <__adddf3>
 800db10:	2000      	movs	r0, #0
 800db12:	4632      	mov	r2, r6
 800db14:	463b      	mov	r3, r7
 800db16:	4604      	mov	r4, r0
 800db18:	460d      	mov	r5, r1
 800db1a:	f7f2 fbc5 	bl	80002a8 <__aeabi_dsub>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4640      	mov	r0, r8
 800db24:	4649      	mov	r1, r9
 800db26:	f7f2 fbbf 	bl	80002a8 <__aeabi_dsub>
 800db2a:	9b04      	ldr	r3, [sp, #16]
 800db2c:	9a06      	ldr	r2, [sp, #24]
 800db2e:	3b01      	subs	r3, #1
 800db30:	4313      	orrs	r3, r2
 800db32:	4682      	mov	sl, r0
 800db34:	468b      	mov	fp, r1
 800db36:	f040 81e7 	bne.w	800df08 <__ieee754_pow+0x700>
 800db3a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800dbf0 <__ieee754_pow+0x3e8>
 800db3e:	eeb0 8a47 	vmov.f32	s16, s14
 800db42:	eef0 8a67 	vmov.f32	s17, s15
 800db46:	e9dd 6700 	ldrd	r6, r7, [sp]
 800db4a:	2600      	movs	r6, #0
 800db4c:	4632      	mov	r2, r6
 800db4e:	463b      	mov	r3, r7
 800db50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db54:	f7f2 fba8 	bl	80002a8 <__aeabi_dsub>
 800db58:	4622      	mov	r2, r4
 800db5a:	462b      	mov	r3, r5
 800db5c:	f7f2 fd5c 	bl	8000618 <__aeabi_dmul>
 800db60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db64:	4680      	mov	r8, r0
 800db66:	4689      	mov	r9, r1
 800db68:	4650      	mov	r0, sl
 800db6a:	4659      	mov	r1, fp
 800db6c:	f7f2 fd54 	bl	8000618 <__aeabi_dmul>
 800db70:	4602      	mov	r2, r0
 800db72:	460b      	mov	r3, r1
 800db74:	4640      	mov	r0, r8
 800db76:	4649      	mov	r1, r9
 800db78:	f7f2 fb98 	bl	80002ac <__adddf3>
 800db7c:	4632      	mov	r2, r6
 800db7e:	463b      	mov	r3, r7
 800db80:	4680      	mov	r8, r0
 800db82:	4689      	mov	r9, r1
 800db84:	4620      	mov	r0, r4
 800db86:	4629      	mov	r1, r5
 800db88:	f7f2 fd46 	bl	8000618 <__aeabi_dmul>
 800db8c:	460b      	mov	r3, r1
 800db8e:	4604      	mov	r4, r0
 800db90:	460d      	mov	r5, r1
 800db92:	4602      	mov	r2, r0
 800db94:	4649      	mov	r1, r9
 800db96:	4640      	mov	r0, r8
 800db98:	f7f2 fb88 	bl	80002ac <__adddf3>
 800db9c:	4b19      	ldr	r3, [pc, #100]	; (800dc04 <__ieee754_pow+0x3fc>)
 800db9e:	4299      	cmp	r1, r3
 800dba0:	ec45 4b19 	vmov	d9, r4, r5
 800dba4:	4606      	mov	r6, r0
 800dba6:	460f      	mov	r7, r1
 800dba8:	468b      	mov	fp, r1
 800dbaa:	f340 82f1 	ble.w	800e190 <__ieee754_pow+0x988>
 800dbae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dbb2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dbb6:	4303      	orrs	r3, r0
 800dbb8:	f000 81e4 	beq.w	800df84 <__ieee754_pow+0x77c>
 800dbbc:	ec51 0b18 	vmov	r0, r1, d8
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	f7f2 ff9a 	bl	8000afc <__aeabi_dcmplt>
 800dbc8:	3800      	subs	r0, #0
 800dbca:	bf18      	it	ne
 800dbcc:	2001      	movne	r0, #1
 800dbce:	e72b      	b.n	800da28 <__ieee754_pow+0x220>
 800dbd0:	60000000 	.word	0x60000000
 800dbd4:	3ff71547 	.word	0x3ff71547
 800dbd8:	f85ddf44 	.word	0xf85ddf44
 800dbdc:	3e54ae0b 	.word	0x3e54ae0b
 800dbe0:	55555555 	.word	0x55555555
 800dbe4:	3fd55555 	.word	0x3fd55555
 800dbe8:	652b82fe 	.word	0x652b82fe
 800dbec:	3ff71547 	.word	0x3ff71547
 800dbf0:	00000000 	.word	0x00000000
 800dbf4:	bff00000 	.word	0xbff00000
 800dbf8:	3ff00000 	.word	0x3ff00000
 800dbfc:	3fd00000 	.word	0x3fd00000
 800dc00:	3fe00000 	.word	0x3fe00000
 800dc04:	408fffff 	.word	0x408fffff
 800dc08:	4bd5      	ldr	r3, [pc, #852]	; (800df60 <__ieee754_pow+0x758>)
 800dc0a:	402b      	ands	r3, r5
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	b92b      	cbnz	r3, 800dc1c <__ieee754_pow+0x414>
 800dc10:	4bd4      	ldr	r3, [pc, #848]	; (800df64 <__ieee754_pow+0x75c>)
 800dc12:	f7f2 fd01 	bl	8000618 <__aeabi_dmul>
 800dc16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	1523      	asrs	r3, r4, #20
 800dc1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dc22:	4413      	add	r3, r2
 800dc24:	9305      	str	r3, [sp, #20]
 800dc26:	4bd0      	ldr	r3, [pc, #832]	; (800df68 <__ieee754_pow+0x760>)
 800dc28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dc2c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dc30:	429c      	cmp	r4, r3
 800dc32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dc36:	dd08      	ble.n	800dc4a <__ieee754_pow+0x442>
 800dc38:	4bcc      	ldr	r3, [pc, #816]	; (800df6c <__ieee754_pow+0x764>)
 800dc3a:	429c      	cmp	r4, r3
 800dc3c:	f340 8162 	ble.w	800df04 <__ieee754_pow+0x6fc>
 800dc40:	9b05      	ldr	r3, [sp, #20]
 800dc42:	3301      	adds	r3, #1
 800dc44:	9305      	str	r3, [sp, #20]
 800dc46:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dc4a:	2400      	movs	r4, #0
 800dc4c:	00e3      	lsls	r3, r4, #3
 800dc4e:	9307      	str	r3, [sp, #28]
 800dc50:	4bc7      	ldr	r3, [pc, #796]	; (800df70 <__ieee754_pow+0x768>)
 800dc52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc56:	ed93 7b00 	vldr	d7, [r3]
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	ec53 2b17 	vmov	r2, r3, d7
 800dc60:	eeb0 9a47 	vmov.f32	s18, s14
 800dc64:	eef0 9a67 	vmov.f32	s19, s15
 800dc68:	4682      	mov	sl, r0
 800dc6a:	f7f2 fb1d 	bl	80002a8 <__aeabi_dsub>
 800dc6e:	4652      	mov	r2, sl
 800dc70:	4606      	mov	r6, r0
 800dc72:	460f      	mov	r7, r1
 800dc74:	462b      	mov	r3, r5
 800dc76:	ec51 0b19 	vmov	r0, r1, d9
 800dc7a:	f7f2 fb17 	bl	80002ac <__adddf3>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	460b      	mov	r3, r1
 800dc82:	2000      	movs	r0, #0
 800dc84:	49bb      	ldr	r1, [pc, #748]	; (800df74 <__ieee754_pow+0x76c>)
 800dc86:	f7f2 fdf1 	bl	800086c <__aeabi_ddiv>
 800dc8a:	ec41 0b1a 	vmov	d10, r0, r1
 800dc8e:	4602      	mov	r2, r0
 800dc90:	460b      	mov	r3, r1
 800dc92:	4630      	mov	r0, r6
 800dc94:	4639      	mov	r1, r7
 800dc96:	f7f2 fcbf 	bl	8000618 <__aeabi_dmul>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dca0:	9302      	str	r3, [sp, #8]
 800dca2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dca6:	46ab      	mov	fp, r5
 800dca8:	106d      	asrs	r5, r5, #1
 800dcaa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dcae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dcb2:	ec41 0b18 	vmov	d8, r0, r1
 800dcb6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dcba:	2200      	movs	r2, #0
 800dcbc:	4640      	mov	r0, r8
 800dcbe:	4649      	mov	r1, r9
 800dcc0:	4614      	mov	r4, r2
 800dcc2:	461d      	mov	r5, r3
 800dcc4:	f7f2 fca8 	bl	8000618 <__aeabi_dmul>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	4630      	mov	r0, r6
 800dcce:	4639      	mov	r1, r7
 800dcd0:	f7f2 faea 	bl	80002a8 <__aeabi_dsub>
 800dcd4:	ec53 2b19 	vmov	r2, r3, d9
 800dcd8:	4606      	mov	r6, r0
 800dcda:	460f      	mov	r7, r1
 800dcdc:	4620      	mov	r0, r4
 800dcde:	4629      	mov	r1, r5
 800dce0:	f7f2 fae2 	bl	80002a8 <__aeabi_dsub>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	4650      	mov	r0, sl
 800dcea:	4659      	mov	r1, fp
 800dcec:	f7f2 fadc 	bl	80002a8 <__aeabi_dsub>
 800dcf0:	4642      	mov	r2, r8
 800dcf2:	464b      	mov	r3, r9
 800dcf4:	f7f2 fc90 	bl	8000618 <__aeabi_dmul>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	4639      	mov	r1, r7
 800dd00:	f7f2 fad2 	bl	80002a8 <__aeabi_dsub>
 800dd04:	ec53 2b1a 	vmov	r2, r3, d10
 800dd08:	f7f2 fc86 	bl	8000618 <__aeabi_dmul>
 800dd0c:	ec53 2b18 	vmov	r2, r3, d8
 800dd10:	ec41 0b19 	vmov	d9, r0, r1
 800dd14:	ec51 0b18 	vmov	r0, r1, d8
 800dd18:	f7f2 fc7e 	bl	8000618 <__aeabi_dmul>
 800dd1c:	a37c      	add	r3, pc, #496	; (adr r3, 800df10 <__ieee754_pow+0x708>)
 800dd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd22:	4604      	mov	r4, r0
 800dd24:	460d      	mov	r5, r1
 800dd26:	f7f2 fc77 	bl	8000618 <__aeabi_dmul>
 800dd2a:	a37b      	add	r3, pc, #492	; (adr r3, 800df18 <__ieee754_pow+0x710>)
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	f7f2 fabc 	bl	80002ac <__adddf3>
 800dd34:	4622      	mov	r2, r4
 800dd36:	462b      	mov	r3, r5
 800dd38:	f7f2 fc6e 	bl	8000618 <__aeabi_dmul>
 800dd3c:	a378      	add	r3, pc, #480	; (adr r3, 800df20 <__ieee754_pow+0x718>)
 800dd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd42:	f7f2 fab3 	bl	80002ac <__adddf3>
 800dd46:	4622      	mov	r2, r4
 800dd48:	462b      	mov	r3, r5
 800dd4a:	f7f2 fc65 	bl	8000618 <__aeabi_dmul>
 800dd4e:	a376      	add	r3, pc, #472	; (adr r3, 800df28 <__ieee754_pow+0x720>)
 800dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd54:	f7f2 faaa 	bl	80002ac <__adddf3>
 800dd58:	4622      	mov	r2, r4
 800dd5a:	462b      	mov	r3, r5
 800dd5c:	f7f2 fc5c 	bl	8000618 <__aeabi_dmul>
 800dd60:	a373      	add	r3, pc, #460	; (adr r3, 800df30 <__ieee754_pow+0x728>)
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	f7f2 faa1 	bl	80002ac <__adddf3>
 800dd6a:	4622      	mov	r2, r4
 800dd6c:	462b      	mov	r3, r5
 800dd6e:	f7f2 fc53 	bl	8000618 <__aeabi_dmul>
 800dd72:	a371      	add	r3, pc, #452	; (adr r3, 800df38 <__ieee754_pow+0x730>)
 800dd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd78:	f7f2 fa98 	bl	80002ac <__adddf3>
 800dd7c:	4622      	mov	r2, r4
 800dd7e:	4606      	mov	r6, r0
 800dd80:	460f      	mov	r7, r1
 800dd82:	462b      	mov	r3, r5
 800dd84:	4620      	mov	r0, r4
 800dd86:	4629      	mov	r1, r5
 800dd88:	f7f2 fc46 	bl	8000618 <__aeabi_dmul>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4630      	mov	r0, r6
 800dd92:	4639      	mov	r1, r7
 800dd94:	f7f2 fc40 	bl	8000618 <__aeabi_dmul>
 800dd98:	4642      	mov	r2, r8
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	460d      	mov	r5, r1
 800dd9e:	464b      	mov	r3, r9
 800dda0:	ec51 0b18 	vmov	r0, r1, d8
 800dda4:	f7f2 fa82 	bl	80002ac <__adddf3>
 800dda8:	ec53 2b19 	vmov	r2, r3, d9
 800ddac:	f7f2 fc34 	bl	8000618 <__aeabi_dmul>
 800ddb0:	4622      	mov	r2, r4
 800ddb2:	462b      	mov	r3, r5
 800ddb4:	f7f2 fa7a 	bl	80002ac <__adddf3>
 800ddb8:	4642      	mov	r2, r8
 800ddba:	4682      	mov	sl, r0
 800ddbc:	468b      	mov	fp, r1
 800ddbe:	464b      	mov	r3, r9
 800ddc0:	4640      	mov	r0, r8
 800ddc2:	4649      	mov	r1, r9
 800ddc4:	f7f2 fc28 	bl	8000618 <__aeabi_dmul>
 800ddc8:	4b6b      	ldr	r3, [pc, #428]	; (800df78 <__ieee754_pow+0x770>)
 800ddca:	2200      	movs	r2, #0
 800ddcc:	4606      	mov	r6, r0
 800ddce:	460f      	mov	r7, r1
 800ddd0:	f7f2 fa6c 	bl	80002ac <__adddf3>
 800ddd4:	4652      	mov	r2, sl
 800ddd6:	465b      	mov	r3, fp
 800ddd8:	f7f2 fa68 	bl	80002ac <__adddf3>
 800dddc:	2000      	movs	r0, #0
 800ddde:	4604      	mov	r4, r0
 800dde0:	460d      	mov	r5, r1
 800dde2:	4602      	mov	r2, r0
 800dde4:	460b      	mov	r3, r1
 800dde6:	4640      	mov	r0, r8
 800dde8:	4649      	mov	r1, r9
 800ddea:	f7f2 fc15 	bl	8000618 <__aeabi_dmul>
 800ddee:	4b62      	ldr	r3, [pc, #392]	; (800df78 <__ieee754_pow+0x770>)
 800ddf0:	4680      	mov	r8, r0
 800ddf2:	4689      	mov	r9, r1
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	f7f2 fa55 	bl	80002a8 <__aeabi_dsub>
 800ddfe:	4632      	mov	r2, r6
 800de00:	463b      	mov	r3, r7
 800de02:	f7f2 fa51 	bl	80002a8 <__aeabi_dsub>
 800de06:	4602      	mov	r2, r0
 800de08:	460b      	mov	r3, r1
 800de0a:	4650      	mov	r0, sl
 800de0c:	4659      	mov	r1, fp
 800de0e:	f7f2 fa4b 	bl	80002a8 <__aeabi_dsub>
 800de12:	ec53 2b18 	vmov	r2, r3, d8
 800de16:	f7f2 fbff 	bl	8000618 <__aeabi_dmul>
 800de1a:	4622      	mov	r2, r4
 800de1c:	4606      	mov	r6, r0
 800de1e:	460f      	mov	r7, r1
 800de20:	462b      	mov	r3, r5
 800de22:	ec51 0b19 	vmov	r0, r1, d9
 800de26:	f7f2 fbf7 	bl	8000618 <__aeabi_dmul>
 800de2a:	4602      	mov	r2, r0
 800de2c:	460b      	mov	r3, r1
 800de2e:	4630      	mov	r0, r6
 800de30:	4639      	mov	r1, r7
 800de32:	f7f2 fa3b 	bl	80002ac <__adddf3>
 800de36:	4606      	mov	r6, r0
 800de38:	460f      	mov	r7, r1
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	4640      	mov	r0, r8
 800de40:	4649      	mov	r1, r9
 800de42:	f7f2 fa33 	bl	80002ac <__adddf3>
 800de46:	a33e      	add	r3, pc, #248	; (adr r3, 800df40 <__ieee754_pow+0x738>)
 800de48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4c:	2000      	movs	r0, #0
 800de4e:	4604      	mov	r4, r0
 800de50:	460d      	mov	r5, r1
 800de52:	f7f2 fbe1 	bl	8000618 <__aeabi_dmul>
 800de56:	4642      	mov	r2, r8
 800de58:	ec41 0b18 	vmov	d8, r0, r1
 800de5c:	464b      	mov	r3, r9
 800de5e:	4620      	mov	r0, r4
 800de60:	4629      	mov	r1, r5
 800de62:	f7f2 fa21 	bl	80002a8 <__aeabi_dsub>
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
 800de6a:	4630      	mov	r0, r6
 800de6c:	4639      	mov	r1, r7
 800de6e:	f7f2 fa1b 	bl	80002a8 <__aeabi_dsub>
 800de72:	a335      	add	r3, pc, #212	; (adr r3, 800df48 <__ieee754_pow+0x740>)
 800de74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de78:	f7f2 fbce 	bl	8000618 <__aeabi_dmul>
 800de7c:	a334      	add	r3, pc, #208	; (adr r3, 800df50 <__ieee754_pow+0x748>)
 800de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de82:	4606      	mov	r6, r0
 800de84:	460f      	mov	r7, r1
 800de86:	4620      	mov	r0, r4
 800de88:	4629      	mov	r1, r5
 800de8a:	f7f2 fbc5 	bl	8000618 <__aeabi_dmul>
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4630      	mov	r0, r6
 800de94:	4639      	mov	r1, r7
 800de96:	f7f2 fa09 	bl	80002ac <__adddf3>
 800de9a:	9a07      	ldr	r2, [sp, #28]
 800de9c:	4b37      	ldr	r3, [pc, #220]	; (800df7c <__ieee754_pow+0x774>)
 800de9e:	4413      	add	r3, r2
 800dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea4:	f7f2 fa02 	bl	80002ac <__adddf3>
 800dea8:	4682      	mov	sl, r0
 800deaa:	9805      	ldr	r0, [sp, #20]
 800deac:	468b      	mov	fp, r1
 800deae:	f7f2 fb49 	bl	8000544 <__aeabi_i2d>
 800deb2:	9a07      	ldr	r2, [sp, #28]
 800deb4:	4b32      	ldr	r3, [pc, #200]	; (800df80 <__ieee754_pow+0x778>)
 800deb6:	4413      	add	r3, r2
 800deb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800debc:	4606      	mov	r6, r0
 800debe:	460f      	mov	r7, r1
 800dec0:	4652      	mov	r2, sl
 800dec2:	465b      	mov	r3, fp
 800dec4:	ec51 0b18 	vmov	r0, r1, d8
 800dec8:	f7f2 f9f0 	bl	80002ac <__adddf3>
 800decc:	4642      	mov	r2, r8
 800dece:	464b      	mov	r3, r9
 800ded0:	f7f2 f9ec 	bl	80002ac <__adddf3>
 800ded4:	4632      	mov	r2, r6
 800ded6:	463b      	mov	r3, r7
 800ded8:	f7f2 f9e8 	bl	80002ac <__adddf3>
 800dedc:	2000      	movs	r0, #0
 800dede:	4632      	mov	r2, r6
 800dee0:	463b      	mov	r3, r7
 800dee2:	4604      	mov	r4, r0
 800dee4:	460d      	mov	r5, r1
 800dee6:	f7f2 f9df 	bl	80002a8 <__aeabi_dsub>
 800deea:	4642      	mov	r2, r8
 800deec:	464b      	mov	r3, r9
 800deee:	f7f2 f9db 	bl	80002a8 <__aeabi_dsub>
 800def2:	ec53 2b18 	vmov	r2, r3, d8
 800def6:	f7f2 f9d7 	bl	80002a8 <__aeabi_dsub>
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	4650      	mov	r0, sl
 800df00:	4659      	mov	r1, fp
 800df02:	e610      	b.n	800db26 <__ieee754_pow+0x31e>
 800df04:	2401      	movs	r4, #1
 800df06:	e6a1      	b.n	800dc4c <__ieee754_pow+0x444>
 800df08:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800df58 <__ieee754_pow+0x750>
 800df0c:	e617      	b.n	800db3e <__ieee754_pow+0x336>
 800df0e:	bf00      	nop
 800df10:	4a454eef 	.word	0x4a454eef
 800df14:	3fca7e28 	.word	0x3fca7e28
 800df18:	93c9db65 	.word	0x93c9db65
 800df1c:	3fcd864a 	.word	0x3fcd864a
 800df20:	a91d4101 	.word	0xa91d4101
 800df24:	3fd17460 	.word	0x3fd17460
 800df28:	518f264d 	.word	0x518f264d
 800df2c:	3fd55555 	.word	0x3fd55555
 800df30:	db6fabff 	.word	0xdb6fabff
 800df34:	3fdb6db6 	.word	0x3fdb6db6
 800df38:	33333303 	.word	0x33333303
 800df3c:	3fe33333 	.word	0x3fe33333
 800df40:	e0000000 	.word	0xe0000000
 800df44:	3feec709 	.word	0x3feec709
 800df48:	dc3a03fd 	.word	0xdc3a03fd
 800df4c:	3feec709 	.word	0x3feec709
 800df50:	145b01f5 	.word	0x145b01f5
 800df54:	be3e2fe0 	.word	0xbe3e2fe0
 800df58:	00000000 	.word	0x00000000
 800df5c:	3ff00000 	.word	0x3ff00000
 800df60:	7ff00000 	.word	0x7ff00000
 800df64:	43400000 	.word	0x43400000
 800df68:	0003988e 	.word	0x0003988e
 800df6c:	000bb679 	.word	0x000bb679
 800df70:	0800ebd8 	.word	0x0800ebd8
 800df74:	3ff00000 	.word	0x3ff00000
 800df78:	40080000 	.word	0x40080000
 800df7c:	0800ebf8 	.word	0x0800ebf8
 800df80:	0800ebe8 	.word	0x0800ebe8
 800df84:	a3b5      	add	r3, pc, #724	; (adr r3, 800e25c <__ieee754_pow+0xa54>)
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	4640      	mov	r0, r8
 800df8c:	4649      	mov	r1, r9
 800df8e:	f7f2 f98d 	bl	80002ac <__adddf3>
 800df92:	4622      	mov	r2, r4
 800df94:	ec41 0b1a 	vmov	d10, r0, r1
 800df98:	462b      	mov	r3, r5
 800df9a:	4630      	mov	r0, r6
 800df9c:	4639      	mov	r1, r7
 800df9e:	f7f2 f983 	bl	80002a8 <__aeabi_dsub>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	ec51 0b1a 	vmov	r0, r1, d10
 800dfaa:	f7f2 fdc5 	bl	8000b38 <__aeabi_dcmpgt>
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	f47f ae04 	bne.w	800dbbc <__ieee754_pow+0x3b4>
 800dfb4:	4aa4      	ldr	r2, [pc, #656]	; (800e248 <__ieee754_pow+0xa40>)
 800dfb6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	f340 8108 	ble.w	800e1d0 <__ieee754_pow+0x9c8>
 800dfc0:	151b      	asrs	r3, r3, #20
 800dfc2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dfc6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dfca:	fa4a f303 	asr.w	r3, sl, r3
 800dfce:	445b      	add	r3, fp
 800dfd0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dfd4:	4e9d      	ldr	r6, [pc, #628]	; (800e24c <__ieee754_pow+0xa44>)
 800dfd6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dfda:	4116      	asrs	r6, r2
 800dfdc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	ea23 0106 	bic.w	r1, r3, r6
 800dfe6:	f1c2 0214 	rsb	r2, r2, #20
 800dfea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dfee:	fa4a fa02 	asr.w	sl, sl, r2
 800dff2:	f1bb 0f00 	cmp.w	fp, #0
 800dff6:	4602      	mov	r2, r0
 800dff8:	460b      	mov	r3, r1
 800dffa:	4620      	mov	r0, r4
 800dffc:	4629      	mov	r1, r5
 800dffe:	bfb8      	it	lt
 800e000:	f1ca 0a00 	rsblt	sl, sl, #0
 800e004:	f7f2 f950 	bl	80002a8 <__aeabi_dsub>
 800e008:	ec41 0b19 	vmov	d9, r0, r1
 800e00c:	4642      	mov	r2, r8
 800e00e:	464b      	mov	r3, r9
 800e010:	ec51 0b19 	vmov	r0, r1, d9
 800e014:	f7f2 f94a 	bl	80002ac <__adddf3>
 800e018:	a37b      	add	r3, pc, #492	; (adr r3, 800e208 <__ieee754_pow+0xa00>)
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	2000      	movs	r0, #0
 800e020:	4604      	mov	r4, r0
 800e022:	460d      	mov	r5, r1
 800e024:	f7f2 faf8 	bl	8000618 <__aeabi_dmul>
 800e028:	ec53 2b19 	vmov	r2, r3, d9
 800e02c:	4606      	mov	r6, r0
 800e02e:	460f      	mov	r7, r1
 800e030:	4620      	mov	r0, r4
 800e032:	4629      	mov	r1, r5
 800e034:	f7f2 f938 	bl	80002a8 <__aeabi_dsub>
 800e038:	4602      	mov	r2, r0
 800e03a:	460b      	mov	r3, r1
 800e03c:	4640      	mov	r0, r8
 800e03e:	4649      	mov	r1, r9
 800e040:	f7f2 f932 	bl	80002a8 <__aeabi_dsub>
 800e044:	a372      	add	r3, pc, #456	; (adr r3, 800e210 <__ieee754_pow+0xa08>)
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	f7f2 fae5 	bl	8000618 <__aeabi_dmul>
 800e04e:	a372      	add	r3, pc, #456	; (adr r3, 800e218 <__ieee754_pow+0xa10>)
 800e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e054:	4680      	mov	r8, r0
 800e056:	4689      	mov	r9, r1
 800e058:	4620      	mov	r0, r4
 800e05a:	4629      	mov	r1, r5
 800e05c:	f7f2 fadc 	bl	8000618 <__aeabi_dmul>
 800e060:	4602      	mov	r2, r0
 800e062:	460b      	mov	r3, r1
 800e064:	4640      	mov	r0, r8
 800e066:	4649      	mov	r1, r9
 800e068:	f7f2 f920 	bl	80002ac <__adddf3>
 800e06c:	4604      	mov	r4, r0
 800e06e:	460d      	mov	r5, r1
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	4630      	mov	r0, r6
 800e076:	4639      	mov	r1, r7
 800e078:	f7f2 f918 	bl	80002ac <__adddf3>
 800e07c:	4632      	mov	r2, r6
 800e07e:	463b      	mov	r3, r7
 800e080:	4680      	mov	r8, r0
 800e082:	4689      	mov	r9, r1
 800e084:	f7f2 f910 	bl	80002a8 <__aeabi_dsub>
 800e088:	4602      	mov	r2, r0
 800e08a:	460b      	mov	r3, r1
 800e08c:	4620      	mov	r0, r4
 800e08e:	4629      	mov	r1, r5
 800e090:	f7f2 f90a 	bl	80002a8 <__aeabi_dsub>
 800e094:	4642      	mov	r2, r8
 800e096:	4606      	mov	r6, r0
 800e098:	460f      	mov	r7, r1
 800e09a:	464b      	mov	r3, r9
 800e09c:	4640      	mov	r0, r8
 800e09e:	4649      	mov	r1, r9
 800e0a0:	f7f2 faba 	bl	8000618 <__aeabi_dmul>
 800e0a4:	a35e      	add	r3, pc, #376	; (adr r3, 800e220 <__ieee754_pow+0xa18>)
 800e0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	460d      	mov	r5, r1
 800e0ae:	f7f2 fab3 	bl	8000618 <__aeabi_dmul>
 800e0b2:	a35d      	add	r3, pc, #372	; (adr r3, 800e228 <__ieee754_pow+0xa20>)
 800e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b8:	f7f2 f8f6 	bl	80002a8 <__aeabi_dsub>
 800e0bc:	4622      	mov	r2, r4
 800e0be:	462b      	mov	r3, r5
 800e0c0:	f7f2 faaa 	bl	8000618 <__aeabi_dmul>
 800e0c4:	a35a      	add	r3, pc, #360	; (adr r3, 800e230 <__ieee754_pow+0xa28>)
 800e0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ca:	f7f2 f8ef 	bl	80002ac <__adddf3>
 800e0ce:	4622      	mov	r2, r4
 800e0d0:	462b      	mov	r3, r5
 800e0d2:	f7f2 faa1 	bl	8000618 <__aeabi_dmul>
 800e0d6:	a358      	add	r3, pc, #352	; (adr r3, 800e238 <__ieee754_pow+0xa30>)
 800e0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0dc:	f7f2 f8e4 	bl	80002a8 <__aeabi_dsub>
 800e0e0:	4622      	mov	r2, r4
 800e0e2:	462b      	mov	r3, r5
 800e0e4:	f7f2 fa98 	bl	8000618 <__aeabi_dmul>
 800e0e8:	a355      	add	r3, pc, #340	; (adr r3, 800e240 <__ieee754_pow+0xa38>)
 800e0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ee:	f7f2 f8dd 	bl	80002ac <__adddf3>
 800e0f2:	4622      	mov	r2, r4
 800e0f4:	462b      	mov	r3, r5
 800e0f6:	f7f2 fa8f 	bl	8000618 <__aeabi_dmul>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	4640      	mov	r0, r8
 800e100:	4649      	mov	r1, r9
 800e102:	f7f2 f8d1 	bl	80002a8 <__aeabi_dsub>
 800e106:	4604      	mov	r4, r0
 800e108:	460d      	mov	r5, r1
 800e10a:	4602      	mov	r2, r0
 800e10c:	460b      	mov	r3, r1
 800e10e:	4640      	mov	r0, r8
 800e110:	4649      	mov	r1, r9
 800e112:	f7f2 fa81 	bl	8000618 <__aeabi_dmul>
 800e116:	2200      	movs	r2, #0
 800e118:	ec41 0b19 	vmov	d9, r0, r1
 800e11c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e120:	4620      	mov	r0, r4
 800e122:	4629      	mov	r1, r5
 800e124:	f7f2 f8c0 	bl	80002a8 <__aeabi_dsub>
 800e128:	4602      	mov	r2, r0
 800e12a:	460b      	mov	r3, r1
 800e12c:	ec51 0b19 	vmov	r0, r1, d9
 800e130:	f7f2 fb9c 	bl	800086c <__aeabi_ddiv>
 800e134:	4632      	mov	r2, r6
 800e136:	4604      	mov	r4, r0
 800e138:	460d      	mov	r5, r1
 800e13a:	463b      	mov	r3, r7
 800e13c:	4640      	mov	r0, r8
 800e13e:	4649      	mov	r1, r9
 800e140:	f7f2 fa6a 	bl	8000618 <__aeabi_dmul>
 800e144:	4632      	mov	r2, r6
 800e146:	463b      	mov	r3, r7
 800e148:	f7f2 f8b0 	bl	80002ac <__adddf3>
 800e14c:	4602      	mov	r2, r0
 800e14e:	460b      	mov	r3, r1
 800e150:	4620      	mov	r0, r4
 800e152:	4629      	mov	r1, r5
 800e154:	f7f2 f8a8 	bl	80002a8 <__aeabi_dsub>
 800e158:	4642      	mov	r2, r8
 800e15a:	464b      	mov	r3, r9
 800e15c:	f7f2 f8a4 	bl	80002a8 <__aeabi_dsub>
 800e160:	460b      	mov	r3, r1
 800e162:	4602      	mov	r2, r0
 800e164:	493a      	ldr	r1, [pc, #232]	; (800e250 <__ieee754_pow+0xa48>)
 800e166:	2000      	movs	r0, #0
 800e168:	f7f2 f89e 	bl	80002a8 <__aeabi_dsub>
 800e16c:	ec41 0b10 	vmov	d0, r0, r1
 800e170:	ee10 3a90 	vmov	r3, s1
 800e174:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e17c:	da2b      	bge.n	800e1d6 <__ieee754_pow+0x9ce>
 800e17e:	4650      	mov	r0, sl
 800e180:	f000 f966 	bl	800e450 <scalbn>
 800e184:	ec51 0b10 	vmov	r0, r1, d0
 800e188:	ec53 2b18 	vmov	r2, r3, d8
 800e18c:	f7ff bbed 	b.w	800d96a <__ieee754_pow+0x162>
 800e190:	4b30      	ldr	r3, [pc, #192]	; (800e254 <__ieee754_pow+0xa4c>)
 800e192:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e196:	429e      	cmp	r6, r3
 800e198:	f77f af0c 	ble.w	800dfb4 <__ieee754_pow+0x7ac>
 800e19c:	4b2e      	ldr	r3, [pc, #184]	; (800e258 <__ieee754_pow+0xa50>)
 800e19e:	440b      	add	r3, r1
 800e1a0:	4303      	orrs	r3, r0
 800e1a2:	d009      	beq.n	800e1b8 <__ieee754_pow+0x9b0>
 800e1a4:	ec51 0b18 	vmov	r0, r1, d8
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	f7f2 fca6 	bl	8000afc <__aeabi_dcmplt>
 800e1b0:	3800      	subs	r0, #0
 800e1b2:	bf18      	it	ne
 800e1b4:	2001      	movne	r0, #1
 800e1b6:	e447      	b.n	800da48 <__ieee754_pow+0x240>
 800e1b8:	4622      	mov	r2, r4
 800e1ba:	462b      	mov	r3, r5
 800e1bc:	f7f2 f874 	bl	80002a8 <__aeabi_dsub>
 800e1c0:	4642      	mov	r2, r8
 800e1c2:	464b      	mov	r3, r9
 800e1c4:	f7f2 fcae 	bl	8000b24 <__aeabi_dcmpge>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	f43f aef3 	beq.w	800dfb4 <__ieee754_pow+0x7ac>
 800e1ce:	e7e9      	b.n	800e1a4 <__ieee754_pow+0x99c>
 800e1d0:	f04f 0a00 	mov.w	sl, #0
 800e1d4:	e71a      	b.n	800e00c <__ieee754_pow+0x804>
 800e1d6:	ec51 0b10 	vmov	r0, r1, d0
 800e1da:	4619      	mov	r1, r3
 800e1dc:	e7d4      	b.n	800e188 <__ieee754_pow+0x980>
 800e1de:	491c      	ldr	r1, [pc, #112]	; (800e250 <__ieee754_pow+0xa48>)
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	f7ff bb30 	b.w	800d846 <__ieee754_pow+0x3e>
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	f7ff bb2c 	b.w	800d846 <__ieee754_pow+0x3e>
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	4639      	mov	r1, r7
 800e1f2:	f7ff bb28 	b.w	800d846 <__ieee754_pow+0x3e>
 800e1f6:	9204      	str	r2, [sp, #16]
 800e1f8:	f7ff bb7a 	b.w	800d8f0 <__ieee754_pow+0xe8>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	f7ff bb64 	b.w	800d8ca <__ieee754_pow+0xc2>
 800e202:	bf00      	nop
 800e204:	f3af 8000 	nop.w
 800e208:	00000000 	.word	0x00000000
 800e20c:	3fe62e43 	.word	0x3fe62e43
 800e210:	fefa39ef 	.word	0xfefa39ef
 800e214:	3fe62e42 	.word	0x3fe62e42
 800e218:	0ca86c39 	.word	0x0ca86c39
 800e21c:	be205c61 	.word	0xbe205c61
 800e220:	72bea4d0 	.word	0x72bea4d0
 800e224:	3e663769 	.word	0x3e663769
 800e228:	c5d26bf1 	.word	0xc5d26bf1
 800e22c:	3ebbbd41 	.word	0x3ebbbd41
 800e230:	af25de2c 	.word	0xaf25de2c
 800e234:	3f11566a 	.word	0x3f11566a
 800e238:	16bebd93 	.word	0x16bebd93
 800e23c:	3f66c16c 	.word	0x3f66c16c
 800e240:	5555553e 	.word	0x5555553e
 800e244:	3fc55555 	.word	0x3fc55555
 800e248:	3fe00000 	.word	0x3fe00000
 800e24c:	000fffff 	.word	0x000fffff
 800e250:	3ff00000 	.word	0x3ff00000
 800e254:	4090cbff 	.word	0x4090cbff
 800e258:	3f6f3400 	.word	0x3f6f3400
 800e25c:	652b82fe 	.word	0x652b82fe
 800e260:	3c971547 	.word	0x3c971547

0800e264 <__ieee754_sqrt>:
 800e264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e268:	ec55 4b10 	vmov	r4, r5, d0
 800e26c:	4e55      	ldr	r6, [pc, #340]	; (800e3c4 <__ieee754_sqrt+0x160>)
 800e26e:	43ae      	bics	r6, r5
 800e270:	ee10 0a10 	vmov	r0, s0
 800e274:	ee10 3a10 	vmov	r3, s0
 800e278:	462a      	mov	r2, r5
 800e27a:	4629      	mov	r1, r5
 800e27c:	d110      	bne.n	800e2a0 <__ieee754_sqrt+0x3c>
 800e27e:	ee10 2a10 	vmov	r2, s0
 800e282:	462b      	mov	r3, r5
 800e284:	f7f2 f9c8 	bl	8000618 <__aeabi_dmul>
 800e288:	4602      	mov	r2, r0
 800e28a:	460b      	mov	r3, r1
 800e28c:	4620      	mov	r0, r4
 800e28e:	4629      	mov	r1, r5
 800e290:	f7f2 f80c 	bl	80002ac <__adddf3>
 800e294:	4604      	mov	r4, r0
 800e296:	460d      	mov	r5, r1
 800e298:	ec45 4b10 	vmov	d0, r4, r5
 800e29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a0:	2d00      	cmp	r5, #0
 800e2a2:	dc10      	bgt.n	800e2c6 <__ieee754_sqrt+0x62>
 800e2a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e2a8:	4330      	orrs	r0, r6
 800e2aa:	d0f5      	beq.n	800e298 <__ieee754_sqrt+0x34>
 800e2ac:	b15d      	cbz	r5, 800e2c6 <__ieee754_sqrt+0x62>
 800e2ae:	ee10 2a10 	vmov	r2, s0
 800e2b2:	462b      	mov	r3, r5
 800e2b4:	ee10 0a10 	vmov	r0, s0
 800e2b8:	f7f1 fff6 	bl	80002a8 <__aeabi_dsub>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	460b      	mov	r3, r1
 800e2c0:	f7f2 fad4 	bl	800086c <__aeabi_ddiv>
 800e2c4:	e7e6      	b.n	800e294 <__ieee754_sqrt+0x30>
 800e2c6:	1512      	asrs	r2, r2, #20
 800e2c8:	d074      	beq.n	800e3b4 <__ieee754_sqrt+0x150>
 800e2ca:	07d4      	lsls	r4, r2, #31
 800e2cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e2d0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e2d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e2d8:	bf5e      	ittt	pl
 800e2da:	0fda      	lsrpl	r2, r3, #31
 800e2dc:	005b      	lslpl	r3, r3, #1
 800e2de:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e2e2:	2400      	movs	r4, #0
 800e2e4:	0fda      	lsrs	r2, r3, #31
 800e2e6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e2ea:	107f      	asrs	r7, r7, #1
 800e2ec:	005b      	lsls	r3, r3, #1
 800e2ee:	2516      	movs	r5, #22
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e2f6:	1886      	adds	r6, r0, r2
 800e2f8:	428e      	cmp	r6, r1
 800e2fa:	bfde      	ittt	le
 800e2fc:	1b89      	suble	r1, r1, r6
 800e2fe:	18b0      	addle	r0, r6, r2
 800e300:	18a4      	addle	r4, r4, r2
 800e302:	0049      	lsls	r1, r1, #1
 800e304:	3d01      	subs	r5, #1
 800e306:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e30a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e30e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e312:	d1f0      	bne.n	800e2f6 <__ieee754_sqrt+0x92>
 800e314:	462a      	mov	r2, r5
 800e316:	f04f 0e20 	mov.w	lr, #32
 800e31a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e31e:	4281      	cmp	r1, r0
 800e320:	eb06 0c05 	add.w	ip, r6, r5
 800e324:	dc02      	bgt.n	800e32c <__ieee754_sqrt+0xc8>
 800e326:	d113      	bne.n	800e350 <__ieee754_sqrt+0xec>
 800e328:	459c      	cmp	ip, r3
 800e32a:	d811      	bhi.n	800e350 <__ieee754_sqrt+0xec>
 800e32c:	f1bc 0f00 	cmp.w	ip, #0
 800e330:	eb0c 0506 	add.w	r5, ip, r6
 800e334:	da43      	bge.n	800e3be <__ieee754_sqrt+0x15a>
 800e336:	2d00      	cmp	r5, #0
 800e338:	db41      	blt.n	800e3be <__ieee754_sqrt+0x15a>
 800e33a:	f100 0801 	add.w	r8, r0, #1
 800e33e:	1a09      	subs	r1, r1, r0
 800e340:	459c      	cmp	ip, r3
 800e342:	bf88      	it	hi
 800e344:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800e348:	eba3 030c 	sub.w	r3, r3, ip
 800e34c:	4432      	add	r2, r6
 800e34e:	4640      	mov	r0, r8
 800e350:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e354:	f1be 0e01 	subs.w	lr, lr, #1
 800e358:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e35c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e360:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e364:	d1db      	bne.n	800e31e <__ieee754_sqrt+0xba>
 800e366:	430b      	orrs	r3, r1
 800e368:	d006      	beq.n	800e378 <__ieee754_sqrt+0x114>
 800e36a:	1c50      	adds	r0, r2, #1
 800e36c:	bf13      	iteet	ne
 800e36e:	3201      	addne	r2, #1
 800e370:	3401      	addeq	r4, #1
 800e372:	4672      	moveq	r2, lr
 800e374:	f022 0201 	bicne.w	r2, r2, #1
 800e378:	1063      	asrs	r3, r4, #1
 800e37a:	0852      	lsrs	r2, r2, #1
 800e37c:	07e1      	lsls	r1, r4, #31
 800e37e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e382:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e386:	bf48      	it	mi
 800e388:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e38c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e390:	4614      	mov	r4, r2
 800e392:	e781      	b.n	800e298 <__ieee754_sqrt+0x34>
 800e394:	0ad9      	lsrs	r1, r3, #11
 800e396:	3815      	subs	r0, #21
 800e398:	055b      	lsls	r3, r3, #21
 800e39a:	2900      	cmp	r1, #0
 800e39c:	d0fa      	beq.n	800e394 <__ieee754_sqrt+0x130>
 800e39e:	02cd      	lsls	r5, r1, #11
 800e3a0:	d50a      	bpl.n	800e3b8 <__ieee754_sqrt+0x154>
 800e3a2:	f1c2 0420 	rsb	r4, r2, #32
 800e3a6:	fa23 f404 	lsr.w	r4, r3, r4
 800e3aa:	1e55      	subs	r5, r2, #1
 800e3ac:	4093      	lsls	r3, r2
 800e3ae:	4321      	orrs	r1, r4
 800e3b0:	1b42      	subs	r2, r0, r5
 800e3b2:	e78a      	b.n	800e2ca <__ieee754_sqrt+0x66>
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	e7f0      	b.n	800e39a <__ieee754_sqrt+0x136>
 800e3b8:	0049      	lsls	r1, r1, #1
 800e3ba:	3201      	adds	r2, #1
 800e3bc:	e7ef      	b.n	800e39e <__ieee754_sqrt+0x13a>
 800e3be:	4680      	mov	r8, r0
 800e3c0:	e7bd      	b.n	800e33e <__ieee754_sqrt+0xda>
 800e3c2:	bf00      	nop
 800e3c4:	7ff00000 	.word	0x7ff00000

0800e3c8 <with_errno>:
 800e3c8:	b570      	push	{r4, r5, r6, lr}
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	460d      	mov	r5, r1
 800e3ce:	4616      	mov	r6, r2
 800e3d0:	f7fa f850 	bl	8008474 <__errno>
 800e3d4:	4629      	mov	r1, r5
 800e3d6:	6006      	str	r6, [r0, #0]
 800e3d8:	4620      	mov	r0, r4
 800e3da:	bd70      	pop	{r4, r5, r6, pc}

0800e3dc <xflow>:
 800e3dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3de:	4614      	mov	r4, r2
 800e3e0:	461d      	mov	r5, r3
 800e3e2:	b108      	cbz	r0, 800e3e8 <xflow+0xc>
 800e3e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e3e8:	e9cd 2300 	strd	r2, r3, [sp]
 800e3ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	4629      	mov	r1, r5
 800e3f4:	f7f2 f910 	bl	8000618 <__aeabi_dmul>
 800e3f8:	2222      	movs	r2, #34	; 0x22
 800e3fa:	b003      	add	sp, #12
 800e3fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e400:	f7ff bfe2 	b.w	800e3c8 <with_errno>

0800e404 <__math_uflow>:
 800e404:	b508      	push	{r3, lr}
 800e406:	2200      	movs	r2, #0
 800e408:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e40c:	f7ff ffe6 	bl	800e3dc <xflow>
 800e410:	ec41 0b10 	vmov	d0, r0, r1
 800e414:	bd08      	pop	{r3, pc}

0800e416 <__math_oflow>:
 800e416:	b508      	push	{r3, lr}
 800e418:	2200      	movs	r2, #0
 800e41a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e41e:	f7ff ffdd 	bl	800e3dc <xflow>
 800e422:	ec41 0b10 	vmov	d0, r0, r1
 800e426:	bd08      	pop	{r3, pc}

0800e428 <fabs>:
 800e428:	ec51 0b10 	vmov	r0, r1, d0
 800e42c:	ee10 2a10 	vmov	r2, s0
 800e430:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e434:	ec43 2b10 	vmov	d0, r2, r3
 800e438:	4770      	bx	lr

0800e43a <finite>:
 800e43a:	b082      	sub	sp, #8
 800e43c:	ed8d 0b00 	vstr	d0, [sp]
 800e440:	9801      	ldr	r0, [sp, #4]
 800e442:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e446:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e44a:	0fc0      	lsrs	r0, r0, #31
 800e44c:	b002      	add	sp, #8
 800e44e:	4770      	bx	lr

0800e450 <scalbn>:
 800e450:	b570      	push	{r4, r5, r6, lr}
 800e452:	ec55 4b10 	vmov	r4, r5, d0
 800e456:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e45a:	4606      	mov	r6, r0
 800e45c:	462b      	mov	r3, r5
 800e45e:	b99a      	cbnz	r2, 800e488 <scalbn+0x38>
 800e460:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e464:	4323      	orrs	r3, r4
 800e466:	d036      	beq.n	800e4d6 <scalbn+0x86>
 800e468:	4b39      	ldr	r3, [pc, #228]	; (800e550 <scalbn+0x100>)
 800e46a:	4629      	mov	r1, r5
 800e46c:	ee10 0a10 	vmov	r0, s0
 800e470:	2200      	movs	r2, #0
 800e472:	f7f2 f8d1 	bl	8000618 <__aeabi_dmul>
 800e476:	4b37      	ldr	r3, [pc, #220]	; (800e554 <scalbn+0x104>)
 800e478:	429e      	cmp	r6, r3
 800e47a:	4604      	mov	r4, r0
 800e47c:	460d      	mov	r5, r1
 800e47e:	da10      	bge.n	800e4a2 <scalbn+0x52>
 800e480:	a32b      	add	r3, pc, #172	; (adr r3, 800e530 <scalbn+0xe0>)
 800e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e486:	e03a      	b.n	800e4fe <scalbn+0xae>
 800e488:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e48c:	428a      	cmp	r2, r1
 800e48e:	d10c      	bne.n	800e4aa <scalbn+0x5a>
 800e490:	ee10 2a10 	vmov	r2, s0
 800e494:	4620      	mov	r0, r4
 800e496:	4629      	mov	r1, r5
 800e498:	f7f1 ff08 	bl	80002ac <__adddf3>
 800e49c:	4604      	mov	r4, r0
 800e49e:	460d      	mov	r5, r1
 800e4a0:	e019      	b.n	800e4d6 <scalbn+0x86>
 800e4a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	3a36      	subs	r2, #54	; 0x36
 800e4aa:	4432      	add	r2, r6
 800e4ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e4b0:	428a      	cmp	r2, r1
 800e4b2:	dd08      	ble.n	800e4c6 <scalbn+0x76>
 800e4b4:	2d00      	cmp	r5, #0
 800e4b6:	a120      	add	r1, pc, #128	; (adr r1, 800e538 <scalbn+0xe8>)
 800e4b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4bc:	da1c      	bge.n	800e4f8 <scalbn+0xa8>
 800e4be:	a120      	add	r1, pc, #128	; (adr r1, 800e540 <scalbn+0xf0>)
 800e4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4c4:	e018      	b.n	800e4f8 <scalbn+0xa8>
 800e4c6:	2a00      	cmp	r2, #0
 800e4c8:	dd08      	ble.n	800e4dc <scalbn+0x8c>
 800e4ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e4ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e4d6:	ec45 4b10 	vmov	d0, r4, r5
 800e4da:	bd70      	pop	{r4, r5, r6, pc}
 800e4dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e4e0:	da19      	bge.n	800e516 <scalbn+0xc6>
 800e4e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e4e6:	429e      	cmp	r6, r3
 800e4e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e4ec:	dd0a      	ble.n	800e504 <scalbn+0xb4>
 800e4ee:	a112      	add	r1, pc, #72	; (adr r1, 800e538 <scalbn+0xe8>)
 800e4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d1e2      	bne.n	800e4be <scalbn+0x6e>
 800e4f8:	a30f      	add	r3, pc, #60	; (adr r3, 800e538 <scalbn+0xe8>)
 800e4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fe:	f7f2 f88b 	bl	8000618 <__aeabi_dmul>
 800e502:	e7cb      	b.n	800e49c <scalbn+0x4c>
 800e504:	a10a      	add	r1, pc, #40	; (adr r1, 800e530 <scalbn+0xe0>)
 800e506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d0b8      	beq.n	800e480 <scalbn+0x30>
 800e50e:	a10e      	add	r1, pc, #56	; (adr r1, 800e548 <scalbn+0xf8>)
 800e510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e514:	e7b4      	b.n	800e480 <scalbn+0x30>
 800e516:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e51a:	3236      	adds	r2, #54	; 0x36
 800e51c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e520:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e524:	4620      	mov	r0, r4
 800e526:	4b0c      	ldr	r3, [pc, #48]	; (800e558 <scalbn+0x108>)
 800e528:	2200      	movs	r2, #0
 800e52a:	e7e8      	b.n	800e4fe <scalbn+0xae>
 800e52c:	f3af 8000 	nop.w
 800e530:	c2f8f359 	.word	0xc2f8f359
 800e534:	01a56e1f 	.word	0x01a56e1f
 800e538:	8800759c 	.word	0x8800759c
 800e53c:	7e37e43c 	.word	0x7e37e43c
 800e540:	8800759c 	.word	0x8800759c
 800e544:	fe37e43c 	.word	0xfe37e43c
 800e548:	c2f8f359 	.word	0xc2f8f359
 800e54c:	81a56e1f 	.word	0x81a56e1f
 800e550:	43500000 	.word	0x43500000
 800e554:	ffff3cb0 	.word	0xffff3cb0
 800e558:	3c900000 	.word	0x3c900000

0800e55c <_init>:
 800e55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55e:	bf00      	nop
 800e560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e562:	bc08      	pop	{r3}
 800e564:	469e      	mov	lr, r3
 800e566:	4770      	bx	lr

0800e568 <_fini>:
 800e568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56a:	bf00      	nop
 800e56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e56e:	bc08      	pop	{r3}
 800e570:	469e      	mov	lr, r3
 800e572:	4770      	bx	lr
