
LedBLink-C-Timing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000640  08000640  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000640  08000640  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000640  08000640  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000640  08000640  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000640  08000640  00010640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000644  08000644  00010644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000648  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001534  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c1  00000000  00000000  00021568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  00021a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000248  00000000  00000000  00021ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d69a  00000000  00000000  00021ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001591  00000000  00000000  0003f582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6ba1  00000000  00000000  00040b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e76b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008f0  00000000  00000000  000e7704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000628 	.word	0x08000628

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000628 	.word	0x08000628

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b08b      	sub	sp, #44	; 0x2c
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	fa93 f3a3 	rbit	r3, r3
 8000212:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800021e:	2320      	movs	r3, #32
 8000220:	e003      	b.n	800022a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	fab3 f383 	clz	r3, r3
 8000228:	b2db      	uxtb	r3, r3
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	fa93 f3a3 	rbit	r3, r3
 8000240:	61fb      	str	r3, [r7, #28]
  return result;
 8000242:	69fb      	ldr	r3, [r7, #28]
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	2b00      	cmp	r3, #0
 800024a:	d101      	bne.n	8000250 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800024c:	2320      	movs	r3, #32
 800024e:	e003      	b.n	8000258 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000252:	fab3 f383 	clz	r3, r3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	6879      	ldr	r1, [r7, #4]
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	431a      	orrs	r2, r3
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	372c      	adds	r7, #44	; 0x2c
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000272:	b480      	push	{r7}
 8000274:	b083      	sub	sp, #12
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	683a      	ldr	r2, [r7, #0]
 8000280:	619a      	str	r2, [r3, #24]
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800028e:	b480      	push	{r7}
 8000290:	b083      	sub	sp, #12
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
 8000296:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	683a      	ldr	r2, [r7, #0]
 800029c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
	...

080002ac <SysTick_Handler>:

void SysTick_Handler(void);

uint32_t unTick = 0;

void SysTick_Handler(void){
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	unTick++;
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <SysTick_Handler+0x18>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3301      	adds	r3, #1
 80002b6:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <SysTick_Handler+0x18>)
 80002b8:	6013      	str	r3, [r2, #0]
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	20000020 	.word	0x20000020

080002c8 <main>:


int beat = 1000;


int main(void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

	MSP_Init1msTick();
 80002cc:	f000 f82e 	bl	800032c <MSP_Init1msTick>

	MFS_Dx_Init();
 80002d0:	f000 f838 	bl	8000344 <MFS_Dx_Init>
	MFS_Sx_Init();
 80002d4:	f000 f80c 	bl	80002f0 <MFS_Sx_Init>

	MFS_D1_On();
 80002d8:	f000 f858 	bl	800038c <MFS_D1_On>
	MFS_D2_On();
 80002dc:	f000 f85f 	bl	800039e <MFS_D2_On>
	MFS_D3_On();
 80002e0:	f000 f866 	bl	80003b0 <MFS_D3_On>
	MFS_D4_On();
 80002e4:	f000 f86e 	bl	80003c4 <MFS_D4_On>
//		}
//		if (MFS_S3_Read() == 1){
//			fsm_D3_Blink();
//		}
//		fsm_D4_Blink();
		fsm_Pong_Sequence();
 80002e8:	f000 f89c 	bl	8000424 <fsm_Pong_Sequence>
 80002ec:	e7fc      	b.n	80002e8 <main+0x20>
	...

080002f0 <MFS_Sx_Init>:
	}
	return 0;
}


void MFS_Sx_Init(void){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f7ff ff67 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_1, LL_GPIO_MODE_INPUT);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2102      	movs	r1, #2
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f7ff ff79 	bl	80001f8 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000306:	2200      	movs	r2, #0
 8000308:	2110      	movs	r1, #16
 800030a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030e:	f7ff ff73 	bl	80001f8 <LL_GPIO_SetPinMode>


	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000312:	2002      	movs	r0, #2
 8000314:	f7ff ff58 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
 8000318:	2200      	movs	r2, #0
 800031a:	2101      	movs	r1, #1
 800031c:	4802      	ldr	r0, [pc, #8]	; (8000328 <MFS_Sx_Init+0x38>)
 800031e:	f7ff ff6b 	bl	80001f8 <LL_GPIO_SetPinMode>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	48000400 	.word	0x48000400

0800032c <MSP_Init1msTick>:
	}
}


//Inicializacion del reloj
void MSP_Init1msTick(void){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000330:	2001      	movs	r0, #1
 8000332:	f7ff ff49 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
	LL_Init1msTick(4000000);
 8000336:	4802      	ldr	r0, [pc, #8]	; (8000340 <MSP_Init1msTick+0x14>)
 8000338:	f000 f91a 	bl	8000570 <LL_Init1msTick>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	003d0900 	.word	0x003d0900

08000344 <MFS_Dx_Init>:

//Inicializacion de los leds
void MFS_Dx_Init(void){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000348:	2001      	movs	r0, #1
 800034a:	f7ff ff3d 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_OUTPUT);
 800034e:	2201      	movs	r2, #1
 8000350:	2120      	movs	r1, #32
 8000352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000356:	f7ff ff4f 	bl	80001f8 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_OUTPUT);
 800035a:	2201      	movs	r2, #1
 800035c:	2140      	movs	r1, #64	; 0x40
 800035e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000362:	f7ff ff49 	bl	80001f8 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_OUTPUT);
 8000366:	2201      	movs	r2, #1
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036e:	f7ff ff43 	bl	80001f8 <LL_GPIO_SetPinMode>

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000372:	2002      	movs	r0, #2
 8000374:	f7ff ff28 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_OUTPUT);
 8000378:	2201      	movs	r2, #1
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4802      	ldr	r0, [pc, #8]	; (8000388 <MFS_Dx_Init+0x44>)
 800037e:	f7ff ff3b 	bl	80001f8 <LL_GPIO_SetPinMode>
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	48000400 	.word	0x48000400

0800038c <MFS_D1_On>:

//Reseteo de los leds
void MFS_D1_On(){
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000390:	2120      	movs	r1, #32
 8000392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000396:	f7ff ff7a 	bl	800028e <LL_GPIO_ResetOutputPin>

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}

0800039e <MFS_D2_On>:

void MFS_D2_On(){
 800039e:	b580      	push	{r7, lr}
 80003a0:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80003a2:	2140      	movs	r1, #64	; 0x40
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a8:	f7ff ff71 	bl	800028e <LL_GPIO_ResetOutputPin>

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <MFS_D3_On>:

void MFS_D3_On(){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80003b4:	2180      	movs	r1, #128	; 0x80
 80003b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ba:	f7ff ff68 	bl	800028e <LL_GPIO_ResetOutputPin>

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MFS_D4_On>:

void MFS_D4_On(){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80003c8:	2140      	movs	r1, #64	; 0x40
 80003ca:	4802      	ldr	r0, [pc, #8]	; (80003d4 <MFS_D4_On+0x10>)
 80003cc:	f7ff ff5f 	bl	800028e <LL_GPIO_ResetOutputPin>

}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	48000400 	.word	0x48000400

080003d8 <MFS_D1_Off>:


void MFS_D1_Off(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80003dc:	2120      	movs	r1, #32
 80003de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e2:	f7ff ff46 	bl	8000272 <LL_GPIO_SetOutputPin>
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}

080003ea <MFS_D2_Off>:

void MFS_D2_Off(){
 80003ea:	b580      	push	{r7, lr}
 80003ec:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80003ee:	2140      	movs	r1, #64	; 0x40
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f4:	f7ff ff3d 	bl	8000272 <LL_GPIO_SetOutputPin>
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}

080003fc <MFS_D3_Off>:

void MFS_D3_Off(){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000406:	f7ff ff34 	bl	8000272 <LL_GPIO_SetOutputPin>
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <MFS_D4_Off>:

void MFS_D4_Off(){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000414:	2140      	movs	r1, #64	; 0x40
 8000416:	4802      	ldr	r0, [pc, #8]	; (8000420 <MFS_D4_Off+0x10>)
 8000418:	f7ff ff2b 	bl	8000272 <LL_GPIO_SetOutputPin>
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	48000400 	.word	0x48000400

08000424 <fsm_Pong_Sequence>:
		MFS_D4_Toggle();
	}
}


void fsm_Pong_Sequence(void){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
	static uint32_t lastTick = 0;
	static uint8_t state = 1;
	uint8_t next_state;

	if (unTick - lastTick >= 200){
 800042a:	4b41      	ldr	r3, [pc, #260]	; (8000530 <fsm_Pong_Sequence+0x10c>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4b41      	ldr	r3, [pc, #260]	; (8000534 <fsm_Pong_Sequence+0x110>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	1ad3      	subs	r3, r2, r3
 8000434:	2bc7      	cmp	r3, #199	; 0xc7
 8000436:	d92c      	bls.n	8000492 <fsm_Pong_Sequence+0x6e>
		lastTick = unTick;
 8000438:	4b3d      	ldr	r3, [pc, #244]	; (8000530 <fsm_Pong_Sequence+0x10c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a3d      	ldr	r2, [pc, #244]	; (8000534 <fsm_Pong_Sequence+0x110>)
 800043e:	6013      	str	r3, [r2, #0]

		switch(state){
 8000440:	4b3d      	ldr	r3, [pc, #244]	; (8000538 <fsm_Pong_Sequence+0x114>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	3b01      	subs	r3, #1
 8000446:	2b05      	cmp	r3, #5
 8000448:	d820      	bhi.n	800048c <fsm_Pong_Sequence+0x68>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <fsm_Pong_Sequence+0x2c>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000469 	.word	0x08000469
 8000454:	0800046f 	.word	0x0800046f
 8000458:	08000475 	.word	0x08000475
 800045c:	0800047b 	.word	0x0800047b
 8000460:	08000481 	.word	0x08000481
 8000464:	08000487 	.word	0x08000487
		case 1:
			next_state = 2;
 8000468:	2302      	movs	r3, #2
 800046a:	71fb      	strb	r3, [r7, #7]
			break;
 800046c:	e00e      	b.n	800048c <fsm_Pong_Sequence+0x68>
		case 2:
			next_state = 3;
 800046e:	2303      	movs	r3, #3
 8000470:	71fb      	strb	r3, [r7, #7]
			break;
 8000472:	e00b      	b.n	800048c <fsm_Pong_Sequence+0x68>
		case 3:
			next_state = 4;
 8000474:	2304      	movs	r3, #4
 8000476:	71fb      	strb	r3, [r7, #7]
			break;
 8000478:	e008      	b.n	800048c <fsm_Pong_Sequence+0x68>
		case 4:
			next_state = 5;
 800047a:	2305      	movs	r3, #5
 800047c:	71fb      	strb	r3, [r7, #7]
			break;
 800047e:	e005      	b.n	800048c <fsm_Pong_Sequence+0x68>
		case 5:
			next_state = 6;
 8000480:	2306      	movs	r3, #6
 8000482:	71fb      	strb	r3, [r7, #7]
			break;
 8000484:	e002      	b.n	800048c <fsm_Pong_Sequence+0x68>
		case 6:
			next_state = 1;
 8000486:	2301      	movs	r3, #1
 8000488:	71fb      	strb	r3, [r7, #7]
			break;
 800048a:	bf00      	nop
		}
		state = next_state;
 800048c:	4a2a      	ldr	r2, [pc, #168]	; (8000538 <fsm_Pong_Sequence+0x114>)
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	7013      	strb	r3, [r2, #0]
	}
	switch(state){
 8000492:	4b29      	ldr	r3, [pc, #164]	; (8000538 <fsm_Pong_Sequence+0x114>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	3b01      	subs	r3, #1
 8000498:	2b05      	cmp	r3, #5
 800049a:	d845      	bhi.n	8000528 <fsm_Pong_Sequence+0x104>
 800049c:	a201      	add	r2, pc, #4	; (adr r2, 80004a4 <fsm_Pong_Sequence+0x80>)
 800049e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a2:	bf00      	nop
 80004a4:	080004bd 	.word	0x080004bd
 80004a8:	080004cf 	.word	0x080004cf
 80004ac:	080004e1 	.word	0x080004e1
 80004b0:	080004f3 	.word	0x080004f3
 80004b4:	08000505 	.word	0x08000505
 80004b8:	08000517 	.word	0x08000517
	case 1:
		MFS_D1_On();
 80004bc:	f7ff ff66 	bl	800038c <MFS_D1_On>
		MFS_D2_Off();
 80004c0:	f7ff ff93 	bl	80003ea <MFS_D2_Off>
		MFS_D3_Off();
 80004c4:	f7ff ff9a 	bl	80003fc <MFS_D3_Off>
		MFS_D4_Off();
 80004c8:	f7ff ffa2 	bl	8000410 <MFS_D4_Off>
		break;
 80004cc:	e02c      	b.n	8000528 <fsm_Pong_Sequence+0x104>
	case 2:
		MFS_D1_Off();
 80004ce:	f7ff ff83 	bl	80003d8 <MFS_D1_Off>
		MFS_D2_On();
 80004d2:	f7ff ff64 	bl	800039e <MFS_D2_On>
		MFS_D3_Off();
 80004d6:	f7ff ff91 	bl	80003fc <MFS_D3_Off>
		MFS_D4_Off();
 80004da:	f7ff ff99 	bl	8000410 <MFS_D4_Off>
		break;
 80004de:	e023      	b.n	8000528 <fsm_Pong_Sequence+0x104>
	case 3:
		MFS_D1_Off();
 80004e0:	f7ff ff7a 	bl	80003d8 <MFS_D1_Off>
		MFS_D2_Off();
 80004e4:	f7ff ff81 	bl	80003ea <MFS_D2_Off>
		MFS_D3_On();
 80004e8:	f7ff ff62 	bl	80003b0 <MFS_D3_On>
		MFS_D4_Off();
 80004ec:	f7ff ff90 	bl	8000410 <MFS_D4_Off>
		break;
 80004f0:	e01a      	b.n	8000528 <fsm_Pong_Sequence+0x104>
	case 4:
		MFS_D1_Off();
 80004f2:	f7ff ff71 	bl	80003d8 <MFS_D1_Off>
		MFS_D2_Off();
 80004f6:	f7ff ff78 	bl	80003ea <MFS_D2_Off>
		MFS_D3_Off();
 80004fa:	f7ff ff7f 	bl	80003fc <MFS_D3_Off>
		MFS_D4_On();
 80004fe:	f7ff ff61 	bl	80003c4 <MFS_D4_On>
		break;
 8000502:	e011      	b.n	8000528 <fsm_Pong_Sequence+0x104>
	case 5:
		MFS_D1_Off();
 8000504:	f7ff ff68 	bl	80003d8 <MFS_D1_Off>
		MFS_D2_Off();
 8000508:	f7ff ff6f 	bl	80003ea <MFS_D2_Off>
		MFS_D3_On();
 800050c:	f7ff ff50 	bl	80003b0 <MFS_D3_On>
		MFS_D4_Off();
 8000510:	f7ff ff7e 	bl	8000410 <MFS_D4_Off>
		break;
 8000514:	e008      	b.n	8000528 <fsm_Pong_Sequence+0x104>
	case 6:
		MFS_D1_Off();
 8000516:	f7ff ff5f 	bl	80003d8 <MFS_D1_Off>
		MFS_D2_On();
 800051a:	f7ff ff40 	bl	800039e <MFS_D2_On>
		MFS_D3_Off();
 800051e:	f7ff ff6d 	bl	80003fc <MFS_D3_Off>
		MFS_D4_Off();
 8000522:	f7ff ff75 	bl	8000410 <MFS_D4_Off>
		break;
 8000526:	bf00      	nop
	}
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000020 	.word	0x20000020
 8000534:	20000024 	.word	0x20000024
 8000538:	20000000 	.word	0x20000000

0800053c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <LL_InitTick+0x30>)
 8000550:	3b01      	subs	r3, #1
 8000552:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <LL_InitTick+0x30>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800055a:	4b04      	ldr	r3, [pc, #16]	; (800056c <LL_InitTick+0x30>)
 800055c:	2207      	movs	r2, #7
 800055e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk;                   /* Enable the Systick Timer */
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	e000e010 	.word	0xe000e010

08000570 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000578:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f7ff ffdd 	bl	800053c <LL_InitTick>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000590:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490d      	ldr	r1, [pc, #52]	; (80005cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0a      	ldr	r4, [pc, #40]	; (80005d8 <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ba:	f000 f811 	bl	80005e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005be:	f7ff fe83 	bl	80002c8 <main>

080005c2 <LoopForever>:

LoopForever:
  b LoopForever
 80005c2:	e7fe      	b.n	80005c2 <LoopForever>
  ldr   r0, =_estack
 80005c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005cc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005d0:	08000648 	.word	0x08000648
  ldr r2, =_sbss
 80005d4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005d8:	20000028 	.word	0x20000028

080005dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_2_IRQHandler>
	...

080005e0 <__libc_init_array>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	4d0d      	ldr	r5, [pc, #52]	; (8000618 <__libc_init_array+0x38>)
 80005e4:	4c0d      	ldr	r4, [pc, #52]	; (800061c <__libc_init_array+0x3c>)
 80005e6:	1b64      	subs	r4, r4, r5
 80005e8:	10a4      	asrs	r4, r4, #2
 80005ea:	2600      	movs	r6, #0
 80005ec:	42a6      	cmp	r6, r4
 80005ee:	d109      	bne.n	8000604 <__libc_init_array+0x24>
 80005f0:	4d0b      	ldr	r5, [pc, #44]	; (8000620 <__libc_init_array+0x40>)
 80005f2:	4c0c      	ldr	r4, [pc, #48]	; (8000624 <__libc_init_array+0x44>)
 80005f4:	f000 f818 	bl	8000628 <_init>
 80005f8:	1b64      	subs	r4, r4, r5
 80005fa:	10a4      	asrs	r4, r4, #2
 80005fc:	2600      	movs	r6, #0
 80005fe:	42a6      	cmp	r6, r4
 8000600:	d105      	bne.n	800060e <__libc_init_array+0x2e>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f855 3b04 	ldr.w	r3, [r5], #4
 8000608:	4798      	blx	r3
 800060a:	3601      	adds	r6, #1
 800060c:	e7ee      	b.n	80005ec <__libc_init_array+0xc>
 800060e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000612:	4798      	blx	r3
 8000614:	3601      	adds	r6, #1
 8000616:	e7f2      	b.n	80005fe <__libc_init_array+0x1e>
 8000618:	08000640 	.word	0x08000640
 800061c:	08000640 	.word	0x08000640
 8000620:	08000640 	.word	0x08000640
 8000624:	08000644 	.word	0x08000644

08000628 <_init>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	bf00      	nop
 800062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062e:	bc08      	pop	{r3}
 8000630:	469e      	mov	lr, r3
 8000632:	4770      	bx	lr

08000634 <_fini>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	bf00      	nop
 8000638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063a:	bc08      	pop	{r3}
 800063c:	469e      	mov	lr, r3
 800063e:	4770      	bx	lr
