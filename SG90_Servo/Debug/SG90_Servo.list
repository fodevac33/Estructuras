
SG90_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008200  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08008390  08008390  00018390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008874  08008874  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008874  08008874  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008874  08008874  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008874  08008874  00018874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800887c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  200001e0  08008a5c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08008a5c  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f31c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a7  00000000  00000000  0002f52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000315d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00032338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6bd  00000000  00000000  00032fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011454  00000000  00000000  0005d65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107538  00000000  00000000  0006eab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00175fe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be0  00000000  00000000  0017603c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008378 	.word	0x08008378

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008378 	.word	0x08008378

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
SERVO_HANDLE Servo1_Handle;
SERVO_HANDLE Servo2_Handle;


int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af02      	add	r7, sp, #8
  HAL_Init();
 8000cfa:	f000 f993 	bl	8001024 <HAL_Init>
  SysConfigClock();
 8000cfe:	f002 fe43 	bl	8003988 <SysConfigClock>
  Global_GPIO_Init();
 8000d02:	f002 fc19 	bl	8003538 <Global_GPIO_Init>

  SG90_Struct_t Servo1 = Servo_Create(GPIOB, GPIO_PIN_6, TIM4, TIM_CHANNEL_1, &Servo1_Handle);
 8000d06:	1d38      	adds	r0, r7, #4
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <main+0x50>)
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <main+0x54>)
 8000d12:	2240      	movs	r2, #64	; 0x40
 8000d14:	490d      	ldr	r1, [pc, #52]	; (8000d4c <main+0x58>)
 8000d16:	f002 fde3 	bl	80038e0 <Servo_Create>
//  SG90_Struct_t Servo2 = Servo_Create(GPIOC, GPIO_PIN_7, TIM3, TIM_CHANNEL_2, &Servo2_Handle);
//  Servo_Rotate(&Servo2, 180.0);

  while (1)
  {
	  Servo_Rotate(&Servo1, 0);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000d50 <main+0x5c>
 8000d20:	4618      	mov	r0, r3
 8000d22:	f002 fe01 	bl	8003928 <Servo_Rotate>
	  HAL_Delay(400);
 8000d26:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d2a:	f000 f9f7 	bl	800111c <HAL_Delay>
	  Servo_Rotate(&Servo1, 180);
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000d54 <main+0x60>
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 fdf7 	bl	8003928 <Servo_Rotate>
	  HAL_Delay(400);
 8000d3a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d3e:	f000 f9ed 	bl	800111c <HAL_Delay>
	  Servo_Rotate(&Servo1, 0);
 8000d42:	e7ea      	b.n	8000d1a <main+0x26>
 8000d44:	200001fc 	.word	0x200001fc
 8000d48:	40000800 	.word	0x40000800
 8000d4c:	48000400 	.word	0x48000400
 8000d50:	00000000 	.word	0x00000000
 8000d54:	43340000 	.word	0x43340000

08000d58 <__io_putchar>:

int __io_putchar(int ch);
int _write(int file, char *ptr, int len);


int __io_putchar(int ch) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&USART2_I, &c[0], 1, 100);
 8000d66:	f107 010c 	add.w	r1, r7, #12
 8000d6a:	2364      	movs	r3, #100	; 0x64
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <__io_putchar+0x28>)
 8000d70:	f002 fa89 	bl	8003286 <HAL_UART_Transmit>
	return ch;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000250 	.word	0x20000250

08000d84 <_write>:


int _write(int file, char *ptr, int len) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e009      	b.n	8000daa <_write+0x26>
		__io_putchar(*ptr++);
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	60ba      	str	r2, [r7, #8]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ffda 	bl	8000d58 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	dbf1      	blt.n	8000d96 <_write+0x12>
	}

	return len;
 8000db2:	687b      	ldr	r3, [r7, #4]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_MspInit+0x44>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_MspInit+0x44>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_MspInit+0x44>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_MspInit+0x44>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_MspInit+0x44>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_MspInit+0x44>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f944 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return 1;
 8000e5c:	2301      	movs	r3, #1
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_kill>:

int _kill(int pid, int sig)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e72:	f002 fddf 	bl	8003a34 <__errno>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2216      	movs	r2, #22
 8000e7a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_exit>:

void _exit (int status)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ffe7 	bl	8000e68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e9a:	e7fe      	b.n	8000e9a <_exit+0x12>

08000e9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e00a      	b.n	8000ec4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eae:	f3af 8000 	nop.w
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	60ba      	str	r2, [r7, #8]
 8000eba:	b2ca      	uxtb	r2, r1
 8000ebc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbf0      	blt.n	8000eae <_read+0x12>
  }

  return len;
 8000ecc:	687b      	ldr	r3, [r7, #4]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efe:	605a      	str	r2, [r3, #4]
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_isatty>:

int _isatty(int file)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f002 fd60 	bl	8003a34 <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20018000 	.word	0x20018000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	20000248 	.word	0x20000248
 8000fa8:	200002e8 	.word	0x200002e8

08000fac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd4:	f7ff ffea 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	; (8001010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <LoopForever+0xe>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	; (800101c <LoopForever+0x16>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f002 fd1f 	bl	8003a40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001002:	f7ff fe77 	bl	8000cf4 <main>

08001006 <LoopForever>:

LoopForever:
    b LoopForever
 8001006:	e7fe      	b.n	8001006 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001008:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001014:	0800887c 	.word	0x0800887c
  ldr r2, =_sbss
 8001018:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800101c:	200002e4 	.word	0x200002e4

08001020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC1_2_IRQHandler>
	...

08001024 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_Init+0x3c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_Init+0x3c>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	2003      	movs	r0, #3
 800103c:	f000 f944 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001040:	2000      	movs	r0, #0
 8001042:	f000 f80f 	bl	8001064 <HAL_InitTick>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	e001      	b.n	8001056 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001052:	f7ff feb3 	bl	8000dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001056:	79fb      	ldrb	r3, [r7, #7]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40022000 	.word	0x40022000

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_InitTick+0x6c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d023      	beq.n	80010c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_InitTick+0x70>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_InitTick+0x6c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f941 	bl	8001316 <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10f      	bne.n	80010ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d809      	bhi.n	80010b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a8:	f000 f919 	bl	80012de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_InitTick+0x74>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e007      	b.n	80010c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e004      	b.n	80010c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	e001      	b.n	80010c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	2000024c 	.word	0x2000024c

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000024c 	.word	0x2000024c

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff47 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff5c 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff8e 	bl	800121c <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5d 	bl	80011c8 <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffb0 	bl	8001284 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	e17f      	b.n	8001640 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8171 	beq.w	800163a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d005      	beq.n	8001370 <HAL_GPIO_Init+0x40>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d130      	bne.n	80013d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a6:	2201      	movs	r2, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 0201 	and.w	r2, r3, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d118      	bne.n	8001410 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013e4:	2201      	movs	r2, #1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b03      	cmp	r3, #3
 800141a:	d017      	beq.n	800144c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d123      	bne.n	80014a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	6939      	ldr	r1, [r7, #16]
 800149c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80ac 	beq.w	800163a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	4b5f      	ldr	r3, [pc, #380]	; (8001660 <HAL_GPIO_Init+0x330>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	4a5e      	ldr	r2, [pc, #376]	; (8001660 <HAL_GPIO_Init+0x330>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6613      	str	r3, [r2, #96]	; 0x60
 80014ee:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <HAL_GPIO_Init+0x330>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014fa:	4a5a      	ldr	r2, [pc, #360]	; (8001664 <HAL_GPIO_Init+0x334>)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001524:	d025      	beq.n	8001572 <HAL_GPIO_Init+0x242>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4f      	ldr	r2, [pc, #316]	; (8001668 <HAL_GPIO_Init+0x338>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01f      	beq.n	800156e <HAL_GPIO_Init+0x23e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4e      	ldr	r2, [pc, #312]	; (800166c <HAL_GPIO_Init+0x33c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x23a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4d      	ldr	r2, [pc, #308]	; (8001670 <HAL_GPIO_Init+0x340>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x236>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4c      	ldr	r2, [pc, #304]	; (8001674 <HAL_GPIO_Init+0x344>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x232>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4b      	ldr	r2, [pc, #300]	; (8001678 <HAL_GPIO_Init+0x348>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x22e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4a      	ldr	r2, [pc, #296]	; (800167c <HAL_GPIO_Init+0x34c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x22a>
 8001556:	2306      	movs	r3, #6
 8001558:	e00c      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800155a:	2307      	movs	r3, #7
 800155c:	e00a      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800155e:	2305      	movs	r3, #5
 8001560:	e008      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001562:	2304      	movs	r3, #4
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001566:	2303      	movs	r3, #3
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800156a:	2302      	movs	r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001572:	2300      	movs	r3, #0
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	f002 0203 	and.w	r2, r2, #3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001584:	4937      	ldr	r1, [pc, #220]	; (8001664 <HAL_GPIO_Init+0x334>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_GPIO_Init+0x350>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <HAL_GPIO_Init+0x350>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_GPIO_Init+0x350>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_GPIO_Init+0x350>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_GPIO_Init+0x350>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800160a:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_GPIO_Init+0x350>)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_GPIO_Init+0x350>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001634:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_GPIO_Init+0x350>)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa22 f303 	lsr.w	r3, r2, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	f47f ae78 	bne.w	8001340 <HAL_GPIO_Init+0x10>
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	48000400 	.word	0x48000400
 800166c:	48000800 	.word	0x48000800
 8001670:	48000c00 	.word	0x48000c00
 8001674:	48001000 	.word	0x48001000
 8001678:	48001400 	.word	0x48001400
 800167c:	48001800 	.word	0x48001800
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <HAL_PWREx_GetVoltageRange+0x18>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40007000 	.word	0x40007000

080016a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ae:	d130      	bne.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016bc:	d038      	beq.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2232      	movs	r2, #50	; 0x32
 80016d4:	fb02 f303 	mul.w	r3, r2, r3
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	0c9b      	lsrs	r3, r3, #18
 80016e0:	3301      	adds	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e4:	e002      	b.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f8:	d102      	bne.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f2      	bne.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170c:	d110      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e00f      	b.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800171a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171e:	d007      	beq.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001728:	4a05      	ldr	r2, [pc, #20]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40007000 	.word	0x40007000
 8001744:	20000000 	.word	0x20000000
 8001748:	431bde83 	.word	0x431bde83

0800174c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e3ca      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175e:	4b97      	ldr	r3, [pc, #604]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001768:	4b94      	ldr	r3, [pc, #592]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80e4 	beq.w	8001948 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_RCC_OscConfig+0x4a>
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b0c      	cmp	r3, #12
 800178a:	f040 808b 	bne.w	80018a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b01      	cmp	r3, #1
 8001792:	f040 8087 	bne.w	80018a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001796:	4b89      	ldr	r3, [pc, #548]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <HAL_RCC_OscConfig+0x62>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e3a2      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1a      	ldr	r2, [r3, #32]
 80017b2:	4b82      	ldr	r3, [pc, #520]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <HAL_RCC_OscConfig+0x7c>
 80017be:	4b7f      	ldr	r3, [pc, #508]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c6:	e005      	b.n	80017d4 <HAL_RCC_OscConfig+0x88>
 80017c8:	4b7c      	ldr	r3, [pc, #496]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d223      	bcs.n	8001820 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fd1d 	bl	800221c <RCC_SetFlashLatencyFromMSIRange>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e383      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ec:	4b73      	ldr	r3, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a72      	ldr	r2, [pc, #456]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b70      	ldr	r3, [pc, #448]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	496d      	ldr	r1, [pc, #436]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180a:	4b6c      	ldr	r3, [pc, #432]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	4968      	ldr	r1, [pc, #416]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800181a:	4313      	orrs	r3, r2
 800181c:	604b      	str	r3, [r1, #4]
 800181e:	e025      	b.n	800186c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001820:	4b66      	ldr	r3, [pc, #408]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a65      	ldr	r2, [pc, #404]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4960      	ldr	r1, [pc, #384]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183e:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	495b      	ldr	r1, [pc, #364]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d109      	bne.n	800186c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fcdd 	bl	800221c <RCC_SetFlashLatencyFromMSIRange>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e343      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800186c:	f000 fc4a 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b52      	ldr	r3, [pc, #328]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	4950      	ldr	r1, [pc, #320]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
 8001888:	4a4e      	ldr	r2, [pc, #312]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800188a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800188c:	4b4e      	ldr	r3, [pc, #312]	; (80019c8 <HAL_RCC_OscConfig+0x27c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fbe7 	bl	8001064 <HAL_InitTick>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d052      	beq.n	8001946 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	e327      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d032      	beq.n	8001912 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018ac:	4b43      	ldr	r3, [pc, #268]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a42      	ldr	r2, [pc, #264]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc24 	bl	8001104 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c0:	f7ff fc20 	bl	8001104 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e310      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d2:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018de:	4b37      	ldr	r3, [pc, #220]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a36      	ldr	r2, [pc, #216]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4931      	ldr	r1, [pc, #196]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018fc:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	492c      	ldr	r1, [pc, #176]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
 8001910:	e01a      	b.n	8001948 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a29      	ldr	r2, [pc, #164]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800191e:	f7ff fbf1 	bl	8001104 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001926:	f7ff fbed 	bl	8001104 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e2dd      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f0      	bne.n	8001926 <HAL_RCC_OscConfig+0x1da>
 8001944:	e000      	b.n	8001948 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001946:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d074      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b08      	cmp	r3, #8
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x21a>
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b0c      	cmp	r3, #12
 800195e:	d10e      	bne.n	800197e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d10b      	bne.n	800197e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d064      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d160      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e2ba      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x24a>
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800198e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e026      	b.n	80019e4 <HAL_RCC_OscConfig+0x298>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800199e:	d115      	bne.n	80019cc <HAL_RCC_OscConfig+0x280>
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a05      	ldr	r2, [pc, #20]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80019a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a02      	ldr	r2, [pc, #8]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e014      	b.n	80019e4 <HAL_RCC_OscConfig+0x298>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	08008390 	.word	0x08008390
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004
 80019cc:	4ba0      	ldr	r3, [pc, #640]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a9f      	ldr	r2, [pc, #636]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b9d      	ldr	r3, [pc, #628]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a9c      	ldr	r2, [pc, #624]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 80019de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff fb8a 	bl	8001104 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f4:	f7ff fb86 	bl	8001104 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e276      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a06:	4b92      	ldr	r3, [pc, #584]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x2a8>
 8001a12:	e014      	b.n	8001a3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff fb76 	bl	8001104 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fb72 	bl	8001104 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e262      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x2d0>
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d060      	beq.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x310>
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d119      	bne.n	8001a8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d116      	bne.n	8001a8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a5c:	4b7c      	ldr	r3, [pc, #496]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_OscConfig+0x328>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e23f      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	4973      	ldr	r1, [pc, #460]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	e040      	b.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d023      	beq.n	8001ada <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a92:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fb31 	bl	8001104 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fb2d 	bl	8001104 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e21d      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab8:	4b65      	ldr	r3, [pc, #404]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b62      	ldr	r3, [pc, #392]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	495f      	ldr	r1, [pc, #380]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
 8001ad8:	e018      	b.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ada:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5c      	ldr	r2, [pc, #368]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb0d 	bl	8001104 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff fb09 	bl	8001104 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e1f9      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d03c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01c      	beq.n	8001b5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b20:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b26:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff fae8 	bl	8001104 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff fae4 	bl	8001104 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e1d4      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b4a:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0ef      	beq.n	8001b38 <HAL_RCC_OscConfig+0x3ec>
 8001b58:	e01b      	b.n	8001b92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b60:	4a3b      	ldr	r2, [pc, #236]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff facb 	bl	8001104 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b72:	f7ff fac7 	bl	8001104 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e1b7      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ef      	bne.n	8001b72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80a6 	beq.w	8001cec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10d      	bne.n	8001bcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb4:	4a26      	ldr	r2, [pc, #152]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bba:	6593      	str	r3, [r2, #88]	; 0x58
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x508>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d118      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_RCC_OscConfig+0x508>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_RCC_OscConfig+0x508>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be4:	f7ff fa8e 	bl	8001104 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bec:	f7ff fa8a 	bl	8001104 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e17a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_RCC_OscConfig+0x508>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d108      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4d8>
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c22:	e029      	b.n	8001c78 <HAL_RCC_OscConfig+0x52c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d115      	bne.n	8001c58 <HAL_RCC_OscConfig+0x50c>
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c34:	f043 0304 	orr.w	r3, r3, #4
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	4a03      	ldr	r2, [pc, #12]	; (8001c50 <HAL_RCC_OscConfig+0x504>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c4c:	e014      	b.n	8001c78 <HAL_RCC_OscConfig+0x52c>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40007000 	.word	0x40007000
 8001c58:	4b9c      	ldr	r3, [pc, #624]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5e:	4a9b      	ldr	r2, [pc, #620]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c68:	4b98      	ldr	r3, [pc, #608]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a97      	ldr	r2, [pc, #604]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d016      	beq.n	8001cae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7ff fa40 	bl	8001104 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c88:	f7ff fa3c 	bl	8001104 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e12a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c9e:	4b8b      	ldr	r3, [pc, #556]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ed      	beq.n	8001c88 <HAL_RCC_OscConfig+0x53c>
 8001cac:	e015      	b.n	8001cda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cae:	f7ff fa29 	bl	8001104 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fa25 	bl	8001104 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e113      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ccc:	4b7f      	ldr	r3, [pc, #508]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ed      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cda:	7ffb      	ldrb	r3, [r7, #31]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce0:	4b7a      	ldr	r3, [pc, #488]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	4a79      	ldr	r2, [pc, #484]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80fe 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	f040 80d0 	bne.w	8001ea0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d00:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d130      	bne.n	8001d76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d127      	bne.n	8001d76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d11f      	bne.n	8001d76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d40:	2a07      	cmp	r2, #7
 8001d42:	bf14      	ite	ne
 8001d44:	2201      	movne	r2, #1
 8001d46:	2200      	moveq	r2, #0
 8001d48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d113      	bne.n	8001d76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	085b      	lsrs	r3, r3, #1
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d109      	bne.n	8001d76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d06e      	beq.n	8001e54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	d069      	beq.n	8001e50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0ad      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d98:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001da4:	f7ff f9ae 	bl	8001104 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff f9aa 	bl	8001104 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e09a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbe:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dca:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <HAL_RCC_OscConfig+0x784>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dda:	3a01      	subs	r2, #1
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001de4:	0212      	lsls	r2, r2, #8
 8001de6:	4311      	orrs	r1, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dec:	0852      	lsrs	r2, r2, #1
 8001dee:	3a01      	subs	r2, #1
 8001df0:	0552      	lsls	r2, r2, #21
 8001df2:	4311      	orrs	r1, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001df8:	0852      	lsrs	r2, r2, #1
 8001dfa:	3a01      	subs	r2, #1
 8001dfc:	0652      	lsls	r2, r2, #25
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e04:	0912      	lsrs	r2, r2, #4
 8001e06:	0452      	lsls	r2, r2, #17
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	4930      	ldr	r1, [pc, #192]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e10:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e28:	f7ff f96c 	bl	8001104 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff f968 	bl	8001104 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e058      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e4e:	e050      	b.n	8001ef2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e04f      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d148      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e78:	f7ff f944 	bl	8001104 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f940 	bl	8001104 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e030      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x734>
 8001e9e:	e028      	b.n	8001ef2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d023      	beq.n	8001eee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_RCC_OscConfig+0x780>)
 8001eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7ff f927 	bl	8001104 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb8:	e00c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eba:	f7ff f923 	bl	8001104 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d905      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e013      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_OscConfig+0x7b0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1ec      	bne.n	8001eba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_OscConfig+0x7b0>)
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	4905      	ldr	r1, [pc, #20]	; (8001efc <HAL_RCC_OscConfig+0x7b0>)
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_OscConfig+0x7b4>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60cb      	str	r3, [r1, #12]
 8001eec:	e001      	b.n	8001ef2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	feeefffc 	.word	0xfeeefffc

08001f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0e7      	b.n	80020e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4b75      	ldr	r3, [pc, #468]	; (80020f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d910      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b72      	ldr	r3, [pc, #456]	; (80020f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4970      	ldr	r1, [pc, #448]	; (80020f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b6e      	ldr	r3, [pc, #440]	; (80020f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0cf      	b.n	80020e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d010      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	4b66      	ldr	r3, [pc, #408]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d908      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4960      	ldr	r1, [pc, #384]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d04c      	beq.n	800201c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8a:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d121      	bne.n	8001fda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0a6      	b.n	80020e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa2:	4b54      	ldr	r3, [pc, #336]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d115      	bne.n	8001fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e09a      	b.n	80020e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fba:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e08e      	b.n	80020e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fca:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e086      	b.n	80020e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fda:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f023 0203 	bic.w	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4943      	ldr	r1, [pc, #268]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fec:	f7ff f88a 	bl	8001104 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff4:	f7ff f886 	bl	8001104 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e06e      	b.n	80020e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 020c 	and.w	r2, r3, #12
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	429a      	cmp	r2, r3
 800201a:	d1eb      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002034:	429a      	cmp	r2, r3
 8002036:	d208      	bcs.n	800204a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	492b      	ldr	r1, [pc, #172]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800204a:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_RCC_ClockConfig+0x1ec>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d210      	bcs.n	800207a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <HAL_RCC_ClockConfig+0x1ec>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 0207 	bic.w	r2, r3, #7
 8002060:	4923      	ldr	r1, [pc, #140]	; (80020f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002068:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <HAL_RCC_ClockConfig+0x1ec>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d001      	beq.n	800207a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e036      	b.n	80020e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	4918      	ldr	r1, [pc, #96]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4910      	ldr	r1, [pc, #64]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020b8:	f000 f824 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	490b      	ldr	r1, [pc, #44]	; (80020f8 <HAL_RCC_ClockConfig+0x1f4>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
 80020d4:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x1f8>)
 80020d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_ClockConfig+0x1fc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe ffc1 	bl	8001064 <HAL_InitTick>
 80020e2:	4603      	mov	r3, r0
 80020e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80020e6:	7afb      	ldrb	r3, [r7, #11]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40022000 	.word	0x40022000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08008390 	.word	0x08008390
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002112:	4b3e      	ldr	r3, [pc, #248]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800211c:	4b3b      	ldr	r3, [pc, #236]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x34>
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d121      	bne.n	8002176 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d11e      	bne.n	8002176 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002138:	4b34      	ldr	r3, [pc, #208]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002144:	4b31      	ldr	r3, [pc, #196]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 8002146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e005      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002154:	4b2d      	ldr	r3, [pc, #180]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002160:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10d      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002174:	e00a      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d102      	bne.n	8002182 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800217c:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_RCC_GetSysClockFreq+0x110>)
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e004      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d101      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002188:	4b23      	ldr	r3, [pc, #140]	; (8002218 <HAL_RCC_GetSysClockFreq+0x114>)
 800218a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d134      	bne.n	80021fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d003      	beq.n	80021aa <HAL_RCC_GetSysClockFreq+0xa6>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d003      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0xac>
 80021a8:	e005      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021aa:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ac:	617b      	str	r3, [r7, #20]
      break;
 80021ae:	e005      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_RCC_GetSysClockFreq+0x114>)
 80021b2:	617b      	str	r3, [r7, #20]
      break;
 80021b4:	e002      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	617b      	str	r3, [r7, #20]
      break;
 80021ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	3301      	adds	r3, #1
 80021c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	fb03 f202 	mul.w	r2, r3, r2
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	0e5b      	lsrs	r3, r3, #25
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	3301      	adds	r3, #1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021fc:	69bb      	ldr	r3, [r7, #24]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	080083a0 	.word	0x080083a0
 8002214:	00f42400 	.word	0x00f42400
 8002218:	007a1200 	.word	0x007a1200

0800221c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002224:	2300      	movs	r3, #0
 8002226:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002234:	f7ff fa26 	bl	8001684 <HAL_PWREx_GetVoltageRange>
 8002238:	6178      	str	r0, [r7, #20]
 800223a:	e014      	b.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002246:	6593      	str	r3, [r2, #88]	; 0x58
 8002248:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002254:	f7ff fa16 	bl	8001684 <HAL_PWREx_GetVoltageRange>
 8002258:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002264:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226c:	d10b      	bne.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b80      	cmp	r3, #128	; 0x80
 8002272:	d919      	bls.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2ba0      	cmp	r3, #160	; 0xa0
 8002278:	d902      	bls.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800227a:	2302      	movs	r3, #2
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	e013      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002280:	2301      	movs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	e010      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b80      	cmp	r3, #128	; 0x80
 800228a:	d902      	bls.n	8002292 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800228c:	2303      	movs	r3, #3
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	e00a      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d102      	bne.n	800229e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002298:	2302      	movs	r3, #2
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	e004      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b70      	cmp	r3, #112	; 0x70
 80022a2:	d101      	bne.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a4:	2301      	movs	r3, #1
 80022a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 0207 	bic.w	r2, r3, #7
 80022b0:	4909      	ldr	r1, [pc, #36]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d001      	beq.n	80022ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40022000 	.word	0x40022000

080022dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e049      	b.n	8002382 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f841 	bl	800238a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f000 fb84 	bl	8002a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e049      	b.n	8002444 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d106      	bne.n	80023ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f841 	bl	800244c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f000 fb23 	bl	8002a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d109      	bne.n	8002484 <HAL_TIM_PWM_Start+0x24>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	bf14      	ite	ne
 800247c:	2301      	movne	r3, #1
 800247e:	2300      	moveq	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e03c      	b.n	80024fe <HAL_TIM_PWM_Start+0x9e>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b04      	cmp	r3, #4
 8002488:	d109      	bne.n	800249e <HAL_TIM_PWM_Start+0x3e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	e02f      	b.n	80024fe <HAL_TIM_PWM_Start+0x9e>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d109      	bne.n	80024b8 <HAL_TIM_PWM_Start+0x58>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e022      	b.n	80024fe <HAL_TIM_PWM_Start+0x9e>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d109      	bne.n	80024d2 <HAL_TIM_PWM_Start+0x72>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	e015      	b.n	80024fe <HAL_TIM_PWM_Start+0x9e>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d109      	bne.n	80024ec <HAL_TIM_PWM_Start+0x8c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e008      	b.n	80024fe <HAL_TIM_PWM_Start+0x9e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e09c      	b.n	8002640 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d104      	bne.n	8002516 <HAL_TIM_PWM_Start+0xb6>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002514:	e023      	b.n	800255e <HAL_TIM_PWM_Start+0xfe>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b04      	cmp	r3, #4
 800251a:	d104      	bne.n	8002526 <HAL_TIM_PWM_Start+0xc6>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002524:	e01b      	b.n	800255e <HAL_TIM_PWM_Start+0xfe>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d104      	bne.n	8002536 <HAL_TIM_PWM_Start+0xd6>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002534:	e013      	b.n	800255e <HAL_TIM_PWM_Start+0xfe>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b0c      	cmp	r3, #12
 800253a:	d104      	bne.n	8002546 <HAL_TIM_PWM_Start+0xe6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002544:	e00b      	b.n	800255e <HAL_TIM_PWM_Start+0xfe>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b10      	cmp	r3, #16
 800254a:	d104      	bne.n	8002556 <HAL_TIM_PWM_Start+0xf6>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002554:	e003      	b.n	800255e <HAL_TIM_PWM_Start+0xfe>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2201      	movs	r2, #1
 8002564:	6839      	ldr	r1, [r7, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fe68 	bl	800323c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a35      	ldr	r2, [pc, #212]	; (8002648 <HAL_TIM_PWM_Start+0x1e8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_TIM_PWM_Start+0x13e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a34      	ldr	r2, [pc, #208]	; (800264c <HAL_TIM_PWM_Start+0x1ec>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00e      	beq.n	800259e <HAL_TIM_PWM_Start+0x13e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a32      	ldr	r2, [pc, #200]	; (8002650 <HAL_TIM_PWM_Start+0x1f0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d009      	beq.n	800259e <HAL_TIM_PWM_Start+0x13e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a31      	ldr	r2, [pc, #196]	; (8002654 <HAL_TIM_PWM_Start+0x1f4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d004      	beq.n	800259e <HAL_TIM_PWM_Start+0x13e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <HAL_TIM_PWM_Start+0x1f8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_PWM_Start+0x142>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_TIM_PWM_Start+0x144>
 80025a2:	2300      	movs	r3, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a22      	ldr	r2, [pc, #136]	; (8002648 <HAL_TIM_PWM_Start+0x1e8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01d      	beq.n	80025fe <HAL_TIM_PWM_Start+0x19e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ca:	d018      	beq.n	80025fe <HAL_TIM_PWM_Start+0x19e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a22      	ldr	r2, [pc, #136]	; (800265c <HAL_TIM_PWM_Start+0x1fc>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d013      	beq.n	80025fe <HAL_TIM_PWM_Start+0x19e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a21      	ldr	r2, [pc, #132]	; (8002660 <HAL_TIM_PWM_Start+0x200>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00e      	beq.n	80025fe <HAL_TIM_PWM_Start+0x19e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <HAL_TIM_PWM_Start+0x204>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d009      	beq.n	80025fe <HAL_TIM_PWM_Start+0x19e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_TIM_PWM_Start+0x1ec>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d004      	beq.n	80025fe <HAL_TIM_PWM_Start+0x19e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a15      	ldr	r2, [pc, #84]	; (8002650 <HAL_TIM_PWM_Start+0x1f0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d115      	bne.n	800262a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_TIM_PWM_Start+0x208>)
 8002606:	4013      	ands	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b06      	cmp	r3, #6
 800260e:	d015      	beq.n	800263c <HAL_TIM_PWM_Start+0x1dc>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002616:	d011      	beq.n	800263c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002628:	e008      	b.n	800263c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e000      	b.n	800263e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40013400 	.word	0x40013400
 8002650:	40014000 	.word	0x40014000
 8002654:	40014400 	.word	0x40014400
 8002658:	40014800 	.word	0x40014800
 800265c:	40000400 	.word	0x40000400
 8002660:	40000800 	.word	0x40000800
 8002664:	40000c00 	.word	0x40000c00
 8002668:	00010007 	.word	0x00010007

0800266c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002686:	2302      	movs	r3, #2
 8002688:	e0ff      	b.n	800288a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b14      	cmp	r3, #20
 8002696:	f200 80f0 	bhi.w	800287a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800269a:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	080026f5 	.word	0x080026f5
 80026a4:	0800287b 	.word	0x0800287b
 80026a8:	0800287b 	.word	0x0800287b
 80026ac:	0800287b 	.word	0x0800287b
 80026b0:	08002735 	.word	0x08002735
 80026b4:	0800287b 	.word	0x0800287b
 80026b8:	0800287b 	.word	0x0800287b
 80026bc:	0800287b 	.word	0x0800287b
 80026c0:	08002777 	.word	0x08002777
 80026c4:	0800287b 	.word	0x0800287b
 80026c8:	0800287b 	.word	0x0800287b
 80026cc:	0800287b 	.word	0x0800287b
 80026d0:	080027b7 	.word	0x080027b7
 80026d4:	0800287b 	.word	0x0800287b
 80026d8:	0800287b 	.word	0x0800287b
 80026dc:	0800287b 	.word	0x0800287b
 80026e0:	080027f9 	.word	0x080027f9
 80026e4:	0800287b 	.word	0x0800287b
 80026e8:	0800287b 	.word	0x0800287b
 80026ec:	0800287b 	.word	0x0800287b
 80026f0:	08002839 	.word	0x08002839
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fa2e 	bl	8002b5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0208 	orr.w	r2, r2, #8
 800270e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0204 	bic.w	r2, r2, #4
 800271e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6999      	ldr	r1, [r3, #24]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	619a      	str	r2, [r3, #24]
      break;
 8002732:	e0a5      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fa9e 	bl	8002c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800274e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6999      	ldr	r1, [r3, #24]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	021a      	lsls	r2, r3, #8
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	619a      	str	r2, [r3, #24]
      break;
 8002774:	e084      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fb07 	bl	8002d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0208 	orr.w	r2, r2, #8
 8002790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0204 	bic.w	r2, r2, #4
 80027a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69d9      	ldr	r1, [r3, #28]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	61da      	str	r2, [r3, #28]
      break;
 80027b4:	e064      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fb6f 	bl	8002ea0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69d9      	ldr	r1, [r3, #28]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	021a      	lsls	r2, r3, #8
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	61da      	str	r2, [r3, #28]
      break;
 80027f6:	e043      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fbb8 	bl	8002f74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0208 	orr.w	r2, r2, #8
 8002812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0204 	bic.w	r2, r2, #4
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002836:	e023      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fbfc 	bl	800303c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002852:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	021a      	lsls	r2, r3, #8
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002878:	e002      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
      break;
 800287e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002888:	7dfb      	ldrb	r3, [r7, #23]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop

08002894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_TIM_ConfigClockSource+0x1c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0b6      	b.n	8002a1e <HAL_TIM_ConfigClockSource+0x18a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ec:	d03e      	beq.n	800296c <HAL_TIM_ConfigClockSource+0xd8>
 80028ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f2:	f200 8087 	bhi.w	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fa:	f000 8086 	beq.w	8002a0a <HAL_TIM_ConfigClockSource+0x176>
 80028fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002902:	d87f      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 8002904:	2b70      	cmp	r3, #112	; 0x70
 8002906:	d01a      	beq.n	800293e <HAL_TIM_ConfigClockSource+0xaa>
 8002908:	2b70      	cmp	r3, #112	; 0x70
 800290a:	d87b      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 800290c:	2b60      	cmp	r3, #96	; 0x60
 800290e:	d050      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x11e>
 8002910:	2b60      	cmp	r3, #96	; 0x60
 8002912:	d877      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 8002914:	2b50      	cmp	r3, #80	; 0x50
 8002916:	d03c      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0xfe>
 8002918:	2b50      	cmp	r3, #80	; 0x50
 800291a:	d873      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d058      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0x13e>
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d86f      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 8002924:	2b30      	cmp	r3, #48	; 0x30
 8002926:	d064      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15e>
 8002928:	2b30      	cmp	r3, #48	; 0x30
 800292a:	d86b      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 800292c:	2b20      	cmp	r3, #32
 800292e:	d060      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15e>
 8002930:	2b20      	cmp	r3, #32
 8002932:	d867      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d05c      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15e>
 8002938:	2b10      	cmp	r3, #16
 800293a:	d05a      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x15e>
 800293c:	e062      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6899      	ldr	r1, [r3, #8]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f000 fc55 	bl	80031fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	609a      	str	r2, [r3, #8]
      break;
 800296a:	e04f      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f000 fc3e 	bl	80031fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800298e:	609a      	str	r2, [r3, #8]
      break;
 8002990:	e03c      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	461a      	mov	r2, r3
 80029a0:	f000 fbb2 	bl	8003108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2150      	movs	r1, #80	; 0x50
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fc0b 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 80029b0:	e02c      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	461a      	mov	r2, r3
 80029c0:	f000 fbd1 	bl	8003166 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2160      	movs	r1, #96	; 0x60
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fbfb 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 80029d0:	e01c      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	461a      	mov	r2, r3
 80029e0:	f000 fb92 	bl	8003108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2140      	movs	r1, #64	; 0x40
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fbeb 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 80029f0:	e00c      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f000 fbe2 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 8002a02:	e003      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      break;
 8002a08:	e000      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a40      	ldr	r2, [pc, #256]	; (8002b3c <TIM_Base_SetConfig+0x114>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <TIM_Base_SetConfig+0x40>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a46:	d00f      	beq.n	8002a68 <TIM_Base_SetConfig+0x40>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3d      	ldr	r2, [pc, #244]	; (8002b40 <TIM_Base_SetConfig+0x118>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00b      	beq.n	8002a68 <TIM_Base_SetConfig+0x40>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a3c      	ldr	r2, [pc, #240]	; (8002b44 <TIM_Base_SetConfig+0x11c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <TIM_Base_SetConfig+0x40>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3b      	ldr	r2, [pc, #236]	; (8002b48 <TIM_Base_SetConfig+0x120>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <TIM_Base_SetConfig+0x40>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3a      	ldr	r2, [pc, #232]	; (8002b4c <TIM_Base_SetConfig+0x124>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d108      	bne.n	8002a7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a2f      	ldr	r2, [pc, #188]	; (8002b3c <TIM_Base_SetConfig+0x114>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01f      	beq.n	8002ac2 <TIM_Base_SetConfig+0x9a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a88:	d01b      	beq.n	8002ac2 <TIM_Base_SetConfig+0x9a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a2c      	ldr	r2, [pc, #176]	; (8002b40 <TIM_Base_SetConfig+0x118>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d017      	beq.n	8002ac2 <TIM_Base_SetConfig+0x9a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a2b      	ldr	r2, [pc, #172]	; (8002b44 <TIM_Base_SetConfig+0x11c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <TIM_Base_SetConfig+0x9a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <TIM_Base_SetConfig+0x120>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00f      	beq.n	8002ac2 <TIM_Base_SetConfig+0x9a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <TIM_Base_SetConfig+0x124>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <TIM_Base_SetConfig+0x9a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a28      	ldr	r2, [pc, #160]	; (8002b50 <TIM_Base_SetConfig+0x128>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <TIM_Base_SetConfig+0x9a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a27      	ldr	r2, [pc, #156]	; (8002b54 <TIM_Base_SetConfig+0x12c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_Base_SetConfig+0x9a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a26      	ldr	r2, [pc, #152]	; (8002b58 <TIM_Base_SetConfig+0x130>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d108      	bne.n	8002ad4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a10      	ldr	r2, [pc, #64]	; (8002b3c <TIM_Base_SetConfig+0x114>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00f      	beq.n	8002b20 <TIM_Base_SetConfig+0xf8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <TIM_Base_SetConfig+0x124>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00b      	beq.n	8002b20 <TIM_Base_SetConfig+0xf8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <TIM_Base_SetConfig+0x128>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d007      	beq.n	8002b20 <TIM_Base_SetConfig+0xf8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <TIM_Base_SetConfig+0x12c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d003      	beq.n	8002b20 <TIM_Base_SetConfig+0xf8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a0f      	ldr	r2, [pc, #60]	; (8002b58 <TIM_Base_SetConfig+0x130>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d103      	bne.n	8002b28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	615a      	str	r2, [r3, #20]
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40000800 	.word	0x40000800
 8002b48:	40000c00 	.word	0x40000c00
 8002b4c:	40013400 	.word	0x40013400
 8002b50:	40014000 	.word	0x40014000
 8002b54:	40014400 	.word	0x40014400
 8002b58:	40014800 	.word	0x40014800

08002b5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	f023 0201 	bic.w	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f023 0302 	bic.w	r3, r3, #2
 8002ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a2c      	ldr	r2, [pc, #176]	; (8002c68 <TIM_OC1_SetConfig+0x10c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00f      	beq.n	8002bdc <TIM_OC1_SetConfig+0x80>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a2b      	ldr	r2, [pc, #172]	; (8002c6c <TIM_OC1_SetConfig+0x110>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00b      	beq.n	8002bdc <TIM_OC1_SetConfig+0x80>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a2a      	ldr	r2, [pc, #168]	; (8002c70 <TIM_OC1_SetConfig+0x114>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d007      	beq.n	8002bdc <TIM_OC1_SetConfig+0x80>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a29      	ldr	r2, [pc, #164]	; (8002c74 <TIM_OC1_SetConfig+0x118>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <TIM_OC1_SetConfig+0x80>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a28      	ldr	r2, [pc, #160]	; (8002c78 <TIM_OC1_SetConfig+0x11c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d10c      	bne.n	8002bf6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0308 	bic.w	r3, r3, #8
 8002be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f023 0304 	bic.w	r3, r3, #4
 8002bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <TIM_OC1_SetConfig+0x10c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00f      	beq.n	8002c1e <TIM_OC1_SetConfig+0xc2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a1a      	ldr	r2, [pc, #104]	; (8002c6c <TIM_OC1_SetConfig+0x110>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00b      	beq.n	8002c1e <TIM_OC1_SetConfig+0xc2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <TIM_OC1_SetConfig+0x114>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <TIM_OC1_SetConfig+0xc2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <TIM_OC1_SetConfig+0x118>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_OC1_SetConfig+0xc2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <TIM_OC1_SetConfig+0x11c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d111      	bne.n	8002c42 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40013400 	.word	0x40013400
 8002c70:	40014000 	.word	0x40014000
 8002c74:	40014400 	.word	0x40014400
 8002c78:	40014800 	.word	0x40014800

08002c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f023 0210 	bic.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f023 0320 	bic.w	r3, r3, #32
 8002cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <TIM_OC2_SetConfig+0x100>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <TIM_OC2_SetConfig+0x6c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <TIM_OC2_SetConfig+0x104>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d10d      	bne.n	8002d04 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <TIM_OC2_SetConfig+0x100>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00f      	beq.n	8002d2c <TIM_OC2_SetConfig+0xb0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <TIM_OC2_SetConfig+0x104>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00b      	beq.n	8002d2c <TIM_OC2_SetConfig+0xb0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <TIM_OC2_SetConfig+0x108>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d007      	beq.n	8002d2c <TIM_OC2_SetConfig+0xb0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <TIM_OC2_SetConfig+0x10c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_OC2_SetConfig+0xb0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <TIM_OC2_SetConfig+0x110>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d113      	bne.n	8002d54 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40013400 	.word	0x40013400
 8002d84:	40014000 	.word	0x40014000
 8002d88:	40014400 	.word	0x40014400
 8002d8c:	40014800 	.word	0x40014800

08002d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <TIM_OC3_SetConfig+0xfc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d003      	beq.n	8002dfa <TIM_OC3_SetConfig+0x6a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a26      	ldr	r2, [pc, #152]	; (8002e90 <TIM_OC3_SetConfig+0x100>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10d      	bne.n	8002e16 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <TIM_OC3_SetConfig+0xfc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00f      	beq.n	8002e3e <TIM_OC3_SetConfig+0xae>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <TIM_OC3_SetConfig+0x100>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <TIM_OC3_SetConfig+0xae>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <TIM_OC3_SetConfig+0x104>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <TIM_OC3_SetConfig+0xae>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <TIM_OC3_SetConfig+0x108>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <TIM_OC3_SetConfig+0xae>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <TIM_OC3_SetConfig+0x10c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d113      	bne.n	8002e66 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	621a      	str	r2, [r3, #32]
}
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40012c00 	.word	0x40012c00
 8002e90:	40013400 	.word	0x40013400
 8002e94:	40014000 	.word	0x40014000
 8002e98:	40014400 	.word	0x40014400
 8002e9c:	40014800 	.word	0x40014800

08002ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	031b      	lsls	r3, r3, #12
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <TIM_OC4_SetConfig+0xc0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00f      	beq.n	8002f24 <TIM_OC4_SetConfig+0x84>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <TIM_OC4_SetConfig+0xc4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00b      	beq.n	8002f24 <TIM_OC4_SetConfig+0x84>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <TIM_OC4_SetConfig+0xc8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d007      	beq.n	8002f24 <TIM_OC4_SetConfig+0x84>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <TIM_OC4_SetConfig+0xcc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <TIM_OC4_SetConfig+0x84>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <TIM_OC4_SetConfig+0xd0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d109      	bne.n	8002f38 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	019b      	lsls	r3, r3, #6
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40013400 	.word	0x40013400
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40014400 	.word	0x40014400
 8002f70:	40014800 	.word	0x40014800

08002f74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002fb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a17      	ldr	r2, [pc, #92]	; (8003028 <TIM_OC5_SetConfig+0xb4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00f      	beq.n	8002fee <TIM_OC5_SetConfig+0x7a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a16      	ldr	r2, [pc, #88]	; (800302c <TIM_OC5_SetConfig+0xb8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <TIM_OC5_SetConfig+0x7a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a15      	ldr	r2, [pc, #84]	; (8003030 <TIM_OC5_SetConfig+0xbc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <TIM_OC5_SetConfig+0x7a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <TIM_OC5_SetConfig+0xc0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <TIM_OC5_SetConfig+0x7a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a13      	ldr	r2, [pc, #76]	; (8003038 <TIM_OC5_SetConfig+0xc4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d109      	bne.n	8003002 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	621a      	str	r2, [r3, #32]
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40013400 	.word	0x40013400
 8003030:	40014000 	.word	0x40014000
 8003034:	40014400 	.word	0x40014400
 8003038:	40014800 	.word	0x40014800

0800303c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	051b      	lsls	r3, r3, #20
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <TIM_OC6_SetConfig+0xb8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00f      	beq.n	80030b8 <TIM_OC6_SetConfig+0x7c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <TIM_OC6_SetConfig+0xbc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00b      	beq.n	80030b8 <TIM_OC6_SetConfig+0x7c>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a16      	ldr	r2, [pc, #88]	; (80030fc <TIM_OC6_SetConfig+0xc0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <TIM_OC6_SetConfig+0x7c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a15      	ldr	r2, [pc, #84]	; (8003100 <TIM_OC6_SetConfig+0xc4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d003      	beq.n	80030b8 <TIM_OC6_SetConfig+0x7c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a14      	ldr	r2, [pc, #80]	; (8003104 <TIM_OC6_SetConfig+0xc8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d109      	bne.n	80030cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	029b      	lsls	r3, r3, #10
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	621a      	str	r2, [r3, #32]
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40013400 	.word	0x40013400
 80030fc:	40014000 	.word	0x40014000
 8003100:	40014400 	.word	0x40014400
 8003104:	40014800 	.word	0x40014800

08003108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f023 0201 	bic.w	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f023 030a 	bic.w	r3, r3, #10
 8003144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003166:	b480      	push	{r7}
 8003168:	b087      	sub	sp, #28
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0210 	bic.w	r2, r3, #16
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	031b      	lsls	r3, r3, #12
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	621a      	str	r2, [r3, #32]
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f043 0307 	orr.w	r3, r3, #7
 80031e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	021a      	lsls	r2, r3, #8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	431a      	orrs	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4313      	orrs	r3, r2
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2201      	movs	r2, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	43db      	mvns	r3, r3
 800325e:	401a      	ands	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a1a      	ldr	r2, [r3, #32]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	431a      	orrs	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b08a      	sub	sp, #40	; 0x28
 800328a:	af02      	add	r7, sp, #8
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329a:	2b20      	cmp	r3, #32
 800329c:	f040 8082 	bne.w	80033a4 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_UART_Transmit+0x26>
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e07a      	b.n	80033a6 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_UART_Transmit+0x38>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e073      	b.n	80033a6 <HAL_UART_Transmit+0x120>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	; 0x21
 80032d2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d4:	f7fd ff16 	bl	8001104 <HAL_GetTick>
 80032d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f2:	d108      	bne.n	8003306 <HAL_UART_Transmit+0x80>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	e003      	b.n	800330e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003316:	e02d      	b.n	8003374 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2200      	movs	r2, #0
 8003320:	2180      	movs	r1, #128	; 0x80
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f843 	bl	80033ae <UART_WaitOnFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e039      	b.n	80033a6 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	881a      	ldrh	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003344:	b292      	uxth	r2, r2
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	3302      	adds	r3, #2
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	e008      	b.n	8003362 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	781a      	ldrb	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	b292      	uxth	r2, r2
 800335a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	3301      	adds	r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1cb      	bne.n	8003318 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2200      	movs	r2, #0
 8003388:	2140      	movs	r1, #64	; 0x40
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f80f 	bl	80033ae <UART_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e005      	b.n	80033a6 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e000      	b.n	80033a6 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b09c      	sub	sp, #112	; 0x70
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	4613      	mov	r3, r2
 80033bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033be:	e0a5      	b.n	800350c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c6:	f000 80a1 	beq.w	800350c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7fd fe9b 	bl	8001104 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80033da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d13e      	bne.n	800345e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033f4:	667b      	str	r3, [r7, #100]	; 0x64
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003400:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003404:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800340c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e6      	bne.n	80033e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3308      	adds	r3, #8
 8003418:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	663b      	str	r3, [r7, #96]	; 0x60
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3308      	adds	r3, #8
 8003430:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003432:	64ba      	str	r2, [r7, #72]	; 0x48
 8003434:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e5      	bne.n	8003412 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e067      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d04f      	beq.n	800350c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347a:	d147      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003484:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800349a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34
 80034a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e6      	bne.n	8003486 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	613b      	str	r3, [r7, #16]
   return(result);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3308      	adds	r3, #8
 80034d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034d8:	623a      	str	r2, [r7, #32]
 80034da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	69f9      	ldr	r1, [r7, #28]
 80034de:	6a3a      	ldr	r2, [r7, #32]
 80034e0:	e841 2300 	strex	r3, r2, [r1]
 80034e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e5      	bne.n	80034b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e010      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4013      	ands	r3, r2
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	429a      	cmp	r2, r3
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	429a      	cmp	r2, r3
 8003528:	f43f af4a 	beq.w	80033c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3770      	adds	r7, #112	; 0x70
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <Global_GPIO_Init>:
 *      Author: felipe
 */
#include "GPIO.h"


void Global_GPIO_Init() {
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <Global_GPIO_Init+0x74>)
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <Global_GPIO_Init+0x74>)
 8003544:	f043 0304 	orr.w	r3, r3, #4
 8003548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <Global_GPIO_Init+0x74>)
 800354c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <Global_GPIO_Init+0x74>)
 8003558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355a:	4a14      	ldr	r2, [pc, #80]	; (80035ac <Global_GPIO_Init+0x74>)
 800355c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <Global_GPIO_Init+0x74>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <Global_GPIO_Init+0x74>)
 8003570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003572:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <Global_GPIO_Init+0x74>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800357a:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <Global_GPIO_Init+0x74>)
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <Global_GPIO_Init+0x74>)
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	4a08      	ldr	r2, [pc, #32]	; (80035ac <Global_GPIO_Init+0x74>)
 800358c:	f043 0302 	orr.w	r3, r3, #2
 8003590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <Global_GPIO_Init+0x74>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
}
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000

080035b0 <SG90_Gpio>:
 */

#include "SG90.h"


static void SG90_Gpio(SG90_Struct_t *Servo) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GpioInit = {0};
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]

	if (Servo->SG90_GPIO == GPIOA){
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035d0:	d10c      	bne.n	80035ec <SG90_Gpio+0x3c>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80035d2:	4b32      	ldr	r3, [pc, #200]	; (800369c <SG90_Gpio+0xec>)
 80035d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d6:	4a31      	ldr	r2, [pc, #196]	; (800369c <SG90_Gpio+0xec>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035de:	4b2f      	ldr	r3, [pc, #188]	; (800369c <SG90_Gpio+0xec>)
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	e022      	b.n	8003632 <SG90_Gpio+0x82>
	}

	else if (Servo->SG90_GPIO == GPIOB){
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2b      	ldr	r2, [pc, #172]	; (80036a0 <SG90_Gpio+0xf0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10c      	bne.n	8003610 <SG90_Gpio+0x60>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80035f6:	4b29      	ldr	r3, [pc, #164]	; (800369c <SG90_Gpio+0xec>)
 80035f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fa:	4a28      	ldr	r2, [pc, #160]	; (800369c <SG90_Gpio+0xec>)
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <SG90_Gpio+0xec>)
 8003604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	e010      	b.n	8003632 <SG90_Gpio+0x82>
	}

	else if (Servo->SG90_GPIO == GPIOC){
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a23      	ldr	r2, [pc, #140]	; (80036a4 <SG90_Gpio+0xf4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10b      	bne.n	8003632 <SG90_Gpio+0x82>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <SG90_Gpio+0xec>)
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	4a1f      	ldr	r2, [pc, #124]	; (800369c <SG90_Gpio+0xec>)
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <SG90_Gpio+0xec>)
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
	}

	GpioInit.Pin = Servo->SG90_PIN;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	889b      	ldrh	r3, [r3, #4]
 8003636:	617b      	str	r3, [r7, #20]
	GpioInit.Mode = GPIO_MODE_AF_PP;
 8003638:	2302      	movs	r3, #2
 800363a:	61bb      	str	r3, [r7, #24]
	GpioInit.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	61fb      	str	r3, [r7, #28]
	GpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8003640:	2300      	movs	r3, #0
 8003642:	623b      	str	r3, [r7, #32]

	if (Servo->TIM_Instance == TIM1) {
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <SG90_Gpio+0xf8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d102      	bne.n	8003654 <SG90_Gpio+0xa4>
		GpioInit.Alternate = GPIO_AF2_TIM1;
 800364e:	2302      	movs	r3, #2
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
 8003652:	e016      	b.n	8003682 <SG90_Gpio+0xd2>
	}

	else if (Servo->TIM_Instance == TIM2) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365c:	d102      	bne.n	8003664 <SG90_Gpio+0xb4>
		GpioInit.Alternate = GPIO_AF2_TIM2;
 800365e:	2302      	movs	r3, #2
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	e00e      	b.n	8003682 <SG90_Gpio+0xd2>
	}

	else if (Servo->TIM_Instance == TIM3) {
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a10      	ldr	r2, [pc, #64]	; (80036ac <SG90_Gpio+0xfc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d102      	bne.n	8003674 <SG90_Gpio+0xc4>
		GpioInit.Alternate = GPIO_AF2_TIM3;
 800366e:	2302      	movs	r3, #2
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	e006      	b.n	8003682 <SG90_Gpio+0xd2>
	}

	else if (Servo->TIM_Instance == TIM4) {
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a0d      	ldr	r2, [pc, #52]	; (80036b0 <SG90_Gpio+0x100>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <SG90_Gpio+0xd2>
		GpioInit.Alternate = GPIO_AF2_TIM4;
 800367e:	2302      	movs	r3, #2
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
	}


	HAL_GPIO_Init(Servo->SG90_GPIO, &GpioInit);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f107 0214 	add.w	r2, r7, #20
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd fe4f 	bl	8001330 <HAL_GPIO_Init>
}
 8003692:	bf00      	nop
 8003694:	3728      	adds	r7, #40	; 0x28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	48000400 	.word	0x48000400
 80036a4:	48000800 	.word	0x48000800
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800

080036b4 <SG90_Init>:


static void SG90_Init(SG90_Struct_t *Servo, TIM_HandleTypeDef *Servo_TIM_Handle) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b092      	sub	sp, #72	; 0x48
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
	SG90_Gpio(Servo);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ff76 	bl	80035b0 <SG90_Gpio>

	if (Servo->TIM_Instance == TIM1) {
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a49      	ldr	r2, [pc, #292]	; (80037f0 <SG90_Init+0x13c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d10c      	bne.n	80036e8 <SG90_Init+0x34>
		__HAL_RCC_TIM1_CLK_ENABLE();
 80036ce:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <SG90_Init+0x140>)
 80036d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d2:	4a48      	ldr	r2, [pc, #288]	; (80037f4 <SG90_Init+0x140>)
 80036d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036d8:	6613      	str	r3, [r2, #96]	; 0x60
 80036da:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <SG90_Init+0x140>)
 80036dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	e034      	b.n	8003752 <SG90_Init+0x9e>
	}

	else if (Servo->TIM_Instance == TIM2) {
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d10c      	bne.n	800370c <SG90_Init+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80036f2:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <SG90_Init+0x140>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	4a3f      	ldr	r2, [pc, #252]	; (80037f4 <SG90_Init+0x140>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6593      	str	r3, [r2, #88]	; 0x58
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <SG90_Init+0x140>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	e022      	b.n	8003752 <SG90_Init+0x9e>
	}

	else if (Servo->TIM_Instance == TIM3) {
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a39      	ldr	r2, [pc, #228]	; (80037f8 <SG90_Init+0x144>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10c      	bne.n	8003730 <SG90_Init+0x7c>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8003716:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <SG90_Init+0x140>)
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	4a36      	ldr	r2, [pc, #216]	; (80037f4 <SG90_Init+0x140>)
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	6593      	str	r3, [r2, #88]	; 0x58
 8003722:	4b34      	ldr	r3, [pc, #208]	; (80037f4 <SG90_Init+0x140>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	e010      	b.n	8003752 <SG90_Init+0x9e>
	}

	else if (Servo->TIM_Instance == TIM4) {
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4a31      	ldr	r2, [pc, #196]	; (80037fc <SG90_Init+0x148>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10b      	bne.n	8003752 <SG90_Init+0x9e>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800373a:	4b2e      	ldr	r3, [pc, #184]	; (80037f4 <SG90_Init+0x140>)
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373e:	4a2d      	ldr	r2, [pc, #180]	; (80037f4 <SG90_Init+0x140>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	6593      	str	r3, [r2, #88]	; 0x58
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <SG90_Init+0x140>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
	}


	Servo_TIM_Handle->Instance = Servo->TIM_Instance;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	601a      	str	r2, [r3, #0]
	Servo_TIM_Handle->Init.Prescaler = 80 -1;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	224f      	movs	r2, #79	; 0x4f
 800375e:	605a      	str	r2, [r3, #4]
	Servo_TIM_Handle->Init.Period = 20000 - 1;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003766:	60da      	str	r2, [r3, #12]
	Servo_TIM_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
	Servo_TIM_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
	Servo_TIM_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(Servo_TIM_Handle);
 800377a:	6838      	ldr	r0, [r7, #0]
 800377c:	f7fe fdae 	bl	80022dc <HAL_TIM_Base_Init>

	TIM_ClockConfigTypeDef sClock = {0};
 8003780:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]

	sClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800378e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38

	HAL_TIM_ConfigClockSource(Servo_TIM_Handle, &sClock);
 8003794:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003798:	4619      	mov	r1, r3
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	f7ff f87a 	bl	8002894 <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(Servo_TIM_Handle);
 80037a0:	6838      	ldr	r0, [r7, #0]
 80037a2:	f7fe fdfc 	bl	800239e <HAL_TIM_PWM_Init>

	TIM_OC_InitTypeDef Tim_OC = {0};
 80037a6:	f107 031c 	add.w	r3, r7, #28
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	60da      	str	r2, [r3, #12]
 80037b4:	611a      	str	r2, [r3, #16]
 80037b6:	615a      	str	r2, [r3, #20]
 80037b8:	619a      	str	r2, [r3, #24]

	Tim_OC.OCMode = TIM_OCMODE_PWM1;
 80037ba:	2360      	movs	r3, #96	; 0x60
 80037bc:	61fb      	str	r3, [r7, #28]
	Tim_OC.Pulse = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	623b      	str	r3, [r7, #32]
	Tim_OC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037c2:	2300      	movs	r3, #0
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
	Tim_OC.OCFastMode = TIM_OCFAST_DISABLE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_TIM_PWM_ConfigChannel(Servo_TIM_Handle, &Tim_OC, Servo->PWM_TIM_Channel);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	f107 031c 	add.w	r3, r7, #28
 80037d2:	4619      	mov	r1, r3
 80037d4:	6838      	ldr	r0, [r7, #0]
 80037d6:	f7fe ff49 	bl	800266c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(Servo_TIM_Handle, Servo->PWM_TIM_Channel);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	4619      	mov	r1, r3
 80037e0:	6838      	ldr	r0, [r7, #0]
 80037e2:	f7fe fe3d 	bl	8002460 <HAL_TIM_PWM_Start>
}
 80037e6:	bf00      	nop
 80037e8:	3748      	adds	r7, #72	; 0x48
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40012c00 	.word	0x40012c00
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800

08003800 <Servo_SetDutyCyle>:


static void Servo_SetDutyCyle(SG90_Struct_t *Servo, float duty_cycle, TIM_HandleTypeDef *Servo_TIM_Handle) {
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	ed87 0a02 	vstr	s0, [r7, #8]
 800380c:	6079      	str	r1, [r7, #4]
	uint16_t ccr_value;

	if (duty_cycle > 100.0f) {
 800380e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003812:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80038d4 <Servo_SetDutyCyle+0xd4>
 8003816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381e:	dd01      	ble.n	8003824 <Servo_SetDutyCyle+0x24>
		duty_cycle = 100.0f;
 8003820:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <Servo_SetDutyCyle+0xd8>)
 8003822:	60bb      	str	r3, [r7, #8]
	}

	ccr_value = (uint16_t)(__HAL_TIM_GET_AUTORELOAD(Servo_TIM_Handle) + 0.0f) * (duty_cycle/100.0f);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003832:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80038dc <Servo_SetDutyCyle+0xdc>
 8003836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800383a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800383e:	ee17 3a90 	vmov	r3, s15
 8003842:	b29b      	uxth	r3, r3
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800384c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003850:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80038d4 <Servo_SetDutyCyle+0xd4>
 8003854:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003860:	ee17 3a90 	vmov	r3, s15
 8003864:	82fb      	strh	r3, [r7, #22]

	__HAL_TIM_SET_COMPARE(Servo_TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <Servo_SetDutyCyle+0x78>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	8afa      	ldrh	r2, [r7, #22]
 8003874:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003876:	e027      	b.n	80038c8 <Servo_SetDutyCyle+0xc8>
	__HAL_TIM_SET_COMPARE(Servo_TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d104      	bne.n	800388a <Servo_SetDutyCyle+0x8a>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	8afb      	ldrh	r3, [r7, #22]
 8003886:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003888:	e01e      	b.n	80038c8 <Servo_SetDutyCyle+0xc8>
	__HAL_TIM_SET_COMPARE(Servo_TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b08      	cmp	r3, #8
 8003890:	d104      	bne.n	800389c <Servo_SetDutyCyle+0x9c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	8afb      	ldrh	r3, [r7, #22]
 8003898:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800389a:	e015      	b.n	80038c8 <Servo_SetDutyCyle+0xc8>
	__HAL_TIM_SET_COMPARE(Servo_TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	d104      	bne.n	80038ae <Servo_SetDutyCyle+0xae>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	8afb      	ldrh	r3, [r7, #22]
 80038aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80038ac:	e00c      	b.n	80038c8 <Servo_SetDutyCyle+0xc8>
	__HAL_TIM_SET_COMPARE(Servo_TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d104      	bne.n	80038c0 <Servo_SetDutyCyle+0xc0>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	8afb      	ldrh	r3, [r7, #22]
 80038bc:	6593      	str	r3, [r2, #88]	; 0x58
}
 80038be:	e003      	b.n	80038c8 <Servo_SetDutyCyle+0xc8>
	__HAL_TIM_SET_COMPARE(Servo_TIM_Handle, Servo->PWM_TIM_Channel, ccr_value);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	8afb      	ldrh	r3, [r7, #22]
 80038c6:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	42c80000 	.word	0x42c80000
 80038d8:	42c80000 	.word	0x42c80000
 80038dc:	00000000 	.word	0x00000000

080038e0 <Servo_Create>:
SG90_Struct_t Servo_Create(
	GPIO_TypeDef *sg90_gpio, uint16_t sg90_pin,
	TIM_TypeDef *tim_Instance, uint32_t pwm_channel,
	TIM_HandleTypeDef *Servo_TIM_Handle
)
{
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	80fb      	strh	r3, [r7, #6]
	SG90_Struct_t Servo;

	Servo.SG90_GPIO = sg90_gpio;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	617b      	str	r3, [r7, #20]
	Servo.SG90_PIN = sg90_pin;
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	833b      	strh	r3, [r7, #24]
	Servo.TIM_Instance = tim_Instance;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	61fb      	str	r3, [r7, #28]
	Servo.PWM_TIM_Channel = pwm_channel;
 80038fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fe:	623b      	str	r3, [r7, #32]
	Servo.TIM_Handle = Servo_TIM_Handle;
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003902:	627b      	str	r3, [r7, #36]	; 0x24

	SG90_Init(&Servo, Servo_TIM_Handle);
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fed2 	bl	80036b4 <SG90_Init>

	return Servo;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	461d      	mov	r5, r3
 8003914:	f107 0414 	add.w	r4, r7, #20
 8003918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	602b      	str	r3, [r5, #0]
}
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	3728      	adds	r7, #40	; 0x28
 8003924:	46bd      	mov	sp, r7
 8003926:	bdb0      	pop	{r4, r5, r7, pc}

08003928 <Servo_Rotate>:


void Servo_Rotate(SG90_Struct_t *Servo, float angle) {
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	ed87 0a00 	vstr	s0, [r7]
	float converted_cycle = (angle / 36.0) + 5; //Angles from 0 to 180 get mapped to duty cycles from 5 to 10
 8003934:	6838      	ldr	r0, [r7, #0]
 8003936:	f7fc fe07 	bl	8000548 <__aeabi_f2d>
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <Servo_Rotate+0x58>)
 8003940:	f7fc ff84 	bl	800084c <__aeabi_ddiv>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <Servo_Rotate+0x5c>)
 8003952:	f7fc fc9b 	bl	800028c <__adddf3>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	f7fd f943 	bl	8000be8 <__aeabi_d2f>
 8003962:	4603      	mov	r3, r0
 8003964:	60fb      	str	r3, [r7, #12]

	Servo_SetDutyCyle(Servo, converted_cycle, Servo->TIM_Handle);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	4619      	mov	r1, r3
 800396c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff45 	bl	8003800 <Servo_SetDutyCyle>
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40420000 	.word	0x40420000
 8003984:	40140000 	.word	0x40140000

08003988 <SysConfigClock>:
 */

#include "SysConfig.h"


void SysConfigClock(void){
 8003988:	b580      	push	{r7, lr}
 800398a:	b096      	sub	sp, #88	; 0x58
 800398c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800398e:	f107 0314 	add.w	r3, r7, #20
 8003992:	2244      	movs	r2, #68	; 0x44
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f876 	bl	8003a88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800399c:	463b      	mov	r3, r7
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	609a      	str	r2, [r3, #8]
 80039a6:	60da      	str	r2, [r3, #12]
 80039a8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80039aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039ae:	f7fd fe77 	bl	80016a0 <HAL_PWREx_ControlVoltageScaling>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <SysConfigClock+0x34>
	{
		Error_Handler();
 80039b8:	f000 f837 	bl	8003a2a <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039bc:	2302      	movs	r3, #2
 80039be:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039c4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039c6:	2310      	movs	r3, #16
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039ca:	2302      	movs	r3, #2
 80039cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039ce:	2302      	movs	r3, #2
 80039d0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80039d2:	2301      	movs	r3, #1
 80039d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80039d6:	230a      	movs	r3, #10
 80039d8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80039da:	2307      	movs	r3, #7
 80039dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039de:	2302      	movs	r3, #2
 80039e0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039e2:	2302      	movs	r3, #2
 80039e4:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd feae 	bl	800174c <HAL_RCC_OscConfig>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <SysConfigClock+0x72>
	{
		Error_Handler();
 80039f6:	f000 f818 	bl	8003a2a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039fa:	230f      	movs	r3, #15
 80039fc:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039fe:	2303      	movs	r3, #3
 8003a00:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a0e:	463b      	mov	r3, r7
 8003a10:	2104      	movs	r1, #4
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fa76 	bl	8001f04 <HAL_RCC_ClockConfig>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <SysConfigClock+0x9a>
	{
		Error_Handler();
 8003a1e:	f000 f804 	bl	8003a2a <Error_Handler>
	}
}
 8003a22:	bf00      	nop
 8003a24:	3758      	adds	r7, #88	; 0x58
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <Error_Handler>:



void Error_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a2e:	b672      	cpsid	i
}
 8003a30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a32:	e7fe      	b.n	8003a32 <Error_Handler+0x8>

08003a34 <__errno>:
 8003a34:	4b01      	ldr	r3, [pc, #4]	; (8003a3c <__errno+0x8>)
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	2000000c 	.word	0x2000000c

08003a40 <__libc_init_array>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	4d0d      	ldr	r5, [pc, #52]	; (8003a78 <__libc_init_array+0x38>)
 8003a44:	4c0d      	ldr	r4, [pc, #52]	; (8003a7c <__libc_init_array+0x3c>)
 8003a46:	1b64      	subs	r4, r4, r5
 8003a48:	10a4      	asrs	r4, r4, #2
 8003a4a:	2600      	movs	r6, #0
 8003a4c:	42a6      	cmp	r6, r4
 8003a4e:	d109      	bne.n	8003a64 <__libc_init_array+0x24>
 8003a50:	4d0b      	ldr	r5, [pc, #44]	; (8003a80 <__libc_init_array+0x40>)
 8003a52:	4c0c      	ldr	r4, [pc, #48]	; (8003a84 <__libc_init_array+0x44>)
 8003a54:	f004 fc90 	bl	8008378 <_init>
 8003a58:	1b64      	subs	r4, r4, r5
 8003a5a:	10a4      	asrs	r4, r4, #2
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	42a6      	cmp	r6, r4
 8003a60:	d105      	bne.n	8003a6e <__libc_init_array+0x2e>
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a68:	4798      	blx	r3
 8003a6a:	3601      	adds	r6, #1
 8003a6c:	e7ee      	b.n	8003a4c <__libc_init_array+0xc>
 8003a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a72:	4798      	blx	r3
 8003a74:	3601      	adds	r6, #1
 8003a76:	e7f2      	b.n	8003a5e <__libc_init_array+0x1e>
 8003a78:	08008874 	.word	0x08008874
 8003a7c:	08008874 	.word	0x08008874
 8003a80:	08008874 	.word	0x08008874
 8003a84:	08008878 	.word	0x08008878

08003a88 <memset>:
 8003a88:	4402      	add	r2, r0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <memset+0xa>
 8003a90:	4770      	bx	lr
 8003a92:	f803 1b01 	strb.w	r1, [r3], #1
 8003a96:	e7f9      	b.n	8003a8c <memset+0x4>

08003a98 <__cvt>:
 8003a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a9c:	ec55 4b10 	vmov	r4, r5, d0
 8003aa0:	2d00      	cmp	r5, #0
 8003aa2:	460e      	mov	r6, r1
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	462b      	mov	r3, r5
 8003aa8:	bfbb      	ittet	lt
 8003aaa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003aae:	461d      	movlt	r5, r3
 8003ab0:	2300      	movge	r3, #0
 8003ab2:	232d      	movlt	r3, #45	; 0x2d
 8003ab4:	700b      	strb	r3, [r1, #0]
 8003ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ab8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003abc:	4691      	mov	r9, r2
 8003abe:	f023 0820 	bic.w	r8, r3, #32
 8003ac2:	bfbc      	itt	lt
 8003ac4:	4622      	movlt	r2, r4
 8003ac6:	4614      	movlt	r4, r2
 8003ac8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003acc:	d005      	beq.n	8003ada <__cvt+0x42>
 8003ace:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ad2:	d100      	bne.n	8003ad6 <__cvt+0x3e>
 8003ad4:	3601      	adds	r6, #1
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	e000      	b.n	8003adc <__cvt+0x44>
 8003ada:	2103      	movs	r1, #3
 8003adc:	ab03      	add	r3, sp, #12
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	ab02      	add	r3, sp, #8
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	ec45 4b10 	vmov	d0, r4, r5
 8003ae8:	4653      	mov	r3, sl
 8003aea:	4632      	mov	r2, r6
 8003aec:	f001 fdac 	bl	8005648 <_dtoa_r>
 8003af0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003af4:	4607      	mov	r7, r0
 8003af6:	d102      	bne.n	8003afe <__cvt+0x66>
 8003af8:	f019 0f01 	tst.w	r9, #1
 8003afc:	d022      	beq.n	8003b44 <__cvt+0xac>
 8003afe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b02:	eb07 0906 	add.w	r9, r7, r6
 8003b06:	d110      	bne.n	8003b2a <__cvt+0x92>
 8003b08:	783b      	ldrb	r3, [r7, #0]
 8003b0a:	2b30      	cmp	r3, #48	; 0x30
 8003b0c:	d10a      	bne.n	8003b24 <__cvt+0x8c>
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2300      	movs	r3, #0
 8003b12:	4620      	mov	r0, r4
 8003b14:	4629      	mov	r1, r5
 8003b16:	f7fc ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b1a:	b918      	cbnz	r0, 8003b24 <__cvt+0x8c>
 8003b1c:	f1c6 0601 	rsb	r6, r6, #1
 8003b20:	f8ca 6000 	str.w	r6, [sl]
 8003b24:	f8da 3000 	ldr.w	r3, [sl]
 8003b28:	4499      	add	r9, r3
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	4620      	mov	r0, r4
 8003b30:	4629      	mov	r1, r5
 8003b32:	f7fc ffc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b36:	b108      	cbz	r0, 8003b3c <__cvt+0xa4>
 8003b38:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b3c:	2230      	movs	r2, #48	; 0x30
 8003b3e:	9b03      	ldr	r3, [sp, #12]
 8003b40:	454b      	cmp	r3, r9
 8003b42:	d307      	bcc.n	8003b54 <__cvt+0xbc>
 8003b44:	9b03      	ldr	r3, [sp, #12]
 8003b46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b48:	1bdb      	subs	r3, r3, r7
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	b004      	add	sp, #16
 8003b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b54:	1c59      	adds	r1, r3, #1
 8003b56:	9103      	str	r1, [sp, #12]
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	e7f0      	b.n	8003b3e <__cvt+0xa6>

08003b5c <__exponent>:
 8003b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2900      	cmp	r1, #0
 8003b62:	bfb8      	it	lt
 8003b64:	4249      	neglt	r1, r1
 8003b66:	f803 2b02 	strb.w	r2, [r3], #2
 8003b6a:	bfb4      	ite	lt
 8003b6c:	222d      	movlt	r2, #45	; 0x2d
 8003b6e:	222b      	movge	r2, #43	; 0x2b
 8003b70:	2909      	cmp	r1, #9
 8003b72:	7042      	strb	r2, [r0, #1]
 8003b74:	dd2a      	ble.n	8003bcc <__exponent+0x70>
 8003b76:	f10d 0407 	add.w	r4, sp, #7
 8003b7a:	46a4      	mov	ip, r4
 8003b7c:	270a      	movs	r7, #10
 8003b7e:	46a6      	mov	lr, r4
 8003b80:	460a      	mov	r2, r1
 8003b82:	fb91 f6f7 	sdiv	r6, r1, r7
 8003b86:	fb07 1516 	mls	r5, r7, r6, r1
 8003b8a:	3530      	adds	r5, #48	; 0x30
 8003b8c:	2a63      	cmp	r2, #99	; 0x63
 8003b8e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003b92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003b96:	4631      	mov	r1, r6
 8003b98:	dcf1      	bgt.n	8003b7e <__exponent+0x22>
 8003b9a:	3130      	adds	r1, #48	; 0x30
 8003b9c:	f1ae 0502 	sub.w	r5, lr, #2
 8003ba0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ba4:	1c44      	adds	r4, r0, #1
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	4561      	cmp	r1, ip
 8003baa:	d30a      	bcc.n	8003bc2 <__exponent+0x66>
 8003bac:	f10d 0209 	add.w	r2, sp, #9
 8003bb0:	eba2 020e 	sub.w	r2, r2, lr
 8003bb4:	4565      	cmp	r5, ip
 8003bb6:	bf88      	it	hi
 8003bb8:	2200      	movhi	r2, #0
 8003bba:	4413      	add	r3, r2
 8003bbc:	1a18      	subs	r0, r3, r0
 8003bbe:	b003      	add	sp, #12
 8003bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003bca:	e7ed      	b.n	8003ba8 <__exponent+0x4c>
 8003bcc:	2330      	movs	r3, #48	; 0x30
 8003bce:	3130      	adds	r1, #48	; 0x30
 8003bd0:	7083      	strb	r3, [r0, #2]
 8003bd2:	70c1      	strb	r1, [r0, #3]
 8003bd4:	1d03      	adds	r3, r0, #4
 8003bd6:	e7f1      	b.n	8003bbc <__exponent+0x60>

08003bd8 <_printf_float>:
 8003bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bdc:	ed2d 8b02 	vpush	{d8}
 8003be0:	b08d      	sub	sp, #52	; 0x34
 8003be2:	460c      	mov	r4, r1
 8003be4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003be8:	4616      	mov	r6, r2
 8003bea:	461f      	mov	r7, r3
 8003bec:	4605      	mov	r5, r0
 8003bee:	f002 fe89 	bl	8006904 <_localeconv_r>
 8003bf2:	f8d0 a000 	ldr.w	sl, [r0]
 8003bf6:	4650      	mov	r0, sl
 8003bf8:	f7fc faea 	bl	80001d0 <strlen>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	9305      	str	r3, [sp, #20]
 8003c04:	f8d8 3000 	ldr.w	r3, [r8]
 8003c08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003c0c:	3307      	adds	r3, #7
 8003c0e:	f023 0307 	bic.w	r3, r3, #7
 8003c12:	f103 0208 	add.w	r2, r3, #8
 8003c16:	f8c8 2000 	str.w	r2, [r8]
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003c26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c2a:	9307      	str	r3, [sp, #28]
 8003c2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c30:	ee08 0a10 	vmov	s16, r0
 8003c34:	4b9f      	ldr	r3, [pc, #636]	; (8003eb4 <_printf_float+0x2dc>)
 8003c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c3e:	f7fc ff75 	bl	8000b2c <__aeabi_dcmpun>
 8003c42:	bb88      	cbnz	r0, 8003ca8 <_printf_float+0xd0>
 8003c44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c48:	4b9a      	ldr	r3, [pc, #616]	; (8003eb4 <_printf_float+0x2dc>)
 8003c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c4e:	f7fc ff4f 	bl	8000af0 <__aeabi_dcmple>
 8003c52:	bb48      	cbnz	r0, 8003ca8 <_printf_float+0xd0>
 8003c54:	2200      	movs	r2, #0
 8003c56:	2300      	movs	r3, #0
 8003c58:	4640      	mov	r0, r8
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	f7fc ff3e 	bl	8000adc <__aeabi_dcmplt>
 8003c60:	b110      	cbz	r0, 8003c68 <_printf_float+0x90>
 8003c62:	232d      	movs	r3, #45	; 0x2d
 8003c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c68:	4b93      	ldr	r3, [pc, #588]	; (8003eb8 <_printf_float+0x2e0>)
 8003c6a:	4894      	ldr	r0, [pc, #592]	; (8003ebc <_printf_float+0x2e4>)
 8003c6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003c70:	bf94      	ite	ls
 8003c72:	4698      	movls	r8, r3
 8003c74:	4680      	movhi	r8, r0
 8003c76:	2303      	movs	r3, #3
 8003c78:	6123      	str	r3, [r4, #16]
 8003c7a:	9b05      	ldr	r3, [sp, #20]
 8003c7c:	f023 0204 	bic.w	r2, r3, #4
 8003c80:	6022      	str	r2, [r4, #0]
 8003c82:	f04f 0900 	mov.w	r9, #0
 8003c86:	9700      	str	r7, [sp, #0]
 8003c88:	4633      	mov	r3, r6
 8003c8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f000 f9d8 	bl	8004044 <_printf_common>
 8003c94:	3001      	adds	r0, #1
 8003c96:	f040 8090 	bne.w	8003dba <_printf_float+0x1e2>
 8003c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c9e:	b00d      	add	sp, #52	; 0x34
 8003ca0:	ecbd 8b02 	vpop	{d8}
 8003ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca8:	4642      	mov	r2, r8
 8003caa:	464b      	mov	r3, r9
 8003cac:	4640      	mov	r0, r8
 8003cae:	4649      	mov	r1, r9
 8003cb0:	f7fc ff3c 	bl	8000b2c <__aeabi_dcmpun>
 8003cb4:	b140      	cbz	r0, 8003cc8 <_printf_float+0xf0>
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bfbc      	itt	lt
 8003cbc:	232d      	movlt	r3, #45	; 0x2d
 8003cbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003cc2:	487f      	ldr	r0, [pc, #508]	; (8003ec0 <_printf_float+0x2e8>)
 8003cc4:	4b7f      	ldr	r3, [pc, #508]	; (8003ec4 <_printf_float+0x2ec>)
 8003cc6:	e7d1      	b.n	8003c6c <_printf_float+0x94>
 8003cc8:	6863      	ldr	r3, [r4, #4]
 8003cca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003cce:	9206      	str	r2, [sp, #24]
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	d13f      	bne.n	8003d54 <_printf_float+0x17c>
 8003cd4:	2306      	movs	r3, #6
 8003cd6:	6063      	str	r3, [r4, #4]
 8003cd8:	9b05      	ldr	r3, [sp, #20]
 8003cda:	6861      	ldr	r1, [r4, #4]
 8003cdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9303      	str	r3, [sp, #12]
 8003ce4:	ab0a      	add	r3, sp, #40	; 0x28
 8003ce6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003cea:	ab09      	add	r3, sp, #36	; 0x24
 8003cec:	ec49 8b10 	vmov	d0, r8, r9
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	6022      	str	r2, [r4, #0]
 8003cf4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f7ff fecd 	bl	8003a98 <__cvt>
 8003cfe:	9b06      	ldr	r3, [sp, #24]
 8003d00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d02:	2b47      	cmp	r3, #71	; 0x47
 8003d04:	4680      	mov	r8, r0
 8003d06:	d108      	bne.n	8003d1a <_printf_float+0x142>
 8003d08:	1cc8      	adds	r0, r1, #3
 8003d0a:	db02      	blt.n	8003d12 <_printf_float+0x13a>
 8003d0c:	6863      	ldr	r3, [r4, #4]
 8003d0e:	4299      	cmp	r1, r3
 8003d10:	dd41      	ble.n	8003d96 <_printf_float+0x1be>
 8003d12:	f1ab 0b02 	sub.w	fp, fp, #2
 8003d16:	fa5f fb8b 	uxtb.w	fp, fp
 8003d1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d1e:	d820      	bhi.n	8003d62 <_printf_float+0x18a>
 8003d20:	3901      	subs	r1, #1
 8003d22:	465a      	mov	r2, fp
 8003d24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d28:	9109      	str	r1, [sp, #36]	; 0x24
 8003d2a:	f7ff ff17 	bl	8003b5c <__exponent>
 8003d2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d30:	1813      	adds	r3, r2, r0
 8003d32:	2a01      	cmp	r2, #1
 8003d34:	4681      	mov	r9, r0
 8003d36:	6123      	str	r3, [r4, #16]
 8003d38:	dc02      	bgt.n	8003d40 <_printf_float+0x168>
 8003d3a:	6822      	ldr	r2, [r4, #0]
 8003d3c:	07d2      	lsls	r2, r2, #31
 8003d3e:	d501      	bpl.n	8003d44 <_printf_float+0x16c>
 8003d40:	3301      	adds	r3, #1
 8003d42:	6123      	str	r3, [r4, #16]
 8003d44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d09c      	beq.n	8003c86 <_printf_float+0xae>
 8003d4c:	232d      	movs	r3, #45	; 0x2d
 8003d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d52:	e798      	b.n	8003c86 <_printf_float+0xae>
 8003d54:	9a06      	ldr	r2, [sp, #24]
 8003d56:	2a47      	cmp	r2, #71	; 0x47
 8003d58:	d1be      	bne.n	8003cd8 <_printf_float+0x100>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1bc      	bne.n	8003cd8 <_printf_float+0x100>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e7b9      	b.n	8003cd6 <_printf_float+0xfe>
 8003d62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003d66:	d118      	bne.n	8003d9a <_printf_float+0x1c2>
 8003d68:	2900      	cmp	r1, #0
 8003d6a:	6863      	ldr	r3, [r4, #4]
 8003d6c:	dd0b      	ble.n	8003d86 <_printf_float+0x1ae>
 8003d6e:	6121      	str	r1, [r4, #16]
 8003d70:	b913      	cbnz	r3, 8003d78 <_printf_float+0x1a0>
 8003d72:	6822      	ldr	r2, [r4, #0]
 8003d74:	07d0      	lsls	r0, r2, #31
 8003d76:	d502      	bpl.n	8003d7e <_printf_float+0x1a6>
 8003d78:	3301      	adds	r3, #1
 8003d7a:	440b      	add	r3, r1
 8003d7c:	6123      	str	r3, [r4, #16]
 8003d7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d80:	f04f 0900 	mov.w	r9, #0
 8003d84:	e7de      	b.n	8003d44 <_printf_float+0x16c>
 8003d86:	b913      	cbnz	r3, 8003d8e <_printf_float+0x1b6>
 8003d88:	6822      	ldr	r2, [r4, #0]
 8003d8a:	07d2      	lsls	r2, r2, #31
 8003d8c:	d501      	bpl.n	8003d92 <_printf_float+0x1ba>
 8003d8e:	3302      	adds	r3, #2
 8003d90:	e7f4      	b.n	8003d7c <_printf_float+0x1a4>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e7f2      	b.n	8003d7c <_printf_float+0x1a4>
 8003d96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d9c:	4299      	cmp	r1, r3
 8003d9e:	db05      	blt.n	8003dac <_printf_float+0x1d4>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	6121      	str	r1, [r4, #16]
 8003da4:	07d8      	lsls	r0, r3, #31
 8003da6:	d5ea      	bpl.n	8003d7e <_printf_float+0x1a6>
 8003da8:	1c4b      	adds	r3, r1, #1
 8003daa:	e7e7      	b.n	8003d7c <_printf_float+0x1a4>
 8003dac:	2900      	cmp	r1, #0
 8003dae:	bfd4      	ite	le
 8003db0:	f1c1 0202 	rsble	r2, r1, #2
 8003db4:	2201      	movgt	r2, #1
 8003db6:	4413      	add	r3, r2
 8003db8:	e7e0      	b.n	8003d7c <_printf_float+0x1a4>
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	055a      	lsls	r2, r3, #21
 8003dbe:	d407      	bmi.n	8003dd0 <_printf_float+0x1f8>
 8003dc0:	6923      	ldr	r3, [r4, #16]
 8003dc2:	4642      	mov	r2, r8
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	47b8      	blx	r7
 8003dca:	3001      	adds	r0, #1
 8003dcc:	d12c      	bne.n	8003e28 <_printf_float+0x250>
 8003dce:	e764      	b.n	8003c9a <_printf_float+0xc2>
 8003dd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003dd4:	f240 80e0 	bls.w	8003f98 <_printf_float+0x3c0>
 8003dd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2300      	movs	r3, #0
 8003de0:	f7fc fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d034      	beq.n	8003e52 <_printf_float+0x27a>
 8003de8:	4a37      	ldr	r2, [pc, #220]	; (8003ec8 <_printf_float+0x2f0>)
 8003dea:	2301      	movs	r3, #1
 8003dec:	4631      	mov	r1, r6
 8003dee:	4628      	mov	r0, r5
 8003df0:	47b8      	blx	r7
 8003df2:	3001      	adds	r0, #1
 8003df4:	f43f af51 	beq.w	8003c9a <_printf_float+0xc2>
 8003df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	db02      	blt.n	8003e06 <_printf_float+0x22e>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	07d8      	lsls	r0, r3, #31
 8003e04:	d510      	bpl.n	8003e28 <_printf_float+0x250>
 8003e06:	ee18 3a10 	vmov	r3, s16
 8003e0a:	4652      	mov	r2, sl
 8003e0c:	4631      	mov	r1, r6
 8003e0e:	4628      	mov	r0, r5
 8003e10:	47b8      	blx	r7
 8003e12:	3001      	adds	r0, #1
 8003e14:	f43f af41 	beq.w	8003c9a <_printf_float+0xc2>
 8003e18:	f04f 0800 	mov.w	r8, #0
 8003e1c:	f104 091a 	add.w	r9, r4, #26
 8003e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	4543      	cmp	r3, r8
 8003e26:	dc09      	bgt.n	8003e3c <_printf_float+0x264>
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	079b      	lsls	r3, r3, #30
 8003e2c:	f100 8105 	bmi.w	800403a <_printf_float+0x462>
 8003e30:	68e0      	ldr	r0, [r4, #12]
 8003e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e34:	4298      	cmp	r0, r3
 8003e36:	bfb8      	it	lt
 8003e38:	4618      	movlt	r0, r3
 8003e3a:	e730      	b.n	8003c9e <_printf_float+0xc6>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	464a      	mov	r2, r9
 8003e40:	4631      	mov	r1, r6
 8003e42:	4628      	mov	r0, r5
 8003e44:	47b8      	blx	r7
 8003e46:	3001      	adds	r0, #1
 8003e48:	f43f af27 	beq.w	8003c9a <_printf_float+0xc2>
 8003e4c:	f108 0801 	add.w	r8, r8, #1
 8003e50:	e7e6      	b.n	8003e20 <_printf_float+0x248>
 8003e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	dc39      	bgt.n	8003ecc <_printf_float+0x2f4>
 8003e58:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <_printf_float+0x2f0>)
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	4628      	mov	r0, r5
 8003e60:	47b8      	blx	r7
 8003e62:	3001      	adds	r0, #1
 8003e64:	f43f af19 	beq.w	8003c9a <_printf_float+0xc2>
 8003e68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	d102      	bne.n	8003e76 <_printf_float+0x29e>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	07d9      	lsls	r1, r3, #31
 8003e74:	d5d8      	bpl.n	8003e28 <_printf_float+0x250>
 8003e76:	ee18 3a10 	vmov	r3, s16
 8003e7a:	4652      	mov	r2, sl
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	4628      	mov	r0, r5
 8003e80:	47b8      	blx	r7
 8003e82:	3001      	adds	r0, #1
 8003e84:	f43f af09 	beq.w	8003c9a <_printf_float+0xc2>
 8003e88:	f04f 0900 	mov.w	r9, #0
 8003e8c:	f104 0a1a 	add.w	sl, r4, #26
 8003e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e92:	425b      	negs	r3, r3
 8003e94:	454b      	cmp	r3, r9
 8003e96:	dc01      	bgt.n	8003e9c <_printf_float+0x2c4>
 8003e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e9a:	e792      	b.n	8003dc2 <_printf_float+0x1ea>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	4652      	mov	r2, sl
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	47b8      	blx	r7
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	f43f aef7 	beq.w	8003c9a <_printf_float+0xc2>
 8003eac:	f109 0901 	add.w	r9, r9, #1
 8003eb0:	e7ee      	b.n	8003e90 <_printf_float+0x2b8>
 8003eb2:	bf00      	nop
 8003eb4:	7fefffff 	.word	0x7fefffff
 8003eb8:	080083d4 	.word	0x080083d4
 8003ebc:	080083d8 	.word	0x080083d8
 8003ec0:	080083e0 	.word	0x080083e0
 8003ec4:	080083dc 	.word	0x080083dc
 8003ec8:	080083e4 	.word	0x080083e4
 8003ecc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ece:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	bfa8      	it	ge
 8003ed4:	461a      	movge	r2, r3
 8003ed6:	2a00      	cmp	r2, #0
 8003ed8:	4691      	mov	r9, r2
 8003eda:	dc37      	bgt.n	8003f4c <_printf_float+0x374>
 8003edc:	f04f 0b00 	mov.w	fp, #0
 8003ee0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ee4:	f104 021a 	add.w	r2, r4, #26
 8003ee8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003eea:	9305      	str	r3, [sp, #20]
 8003eec:	eba3 0309 	sub.w	r3, r3, r9
 8003ef0:	455b      	cmp	r3, fp
 8003ef2:	dc33      	bgt.n	8003f5c <_printf_float+0x384>
 8003ef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	db3b      	blt.n	8003f74 <_printf_float+0x39c>
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	07da      	lsls	r2, r3, #31
 8003f00:	d438      	bmi.n	8003f74 <_printf_float+0x39c>
 8003f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f04:	9a05      	ldr	r2, [sp, #20]
 8003f06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f08:	1a9a      	subs	r2, r3, r2
 8003f0a:	eba3 0901 	sub.w	r9, r3, r1
 8003f0e:	4591      	cmp	r9, r2
 8003f10:	bfa8      	it	ge
 8003f12:	4691      	movge	r9, r2
 8003f14:	f1b9 0f00 	cmp.w	r9, #0
 8003f18:	dc35      	bgt.n	8003f86 <_printf_float+0x3ae>
 8003f1a:	f04f 0800 	mov.w	r8, #0
 8003f1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f22:	f104 0a1a 	add.w	sl, r4, #26
 8003f26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	eba3 0309 	sub.w	r3, r3, r9
 8003f30:	4543      	cmp	r3, r8
 8003f32:	f77f af79 	ble.w	8003e28 <_printf_float+0x250>
 8003f36:	2301      	movs	r3, #1
 8003f38:	4652      	mov	r2, sl
 8003f3a:	4631      	mov	r1, r6
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	47b8      	blx	r7
 8003f40:	3001      	adds	r0, #1
 8003f42:	f43f aeaa 	beq.w	8003c9a <_printf_float+0xc2>
 8003f46:	f108 0801 	add.w	r8, r8, #1
 8003f4a:	e7ec      	b.n	8003f26 <_printf_float+0x34e>
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	4631      	mov	r1, r6
 8003f50:	4642      	mov	r2, r8
 8003f52:	4628      	mov	r0, r5
 8003f54:	47b8      	blx	r7
 8003f56:	3001      	adds	r0, #1
 8003f58:	d1c0      	bne.n	8003edc <_printf_float+0x304>
 8003f5a:	e69e      	b.n	8003c9a <_printf_float+0xc2>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4628      	mov	r0, r5
 8003f62:	9205      	str	r2, [sp, #20]
 8003f64:	47b8      	blx	r7
 8003f66:	3001      	adds	r0, #1
 8003f68:	f43f ae97 	beq.w	8003c9a <_printf_float+0xc2>
 8003f6c:	9a05      	ldr	r2, [sp, #20]
 8003f6e:	f10b 0b01 	add.w	fp, fp, #1
 8003f72:	e7b9      	b.n	8003ee8 <_printf_float+0x310>
 8003f74:	ee18 3a10 	vmov	r3, s16
 8003f78:	4652      	mov	r2, sl
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	47b8      	blx	r7
 8003f80:	3001      	adds	r0, #1
 8003f82:	d1be      	bne.n	8003f02 <_printf_float+0x32a>
 8003f84:	e689      	b.n	8003c9a <_printf_float+0xc2>
 8003f86:	9a05      	ldr	r2, [sp, #20]
 8003f88:	464b      	mov	r3, r9
 8003f8a:	4442      	add	r2, r8
 8003f8c:	4631      	mov	r1, r6
 8003f8e:	4628      	mov	r0, r5
 8003f90:	47b8      	blx	r7
 8003f92:	3001      	adds	r0, #1
 8003f94:	d1c1      	bne.n	8003f1a <_printf_float+0x342>
 8003f96:	e680      	b.n	8003c9a <_printf_float+0xc2>
 8003f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f9a:	2a01      	cmp	r2, #1
 8003f9c:	dc01      	bgt.n	8003fa2 <_printf_float+0x3ca>
 8003f9e:	07db      	lsls	r3, r3, #31
 8003fa0:	d538      	bpl.n	8004014 <_printf_float+0x43c>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4628      	mov	r0, r5
 8003faa:	47b8      	blx	r7
 8003fac:	3001      	adds	r0, #1
 8003fae:	f43f ae74 	beq.w	8003c9a <_printf_float+0xc2>
 8003fb2:	ee18 3a10 	vmov	r3, s16
 8003fb6:	4652      	mov	r2, sl
 8003fb8:	4631      	mov	r1, r6
 8003fba:	4628      	mov	r0, r5
 8003fbc:	47b8      	blx	r7
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	f43f ae6b 	beq.w	8003c9a <_printf_float+0xc2>
 8003fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f7fc fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fd0:	b9d8      	cbnz	r0, 800400a <_printf_float+0x432>
 8003fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fd4:	f108 0201 	add.w	r2, r8, #1
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	4631      	mov	r1, r6
 8003fdc:	4628      	mov	r0, r5
 8003fde:	47b8      	blx	r7
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	d10e      	bne.n	8004002 <_printf_float+0x42a>
 8003fe4:	e659      	b.n	8003c9a <_printf_float+0xc2>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	4652      	mov	r2, sl
 8003fea:	4631      	mov	r1, r6
 8003fec:	4628      	mov	r0, r5
 8003fee:	47b8      	blx	r7
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	f43f ae52 	beq.w	8003c9a <_printf_float+0xc2>
 8003ff6:	f108 0801 	add.w	r8, r8, #1
 8003ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	4543      	cmp	r3, r8
 8004000:	dcf1      	bgt.n	8003fe6 <_printf_float+0x40e>
 8004002:	464b      	mov	r3, r9
 8004004:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004008:	e6dc      	b.n	8003dc4 <_printf_float+0x1ec>
 800400a:	f04f 0800 	mov.w	r8, #0
 800400e:	f104 0a1a 	add.w	sl, r4, #26
 8004012:	e7f2      	b.n	8003ffa <_printf_float+0x422>
 8004014:	2301      	movs	r3, #1
 8004016:	4642      	mov	r2, r8
 8004018:	e7df      	b.n	8003fda <_printf_float+0x402>
 800401a:	2301      	movs	r3, #1
 800401c:	464a      	mov	r2, r9
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	47b8      	blx	r7
 8004024:	3001      	adds	r0, #1
 8004026:	f43f ae38 	beq.w	8003c9a <_printf_float+0xc2>
 800402a:	f108 0801 	add.w	r8, r8, #1
 800402e:	68e3      	ldr	r3, [r4, #12]
 8004030:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004032:	1a5b      	subs	r3, r3, r1
 8004034:	4543      	cmp	r3, r8
 8004036:	dcf0      	bgt.n	800401a <_printf_float+0x442>
 8004038:	e6fa      	b.n	8003e30 <_printf_float+0x258>
 800403a:	f04f 0800 	mov.w	r8, #0
 800403e:	f104 0919 	add.w	r9, r4, #25
 8004042:	e7f4      	b.n	800402e <_printf_float+0x456>

08004044 <_printf_common>:
 8004044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004048:	4616      	mov	r6, r2
 800404a:	4699      	mov	r9, r3
 800404c:	688a      	ldr	r2, [r1, #8]
 800404e:	690b      	ldr	r3, [r1, #16]
 8004050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004054:	4293      	cmp	r3, r2
 8004056:	bfb8      	it	lt
 8004058:	4613      	movlt	r3, r2
 800405a:	6033      	str	r3, [r6, #0]
 800405c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004060:	4607      	mov	r7, r0
 8004062:	460c      	mov	r4, r1
 8004064:	b10a      	cbz	r2, 800406a <_printf_common+0x26>
 8004066:	3301      	adds	r3, #1
 8004068:	6033      	str	r3, [r6, #0]
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	0699      	lsls	r1, r3, #26
 800406e:	bf42      	ittt	mi
 8004070:	6833      	ldrmi	r3, [r6, #0]
 8004072:	3302      	addmi	r3, #2
 8004074:	6033      	strmi	r3, [r6, #0]
 8004076:	6825      	ldr	r5, [r4, #0]
 8004078:	f015 0506 	ands.w	r5, r5, #6
 800407c:	d106      	bne.n	800408c <_printf_common+0x48>
 800407e:	f104 0a19 	add.w	sl, r4, #25
 8004082:	68e3      	ldr	r3, [r4, #12]
 8004084:	6832      	ldr	r2, [r6, #0]
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	42ab      	cmp	r3, r5
 800408a:	dc26      	bgt.n	80040da <_printf_common+0x96>
 800408c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004090:	1e13      	subs	r3, r2, #0
 8004092:	6822      	ldr	r2, [r4, #0]
 8004094:	bf18      	it	ne
 8004096:	2301      	movne	r3, #1
 8004098:	0692      	lsls	r2, r2, #26
 800409a:	d42b      	bmi.n	80040f4 <_printf_common+0xb0>
 800409c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040a0:	4649      	mov	r1, r9
 80040a2:	4638      	mov	r0, r7
 80040a4:	47c0      	blx	r8
 80040a6:	3001      	adds	r0, #1
 80040a8:	d01e      	beq.n	80040e8 <_printf_common+0xa4>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	68e5      	ldr	r5, [r4, #12]
 80040ae:	6832      	ldr	r2, [r6, #0]
 80040b0:	f003 0306 	and.w	r3, r3, #6
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	bf08      	it	eq
 80040b8:	1aad      	subeq	r5, r5, r2
 80040ba:	68a3      	ldr	r3, [r4, #8]
 80040bc:	6922      	ldr	r2, [r4, #16]
 80040be:	bf0c      	ite	eq
 80040c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040c4:	2500      	movne	r5, #0
 80040c6:	4293      	cmp	r3, r2
 80040c8:	bfc4      	itt	gt
 80040ca:	1a9b      	subgt	r3, r3, r2
 80040cc:	18ed      	addgt	r5, r5, r3
 80040ce:	2600      	movs	r6, #0
 80040d0:	341a      	adds	r4, #26
 80040d2:	42b5      	cmp	r5, r6
 80040d4:	d11a      	bne.n	800410c <_printf_common+0xc8>
 80040d6:	2000      	movs	r0, #0
 80040d8:	e008      	b.n	80040ec <_printf_common+0xa8>
 80040da:	2301      	movs	r3, #1
 80040dc:	4652      	mov	r2, sl
 80040de:	4649      	mov	r1, r9
 80040e0:	4638      	mov	r0, r7
 80040e2:	47c0      	blx	r8
 80040e4:	3001      	adds	r0, #1
 80040e6:	d103      	bne.n	80040f0 <_printf_common+0xac>
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f0:	3501      	adds	r5, #1
 80040f2:	e7c6      	b.n	8004082 <_printf_common+0x3e>
 80040f4:	18e1      	adds	r1, r4, r3
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	2030      	movs	r0, #48	; 0x30
 80040fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040fe:	4422      	add	r2, r4
 8004100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004108:	3302      	adds	r3, #2
 800410a:	e7c7      	b.n	800409c <_printf_common+0x58>
 800410c:	2301      	movs	r3, #1
 800410e:	4622      	mov	r2, r4
 8004110:	4649      	mov	r1, r9
 8004112:	4638      	mov	r0, r7
 8004114:	47c0      	blx	r8
 8004116:	3001      	adds	r0, #1
 8004118:	d0e6      	beq.n	80040e8 <_printf_common+0xa4>
 800411a:	3601      	adds	r6, #1
 800411c:	e7d9      	b.n	80040d2 <_printf_common+0x8e>
	...

08004120 <_printf_i>:
 8004120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004124:	7e0f      	ldrb	r7, [r1, #24]
 8004126:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004128:	2f78      	cmp	r7, #120	; 0x78
 800412a:	4691      	mov	r9, r2
 800412c:	4680      	mov	r8, r0
 800412e:	460c      	mov	r4, r1
 8004130:	469a      	mov	sl, r3
 8004132:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004136:	d807      	bhi.n	8004148 <_printf_i+0x28>
 8004138:	2f62      	cmp	r7, #98	; 0x62
 800413a:	d80a      	bhi.n	8004152 <_printf_i+0x32>
 800413c:	2f00      	cmp	r7, #0
 800413e:	f000 80d8 	beq.w	80042f2 <_printf_i+0x1d2>
 8004142:	2f58      	cmp	r7, #88	; 0x58
 8004144:	f000 80a3 	beq.w	800428e <_printf_i+0x16e>
 8004148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800414c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004150:	e03a      	b.n	80041c8 <_printf_i+0xa8>
 8004152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004156:	2b15      	cmp	r3, #21
 8004158:	d8f6      	bhi.n	8004148 <_printf_i+0x28>
 800415a:	a101      	add	r1, pc, #4	; (adr r1, 8004160 <_printf_i+0x40>)
 800415c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004160:	080041b9 	.word	0x080041b9
 8004164:	080041cd 	.word	0x080041cd
 8004168:	08004149 	.word	0x08004149
 800416c:	08004149 	.word	0x08004149
 8004170:	08004149 	.word	0x08004149
 8004174:	08004149 	.word	0x08004149
 8004178:	080041cd 	.word	0x080041cd
 800417c:	08004149 	.word	0x08004149
 8004180:	08004149 	.word	0x08004149
 8004184:	08004149 	.word	0x08004149
 8004188:	08004149 	.word	0x08004149
 800418c:	080042d9 	.word	0x080042d9
 8004190:	080041fd 	.word	0x080041fd
 8004194:	080042bb 	.word	0x080042bb
 8004198:	08004149 	.word	0x08004149
 800419c:	08004149 	.word	0x08004149
 80041a0:	080042fb 	.word	0x080042fb
 80041a4:	08004149 	.word	0x08004149
 80041a8:	080041fd 	.word	0x080041fd
 80041ac:	08004149 	.word	0x08004149
 80041b0:	08004149 	.word	0x08004149
 80041b4:	080042c3 	.word	0x080042c3
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	1d1a      	adds	r2, r3, #4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	602a      	str	r2, [r5, #0]
 80041c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0a3      	b.n	8004314 <_printf_i+0x1f4>
 80041cc:	6820      	ldr	r0, [r4, #0]
 80041ce:	6829      	ldr	r1, [r5, #0]
 80041d0:	0606      	lsls	r6, r0, #24
 80041d2:	f101 0304 	add.w	r3, r1, #4
 80041d6:	d50a      	bpl.n	80041ee <_printf_i+0xce>
 80041d8:	680e      	ldr	r6, [r1, #0]
 80041da:	602b      	str	r3, [r5, #0]
 80041dc:	2e00      	cmp	r6, #0
 80041de:	da03      	bge.n	80041e8 <_printf_i+0xc8>
 80041e0:	232d      	movs	r3, #45	; 0x2d
 80041e2:	4276      	negs	r6, r6
 80041e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e8:	485e      	ldr	r0, [pc, #376]	; (8004364 <_printf_i+0x244>)
 80041ea:	230a      	movs	r3, #10
 80041ec:	e019      	b.n	8004222 <_printf_i+0x102>
 80041ee:	680e      	ldr	r6, [r1, #0]
 80041f0:	602b      	str	r3, [r5, #0]
 80041f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041f6:	bf18      	it	ne
 80041f8:	b236      	sxthne	r6, r6
 80041fa:	e7ef      	b.n	80041dc <_printf_i+0xbc>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	6820      	ldr	r0, [r4, #0]
 8004200:	1d19      	adds	r1, r3, #4
 8004202:	6029      	str	r1, [r5, #0]
 8004204:	0601      	lsls	r1, r0, #24
 8004206:	d501      	bpl.n	800420c <_printf_i+0xec>
 8004208:	681e      	ldr	r6, [r3, #0]
 800420a:	e002      	b.n	8004212 <_printf_i+0xf2>
 800420c:	0646      	lsls	r6, r0, #25
 800420e:	d5fb      	bpl.n	8004208 <_printf_i+0xe8>
 8004210:	881e      	ldrh	r6, [r3, #0]
 8004212:	4854      	ldr	r0, [pc, #336]	; (8004364 <_printf_i+0x244>)
 8004214:	2f6f      	cmp	r7, #111	; 0x6f
 8004216:	bf0c      	ite	eq
 8004218:	2308      	moveq	r3, #8
 800421a:	230a      	movne	r3, #10
 800421c:	2100      	movs	r1, #0
 800421e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004222:	6865      	ldr	r5, [r4, #4]
 8004224:	60a5      	str	r5, [r4, #8]
 8004226:	2d00      	cmp	r5, #0
 8004228:	bfa2      	ittt	ge
 800422a:	6821      	ldrge	r1, [r4, #0]
 800422c:	f021 0104 	bicge.w	r1, r1, #4
 8004230:	6021      	strge	r1, [r4, #0]
 8004232:	b90e      	cbnz	r6, 8004238 <_printf_i+0x118>
 8004234:	2d00      	cmp	r5, #0
 8004236:	d04d      	beq.n	80042d4 <_printf_i+0x1b4>
 8004238:	4615      	mov	r5, r2
 800423a:	fbb6 f1f3 	udiv	r1, r6, r3
 800423e:	fb03 6711 	mls	r7, r3, r1, r6
 8004242:	5dc7      	ldrb	r7, [r0, r7]
 8004244:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004248:	4637      	mov	r7, r6
 800424a:	42bb      	cmp	r3, r7
 800424c:	460e      	mov	r6, r1
 800424e:	d9f4      	bls.n	800423a <_printf_i+0x11a>
 8004250:	2b08      	cmp	r3, #8
 8004252:	d10b      	bne.n	800426c <_printf_i+0x14c>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	07de      	lsls	r6, r3, #31
 8004258:	d508      	bpl.n	800426c <_printf_i+0x14c>
 800425a:	6923      	ldr	r3, [r4, #16]
 800425c:	6861      	ldr	r1, [r4, #4]
 800425e:	4299      	cmp	r1, r3
 8004260:	bfde      	ittt	le
 8004262:	2330      	movle	r3, #48	; 0x30
 8004264:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004268:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800426c:	1b52      	subs	r2, r2, r5
 800426e:	6122      	str	r2, [r4, #16]
 8004270:	f8cd a000 	str.w	sl, [sp]
 8004274:	464b      	mov	r3, r9
 8004276:	aa03      	add	r2, sp, #12
 8004278:	4621      	mov	r1, r4
 800427a:	4640      	mov	r0, r8
 800427c:	f7ff fee2 	bl	8004044 <_printf_common>
 8004280:	3001      	adds	r0, #1
 8004282:	d14c      	bne.n	800431e <_printf_i+0x1fe>
 8004284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004288:	b004      	add	sp, #16
 800428a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428e:	4835      	ldr	r0, [pc, #212]	; (8004364 <_printf_i+0x244>)
 8004290:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004294:	6829      	ldr	r1, [r5, #0]
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	f851 6b04 	ldr.w	r6, [r1], #4
 800429c:	6029      	str	r1, [r5, #0]
 800429e:	061d      	lsls	r5, r3, #24
 80042a0:	d514      	bpl.n	80042cc <_printf_i+0x1ac>
 80042a2:	07df      	lsls	r7, r3, #31
 80042a4:	bf44      	itt	mi
 80042a6:	f043 0320 	orrmi.w	r3, r3, #32
 80042aa:	6023      	strmi	r3, [r4, #0]
 80042ac:	b91e      	cbnz	r6, 80042b6 <_printf_i+0x196>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	f023 0320 	bic.w	r3, r3, #32
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	2310      	movs	r3, #16
 80042b8:	e7b0      	b.n	800421c <_printf_i+0xfc>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	f043 0320 	orr.w	r3, r3, #32
 80042c0:	6023      	str	r3, [r4, #0]
 80042c2:	2378      	movs	r3, #120	; 0x78
 80042c4:	4828      	ldr	r0, [pc, #160]	; (8004368 <_printf_i+0x248>)
 80042c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042ca:	e7e3      	b.n	8004294 <_printf_i+0x174>
 80042cc:	0659      	lsls	r1, r3, #25
 80042ce:	bf48      	it	mi
 80042d0:	b2b6      	uxthmi	r6, r6
 80042d2:	e7e6      	b.n	80042a2 <_printf_i+0x182>
 80042d4:	4615      	mov	r5, r2
 80042d6:	e7bb      	b.n	8004250 <_printf_i+0x130>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	6826      	ldr	r6, [r4, #0]
 80042dc:	6961      	ldr	r1, [r4, #20]
 80042de:	1d18      	adds	r0, r3, #4
 80042e0:	6028      	str	r0, [r5, #0]
 80042e2:	0635      	lsls	r5, r6, #24
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	d501      	bpl.n	80042ec <_printf_i+0x1cc>
 80042e8:	6019      	str	r1, [r3, #0]
 80042ea:	e002      	b.n	80042f2 <_printf_i+0x1d2>
 80042ec:	0670      	lsls	r0, r6, #25
 80042ee:	d5fb      	bpl.n	80042e8 <_printf_i+0x1c8>
 80042f0:	8019      	strh	r1, [r3, #0]
 80042f2:	2300      	movs	r3, #0
 80042f4:	6123      	str	r3, [r4, #16]
 80042f6:	4615      	mov	r5, r2
 80042f8:	e7ba      	b.n	8004270 <_printf_i+0x150>
 80042fa:	682b      	ldr	r3, [r5, #0]
 80042fc:	1d1a      	adds	r2, r3, #4
 80042fe:	602a      	str	r2, [r5, #0]
 8004300:	681d      	ldr	r5, [r3, #0]
 8004302:	6862      	ldr	r2, [r4, #4]
 8004304:	2100      	movs	r1, #0
 8004306:	4628      	mov	r0, r5
 8004308:	f7fb ff6a 	bl	80001e0 <memchr>
 800430c:	b108      	cbz	r0, 8004312 <_printf_i+0x1f2>
 800430e:	1b40      	subs	r0, r0, r5
 8004310:	6060      	str	r0, [r4, #4]
 8004312:	6863      	ldr	r3, [r4, #4]
 8004314:	6123      	str	r3, [r4, #16]
 8004316:	2300      	movs	r3, #0
 8004318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431c:	e7a8      	b.n	8004270 <_printf_i+0x150>
 800431e:	6923      	ldr	r3, [r4, #16]
 8004320:	462a      	mov	r2, r5
 8004322:	4649      	mov	r1, r9
 8004324:	4640      	mov	r0, r8
 8004326:	47d0      	blx	sl
 8004328:	3001      	adds	r0, #1
 800432a:	d0ab      	beq.n	8004284 <_printf_i+0x164>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	079b      	lsls	r3, r3, #30
 8004330:	d413      	bmi.n	800435a <_printf_i+0x23a>
 8004332:	68e0      	ldr	r0, [r4, #12]
 8004334:	9b03      	ldr	r3, [sp, #12]
 8004336:	4298      	cmp	r0, r3
 8004338:	bfb8      	it	lt
 800433a:	4618      	movlt	r0, r3
 800433c:	e7a4      	b.n	8004288 <_printf_i+0x168>
 800433e:	2301      	movs	r3, #1
 8004340:	4632      	mov	r2, r6
 8004342:	4649      	mov	r1, r9
 8004344:	4640      	mov	r0, r8
 8004346:	47d0      	blx	sl
 8004348:	3001      	adds	r0, #1
 800434a:	d09b      	beq.n	8004284 <_printf_i+0x164>
 800434c:	3501      	adds	r5, #1
 800434e:	68e3      	ldr	r3, [r4, #12]
 8004350:	9903      	ldr	r1, [sp, #12]
 8004352:	1a5b      	subs	r3, r3, r1
 8004354:	42ab      	cmp	r3, r5
 8004356:	dcf2      	bgt.n	800433e <_printf_i+0x21e>
 8004358:	e7eb      	b.n	8004332 <_printf_i+0x212>
 800435a:	2500      	movs	r5, #0
 800435c:	f104 0619 	add.w	r6, r4, #25
 8004360:	e7f5      	b.n	800434e <_printf_i+0x22e>
 8004362:	bf00      	nop
 8004364:	080083e6 	.word	0x080083e6
 8004368:	080083f7 	.word	0x080083f7

0800436c <_scanf_float>:
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	b087      	sub	sp, #28
 8004372:	4617      	mov	r7, r2
 8004374:	9303      	str	r3, [sp, #12]
 8004376:	688b      	ldr	r3, [r1, #8]
 8004378:	1e5a      	subs	r2, r3, #1
 800437a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800437e:	bf83      	ittte	hi
 8004380:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004384:	195b      	addhi	r3, r3, r5
 8004386:	9302      	strhi	r3, [sp, #8]
 8004388:	2300      	movls	r3, #0
 800438a:	bf86      	itte	hi
 800438c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004390:	608b      	strhi	r3, [r1, #8]
 8004392:	9302      	strls	r3, [sp, #8]
 8004394:	680b      	ldr	r3, [r1, #0]
 8004396:	468b      	mov	fp, r1
 8004398:	2500      	movs	r5, #0
 800439a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800439e:	f84b 3b1c 	str.w	r3, [fp], #28
 80043a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80043a6:	4680      	mov	r8, r0
 80043a8:	460c      	mov	r4, r1
 80043aa:	465e      	mov	r6, fp
 80043ac:	46aa      	mov	sl, r5
 80043ae:	46a9      	mov	r9, r5
 80043b0:	9501      	str	r5, [sp, #4]
 80043b2:	68a2      	ldr	r2, [r4, #8]
 80043b4:	b152      	cbz	r2, 80043cc <_scanf_float+0x60>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b4e      	cmp	r3, #78	; 0x4e
 80043bc:	d864      	bhi.n	8004488 <_scanf_float+0x11c>
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d83c      	bhi.n	800443c <_scanf_float+0xd0>
 80043c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80043c6:	b2c8      	uxtb	r0, r1
 80043c8:	280e      	cmp	r0, #14
 80043ca:	d93a      	bls.n	8004442 <_scanf_float+0xd6>
 80043cc:	f1b9 0f00 	cmp.w	r9, #0
 80043d0:	d003      	beq.n	80043da <_scanf_float+0x6e>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80043de:	f1ba 0f01 	cmp.w	sl, #1
 80043e2:	f200 8113 	bhi.w	800460c <_scanf_float+0x2a0>
 80043e6:	455e      	cmp	r6, fp
 80043e8:	f200 8105 	bhi.w	80045f6 <_scanf_float+0x28a>
 80043ec:	2501      	movs	r5, #1
 80043ee:	4628      	mov	r0, r5
 80043f0:	b007      	add	sp, #28
 80043f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80043fa:	2a0d      	cmp	r2, #13
 80043fc:	d8e6      	bhi.n	80043cc <_scanf_float+0x60>
 80043fe:	a101      	add	r1, pc, #4	; (adr r1, 8004404 <_scanf_float+0x98>)
 8004400:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004404:	08004543 	.word	0x08004543
 8004408:	080043cd 	.word	0x080043cd
 800440c:	080043cd 	.word	0x080043cd
 8004410:	080043cd 	.word	0x080043cd
 8004414:	080045a3 	.word	0x080045a3
 8004418:	0800457b 	.word	0x0800457b
 800441c:	080043cd 	.word	0x080043cd
 8004420:	080043cd 	.word	0x080043cd
 8004424:	08004551 	.word	0x08004551
 8004428:	080043cd 	.word	0x080043cd
 800442c:	080043cd 	.word	0x080043cd
 8004430:	080043cd 	.word	0x080043cd
 8004434:	080043cd 	.word	0x080043cd
 8004438:	08004509 	.word	0x08004509
 800443c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004440:	e7db      	b.n	80043fa <_scanf_float+0x8e>
 8004442:	290e      	cmp	r1, #14
 8004444:	d8c2      	bhi.n	80043cc <_scanf_float+0x60>
 8004446:	a001      	add	r0, pc, #4	; (adr r0, 800444c <_scanf_float+0xe0>)
 8004448:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800444c:	080044fb 	.word	0x080044fb
 8004450:	080043cd 	.word	0x080043cd
 8004454:	080044fb 	.word	0x080044fb
 8004458:	0800458f 	.word	0x0800458f
 800445c:	080043cd 	.word	0x080043cd
 8004460:	080044a9 	.word	0x080044a9
 8004464:	080044e5 	.word	0x080044e5
 8004468:	080044e5 	.word	0x080044e5
 800446c:	080044e5 	.word	0x080044e5
 8004470:	080044e5 	.word	0x080044e5
 8004474:	080044e5 	.word	0x080044e5
 8004478:	080044e5 	.word	0x080044e5
 800447c:	080044e5 	.word	0x080044e5
 8004480:	080044e5 	.word	0x080044e5
 8004484:	080044e5 	.word	0x080044e5
 8004488:	2b6e      	cmp	r3, #110	; 0x6e
 800448a:	d809      	bhi.n	80044a0 <_scanf_float+0x134>
 800448c:	2b60      	cmp	r3, #96	; 0x60
 800448e:	d8b2      	bhi.n	80043f6 <_scanf_float+0x8a>
 8004490:	2b54      	cmp	r3, #84	; 0x54
 8004492:	d077      	beq.n	8004584 <_scanf_float+0x218>
 8004494:	2b59      	cmp	r3, #89	; 0x59
 8004496:	d199      	bne.n	80043cc <_scanf_float+0x60>
 8004498:	2d07      	cmp	r5, #7
 800449a:	d197      	bne.n	80043cc <_scanf_float+0x60>
 800449c:	2508      	movs	r5, #8
 800449e:	e029      	b.n	80044f4 <_scanf_float+0x188>
 80044a0:	2b74      	cmp	r3, #116	; 0x74
 80044a2:	d06f      	beq.n	8004584 <_scanf_float+0x218>
 80044a4:	2b79      	cmp	r3, #121	; 0x79
 80044a6:	e7f6      	b.n	8004496 <_scanf_float+0x12a>
 80044a8:	6821      	ldr	r1, [r4, #0]
 80044aa:	05c8      	lsls	r0, r1, #23
 80044ac:	d51a      	bpl.n	80044e4 <_scanf_float+0x178>
 80044ae:	9b02      	ldr	r3, [sp, #8]
 80044b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80044b4:	6021      	str	r1, [r4, #0]
 80044b6:	f109 0901 	add.w	r9, r9, #1
 80044ba:	b11b      	cbz	r3, 80044c4 <_scanf_float+0x158>
 80044bc:	3b01      	subs	r3, #1
 80044be:	3201      	adds	r2, #1
 80044c0:	9302      	str	r3, [sp, #8]
 80044c2:	60a2      	str	r2, [r4, #8]
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	60a3      	str	r3, [r4, #8]
 80044ca:	6923      	ldr	r3, [r4, #16]
 80044cc:	3301      	adds	r3, #1
 80044ce:	6123      	str	r3, [r4, #16]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	f340 8084 	ble.w	80045e4 <_scanf_float+0x278>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	3301      	adds	r3, #1
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	e766      	b.n	80043b2 <_scanf_float+0x46>
 80044e4:	eb1a 0f05 	cmn.w	sl, r5
 80044e8:	f47f af70 	bne.w	80043cc <_scanf_float+0x60>
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80044f2:	6022      	str	r2, [r4, #0]
 80044f4:	f806 3b01 	strb.w	r3, [r6], #1
 80044f8:	e7e4      	b.n	80044c4 <_scanf_float+0x158>
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	0610      	lsls	r0, r2, #24
 80044fe:	f57f af65 	bpl.w	80043cc <_scanf_float+0x60>
 8004502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004506:	e7f4      	b.n	80044f2 <_scanf_float+0x186>
 8004508:	f1ba 0f00 	cmp.w	sl, #0
 800450c:	d10e      	bne.n	800452c <_scanf_float+0x1c0>
 800450e:	f1b9 0f00 	cmp.w	r9, #0
 8004512:	d10e      	bne.n	8004532 <_scanf_float+0x1c6>
 8004514:	6822      	ldr	r2, [r4, #0]
 8004516:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800451a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800451e:	d108      	bne.n	8004532 <_scanf_float+0x1c6>
 8004520:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004524:	6022      	str	r2, [r4, #0]
 8004526:	f04f 0a01 	mov.w	sl, #1
 800452a:	e7e3      	b.n	80044f4 <_scanf_float+0x188>
 800452c:	f1ba 0f02 	cmp.w	sl, #2
 8004530:	d055      	beq.n	80045de <_scanf_float+0x272>
 8004532:	2d01      	cmp	r5, #1
 8004534:	d002      	beq.n	800453c <_scanf_float+0x1d0>
 8004536:	2d04      	cmp	r5, #4
 8004538:	f47f af48 	bne.w	80043cc <_scanf_float+0x60>
 800453c:	3501      	adds	r5, #1
 800453e:	b2ed      	uxtb	r5, r5
 8004540:	e7d8      	b.n	80044f4 <_scanf_float+0x188>
 8004542:	f1ba 0f01 	cmp.w	sl, #1
 8004546:	f47f af41 	bne.w	80043cc <_scanf_float+0x60>
 800454a:	f04f 0a02 	mov.w	sl, #2
 800454e:	e7d1      	b.n	80044f4 <_scanf_float+0x188>
 8004550:	b97d      	cbnz	r5, 8004572 <_scanf_float+0x206>
 8004552:	f1b9 0f00 	cmp.w	r9, #0
 8004556:	f47f af3c 	bne.w	80043d2 <_scanf_float+0x66>
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004560:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004564:	f47f af39 	bne.w	80043da <_scanf_float+0x6e>
 8004568:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800456c:	6022      	str	r2, [r4, #0]
 800456e:	2501      	movs	r5, #1
 8004570:	e7c0      	b.n	80044f4 <_scanf_float+0x188>
 8004572:	2d03      	cmp	r5, #3
 8004574:	d0e2      	beq.n	800453c <_scanf_float+0x1d0>
 8004576:	2d05      	cmp	r5, #5
 8004578:	e7de      	b.n	8004538 <_scanf_float+0x1cc>
 800457a:	2d02      	cmp	r5, #2
 800457c:	f47f af26 	bne.w	80043cc <_scanf_float+0x60>
 8004580:	2503      	movs	r5, #3
 8004582:	e7b7      	b.n	80044f4 <_scanf_float+0x188>
 8004584:	2d06      	cmp	r5, #6
 8004586:	f47f af21 	bne.w	80043cc <_scanf_float+0x60>
 800458a:	2507      	movs	r5, #7
 800458c:	e7b2      	b.n	80044f4 <_scanf_float+0x188>
 800458e:	6822      	ldr	r2, [r4, #0]
 8004590:	0591      	lsls	r1, r2, #22
 8004592:	f57f af1b 	bpl.w	80043cc <_scanf_float+0x60>
 8004596:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	f8cd 9004 	str.w	r9, [sp, #4]
 80045a0:	e7a8      	b.n	80044f4 <_scanf_float+0x188>
 80045a2:	6822      	ldr	r2, [r4, #0]
 80045a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80045a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80045ac:	d006      	beq.n	80045bc <_scanf_float+0x250>
 80045ae:	0550      	lsls	r0, r2, #21
 80045b0:	f57f af0c 	bpl.w	80043cc <_scanf_float+0x60>
 80045b4:	f1b9 0f00 	cmp.w	r9, #0
 80045b8:	f43f af0f 	beq.w	80043da <_scanf_float+0x6e>
 80045bc:	0591      	lsls	r1, r2, #22
 80045be:	bf58      	it	pl
 80045c0:	9901      	ldrpl	r1, [sp, #4]
 80045c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80045c6:	bf58      	it	pl
 80045c8:	eba9 0101 	subpl.w	r1, r9, r1
 80045cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80045d0:	bf58      	it	pl
 80045d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80045d6:	6022      	str	r2, [r4, #0]
 80045d8:	f04f 0900 	mov.w	r9, #0
 80045dc:	e78a      	b.n	80044f4 <_scanf_float+0x188>
 80045de:	f04f 0a03 	mov.w	sl, #3
 80045e2:	e787      	b.n	80044f4 <_scanf_float+0x188>
 80045e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80045e8:	4639      	mov	r1, r7
 80045ea:	4640      	mov	r0, r8
 80045ec:	4798      	blx	r3
 80045ee:	2800      	cmp	r0, #0
 80045f0:	f43f aedf 	beq.w	80043b2 <_scanf_float+0x46>
 80045f4:	e6ea      	b.n	80043cc <_scanf_float+0x60>
 80045f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045fe:	463a      	mov	r2, r7
 8004600:	4640      	mov	r0, r8
 8004602:	4798      	blx	r3
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	3b01      	subs	r3, #1
 8004608:	6123      	str	r3, [r4, #16]
 800460a:	e6ec      	b.n	80043e6 <_scanf_float+0x7a>
 800460c:	1e6b      	subs	r3, r5, #1
 800460e:	2b06      	cmp	r3, #6
 8004610:	d825      	bhi.n	800465e <_scanf_float+0x2f2>
 8004612:	2d02      	cmp	r5, #2
 8004614:	d836      	bhi.n	8004684 <_scanf_float+0x318>
 8004616:	455e      	cmp	r6, fp
 8004618:	f67f aee8 	bls.w	80043ec <_scanf_float+0x80>
 800461c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004620:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004624:	463a      	mov	r2, r7
 8004626:	4640      	mov	r0, r8
 8004628:	4798      	blx	r3
 800462a:	6923      	ldr	r3, [r4, #16]
 800462c:	3b01      	subs	r3, #1
 800462e:	6123      	str	r3, [r4, #16]
 8004630:	e7f1      	b.n	8004616 <_scanf_float+0x2aa>
 8004632:	9802      	ldr	r0, [sp, #8]
 8004634:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004638:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800463c:	9002      	str	r0, [sp, #8]
 800463e:	463a      	mov	r2, r7
 8004640:	4640      	mov	r0, r8
 8004642:	4798      	blx	r3
 8004644:	6923      	ldr	r3, [r4, #16]
 8004646:	3b01      	subs	r3, #1
 8004648:	6123      	str	r3, [r4, #16]
 800464a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800464e:	fa5f fa8a 	uxtb.w	sl, sl
 8004652:	f1ba 0f02 	cmp.w	sl, #2
 8004656:	d1ec      	bne.n	8004632 <_scanf_float+0x2c6>
 8004658:	3d03      	subs	r5, #3
 800465a:	b2ed      	uxtb	r5, r5
 800465c:	1b76      	subs	r6, r6, r5
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	05da      	lsls	r2, r3, #23
 8004662:	d52f      	bpl.n	80046c4 <_scanf_float+0x358>
 8004664:	055b      	lsls	r3, r3, #21
 8004666:	d510      	bpl.n	800468a <_scanf_float+0x31e>
 8004668:	455e      	cmp	r6, fp
 800466a:	f67f aebf 	bls.w	80043ec <_scanf_float+0x80>
 800466e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004672:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004676:	463a      	mov	r2, r7
 8004678:	4640      	mov	r0, r8
 800467a:	4798      	blx	r3
 800467c:	6923      	ldr	r3, [r4, #16]
 800467e:	3b01      	subs	r3, #1
 8004680:	6123      	str	r3, [r4, #16]
 8004682:	e7f1      	b.n	8004668 <_scanf_float+0x2fc>
 8004684:	46aa      	mov	sl, r5
 8004686:	9602      	str	r6, [sp, #8]
 8004688:	e7df      	b.n	800464a <_scanf_float+0x2de>
 800468a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	2965      	cmp	r1, #101	; 0x65
 8004692:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004696:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800469a:	6123      	str	r3, [r4, #16]
 800469c:	d00c      	beq.n	80046b8 <_scanf_float+0x34c>
 800469e:	2945      	cmp	r1, #69	; 0x45
 80046a0:	d00a      	beq.n	80046b8 <_scanf_float+0x34c>
 80046a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046a6:	463a      	mov	r2, r7
 80046a8:	4640      	mov	r0, r8
 80046aa:	4798      	blx	r3
 80046ac:	6923      	ldr	r3, [r4, #16]
 80046ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	1eb5      	subs	r5, r6, #2
 80046b6:	6123      	str	r3, [r4, #16]
 80046b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046bc:	463a      	mov	r2, r7
 80046be:	4640      	mov	r0, r8
 80046c0:	4798      	blx	r3
 80046c2:	462e      	mov	r6, r5
 80046c4:	6825      	ldr	r5, [r4, #0]
 80046c6:	f015 0510 	ands.w	r5, r5, #16
 80046ca:	d159      	bne.n	8004780 <_scanf_float+0x414>
 80046cc:	7035      	strb	r5, [r6, #0]
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d8:	d11b      	bne.n	8004712 <_scanf_float+0x3a6>
 80046da:	9b01      	ldr	r3, [sp, #4]
 80046dc:	454b      	cmp	r3, r9
 80046de:	eba3 0209 	sub.w	r2, r3, r9
 80046e2:	d123      	bne.n	800472c <_scanf_float+0x3c0>
 80046e4:	2200      	movs	r2, #0
 80046e6:	4659      	mov	r1, fp
 80046e8:	4640      	mov	r0, r8
 80046ea:	f000 fe97 	bl	800541c <_strtod_r>
 80046ee:	6822      	ldr	r2, [r4, #0]
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	f012 0f02 	tst.w	r2, #2
 80046f6:	ec57 6b10 	vmov	r6, r7, d0
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	d021      	beq.n	8004742 <_scanf_float+0x3d6>
 80046fe:	9903      	ldr	r1, [sp, #12]
 8004700:	1d1a      	adds	r2, r3, #4
 8004702:	600a      	str	r2, [r1, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	e9c3 6700 	strd	r6, r7, [r3]
 800470a:	68e3      	ldr	r3, [r4, #12]
 800470c:	3301      	adds	r3, #1
 800470e:	60e3      	str	r3, [r4, #12]
 8004710:	e66d      	b.n	80043ee <_scanf_float+0x82>
 8004712:	9b04      	ldr	r3, [sp, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0e5      	beq.n	80046e4 <_scanf_float+0x378>
 8004718:	9905      	ldr	r1, [sp, #20]
 800471a:	230a      	movs	r3, #10
 800471c:	462a      	mov	r2, r5
 800471e:	3101      	adds	r1, #1
 8004720:	4640      	mov	r0, r8
 8004722:	f000 ff03 	bl	800552c <_strtol_r>
 8004726:	9b04      	ldr	r3, [sp, #16]
 8004728:	9e05      	ldr	r6, [sp, #20]
 800472a:	1ac2      	subs	r2, r0, r3
 800472c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004730:	429e      	cmp	r6, r3
 8004732:	bf28      	it	cs
 8004734:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004738:	4912      	ldr	r1, [pc, #72]	; (8004784 <_scanf_float+0x418>)
 800473a:	4630      	mov	r0, r6
 800473c:	f000 f82c 	bl	8004798 <siprintf>
 8004740:	e7d0      	b.n	80046e4 <_scanf_float+0x378>
 8004742:	9903      	ldr	r1, [sp, #12]
 8004744:	f012 0f04 	tst.w	r2, #4
 8004748:	f103 0204 	add.w	r2, r3, #4
 800474c:	600a      	str	r2, [r1, #0]
 800474e:	d1d9      	bne.n	8004704 <_scanf_float+0x398>
 8004750:	f8d3 8000 	ldr.w	r8, [r3]
 8004754:	ee10 2a10 	vmov	r2, s0
 8004758:	ee10 0a10 	vmov	r0, s0
 800475c:	463b      	mov	r3, r7
 800475e:	4639      	mov	r1, r7
 8004760:	f7fc f9e4 	bl	8000b2c <__aeabi_dcmpun>
 8004764:	b128      	cbz	r0, 8004772 <_scanf_float+0x406>
 8004766:	4808      	ldr	r0, [pc, #32]	; (8004788 <_scanf_float+0x41c>)
 8004768:	f000 f810 	bl	800478c <nanf>
 800476c:	ed88 0a00 	vstr	s0, [r8]
 8004770:	e7cb      	b.n	800470a <_scanf_float+0x39e>
 8004772:	4630      	mov	r0, r6
 8004774:	4639      	mov	r1, r7
 8004776:	f7fc fa37 	bl	8000be8 <__aeabi_d2f>
 800477a:	f8c8 0000 	str.w	r0, [r8]
 800477e:	e7c4      	b.n	800470a <_scanf_float+0x39e>
 8004780:	2500      	movs	r5, #0
 8004782:	e634      	b.n	80043ee <_scanf_float+0x82>
 8004784:	08008408 	.word	0x08008408
 8004788:	08008810 	.word	0x08008810

0800478c <nanf>:
 800478c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004794 <nanf+0x8>
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	7fc00000 	.word	0x7fc00000

08004798 <siprintf>:
 8004798:	b40e      	push	{r1, r2, r3}
 800479a:	b500      	push	{lr}
 800479c:	b09c      	sub	sp, #112	; 0x70
 800479e:	ab1d      	add	r3, sp, #116	; 0x74
 80047a0:	9002      	str	r0, [sp, #8]
 80047a2:	9006      	str	r0, [sp, #24]
 80047a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047a8:	4809      	ldr	r0, [pc, #36]	; (80047d0 <siprintf+0x38>)
 80047aa:	9107      	str	r1, [sp, #28]
 80047ac:	9104      	str	r1, [sp, #16]
 80047ae:	4909      	ldr	r1, [pc, #36]	; (80047d4 <siprintf+0x3c>)
 80047b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80047b4:	9105      	str	r1, [sp, #20]
 80047b6:	6800      	ldr	r0, [r0, #0]
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	a902      	add	r1, sp, #8
 80047bc:	f002 fee2 	bl	8007584 <_svfiprintf_r>
 80047c0:	9b02      	ldr	r3, [sp, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	b01c      	add	sp, #112	; 0x70
 80047c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047cc:	b003      	add	sp, #12
 80047ce:	4770      	bx	lr
 80047d0:	2000000c 	.word	0x2000000c
 80047d4:	ffff0208 	.word	0xffff0208

080047d8 <sulp>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4604      	mov	r4, r0
 80047dc:	460d      	mov	r5, r1
 80047de:	ec45 4b10 	vmov	d0, r4, r5
 80047e2:	4616      	mov	r6, r2
 80047e4:	f002 fc2c 	bl	8007040 <__ulp>
 80047e8:	ec51 0b10 	vmov	r0, r1, d0
 80047ec:	b17e      	cbz	r6, 800480e <sulp+0x36>
 80047ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80047f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	dd09      	ble.n	800480e <sulp+0x36>
 80047fa:	051b      	lsls	r3, r3, #20
 80047fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004800:	2400      	movs	r4, #0
 8004802:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004806:	4622      	mov	r2, r4
 8004808:	462b      	mov	r3, r5
 800480a:	f7fb fef5 	bl	80005f8 <__aeabi_dmul>
 800480e:	bd70      	pop	{r4, r5, r6, pc}

08004810 <_strtod_l>:
 8004810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	ed2d 8b02 	vpush	{d8}
 8004818:	b09d      	sub	sp, #116	; 0x74
 800481a:	461f      	mov	r7, r3
 800481c:	2300      	movs	r3, #0
 800481e:	9318      	str	r3, [sp, #96]	; 0x60
 8004820:	4ba2      	ldr	r3, [pc, #648]	; (8004aac <_strtod_l+0x29c>)
 8004822:	9213      	str	r2, [sp, #76]	; 0x4c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	9305      	str	r3, [sp, #20]
 8004828:	4604      	mov	r4, r0
 800482a:	4618      	mov	r0, r3
 800482c:	4688      	mov	r8, r1
 800482e:	f7fb fccf 	bl	80001d0 <strlen>
 8004832:	f04f 0a00 	mov.w	sl, #0
 8004836:	4605      	mov	r5, r0
 8004838:	f04f 0b00 	mov.w	fp, #0
 800483c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	2a2b      	cmp	r2, #43	; 0x2b
 8004846:	d04e      	beq.n	80048e6 <_strtod_l+0xd6>
 8004848:	d83b      	bhi.n	80048c2 <_strtod_l+0xb2>
 800484a:	2a0d      	cmp	r2, #13
 800484c:	d834      	bhi.n	80048b8 <_strtod_l+0xa8>
 800484e:	2a08      	cmp	r2, #8
 8004850:	d834      	bhi.n	80048bc <_strtod_l+0xac>
 8004852:	2a00      	cmp	r2, #0
 8004854:	d03e      	beq.n	80048d4 <_strtod_l+0xc4>
 8004856:	2300      	movs	r3, #0
 8004858:	930a      	str	r3, [sp, #40]	; 0x28
 800485a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800485c:	7833      	ldrb	r3, [r6, #0]
 800485e:	2b30      	cmp	r3, #48	; 0x30
 8004860:	f040 80b0 	bne.w	80049c4 <_strtod_l+0x1b4>
 8004864:	7873      	ldrb	r3, [r6, #1]
 8004866:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800486a:	2b58      	cmp	r3, #88	; 0x58
 800486c:	d168      	bne.n	8004940 <_strtod_l+0x130>
 800486e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	ab18      	add	r3, sp, #96	; 0x60
 8004874:	9702      	str	r7, [sp, #8]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	4a8d      	ldr	r2, [pc, #564]	; (8004ab0 <_strtod_l+0x2a0>)
 800487a:	ab19      	add	r3, sp, #100	; 0x64
 800487c:	a917      	add	r1, sp, #92	; 0x5c
 800487e:	4620      	mov	r0, r4
 8004880:	f001 fd38 	bl	80062f4 <__gethex>
 8004884:	f010 0707 	ands.w	r7, r0, #7
 8004888:	4605      	mov	r5, r0
 800488a:	d005      	beq.n	8004898 <_strtod_l+0x88>
 800488c:	2f06      	cmp	r7, #6
 800488e:	d12c      	bne.n	80048ea <_strtod_l+0xda>
 8004890:	3601      	adds	r6, #1
 8004892:	2300      	movs	r3, #0
 8004894:	9617      	str	r6, [sp, #92]	; 0x5c
 8004896:	930a      	str	r3, [sp, #40]	; 0x28
 8004898:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 8590 	bne.w	80053c0 <_strtod_l+0xbb0>
 80048a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a2:	b1eb      	cbz	r3, 80048e0 <_strtod_l+0xd0>
 80048a4:	4652      	mov	r2, sl
 80048a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80048aa:	ec43 2b10 	vmov	d0, r2, r3
 80048ae:	b01d      	add	sp, #116	; 0x74
 80048b0:	ecbd 8b02 	vpop	{d8}
 80048b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b8:	2a20      	cmp	r2, #32
 80048ba:	d1cc      	bne.n	8004856 <_strtod_l+0x46>
 80048bc:	3301      	adds	r3, #1
 80048be:	9317      	str	r3, [sp, #92]	; 0x5c
 80048c0:	e7be      	b.n	8004840 <_strtod_l+0x30>
 80048c2:	2a2d      	cmp	r2, #45	; 0x2d
 80048c4:	d1c7      	bne.n	8004856 <_strtod_l+0x46>
 80048c6:	2201      	movs	r2, #1
 80048c8:	920a      	str	r2, [sp, #40]	; 0x28
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1c2      	bne.n	800485a <_strtod_l+0x4a>
 80048d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80048d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 856e 	bne.w	80053bc <_strtod_l+0xbac>
 80048e0:	4652      	mov	r2, sl
 80048e2:	465b      	mov	r3, fp
 80048e4:	e7e1      	b.n	80048aa <_strtod_l+0x9a>
 80048e6:	2200      	movs	r2, #0
 80048e8:	e7ee      	b.n	80048c8 <_strtod_l+0xb8>
 80048ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80048ec:	b13a      	cbz	r2, 80048fe <_strtod_l+0xee>
 80048ee:	2135      	movs	r1, #53	; 0x35
 80048f0:	a81a      	add	r0, sp, #104	; 0x68
 80048f2:	f002 fcb0 	bl	8007256 <__copybits>
 80048f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80048f8:	4620      	mov	r0, r4
 80048fa:	f002 f86f 	bl	80069dc <_Bfree>
 80048fe:	3f01      	subs	r7, #1
 8004900:	2f04      	cmp	r7, #4
 8004902:	d806      	bhi.n	8004912 <_strtod_l+0x102>
 8004904:	e8df f007 	tbb	[pc, r7]
 8004908:	1714030a 	.word	0x1714030a
 800490c:	0a          	.byte	0x0a
 800490d:	00          	.byte	0x00
 800490e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004912:	0728      	lsls	r0, r5, #28
 8004914:	d5c0      	bpl.n	8004898 <_strtod_l+0x88>
 8004916:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800491a:	e7bd      	b.n	8004898 <_strtod_l+0x88>
 800491c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004920:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004922:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004926:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800492a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800492e:	e7f0      	b.n	8004912 <_strtod_l+0x102>
 8004930:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004ab4 <_strtod_l+0x2a4>
 8004934:	e7ed      	b.n	8004912 <_strtod_l+0x102>
 8004936:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800493a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800493e:	e7e8      	b.n	8004912 <_strtod_l+0x102>
 8004940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	9217      	str	r2, [sp, #92]	; 0x5c
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b30      	cmp	r3, #48	; 0x30
 800494a:	d0f9      	beq.n	8004940 <_strtod_l+0x130>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0a3      	beq.n	8004898 <_strtod_l+0x88>
 8004950:	2301      	movs	r3, #1
 8004952:	f04f 0900 	mov.w	r9, #0
 8004956:	9304      	str	r3, [sp, #16]
 8004958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800495a:	9308      	str	r3, [sp, #32]
 800495c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004960:	464f      	mov	r7, r9
 8004962:	220a      	movs	r2, #10
 8004964:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004966:	7806      	ldrb	r6, [r0, #0]
 8004968:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800496c:	b2d9      	uxtb	r1, r3
 800496e:	2909      	cmp	r1, #9
 8004970:	d92a      	bls.n	80049c8 <_strtod_l+0x1b8>
 8004972:	9905      	ldr	r1, [sp, #20]
 8004974:	462a      	mov	r2, r5
 8004976:	f002 ff1f 	bl	80077b8 <strncmp>
 800497a:	b398      	cbz	r0, 80049e4 <_strtod_l+0x1d4>
 800497c:	2000      	movs	r0, #0
 800497e:	4632      	mov	r2, r6
 8004980:	463d      	mov	r5, r7
 8004982:	9005      	str	r0, [sp, #20]
 8004984:	4603      	mov	r3, r0
 8004986:	2a65      	cmp	r2, #101	; 0x65
 8004988:	d001      	beq.n	800498e <_strtod_l+0x17e>
 800498a:	2a45      	cmp	r2, #69	; 0x45
 800498c:	d118      	bne.n	80049c0 <_strtod_l+0x1b0>
 800498e:	b91d      	cbnz	r5, 8004998 <_strtod_l+0x188>
 8004990:	9a04      	ldr	r2, [sp, #16]
 8004992:	4302      	orrs	r2, r0
 8004994:	d09e      	beq.n	80048d4 <_strtod_l+0xc4>
 8004996:	2500      	movs	r5, #0
 8004998:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800499c:	f108 0201 	add.w	r2, r8, #1
 80049a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80049a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80049a6:	2a2b      	cmp	r2, #43	; 0x2b
 80049a8:	d075      	beq.n	8004a96 <_strtod_l+0x286>
 80049aa:	2a2d      	cmp	r2, #45	; 0x2d
 80049ac:	d07b      	beq.n	8004aa6 <_strtod_l+0x296>
 80049ae:	f04f 0c00 	mov.w	ip, #0
 80049b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80049b6:	2909      	cmp	r1, #9
 80049b8:	f240 8082 	bls.w	8004ac0 <_strtod_l+0x2b0>
 80049bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80049c0:	2600      	movs	r6, #0
 80049c2:	e09d      	b.n	8004b00 <_strtod_l+0x2f0>
 80049c4:	2300      	movs	r3, #0
 80049c6:	e7c4      	b.n	8004952 <_strtod_l+0x142>
 80049c8:	2f08      	cmp	r7, #8
 80049ca:	bfd8      	it	le
 80049cc:	9907      	ldrle	r1, [sp, #28]
 80049ce:	f100 0001 	add.w	r0, r0, #1
 80049d2:	bfda      	itte	le
 80049d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80049d8:	9307      	strle	r3, [sp, #28]
 80049da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80049de:	3701      	adds	r7, #1
 80049e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80049e2:	e7bf      	b.n	8004964 <_strtod_l+0x154>
 80049e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80049e6:	195a      	adds	r2, r3, r5
 80049e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80049ea:	5d5a      	ldrb	r2, [r3, r5]
 80049ec:	2f00      	cmp	r7, #0
 80049ee:	d037      	beq.n	8004a60 <_strtod_l+0x250>
 80049f0:	9005      	str	r0, [sp, #20]
 80049f2:	463d      	mov	r5, r7
 80049f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80049f8:	2b09      	cmp	r3, #9
 80049fa:	d912      	bls.n	8004a22 <_strtod_l+0x212>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e7c2      	b.n	8004986 <_strtod_l+0x176>
 8004a00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a06:	785a      	ldrb	r2, [r3, #1]
 8004a08:	3001      	adds	r0, #1
 8004a0a:	2a30      	cmp	r2, #48	; 0x30
 8004a0c:	d0f8      	beq.n	8004a00 <_strtod_l+0x1f0>
 8004a0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	f200 84d9 	bhi.w	80053ca <_strtod_l+0xbba>
 8004a18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a1a:	9005      	str	r0, [sp, #20]
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	9308      	str	r3, [sp, #32]
 8004a20:	4605      	mov	r5, r0
 8004a22:	3a30      	subs	r2, #48	; 0x30
 8004a24:	f100 0301 	add.w	r3, r0, #1
 8004a28:	d014      	beq.n	8004a54 <_strtod_l+0x244>
 8004a2a:	9905      	ldr	r1, [sp, #20]
 8004a2c:	4419      	add	r1, r3
 8004a2e:	9105      	str	r1, [sp, #20]
 8004a30:	462b      	mov	r3, r5
 8004a32:	eb00 0e05 	add.w	lr, r0, r5
 8004a36:	210a      	movs	r1, #10
 8004a38:	4573      	cmp	r3, lr
 8004a3a:	d113      	bne.n	8004a64 <_strtod_l+0x254>
 8004a3c:	182b      	adds	r3, r5, r0
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	f105 0501 	add.w	r5, r5, #1
 8004a44:	4405      	add	r5, r0
 8004a46:	dc1c      	bgt.n	8004a82 <_strtod_l+0x272>
 8004a48:	9907      	ldr	r1, [sp, #28]
 8004a4a:	230a      	movs	r3, #10
 8004a4c:	fb03 2301 	mla	r3, r3, r1, r2
 8004a50:	9307      	str	r3, [sp, #28]
 8004a52:	2300      	movs	r3, #0
 8004a54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004a56:	1c51      	adds	r1, r2, #1
 8004a58:	9117      	str	r1, [sp, #92]	; 0x5c
 8004a5a:	7852      	ldrb	r2, [r2, #1]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	e7c9      	b.n	80049f4 <_strtod_l+0x1e4>
 8004a60:	4638      	mov	r0, r7
 8004a62:	e7d2      	b.n	8004a0a <_strtod_l+0x1fa>
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	dc04      	bgt.n	8004a72 <_strtod_l+0x262>
 8004a68:	9e07      	ldr	r6, [sp, #28]
 8004a6a:	434e      	muls	r6, r1
 8004a6c:	9607      	str	r6, [sp, #28]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	e7e2      	b.n	8004a38 <_strtod_l+0x228>
 8004a72:	f103 0c01 	add.w	ip, r3, #1
 8004a76:	f1bc 0f10 	cmp.w	ip, #16
 8004a7a:	bfd8      	it	le
 8004a7c:	fb01 f909 	mulle.w	r9, r1, r9
 8004a80:	e7f5      	b.n	8004a6e <_strtod_l+0x25e>
 8004a82:	2d10      	cmp	r5, #16
 8004a84:	bfdc      	itt	le
 8004a86:	230a      	movle	r3, #10
 8004a88:	fb03 2909 	mlale	r9, r3, r9, r2
 8004a8c:	e7e1      	b.n	8004a52 <_strtod_l+0x242>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	9305      	str	r3, [sp, #20]
 8004a92:	2301      	movs	r3, #1
 8004a94:	e77c      	b.n	8004990 <_strtod_l+0x180>
 8004a96:	f04f 0c00 	mov.w	ip, #0
 8004a9a:	f108 0202 	add.w	r2, r8, #2
 8004a9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004aa0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004aa4:	e785      	b.n	80049b2 <_strtod_l+0x1a2>
 8004aa6:	f04f 0c01 	mov.w	ip, #1
 8004aaa:	e7f6      	b.n	8004a9a <_strtod_l+0x28a>
 8004aac:	08008658 	.word	0x08008658
 8004ab0:	08008410 	.word	0x08008410
 8004ab4:	7ff00000 	.word	0x7ff00000
 8004ab8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004aba:	1c51      	adds	r1, r2, #1
 8004abc:	9117      	str	r1, [sp, #92]	; 0x5c
 8004abe:	7852      	ldrb	r2, [r2, #1]
 8004ac0:	2a30      	cmp	r2, #48	; 0x30
 8004ac2:	d0f9      	beq.n	8004ab8 <_strtod_l+0x2a8>
 8004ac4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004ac8:	2908      	cmp	r1, #8
 8004aca:	f63f af79 	bhi.w	80049c0 <_strtod_l+0x1b0>
 8004ace:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004ad2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004ad4:	9206      	str	r2, [sp, #24]
 8004ad6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004ad8:	1c51      	adds	r1, r2, #1
 8004ada:	9117      	str	r1, [sp, #92]	; 0x5c
 8004adc:	7852      	ldrb	r2, [r2, #1]
 8004ade:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004ae2:	2e09      	cmp	r6, #9
 8004ae4:	d937      	bls.n	8004b56 <_strtod_l+0x346>
 8004ae6:	9e06      	ldr	r6, [sp, #24]
 8004ae8:	1b89      	subs	r1, r1, r6
 8004aea:	2908      	cmp	r1, #8
 8004aec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004af0:	dc02      	bgt.n	8004af8 <_strtod_l+0x2e8>
 8004af2:	4576      	cmp	r6, lr
 8004af4:	bfa8      	it	ge
 8004af6:	4676      	movge	r6, lr
 8004af8:	f1bc 0f00 	cmp.w	ip, #0
 8004afc:	d000      	beq.n	8004b00 <_strtod_l+0x2f0>
 8004afe:	4276      	negs	r6, r6
 8004b00:	2d00      	cmp	r5, #0
 8004b02:	d14d      	bne.n	8004ba0 <_strtod_l+0x390>
 8004b04:	9904      	ldr	r1, [sp, #16]
 8004b06:	4301      	orrs	r1, r0
 8004b08:	f47f aec6 	bne.w	8004898 <_strtod_l+0x88>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f47f aee1 	bne.w	80048d4 <_strtod_l+0xc4>
 8004b12:	2a69      	cmp	r2, #105	; 0x69
 8004b14:	d027      	beq.n	8004b66 <_strtod_l+0x356>
 8004b16:	dc24      	bgt.n	8004b62 <_strtod_l+0x352>
 8004b18:	2a49      	cmp	r2, #73	; 0x49
 8004b1a:	d024      	beq.n	8004b66 <_strtod_l+0x356>
 8004b1c:	2a4e      	cmp	r2, #78	; 0x4e
 8004b1e:	f47f aed9 	bne.w	80048d4 <_strtod_l+0xc4>
 8004b22:	499f      	ldr	r1, [pc, #636]	; (8004da0 <_strtod_l+0x590>)
 8004b24:	a817      	add	r0, sp, #92	; 0x5c
 8004b26:	f001 fe3d 	bl	80067a4 <__match>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	f43f aed2 	beq.w	80048d4 <_strtod_l+0xc4>
 8004b30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b28      	cmp	r3, #40	; 0x28
 8004b36:	d12d      	bne.n	8004b94 <_strtod_l+0x384>
 8004b38:	499a      	ldr	r1, [pc, #616]	; (8004da4 <_strtod_l+0x594>)
 8004b3a:	aa1a      	add	r2, sp, #104	; 0x68
 8004b3c:	a817      	add	r0, sp, #92	; 0x5c
 8004b3e:	f001 fe45 	bl	80067cc <__hexnan>
 8004b42:	2805      	cmp	r0, #5
 8004b44:	d126      	bne.n	8004b94 <_strtod_l+0x384>
 8004b46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004b4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004b50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004b54:	e6a0      	b.n	8004898 <_strtod_l+0x88>
 8004b56:	210a      	movs	r1, #10
 8004b58:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004b5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004b60:	e7b9      	b.n	8004ad6 <_strtod_l+0x2c6>
 8004b62:	2a6e      	cmp	r2, #110	; 0x6e
 8004b64:	e7db      	b.n	8004b1e <_strtod_l+0x30e>
 8004b66:	4990      	ldr	r1, [pc, #576]	; (8004da8 <_strtod_l+0x598>)
 8004b68:	a817      	add	r0, sp, #92	; 0x5c
 8004b6a:	f001 fe1b 	bl	80067a4 <__match>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	f43f aeb0 	beq.w	80048d4 <_strtod_l+0xc4>
 8004b74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b76:	498d      	ldr	r1, [pc, #564]	; (8004dac <_strtod_l+0x59c>)
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	a817      	add	r0, sp, #92	; 0x5c
 8004b7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8004b7e:	f001 fe11 	bl	80067a4 <__match>
 8004b82:	b910      	cbnz	r0, 8004b8a <_strtod_l+0x37a>
 8004b84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b86:	3301      	adds	r3, #1
 8004b88:	9317      	str	r3, [sp, #92]	; 0x5c
 8004b8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004dbc <_strtod_l+0x5ac>
 8004b8e:	f04f 0a00 	mov.w	sl, #0
 8004b92:	e681      	b.n	8004898 <_strtod_l+0x88>
 8004b94:	4886      	ldr	r0, [pc, #536]	; (8004db0 <_strtod_l+0x5a0>)
 8004b96:	f002 fdf7 	bl	8007788 <nan>
 8004b9a:	ec5b ab10 	vmov	sl, fp, d0
 8004b9e:	e67b      	b.n	8004898 <_strtod_l+0x88>
 8004ba0:	9b05      	ldr	r3, [sp, #20]
 8004ba2:	9807      	ldr	r0, [sp, #28]
 8004ba4:	1af3      	subs	r3, r6, r3
 8004ba6:	2f00      	cmp	r7, #0
 8004ba8:	bf08      	it	eq
 8004baa:	462f      	moveq	r7, r5
 8004bac:	2d10      	cmp	r5, #16
 8004bae:	9306      	str	r3, [sp, #24]
 8004bb0:	46a8      	mov	r8, r5
 8004bb2:	bfa8      	it	ge
 8004bb4:	f04f 0810 	movge.w	r8, #16
 8004bb8:	f7fb fca4 	bl	8000504 <__aeabi_ui2d>
 8004bbc:	2d09      	cmp	r5, #9
 8004bbe:	4682      	mov	sl, r0
 8004bc0:	468b      	mov	fp, r1
 8004bc2:	dd13      	ble.n	8004bec <_strtod_l+0x3dc>
 8004bc4:	4b7b      	ldr	r3, [pc, #492]	; (8004db4 <_strtod_l+0x5a4>)
 8004bc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004bca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004bce:	f7fb fd13 	bl	80005f8 <__aeabi_dmul>
 8004bd2:	4682      	mov	sl, r0
 8004bd4:	4648      	mov	r0, r9
 8004bd6:	468b      	mov	fp, r1
 8004bd8:	f7fb fc94 	bl	8000504 <__aeabi_ui2d>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4650      	mov	r0, sl
 8004be2:	4659      	mov	r1, fp
 8004be4:	f7fb fb52 	bl	800028c <__adddf3>
 8004be8:	4682      	mov	sl, r0
 8004bea:	468b      	mov	fp, r1
 8004bec:	2d0f      	cmp	r5, #15
 8004bee:	dc38      	bgt.n	8004c62 <_strtod_l+0x452>
 8004bf0:	9b06      	ldr	r3, [sp, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f43f ae50 	beq.w	8004898 <_strtod_l+0x88>
 8004bf8:	dd24      	ble.n	8004c44 <_strtod_l+0x434>
 8004bfa:	2b16      	cmp	r3, #22
 8004bfc:	dc0b      	bgt.n	8004c16 <_strtod_l+0x406>
 8004bfe:	496d      	ldr	r1, [pc, #436]	; (8004db4 <_strtod_l+0x5a4>)
 8004c00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c08:	4652      	mov	r2, sl
 8004c0a:	465b      	mov	r3, fp
 8004c0c:	f7fb fcf4 	bl	80005f8 <__aeabi_dmul>
 8004c10:	4682      	mov	sl, r0
 8004c12:	468b      	mov	fp, r1
 8004c14:	e640      	b.n	8004898 <_strtod_l+0x88>
 8004c16:	9a06      	ldr	r2, [sp, #24]
 8004c18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	db20      	blt.n	8004c62 <_strtod_l+0x452>
 8004c20:	4c64      	ldr	r4, [pc, #400]	; (8004db4 <_strtod_l+0x5a4>)
 8004c22:	f1c5 050f 	rsb	r5, r5, #15
 8004c26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004c2a:	4652      	mov	r2, sl
 8004c2c:	465b      	mov	r3, fp
 8004c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c32:	f7fb fce1 	bl	80005f8 <__aeabi_dmul>
 8004c36:	9b06      	ldr	r3, [sp, #24]
 8004c38:	1b5d      	subs	r5, r3, r5
 8004c3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004c3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004c42:	e7e3      	b.n	8004c0c <_strtod_l+0x3fc>
 8004c44:	9b06      	ldr	r3, [sp, #24]
 8004c46:	3316      	adds	r3, #22
 8004c48:	db0b      	blt.n	8004c62 <_strtod_l+0x452>
 8004c4a:	9b05      	ldr	r3, [sp, #20]
 8004c4c:	1b9e      	subs	r6, r3, r6
 8004c4e:	4b59      	ldr	r3, [pc, #356]	; (8004db4 <_strtod_l+0x5a4>)
 8004c50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004c54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c58:	4650      	mov	r0, sl
 8004c5a:	4659      	mov	r1, fp
 8004c5c:	f7fb fdf6 	bl	800084c <__aeabi_ddiv>
 8004c60:	e7d6      	b.n	8004c10 <_strtod_l+0x400>
 8004c62:	9b06      	ldr	r3, [sp, #24]
 8004c64:	eba5 0808 	sub.w	r8, r5, r8
 8004c68:	4498      	add	r8, r3
 8004c6a:	f1b8 0f00 	cmp.w	r8, #0
 8004c6e:	dd74      	ble.n	8004d5a <_strtod_l+0x54a>
 8004c70:	f018 030f 	ands.w	r3, r8, #15
 8004c74:	d00a      	beq.n	8004c8c <_strtod_l+0x47c>
 8004c76:	494f      	ldr	r1, [pc, #316]	; (8004db4 <_strtod_l+0x5a4>)
 8004c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004c7c:	4652      	mov	r2, sl
 8004c7e:	465b      	mov	r3, fp
 8004c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c84:	f7fb fcb8 	bl	80005f8 <__aeabi_dmul>
 8004c88:	4682      	mov	sl, r0
 8004c8a:	468b      	mov	fp, r1
 8004c8c:	f038 080f 	bics.w	r8, r8, #15
 8004c90:	d04f      	beq.n	8004d32 <_strtod_l+0x522>
 8004c92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004c96:	dd22      	ble.n	8004cde <_strtod_l+0x4ce>
 8004c98:	2500      	movs	r5, #0
 8004c9a:	462e      	mov	r6, r5
 8004c9c:	9507      	str	r5, [sp, #28]
 8004c9e:	9505      	str	r5, [sp, #20]
 8004ca0:	2322      	movs	r3, #34	; 0x22
 8004ca2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004dbc <_strtod_l+0x5ac>
 8004ca6:	6023      	str	r3, [r4, #0]
 8004ca8:	f04f 0a00 	mov.w	sl, #0
 8004cac:	9b07      	ldr	r3, [sp, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f43f adf2 	beq.w	8004898 <_strtod_l+0x88>
 8004cb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f001 fe90 	bl	80069dc <_Bfree>
 8004cbc:	9905      	ldr	r1, [sp, #20]
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f001 fe8c 	bl	80069dc <_Bfree>
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f001 fe88 	bl	80069dc <_Bfree>
 8004ccc:	9907      	ldr	r1, [sp, #28]
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f001 fe84 	bl	80069dc <_Bfree>
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f001 fe80 	bl	80069dc <_Bfree>
 8004cdc:	e5dc      	b.n	8004898 <_strtod_l+0x88>
 8004cde:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <_strtod_l+0x5a8>)
 8004ce0:	9304      	str	r3, [sp, #16]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004ce8:	4650      	mov	r0, sl
 8004cea:	4659      	mov	r1, fp
 8004cec:	4699      	mov	r9, r3
 8004cee:	f1b8 0f01 	cmp.w	r8, #1
 8004cf2:	dc21      	bgt.n	8004d38 <_strtod_l+0x528>
 8004cf4:	b10b      	cbz	r3, 8004cfa <_strtod_l+0x4ea>
 8004cf6:	4682      	mov	sl, r0
 8004cf8:	468b      	mov	fp, r1
 8004cfa:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <_strtod_l+0x5a8>)
 8004cfc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004d00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004d04:	4652      	mov	r2, sl
 8004d06:	465b      	mov	r3, fp
 8004d08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004d0c:	f7fb fc74 	bl	80005f8 <__aeabi_dmul>
 8004d10:	4b2a      	ldr	r3, [pc, #168]	; (8004dbc <_strtod_l+0x5ac>)
 8004d12:	460a      	mov	r2, r1
 8004d14:	400b      	ands	r3, r1
 8004d16:	492a      	ldr	r1, [pc, #168]	; (8004dc0 <_strtod_l+0x5b0>)
 8004d18:	428b      	cmp	r3, r1
 8004d1a:	4682      	mov	sl, r0
 8004d1c:	d8bc      	bhi.n	8004c98 <_strtod_l+0x488>
 8004d1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004d22:	428b      	cmp	r3, r1
 8004d24:	bf86      	itte	hi
 8004d26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004dc4 <_strtod_l+0x5b4>
 8004d2a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8004d2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004d32:	2300      	movs	r3, #0
 8004d34:	9304      	str	r3, [sp, #16]
 8004d36:	e084      	b.n	8004e42 <_strtod_l+0x632>
 8004d38:	f018 0f01 	tst.w	r8, #1
 8004d3c:	d005      	beq.n	8004d4a <_strtod_l+0x53a>
 8004d3e:	9b04      	ldr	r3, [sp, #16]
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f7fb fc58 	bl	80005f8 <__aeabi_dmul>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	9a04      	ldr	r2, [sp, #16]
 8004d4c:	3208      	adds	r2, #8
 8004d4e:	f109 0901 	add.w	r9, r9, #1
 8004d52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004d56:	9204      	str	r2, [sp, #16]
 8004d58:	e7c9      	b.n	8004cee <_strtod_l+0x4de>
 8004d5a:	d0ea      	beq.n	8004d32 <_strtod_l+0x522>
 8004d5c:	f1c8 0800 	rsb	r8, r8, #0
 8004d60:	f018 020f 	ands.w	r2, r8, #15
 8004d64:	d00a      	beq.n	8004d7c <_strtod_l+0x56c>
 8004d66:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <_strtod_l+0x5a4>)
 8004d68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d6c:	4650      	mov	r0, sl
 8004d6e:	4659      	mov	r1, fp
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb fd6a 	bl	800084c <__aeabi_ddiv>
 8004d78:	4682      	mov	sl, r0
 8004d7a:	468b      	mov	fp, r1
 8004d7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004d80:	d0d7      	beq.n	8004d32 <_strtod_l+0x522>
 8004d82:	f1b8 0f1f 	cmp.w	r8, #31
 8004d86:	dd1f      	ble.n	8004dc8 <_strtod_l+0x5b8>
 8004d88:	2500      	movs	r5, #0
 8004d8a:	462e      	mov	r6, r5
 8004d8c:	9507      	str	r5, [sp, #28]
 8004d8e:	9505      	str	r5, [sp, #20]
 8004d90:	2322      	movs	r3, #34	; 0x22
 8004d92:	f04f 0a00 	mov.w	sl, #0
 8004d96:	f04f 0b00 	mov.w	fp, #0
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	e786      	b.n	8004cac <_strtod_l+0x49c>
 8004d9e:	bf00      	nop
 8004da0:	080083e1 	.word	0x080083e1
 8004da4:	08008424 	.word	0x08008424
 8004da8:	080083d9 	.word	0x080083d9
 8004dac:	08008564 	.word	0x08008564
 8004db0:	08008810 	.word	0x08008810
 8004db4:	080086f0 	.word	0x080086f0
 8004db8:	080086c8 	.word	0x080086c8
 8004dbc:	7ff00000 	.word	0x7ff00000
 8004dc0:	7ca00000 	.word	0x7ca00000
 8004dc4:	7fefffff 	.word	0x7fefffff
 8004dc8:	f018 0310 	ands.w	r3, r8, #16
 8004dcc:	bf18      	it	ne
 8004dce:	236a      	movne	r3, #106	; 0x6a
 8004dd0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005180 <_strtod_l+0x970>
 8004dd4:	9304      	str	r3, [sp, #16]
 8004dd6:	4650      	mov	r0, sl
 8004dd8:	4659      	mov	r1, fp
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f018 0f01 	tst.w	r8, #1
 8004de0:	d004      	beq.n	8004dec <_strtod_l+0x5dc>
 8004de2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004de6:	f7fb fc07 	bl	80005f8 <__aeabi_dmul>
 8004dea:	2301      	movs	r3, #1
 8004dec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004df0:	f109 0908 	add.w	r9, r9, #8
 8004df4:	d1f2      	bne.n	8004ddc <_strtod_l+0x5cc>
 8004df6:	b10b      	cbz	r3, 8004dfc <_strtod_l+0x5ec>
 8004df8:	4682      	mov	sl, r0
 8004dfa:	468b      	mov	fp, r1
 8004dfc:	9b04      	ldr	r3, [sp, #16]
 8004dfe:	b1c3      	cbz	r3, 8004e32 <_strtod_l+0x622>
 8004e00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004e04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	4659      	mov	r1, fp
 8004e0c:	dd11      	ble.n	8004e32 <_strtod_l+0x622>
 8004e0e:	2b1f      	cmp	r3, #31
 8004e10:	f340 8124 	ble.w	800505c <_strtod_l+0x84c>
 8004e14:	2b34      	cmp	r3, #52	; 0x34
 8004e16:	bfde      	ittt	le
 8004e18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004e1c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8004e20:	fa03 f202 	lslle.w	r2, r3, r2
 8004e24:	f04f 0a00 	mov.w	sl, #0
 8004e28:	bfcc      	ite	gt
 8004e2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004e2e:	ea02 0b01 	andle.w	fp, r2, r1
 8004e32:	2200      	movs	r2, #0
 8004e34:	2300      	movs	r3, #0
 8004e36:	4650      	mov	r0, sl
 8004e38:	4659      	mov	r1, fp
 8004e3a:	f7fb fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d1a2      	bne.n	8004d88 <_strtod_l+0x578>
 8004e42:	9b07      	ldr	r3, [sp, #28]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	9908      	ldr	r1, [sp, #32]
 8004e48:	462b      	mov	r3, r5
 8004e4a:	463a      	mov	r2, r7
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f001 fe2d 	bl	8006aac <__s2b>
 8004e52:	9007      	str	r0, [sp, #28]
 8004e54:	2800      	cmp	r0, #0
 8004e56:	f43f af1f 	beq.w	8004c98 <_strtod_l+0x488>
 8004e5a:	9b05      	ldr	r3, [sp, #20]
 8004e5c:	1b9e      	subs	r6, r3, r6
 8004e5e:	9b06      	ldr	r3, [sp, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bfb4      	ite	lt
 8004e64:	4633      	movlt	r3, r6
 8004e66:	2300      	movge	r3, #0
 8004e68:	930c      	str	r3, [sp, #48]	; 0x30
 8004e6a:	9b06      	ldr	r3, [sp, #24]
 8004e6c:	2500      	movs	r5, #0
 8004e6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004e72:	9312      	str	r3, [sp, #72]	; 0x48
 8004e74:	462e      	mov	r6, r5
 8004e76:	9b07      	ldr	r3, [sp, #28]
 8004e78:	4620      	mov	r0, r4
 8004e7a:	6859      	ldr	r1, [r3, #4]
 8004e7c:	f001 fd6e 	bl	800695c <_Balloc>
 8004e80:	9005      	str	r0, [sp, #20]
 8004e82:	2800      	cmp	r0, #0
 8004e84:	f43f af0c 	beq.w	8004ca0 <_strtod_l+0x490>
 8004e88:	9b07      	ldr	r3, [sp, #28]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	3202      	adds	r2, #2
 8004e8e:	f103 010c 	add.w	r1, r3, #12
 8004e92:	0092      	lsls	r2, r2, #2
 8004e94:	300c      	adds	r0, #12
 8004e96:	f001 fd53 	bl	8006940 <memcpy>
 8004e9a:	ec4b ab10 	vmov	d0, sl, fp
 8004e9e:	aa1a      	add	r2, sp, #104	; 0x68
 8004ea0:	a919      	add	r1, sp, #100	; 0x64
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f002 f948 	bl	8007138 <__d2b>
 8004ea8:	ec4b ab18 	vmov	d8, sl, fp
 8004eac:	9018      	str	r0, [sp, #96]	; 0x60
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	f43f aef6 	beq.w	8004ca0 <_strtod_l+0x490>
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f001 fe92 	bl	8006be0 <__i2b>
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	f43f aeee 	beq.w	8004ca0 <_strtod_l+0x490>
 8004ec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ec6:	9904      	ldr	r1, [sp, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bfab      	itete	ge
 8004ecc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004ece:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004ed0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004ed2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004ed6:	bfac      	ite	ge
 8004ed8:	eb03 0902 	addge.w	r9, r3, r2
 8004edc:	1ad7      	sublt	r7, r2, r3
 8004ede:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004ee0:	eba3 0801 	sub.w	r8, r3, r1
 8004ee4:	4490      	add	r8, r2
 8004ee6:	4ba1      	ldr	r3, [pc, #644]	; (800516c <_strtod_l+0x95c>)
 8004ee8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004eec:	4598      	cmp	r8, r3
 8004eee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004ef2:	f280 80c7 	bge.w	8005084 <_strtod_l+0x874>
 8004ef6:	eba3 0308 	sub.w	r3, r3, r8
 8004efa:	2b1f      	cmp	r3, #31
 8004efc:	eba2 0203 	sub.w	r2, r2, r3
 8004f00:	f04f 0101 	mov.w	r1, #1
 8004f04:	f300 80b1 	bgt.w	800506a <_strtod_l+0x85a>
 8004f08:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0c:	930d      	str	r3, [sp, #52]	; 0x34
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9308      	str	r3, [sp, #32]
 8004f12:	eb09 0802 	add.w	r8, r9, r2
 8004f16:	9b04      	ldr	r3, [sp, #16]
 8004f18:	45c1      	cmp	r9, r8
 8004f1a:	4417      	add	r7, r2
 8004f1c:	441f      	add	r7, r3
 8004f1e:	464b      	mov	r3, r9
 8004f20:	bfa8      	it	ge
 8004f22:	4643      	movge	r3, r8
 8004f24:	42bb      	cmp	r3, r7
 8004f26:	bfa8      	it	ge
 8004f28:	463b      	movge	r3, r7
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bfc2      	ittt	gt
 8004f2e:	eba8 0803 	subgt.w	r8, r8, r3
 8004f32:	1aff      	subgt	r7, r7, r3
 8004f34:	eba9 0903 	subgt.w	r9, r9, r3
 8004f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	dd17      	ble.n	8004f6e <_strtod_l+0x75e>
 8004f3e:	4631      	mov	r1, r6
 8004f40:	461a      	mov	r2, r3
 8004f42:	4620      	mov	r0, r4
 8004f44:	f001 ff0c 	bl	8006d60 <__pow5mult>
 8004f48:	4606      	mov	r6, r0
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	f43f aea8 	beq.w	8004ca0 <_strtod_l+0x490>
 8004f50:	4601      	mov	r1, r0
 8004f52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004f54:	4620      	mov	r0, r4
 8004f56:	f001 fe59 	bl	8006c0c <__multiply>
 8004f5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	f43f ae9f 	beq.w	8004ca0 <_strtod_l+0x490>
 8004f62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004f64:	4620      	mov	r0, r4
 8004f66:	f001 fd39 	bl	80069dc <_Bfree>
 8004f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f6c:	9318      	str	r3, [sp, #96]	; 0x60
 8004f6e:	f1b8 0f00 	cmp.w	r8, #0
 8004f72:	f300 808c 	bgt.w	800508e <_strtod_l+0x87e>
 8004f76:	9b06      	ldr	r3, [sp, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	dd08      	ble.n	8004f8e <_strtod_l+0x77e>
 8004f7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f7e:	9905      	ldr	r1, [sp, #20]
 8004f80:	4620      	mov	r0, r4
 8004f82:	f001 feed 	bl	8006d60 <__pow5mult>
 8004f86:	9005      	str	r0, [sp, #20]
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	f43f ae89 	beq.w	8004ca0 <_strtod_l+0x490>
 8004f8e:	2f00      	cmp	r7, #0
 8004f90:	dd08      	ble.n	8004fa4 <_strtod_l+0x794>
 8004f92:	9905      	ldr	r1, [sp, #20]
 8004f94:	463a      	mov	r2, r7
 8004f96:	4620      	mov	r0, r4
 8004f98:	f001 ff3c 	bl	8006e14 <__lshift>
 8004f9c:	9005      	str	r0, [sp, #20]
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	f43f ae7e 	beq.w	8004ca0 <_strtod_l+0x490>
 8004fa4:	f1b9 0f00 	cmp.w	r9, #0
 8004fa8:	dd08      	ble.n	8004fbc <_strtod_l+0x7ac>
 8004faa:	4631      	mov	r1, r6
 8004fac:	464a      	mov	r2, r9
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f001 ff30 	bl	8006e14 <__lshift>
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	f43f ae72 	beq.w	8004ca0 <_strtod_l+0x490>
 8004fbc:	9a05      	ldr	r2, [sp, #20]
 8004fbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f001 ffb3 	bl	8006f2c <__mdiff>
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	f43f ae69 	beq.w	8004ca0 <_strtod_l+0x490>
 8004fce:	68c3      	ldr	r3, [r0, #12]
 8004fd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60c3      	str	r3, [r0, #12]
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	f001 ff8c 	bl	8006ef4 <__mcmp>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	da60      	bge.n	80050a2 <_strtod_l+0x892>
 8004fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fe2:	ea53 030a 	orrs.w	r3, r3, sl
 8004fe6:	f040 8082 	bne.w	80050ee <_strtod_l+0x8de>
 8004fea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d17d      	bne.n	80050ee <_strtod_l+0x8de>
 8004ff2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ff6:	0d1b      	lsrs	r3, r3, #20
 8004ff8:	051b      	lsls	r3, r3, #20
 8004ffa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004ffe:	d976      	bls.n	80050ee <_strtod_l+0x8de>
 8005000:	696b      	ldr	r3, [r5, #20]
 8005002:	b913      	cbnz	r3, 800500a <_strtod_l+0x7fa>
 8005004:	692b      	ldr	r3, [r5, #16]
 8005006:	2b01      	cmp	r3, #1
 8005008:	dd71      	ble.n	80050ee <_strtod_l+0x8de>
 800500a:	4629      	mov	r1, r5
 800500c:	2201      	movs	r2, #1
 800500e:	4620      	mov	r0, r4
 8005010:	f001 ff00 	bl	8006e14 <__lshift>
 8005014:	4631      	mov	r1, r6
 8005016:	4605      	mov	r5, r0
 8005018:	f001 ff6c 	bl	8006ef4 <__mcmp>
 800501c:	2800      	cmp	r0, #0
 800501e:	dd66      	ble.n	80050ee <_strtod_l+0x8de>
 8005020:	9904      	ldr	r1, [sp, #16]
 8005022:	4a53      	ldr	r2, [pc, #332]	; (8005170 <_strtod_l+0x960>)
 8005024:	465b      	mov	r3, fp
 8005026:	2900      	cmp	r1, #0
 8005028:	f000 8081 	beq.w	800512e <_strtod_l+0x91e>
 800502c:	ea02 010b 	and.w	r1, r2, fp
 8005030:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005034:	dc7b      	bgt.n	800512e <_strtod_l+0x91e>
 8005036:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800503a:	f77f aea9 	ble.w	8004d90 <_strtod_l+0x580>
 800503e:	4b4d      	ldr	r3, [pc, #308]	; (8005174 <_strtod_l+0x964>)
 8005040:	4650      	mov	r0, sl
 8005042:	4659      	mov	r1, fp
 8005044:	2200      	movs	r2, #0
 8005046:	f7fb fad7 	bl	80005f8 <__aeabi_dmul>
 800504a:	460b      	mov	r3, r1
 800504c:	4303      	orrs	r3, r0
 800504e:	bf08      	it	eq
 8005050:	2322      	moveq	r3, #34	; 0x22
 8005052:	4682      	mov	sl, r0
 8005054:	468b      	mov	fp, r1
 8005056:	bf08      	it	eq
 8005058:	6023      	streq	r3, [r4, #0]
 800505a:	e62b      	b.n	8004cb4 <_strtod_l+0x4a4>
 800505c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	ea03 0a0a 	and.w	sl, r3, sl
 8005068:	e6e3      	b.n	8004e32 <_strtod_l+0x622>
 800506a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800506e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005072:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005076:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800507a:	fa01 f308 	lsl.w	r3, r1, r8
 800507e:	9308      	str	r3, [sp, #32]
 8005080:	910d      	str	r1, [sp, #52]	; 0x34
 8005082:	e746      	b.n	8004f12 <_strtod_l+0x702>
 8005084:	2300      	movs	r3, #0
 8005086:	9308      	str	r3, [sp, #32]
 8005088:	2301      	movs	r3, #1
 800508a:	930d      	str	r3, [sp, #52]	; 0x34
 800508c:	e741      	b.n	8004f12 <_strtod_l+0x702>
 800508e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005090:	4642      	mov	r2, r8
 8005092:	4620      	mov	r0, r4
 8005094:	f001 febe 	bl	8006e14 <__lshift>
 8005098:	9018      	str	r0, [sp, #96]	; 0x60
 800509a:	2800      	cmp	r0, #0
 800509c:	f47f af6b 	bne.w	8004f76 <_strtod_l+0x766>
 80050a0:	e5fe      	b.n	8004ca0 <_strtod_l+0x490>
 80050a2:	465f      	mov	r7, fp
 80050a4:	d16e      	bne.n	8005184 <_strtod_l+0x974>
 80050a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050ac:	b342      	cbz	r2, 8005100 <_strtod_l+0x8f0>
 80050ae:	4a32      	ldr	r2, [pc, #200]	; (8005178 <_strtod_l+0x968>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d128      	bne.n	8005106 <_strtod_l+0x8f6>
 80050b4:	9b04      	ldr	r3, [sp, #16]
 80050b6:	4651      	mov	r1, sl
 80050b8:	b1eb      	cbz	r3, 80050f6 <_strtod_l+0x8e6>
 80050ba:	4b2d      	ldr	r3, [pc, #180]	; (8005170 <_strtod_l+0x960>)
 80050bc:	403b      	ands	r3, r7
 80050be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050c6:	d819      	bhi.n	80050fc <_strtod_l+0x8ec>
 80050c8:	0d1b      	lsrs	r3, r3, #20
 80050ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	4299      	cmp	r1, r3
 80050d4:	d117      	bne.n	8005106 <_strtod_l+0x8f6>
 80050d6:	4b29      	ldr	r3, [pc, #164]	; (800517c <_strtod_l+0x96c>)
 80050d8:	429f      	cmp	r7, r3
 80050da:	d102      	bne.n	80050e2 <_strtod_l+0x8d2>
 80050dc:	3101      	adds	r1, #1
 80050de:	f43f addf 	beq.w	8004ca0 <_strtod_l+0x490>
 80050e2:	4b23      	ldr	r3, [pc, #140]	; (8005170 <_strtod_l+0x960>)
 80050e4:	403b      	ands	r3, r7
 80050e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80050ea:	f04f 0a00 	mov.w	sl, #0
 80050ee:	9b04      	ldr	r3, [sp, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1a4      	bne.n	800503e <_strtod_l+0x82e>
 80050f4:	e5de      	b.n	8004cb4 <_strtod_l+0x4a4>
 80050f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050fa:	e7ea      	b.n	80050d2 <_strtod_l+0x8c2>
 80050fc:	4613      	mov	r3, r2
 80050fe:	e7e8      	b.n	80050d2 <_strtod_l+0x8c2>
 8005100:	ea53 030a 	orrs.w	r3, r3, sl
 8005104:	d08c      	beq.n	8005020 <_strtod_l+0x810>
 8005106:	9b08      	ldr	r3, [sp, #32]
 8005108:	b1db      	cbz	r3, 8005142 <_strtod_l+0x932>
 800510a:	423b      	tst	r3, r7
 800510c:	d0ef      	beq.n	80050ee <_strtod_l+0x8de>
 800510e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005110:	9a04      	ldr	r2, [sp, #16]
 8005112:	4650      	mov	r0, sl
 8005114:	4659      	mov	r1, fp
 8005116:	b1c3      	cbz	r3, 800514a <_strtod_l+0x93a>
 8005118:	f7ff fb5e 	bl	80047d8 <sulp>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	ec51 0b18 	vmov	r0, r1, d8
 8005124:	f7fb f8b2 	bl	800028c <__adddf3>
 8005128:	4682      	mov	sl, r0
 800512a:	468b      	mov	fp, r1
 800512c:	e7df      	b.n	80050ee <_strtod_l+0x8de>
 800512e:	4013      	ands	r3, r2
 8005130:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005134:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005138:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800513c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005140:	e7d5      	b.n	80050ee <_strtod_l+0x8de>
 8005142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005144:	ea13 0f0a 	tst.w	r3, sl
 8005148:	e7e0      	b.n	800510c <_strtod_l+0x8fc>
 800514a:	f7ff fb45 	bl	80047d8 <sulp>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	ec51 0b18 	vmov	r0, r1, d8
 8005156:	f7fb f897 	bl	8000288 <__aeabi_dsub>
 800515a:	2200      	movs	r2, #0
 800515c:	2300      	movs	r3, #0
 800515e:	4682      	mov	sl, r0
 8005160:	468b      	mov	fp, r1
 8005162:	f7fb fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005166:	2800      	cmp	r0, #0
 8005168:	d0c1      	beq.n	80050ee <_strtod_l+0x8de>
 800516a:	e611      	b.n	8004d90 <_strtod_l+0x580>
 800516c:	fffffc02 	.word	0xfffffc02
 8005170:	7ff00000 	.word	0x7ff00000
 8005174:	39500000 	.word	0x39500000
 8005178:	000fffff 	.word	0x000fffff
 800517c:	7fefffff 	.word	0x7fefffff
 8005180:	08008438 	.word	0x08008438
 8005184:	4631      	mov	r1, r6
 8005186:	4628      	mov	r0, r5
 8005188:	f002 f832 	bl	80071f0 <__ratio>
 800518c:	ec59 8b10 	vmov	r8, r9, d0
 8005190:	ee10 0a10 	vmov	r0, s0
 8005194:	2200      	movs	r2, #0
 8005196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800519a:	4649      	mov	r1, r9
 800519c:	f7fb fca8 	bl	8000af0 <__aeabi_dcmple>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d07a      	beq.n	800529a <_strtod_l+0xa8a>
 80051a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d04a      	beq.n	8005240 <_strtod_l+0xa30>
 80051aa:	4b95      	ldr	r3, [pc, #596]	; (8005400 <_strtod_l+0xbf0>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80051b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005400 <_strtod_l+0xbf0>
 80051b6:	f04f 0800 	mov.w	r8, #0
 80051ba:	4b92      	ldr	r3, [pc, #584]	; (8005404 <_strtod_l+0xbf4>)
 80051bc:	403b      	ands	r3, r7
 80051be:	930d      	str	r3, [sp, #52]	; 0x34
 80051c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051c2:	4b91      	ldr	r3, [pc, #580]	; (8005408 <_strtod_l+0xbf8>)
 80051c4:	429a      	cmp	r2, r3
 80051c6:	f040 80b0 	bne.w	800532a <_strtod_l+0xb1a>
 80051ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80051ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80051d2:	ec4b ab10 	vmov	d0, sl, fp
 80051d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80051da:	f001 ff31 	bl	8007040 <__ulp>
 80051de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80051e2:	ec53 2b10 	vmov	r2, r3, d0
 80051e6:	f7fb fa07 	bl	80005f8 <__aeabi_dmul>
 80051ea:	4652      	mov	r2, sl
 80051ec:	465b      	mov	r3, fp
 80051ee:	f7fb f84d 	bl	800028c <__adddf3>
 80051f2:	460b      	mov	r3, r1
 80051f4:	4983      	ldr	r1, [pc, #524]	; (8005404 <_strtod_l+0xbf4>)
 80051f6:	4a85      	ldr	r2, [pc, #532]	; (800540c <_strtod_l+0xbfc>)
 80051f8:	4019      	ands	r1, r3
 80051fa:	4291      	cmp	r1, r2
 80051fc:	4682      	mov	sl, r0
 80051fe:	d960      	bls.n	80052c2 <_strtod_l+0xab2>
 8005200:	ee18 3a90 	vmov	r3, s17
 8005204:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005208:	4293      	cmp	r3, r2
 800520a:	d104      	bne.n	8005216 <_strtod_l+0xa06>
 800520c:	ee18 3a10 	vmov	r3, s16
 8005210:	3301      	adds	r3, #1
 8005212:	f43f ad45 	beq.w	8004ca0 <_strtod_l+0x490>
 8005216:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005418 <_strtod_l+0xc08>
 800521a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800521e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005220:	4620      	mov	r0, r4
 8005222:	f001 fbdb 	bl	80069dc <_Bfree>
 8005226:	9905      	ldr	r1, [sp, #20]
 8005228:	4620      	mov	r0, r4
 800522a:	f001 fbd7 	bl	80069dc <_Bfree>
 800522e:	4631      	mov	r1, r6
 8005230:	4620      	mov	r0, r4
 8005232:	f001 fbd3 	bl	80069dc <_Bfree>
 8005236:	4629      	mov	r1, r5
 8005238:	4620      	mov	r0, r4
 800523a:	f001 fbcf 	bl	80069dc <_Bfree>
 800523e:	e61a      	b.n	8004e76 <_strtod_l+0x666>
 8005240:	f1ba 0f00 	cmp.w	sl, #0
 8005244:	d11b      	bne.n	800527e <_strtod_l+0xa6e>
 8005246:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800524a:	b9f3      	cbnz	r3, 800528a <_strtod_l+0xa7a>
 800524c:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <_strtod_l+0xbf0>)
 800524e:	2200      	movs	r2, #0
 8005250:	4640      	mov	r0, r8
 8005252:	4649      	mov	r1, r9
 8005254:	f7fb fc42 	bl	8000adc <__aeabi_dcmplt>
 8005258:	b9d0      	cbnz	r0, 8005290 <_strtod_l+0xa80>
 800525a:	4640      	mov	r0, r8
 800525c:	4649      	mov	r1, r9
 800525e:	4b6c      	ldr	r3, [pc, #432]	; (8005410 <_strtod_l+0xc00>)
 8005260:	2200      	movs	r2, #0
 8005262:	f7fb f9c9 	bl	80005f8 <__aeabi_dmul>
 8005266:	4680      	mov	r8, r0
 8005268:	4689      	mov	r9, r1
 800526a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800526e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005272:	9315      	str	r3, [sp, #84]	; 0x54
 8005274:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005278:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800527c:	e79d      	b.n	80051ba <_strtod_l+0x9aa>
 800527e:	f1ba 0f01 	cmp.w	sl, #1
 8005282:	d102      	bne.n	800528a <_strtod_l+0xa7a>
 8005284:	2f00      	cmp	r7, #0
 8005286:	f43f ad83 	beq.w	8004d90 <_strtod_l+0x580>
 800528a:	4b62      	ldr	r3, [pc, #392]	; (8005414 <_strtod_l+0xc04>)
 800528c:	2200      	movs	r2, #0
 800528e:	e78e      	b.n	80051ae <_strtod_l+0x99e>
 8005290:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005410 <_strtod_l+0xc00>
 8005294:	f04f 0800 	mov.w	r8, #0
 8005298:	e7e7      	b.n	800526a <_strtod_l+0xa5a>
 800529a:	4b5d      	ldr	r3, [pc, #372]	; (8005410 <_strtod_l+0xc00>)
 800529c:	4640      	mov	r0, r8
 800529e:	4649      	mov	r1, r9
 80052a0:	2200      	movs	r2, #0
 80052a2:	f7fb f9a9 	bl	80005f8 <__aeabi_dmul>
 80052a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052a8:	4680      	mov	r8, r0
 80052aa:	4689      	mov	r9, r1
 80052ac:	b933      	cbnz	r3, 80052bc <_strtod_l+0xaac>
 80052ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052b2:	900e      	str	r0, [sp, #56]	; 0x38
 80052b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80052b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80052ba:	e7dd      	b.n	8005278 <_strtod_l+0xa68>
 80052bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80052c0:	e7f9      	b.n	80052b6 <_strtod_l+0xaa6>
 80052c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80052c6:	9b04      	ldr	r3, [sp, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1a8      	bne.n	800521e <_strtod_l+0xa0e>
 80052cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80052d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80052d2:	0d1b      	lsrs	r3, r3, #20
 80052d4:	051b      	lsls	r3, r3, #20
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d1a1      	bne.n	800521e <_strtod_l+0xa0e>
 80052da:	4640      	mov	r0, r8
 80052dc:	4649      	mov	r1, r9
 80052de:	f7fb fcd3 	bl	8000c88 <__aeabi_d2lz>
 80052e2:	f7fb f95b 	bl	800059c <__aeabi_l2d>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4640      	mov	r0, r8
 80052ec:	4649      	mov	r1, r9
 80052ee:	f7fa ffcb 	bl	8000288 <__aeabi_dsub>
 80052f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052f8:	ea43 030a 	orr.w	r3, r3, sl
 80052fc:	4313      	orrs	r3, r2
 80052fe:	4680      	mov	r8, r0
 8005300:	4689      	mov	r9, r1
 8005302:	d055      	beq.n	80053b0 <_strtod_l+0xba0>
 8005304:	a336      	add	r3, pc, #216	; (adr r3, 80053e0 <_strtod_l+0xbd0>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f7fb fbe7 	bl	8000adc <__aeabi_dcmplt>
 800530e:	2800      	cmp	r0, #0
 8005310:	f47f acd0 	bne.w	8004cb4 <_strtod_l+0x4a4>
 8005314:	a334      	add	r3, pc, #208	; (adr r3, 80053e8 <_strtod_l+0xbd8>)
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	4640      	mov	r0, r8
 800531c:	4649      	mov	r1, r9
 800531e:	f7fb fbfb 	bl	8000b18 <__aeabi_dcmpgt>
 8005322:	2800      	cmp	r0, #0
 8005324:	f43f af7b 	beq.w	800521e <_strtod_l+0xa0e>
 8005328:	e4c4      	b.n	8004cb4 <_strtod_l+0x4a4>
 800532a:	9b04      	ldr	r3, [sp, #16]
 800532c:	b333      	cbz	r3, 800537c <_strtod_l+0xb6c>
 800532e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005330:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005334:	d822      	bhi.n	800537c <_strtod_l+0xb6c>
 8005336:	a32e      	add	r3, pc, #184	; (adr r3, 80053f0 <_strtod_l+0xbe0>)
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	4640      	mov	r0, r8
 800533e:	4649      	mov	r1, r9
 8005340:	f7fb fbd6 	bl	8000af0 <__aeabi_dcmple>
 8005344:	b1a0      	cbz	r0, 8005370 <_strtod_l+0xb60>
 8005346:	4649      	mov	r1, r9
 8005348:	4640      	mov	r0, r8
 800534a:	f7fb fc2d 	bl	8000ba8 <__aeabi_d2uiz>
 800534e:	2801      	cmp	r0, #1
 8005350:	bf38      	it	cc
 8005352:	2001      	movcc	r0, #1
 8005354:	f7fb f8d6 	bl	8000504 <__aeabi_ui2d>
 8005358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800535a:	4680      	mov	r8, r0
 800535c:	4689      	mov	r9, r1
 800535e:	bb23      	cbnz	r3, 80053aa <_strtod_l+0xb9a>
 8005360:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005364:	9010      	str	r0, [sp, #64]	; 0x40
 8005366:	9311      	str	r3, [sp, #68]	; 0x44
 8005368:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800536c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005372:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005374:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	9309      	str	r3, [sp, #36]	; 0x24
 800537c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005380:	eeb0 0a48 	vmov.f32	s0, s16
 8005384:	eef0 0a68 	vmov.f32	s1, s17
 8005388:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800538c:	f001 fe58 	bl	8007040 <__ulp>
 8005390:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005394:	ec53 2b10 	vmov	r2, r3, d0
 8005398:	f7fb f92e 	bl	80005f8 <__aeabi_dmul>
 800539c:	ec53 2b18 	vmov	r2, r3, d8
 80053a0:	f7fa ff74 	bl	800028c <__adddf3>
 80053a4:	4682      	mov	sl, r0
 80053a6:	468b      	mov	fp, r1
 80053a8:	e78d      	b.n	80052c6 <_strtod_l+0xab6>
 80053aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80053ae:	e7db      	b.n	8005368 <_strtod_l+0xb58>
 80053b0:	a311      	add	r3, pc, #68	; (adr r3, 80053f8 <_strtod_l+0xbe8>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f7fb fb91 	bl	8000adc <__aeabi_dcmplt>
 80053ba:	e7b2      	b.n	8005322 <_strtod_l+0xb12>
 80053bc:	2300      	movs	r3, #0
 80053be:	930a      	str	r3, [sp, #40]	; 0x28
 80053c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	f7ff ba6b 	b.w	80048a0 <_strtod_l+0x90>
 80053ca:	2a65      	cmp	r2, #101	; 0x65
 80053cc:	f43f ab5f 	beq.w	8004a8e <_strtod_l+0x27e>
 80053d0:	2a45      	cmp	r2, #69	; 0x45
 80053d2:	f43f ab5c 	beq.w	8004a8e <_strtod_l+0x27e>
 80053d6:	2301      	movs	r3, #1
 80053d8:	f7ff bb94 	b.w	8004b04 <_strtod_l+0x2f4>
 80053dc:	f3af 8000 	nop.w
 80053e0:	94a03595 	.word	0x94a03595
 80053e4:	3fdfffff 	.word	0x3fdfffff
 80053e8:	35afe535 	.word	0x35afe535
 80053ec:	3fe00000 	.word	0x3fe00000
 80053f0:	ffc00000 	.word	0xffc00000
 80053f4:	41dfffff 	.word	0x41dfffff
 80053f8:	94a03595 	.word	0x94a03595
 80053fc:	3fcfffff 	.word	0x3fcfffff
 8005400:	3ff00000 	.word	0x3ff00000
 8005404:	7ff00000 	.word	0x7ff00000
 8005408:	7fe00000 	.word	0x7fe00000
 800540c:	7c9fffff 	.word	0x7c9fffff
 8005410:	3fe00000 	.word	0x3fe00000
 8005414:	bff00000 	.word	0xbff00000
 8005418:	7fefffff 	.word	0x7fefffff

0800541c <_strtod_r>:
 800541c:	4b01      	ldr	r3, [pc, #4]	; (8005424 <_strtod_r+0x8>)
 800541e:	f7ff b9f7 	b.w	8004810 <_strtod_l>
 8005422:	bf00      	nop
 8005424:	20000074 	.word	0x20000074

08005428 <_strtol_l.constprop.0>:
 8005428:	2b01      	cmp	r3, #1
 800542a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800542e:	d001      	beq.n	8005434 <_strtol_l.constprop.0+0xc>
 8005430:	2b24      	cmp	r3, #36	; 0x24
 8005432:	d906      	bls.n	8005442 <_strtol_l.constprop.0+0x1a>
 8005434:	f7fe fafe 	bl	8003a34 <__errno>
 8005438:	2316      	movs	r3, #22
 800543a:	6003      	str	r3, [r0, #0]
 800543c:	2000      	movs	r0, #0
 800543e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005442:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005528 <_strtol_l.constprop.0+0x100>
 8005446:	460d      	mov	r5, r1
 8005448:	462e      	mov	r6, r5
 800544a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800544e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005452:	f017 0708 	ands.w	r7, r7, #8
 8005456:	d1f7      	bne.n	8005448 <_strtol_l.constprop.0+0x20>
 8005458:	2c2d      	cmp	r4, #45	; 0x2d
 800545a:	d132      	bne.n	80054c2 <_strtol_l.constprop.0+0x9a>
 800545c:	782c      	ldrb	r4, [r5, #0]
 800545e:	2701      	movs	r7, #1
 8005460:	1cb5      	adds	r5, r6, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d05b      	beq.n	800551e <_strtol_l.constprop.0+0xf6>
 8005466:	2b10      	cmp	r3, #16
 8005468:	d109      	bne.n	800547e <_strtol_l.constprop.0+0x56>
 800546a:	2c30      	cmp	r4, #48	; 0x30
 800546c:	d107      	bne.n	800547e <_strtol_l.constprop.0+0x56>
 800546e:	782c      	ldrb	r4, [r5, #0]
 8005470:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005474:	2c58      	cmp	r4, #88	; 0x58
 8005476:	d14d      	bne.n	8005514 <_strtol_l.constprop.0+0xec>
 8005478:	786c      	ldrb	r4, [r5, #1]
 800547a:	2310      	movs	r3, #16
 800547c:	3502      	adds	r5, #2
 800547e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005482:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005486:	f04f 0c00 	mov.w	ip, #0
 800548a:	fbb8 f9f3 	udiv	r9, r8, r3
 800548e:	4666      	mov	r6, ip
 8005490:	fb03 8a19 	mls	sl, r3, r9, r8
 8005494:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005498:	f1be 0f09 	cmp.w	lr, #9
 800549c:	d816      	bhi.n	80054cc <_strtol_l.constprop.0+0xa4>
 800549e:	4674      	mov	r4, lr
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	dd24      	ble.n	80054ee <_strtol_l.constprop.0+0xc6>
 80054a4:	f1bc 0f00 	cmp.w	ip, #0
 80054a8:	db1e      	blt.n	80054e8 <_strtol_l.constprop.0+0xc0>
 80054aa:	45b1      	cmp	r9, r6
 80054ac:	d31c      	bcc.n	80054e8 <_strtol_l.constprop.0+0xc0>
 80054ae:	d101      	bne.n	80054b4 <_strtol_l.constprop.0+0x8c>
 80054b0:	45a2      	cmp	sl, r4
 80054b2:	db19      	blt.n	80054e8 <_strtol_l.constprop.0+0xc0>
 80054b4:	fb06 4603 	mla	r6, r6, r3, r4
 80054b8:	f04f 0c01 	mov.w	ip, #1
 80054bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054c0:	e7e8      	b.n	8005494 <_strtol_l.constprop.0+0x6c>
 80054c2:	2c2b      	cmp	r4, #43	; 0x2b
 80054c4:	bf04      	itt	eq
 80054c6:	782c      	ldrbeq	r4, [r5, #0]
 80054c8:	1cb5      	addeq	r5, r6, #2
 80054ca:	e7ca      	b.n	8005462 <_strtol_l.constprop.0+0x3a>
 80054cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80054d0:	f1be 0f19 	cmp.w	lr, #25
 80054d4:	d801      	bhi.n	80054da <_strtol_l.constprop.0+0xb2>
 80054d6:	3c37      	subs	r4, #55	; 0x37
 80054d8:	e7e2      	b.n	80054a0 <_strtol_l.constprop.0+0x78>
 80054da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80054de:	f1be 0f19 	cmp.w	lr, #25
 80054e2:	d804      	bhi.n	80054ee <_strtol_l.constprop.0+0xc6>
 80054e4:	3c57      	subs	r4, #87	; 0x57
 80054e6:	e7db      	b.n	80054a0 <_strtol_l.constprop.0+0x78>
 80054e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80054ec:	e7e6      	b.n	80054bc <_strtol_l.constprop.0+0x94>
 80054ee:	f1bc 0f00 	cmp.w	ip, #0
 80054f2:	da05      	bge.n	8005500 <_strtol_l.constprop.0+0xd8>
 80054f4:	2322      	movs	r3, #34	; 0x22
 80054f6:	6003      	str	r3, [r0, #0]
 80054f8:	4646      	mov	r6, r8
 80054fa:	b942      	cbnz	r2, 800550e <_strtol_l.constprop.0+0xe6>
 80054fc:	4630      	mov	r0, r6
 80054fe:	e79e      	b.n	800543e <_strtol_l.constprop.0+0x16>
 8005500:	b107      	cbz	r7, 8005504 <_strtol_l.constprop.0+0xdc>
 8005502:	4276      	negs	r6, r6
 8005504:	2a00      	cmp	r2, #0
 8005506:	d0f9      	beq.n	80054fc <_strtol_l.constprop.0+0xd4>
 8005508:	f1bc 0f00 	cmp.w	ip, #0
 800550c:	d000      	beq.n	8005510 <_strtol_l.constprop.0+0xe8>
 800550e:	1e69      	subs	r1, r5, #1
 8005510:	6011      	str	r1, [r2, #0]
 8005512:	e7f3      	b.n	80054fc <_strtol_l.constprop.0+0xd4>
 8005514:	2430      	movs	r4, #48	; 0x30
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1b1      	bne.n	800547e <_strtol_l.constprop.0+0x56>
 800551a:	2308      	movs	r3, #8
 800551c:	e7af      	b.n	800547e <_strtol_l.constprop.0+0x56>
 800551e:	2c30      	cmp	r4, #48	; 0x30
 8005520:	d0a5      	beq.n	800546e <_strtol_l.constprop.0+0x46>
 8005522:	230a      	movs	r3, #10
 8005524:	e7ab      	b.n	800547e <_strtol_l.constprop.0+0x56>
 8005526:	bf00      	nop
 8005528:	08008461 	.word	0x08008461

0800552c <_strtol_r>:
 800552c:	f7ff bf7c 	b.w	8005428 <_strtol_l.constprop.0>

08005530 <quorem>:
 8005530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	6903      	ldr	r3, [r0, #16]
 8005536:	690c      	ldr	r4, [r1, #16]
 8005538:	42a3      	cmp	r3, r4
 800553a:	4607      	mov	r7, r0
 800553c:	f2c0 8081 	blt.w	8005642 <quorem+0x112>
 8005540:	3c01      	subs	r4, #1
 8005542:	f101 0814 	add.w	r8, r1, #20
 8005546:	f100 0514 	add.w	r5, r0, #20
 800554a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005554:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005558:	3301      	adds	r3, #1
 800555a:	429a      	cmp	r2, r3
 800555c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005560:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005564:	fbb2 f6f3 	udiv	r6, r2, r3
 8005568:	d331      	bcc.n	80055ce <quorem+0x9e>
 800556a:	f04f 0e00 	mov.w	lr, #0
 800556e:	4640      	mov	r0, r8
 8005570:	46ac      	mov	ip, r5
 8005572:	46f2      	mov	sl, lr
 8005574:	f850 2b04 	ldr.w	r2, [r0], #4
 8005578:	b293      	uxth	r3, r2
 800557a:	fb06 e303 	mla	r3, r6, r3, lr
 800557e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005582:	b29b      	uxth	r3, r3
 8005584:	ebaa 0303 	sub.w	r3, sl, r3
 8005588:	f8dc a000 	ldr.w	sl, [ip]
 800558c:	0c12      	lsrs	r2, r2, #16
 800558e:	fa13 f38a 	uxtah	r3, r3, sl
 8005592:	fb06 e202 	mla	r2, r6, r2, lr
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	9b00      	ldr	r3, [sp, #0]
 800559a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800559e:	b292      	uxth	r2, r2
 80055a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80055ac:	4581      	cmp	r9, r0
 80055ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055b2:	f84c 3b04 	str.w	r3, [ip], #4
 80055b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055ba:	d2db      	bcs.n	8005574 <quorem+0x44>
 80055bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80055c0:	b92b      	cbnz	r3, 80055ce <quorem+0x9e>
 80055c2:	9b01      	ldr	r3, [sp, #4]
 80055c4:	3b04      	subs	r3, #4
 80055c6:	429d      	cmp	r5, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	d32e      	bcc.n	800562a <quorem+0xfa>
 80055cc:	613c      	str	r4, [r7, #16]
 80055ce:	4638      	mov	r0, r7
 80055d0:	f001 fc90 	bl	8006ef4 <__mcmp>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	db24      	blt.n	8005622 <quorem+0xf2>
 80055d8:	3601      	adds	r6, #1
 80055da:	4628      	mov	r0, r5
 80055dc:	f04f 0c00 	mov.w	ip, #0
 80055e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80055e4:	f8d0 e000 	ldr.w	lr, [r0]
 80055e8:	b293      	uxth	r3, r2
 80055ea:	ebac 0303 	sub.w	r3, ip, r3
 80055ee:	0c12      	lsrs	r2, r2, #16
 80055f0:	fa13 f38e 	uxtah	r3, r3, lr
 80055f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005602:	45c1      	cmp	r9, r8
 8005604:	f840 3b04 	str.w	r3, [r0], #4
 8005608:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800560c:	d2e8      	bcs.n	80055e0 <quorem+0xb0>
 800560e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005616:	b922      	cbnz	r2, 8005622 <quorem+0xf2>
 8005618:	3b04      	subs	r3, #4
 800561a:	429d      	cmp	r5, r3
 800561c:	461a      	mov	r2, r3
 800561e:	d30a      	bcc.n	8005636 <quorem+0x106>
 8005620:	613c      	str	r4, [r7, #16]
 8005622:	4630      	mov	r0, r6
 8005624:	b003      	add	sp, #12
 8005626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	3b04      	subs	r3, #4
 800562e:	2a00      	cmp	r2, #0
 8005630:	d1cc      	bne.n	80055cc <quorem+0x9c>
 8005632:	3c01      	subs	r4, #1
 8005634:	e7c7      	b.n	80055c6 <quorem+0x96>
 8005636:	6812      	ldr	r2, [r2, #0]
 8005638:	3b04      	subs	r3, #4
 800563a:	2a00      	cmp	r2, #0
 800563c:	d1f0      	bne.n	8005620 <quorem+0xf0>
 800563e:	3c01      	subs	r4, #1
 8005640:	e7eb      	b.n	800561a <quorem+0xea>
 8005642:	2000      	movs	r0, #0
 8005644:	e7ee      	b.n	8005624 <quorem+0xf4>
	...

08005648 <_dtoa_r>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	ed2d 8b04 	vpush	{d8-d9}
 8005650:	ec57 6b10 	vmov	r6, r7, d0
 8005654:	b093      	sub	sp, #76	; 0x4c
 8005656:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005658:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800565c:	9106      	str	r1, [sp, #24]
 800565e:	ee10 aa10 	vmov	sl, s0
 8005662:	4604      	mov	r4, r0
 8005664:	9209      	str	r2, [sp, #36]	; 0x24
 8005666:	930c      	str	r3, [sp, #48]	; 0x30
 8005668:	46bb      	mov	fp, r7
 800566a:	b975      	cbnz	r5, 800568a <_dtoa_r+0x42>
 800566c:	2010      	movs	r0, #16
 800566e:	f001 f94d 	bl	800690c <malloc>
 8005672:	4602      	mov	r2, r0
 8005674:	6260      	str	r0, [r4, #36]	; 0x24
 8005676:	b920      	cbnz	r0, 8005682 <_dtoa_r+0x3a>
 8005678:	4ba7      	ldr	r3, [pc, #668]	; (8005918 <_dtoa_r+0x2d0>)
 800567a:	21ea      	movs	r1, #234	; 0xea
 800567c:	48a7      	ldr	r0, [pc, #668]	; (800591c <_dtoa_r+0x2d4>)
 800567e:	f002 f8bd 	bl	80077fc <__assert_func>
 8005682:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005686:	6005      	str	r5, [r0, #0]
 8005688:	60c5      	str	r5, [r0, #12]
 800568a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800568c:	6819      	ldr	r1, [r3, #0]
 800568e:	b151      	cbz	r1, 80056a6 <_dtoa_r+0x5e>
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	604a      	str	r2, [r1, #4]
 8005694:	2301      	movs	r3, #1
 8005696:	4093      	lsls	r3, r2
 8005698:	608b      	str	r3, [r1, #8]
 800569a:	4620      	mov	r0, r4
 800569c:	f001 f99e 	bl	80069dc <_Bfree>
 80056a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	1e3b      	subs	r3, r7, #0
 80056a8:	bfaa      	itet	ge
 80056aa:	2300      	movge	r3, #0
 80056ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80056b0:	f8c8 3000 	strge.w	r3, [r8]
 80056b4:	4b9a      	ldr	r3, [pc, #616]	; (8005920 <_dtoa_r+0x2d8>)
 80056b6:	bfbc      	itt	lt
 80056b8:	2201      	movlt	r2, #1
 80056ba:	f8c8 2000 	strlt.w	r2, [r8]
 80056be:	ea33 030b 	bics.w	r3, r3, fp
 80056c2:	d11b      	bne.n	80056fc <_dtoa_r+0xb4>
 80056c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056d0:	4333      	orrs	r3, r6
 80056d2:	f000 8592 	beq.w	80061fa <_dtoa_r+0xbb2>
 80056d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056d8:	b963      	cbnz	r3, 80056f4 <_dtoa_r+0xac>
 80056da:	4b92      	ldr	r3, [pc, #584]	; (8005924 <_dtoa_r+0x2dc>)
 80056dc:	e022      	b.n	8005724 <_dtoa_r+0xdc>
 80056de:	4b92      	ldr	r3, [pc, #584]	; (8005928 <_dtoa_r+0x2e0>)
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	3308      	adds	r3, #8
 80056e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	9801      	ldr	r0, [sp, #4]
 80056ea:	b013      	add	sp, #76	; 0x4c
 80056ec:	ecbd 8b04 	vpop	{d8-d9}
 80056f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f4:	4b8b      	ldr	r3, [pc, #556]	; (8005924 <_dtoa_r+0x2dc>)
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	3303      	adds	r3, #3
 80056fa:	e7f3      	b.n	80056e4 <_dtoa_r+0x9c>
 80056fc:	2200      	movs	r2, #0
 80056fe:	2300      	movs	r3, #0
 8005700:	4650      	mov	r0, sl
 8005702:	4659      	mov	r1, fp
 8005704:	f7fb f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005708:	ec4b ab19 	vmov	d9, sl, fp
 800570c:	4680      	mov	r8, r0
 800570e:	b158      	cbz	r0, 8005728 <_dtoa_r+0xe0>
 8005710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005712:	2301      	movs	r3, #1
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 856b 	beq.w	80061f4 <_dtoa_r+0xbac>
 800571e:	4883      	ldr	r0, [pc, #524]	; (800592c <_dtoa_r+0x2e4>)
 8005720:	6018      	str	r0, [r3, #0]
 8005722:	1e43      	subs	r3, r0, #1
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	e7df      	b.n	80056e8 <_dtoa_r+0xa0>
 8005728:	ec4b ab10 	vmov	d0, sl, fp
 800572c:	aa10      	add	r2, sp, #64	; 0x40
 800572e:	a911      	add	r1, sp, #68	; 0x44
 8005730:	4620      	mov	r0, r4
 8005732:	f001 fd01 	bl	8007138 <__d2b>
 8005736:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800573a:	ee08 0a10 	vmov	s16, r0
 800573e:	2d00      	cmp	r5, #0
 8005740:	f000 8084 	beq.w	800584c <_dtoa_r+0x204>
 8005744:	ee19 3a90 	vmov	r3, s19
 8005748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800574c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005750:	4656      	mov	r6, sl
 8005752:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005756:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800575a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800575e:	4b74      	ldr	r3, [pc, #464]	; (8005930 <_dtoa_r+0x2e8>)
 8005760:	2200      	movs	r2, #0
 8005762:	4630      	mov	r0, r6
 8005764:	4639      	mov	r1, r7
 8005766:	f7fa fd8f 	bl	8000288 <__aeabi_dsub>
 800576a:	a365      	add	r3, pc, #404	; (adr r3, 8005900 <_dtoa_r+0x2b8>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f7fa ff42 	bl	80005f8 <__aeabi_dmul>
 8005774:	a364      	add	r3, pc, #400	; (adr r3, 8005908 <_dtoa_r+0x2c0>)
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f7fa fd87 	bl	800028c <__adddf3>
 800577e:	4606      	mov	r6, r0
 8005780:	4628      	mov	r0, r5
 8005782:	460f      	mov	r7, r1
 8005784:	f7fa fece 	bl	8000524 <__aeabi_i2d>
 8005788:	a361      	add	r3, pc, #388	; (adr r3, 8005910 <_dtoa_r+0x2c8>)
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f7fa ff33 	bl	80005f8 <__aeabi_dmul>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4630      	mov	r0, r6
 8005798:	4639      	mov	r1, r7
 800579a:	f7fa fd77 	bl	800028c <__adddf3>
 800579e:	4606      	mov	r6, r0
 80057a0:	460f      	mov	r7, r1
 80057a2:	f7fb f9d9 	bl	8000b58 <__aeabi_d2iz>
 80057a6:	2200      	movs	r2, #0
 80057a8:	9000      	str	r0, [sp, #0]
 80057aa:	2300      	movs	r3, #0
 80057ac:	4630      	mov	r0, r6
 80057ae:	4639      	mov	r1, r7
 80057b0:	f7fb f994 	bl	8000adc <__aeabi_dcmplt>
 80057b4:	b150      	cbz	r0, 80057cc <_dtoa_r+0x184>
 80057b6:	9800      	ldr	r0, [sp, #0]
 80057b8:	f7fa feb4 	bl	8000524 <__aeabi_i2d>
 80057bc:	4632      	mov	r2, r6
 80057be:	463b      	mov	r3, r7
 80057c0:	f7fb f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80057c4:	b910      	cbnz	r0, 80057cc <_dtoa_r+0x184>
 80057c6:	9b00      	ldr	r3, [sp, #0]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	9b00      	ldr	r3, [sp, #0]
 80057ce:	2b16      	cmp	r3, #22
 80057d0:	d85a      	bhi.n	8005888 <_dtoa_r+0x240>
 80057d2:	9a00      	ldr	r2, [sp, #0]
 80057d4:	4b57      	ldr	r3, [pc, #348]	; (8005934 <_dtoa_r+0x2ec>)
 80057d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	ec51 0b19 	vmov	r0, r1, d9
 80057e2:	f7fb f97b 	bl	8000adc <__aeabi_dcmplt>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d050      	beq.n	800588c <_dtoa_r+0x244>
 80057ea:	9b00      	ldr	r3, [sp, #0]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	2300      	movs	r3, #0
 80057f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80057f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057f6:	1b5d      	subs	r5, r3, r5
 80057f8:	1e6b      	subs	r3, r5, #1
 80057fa:	9305      	str	r3, [sp, #20]
 80057fc:	bf45      	ittet	mi
 80057fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005802:	9304      	strmi	r3, [sp, #16]
 8005804:	2300      	movpl	r3, #0
 8005806:	2300      	movmi	r3, #0
 8005808:	bf4c      	ite	mi
 800580a:	9305      	strmi	r3, [sp, #20]
 800580c:	9304      	strpl	r3, [sp, #16]
 800580e:	9b00      	ldr	r3, [sp, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	db3d      	blt.n	8005890 <_dtoa_r+0x248>
 8005814:	9b05      	ldr	r3, [sp, #20]
 8005816:	9a00      	ldr	r2, [sp, #0]
 8005818:	920a      	str	r2, [sp, #40]	; 0x28
 800581a:	4413      	add	r3, r2
 800581c:	9305      	str	r3, [sp, #20]
 800581e:	2300      	movs	r3, #0
 8005820:	9307      	str	r3, [sp, #28]
 8005822:	9b06      	ldr	r3, [sp, #24]
 8005824:	2b09      	cmp	r3, #9
 8005826:	f200 8089 	bhi.w	800593c <_dtoa_r+0x2f4>
 800582a:	2b05      	cmp	r3, #5
 800582c:	bfc4      	itt	gt
 800582e:	3b04      	subgt	r3, #4
 8005830:	9306      	strgt	r3, [sp, #24]
 8005832:	9b06      	ldr	r3, [sp, #24]
 8005834:	f1a3 0302 	sub.w	r3, r3, #2
 8005838:	bfcc      	ite	gt
 800583a:	2500      	movgt	r5, #0
 800583c:	2501      	movle	r5, #1
 800583e:	2b03      	cmp	r3, #3
 8005840:	f200 8087 	bhi.w	8005952 <_dtoa_r+0x30a>
 8005844:	e8df f003 	tbb	[pc, r3]
 8005848:	59383a2d 	.word	0x59383a2d
 800584c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005850:	441d      	add	r5, r3
 8005852:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005856:	2b20      	cmp	r3, #32
 8005858:	bfc1      	itttt	gt
 800585a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800585e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005862:	fa0b f303 	lslgt.w	r3, fp, r3
 8005866:	fa26 f000 	lsrgt.w	r0, r6, r0
 800586a:	bfda      	itte	le
 800586c:	f1c3 0320 	rsble	r3, r3, #32
 8005870:	fa06 f003 	lslle.w	r0, r6, r3
 8005874:	4318      	orrgt	r0, r3
 8005876:	f7fa fe45 	bl	8000504 <__aeabi_ui2d>
 800587a:	2301      	movs	r3, #1
 800587c:	4606      	mov	r6, r0
 800587e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005882:	3d01      	subs	r5, #1
 8005884:	930e      	str	r3, [sp, #56]	; 0x38
 8005886:	e76a      	b.n	800575e <_dtoa_r+0x116>
 8005888:	2301      	movs	r3, #1
 800588a:	e7b2      	b.n	80057f2 <_dtoa_r+0x1aa>
 800588c:	900b      	str	r0, [sp, #44]	; 0x2c
 800588e:	e7b1      	b.n	80057f4 <_dtoa_r+0x1ac>
 8005890:	9b04      	ldr	r3, [sp, #16]
 8005892:	9a00      	ldr	r2, [sp, #0]
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	9304      	str	r3, [sp, #16]
 8005898:	4253      	negs	r3, r2
 800589a:	9307      	str	r3, [sp, #28]
 800589c:	2300      	movs	r3, #0
 800589e:	930a      	str	r3, [sp, #40]	; 0x28
 80058a0:	e7bf      	b.n	8005822 <_dtoa_r+0x1da>
 80058a2:	2300      	movs	r3, #0
 80058a4:	9308      	str	r3, [sp, #32]
 80058a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	dc55      	bgt.n	8005958 <_dtoa_r+0x310>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80058b2:	461a      	mov	r2, r3
 80058b4:	9209      	str	r2, [sp, #36]	; 0x24
 80058b6:	e00c      	b.n	80058d2 <_dtoa_r+0x28a>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e7f3      	b.n	80058a4 <_dtoa_r+0x25c>
 80058bc:	2300      	movs	r3, #0
 80058be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058c0:	9308      	str	r3, [sp, #32]
 80058c2:	9b00      	ldr	r3, [sp, #0]
 80058c4:	4413      	add	r3, r2
 80058c6:	9302      	str	r3, [sp, #8]
 80058c8:	3301      	adds	r3, #1
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	9303      	str	r3, [sp, #12]
 80058ce:	bfb8      	it	lt
 80058d0:	2301      	movlt	r3, #1
 80058d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80058d4:	2200      	movs	r2, #0
 80058d6:	6042      	str	r2, [r0, #4]
 80058d8:	2204      	movs	r2, #4
 80058da:	f102 0614 	add.w	r6, r2, #20
 80058de:	429e      	cmp	r6, r3
 80058e0:	6841      	ldr	r1, [r0, #4]
 80058e2:	d93d      	bls.n	8005960 <_dtoa_r+0x318>
 80058e4:	4620      	mov	r0, r4
 80058e6:	f001 f839 	bl	800695c <_Balloc>
 80058ea:	9001      	str	r0, [sp, #4]
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d13b      	bne.n	8005968 <_dtoa_r+0x320>
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <_dtoa_r+0x2f0>)
 80058f2:	4602      	mov	r2, r0
 80058f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80058f8:	e6c0      	b.n	800567c <_dtoa_r+0x34>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e7df      	b.n	80058be <_dtoa_r+0x276>
 80058fe:	bf00      	nop
 8005900:	636f4361 	.word	0x636f4361
 8005904:	3fd287a7 	.word	0x3fd287a7
 8005908:	8b60c8b3 	.word	0x8b60c8b3
 800590c:	3fc68a28 	.word	0x3fc68a28
 8005910:	509f79fb 	.word	0x509f79fb
 8005914:	3fd34413 	.word	0x3fd34413
 8005918:	0800856e 	.word	0x0800856e
 800591c:	08008585 	.word	0x08008585
 8005920:	7ff00000 	.word	0x7ff00000
 8005924:	0800856a 	.word	0x0800856a
 8005928:	08008561 	.word	0x08008561
 800592c:	080083e5 	.word	0x080083e5
 8005930:	3ff80000 	.word	0x3ff80000
 8005934:	080086f0 	.word	0x080086f0
 8005938:	080085e0 	.word	0x080085e0
 800593c:	2501      	movs	r5, #1
 800593e:	2300      	movs	r3, #0
 8005940:	9306      	str	r3, [sp, #24]
 8005942:	9508      	str	r5, [sp, #32]
 8005944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005948:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	2312      	movs	r3, #18
 8005950:	e7b0      	b.n	80058b4 <_dtoa_r+0x26c>
 8005952:	2301      	movs	r3, #1
 8005954:	9308      	str	r3, [sp, #32]
 8005956:	e7f5      	b.n	8005944 <_dtoa_r+0x2fc>
 8005958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800595a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800595e:	e7b8      	b.n	80058d2 <_dtoa_r+0x28a>
 8005960:	3101      	adds	r1, #1
 8005962:	6041      	str	r1, [r0, #4]
 8005964:	0052      	lsls	r2, r2, #1
 8005966:	e7b8      	b.n	80058da <_dtoa_r+0x292>
 8005968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800596a:	9a01      	ldr	r2, [sp, #4]
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	2b0e      	cmp	r3, #14
 8005972:	f200 809d 	bhi.w	8005ab0 <_dtoa_r+0x468>
 8005976:	2d00      	cmp	r5, #0
 8005978:	f000 809a 	beq.w	8005ab0 <_dtoa_r+0x468>
 800597c:	9b00      	ldr	r3, [sp, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	dd32      	ble.n	80059e8 <_dtoa_r+0x3a0>
 8005982:	4ab7      	ldr	r2, [pc, #732]	; (8005c60 <_dtoa_r+0x618>)
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800598c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005990:	9b00      	ldr	r3, [sp, #0]
 8005992:	05d8      	lsls	r0, r3, #23
 8005994:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005998:	d516      	bpl.n	80059c8 <_dtoa_r+0x380>
 800599a:	4bb2      	ldr	r3, [pc, #712]	; (8005c64 <_dtoa_r+0x61c>)
 800599c:	ec51 0b19 	vmov	r0, r1, d9
 80059a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059a4:	f7fa ff52 	bl	800084c <__aeabi_ddiv>
 80059a8:	f007 070f 	and.w	r7, r7, #15
 80059ac:	4682      	mov	sl, r0
 80059ae:	468b      	mov	fp, r1
 80059b0:	2503      	movs	r5, #3
 80059b2:	4eac      	ldr	r6, [pc, #688]	; (8005c64 <_dtoa_r+0x61c>)
 80059b4:	b957      	cbnz	r7, 80059cc <_dtoa_r+0x384>
 80059b6:	4642      	mov	r2, r8
 80059b8:	464b      	mov	r3, r9
 80059ba:	4650      	mov	r0, sl
 80059bc:	4659      	mov	r1, fp
 80059be:	f7fa ff45 	bl	800084c <__aeabi_ddiv>
 80059c2:	4682      	mov	sl, r0
 80059c4:	468b      	mov	fp, r1
 80059c6:	e028      	b.n	8005a1a <_dtoa_r+0x3d2>
 80059c8:	2502      	movs	r5, #2
 80059ca:	e7f2      	b.n	80059b2 <_dtoa_r+0x36a>
 80059cc:	07f9      	lsls	r1, r7, #31
 80059ce:	d508      	bpl.n	80059e2 <_dtoa_r+0x39a>
 80059d0:	4640      	mov	r0, r8
 80059d2:	4649      	mov	r1, r9
 80059d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059d8:	f7fa fe0e 	bl	80005f8 <__aeabi_dmul>
 80059dc:	3501      	adds	r5, #1
 80059de:	4680      	mov	r8, r0
 80059e0:	4689      	mov	r9, r1
 80059e2:	107f      	asrs	r7, r7, #1
 80059e4:	3608      	adds	r6, #8
 80059e6:	e7e5      	b.n	80059b4 <_dtoa_r+0x36c>
 80059e8:	f000 809b 	beq.w	8005b22 <_dtoa_r+0x4da>
 80059ec:	9b00      	ldr	r3, [sp, #0]
 80059ee:	4f9d      	ldr	r7, [pc, #628]	; (8005c64 <_dtoa_r+0x61c>)
 80059f0:	425e      	negs	r6, r3
 80059f2:	4b9b      	ldr	r3, [pc, #620]	; (8005c60 <_dtoa_r+0x618>)
 80059f4:	f006 020f 	and.w	r2, r6, #15
 80059f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	ec51 0b19 	vmov	r0, r1, d9
 8005a04:	f7fa fdf8 	bl	80005f8 <__aeabi_dmul>
 8005a08:	1136      	asrs	r6, r6, #4
 8005a0a:	4682      	mov	sl, r0
 8005a0c:	468b      	mov	fp, r1
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2502      	movs	r5, #2
 8005a12:	2e00      	cmp	r6, #0
 8005a14:	d17a      	bne.n	8005b0c <_dtoa_r+0x4c4>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1d3      	bne.n	80059c2 <_dtoa_r+0x37a>
 8005a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8082 	beq.w	8005b26 <_dtoa_r+0x4de>
 8005a22:	4b91      	ldr	r3, [pc, #580]	; (8005c68 <_dtoa_r+0x620>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	4650      	mov	r0, sl
 8005a28:	4659      	mov	r1, fp
 8005a2a:	f7fb f857 	bl	8000adc <__aeabi_dcmplt>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d079      	beq.n	8005b26 <_dtoa_r+0x4de>
 8005a32:	9b03      	ldr	r3, [sp, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d076      	beq.n	8005b26 <_dtoa_r+0x4de>
 8005a38:	9b02      	ldr	r3, [sp, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	dd36      	ble.n	8005aac <_dtoa_r+0x464>
 8005a3e:	9b00      	ldr	r3, [sp, #0]
 8005a40:	4650      	mov	r0, sl
 8005a42:	4659      	mov	r1, fp
 8005a44:	1e5f      	subs	r7, r3, #1
 8005a46:	2200      	movs	r2, #0
 8005a48:	4b88      	ldr	r3, [pc, #544]	; (8005c6c <_dtoa_r+0x624>)
 8005a4a:	f7fa fdd5 	bl	80005f8 <__aeabi_dmul>
 8005a4e:	9e02      	ldr	r6, [sp, #8]
 8005a50:	4682      	mov	sl, r0
 8005a52:	468b      	mov	fp, r1
 8005a54:	3501      	adds	r5, #1
 8005a56:	4628      	mov	r0, r5
 8005a58:	f7fa fd64 	bl	8000524 <__aeabi_i2d>
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	465b      	mov	r3, fp
 8005a60:	f7fa fdca 	bl	80005f8 <__aeabi_dmul>
 8005a64:	4b82      	ldr	r3, [pc, #520]	; (8005c70 <_dtoa_r+0x628>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	f7fa fc10 	bl	800028c <__adddf3>
 8005a6c:	46d0      	mov	r8, sl
 8005a6e:	46d9      	mov	r9, fp
 8005a70:	4682      	mov	sl, r0
 8005a72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005a76:	2e00      	cmp	r6, #0
 8005a78:	d158      	bne.n	8005b2c <_dtoa_r+0x4e4>
 8005a7a:	4b7e      	ldr	r3, [pc, #504]	; (8005c74 <_dtoa_r+0x62c>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4640      	mov	r0, r8
 8005a80:	4649      	mov	r1, r9
 8005a82:	f7fa fc01 	bl	8000288 <__aeabi_dsub>
 8005a86:	4652      	mov	r2, sl
 8005a88:	465b      	mov	r3, fp
 8005a8a:	4680      	mov	r8, r0
 8005a8c:	4689      	mov	r9, r1
 8005a8e:	f7fb f843 	bl	8000b18 <__aeabi_dcmpgt>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	f040 8295 	bne.w	8005fc2 <_dtoa_r+0x97a>
 8005a98:	4652      	mov	r2, sl
 8005a9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	f7fb f81b 	bl	8000adc <__aeabi_dcmplt>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f040 8289 	bne.w	8005fbe <_dtoa_r+0x976>
 8005aac:	ec5b ab19 	vmov	sl, fp, d9
 8005ab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f2c0 8148 	blt.w	8005d48 <_dtoa_r+0x700>
 8005ab8:	9a00      	ldr	r2, [sp, #0]
 8005aba:	2a0e      	cmp	r2, #14
 8005abc:	f300 8144 	bgt.w	8005d48 <_dtoa_r+0x700>
 8005ac0:	4b67      	ldr	r3, [pc, #412]	; (8005c60 <_dtoa_r+0x618>)
 8005ac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ac6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f280 80d5 	bge.w	8005c7c <_dtoa_r+0x634>
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f300 80d1 	bgt.w	8005c7c <_dtoa_r+0x634>
 8005ada:	f040 826f 	bne.w	8005fbc <_dtoa_r+0x974>
 8005ade:	4b65      	ldr	r3, [pc, #404]	; (8005c74 <_dtoa_r+0x62c>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	f7fa fd87 	bl	80005f8 <__aeabi_dmul>
 8005aea:	4652      	mov	r2, sl
 8005aec:	465b      	mov	r3, fp
 8005aee:	f7fb f809 	bl	8000b04 <__aeabi_dcmpge>
 8005af2:	9e03      	ldr	r6, [sp, #12]
 8005af4:	4637      	mov	r7, r6
 8005af6:	2800      	cmp	r0, #0
 8005af8:	f040 8245 	bne.w	8005f86 <_dtoa_r+0x93e>
 8005afc:	9d01      	ldr	r5, [sp, #4]
 8005afe:	2331      	movs	r3, #49	; 0x31
 8005b00:	f805 3b01 	strb.w	r3, [r5], #1
 8005b04:	9b00      	ldr	r3, [sp, #0]
 8005b06:	3301      	adds	r3, #1
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	e240      	b.n	8005f8e <_dtoa_r+0x946>
 8005b0c:	07f2      	lsls	r2, r6, #31
 8005b0e:	d505      	bpl.n	8005b1c <_dtoa_r+0x4d4>
 8005b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b14:	f7fa fd70 	bl	80005f8 <__aeabi_dmul>
 8005b18:	3501      	adds	r5, #1
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	1076      	asrs	r6, r6, #1
 8005b1e:	3708      	adds	r7, #8
 8005b20:	e777      	b.n	8005a12 <_dtoa_r+0x3ca>
 8005b22:	2502      	movs	r5, #2
 8005b24:	e779      	b.n	8005a1a <_dtoa_r+0x3d2>
 8005b26:	9f00      	ldr	r7, [sp, #0]
 8005b28:	9e03      	ldr	r6, [sp, #12]
 8005b2a:	e794      	b.n	8005a56 <_dtoa_r+0x40e>
 8005b2c:	9901      	ldr	r1, [sp, #4]
 8005b2e:	4b4c      	ldr	r3, [pc, #304]	; (8005c60 <_dtoa_r+0x618>)
 8005b30:	4431      	add	r1, r6
 8005b32:	910d      	str	r1, [sp, #52]	; 0x34
 8005b34:	9908      	ldr	r1, [sp, #32]
 8005b36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b3e:	2900      	cmp	r1, #0
 8005b40:	d043      	beq.n	8005bca <_dtoa_r+0x582>
 8005b42:	494d      	ldr	r1, [pc, #308]	; (8005c78 <_dtoa_r+0x630>)
 8005b44:	2000      	movs	r0, #0
 8005b46:	f7fa fe81 	bl	800084c <__aeabi_ddiv>
 8005b4a:	4652      	mov	r2, sl
 8005b4c:	465b      	mov	r3, fp
 8005b4e:	f7fa fb9b 	bl	8000288 <__aeabi_dsub>
 8005b52:	9d01      	ldr	r5, [sp, #4]
 8005b54:	4682      	mov	sl, r0
 8005b56:	468b      	mov	fp, r1
 8005b58:	4649      	mov	r1, r9
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	f7fa fffc 	bl	8000b58 <__aeabi_d2iz>
 8005b60:	4606      	mov	r6, r0
 8005b62:	f7fa fcdf 	bl	8000524 <__aeabi_i2d>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	f7fa fb8b 	bl	8000288 <__aeabi_dsub>
 8005b72:	3630      	adds	r6, #48	; 0x30
 8005b74:	f805 6b01 	strb.w	r6, [r5], #1
 8005b78:	4652      	mov	r2, sl
 8005b7a:	465b      	mov	r3, fp
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	4689      	mov	r9, r1
 8005b80:	f7fa ffac 	bl	8000adc <__aeabi_dcmplt>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d163      	bne.n	8005c50 <_dtoa_r+0x608>
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	4936      	ldr	r1, [pc, #216]	; (8005c68 <_dtoa_r+0x620>)
 8005b8e:	2000      	movs	r0, #0
 8005b90:	f7fa fb7a 	bl	8000288 <__aeabi_dsub>
 8005b94:	4652      	mov	r2, sl
 8005b96:	465b      	mov	r3, fp
 8005b98:	f7fa ffa0 	bl	8000adc <__aeabi_dcmplt>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	f040 80b5 	bne.w	8005d0c <_dtoa_r+0x6c4>
 8005ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ba4:	429d      	cmp	r5, r3
 8005ba6:	d081      	beq.n	8005aac <_dtoa_r+0x464>
 8005ba8:	4b30      	ldr	r3, [pc, #192]	; (8005c6c <_dtoa_r+0x624>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	4650      	mov	r0, sl
 8005bae:	4659      	mov	r1, fp
 8005bb0:	f7fa fd22 	bl	80005f8 <__aeabi_dmul>
 8005bb4:	4b2d      	ldr	r3, [pc, #180]	; (8005c6c <_dtoa_r+0x624>)
 8005bb6:	4682      	mov	sl, r0
 8005bb8:	468b      	mov	fp, r1
 8005bba:	4640      	mov	r0, r8
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f7fa fd1a 	bl	80005f8 <__aeabi_dmul>
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	4689      	mov	r9, r1
 8005bc8:	e7c6      	b.n	8005b58 <_dtoa_r+0x510>
 8005bca:	4650      	mov	r0, sl
 8005bcc:	4659      	mov	r1, fp
 8005bce:	f7fa fd13 	bl	80005f8 <__aeabi_dmul>
 8005bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd4:	9d01      	ldr	r5, [sp, #4]
 8005bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bd8:	4682      	mov	sl, r0
 8005bda:	468b      	mov	fp, r1
 8005bdc:	4649      	mov	r1, r9
 8005bde:	4640      	mov	r0, r8
 8005be0:	f7fa ffba 	bl	8000b58 <__aeabi_d2iz>
 8005be4:	4606      	mov	r6, r0
 8005be6:	f7fa fc9d 	bl	8000524 <__aeabi_i2d>
 8005bea:	3630      	adds	r6, #48	; 0x30
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	f7fa fb48 	bl	8000288 <__aeabi_dsub>
 8005bf8:	f805 6b01 	strb.w	r6, [r5], #1
 8005bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bfe:	429d      	cmp	r5, r3
 8005c00:	4680      	mov	r8, r0
 8005c02:	4689      	mov	r9, r1
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	d124      	bne.n	8005c54 <_dtoa_r+0x60c>
 8005c0a:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <_dtoa_r+0x630>)
 8005c0c:	4650      	mov	r0, sl
 8005c0e:	4659      	mov	r1, fp
 8005c10:	f7fa fb3c 	bl	800028c <__adddf3>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4640      	mov	r0, r8
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	f7fa ff7c 	bl	8000b18 <__aeabi_dcmpgt>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d173      	bne.n	8005d0c <_dtoa_r+0x6c4>
 8005c24:	4652      	mov	r2, sl
 8005c26:	465b      	mov	r3, fp
 8005c28:	4913      	ldr	r1, [pc, #76]	; (8005c78 <_dtoa_r+0x630>)
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	f7fa fb2c 	bl	8000288 <__aeabi_dsub>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4640      	mov	r0, r8
 8005c36:	4649      	mov	r1, r9
 8005c38:	f7fa ff50 	bl	8000adc <__aeabi_dcmplt>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f43f af35 	beq.w	8005aac <_dtoa_r+0x464>
 8005c42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c44:	1e6b      	subs	r3, r5, #1
 8005c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c4c:	2b30      	cmp	r3, #48	; 0x30
 8005c4e:	d0f8      	beq.n	8005c42 <_dtoa_r+0x5fa>
 8005c50:	9700      	str	r7, [sp, #0]
 8005c52:	e049      	b.n	8005ce8 <_dtoa_r+0x6a0>
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <_dtoa_r+0x624>)
 8005c56:	f7fa fccf 	bl	80005f8 <__aeabi_dmul>
 8005c5a:	4680      	mov	r8, r0
 8005c5c:	4689      	mov	r9, r1
 8005c5e:	e7bd      	b.n	8005bdc <_dtoa_r+0x594>
 8005c60:	080086f0 	.word	0x080086f0
 8005c64:	080086c8 	.word	0x080086c8
 8005c68:	3ff00000 	.word	0x3ff00000
 8005c6c:	40240000 	.word	0x40240000
 8005c70:	401c0000 	.word	0x401c0000
 8005c74:	40140000 	.word	0x40140000
 8005c78:	3fe00000 	.word	0x3fe00000
 8005c7c:	9d01      	ldr	r5, [sp, #4]
 8005c7e:	4656      	mov	r6, sl
 8005c80:	465f      	mov	r7, fp
 8005c82:	4642      	mov	r2, r8
 8005c84:	464b      	mov	r3, r9
 8005c86:	4630      	mov	r0, r6
 8005c88:	4639      	mov	r1, r7
 8005c8a:	f7fa fddf 	bl	800084c <__aeabi_ddiv>
 8005c8e:	f7fa ff63 	bl	8000b58 <__aeabi_d2iz>
 8005c92:	4682      	mov	sl, r0
 8005c94:	f7fa fc46 	bl	8000524 <__aeabi_i2d>
 8005c98:	4642      	mov	r2, r8
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	f7fa fcac 	bl	80005f8 <__aeabi_dmul>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005cac:	f7fa faec 	bl	8000288 <__aeabi_dsub>
 8005cb0:	f805 6b01 	strb.w	r6, [r5], #1
 8005cb4:	9e01      	ldr	r6, [sp, #4]
 8005cb6:	9f03      	ldr	r7, [sp, #12]
 8005cb8:	1bae      	subs	r6, r5, r6
 8005cba:	42b7      	cmp	r7, r6
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	d135      	bne.n	8005d2e <_dtoa_r+0x6e6>
 8005cc2:	f7fa fae3 	bl	800028c <__adddf3>
 8005cc6:	4642      	mov	r2, r8
 8005cc8:	464b      	mov	r3, r9
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460f      	mov	r7, r1
 8005cce:	f7fa ff23 	bl	8000b18 <__aeabi_dcmpgt>
 8005cd2:	b9d0      	cbnz	r0, 8005d0a <_dtoa_r+0x6c2>
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	4630      	mov	r0, r6
 8005cda:	4639      	mov	r1, r7
 8005cdc:	f7fa fef4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ce0:	b110      	cbz	r0, 8005ce8 <_dtoa_r+0x6a0>
 8005ce2:	f01a 0f01 	tst.w	sl, #1
 8005ce6:	d110      	bne.n	8005d0a <_dtoa_r+0x6c2>
 8005ce8:	4620      	mov	r0, r4
 8005cea:	ee18 1a10 	vmov	r1, s16
 8005cee:	f000 fe75 	bl	80069dc <_Bfree>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9800      	ldr	r0, [sp, #0]
 8005cf6:	702b      	strb	r3, [r5, #0]
 8005cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	6018      	str	r0, [r3, #0]
 8005cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f43f acf1 	beq.w	80056e8 <_dtoa_r+0xa0>
 8005d06:	601d      	str	r5, [r3, #0]
 8005d08:	e4ee      	b.n	80056e8 <_dtoa_r+0xa0>
 8005d0a:	9f00      	ldr	r7, [sp, #0]
 8005d0c:	462b      	mov	r3, r5
 8005d0e:	461d      	mov	r5, r3
 8005d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d14:	2a39      	cmp	r2, #57	; 0x39
 8005d16:	d106      	bne.n	8005d26 <_dtoa_r+0x6de>
 8005d18:	9a01      	ldr	r2, [sp, #4]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d1f7      	bne.n	8005d0e <_dtoa_r+0x6c6>
 8005d1e:	9901      	ldr	r1, [sp, #4]
 8005d20:	2230      	movs	r2, #48	; 0x30
 8005d22:	3701      	adds	r7, #1
 8005d24:	700a      	strb	r2, [r1, #0]
 8005d26:	781a      	ldrb	r2, [r3, #0]
 8005d28:	3201      	adds	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	e790      	b.n	8005c50 <_dtoa_r+0x608>
 8005d2e:	4ba6      	ldr	r3, [pc, #664]	; (8005fc8 <_dtoa_r+0x980>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	f7fa fc61 	bl	80005f8 <__aeabi_dmul>
 8005d36:	2200      	movs	r2, #0
 8005d38:	2300      	movs	r3, #0
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	460f      	mov	r7, r1
 8005d3e:	f7fa fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d09d      	beq.n	8005c82 <_dtoa_r+0x63a>
 8005d46:	e7cf      	b.n	8005ce8 <_dtoa_r+0x6a0>
 8005d48:	9a08      	ldr	r2, [sp, #32]
 8005d4a:	2a00      	cmp	r2, #0
 8005d4c:	f000 80d7 	beq.w	8005efe <_dtoa_r+0x8b6>
 8005d50:	9a06      	ldr	r2, [sp, #24]
 8005d52:	2a01      	cmp	r2, #1
 8005d54:	f300 80ba 	bgt.w	8005ecc <_dtoa_r+0x884>
 8005d58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d5a:	2a00      	cmp	r2, #0
 8005d5c:	f000 80b2 	beq.w	8005ec4 <_dtoa_r+0x87c>
 8005d60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d64:	9e07      	ldr	r6, [sp, #28]
 8005d66:	9d04      	ldr	r5, [sp, #16]
 8005d68:	9a04      	ldr	r2, [sp, #16]
 8005d6a:	441a      	add	r2, r3
 8005d6c:	9204      	str	r2, [sp, #16]
 8005d6e:	9a05      	ldr	r2, [sp, #20]
 8005d70:	2101      	movs	r1, #1
 8005d72:	441a      	add	r2, r3
 8005d74:	4620      	mov	r0, r4
 8005d76:	9205      	str	r2, [sp, #20]
 8005d78:	f000 ff32 	bl	8006be0 <__i2b>
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	2d00      	cmp	r5, #0
 8005d80:	dd0c      	ble.n	8005d9c <_dtoa_r+0x754>
 8005d82:	9b05      	ldr	r3, [sp, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	dd09      	ble.n	8005d9c <_dtoa_r+0x754>
 8005d88:	42ab      	cmp	r3, r5
 8005d8a:	9a04      	ldr	r2, [sp, #16]
 8005d8c:	bfa8      	it	ge
 8005d8e:	462b      	movge	r3, r5
 8005d90:	1ad2      	subs	r2, r2, r3
 8005d92:	9204      	str	r2, [sp, #16]
 8005d94:	9a05      	ldr	r2, [sp, #20]
 8005d96:	1aed      	subs	r5, r5, r3
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	9305      	str	r3, [sp, #20]
 8005d9c:	9b07      	ldr	r3, [sp, #28]
 8005d9e:	b31b      	cbz	r3, 8005de8 <_dtoa_r+0x7a0>
 8005da0:	9b08      	ldr	r3, [sp, #32]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80af 	beq.w	8005f06 <_dtoa_r+0x8be>
 8005da8:	2e00      	cmp	r6, #0
 8005daa:	dd13      	ble.n	8005dd4 <_dtoa_r+0x78c>
 8005dac:	4639      	mov	r1, r7
 8005dae:	4632      	mov	r2, r6
 8005db0:	4620      	mov	r0, r4
 8005db2:	f000 ffd5 	bl	8006d60 <__pow5mult>
 8005db6:	ee18 2a10 	vmov	r2, s16
 8005dba:	4601      	mov	r1, r0
 8005dbc:	4607      	mov	r7, r0
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f000 ff24 	bl	8006c0c <__multiply>
 8005dc4:	ee18 1a10 	vmov	r1, s16
 8005dc8:	4680      	mov	r8, r0
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 fe06 	bl	80069dc <_Bfree>
 8005dd0:	ee08 8a10 	vmov	s16, r8
 8005dd4:	9b07      	ldr	r3, [sp, #28]
 8005dd6:	1b9a      	subs	r2, r3, r6
 8005dd8:	d006      	beq.n	8005de8 <_dtoa_r+0x7a0>
 8005dda:	ee18 1a10 	vmov	r1, s16
 8005dde:	4620      	mov	r0, r4
 8005de0:	f000 ffbe 	bl	8006d60 <__pow5mult>
 8005de4:	ee08 0a10 	vmov	s16, r0
 8005de8:	2101      	movs	r1, #1
 8005dea:	4620      	mov	r0, r4
 8005dec:	f000 fef8 	bl	8006be0 <__i2b>
 8005df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	4606      	mov	r6, r0
 8005df6:	f340 8088 	ble.w	8005f0a <_dtoa_r+0x8c2>
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4601      	mov	r1, r0
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f000 ffae 	bl	8006d60 <__pow5mult>
 8005e04:	9b06      	ldr	r3, [sp, #24]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	4606      	mov	r6, r0
 8005e0a:	f340 8081 	ble.w	8005f10 <_dtoa_r+0x8c8>
 8005e0e:	f04f 0800 	mov.w	r8, #0
 8005e12:	6933      	ldr	r3, [r6, #16]
 8005e14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e18:	6918      	ldr	r0, [r3, #16]
 8005e1a:	f000 fe91 	bl	8006b40 <__hi0bits>
 8005e1e:	f1c0 0020 	rsb	r0, r0, #32
 8005e22:	9b05      	ldr	r3, [sp, #20]
 8005e24:	4418      	add	r0, r3
 8005e26:	f010 001f 	ands.w	r0, r0, #31
 8005e2a:	f000 8092 	beq.w	8005f52 <_dtoa_r+0x90a>
 8005e2e:	f1c0 0320 	rsb	r3, r0, #32
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	f340 808a 	ble.w	8005f4c <_dtoa_r+0x904>
 8005e38:	f1c0 001c 	rsb	r0, r0, #28
 8005e3c:	9b04      	ldr	r3, [sp, #16]
 8005e3e:	4403      	add	r3, r0
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	9b05      	ldr	r3, [sp, #20]
 8005e44:	4403      	add	r3, r0
 8005e46:	4405      	add	r5, r0
 8005e48:	9305      	str	r3, [sp, #20]
 8005e4a:	9b04      	ldr	r3, [sp, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	dd07      	ble.n	8005e60 <_dtoa_r+0x818>
 8005e50:	ee18 1a10 	vmov	r1, s16
 8005e54:	461a      	mov	r2, r3
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 ffdc 	bl	8006e14 <__lshift>
 8005e5c:	ee08 0a10 	vmov	s16, r0
 8005e60:	9b05      	ldr	r3, [sp, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dd05      	ble.n	8005e72 <_dtoa_r+0x82a>
 8005e66:	4631      	mov	r1, r6
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 ffd2 	bl	8006e14 <__lshift>
 8005e70:	4606      	mov	r6, r0
 8005e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d06e      	beq.n	8005f56 <_dtoa_r+0x90e>
 8005e78:	ee18 0a10 	vmov	r0, s16
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	f001 f839 	bl	8006ef4 <__mcmp>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	da67      	bge.n	8005f56 <_dtoa_r+0x90e>
 8005e86:	9b00      	ldr	r3, [sp, #0]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	ee18 1a10 	vmov	r1, s16
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	220a      	movs	r2, #10
 8005e92:	2300      	movs	r3, #0
 8005e94:	4620      	mov	r0, r4
 8005e96:	f000 fdc3 	bl	8006a20 <__multadd>
 8005e9a:	9b08      	ldr	r3, [sp, #32]
 8005e9c:	ee08 0a10 	vmov	s16, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 81b1 	beq.w	8006208 <_dtoa_r+0xbc0>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	220a      	movs	r2, #10
 8005eac:	4620      	mov	r0, r4
 8005eae:	f000 fdb7 	bl	8006a20 <__multadd>
 8005eb2:	9b02      	ldr	r3, [sp, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	f300 808e 	bgt.w	8005fd8 <_dtoa_r+0x990>
 8005ebc:	9b06      	ldr	r3, [sp, #24]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	dc51      	bgt.n	8005f66 <_dtoa_r+0x91e>
 8005ec2:	e089      	b.n	8005fd8 <_dtoa_r+0x990>
 8005ec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005eca:	e74b      	b.n	8005d64 <_dtoa_r+0x71c>
 8005ecc:	9b03      	ldr	r3, [sp, #12]
 8005ece:	1e5e      	subs	r6, r3, #1
 8005ed0:	9b07      	ldr	r3, [sp, #28]
 8005ed2:	42b3      	cmp	r3, r6
 8005ed4:	bfbf      	itttt	lt
 8005ed6:	9b07      	ldrlt	r3, [sp, #28]
 8005ed8:	9607      	strlt	r6, [sp, #28]
 8005eda:	1af2      	sublt	r2, r6, r3
 8005edc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ede:	bfb6      	itet	lt
 8005ee0:	189b      	addlt	r3, r3, r2
 8005ee2:	1b9e      	subge	r6, r3, r6
 8005ee4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005ee6:	9b03      	ldr	r3, [sp, #12]
 8005ee8:	bfb8      	it	lt
 8005eea:	2600      	movlt	r6, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfb7      	itett	lt
 8005ef0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005ef4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005ef8:	1a9d      	sublt	r5, r3, r2
 8005efa:	2300      	movlt	r3, #0
 8005efc:	e734      	b.n	8005d68 <_dtoa_r+0x720>
 8005efe:	9e07      	ldr	r6, [sp, #28]
 8005f00:	9d04      	ldr	r5, [sp, #16]
 8005f02:	9f08      	ldr	r7, [sp, #32]
 8005f04:	e73b      	b.n	8005d7e <_dtoa_r+0x736>
 8005f06:	9a07      	ldr	r2, [sp, #28]
 8005f08:	e767      	b.n	8005dda <_dtoa_r+0x792>
 8005f0a:	9b06      	ldr	r3, [sp, #24]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	dc18      	bgt.n	8005f42 <_dtoa_r+0x8fa>
 8005f10:	f1ba 0f00 	cmp.w	sl, #0
 8005f14:	d115      	bne.n	8005f42 <_dtoa_r+0x8fa>
 8005f16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f1a:	b993      	cbnz	r3, 8005f42 <_dtoa_r+0x8fa>
 8005f1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f20:	0d1b      	lsrs	r3, r3, #20
 8005f22:	051b      	lsls	r3, r3, #20
 8005f24:	b183      	cbz	r3, 8005f48 <_dtoa_r+0x900>
 8005f26:	9b04      	ldr	r3, [sp, #16]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	9304      	str	r3, [sp, #16]
 8005f2c:	9b05      	ldr	r3, [sp, #20]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	9305      	str	r3, [sp, #20]
 8005f32:	f04f 0801 	mov.w	r8, #1
 8005f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f47f af6a 	bne.w	8005e12 <_dtoa_r+0x7ca>
 8005f3e:	2001      	movs	r0, #1
 8005f40:	e76f      	b.n	8005e22 <_dtoa_r+0x7da>
 8005f42:	f04f 0800 	mov.w	r8, #0
 8005f46:	e7f6      	b.n	8005f36 <_dtoa_r+0x8ee>
 8005f48:	4698      	mov	r8, r3
 8005f4a:	e7f4      	b.n	8005f36 <_dtoa_r+0x8ee>
 8005f4c:	f43f af7d 	beq.w	8005e4a <_dtoa_r+0x802>
 8005f50:	4618      	mov	r0, r3
 8005f52:	301c      	adds	r0, #28
 8005f54:	e772      	b.n	8005e3c <_dtoa_r+0x7f4>
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dc37      	bgt.n	8005fcc <_dtoa_r+0x984>
 8005f5c:	9b06      	ldr	r3, [sp, #24]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	dd34      	ble.n	8005fcc <_dtoa_r+0x984>
 8005f62:	9b03      	ldr	r3, [sp, #12]
 8005f64:	9302      	str	r3, [sp, #8]
 8005f66:	9b02      	ldr	r3, [sp, #8]
 8005f68:	b96b      	cbnz	r3, 8005f86 <_dtoa_r+0x93e>
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	2205      	movs	r2, #5
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 fd56 	bl	8006a20 <__multadd>
 8005f74:	4601      	mov	r1, r0
 8005f76:	4606      	mov	r6, r0
 8005f78:	ee18 0a10 	vmov	r0, s16
 8005f7c:	f000 ffba 	bl	8006ef4 <__mcmp>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	f73f adbb 	bgt.w	8005afc <_dtoa_r+0x4b4>
 8005f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f88:	9d01      	ldr	r5, [sp, #4]
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	f04f 0800 	mov.w	r8, #0
 8005f92:	4631      	mov	r1, r6
 8005f94:	4620      	mov	r0, r4
 8005f96:	f000 fd21 	bl	80069dc <_Bfree>
 8005f9a:	2f00      	cmp	r7, #0
 8005f9c:	f43f aea4 	beq.w	8005ce8 <_dtoa_r+0x6a0>
 8005fa0:	f1b8 0f00 	cmp.w	r8, #0
 8005fa4:	d005      	beq.n	8005fb2 <_dtoa_r+0x96a>
 8005fa6:	45b8      	cmp	r8, r7
 8005fa8:	d003      	beq.n	8005fb2 <_dtoa_r+0x96a>
 8005faa:	4641      	mov	r1, r8
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 fd15 	bl	80069dc <_Bfree>
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 fd11 	bl	80069dc <_Bfree>
 8005fba:	e695      	b.n	8005ce8 <_dtoa_r+0x6a0>
 8005fbc:	2600      	movs	r6, #0
 8005fbe:	4637      	mov	r7, r6
 8005fc0:	e7e1      	b.n	8005f86 <_dtoa_r+0x93e>
 8005fc2:	9700      	str	r7, [sp, #0]
 8005fc4:	4637      	mov	r7, r6
 8005fc6:	e599      	b.n	8005afc <_dtoa_r+0x4b4>
 8005fc8:	40240000 	.word	0x40240000
 8005fcc:	9b08      	ldr	r3, [sp, #32]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80ca 	beq.w	8006168 <_dtoa_r+0xb20>
 8005fd4:	9b03      	ldr	r3, [sp, #12]
 8005fd6:	9302      	str	r3, [sp, #8]
 8005fd8:	2d00      	cmp	r5, #0
 8005fda:	dd05      	ble.n	8005fe8 <_dtoa_r+0x9a0>
 8005fdc:	4639      	mov	r1, r7
 8005fde:	462a      	mov	r2, r5
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 ff17 	bl	8006e14 <__lshift>
 8005fe6:	4607      	mov	r7, r0
 8005fe8:	f1b8 0f00 	cmp.w	r8, #0
 8005fec:	d05b      	beq.n	80060a6 <_dtoa_r+0xa5e>
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f000 fcb3 	bl	800695c <_Balloc>
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	b928      	cbnz	r0, 8006006 <_dtoa_r+0x9be>
 8005ffa:	4b87      	ldr	r3, [pc, #540]	; (8006218 <_dtoa_r+0xbd0>)
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006002:	f7ff bb3b 	b.w	800567c <_dtoa_r+0x34>
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	3202      	adds	r2, #2
 800600a:	0092      	lsls	r2, r2, #2
 800600c:	f107 010c 	add.w	r1, r7, #12
 8006010:	300c      	adds	r0, #12
 8006012:	f000 fc95 	bl	8006940 <memcpy>
 8006016:	2201      	movs	r2, #1
 8006018:	4629      	mov	r1, r5
 800601a:	4620      	mov	r0, r4
 800601c:	f000 fefa 	bl	8006e14 <__lshift>
 8006020:	9b01      	ldr	r3, [sp, #4]
 8006022:	f103 0901 	add.w	r9, r3, #1
 8006026:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800602a:	4413      	add	r3, r2
 800602c:	9305      	str	r3, [sp, #20]
 800602e:	f00a 0301 	and.w	r3, sl, #1
 8006032:	46b8      	mov	r8, r7
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	4607      	mov	r7, r0
 8006038:	4631      	mov	r1, r6
 800603a:	ee18 0a10 	vmov	r0, s16
 800603e:	f7ff fa77 	bl	8005530 <quorem>
 8006042:	4641      	mov	r1, r8
 8006044:	9002      	str	r0, [sp, #8]
 8006046:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800604a:	ee18 0a10 	vmov	r0, s16
 800604e:	f000 ff51 	bl	8006ef4 <__mcmp>
 8006052:	463a      	mov	r2, r7
 8006054:	9003      	str	r0, [sp, #12]
 8006056:	4631      	mov	r1, r6
 8006058:	4620      	mov	r0, r4
 800605a:	f000 ff67 	bl	8006f2c <__mdiff>
 800605e:	68c2      	ldr	r2, [r0, #12]
 8006060:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006064:	4605      	mov	r5, r0
 8006066:	bb02      	cbnz	r2, 80060aa <_dtoa_r+0xa62>
 8006068:	4601      	mov	r1, r0
 800606a:	ee18 0a10 	vmov	r0, s16
 800606e:	f000 ff41 	bl	8006ef4 <__mcmp>
 8006072:	4602      	mov	r2, r0
 8006074:	4629      	mov	r1, r5
 8006076:	4620      	mov	r0, r4
 8006078:	9207      	str	r2, [sp, #28]
 800607a:	f000 fcaf 	bl	80069dc <_Bfree>
 800607e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006082:	ea43 0102 	orr.w	r1, r3, r2
 8006086:	9b04      	ldr	r3, [sp, #16]
 8006088:	430b      	orrs	r3, r1
 800608a:	464d      	mov	r5, r9
 800608c:	d10f      	bne.n	80060ae <_dtoa_r+0xa66>
 800608e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006092:	d02a      	beq.n	80060ea <_dtoa_r+0xaa2>
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	dd02      	ble.n	80060a0 <_dtoa_r+0xa58>
 800609a:	9b02      	ldr	r3, [sp, #8]
 800609c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80060a0:	f88b a000 	strb.w	sl, [fp]
 80060a4:	e775      	b.n	8005f92 <_dtoa_r+0x94a>
 80060a6:	4638      	mov	r0, r7
 80060a8:	e7ba      	b.n	8006020 <_dtoa_r+0x9d8>
 80060aa:	2201      	movs	r2, #1
 80060ac:	e7e2      	b.n	8006074 <_dtoa_r+0xa2c>
 80060ae:	9b03      	ldr	r3, [sp, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	db04      	blt.n	80060be <_dtoa_r+0xa76>
 80060b4:	9906      	ldr	r1, [sp, #24]
 80060b6:	430b      	orrs	r3, r1
 80060b8:	9904      	ldr	r1, [sp, #16]
 80060ba:	430b      	orrs	r3, r1
 80060bc:	d122      	bne.n	8006104 <_dtoa_r+0xabc>
 80060be:	2a00      	cmp	r2, #0
 80060c0:	ddee      	ble.n	80060a0 <_dtoa_r+0xa58>
 80060c2:	ee18 1a10 	vmov	r1, s16
 80060c6:	2201      	movs	r2, #1
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fea3 	bl	8006e14 <__lshift>
 80060ce:	4631      	mov	r1, r6
 80060d0:	ee08 0a10 	vmov	s16, r0
 80060d4:	f000 ff0e 	bl	8006ef4 <__mcmp>
 80060d8:	2800      	cmp	r0, #0
 80060da:	dc03      	bgt.n	80060e4 <_dtoa_r+0xa9c>
 80060dc:	d1e0      	bne.n	80060a0 <_dtoa_r+0xa58>
 80060de:	f01a 0f01 	tst.w	sl, #1
 80060e2:	d0dd      	beq.n	80060a0 <_dtoa_r+0xa58>
 80060e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060e8:	d1d7      	bne.n	800609a <_dtoa_r+0xa52>
 80060ea:	2339      	movs	r3, #57	; 0x39
 80060ec:	f88b 3000 	strb.w	r3, [fp]
 80060f0:	462b      	mov	r3, r5
 80060f2:	461d      	mov	r5, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060fa:	2a39      	cmp	r2, #57	; 0x39
 80060fc:	d071      	beq.n	80061e2 <_dtoa_r+0xb9a>
 80060fe:	3201      	adds	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	e746      	b.n	8005f92 <_dtoa_r+0x94a>
 8006104:	2a00      	cmp	r2, #0
 8006106:	dd07      	ble.n	8006118 <_dtoa_r+0xad0>
 8006108:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800610c:	d0ed      	beq.n	80060ea <_dtoa_r+0xaa2>
 800610e:	f10a 0301 	add.w	r3, sl, #1
 8006112:	f88b 3000 	strb.w	r3, [fp]
 8006116:	e73c      	b.n	8005f92 <_dtoa_r+0x94a>
 8006118:	9b05      	ldr	r3, [sp, #20]
 800611a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800611e:	4599      	cmp	r9, r3
 8006120:	d047      	beq.n	80061b2 <_dtoa_r+0xb6a>
 8006122:	ee18 1a10 	vmov	r1, s16
 8006126:	2300      	movs	r3, #0
 8006128:	220a      	movs	r2, #10
 800612a:	4620      	mov	r0, r4
 800612c:	f000 fc78 	bl	8006a20 <__multadd>
 8006130:	45b8      	cmp	r8, r7
 8006132:	ee08 0a10 	vmov	s16, r0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	f04f 020a 	mov.w	r2, #10
 800613e:	4641      	mov	r1, r8
 8006140:	4620      	mov	r0, r4
 8006142:	d106      	bne.n	8006152 <_dtoa_r+0xb0a>
 8006144:	f000 fc6c 	bl	8006a20 <__multadd>
 8006148:	4680      	mov	r8, r0
 800614a:	4607      	mov	r7, r0
 800614c:	f109 0901 	add.w	r9, r9, #1
 8006150:	e772      	b.n	8006038 <_dtoa_r+0x9f0>
 8006152:	f000 fc65 	bl	8006a20 <__multadd>
 8006156:	4639      	mov	r1, r7
 8006158:	4680      	mov	r8, r0
 800615a:	2300      	movs	r3, #0
 800615c:	220a      	movs	r2, #10
 800615e:	4620      	mov	r0, r4
 8006160:	f000 fc5e 	bl	8006a20 <__multadd>
 8006164:	4607      	mov	r7, r0
 8006166:	e7f1      	b.n	800614c <_dtoa_r+0xb04>
 8006168:	9b03      	ldr	r3, [sp, #12]
 800616a:	9302      	str	r3, [sp, #8]
 800616c:	9d01      	ldr	r5, [sp, #4]
 800616e:	ee18 0a10 	vmov	r0, s16
 8006172:	4631      	mov	r1, r6
 8006174:	f7ff f9dc 	bl	8005530 <quorem>
 8006178:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800617c:	9b01      	ldr	r3, [sp, #4]
 800617e:	f805 ab01 	strb.w	sl, [r5], #1
 8006182:	1aea      	subs	r2, r5, r3
 8006184:	9b02      	ldr	r3, [sp, #8]
 8006186:	4293      	cmp	r3, r2
 8006188:	dd09      	ble.n	800619e <_dtoa_r+0xb56>
 800618a:	ee18 1a10 	vmov	r1, s16
 800618e:	2300      	movs	r3, #0
 8006190:	220a      	movs	r2, #10
 8006192:	4620      	mov	r0, r4
 8006194:	f000 fc44 	bl	8006a20 <__multadd>
 8006198:	ee08 0a10 	vmov	s16, r0
 800619c:	e7e7      	b.n	800616e <_dtoa_r+0xb26>
 800619e:	9b02      	ldr	r3, [sp, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bfc8      	it	gt
 80061a4:	461d      	movgt	r5, r3
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	bfd8      	it	le
 80061aa:	2501      	movle	r5, #1
 80061ac:	441d      	add	r5, r3
 80061ae:	f04f 0800 	mov.w	r8, #0
 80061b2:	ee18 1a10 	vmov	r1, s16
 80061b6:	2201      	movs	r2, #1
 80061b8:	4620      	mov	r0, r4
 80061ba:	f000 fe2b 	bl	8006e14 <__lshift>
 80061be:	4631      	mov	r1, r6
 80061c0:	ee08 0a10 	vmov	s16, r0
 80061c4:	f000 fe96 	bl	8006ef4 <__mcmp>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	dc91      	bgt.n	80060f0 <_dtoa_r+0xaa8>
 80061cc:	d102      	bne.n	80061d4 <_dtoa_r+0xb8c>
 80061ce:	f01a 0f01 	tst.w	sl, #1
 80061d2:	d18d      	bne.n	80060f0 <_dtoa_r+0xaa8>
 80061d4:	462b      	mov	r3, r5
 80061d6:	461d      	mov	r5, r3
 80061d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061dc:	2a30      	cmp	r2, #48	; 0x30
 80061de:	d0fa      	beq.n	80061d6 <_dtoa_r+0xb8e>
 80061e0:	e6d7      	b.n	8005f92 <_dtoa_r+0x94a>
 80061e2:	9a01      	ldr	r2, [sp, #4]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d184      	bne.n	80060f2 <_dtoa_r+0xaaa>
 80061e8:	9b00      	ldr	r3, [sp, #0]
 80061ea:	3301      	adds	r3, #1
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	2331      	movs	r3, #49	; 0x31
 80061f0:	7013      	strb	r3, [r2, #0]
 80061f2:	e6ce      	b.n	8005f92 <_dtoa_r+0x94a>
 80061f4:	4b09      	ldr	r3, [pc, #36]	; (800621c <_dtoa_r+0xbd4>)
 80061f6:	f7ff ba95 	b.w	8005724 <_dtoa_r+0xdc>
 80061fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f47f aa6e 	bne.w	80056de <_dtoa_r+0x96>
 8006202:	4b07      	ldr	r3, [pc, #28]	; (8006220 <_dtoa_r+0xbd8>)
 8006204:	f7ff ba8e 	b.w	8005724 <_dtoa_r+0xdc>
 8006208:	9b02      	ldr	r3, [sp, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	dcae      	bgt.n	800616c <_dtoa_r+0xb24>
 800620e:	9b06      	ldr	r3, [sp, #24]
 8006210:	2b02      	cmp	r3, #2
 8006212:	f73f aea8 	bgt.w	8005f66 <_dtoa_r+0x91e>
 8006216:	e7a9      	b.n	800616c <_dtoa_r+0xb24>
 8006218:	080085e0 	.word	0x080085e0
 800621c:	080083e4 	.word	0x080083e4
 8006220:	08008561 	.word	0x08008561

08006224 <rshift>:
 8006224:	6903      	ldr	r3, [r0, #16]
 8006226:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800622a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800622e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006232:	f100 0414 	add.w	r4, r0, #20
 8006236:	dd45      	ble.n	80062c4 <rshift+0xa0>
 8006238:	f011 011f 	ands.w	r1, r1, #31
 800623c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006240:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006244:	d10c      	bne.n	8006260 <rshift+0x3c>
 8006246:	f100 0710 	add.w	r7, r0, #16
 800624a:	4629      	mov	r1, r5
 800624c:	42b1      	cmp	r1, r6
 800624e:	d334      	bcc.n	80062ba <rshift+0x96>
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	1eea      	subs	r2, r5, #3
 8006256:	4296      	cmp	r6, r2
 8006258:	bf38      	it	cc
 800625a:	2300      	movcc	r3, #0
 800625c:	4423      	add	r3, r4
 800625e:	e015      	b.n	800628c <rshift+0x68>
 8006260:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006264:	f1c1 0820 	rsb	r8, r1, #32
 8006268:	40cf      	lsrs	r7, r1
 800626a:	f105 0e04 	add.w	lr, r5, #4
 800626e:	46a1      	mov	r9, r4
 8006270:	4576      	cmp	r6, lr
 8006272:	46f4      	mov	ip, lr
 8006274:	d815      	bhi.n	80062a2 <rshift+0x7e>
 8006276:	1a9a      	subs	r2, r3, r2
 8006278:	0092      	lsls	r2, r2, #2
 800627a:	3a04      	subs	r2, #4
 800627c:	3501      	adds	r5, #1
 800627e:	42ae      	cmp	r6, r5
 8006280:	bf38      	it	cc
 8006282:	2200      	movcc	r2, #0
 8006284:	18a3      	adds	r3, r4, r2
 8006286:	50a7      	str	r7, [r4, r2]
 8006288:	b107      	cbz	r7, 800628c <rshift+0x68>
 800628a:	3304      	adds	r3, #4
 800628c:	1b1a      	subs	r2, r3, r4
 800628e:	42a3      	cmp	r3, r4
 8006290:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006294:	bf08      	it	eq
 8006296:	2300      	moveq	r3, #0
 8006298:	6102      	str	r2, [r0, #16]
 800629a:	bf08      	it	eq
 800629c:	6143      	streq	r3, [r0, #20]
 800629e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062a2:	f8dc c000 	ldr.w	ip, [ip]
 80062a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80062aa:	ea4c 0707 	orr.w	r7, ip, r7
 80062ae:	f849 7b04 	str.w	r7, [r9], #4
 80062b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80062b6:	40cf      	lsrs	r7, r1
 80062b8:	e7da      	b.n	8006270 <rshift+0x4c>
 80062ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80062be:	f847 cf04 	str.w	ip, [r7, #4]!
 80062c2:	e7c3      	b.n	800624c <rshift+0x28>
 80062c4:	4623      	mov	r3, r4
 80062c6:	e7e1      	b.n	800628c <rshift+0x68>

080062c8 <__hexdig_fun>:
 80062c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80062cc:	2b09      	cmp	r3, #9
 80062ce:	d802      	bhi.n	80062d6 <__hexdig_fun+0xe>
 80062d0:	3820      	subs	r0, #32
 80062d2:	b2c0      	uxtb	r0, r0
 80062d4:	4770      	bx	lr
 80062d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d801      	bhi.n	80062e2 <__hexdig_fun+0x1a>
 80062de:	3847      	subs	r0, #71	; 0x47
 80062e0:	e7f7      	b.n	80062d2 <__hexdig_fun+0xa>
 80062e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80062e6:	2b05      	cmp	r3, #5
 80062e8:	d801      	bhi.n	80062ee <__hexdig_fun+0x26>
 80062ea:	3827      	subs	r0, #39	; 0x27
 80062ec:	e7f1      	b.n	80062d2 <__hexdig_fun+0xa>
 80062ee:	2000      	movs	r0, #0
 80062f0:	4770      	bx	lr
	...

080062f4 <__gethex>:
 80062f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f8:	ed2d 8b02 	vpush	{d8}
 80062fc:	b089      	sub	sp, #36	; 0x24
 80062fe:	ee08 0a10 	vmov	s16, r0
 8006302:	9304      	str	r3, [sp, #16]
 8006304:	4bb4      	ldr	r3, [pc, #720]	; (80065d8 <__gethex+0x2e4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	4618      	mov	r0, r3
 800630c:	468b      	mov	fp, r1
 800630e:	4690      	mov	r8, r2
 8006310:	f7f9 ff5e 	bl	80001d0 <strlen>
 8006314:	9b01      	ldr	r3, [sp, #4]
 8006316:	f8db 2000 	ldr.w	r2, [fp]
 800631a:	4403      	add	r3, r0
 800631c:	4682      	mov	sl, r0
 800631e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006322:	9305      	str	r3, [sp, #20]
 8006324:	1c93      	adds	r3, r2, #2
 8006326:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800632a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800632e:	32fe      	adds	r2, #254	; 0xfe
 8006330:	18d1      	adds	r1, r2, r3
 8006332:	461f      	mov	r7, r3
 8006334:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006338:	9100      	str	r1, [sp, #0]
 800633a:	2830      	cmp	r0, #48	; 0x30
 800633c:	d0f8      	beq.n	8006330 <__gethex+0x3c>
 800633e:	f7ff ffc3 	bl	80062c8 <__hexdig_fun>
 8006342:	4604      	mov	r4, r0
 8006344:	2800      	cmp	r0, #0
 8006346:	d13a      	bne.n	80063be <__gethex+0xca>
 8006348:	9901      	ldr	r1, [sp, #4]
 800634a:	4652      	mov	r2, sl
 800634c:	4638      	mov	r0, r7
 800634e:	f001 fa33 	bl	80077b8 <strncmp>
 8006352:	4605      	mov	r5, r0
 8006354:	2800      	cmp	r0, #0
 8006356:	d168      	bne.n	800642a <__gethex+0x136>
 8006358:	f817 000a 	ldrb.w	r0, [r7, sl]
 800635c:	eb07 060a 	add.w	r6, r7, sl
 8006360:	f7ff ffb2 	bl	80062c8 <__hexdig_fun>
 8006364:	2800      	cmp	r0, #0
 8006366:	d062      	beq.n	800642e <__gethex+0x13a>
 8006368:	4633      	mov	r3, r6
 800636a:	7818      	ldrb	r0, [r3, #0]
 800636c:	2830      	cmp	r0, #48	; 0x30
 800636e:	461f      	mov	r7, r3
 8006370:	f103 0301 	add.w	r3, r3, #1
 8006374:	d0f9      	beq.n	800636a <__gethex+0x76>
 8006376:	f7ff ffa7 	bl	80062c8 <__hexdig_fun>
 800637a:	2301      	movs	r3, #1
 800637c:	fab0 f480 	clz	r4, r0
 8006380:	0964      	lsrs	r4, r4, #5
 8006382:	4635      	mov	r5, r6
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	463a      	mov	r2, r7
 8006388:	4616      	mov	r6, r2
 800638a:	3201      	adds	r2, #1
 800638c:	7830      	ldrb	r0, [r6, #0]
 800638e:	f7ff ff9b 	bl	80062c8 <__hexdig_fun>
 8006392:	2800      	cmp	r0, #0
 8006394:	d1f8      	bne.n	8006388 <__gethex+0x94>
 8006396:	9901      	ldr	r1, [sp, #4]
 8006398:	4652      	mov	r2, sl
 800639a:	4630      	mov	r0, r6
 800639c:	f001 fa0c 	bl	80077b8 <strncmp>
 80063a0:	b980      	cbnz	r0, 80063c4 <__gethex+0xd0>
 80063a2:	b94d      	cbnz	r5, 80063b8 <__gethex+0xc4>
 80063a4:	eb06 050a 	add.w	r5, r6, sl
 80063a8:	462a      	mov	r2, r5
 80063aa:	4616      	mov	r6, r2
 80063ac:	3201      	adds	r2, #1
 80063ae:	7830      	ldrb	r0, [r6, #0]
 80063b0:	f7ff ff8a 	bl	80062c8 <__hexdig_fun>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d1f8      	bne.n	80063aa <__gethex+0xb6>
 80063b8:	1bad      	subs	r5, r5, r6
 80063ba:	00ad      	lsls	r5, r5, #2
 80063bc:	e004      	b.n	80063c8 <__gethex+0xd4>
 80063be:	2400      	movs	r4, #0
 80063c0:	4625      	mov	r5, r4
 80063c2:	e7e0      	b.n	8006386 <__gethex+0x92>
 80063c4:	2d00      	cmp	r5, #0
 80063c6:	d1f7      	bne.n	80063b8 <__gethex+0xc4>
 80063c8:	7833      	ldrb	r3, [r6, #0]
 80063ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80063ce:	2b50      	cmp	r3, #80	; 0x50
 80063d0:	d13b      	bne.n	800644a <__gethex+0x156>
 80063d2:	7873      	ldrb	r3, [r6, #1]
 80063d4:	2b2b      	cmp	r3, #43	; 0x2b
 80063d6:	d02c      	beq.n	8006432 <__gethex+0x13e>
 80063d8:	2b2d      	cmp	r3, #45	; 0x2d
 80063da:	d02e      	beq.n	800643a <__gethex+0x146>
 80063dc:	1c71      	adds	r1, r6, #1
 80063de:	f04f 0900 	mov.w	r9, #0
 80063e2:	7808      	ldrb	r0, [r1, #0]
 80063e4:	f7ff ff70 	bl	80062c8 <__hexdig_fun>
 80063e8:	1e43      	subs	r3, r0, #1
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b18      	cmp	r3, #24
 80063ee:	d82c      	bhi.n	800644a <__gethex+0x156>
 80063f0:	f1a0 0210 	sub.w	r2, r0, #16
 80063f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80063f8:	f7ff ff66 	bl	80062c8 <__hexdig_fun>
 80063fc:	1e43      	subs	r3, r0, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b18      	cmp	r3, #24
 8006402:	d91d      	bls.n	8006440 <__gethex+0x14c>
 8006404:	f1b9 0f00 	cmp.w	r9, #0
 8006408:	d000      	beq.n	800640c <__gethex+0x118>
 800640a:	4252      	negs	r2, r2
 800640c:	4415      	add	r5, r2
 800640e:	f8cb 1000 	str.w	r1, [fp]
 8006412:	b1e4      	cbz	r4, 800644e <__gethex+0x15a>
 8006414:	9b00      	ldr	r3, [sp, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	bf14      	ite	ne
 800641a:	2700      	movne	r7, #0
 800641c:	2706      	moveq	r7, #6
 800641e:	4638      	mov	r0, r7
 8006420:	b009      	add	sp, #36	; 0x24
 8006422:	ecbd 8b02 	vpop	{d8}
 8006426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642a:	463e      	mov	r6, r7
 800642c:	4625      	mov	r5, r4
 800642e:	2401      	movs	r4, #1
 8006430:	e7ca      	b.n	80063c8 <__gethex+0xd4>
 8006432:	f04f 0900 	mov.w	r9, #0
 8006436:	1cb1      	adds	r1, r6, #2
 8006438:	e7d3      	b.n	80063e2 <__gethex+0xee>
 800643a:	f04f 0901 	mov.w	r9, #1
 800643e:	e7fa      	b.n	8006436 <__gethex+0x142>
 8006440:	230a      	movs	r3, #10
 8006442:	fb03 0202 	mla	r2, r3, r2, r0
 8006446:	3a10      	subs	r2, #16
 8006448:	e7d4      	b.n	80063f4 <__gethex+0x100>
 800644a:	4631      	mov	r1, r6
 800644c:	e7df      	b.n	800640e <__gethex+0x11a>
 800644e:	1bf3      	subs	r3, r6, r7
 8006450:	3b01      	subs	r3, #1
 8006452:	4621      	mov	r1, r4
 8006454:	2b07      	cmp	r3, #7
 8006456:	dc0b      	bgt.n	8006470 <__gethex+0x17c>
 8006458:	ee18 0a10 	vmov	r0, s16
 800645c:	f000 fa7e 	bl	800695c <_Balloc>
 8006460:	4604      	mov	r4, r0
 8006462:	b940      	cbnz	r0, 8006476 <__gethex+0x182>
 8006464:	4b5d      	ldr	r3, [pc, #372]	; (80065dc <__gethex+0x2e8>)
 8006466:	4602      	mov	r2, r0
 8006468:	21de      	movs	r1, #222	; 0xde
 800646a:	485d      	ldr	r0, [pc, #372]	; (80065e0 <__gethex+0x2ec>)
 800646c:	f001 f9c6 	bl	80077fc <__assert_func>
 8006470:	3101      	adds	r1, #1
 8006472:	105b      	asrs	r3, r3, #1
 8006474:	e7ee      	b.n	8006454 <__gethex+0x160>
 8006476:	f100 0914 	add.w	r9, r0, #20
 800647a:	f04f 0b00 	mov.w	fp, #0
 800647e:	f1ca 0301 	rsb	r3, sl, #1
 8006482:	f8cd 9008 	str.w	r9, [sp, #8]
 8006486:	f8cd b000 	str.w	fp, [sp]
 800648a:	9306      	str	r3, [sp, #24]
 800648c:	42b7      	cmp	r7, r6
 800648e:	d340      	bcc.n	8006512 <__gethex+0x21e>
 8006490:	9802      	ldr	r0, [sp, #8]
 8006492:	9b00      	ldr	r3, [sp, #0]
 8006494:	f840 3b04 	str.w	r3, [r0], #4
 8006498:	eba0 0009 	sub.w	r0, r0, r9
 800649c:	1080      	asrs	r0, r0, #2
 800649e:	0146      	lsls	r6, r0, #5
 80064a0:	6120      	str	r0, [r4, #16]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fb4c 	bl	8006b40 <__hi0bits>
 80064a8:	1a30      	subs	r0, r6, r0
 80064aa:	f8d8 6000 	ldr.w	r6, [r8]
 80064ae:	42b0      	cmp	r0, r6
 80064b0:	dd63      	ble.n	800657a <__gethex+0x286>
 80064b2:	1b87      	subs	r7, r0, r6
 80064b4:	4639      	mov	r1, r7
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 fef0 	bl	800729c <__any_on>
 80064bc:	4682      	mov	sl, r0
 80064be:	b1a8      	cbz	r0, 80064ec <__gethex+0x1f8>
 80064c0:	1e7b      	subs	r3, r7, #1
 80064c2:	1159      	asrs	r1, r3, #5
 80064c4:	f003 021f 	and.w	r2, r3, #31
 80064c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80064cc:	f04f 0a01 	mov.w	sl, #1
 80064d0:	fa0a f202 	lsl.w	r2, sl, r2
 80064d4:	420a      	tst	r2, r1
 80064d6:	d009      	beq.n	80064ec <__gethex+0x1f8>
 80064d8:	4553      	cmp	r3, sl
 80064da:	dd05      	ble.n	80064e8 <__gethex+0x1f4>
 80064dc:	1eb9      	subs	r1, r7, #2
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 fedc 	bl	800729c <__any_on>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d145      	bne.n	8006574 <__gethex+0x280>
 80064e8:	f04f 0a02 	mov.w	sl, #2
 80064ec:	4639      	mov	r1, r7
 80064ee:	4620      	mov	r0, r4
 80064f0:	f7ff fe98 	bl	8006224 <rshift>
 80064f4:	443d      	add	r5, r7
 80064f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064fa:	42ab      	cmp	r3, r5
 80064fc:	da4c      	bge.n	8006598 <__gethex+0x2a4>
 80064fe:	ee18 0a10 	vmov	r0, s16
 8006502:	4621      	mov	r1, r4
 8006504:	f000 fa6a 	bl	80069dc <_Bfree>
 8006508:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800650a:	2300      	movs	r3, #0
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	27a3      	movs	r7, #163	; 0xa3
 8006510:	e785      	b.n	800641e <__gethex+0x12a>
 8006512:	1e73      	subs	r3, r6, #1
 8006514:	9a05      	ldr	r2, [sp, #20]
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800651c:	4293      	cmp	r3, r2
 800651e:	d019      	beq.n	8006554 <__gethex+0x260>
 8006520:	f1bb 0f20 	cmp.w	fp, #32
 8006524:	d107      	bne.n	8006536 <__gethex+0x242>
 8006526:	9b02      	ldr	r3, [sp, #8]
 8006528:	9a00      	ldr	r2, [sp, #0]
 800652a:	f843 2b04 	str.w	r2, [r3], #4
 800652e:	9302      	str	r3, [sp, #8]
 8006530:	2300      	movs	r3, #0
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	469b      	mov	fp, r3
 8006536:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800653a:	f7ff fec5 	bl	80062c8 <__hexdig_fun>
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	f000 000f 	and.w	r0, r0, #15
 8006544:	fa00 f00b 	lsl.w	r0, r0, fp
 8006548:	4303      	orrs	r3, r0
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	f10b 0b04 	add.w	fp, fp, #4
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	e00d      	b.n	8006570 <__gethex+0x27c>
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	9a06      	ldr	r2, [sp, #24]
 8006558:	4413      	add	r3, r2
 800655a:	42bb      	cmp	r3, r7
 800655c:	d3e0      	bcc.n	8006520 <__gethex+0x22c>
 800655e:	4618      	mov	r0, r3
 8006560:	9901      	ldr	r1, [sp, #4]
 8006562:	9307      	str	r3, [sp, #28]
 8006564:	4652      	mov	r2, sl
 8006566:	f001 f927 	bl	80077b8 <strncmp>
 800656a:	9b07      	ldr	r3, [sp, #28]
 800656c:	2800      	cmp	r0, #0
 800656e:	d1d7      	bne.n	8006520 <__gethex+0x22c>
 8006570:	461e      	mov	r6, r3
 8006572:	e78b      	b.n	800648c <__gethex+0x198>
 8006574:	f04f 0a03 	mov.w	sl, #3
 8006578:	e7b8      	b.n	80064ec <__gethex+0x1f8>
 800657a:	da0a      	bge.n	8006592 <__gethex+0x29e>
 800657c:	1a37      	subs	r7, r6, r0
 800657e:	4621      	mov	r1, r4
 8006580:	ee18 0a10 	vmov	r0, s16
 8006584:	463a      	mov	r2, r7
 8006586:	f000 fc45 	bl	8006e14 <__lshift>
 800658a:	1bed      	subs	r5, r5, r7
 800658c:	4604      	mov	r4, r0
 800658e:	f100 0914 	add.w	r9, r0, #20
 8006592:	f04f 0a00 	mov.w	sl, #0
 8006596:	e7ae      	b.n	80064f6 <__gethex+0x202>
 8006598:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800659c:	42a8      	cmp	r0, r5
 800659e:	dd72      	ble.n	8006686 <__gethex+0x392>
 80065a0:	1b45      	subs	r5, r0, r5
 80065a2:	42ae      	cmp	r6, r5
 80065a4:	dc36      	bgt.n	8006614 <__gethex+0x320>
 80065a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d02a      	beq.n	8006604 <__gethex+0x310>
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d02c      	beq.n	800660c <__gethex+0x318>
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d11c      	bne.n	80065f0 <__gethex+0x2fc>
 80065b6:	42ae      	cmp	r6, r5
 80065b8:	d11a      	bne.n	80065f0 <__gethex+0x2fc>
 80065ba:	2e01      	cmp	r6, #1
 80065bc:	d112      	bne.n	80065e4 <__gethex+0x2f0>
 80065be:	9a04      	ldr	r2, [sp, #16]
 80065c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	2301      	movs	r3, #1
 80065c8:	6123      	str	r3, [r4, #16]
 80065ca:	f8c9 3000 	str.w	r3, [r9]
 80065ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065d0:	2762      	movs	r7, #98	; 0x62
 80065d2:	601c      	str	r4, [r3, #0]
 80065d4:	e723      	b.n	800641e <__gethex+0x12a>
 80065d6:	bf00      	nop
 80065d8:	08008658 	.word	0x08008658
 80065dc:	080085e0 	.word	0x080085e0
 80065e0:	080085f1 	.word	0x080085f1
 80065e4:	1e71      	subs	r1, r6, #1
 80065e6:	4620      	mov	r0, r4
 80065e8:	f000 fe58 	bl	800729c <__any_on>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d1e6      	bne.n	80065be <__gethex+0x2ca>
 80065f0:	ee18 0a10 	vmov	r0, s16
 80065f4:	4621      	mov	r1, r4
 80065f6:	f000 f9f1 	bl	80069dc <_Bfree>
 80065fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80065fc:	2300      	movs	r3, #0
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	2750      	movs	r7, #80	; 0x50
 8006602:	e70c      	b.n	800641e <__gethex+0x12a>
 8006604:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f2      	bne.n	80065f0 <__gethex+0x2fc>
 800660a:	e7d8      	b.n	80065be <__gethex+0x2ca>
 800660c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1d5      	bne.n	80065be <__gethex+0x2ca>
 8006612:	e7ed      	b.n	80065f0 <__gethex+0x2fc>
 8006614:	1e6f      	subs	r7, r5, #1
 8006616:	f1ba 0f00 	cmp.w	sl, #0
 800661a:	d131      	bne.n	8006680 <__gethex+0x38c>
 800661c:	b127      	cbz	r7, 8006628 <__gethex+0x334>
 800661e:	4639      	mov	r1, r7
 8006620:	4620      	mov	r0, r4
 8006622:	f000 fe3b 	bl	800729c <__any_on>
 8006626:	4682      	mov	sl, r0
 8006628:	117b      	asrs	r3, r7, #5
 800662a:	2101      	movs	r1, #1
 800662c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006630:	f007 071f 	and.w	r7, r7, #31
 8006634:	fa01 f707 	lsl.w	r7, r1, r7
 8006638:	421f      	tst	r7, r3
 800663a:	4629      	mov	r1, r5
 800663c:	4620      	mov	r0, r4
 800663e:	bf18      	it	ne
 8006640:	f04a 0a02 	orrne.w	sl, sl, #2
 8006644:	1b76      	subs	r6, r6, r5
 8006646:	f7ff fded 	bl	8006224 <rshift>
 800664a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800664e:	2702      	movs	r7, #2
 8006650:	f1ba 0f00 	cmp.w	sl, #0
 8006654:	d048      	beq.n	80066e8 <__gethex+0x3f4>
 8006656:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800665a:	2b02      	cmp	r3, #2
 800665c:	d015      	beq.n	800668a <__gethex+0x396>
 800665e:	2b03      	cmp	r3, #3
 8006660:	d017      	beq.n	8006692 <__gethex+0x39e>
 8006662:	2b01      	cmp	r3, #1
 8006664:	d109      	bne.n	800667a <__gethex+0x386>
 8006666:	f01a 0f02 	tst.w	sl, #2
 800666a:	d006      	beq.n	800667a <__gethex+0x386>
 800666c:	f8d9 0000 	ldr.w	r0, [r9]
 8006670:	ea4a 0a00 	orr.w	sl, sl, r0
 8006674:	f01a 0f01 	tst.w	sl, #1
 8006678:	d10e      	bne.n	8006698 <__gethex+0x3a4>
 800667a:	f047 0710 	orr.w	r7, r7, #16
 800667e:	e033      	b.n	80066e8 <__gethex+0x3f4>
 8006680:	f04f 0a01 	mov.w	sl, #1
 8006684:	e7d0      	b.n	8006628 <__gethex+0x334>
 8006686:	2701      	movs	r7, #1
 8006688:	e7e2      	b.n	8006650 <__gethex+0x35c>
 800668a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800668c:	f1c3 0301 	rsb	r3, r3, #1
 8006690:	9315      	str	r3, [sp, #84]	; 0x54
 8006692:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0f0      	beq.n	800667a <__gethex+0x386>
 8006698:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800669c:	f104 0314 	add.w	r3, r4, #20
 80066a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80066a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80066a8:	f04f 0c00 	mov.w	ip, #0
 80066ac:	4618      	mov	r0, r3
 80066ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80066b2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80066b6:	d01c      	beq.n	80066f2 <__gethex+0x3fe>
 80066b8:	3201      	adds	r2, #1
 80066ba:	6002      	str	r2, [r0, #0]
 80066bc:	2f02      	cmp	r7, #2
 80066be:	f104 0314 	add.w	r3, r4, #20
 80066c2:	d13f      	bne.n	8006744 <__gethex+0x450>
 80066c4:	f8d8 2000 	ldr.w	r2, [r8]
 80066c8:	3a01      	subs	r2, #1
 80066ca:	42b2      	cmp	r2, r6
 80066cc:	d10a      	bne.n	80066e4 <__gethex+0x3f0>
 80066ce:	1171      	asrs	r1, r6, #5
 80066d0:	2201      	movs	r2, #1
 80066d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066d6:	f006 061f 	and.w	r6, r6, #31
 80066da:	fa02 f606 	lsl.w	r6, r2, r6
 80066de:	421e      	tst	r6, r3
 80066e0:	bf18      	it	ne
 80066e2:	4617      	movne	r7, r2
 80066e4:	f047 0720 	orr.w	r7, r7, #32
 80066e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066ea:	601c      	str	r4, [r3, #0]
 80066ec:	9b04      	ldr	r3, [sp, #16]
 80066ee:	601d      	str	r5, [r3, #0]
 80066f0:	e695      	b.n	800641e <__gethex+0x12a>
 80066f2:	4299      	cmp	r1, r3
 80066f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80066f8:	d8d8      	bhi.n	80066ac <__gethex+0x3b8>
 80066fa:	68a3      	ldr	r3, [r4, #8]
 80066fc:	459b      	cmp	fp, r3
 80066fe:	db19      	blt.n	8006734 <__gethex+0x440>
 8006700:	6861      	ldr	r1, [r4, #4]
 8006702:	ee18 0a10 	vmov	r0, s16
 8006706:	3101      	adds	r1, #1
 8006708:	f000 f928 	bl	800695c <_Balloc>
 800670c:	4681      	mov	r9, r0
 800670e:	b918      	cbnz	r0, 8006718 <__gethex+0x424>
 8006710:	4b1a      	ldr	r3, [pc, #104]	; (800677c <__gethex+0x488>)
 8006712:	4602      	mov	r2, r0
 8006714:	2184      	movs	r1, #132	; 0x84
 8006716:	e6a8      	b.n	800646a <__gethex+0x176>
 8006718:	6922      	ldr	r2, [r4, #16]
 800671a:	3202      	adds	r2, #2
 800671c:	f104 010c 	add.w	r1, r4, #12
 8006720:	0092      	lsls	r2, r2, #2
 8006722:	300c      	adds	r0, #12
 8006724:	f000 f90c 	bl	8006940 <memcpy>
 8006728:	4621      	mov	r1, r4
 800672a:	ee18 0a10 	vmov	r0, s16
 800672e:	f000 f955 	bl	80069dc <_Bfree>
 8006732:	464c      	mov	r4, r9
 8006734:	6923      	ldr	r3, [r4, #16]
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800673c:	6122      	str	r2, [r4, #16]
 800673e:	2201      	movs	r2, #1
 8006740:	615a      	str	r2, [r3, #20]
 8006742:	e7bb      	b.n	80066bc <__gethex+0x3c8>
 8006744:	6922      	ldr	r2, [r4, #16]
 8006746:	455a      	cmp	r2, fp
 8006748:	dd0b      	ble.n	8006762 <__gethex+0x46e>
 800674a:	2101      	movs	r1, #1
 800674c:	4620      	mov	r0, r4
 800674e:	f7ff fd69 	bl	8006224 <rshift>
 8006752:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006756:	3501      	adds	r5, #1
 8006758:	42ab      	cmp	r3, r5
 800675a:	f6ff aed0 	blt.w	80064fe <__gethex+0x20a>
 800675e:	2701      	movs	r7, #1
 8006760:	e7c0      	b.n	80066e4 <__gethex+0x3f0>
 8006762:	f016 061f 	ands.w	r6, r6, #31
 8006766:	d0fa      	beq.n	800675e <__gethex+0x46a>
 8006768:	4453      	add	r3, sl
 800676a:	f1c6 0620 	rsb	r6, r6, #32
 800676e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006772:	f000 f9e5 	bl	8006b40 <__hi0bits>
 8006776:	42b0      	cmp	r0, r6
 8006778:	dbe7      	blt.n	800674a <__gethex+0x456>
 800677a:	e7f0      	b.n	800675e <__gethex+0x46a>
 800677c:	080085e0 	.word	0x080085e0

08006780 <L_shift>:
 8006780:	f1c2 0208 	rsb	r2, r2, #8
 8006784:	0092      	lsls	r2, r2, #2
 8006786:	b570      	push	{r4, r5, r6, lr}
 8006788:	f1c2 0620 	rsb	r6, r2, #32
 800678c:	6843      	ldr	r3, [r0, #4]
 800678e:	6804      	ldr	r4, [r0, #0]
 8006790:	fa03 f506 	lsl.w	r5, r3, r6
 8006794:	432c      	orrs	r4, r5
 8006796:	40d3      	lsrs	r3, r2
 8006798:	6004      	str	r4, [r0, #0]
 800679a:	f840 3f04 	str.w	r3, [r0, #4]!
 800679e:	4288      	cmp	r0, r1
 80067a0:	d3f4      	bcc.n	800678c <L_shift+0xc>
 80067a2:	bd70      	pop	{r4, r5, r6, pc}

080067a4 <__match>:
 80067a4:	b530      	push	{r4, r5, lr}
 80067a6:	6803      	ldr	r3, [r0, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ae:	b914      	cbnz	r4, 80067b6 <__match+0x12>
 80067b0:	6003      	str	r3, [r0, #0]
 80067b2:	2001      	movs	r0, #1
 80067b4:	bd30      	pop	{r4, r5, pc}
 80067b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80067be:	2d19      	cmp	r5, #25
 80067c0:	bf98      	it	ls
 80067c2:	3220      	addls	r2, #32
 80067c4:	42a2      	cmp	r2, r4
 80067c6:	d0f0      	beq.n	80067aa <__match+0x6>
 80067c8:	2000      	movs	r0, #0
 80067ca:	e7f3      	b.n	80067b4 <__match+0x10>

080067cc <__hexnan>:
 80067cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d0:	680b      	ldr	r3, [r1, #0]
 80067d2:	115e      	asrs	r6, r3, #5
 80067d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80067d8:	f013 031f 	ands.w	r3, r3, #31
 80067dc:	b087      	sub	sp, #28
 80067de:	bf18      	it	ne
 80067e0:	3604      	addne	r6, #4
 80067e2:	2500      	movs	r5, #0
 80067e4:	1f37      	subs	r7, r6, #4
 80067e6:	4690      	mov	r8, r2
 80067e8:	6802      	ldr	r2, [r0, #0]
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	4682      	mov	sl, r0
 80067ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80067f2:	46b9      	mov	r9, r7
 80067f4:	463c      	mov	r4, r7
 80067f6:	9502      	str	r5, [sp, #8]
 80067f8:	46ab      	mov	fp, r5
 80067fa:	7851      	ldrb	r1, [r2, #1]
 80067fc:	1c53      	adds	r3, r2, #1
 80067fe:	9303      	str	r3, [sp, #12]
 8006800:	b341      	cbz	r1, 8006854 <__hexnan+0x88>
 8006802:	4608      	mov	r0, r1
 8006804:	9205      	str	r2, [sp, #20]
 8006806:	9104      	str	r1, [sp, #16]
 8006808:	f7ff fd5e 	bl	80062c8 <__hexdig_fun>
 800680c:	2800      	cmp	r0, #0
 800680e:	d14f      	bne.n	80068b0 <__hexnan+0xe4>
 8006810:	9904      	ldr	r1, [sp, #16]
 8006812:	9a05      	ldr	r2, [sp, #20]
 8006814:	2920      	cmp	r1, #32
 8006816:	d818      	bhi.n	800684a <__hexnan+0x7e>
 8006818:	9b02      	ldr	r3, [sp, #8]
 800681a:	459b      	cmp	fp, r3
 800681c:	dd13      	ble.n	8006846 <__hexnan+0x7a>
 800681e:	454c      	cmp	r4, r9
 8006820:	d206      	bcs.n	8006830 <__hexnan+0x64>
 8006822:	2d07      	cmp	r5, #7
 8006824:	dc04      	bgt.n	8006830 <__hexnan+0x64>
 8006826:	462a      	mov	r2, r5
 8006828:	4649      	mov	r1, r9
 800682a:	4620      	mov	r0, r4
 800682c:	f7ff ffa8 	bl	8006780 <L_shift>
 8006830:	4544      	cmp	r4, r8
 8006832:	d950      	bls.n	80068d6 <__hexnan+0x10a>
 8006834:	2300      	movs	r3, #0
 8006836:	f1a4 0904 	sub.w	r9, r4, #4
 800683a:	f844 3c04 	str.w	r3, [r4, #-4]
 800683e:	f8cd b008 	str.w	fp, [sp, #8]
 8006842:	464c      	mov	r4, r9
 8006844:	461d      	mov	r5, r3
 8006846:	9a03      	ldr	r2, [sp, #12]
 8006848:	e7d7      	b.n	80067fa <__hexnan+0x2e>
 800684a:	2929      	cmp	r1, #41	; 0x29
 800684c:	d156      	bne.n	80068fc <__hexnan+0x130>
 800684e:	3202      	adds	r2, #2
 8006850:	f8ca 2000 	str.w	r2, [sl]
 8006854:	f1bb 0f00 	cmp.w	fp, #0
 8006858:	d050      	beq.n	80068fc <__hexnan+0x130>
 800685a:	454c      	cmp	r4, r9
 800685c:	d206      	bcs.n	800686c <__hexnan+0xa0>
 800685e:	2d07      	cmp	r5, #7
 8006860:	dc04      	bgt.n	800686c <__hexnan+0xa0>
 8006862:	462a      	mov	r2, r5
 8006864:	4649      	mov	r1, r9
 8006866:	4620      	mov	r0, r4
 8006868:	f7ff ff8a 	bl	8006780 <L_shift>
 800686c:	4544      	cmp	r4, r8
 800686e:	d934      	bls.n	80068da <__hexnan+0x10e>
 8006870:	f1a8 0204 	sub.w	r2, r8, #4
 8006874:	4623      	mov	r3, r4
 8006876:	f853 1b04 	ldr.w	r1, [r3], #4
 800687a:	f842 1f04 	str.w	r1, [r2, #4]!
 800687e:	429f      	cmp	r7, r3
 8006880:	d2f9      	bcs.n	8006876 <__hexnan+0xaa>
 8006882:	1b3b      	subs	r3, r7, r4
 8006884:	f023 0303 	bic.w	r3, r3, #3
 8006888:	3304      	adds	r3, #4
 800688a:	3401      	adds	r4, #1
 800688c:	3e03      	subs	r6, #3
 800688e:	42b4      	cmp	r4, r6
 8006890:	bf88      	it	hi
 8006892:	2304      	movhi	r3, #4
 8006894:	4443      	add	r3, r8
 8006896:	2200      	movs	r2, #0
 8006898:	f843 2b04 	str.w	r2, [r3], #4
 800689c:	429f      	cmp	r7, r3
 800689e:	d2fb      	bcs.n	8006898 <__hexnan+0xcc>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	b91b      	cbnz	r3, 80068ac <__hexnan+0xe0>
 80068a4:	4547      	cmp	r7, r8
 80068a6:	d127      	bne.n	80068f8 <__hexnan+0x12c>
 80068a8:	2301      	movs	r3, #1
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	2005      	movs	r0, #5
 80068ae:	e026      	b.n	80068fe <__hexnan+0x132>
 80068b0:	3501      	adds	r5, #1
 80068b2:	2d08      	cmp	r5, #8
 80068b4:	f10b 0b01 	add.w	fp, fp, #1
 80068b8:	dd06      	ble.n	80068c8 <__hexnan+0xfc>
 80068ba:	4544      	cmp	r4, r8
 80068bc:	d9c3      	bls.n	8006846 <__hexnan+0x7a>
 80068be:	2300      	movs	r3, #0
 80068c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80068c4:	2501      	movs	r5, #1
 80068c6:	3c04      	subs	r4, #4
 80068c8:	6822      	ldr	r2, [r4, #0]
 80068ca:	f000 000f 	and.w	r0, r0, #15
 80068ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80068d2:	6022      	str	r2, [r4, #0]
 80068d4:	e7b7      	b.n	8006846 <__hexnan+0x7a>
 80068d6:	2508      	movs	r5, #8
 80068d8:	e7b5      	b.n	8006846 <__hexnan+0x7a>
 80068da:	9b01      	ldr	r3, [sp, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0df      	beq.n	80068a0 <__hexnan+0xd4>
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068e4:	f1c3 0320 	rsb	r3, r3, #32
 80068e8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80068f0:	401a      	ands	r2, r3
 80068f2:	f846 2c04 	str.w	r2, [r6, #-4]
 80068f6:	e7d3      	b.n	80068a0 <__hexnan+0xd4>
 80068f8:	3f04      	subs	r7, #4
 80068fa:	e7d1      	b.n	80068a0 <__hexnan+0xd4>
 80068fc:	2004      	movs	r0, #4
 80068fe:	b007      	add	sp, #28
 8006900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006904 <_localeconv_r>:
 8006904:	4800      	ldr	r0, [pc, #0]	; (8006908 <_localeconv_r+0x4>)
 8006906:	4770      	bx	lr
 8006908:	20000164 	.word	0x20000164

0800690c <malloc>:
 800690c:	4b02      	ldr	r3, [pc, #8]	; (8006918 <malloc+0xc>)
 800690e:	4601      	mov	r1, r0
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	f000 bd67 	b.w	80073e4 <_malloc_r>
 8006916:	bf00      	nop
 8006918:	2000000c 	.word	0x2000000c

0800691c <__ascii_mbtowc>:
 800691c:	b082      	sub	sp, #8
 800691e:	b901      	cbnz	r1, 8006922 <__ascii_mbtowc+0x6>
 8006920:	a901      	add	r1, sp, #4
 8006922:	b142      	cbz	r2, 8006936 <__ascii_mbtowc+0x1a>
 8006924:	b14b      	cbz	r3, 800693a <__ascii_mbtowc+0x1e>
 8006926:	7813      	ldrb	r3, [r2, #0]
 8006928:	600b      	str	r3, [r1, #0]
 800692a:	7812      	ldrb	r2, [r2, #0]
 800692c:	1e10      	subs	r0, r2, #0
 800692e:	bf18      	it	ne
 8006930:	2001      	movne	r0, #1
 8006932:	b002      	add	sp, #8
 8006934:	4770      	bx	lr
 8006936:	4610      	mov	r0, r2
 8006938:	e7fb      	b.n	8006932 <__ascii_mbtowc+0x16>
 800693a:	f06f 0001 	mvn.w	r0, #1
 800693e:	e7f8      	b.n	8006932 <__ascii_mbtowc+0x16>

08006940 <memcpy>:
 8006940:	440a      	add	r2, r1
 8006942:	4291      	cmp	r1, r2
 8006944:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006948:	d100      	bne.n	800694c <memcpy+0xc>
 800694a:	4770      	bx	lr
 800694c:	b510      	push	{r4, lr}
 800694e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006952:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006956:	4291      	cmp	r1, r2
 8006958:	d1f9      	bne.n	800694e <memcpy+0xe>
 800695a:	bd10      	pop	{r4, pc}

0800695c <_Balloc>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006960:	4604      	mov	r4, r0
 8006962:	460d      	mov	r5, r1
 8006964:	b976      	cbnz	r6, 8006984 <_Balloc+0x28>
 8006966:	2010      	movs	r0, #16
 8006968:	f7ff ffd0 	bl	800690c <malloc>
 800696c:	4602      	mov	r2, r0
 800696e:	6260      	str	r0, [r4, #36]	; 0x24
 8006970:	b920      	cbnz	r0, 800697c <_Balloc+0x20>
 8006972:	4b18      	ldr	r3, [pc, #96]	; (80069d4 <_Balloc+0x78>)
 8006974:	4818      	ldr	r0, [pc, #96]	; (80069d8 <_Balloc+0x7c>)
 8006976:	2166      	movs	r1, #102	; 0x66
 8006978:	f000 ff40 	bl	80077fc <__assert_func>
 800697c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006980:	6006      	str	r6, [r0, #0]
 8006982:	60c6      	str	r6, [r0, #12]
 8006984:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006986:	68f3      	ldr	r3, [r6, #12]
 8006988:	b183      	cbz	r3, 80069ac <_Balloc+0x50>
 800698a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006992:	b9b8      	cbnz	r0, 80069c4 <_Balloc+0x68>
 8006994:	2101      	movs	r1, #1
 8006996:	fa01 f605 	lsl.w	r6, r1, r5
 800699a:	1d72      	adds	r2, r6, #5
 800699c:	0092      	lsls	r2, r2, #2
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 fc9d 	bl	80072de <_calloc_r>
 80069a4:	b160      	cbz	r0, 80069c0 <_Balloc+0x64>
 80069a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069aa:	e00e      	b.n	80069ca <_Balloc+0x6e>
 80069ac:	2221      	movs	r2, #33	; 0x21
 80069ae:	2104      	movs	r1, #4
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 fc94 	bl	80072de <_calloc_r>
 80069b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069b8:	60f0      	str	r0, [r6, #12]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e4      	bne.n	800698a <_Balloc+0x2e>
 80069c0:	2000      	movs	r0, #0
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
 80069c4:	6802      	ldr	r2, [r0, #0]
 80069c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069ca:	2300      	movs	r3, #0
 80069cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069d0:	e7f7      	b.n	80069c2 <_Balloc+0x66>
 80069d2:	bf00      	nop
 80069d4:	0800856e 	.word	0x0800856e
 80069d8:	0800866c 	.word	0x0800866c

080069dc <_Bfree>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069e0:	4605      	mov	r5, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	b976      	cbnz	r6, 8006a04 <_Bfree+0x28>
 80069e6:	2010      	movs	r0, #16
 80069e8:	f7ff ff90 	bl	800690c <malloc>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6268      	str	r0, [r5, #36]	; 0x24
 80069f0:	b920      	cbnz	r0, 80069fc <_Bfree+0x20>
 80069f2:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <_Bfree+0x3c>)
 80069f4:	4809      	ldr	r0, [pc, #36]	; (8006a1c <_Bfree+0x40>)
 80069f6:	218a      	movs	r1, #138	; 0x8a
 80069f8:	f000 ff00 	bl	80077fc <__assert_func>
 80069fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a00:	6006      	str	r6, [r0, #0]
 8006a02:	60c6      	str	r6, [r0, #12]
 8006a04:	b13c      	cbz	r4, 8006a16 <_Bfree+0x3a>
 8006a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a08:	6862      	ldr	r2, [r4, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a10:	6021      	str	r1, [r4, #0]
 8006a12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
 8006a18:	0800856e 	.word	0x0800856e
 8006a1c:	0800866c 	.word	0x0800866c

08006a20 <__multadd>:
 8006a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a24:	690d      	ldr	r5, [r1, #16]
 8006a26:	4607      	mov	r7, r0
 8006a28:	460c      	mov	r4, r1
 8006a2a:	461e      	mov	r6, r3
 8006a2c:	f101 0c14 	add.w	ip, r1, #20
 8006a30:	2000      	movs	r0, #0
 8006a32:	f8dc 3000 	ldr.w	r3, [ip]
 8006a36:	b299      	uxth	r1, r3
 8006a38:	fb02 6101 	mla	r1, r2, r1, r6
 8006a3c:	0c1e      	lsrs	r6, r3, #16
 8006a3e:	0c0b      	lsrs	r3, r1, #16
 8006a40:	fb02 3306 	mla	r3, r2, r6, r3
 8006a44:	b289      	uxth	r1, r1
 8006a46:	3001      	adds	r0, #1
 8006a48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a4c:	4285      	cmp	r5, r0
 8006a4e:	f84c 1b04 	str.w	r1, [ip], #4
 8006a52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a56:	dcec      	bgt.n	8006a32 <__multadd+0x12>
 8006a58:	b30e      	cbz	r6, 8006a9e <__multadd+0x7e>
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	42ab      	cmp	r3, r5
 8006a5e:	dc19      	bgt.n	8006a94 <__multadd+0x74>
 8006a60:	6861      	ldr	r1, [r4, #4]
 8006a62:	4638      	mov	r0, r7
 8006a64:	3101      	adds	r1, #1
 8006a66:	f7ff ff79 	bl	800695c <_Balloc>
 8006a6a:	4680      	mov	r8, r0
 8006a6c:	b928      	cbnz	r0, 8006a7a <__multadd+0x5a>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	4b0c      	ldr	r3, [pc, #48]	; (8006aa4 <__multadd+0x84>)
 8006a72:	480d      	ldr	r0, [pc, #52]	; (8006aa8 <__multadd+0x88>)
 8006a74:	21b5      	movs	r1, #181	; 0xb5
 8006a76:	f000 fec1 	bl	80077fc <__assert_func>
 8006a7a:	6922      	ldr	r2, [r4, #16]
 8006a7c:	3202      	adds	r2, #2
 8006a7e:	f104 010c 	add.w	r1, r4, #12
 8006a82:	0092      	lsls	r2, r2, #2
 8006a84:	300c      	adds	r0, #12
 8006a86:	f7ff ff5b 	bl	8006940 <memcpy>
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	4638      	mov	r0, r7
 8006a8e:	f7ff ffa5 	bl	80069dc <_Bfree>
 8006a92:	4644      	mov	r4, r8
 8006a94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a98:	3501      	adds	r5, #1
 8006a9a:	615e      	str	r6, [r3, #20]
 8006a9c:	6125      	str	r5, [r4, #16]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa4:	080085e0 	.word	0x080085e0
 8006aa8:	0800866c 	.word	0x0800866c

08006aac <__s2b>:
 8006aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	4615      	mov	r5, r2
 8006ab4:	461f      	mov	r7, r3
 8006ab6:	2209      	movs	r2, #9
 8006ab8:	3308      	adds	r3, #8
 8006aba:	4606      	mov	r6, r0
 8006abc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	db09      	blt.n	8006adc <__s2b+0x30>
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f7ff ff47 	bl	800695c <_Balloc>
 8006ace:	b940      	cbnz	r0, 8006ae2 <__s2b+0x36>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	4b19      	ldr	r3, [pc, #100]	; (8006b38 <__s2b+0x8c>)
 8006ad4:	4819      	ldr	r0, [pc, #100]	; (8006b3c <__s2b+0x90>)
 8006ad6:	21ce      	movs	r1, #206	; 0xce
 8006ad8:	f000 fe90 	bl	80077fc <__assert_func>
 8006adc:	0052      	lsls	r2, r2, #1
 8006ade:	3101      	adds	r1, #1
 8006ae0:	e7f0      	b.n	8006ac4 <__s2b+0x18>
 8006ae2:	9b08      	ldr	r3, [sp, #32]
 8006ae4:	6143      	str	r3, [r0, #20]
 8006ae6:	2d09      	cmp	r5, #9
 8006ae8:	f04f 0301 	mov.w	r3, #1
 8006aec:	6103      	str	r3, [r0, #16]
 8006aee:	dd16      	ble.n	8006b1e <__s2b+0x72>
 8006af0:	f104 0909 	add.w	r9, r4, #9
 8006af4:	46c8      	mov	r8, r9
 8006af6:	442c      	add	r4, r5
 8006af8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006afc:	4601      	mov	r1, r0
 8006afe:	3b30      	subs	r3, #48	; 0x30
 8006b00:	220a      	movs	r2, #10
 8006b02:	4630      	mov	r0, r6
 8006b04:	f7ff ff8c 	bl	8006a20 <__multadd>
 8006b08:	45a0      	cmp	r8, r4
 8006b0a:	d1f5      	bne.n	8006af8 <__s2b+0x4c>
 8006b0c:	f1a5 0408 	sub.w	r4, r5, #8
 8006b10:	444c      	add	r4, r9
 8006b12:	1b2d      	subs	r5, r5, r4
 8006b14:	1963      	adds	r3, r4, r5
 8006b16:	42bb      	cmp	r3, r7
 8006b18:	db04      	blt.n	8006b24 <__s2b+0x78>
 8006b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	340a      	adds	r4, #10
 8006b20:	2509      	movs	r5, #9
 8006b22:	e7f6      	b.n	8006b12 <__s2b+0x66>
 8006b24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b28:	4601      	mov	r1, r0
 8006b2a:	3b30      	subs	r3, #48	; 0x30
 8006b2c:	220a      	movs	r2, #10
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f7ff ff76 	bl	8006a20 <__multadd>
 8006b34:	e7ee      	b.n	8006b14 <__s2b+0x68>
 8006b36:	bf00      	nop
 8006b38:	080085e0 	.word	0x080085e0
 8006b3c:	0800866c 	.word	0x0800866c

08006b40 <__hi0bits>:
 8006b40:	0c03      	lsrs	r3, r0, #16
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	b9d3      	cbnz	r3, 8006b7c <__hi0bits+0x3c>
 8006b46:	0400      	lsls	r0, r0, #16
 8006b48:	2310      	movs	r3, #16
 8006b4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b4e:	bf04      	itt	eq
 8006b50:	0200      	lsleq	r0, r0, #8
 8006b52:	3308      	addeq	r3, #8
 8006b54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b58:	bf04      	itt	eq
 8006b5a:	0100      	lsleq	r0, r0, #4
 8006b5c:	3304      	addeq	r3, #4
 8006b5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b62:	bf04      	itt	eq
 8006b64:	0080      	lsleq	r0, r0, #2
 8006b66:	3302      	addeq	r3, #2
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	db05      	blt.n	8006b78 <__hi0bits+0x38>
 8006b6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b70:	f103 0301 	add.w	r3, r3, #1
 8006b74:	bf08      	it	eq
 8006b76:	2320      	moveq	r3, #32
 8006b78:	4618      	mov	r0, r3
 8006b7a:	4770      	bx	lr
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e7e4      	b.n	8006b4a <__hi0bits+0xa>

08006b80 <__lo0bits>:
 8006b80:	6803      	ldr	r3, [r0, #0]
 8006b82:	f013 0207 	ands.w	r2, r3, #7
 8006b86:	4601      	mov	r1, r0
 8006b88:	d00b      	beq.n	8006ba2 <__lo0bits+0x22>
 8006b8a:	07da      	lsls	r2, r3, #31
 8006b8c:	d423      	bmi.n	8006bd6 <__lo0bits+0x56>
 8006b8e:	0798      	lsls	r0, r3, #30
 8006b90:	bf49      	itett	mi
 8006b92:	085b      	lsrmi	r3, r3, #1
 8006b94:	089b      	lsrpl	r3, r3, #2
 8006b96:	2001      	movmi	r0, #1
 8006b98:	600b      	strmi	r3, [r1, #0]
 8006b9a:	bf5c      	itt	pl
 8006b9c:	600b      	strpl	r3, [r1, #0]
 8006b9e:	2002      	movpl	r0, #2
 8006ba0:	4770      	bx	lr
 8006ba2:	b298      	uxth	r0, r3
 8006ba4:	b9a8      	cbnz	r0, 8006bd2 <__lo0bits+0x52>
 8006ba6:	0c1b      	lsrs	r3, r3, #16
 8006ba8:	2010      	movs	r0, #16
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	b90a      	cbnz	r2, 8006bb2 <__lo0bits+0x32>
 8006bae:	3008      	adds	r0, #8
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	071a      	lsls	r2, r3, #28
 8006bb4:	bf04      	itt	eq
 8006bb6:	091b      	lsreq	r3, r3, #4
 8006bb8:	3004      	addeq	r0, #4
 8006bba:	079a      	lsls	r2, r3, #30
 8006bbc:	bf04      	itt	eq
 8006bbe:	089b      	lsreq	r3, r3, #2
 8006bc0:	3002      	addeq	r0, #2
 8006bc2:	07da      	lsls	r2, r3, #31
 8006bc4:	d403      	bmi.n	8006bce <__lo0bits+0x4e>
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	f100 0001 	add.w	r0, r0, #1
 8006bcc:	d005      	beq.n	8006bda <__lo0bits+0x5a>
 8006bce:	600b      	str	r3, [r1, #0]
 8006bd0:	4770      	bx	lr
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	e7e9      	b.n	8006baa <__lo0bits+0x2a>
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	4770      	bx	lr
 8006bda:	2020      	movs	r0, #32
 8006bdc:	4770      	bx	lr
	...

08006be0 <__i2b>:
 8006be0:	b510      	push	{r4, lr}
 8006be2:	460c      	mov	r4, r1
 8006be4:	2101      	movs	r1, #1
 8006be6:	f7ff feb9 	bl	800695c <_Balloc>
 8006bea:	4602      	mov	r2, r0
 8006bec:	b928      	cbnz	r0, 8006bfa <__i2b+0x1a>
 8006bee:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <__i2b+0x24>)
 8006bf0:	4805      	ldr	r0, [pc, #20]	; (8006c08 <__i2b+0x28>)
 8006bf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bf6:	f000 fe01 	bl	80077fc <__assert_func>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	6144      	str	r4, [r0, #20]
 8006bfe:	6103      	str	r3, [r0, #16]
 8006c00:	bd10      	pop	{r4, pc}
 8006c02:	bf00      	nop
 8006c04:	080085e0 	.word	0x080085e0
 8006c08:	0800866c 	.word	0x0800866c

08006c0c <__multiply>:
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	4691      	mov	r9, r2
 8006c12:	690a      	ldr	r2, [r1, #16]
 8006c14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	bfb8      	it	lt
 8006c1c:	460b      	movlt	r3, r1
 8006c1e:	460c      	mov	r4, r1
 8006c20:	bfbc      	itt	lt
 8006c22:	464c      	movlt	r4, r9
 8006c24:	4699      	movlt	r9, r3
 8006c26:	6927      	ldr	r7, [r4, #16]
 8006c28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c2c:	68a3      	ldr	r3, [r4, #8]
 8006c2e:	6861      	ldr	r1, [r4, #4]
 8006c30:	eb07 060a 	add.w	r6, r7, sl
 8006c34:	42b3      	cmp	r3, r6
 8006c36:	b085      	sub	sp, #20
 8006c38:	bfb8      	it	lt
 8006c3a:	3101      	addlt	r1, #1
 8006c3c:	f7ff fe8e 	bl	800695c <_Balloc>
 8006c40:	b930      	cbnz	r0, 8006c50 <__multiply+0x44>
 8006c42:	4602      	mov	r2, r0
 8006c44:	4b44      	ldr	r3, [pc, #272]	; (8006d58 <__multiply+0x14c>)
 8006c46:	4845      	ldr	r0, [pc, #276]	; (8006d5c <__multiply+0x150>)
 8006c48:	f240 115d 	movw	r1, #349	; 0x15d
 8006c4c:	f000 fdd6 	bl	80077fc <__assert_func>
 8006c50:	f100 0514 	add.w	r5, r0, #20
 8006c54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c58:	462b      	mov	r3, r5
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	4543      	cmp	r3, r8
 8006c5e:	d321      	bcc.n	8006ca4 <__multiply+0x98>
 8006c60:	f104 0314 	add.w	r3, r4, #20
 8006c64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c68:	f109 0314 	add.w	r3, r9, #20
 8006c6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c70:	9202      	str	r2, [sp, #8]
 8006c72:	1b3a      	subs	r2, r7, r4
 8006c74:	3a15      	subs	r2, #21
 8006c76:	f022 0203 	bic.w	r2, r2, #3
 8006c7a:	3204      	adds	r2, #4
 8006c7c:	f104 0115 	add.w	r1, r4, #21
 8006c80:	428f      	cmp	r7, r1
 8006c82:	bf38      	it	cc
 8006c84:	2204      	movcc	r2, #4
 8006c86:	9201      	str	r2, [sp, #4]
 8006c88:	9a02      	ldr	r2, [sp, #8]
 8006c8a:	9303      	str	r3, [sp, #12]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d80c      	bhi.n	8006caa <__multiply+0x9e>
 8006c90:	2e00      	cmp	r6, #0
 8006c92:	dd03      	ble.n	8006c9c <__multiply+0x90>
 8006c94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d05a      	beq.n	8006d52 <__multiply+0x146>
 8006c9c:	6106      	str	r6, [r0, #16]
 8006c9e:	b005      	add	sp, #20
 8006ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca4:	f843 2b04 	str.w	r2, [r3], #4
 8006ca8:	e7d8      	b.n	8006c5c <__multiply+0x50>
 8006caa:	f8b3 a000 	ldrh.w	sl, [r3]
 8006cae:	f1ba 0f00 	cmp.w	sl, #0
 8006cb2:	d024      	beq.n	8006cfe <__multiply+0xf2>
 8006cb4:	f104 0e14 	add.w	lr, r4, #20
 8006cb8:	46a9      	mov	r9, r5
 8006cba:	f04f 0c00 	mov.w	ip, #0
 8006cbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006cc2:	f8d9 1000 	ldr.w	r1, [r9]
 8006cc6:	fa1f fb82 	uxth.w	fp, r2
 8006cca:	b289      	uxth	r1, r1
 8006ccc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006cd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8006cd8:	4461      	add	r1, ip
 8006cda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cde:	fb0a c20b 	mla	r2, sl, fp, ip
 8006ce2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ce6:	b289      	uxth	r1, r1
 8006ce8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cec:	4577      	cmp	r7, lr
 8006cee:	f849 1b04 	str.w	r1, [r9], #4
 8006cf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cf6:	d8e2      	bhi.n	8006cbe <__multiply+0xb2>
 8006cf8:	9a01      	ldr	r2, [sp, #4]
 8006cfa:	f845 c002 	str.w	ip, [r5, r2]
 8006cfe:	9a03      	ldr	r2, [sp, #12]
 8006d00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d04:	3304      	adds	r3, #4
 8006d06:	f1b9 0f00 	cmp.w	r9, #0
 8006d0a:	d020      	beq.n	8006d4e <__multiply+0x142>
 8006d0c:	6829      	ldr	r1, [r5, #0]
 8006d0e:	f104 0c14 	add.w	ip, r4, #20
 8006d12:	46ae      	mov	lr, r5
 8006d14:	f04f 0a00 	mov.w	sl, #0
 8006d18:	f8bc b000 	ldrh.w	fp, [ip]
 8006d1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d20:	fb09 220b 	mla	r2, r9, fp, r2
 8006d24:	4492      	add	sl, r2
 8006d26:	b289      	uxth	r1, r1
 8006d28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d2c:	f84e 1b04 	str.w	r1, [lr], #4
 8006d30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d34:	f8be 1000 	ldrh.w	r1, [lr]
 8006d38:	0c12      	lsrs	r2, r2, #16
 8006d3a:	fb09 1102 	mla	r1, r9, r2, r1
 8006d3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d42:	4567      	cmp	r7, ip
 8006d44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d48:	d8e6      	bhi.n	8006d18 <__multiply+0x10c>
 8006d4a:	9a01      	ldr	r2, [sp, #4]
 8006d4c:	50a9      	str	r1, [r5, r2]
 8006d4e:	3504      	adds	r5, #4
 8006d50:	e79a      	b.n	8006c88 <__multiply+0x7c>
 8006d52:	3e01      	subs	r6, #1
 8006d54:	e79c      	b.n	8006c90 <__multiply+0x84>
 8006d56:	bf00      	nop
 8006d58:	080085e0 	.word	0x080085e0
 8006d5c:	0800866c 	.word	0x0800866c

08006d60 <__pow5mult>:
 8006d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d64:	4615      	mov	r5, r2
 8006d66:	f012 0203 	ands.w	r2, r2, #3
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	460f      	mov	r7, r1
 8006d6e:	d007      	beq.n	8006d80 <__pow5mult+0x20>
 8006d70:	4c25      	ldr	r4, [pc, #148]	; (8006e08 <__pow5mult+0xa8>)
 8006d72:	3a01      	subs	r2, #1
 8006d74:	2300      	movs	r3, #0
 8006d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d7a:	f7ff fe51 	bl	8006a20 <__multadd>
 8006d7e:	4607      	mov	r7, r0
 8006d80:	10ad      	asrs	r5, r5, #2
 8006d82:	d03d      	beq.n	8006e00 <__pow5mult+0xa0>
 8006d84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d86:	b97c      	cbnz	r4, 8006da8 <__pow5mult+0x48>
 8006d88:	2010      	movs	r0, #16
 8006d8a:	f7ff fdbf 	bl	800690c <malloc>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6270      	str	r0, [r6, #36]	; 0x24
 8006d92:	b928      	cbnz	r0, 8006da0 <__pow5mult+0x40>
 8006d94:	4b1d      	ldr	r3, [pc, #116]	; (8006e0c <__pow5mult+0xac>)
 8006d96:	481e      	ldr	r0, [pc, #120]	; (8006e10 <__pow5mult+0xb0>)
 8006d98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d9c:	f000 fd2e 	bl	80077fc <__assert_func>
 8006da0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006da4:	6004      	str	r4, [r0, #0]
 8006da6:	60c4      	str	r4, [r0, #12]
 8006da8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006dac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006db0:	b94c      	cbnz	r4, 8006dc6 <__pow5mult+0x66>
 8006db2:	f240 2171 	movw	r1, #625	; 0x271
 8006db6:	4630      	mov	r0, r6
 8006db8:	f7ff ff12 	bl	8006be0 <__i2b>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	6003      	str	r3, [r0, #0]
 8006dc6:	f04f 0900 	mov.w	r9, #0
 8006dca:	07eb      	lsls	r3, r5, #31
 8006dcc:	d50a      	bpl.n	8006de4 <__pow5mult+0x84>
 8006dce:	4639      	mov	r1, r7
 8006dd0:	4622      	mov	r2, r4
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7ff ff1a 	bl	8006c0c <__multiply>
 8006dd8:	4639      	mov	r1, r7
 8006dda:	4680      	mov	r8, r0
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7ff fdfd 	bl	80069dc <_Bfree>
 8006de2:	4647      	mov	r7, r8
 8006de4:	106d      	asrs	r5, r5, #1
 8006de6:	d00b      	beq.n	8006e00 <__pow5mult+0xa0>
 8006de8:	6820      	ldr	r0, [r4, #0]
 8006dea:	b938      	cbnz	r0, 8006dfc <__pow5mult+0x9c>
 8006dec:	4622      	mov	r2, r4
 8006dee:	4621      	mov	r1, r4
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7ff ff0b 	bl	8006c0c <__multiply>
 8006df6:	6020      	str	r0, [r4, #0]
 8006df8:	f8c0 9000 	str.w	r9, [r0]
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	e7e4      	b.n	8006dca <__pow5mult+0x6a>
 8006e00:	4638      	mov	r0, r7
 8006e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e06:	bf00      	nop
 8006e08:	080087b8 	.word	0x080087b8
 8006e0c:	0800856e 	.word	0x0800856e
 8006e10:	0800866c 	.word	0x0800866c

08006e14 <__lshift>:
 8006e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6849      	ldr	r1, [r1, #4]
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e22:	68a3      	ldr	r3, [r4, #8]
 8006e24:	4607      	mov	r7, r0
 8006e26:	4691      	mov	r9, r2
 8006e28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e2c:	f108 0601 	add.w	r6, r8, #1
 8006e30:	42b3      	cmp	r3, r6
 8006e32:	db0b      	blt.n	8006e4c <__lshift+0x38>
 8006e34:	4638      	mov	r0, r7
 8006e36:	f7ff fd91 	bl	800695c <_Balloc>
 8006e3a:	4605      	mov	r5, r0
 8006e3c:	b948      	cbnz	r0, 8006e52 <__lshift+0x3e>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	4b2a      	ldr	r3, [pc, #168]	; (8006eec <__lshift+0xd8>)
 8006e42:	482b      	ldr	r0, [pc, #172]	; (8006ef0 <__lshift+0xdc>)
 8006e44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e48:	f000 fcd8 	bl	80077fc <__assert_func>
 8006e4c:	3101      	adds	r1, #1
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	e7ee      	b.n	8006e30 <__lshift+0x1c>
 8006e52:	2300      	movs	r3, #0
 8006e54:	f100 0114 	add.w	r1, r0, #20
 8006e58:	f100 0210 	add.w	r2, r0, #16
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	4553      	cmp	r3, sl
 8006e60:	db37      	blt.n	8006ed2 <__lshift+0xbe>
 8006e62:	6920      	ldr	r0, [r4, #16]
 8006e64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e68:	f104 0314 	add.w	r3, r4, #20
 8006e6c:	f019 091f 	ands.w	r9, r9, #31
 8006e70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e78:	d02f      	beq.n	8006eda <__lshift+0xc6>
 8006e7a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e7e:	468a      	mov	sl, r1
 8006e80:	f04f 0c00 	mov.w	ip, #0
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	fa02 f209 	lsl.w	r2, r2, r9
 8006e8a:	ea42 020c 	orr.w	r2, r2, ip
 8006e8e:	f84a 2b04 	str.w	r2, [sl], #4
 8006e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e96:	4298      	cmp	r0, r3
 8006e98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e9c:	d8f2      	bhi.n	8006e84 <__lshift+0x70>
 8006e9e:	1b03      	subs	r3, r0, r4
 8006ea0:	3b15      	subs	r3, #21
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	f104 0215 	add.w	r2, r4, #21
 8006eac:	4290      	cmp	r0, r2
 8006eae:	bf38      	it	cc
 8006eb0:	2304      	movcc	r3, #4
 8006eb2:	f841 c003 	str.w	ip, [r1, r3]
 8006eb6:	f1bc 0f00 	cmp.w	ip, #0
 8006eba:	d001      	beq.n	8006ec0 <__lshift+0xac>
 8006ebc:	f108 0602 	add.w	r6, r8, #2
 8006ec0:	3e01      	subs	r6, #1
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	612e      	str	r6, [r5, #16]
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	f7ff fd88 	bl	80069dc <_Bfree>
 8006ecc:	4628      	mov	r0, r5
 8006ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	e7c1      	b.n	8006e5e <__lshift+0x4a>
 8006eda:	3904      	subs	r1, #4
 8006edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ee4:	4298      	cmp	r0, r3
 8006ee6:	d8f9      	bhi.n	8006edc <__lshift+0xc8>
 8006ee8:	e7ea      	b.n	8006ec0 <__lshift+0xac>
 8006eea:	bf00      	nop
 8006eec:	080085e0 	.word	0x080085e0
 8006ef0:	0800866c 	.word	0x0800866c

08006ef4 <__mcmp>:
 8006ef4:	b530      	push	{r4, r5, lr}
 8006ef6:	6902      	ldr	r2, [r0, #16]
 8006ef8:	690c      	ldr	r4, [r1, #16]
 8006efa:	1b12      	subs	r2, r2, r4
 8006efc:	d10e      	bne.n	8006f1c <__mcmp+0x28>
 8006efe:	f100 0314 	add.w	r3, r0, #20
 8006f02:	3114      	adds	r1, #20
 8006f04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f14:	42a5      	cmp	r5, r4
 8006f16:	d003      	beq.n	8006f20 <__mcmp+0x2c>
 8006f18:	d305      	bcc.n	8006f26 <__mcmp+0x32>
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	bd30      	pop	{r4, r5, pc}
 8006f20:	4283      	cmp	r3, r0
 8006f22:	d3f3      	bcc.n	8006f0c <__mcmp+0x18>
 8006f24:	e7fa      	b.n	8006f1c <__mcmp+0x28>
 8006f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f2a:	e7f7      	b.n	8006f1c <__mcmp+0x28>

08006f2c <__mdiff>:
 8006f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	460c      	mov	r4, r1
 8006f32:	4606      	mov	r6, r0
 8006f34:	4611      	mov	r1, r2
 8006f36:	4620      	mov	r0, r4
 8006f38:	4690      	mov	r8, r2
 8006f3a:	f7ff ffdb 	bl	8006ef4 <__mcmp>
 8006f3e:	1e05      	subs	r5, r0, #0
 8006f40:	d110      	bne.n	8006f64 <__mdiff+0x38>
 8006f42:	4629      	mov	r1, r5
 8006f44:	4630      	mov	r0, r6
 8006f46:	f7ff fd09 	bl	800695c <_Balloc>
 8006f4a:	b930      	cbnz	r0, 8006f5a <__mdiff+0x2e>
 8006f4c:	4b3a      	ldr	r3, [pc, #232]	; (8007038 <__mdiff+0x10c>)
 8006f4e:	4602      	mov	r2, r0
 8006f50:	f240 2132 	movw	r1, #562	; 0x232
 8006f54:	4839      	ldr	r0, [pc, #228]	; (800703c <__mdiff+0x110>)
 8006f56:	f000 fc51 	bl	80077fc <__assert_func>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f64:	bfa4      	itt	ge
 8006f66:	4643      	movge	r3, r8
 8006f68:	46a0      	movge	r8, r4
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f70:	bfa6      	itte	ge
 8006f72:	461c      	movge	r4, r3
 8006f74:	2500      	movge	r5, #0
 8006f76:	2501      	movlt	r5, #1
 8006f78:	f7ff fcf0 	bl	800695c <_Balloc>
 8006f7c:	b920      	cbnz	r0, 8006f88 <__mdiff+0x5c>
 8006f7e:	4b2e      	ldr	r3, [pc, #184]	; (8007038 <__mdiff+0x10c>)
 8006f80:	4602      	mov	r2, r0
 8006f82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f86:	e7e5      	b.n	8006f54 <__mdiff+0x28>
 8006f88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f8c:	6926      	ldr	r6, [r4, #16]
 8006f8e:	60c5      	str	r5, [r0, #12]
 8006f90:	f104 0914 	add.w	r9, r4, #20
 8006f94:	f108 0514 	add.w	r5, r8, #20
 8006f98:	f100 0e14 	add.w	lr, r0, #20
 8006f9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006fa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006fa4:	f108 0210 	add.w	r2, r8, #16
 8006fa8:	46f2      	mov	sl, lr
 8006faa:	2100      	movs	r1, #0
 8006fac:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006fb4:	fa1f f883 	uxth.w	r8, r3
 8006fb8:	fa11 f18b 	uxtah	r1, r1, fp
 8006fbc:	0c1b      	lsrs	r3, r3, #16
 8006fbe:	eba1 0808 	sub.w	r8, r1, r8
 8006fc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006fc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006fca:	fa1f f888 	uxth.w	r8, r8
 8006fce:	1419      	asrs	r1, r3, #16
 8006fd0:	454e      	cmp	r6, r9
 8006fd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006fd6:	f84a 3b04 	str.w	r3, [sl], #4
 8006fda:	d8e7      	bhi.n	8006fac <__mdiff+0x80>
 8006fdc:	1b33      	subs	r3, r6, r4
 8006fde:	3b15      	subs	r3, #21
 8006fe0:	f023 0303 	bic.w	r3, r3, #3
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	3415      	adds	r4, #21
 8006fe8:	42a6      	cmp	r6, r4
 8006fea:	bf38      	it	cc
 8006fec:	2304      	movcc	r3, #4
 8006fee:	441d      	add	r5, r3
 8006ff0:	4473      	add	r3, lr
 8006ff2:	469e      	mov	lr, r3
 8006ff4:	462e      	mov	r6, r5
 8006ff6:	4566      	cmp	r6, ip
 8006ff8:	d30e      	bcc.n	8007018 <__mdiff+0xec>
 8006ffa:	f10c 0203 	add.w	r2, ip, #3
 8006ffe:	1b52      	subs	r2, r2, r5
 8007000:	f022 0203 	bic.w	r2, r2, #3
 8007004:	3d03      	subs	r5, #3
 8007006:	45ac      	cmp	ip, r5
 8007008:	bf38      	it	cc
 800700a:	2200      	movcc	r2, #0
 800700c:	441a      	add	r2, r3
 800700e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007012:	b17b      	cbz	r3, 8007034 <__mdiff+0x108>
 8007014:	6107      	str	r7, [r0, #16]
 8007016:	e7a3      	b.n	8006f60 <__mdiff+0x34>
 8007018:	f856 8b04 	ldr.w	r8, [r6], #4
 800701c:	fa11 f288 	uxtah	r2, r1, r8
 8007020:	1414      	asrs	r4, r2, #16
 8007022:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007026:	b292      	uxth	r2, r2
 8007028:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800702c:	f84e 2b04 	str.w	r2, [lr], #4
 8007030:	1421      	asrs	r1, r4, #16
 8007032:	e7e0      	b.n	8006ff6 <__mdiff+0xca>
 8007034:	3f01      	subs	r7, #1
 8007036:	e7ea      	b.n	800700e <__mdiff+0xe2>
 8007038:	080085e0 	.word	0x080085e0
 800703c:	0800866c 	.word	0x0800866c

08007040 <__ulp>:
 8007040:	b082      	sub	sp, #8
 8007042:	ed8d 0b00 	vstr	d0, [sp]
 8007046:	9b01      	ldr	r3, [sp, #4]
 8007048:	4912      	ldr	r1, [pc, #72]	; (8007094 <__ulp+0x54>)
 800704a:	4019      	ands	r1, r3
 800704c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007050:	2900      	cmp	r1, #0
 8007052:	dd05      	ble.n	8007060 <__ulp+0x20>
 8007054:	2200      	movs	r2, #0
 8007056:	460b      	mov	r3, r1
 8007058:	ec43 2b10 	vmov	d0, r2, r3
 800705c:	b002      	add	sp, #8
 800705e:	4770      	bx	lr
 8007060:	4249      	negs	r1, r1
 8007062:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007066:	ea4f 5021 	mov.w	r0, r1, asr #20
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	f04f 0300 	mov.w	r3, #0
 8007072:	da04      	bge.n	800707e <__ulp+0x3e>
 8007074:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007078:	fa41 f300 	asr.w	r3, r1, r0
 800707c:	e7ec      	b.n	8007058 <__ulp+0x18>
 800707e:	f1a0 0114 	sub.w	r1, r0, #20
 8007082:	291e      	cmp	r1, #30
 8007084:	bfda      	itte	le
 8007086:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800708a:	fa20 f101 	lsrle.w	r1, r0, r1
 800708e:	2101      	movgt	r1, #1
 8007090:	460a      	mov	r2, r1
 8007092:	e7e1      	b.n	8007058 <__ulp+0x18>
 8007094:	7ff00000 	.word	0x7ff00000

08007098 <__b2d>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	6905      	ldr	r5, [r0, #16]
 800709c:	f100 0714 	add.w	r7, r0, #20
 80070a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80070a4:	1f2e      	subs	r6, r5, #4
 80070a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80070aa:	4620      	mov	r0, r4
 80070ac:	f7ff fd48 	bl	8006b40 <__hi0bits>
 80070b0:	f1c0 0320 	rsb	r3, r0, #32
 80070b4:	280a      	cmp	r0, #10
 80070b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007134 <__b2d+0x9c>
 80070ba:	600b      	str	r3, [r1, #0]
 80070bc:	dc14      	bgt.n	80070e8 <__b2d+0x50>
 80070be:	f1c0 0e0b 	rsb	lr, r0, #11
 80070c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80070c6:	42b7      	cmp	r7, r6
 80070c8:	ea41 030c 	orr.w	r3, r1, ip
 80070cc:	bf34      	ite	cc
 80070ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80070d2:	2100      	movcs	r1, #0
 80070d4:	3015      	adds	r0, #21
 80070d6:	fa04 f000 	lsl.w	r0, r4, r0
 80070da:	fa21 f10e 	lsr.w	r1, r1, lr
 80070de:	ea40 0201 	orr.w	r2, r0, r1
 80070e2:	ec43 2b10 	vmov	d0, r2, r3
 80070e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e8:	42b7      	cmp	r7, r6
 80070ea:	bf3a      	itte	cc
 80070ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80070f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80070f4:	2100      	movcs	r1, #0
 80070f6:	380b      	subs	r0, #11
 80070f8:	d017      	beq.n	800712a <__b2d+0x92>
 80070fa:	f1c0 0c20 	rsb	ip, r0, #32
 80070fe:	fa04 f500 	lsl.w	r5, r4, r0
 8007102:	42be      	cmp	r6, r7
 8007104:	fa21 f40c 	lsr.w	r4, r1, ip
 8007108:	ea45 0504 	orr.w	r5, r5, r4
 800710c:	bf8c      	ite	hi
 800710e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007112:	2400      	movls	r4, #0
 8007114:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007118:	fa01 f000 	lsl.w	r0, r1, r0
 800711c:	fa24 f40c 	lsr.w	r4, r4, ip
 8007120:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007124:	ea40 0204 	orr.w	r2, r0, r4
 8007128:	e7db      	b.n	80070e2 <__b2d+0x4a>
 800712a:	ea44 030c 	orr.w	r3, r4, ip
 800712e:	460a      	mov	r2, r1
 8007130:	e7d7      	b.n	80070e2 <__b2d+0x4a>
 8007132:	bf00      	nop
 8007134:	3ff00000 	.word	0x3ff00000

08007138 <__d2b>:
 8007138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800713c:	4689      	mov	r9, r1
 800713e:	2101      	movs	r1, #1
 8007140:	ec57 6b10 	vmov	r6, r7, d0
 8007144:	4690      	mov	r8, r2
 8007146:	f7ff fc09 	bl	800695c <_Balloc>
 800714a:	4604      	mov	r4, r0
 800714c:	b930      	cbnz	r0, 800715c <__d2b+0x24>
 800714e:	4602      	mov	r2, r0
 8007150:	4b25      	ldr	r3, [pc, #148]	; (80071e8 <__d2b+0xb0>)
 8007152:	4826      	ldr	r0, [pc, #152]	; (80071ec <__d2b+0xb4>)
 8007154:	f240 310a 	movw	r1, #778	; 0x30a
 8007158:	f000 fb50 	bl	80077fc <__assert_func>
 800715c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007160:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007164:	bb35      	cbnz	r5, 80071b4 <__d2b+0x7c>
 8007166:	2e00      	cmp	r6, #0
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	d028      	beq.n	80071be <__d2b+0x86>
 800716c:	4668      	mov	r0, sp
 800716e:	9600      	str	r6, [sp, #0]
 8007170:	f7ff fd06 	bl	8006b80 <__lo0bits>
 8007174:	9900      	ldr	r1, [sp, #0]
 8007176:	b300      	cbz	r0, 80071ba <__d2b+0x82>
 8007178:	9a01      	ldr	r2, [sp, #4]
 800717a:	f1c0 0320 	rsb	r3, r0, #32
 800717e:	fa02 f303 	lsl.w	r3, r2, r3
 8007182:	430b      	orrs	r3, r1
 8007184:	40c2      	lsrs	r2, r0
 8007186:	6163      	str	r3, [r4, #20]
 8007188:	9201      	str	r2, [sp, #4]
 800718a:	9b01      	ldr	r3, [sp, #4]
 800718c:	61a3      	str	r3, [r4, #24]
 800718e:	2b00      	cmp	r3, #0
 8007190:	bf14      	ite	ne
 8007192:	2202      	movne	r2, #2
 8007194:	2201      	moveq	r2, #1
 8007196:	6122      	str	r2, [r4, #16]
 8007198:	b1d5      	cbz	r5, 80071d0 <__d2b+0x98>
 800719a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800719e:	4405      	add	r5, r0
 80071a0:	f8c9 5000 	str.w	r5, [r9]
 80071a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071a8:	f8c8 0000 	str.w	r0, [r8]
 80071ac:	4620      	mov	r0, r4
 80071ae:	b003      	add	sp, #12
 80071b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071b8:	e7d5      	b.n	8007166 <__d2b+0x2e>
 80071ba:	6161      	str	r1, [r4, #20]
 80071bc:	e7e5      	b.n	800718a <__d2b+0x52>
 80071be:	a801      	add	r0, sp, #4
 80071c0:	f7ff fcde 	bl	8006b80 <__lo0bits>
 80071c4:	9b01      	ldr	r3, [sp, #4]
 80071c6:	6163      	str	r3, [r4, #20]
 80071c8:	2201      	movs	r2, #1
 80071ca:	6122      	str	r2, [r4, #16]
 80071cc:	3020      	adds	r0, #32
 80071ce:	e7e3      	b.n	8007198 <__d2b+0x60>
 80071d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071d8:	f8c9 0000 	str.w	r0, [r9]
 80071dc:	6918      	ldr	r0, [r3, #16]
 80071de:	f7ff fcaf 	bl	8006b40 <__hi0bits>
 80071e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071e6:	e7df      	b.n	80071a8 <__d2b+0x70>
 80071e8:	080085e0 	.word	0x080085e0
 80071ec:	0800866c 	.word	0x0800866c

080071f0 <__ratio>:
 80071f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	4688      	mov	r8, r1
 80071f6:	4669      	mov	r1, sp
 80071f8:	4681      	mov	r9, r0
 80071fa:	f7ff ff4d 	bl	8007098 <__b2d>
 80071fe:	a901      	add	r1, sp, #4
 8007200:	4640      	mov	r0, r8
 8007202:	ec55 4b10 	vmov	r4, r5, d0
 8007206:	f7ff ff47 	bl	8007098 <__b2d>
 800720a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800720e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007212:	eba3 0c02 	sub.w	ip, r3, r2
 8007216:	e9dd 3200 	ldrd	r3, r2, [sp]
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007220:	ec51 0b10 	vmov	r0, r1, d0
 8007224:	2b00      	cmp	r3, #0
 8007226:	bfd6      	itet	le
 8007228:	460a      	movle	r2, r1
 800722a:	462a      	movgt	r2, r5
 800722c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007230:	468b      	mov	fp, r1
 8007232:	462f      	mov	r7, r5
 8007234:	bfd4      	ite	le
 8007236:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800723a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800723e:	4620      	mov	r0, r4
 8007240:	ee10 2a10 	vmov	r2, s0
 8007244:	465b      	mov	r3, fp
 8007246:	4639      	mov	r1, r7
 8007248:	f7f9 fb00 	bl	800084c <__aeabi_ddiv>
 800724c:	ec41 0b10 	vmov	d0, r0, r1
 8007250:	b003      	add	sp, #12
 8007252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007256 <__copybits>:
 8007256:	3901      	subs	r1, #1
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	1149      	asrs	r1, r1, #5
 800725c:	6914      	ldr	r4, [r2, #16]
 800725e:	3101      	adds	r1, #1
 8007260:	f102 0314 	add.w	r3, r2, #20
 8007264:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007268:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800726c:	1f05      	subs	r5, r0, #4
 800726e:	42a3      	cmp	r3, r4
 8007270:	d30c      	bcc.n	800728c <__copybits+0x36>
 8007272:	1aa3      	subs	r3, r4, r2
 8007274:	3b11      	subs	r3, #17
 8007276:	f023 0303 	bic.w	r3, r3, #3
 800727a:	3211      	adds	r2, #17
 800727c:	42a2      	cmp	r2, r4
 800727e:	bf88      	it	hi
 8007280:	2300      	movhi	r3, #0
 8007282:	4418      	add	r0, r3
 8007284:	2300      	movs	r3, #0
 8007286:	4288      	cmp	r0, r1
 8007288:	d305      	bcc.n	8007296 <__copybits+0x40>
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007290:	f845 6f04 	str.w	r6, [r5, #4]!
 8007294:	e7eb      	b.n	800726e <__copybits+0x18>
 8007296:	f840 3b04 	str.w	r3, [r0], #4
 800729a:	e7f4      	b.n	8007286 <__copybits+0x30>

0800729c <__any_on>:
 800729c:	f100 0214 	add.w	r2, r0, #20
 80072a0:	6900      	ldr	r0, [r0, #16]
 80072a2:	114b      	asrs	r3, r1, #5
 80072a4:	4298      	cmp	r0, r3
 80072a6:	b510      	push	{r4, lr}
 80072a8:	db11      	blt.n	80072ce <__any_on+0x32>
 80072aa:	dd0a      	ble.n	80072c2 <__any_on+0x26>
 80072ac:	f011 011f 	ands.w	r1, r1, #31
 80072b0:	d007      	beq.n	80072c2 <__any_on+0x26>
 80072b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80072b6:	fa24 f001 	lsr.w	r0, r4, r1
 80072ba:	fa00 f101 	lsl.w	r1, r0, r1
 80072be:	428c      	cmp	r4, r1
 80072c0:	d10b      	bne.n	80072da <__any_on+0x3e>
 80072c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d803      	bhi.n	80072d2 <__any_on+0x36>
 80072ca:	2000      	movs	r0, #0
 80072cc:	bd10      	pop	{r4, pc}
 80072ce:	4603      	mov	r3, r0
 80072d0:	e7f7      	b.n	80072c2 <__any_on+0x26>
 80072d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072d6:	2900      	cmp	r1, #0
 80072d8:	d0f5      	beq.n	80072c6 <__any_on+0x2a>
 80072da:	2001      	movs	r0, #1
 80072dc:	e7f6      	b.n	80072cc <__any_on+0x30>

080072de <_calloc_r>:
 80072de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072e0:	fba1 2402 	umull	r2, r4, r1, r2
 80072e4:	b94c      	cbnz	r4, 80072fa <_calloc_r+0x1c>
 80072e6:	4611      	mov	r1, r2
 80072e8:	9201      	str	r2, [sp, #4]
 80072ea:	f000 f87b 	bl	80073e4 <_malloc_r>
 80072ee:	9a01      	ldr	r2, [sp, #4]
 80072f0:	4605      	mov	r5, r0
 80072f2:	b930      	cbnz	r0, 8007302 <_calloc_r+0x24>
 80072f4:	4628      	mov	r0, r5
 80072f6:	b003      	add	sp, #12
 80072f8:	bd30      	pop	{r4, r5, pc}
 80072fa:	220c      	movs	r2, #12
 80072fc:	6002      	str	r2, [r0, #0]
 80072fe:	2500      	movs	r5, #0
 8007300:	e7f8      	b.n	80072f4 <_calloc_r+0x16>
 8007302:	4621      	mov	r1, r4
 8007304:	f7fc fbc0 	bl	8003a88 <memset>
 8007308:	e7f4      	b.n	80072f4 <_calloc_r+0x16>
	...

0800730c <_free_r>:
 800730c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800730e:	2900      	cmp	r1, #0
 8007310:	d044      	beq.n	800739c <_free_r+0x90>
 8007312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007316:	9001      	str	r0, [sp, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f1a1 0404 	sub.w	r4, r1, #4
 800731e:	bfb8      	it	lt
 8007320:	18e4      	addlt	r4, r4, r3
 8007322:	f000 fab5 	bl	8007890 <__malloc_lock>
 8007326:	4a1e      	ldr	r2, [pc, #120]	; (80073a0 <_free_r+0x94>)
 8007328:	9801      	ldr	r0, [sp, #4]
 800732a:	6813      	ldr	r3, [r2, #0]
 800732c:	b933      	cbnz	r3, 800733c <_free_r+0x30>
 800732e:	6063      	str	r3, [r4, #4]
 8007330:	6014      	str	r4, [r2, #0]
 8007332:	b003      	add	sp, #12
 8007334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007338:	f000 bab0 	b.w	800789c <__malloc_unlock>
 800733c:	42a3      	cmp	r3, r4
 800733e:	d908      	bls.n	8007352 <_free_r+0x46>
 8007340:	6825      	ldr	r5, [r4, #0]
 8007342:	1961      	adds	r1, r4, r5
 8007344:	428b      	cmp	r3, r1
 8007346:	bf01      	itttt	eq
 8007348:	6819      	ldreq	r1, [r3, #0]
 800734a:	685b      	ldreq	r3, [r3, #4]
 800734c:	1949      	addeq	r1, r1, r5
 800734e:	6021      	streq	r1, [r4, #0]
 8007350:	e7ed      	b.n	800732e <_free_r+0x22>
 8007352:	461a      	mov	r2, r3
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	b10b      	cbz	r3, 800735c <_free_r+0x50>
 8007358:	42a3      	cmp	r3, r4
 800735a:	d9fa      	bls.n	8007352 <_free_r+0x46>
 800735c:	6811      	ldr	r1, [r2, #0]
 800735e:	1855      	adds	r5, r2, r1
 8007360:	42a5      	cmp	r5, r4
 8007362:	d10b      	bne.n	800737c <_free_r+0x70>
 8007364:	6824      	ldr	r4, [r4, #0]
 8007366:	4421      	add	r1, r4
 8007368:	1854      	adds	r4, r2, r1
 800736a:	42a3      	cmp	r3, r4
 800736c:	6011      	str	r1, [r2, #0]
 800736e:	d1e0      	bne.n	8007332 <_free_r+0x26>
 8007370:	681c      	ldr	r4, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	6053      	str	r3, [r2, #4]
 8007376:	4421      	add	r1, r4
 8007378:	6011      	str	r1, [r2, #0]
 800737a:	e7da      	b.n	8007332 <_free_r+0x26>
 800737c:	d902      	bls.n	8007384 <_free_r+0x78>
 800737e:	230c      	movs	r3, #12
 8007380:	6003      	str	r3, [r0, #0]
 8007382:	e7d6      	b.n	8007332 <_free_r+0x26>
 8007384:	6825      	ldr	r5, [r4, #0]
 8007386:	1961      	adds	r1, r4, r5
 8007388:	428b      	cmp	r3, r1
 800738a:	bf04      	itt	eq
 800738c:	6819      	ldreq	r1, [r3, #0]
 800738e:	685b      	ldreq	r3, [r3, #4]
 8007390:	6063      	str	r3, [r4, #4]
 8007392:	bf04      	itt	eq
 8007394:	1949      	addeq	r1, r1, r5
 8007396:	6021      	streq	r1, [r4, #0]
 8007398:	6054      	str	r4, [r2, #4]
 800739a:	e7ca      	b.n	8007332 <_free_r+0x26>
 800739c:	b003      	add	sp, #12
 800739e:	bd30      	pop	{r4, r5, pc}
 80073a0:	200002d4 	.word	0x200002d4

080073a4 <sbrk_aligned>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	4e0e      	ldr	r6, [pc, #56]	; (80073e0 <sbrk_aligned+0x3c>)
 80073a8:	460c      	mov	r4, r1
 80073aa:	6831      	ldr	r1, [r6, #0]
 80073ac:	4605      	mov	r5, r0
 80073ae:	b911      	cbnz	r1, 80073b6 <sbrk_aligned+0x12>
 80073b0:	f000 f9f2 	bl	8007798 <_sbrk_r>
 80073b4:	6030      	str	r0, [r6, #0]
 80073b6:	4621      	mov	r1, r4
 80073b8:	4628      	mov	r0, r5
 80073ba:	f000 f9ed 	bl	8007798 <_sbrk_r>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	d00a      	beq.n	80073d8 <sbrk_aligned+0x34>
 80073c2:	1cc4      	adds	r4, r0, #3
 80073c4:	f024 0403 	bic.w	r4, r4, #3
 80073c8:	42a0      	cmp	r0, r4
 80073ca:	d007      	beq.n	80073dc <sbrk_aligned+0x38>
 80073cc:	1a21      	subs	r1, r4, r0
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 f9e2 	bl	8007798 <_sbrk_r>
 80073d4:	3001      	adds	r0, #1
 80073d6:	d101      	bne.n	80073dc <sbrk_aligned+0x38>
 80073d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80073dc:	4620      	mov	r0, r4
 80073de:	bd70      	pop	{r4, r5, r6, pc}
 80073e0:	200002d8 	.word	0x200002d8

080073e4 <_malloc_r>:
 80073e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e8:	1ccd      	adds	r5, r1, #3
 80073ea:	f025 0503 	bic.w	r5, r5, #3
 80073ee:	3508      	adds	r5, #8
 80073f0:	2d0c      	cmp	r5, #12
 80073f2:	bf38      	it	cc
 80073f4:	250c      	movcc	r5, #12
 80073f6:	2d00      	cmp	r5, #0
 80073f8:	4607      	mov	r7, r0
 80073fa:	db01      	blt.n	8007400 <_malloc_r+0x1c>
 80073fc:	42a9      	cmp	r1, r5
 80073fe:	d905      	bls.n	800740c <_malloc_r+0x28>
 8007400:	230c      	movs	r3, #12
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	2600      	movs	r6, #0
 8007406:	4630      	mov	r0, r6
 8007408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800740c:	4e2e      	ldr	r6, [pc, #184]	; (80074c8 <_malloc_r+0xe4>)
 800740e:	f000 fa3f 	bl	8007890 <__malloc_lock>
 8007412:	6833      	ldr	r3, [r6, #0]
 8007414:	461c      	mov	r4, r3
 8007416:	bb34      	cbnz	r4, 8007466 <_malloc_r+0x82>
 8007418:	4629      	mov	r1, r5
 800741a:	4638      	mov	r0, r7
 800741c:	f7ff ffc2 	bl	80073a4 <sbrk_aligned>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	4604      	mov	r4, r0
 8007424:	d14d      	bne.n	80074c2 <_malloc_r+0xde>
 8007426:	6834      	ldr	r4, [r6, #0]
 8007428:	4626      	mov	r6, r4
 800742a:	2e00      	cmp	r6, #0
 800742c:	d140      	bne.n	80074b0 <_malloc_r+0xcc>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	4631      	mov	r1, r6
 8007432:	4638      	mov	r0, r7
 8007434:	eb04 0803 	add.w	r8, r4, r3
 8007438:	f000 f9ae 	bl	8007798 <_sbrk_r>
 800743c:	4580      	cmp	r8, r0
 800743e:	d13a      	bne.n	80074b6 <_malloc_r+0xd2>
 8007440:	6821      	ldr	r1, [r4, #0]
 8007442:	3503      	adds	r5, #3
 8007444:	1a6d      	subs	r5, r5, r1
 8007446:	f025 0503 	bic.w	r5, r5, #3
 800744a:	3508      	adds	r5, #8
 800744c:	2d0c      	cmp	r5, #12
 800744e:	bf38      	it	cc
 8007450:	250c      	movcc	r5, #12
 8007452:	4629      	mov	r1, r5
 8007454:	4638      	mov	r0, r7
 8007456:	f7ff ffa5 	bl	80073a4 <sbrk_aligned>
 800745a:	3001      	adds	r0, #1
 800745c:	d02b      	beq.n	80074b6 <_malloc_r+0xd2>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	442b      	add	r3, r5
 8007462:	6023      	str	r3, [r4, #0]
 8007464:	e00e      	b.n	8007484 <_malloc_r+0xa0>
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	1b52      	subs	r2, r2, r5
 800746a:	d41e      	bmi.n	80074aa <_malloc_r+0xc6>
 800746c:	2a0b      	cmp	r2, #11
 800746e:	d916      	bls.n	800749e <_malloc_r+0xba>
 8007470:	1961      	adds	r1, r4, r5
 8007472:	42a3      	cmp	r3, r4
 8007474:	6025      	str	r5, [r4, #0]
 8007476:	bf18      	it	ne
 8007478:	6059      	strne	r1, [r3, #4]
 800747a:	6863      	ldr	r3, [r4, #4]
 800747c:	bf08      	it	eq
 800747e:	6031      	streq	r1, [r6, #0]
 8007480:	5162      	str	r2, [r4, r5]
 8007482:	604b      	str	r3, [r1, #4]
 8007484:	4638      	mov	r0, r7
 8007486:	f104 060b 	add.w	r6, r4, #11
 800748a:	f000 fa07 	bl	800789c <__malloc_unlock>
 800748e:	f026 0607 	bic.w	r6, r6, #7
 8007492:	1d23      	adds	r3, r4, #4
 8007494:	1af2      	subs	r2, r6, r3
 8007496:	d0b6      	beq.n	8007406 <_malloc_r+0x22>
 8007498:	1b9b      	subs	r3, r3, r6
 800749a:	50a3      	str	r3, [r4, r2]
 800749c:	e7b3      	b.n	8007406 <_malloc_r+0x22>
 800749e:	6862      	ldr	r2, [r4, #4]
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	bf0c      	ite	eq
 80074a4:	6032      	streq	r2, [r6, #0]
 80074a6:	605a      	strne	r2, [r3, #4]
 80074a8:	e7ec      	b.n	8007484 <_malloc_r+0xa0>
 80074aa:	4623      	mov	r3, r4
 80074ac:	6864      	ldr	r4, [r4, #4]
 80074ae:	e7b2      	b.n	8007416 <_malloc_r+0x32>
 80074b0:	4634      	mov	r4, r6
 80074b2:	6876      	ldr	r6, [r6, #4]
 80074b4:	e7b9      	b.n	800742a <_malloc_r+0x46>
 80074b6:	230c      	movs	r3, #12
 80074b8:	603b      	str	r3, [r7, #0]
 80074ba:	4638      	mov	r0, r7
 80074bc:	f000 f9ee 	bl	800789c <__malloc_unlock>
 80074c0:	e7a1      	b.n	8007406 <_malloc_r+0x22>
 80074c2:	6025      	str	r5, [r4, #0]
 80074c4:	e7de      	b.n	8007484 <_malloc_r+0xa0>
 80074c6:	bf00      	nop
 80074c8:	200002d4 	.word	0x200002d4

080074cc <__ssputs_r>:
 80074cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d0:	688e      	ldr	r6, [r1, #8]
 80074d2:	429e      	cmp	r6, r3
 80074d4:	4682      	mov	sl, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	4690      	mov	r8, r2
 80074da:	461f      	mov	r7, r3
 80074dc:	d838      	bhi.n	8007550 <__ssputs_r+0x84>
 80074de:	898a      	ldrh	r2, [r1, #12]
 80074e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074e4:	d032      	beq.n	800754c <__ssputs_r+0x80>
 80074e6:	6825      	ldr	r5, [r4, #0]
 80074e8:	6909      	ldr	r1, [r1, #16]
 80074ea:	eba5 0901 	sub.w	r9, r5, r1
 80074ee:	6965      	ldr	r5, [r4, #20]
 80074f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074f8:	3301      	adds	r3, #1
 80074fa:	444b      	add	r3, r9
 80074fc:	106d      	asrs	r5, r5, #1
 80074fe:	429d      	cmp	r5, r3
 8007500:	bf38      	it	cc
 8007502:	461d      	movcc	r5, r3
 8007504:	0553      	lsls	r3, r2, #21
 8007506:	d531      	bpl.n	800756c <__ssputs_r+0xa0>
 8007508:	4629      	mov	r1, r5
 800750a:	f7ff ff6b 	bl	80073e4 <_malloc_r>
 800750e:	4606      	mov	r6, r0
 8007510:	b950      	cbnz	r0, 8007528 <__ssputs_r+0x5c>
 8007512:	230c      	movs	r3, #12
 8007514:	f8ca 3000 	str.w	r3, [sl]
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751e:	81a3      	strh	r3, [r4, #12]
 8007520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007528:	6921      	ldr	r1, [r4, #16]
 800752a:	464a      	mov	r2, r9
 800752c:	f7ff fa08 	bl	8006940 <memcpy>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	6126      	str	r6, [r4, #16]
 800753e:	6165      	str	r5, [r4, #20]
 8007540:	444e      	add	r6, r9
 8007542:	eba5 0509 	sub.w	r5, r5, r9
 8007546:	6026      	str	r6, [r4, #0]
 8007548:	60a5      	str	r5, [r4, #8]
 800754a:	463e      	mov	r6, r7
 800754c:	42be      	cmp	r6, r7
 800754e:	d900      	bls.n	8007552 <__ssputs_r+0x86>
 8007550:	463e      	mov	r6, r7
 8007552:	6820      	ldr	r0, [r4, #0]
 8007554:	4632      	mov	r2, r6
 8007556:	4641      	mov	r1, r8
 8007558:	f000 f980 	bl	800785c <memmove>
 800755c:	68a3      	ldr	r3, [r4, #8]
 800755e:	1b9b      	subs	r3, r3, r6
 8007560:	60a3      	str	r3, [r4, #8]
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	4433      	add	r3, r6
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	2000      	movs	r0, #0
 800756a:	e7db      	b.n	8007524 <__ssputs_r+0x58>
 800756c:	462a      	mov	r2, r5
 800756e:	f000 f99b 	bl	80078a8 <_realloc_r>
 8007572:	4606      	mov	r6, r0
 8007574:	2800      	cmp	r0, #0
 8007576:	d1e1      	bne.n	800753c <__ssputs_r+0x70>
 8007578:	6921      	ldr	r1, [r4, #16]
 800757a:	4650      	mov	r0, sl
 800757c:	f7ff fec6 	bl	800730c <_free_r>
 8007580:	e7c7      	b.n	8007512 <__ssputs_r+0x46>
	...

08007584 <_svfiprintf_r>:
 8007584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007588:	4698      	mov	r8, r3
 800758a:	898b      	ldrh	r3, [r1, #12]
 800758c:	061b      	lsls	r3, r3, #24
 800758e:	b09d      	sub	sp, #116	; 0x74
 8007590:	4607      	mov	r7, r0
 8007592:	460d      	mov	r5, r1
 8007594:	4614      	mov	r4, r2
 8007596:	d50e      	bpl.n	80075b6 <_svfiprintf_r+0x32>
 8007598:	690b      	ldr	r3, [r1, #16]
 800759a:	b963      	cbnz	r3, 80075b6 <_svfiprintf_r+0x32>
 800759c:	2140      	movs	r1, #64	; 0x40
 800759e:	f7ff ff21 	bl	80073e4 <_malloc_r>
 80075a2:	6028      	str	r0, [r5, #0]
 80075a4:	6128      	str	r0, [r5, #16]
 80075a6:	b920      	cbnz	r0, 80075b2 <_svfiprintf_r+0x2e>
 80075a8:	230c      	movs	r3, #12
 80075aa:	603b      	str	r3, [r7, #0]
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075b0:	e0d1      	b.n	8007756 <_svfiprintf_r+0x1d2>
 80075b2:	2340      	movs	r3, #64	; 0x40
 80075b4:	616b      	str	r3, [r5, #20]
 80075b6:	2300      	movs	r3, #0
 80075b8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ba:	2320      	movs	r3, #32
 80075bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80075c4:	2330      	movs	r3, #48	; 0x30
 80075c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007770 <_svfiprintf_r+0x1ec>
 80075ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075ce:	f04f 0901 	mov.w	r9, #1
 80075d2:	4623      	mov	r3, r4
 80075d4:	469a      	mov	sl, r3
 80075d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075da:	b10a      	cbz	r2, 80075e0 <_svfiprintf_r+0x5c>
 80075dc:	2a25      	cmp	r2, #37	; 0x25
 80075de:	d1f9      	bne.n	80075d4 <_svfiprintf_r+0x50>
 80075e0:	ebba 0b04 	subs.w	fp, sl, r4
 80075e4:	d00b      	beq.n	80075fe <_svfiprintf_r+0x7a>
 80075e6:	465b      	mov	r3, fp
 80075e8:	4622      	mov	r2, r4
 80075ea:	4629      	mov	r1, r5
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff ff6d 	bl	80074cc <__ssputs_r>
 80075f2:	3001      	adds	r0, #1
 80075f4:	f000 80aa 	beq.w	800774c <_svfiprintf_r+0x1c8>
 80075f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075fa:	445a      	add	r2, fp
 80075fc:	9209      	str	r2, [sp, #36]	; 0x24
 80075fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 80a2 	beq.w	800774c <_svfiprintf_r+0x1c8>
 8007608:	2300      	movs	r3, #0
 800760a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800760e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007612:	f10a 0a01 	add.w	sl, sl, #1
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	9307      	str	r3, [sp, #28]
 800761a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800761e:	931a      	str	r3, [sp, #104]	; 0x68
 8007620:	4654      	mov	r4, sl
 8007622:	2205      	movs	r2, #5
 8007624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007628:	4851      	ldr	r0, [pc, #324]	; (8007770 <_svfiprintf_r+0x1ec>)
 800762a:	f7f8 fdd9 	bl	80001e0 <memchr>
 800762e:	9a04      	ldr	r2, [sp, #16]
 8007630:	b9d8      	cbnz	r0, 800766a <_svfiprintf_r+0xe6>
 8007632:	06d0      	lsls	r0, r2, #27
 8007634:	bf44      	itt	mi
 8007636:	2320      	movmi	r3, #32
 8007638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800763c:	0711      	lsls	r1, r2, #28
 800763e:	bf44      	itt	mi
 8007640:	232b      	movmi	r3, #43	; 0x2b
 8007642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007646:	f89a 3000 	ldrb.w	r3, [sl]
 800764a:	2b2a      	cmp	r3, #42	; 0x2a
 800764c:	d015      	beq.n	800767a <_svfiprintf_r+0xf6>
 800764e:	9a07      	ldr	r2, [sp, #28]
 8007650:	4654      	mov	r4, sl
 8007652:	2000      	movs	r0, #0
 8007654:	f04f 0c0a 	mov.w	ip, #10
 8007658:	4621      	mov	r1, r4
 800765a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800765e:	3b30      	subs	r3, #48	; 0x30
 8007660:	2b09      	cmp	r3, #9
 8007662:	d94e      	bls.n	8007702 <_svfiprintf_r+0x17e>
 8007664:	b1b0      	cbz	r0, 8007694 <_svfiprintf_r+0x110>
 8007666:	9207      	str	r2, [sp, #28]
 8007668:	e014      	b.n	8007694 <_svfiprintf_r+0x110>
 800766a:	eba0 0308 	sub.w	r3, r0, r8
 800766e:	fa09 f303 	lsl.w	r3, r9, r3
 8007672:	4313      	orrs	r3, r2
 8007674:	9304      	str	r3, [sp, #16]
 8007676:	46a2      	mov	sl, r4
 8007678:	e7d2      	b.n	8007620 <_svfiprintf_r+0x9c>
 800767a:	9b03      	ldr	r3, [sp, #12]
 800767c:	1d19      	adds	r1, r3, #4
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	9103      	str	r1, [sp, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	bfbb      	ittet	lt
 8007686:	425b      	neglt	r3, r3
 8007688:	f042 0202 	orrlt.w	r2, r2, #2
 800768c:	9307      	strge	r3, [sp, #28]
 800768e:	9307      	strlt	r3, [sp, #28]
 8007690:	bfb8      	it	lt
 8007692:	9204      	strlt	r2, [sp, #16]
 8007694:	7823      	ldrb	r3, [r4, #0]
 8007696:	2b2e      	cmp	r3, #46	; 0x2e
 8007698:	d10c      	bne.n	80076b4 <_svfiprintf_r+0x130>
 800769a:	7863      	ldrb	r3, [r4, #1]
 800769c:	2b2a      	cmp	r3, #42	; 0x2a
 800769e:	d135      	bne.n	800770c <_svfiprintf_r+0x188>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	1d1a      	adds	r2, r3, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	9203      	str	r2, [sp, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bfb8      	it	lt
 80076ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80076b0:	3402      	adds	r4, #2
 80076b2:	9305      	str	r3, [sp, #20]
 80076b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007780 <_svfiprintf_r+0x1fc>
 80076b8:	7821      	ldrb	r1, [r4, #0]
 80076ba:	2203      	movs	r2, #3
 80076bc:	4650      	mov	r0, sl
 80076be:	f7f8 fd8f 	bl	80001e0 <memchr>
 80076c2:	b140      	cbz	r0, 80076d6 <_svfiprintf_r+0x152>
 80076c4:	2340      	movs	r3, #64	; 0x40
 80076c6:	eba0 000a 	sub.w	r0, r0, sl
 80076ca:	fa03 f000 	lsl.w	r0, r3, r0
 80076ce:	9b04      	ldr	r3, [sp, #16]
 80076d0:	4303      	orrs	r3, r0
 80076d2:	3401      	adds	r4, #1
 80076d4:	9304      	str	r3, [sp, #16]
 80076d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076da:	4826      	ldr	r0, [pc, #152]	; (8007774 <_svfiprintf_r+0x1f0>)
 80076dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076e0:	2206      	movs	r2, #6
 80076e2:	f7f8 fd7d 	bl	80001e0 <memchr>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d038      	beq.n	800775c <_svfiprintf_r+0x1d8>
 80076ea:	4b23      	ldr	r3, [pc, #140]	; (8007778 <_svfiprintf_r+0x1f4>)
 80076ec:	bb1b      	cbnz	r3, 8007736 <_svfiprintf_r+0x1b2>
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	3307      	adds	r3, #7
 80076f2:	f023 0307 	bic.w	r3, r3, #7
 80076f6:	3308      	adds	r3, #8
 80076f8:	9303      	str	r3, [sp, #12]
 80076fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fc:	4433      	add	r3, r6
 80076fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007700:	e767      	b.n	80075d2 <_svfiprintf_r+0x4e>
 8007702:	fb0c 3202 	mla	r2, ip, r2, r3
 8007706:	460c      	mov	r4, r1
 8007708:	2001      	movs	r0, #1
 800770a:	e7a5      	b.n	8007658 <_svfiprintf_r+0xd4>
 800770c:	2300      	movs	r3, #0
 800770e:	3401      	adds	r4, #1
 8007710:	9305      	str	r3, [sp, #20]
 8007712:	4619      	mov	r1, r3
 8007714:	f04f 0c0a 	mov.w	ip, #10
 8007718:	4620      	mov	r0, r4
 800771a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800771e:	3a30      	subs	r2, #48	; 0x30
 8007720:	2a09      	cmp	r2, #9
 8007722:	d903      	bls.n	800772c <_svfiprintf_r+0x1a8>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0c5      	beq.n	80076b4 <_svfiprintf_r+0x130>
 8007728:	9105      	str	r1, [sp, #20]
 800772a:	e7c3      	b.n	80076b4 <_svfiprintf_r+0x130>
 800772c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007730:	4604      	mov	r4, r0
 8007732:	2301      	movs	r3, #1
 8007734:	e7f0      	b.n	8007718 <_svfiprintf_r+0x194>
 8007736:	ab03      	add	r3, sp, #12
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	462a      	mov	r2, r5
 800773c:	4b0f      	ldr	r3, [pc, #60]	; (800777c <_svfiprintf_r+0x1f8>)
 800773e:	a904      	add	r1, sp, #16
 8007740:	4638      	mov	r0, r7
 8007742:	f7fc fa49 	bl	8003bd8 <_printf_float>
 8007746:	1c42      	adds	r2, r0, #1
 8007748:	4606      	mov	r6, r0
 800774a:	d1d6      	bne.n	80076fa <_svfiprintf_r+0x176>
 800774c:	89ab      	ldrh	r3, [r5, #12]
 800774e:	065b      	lsls	r3, r3, #25
 8007750:	f53f af2c 	bmi.w	80075ac <_svfiprintf_r+0x28>
 8007754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007756:	b01d      	add	sp, #116	; 0x74
 8007758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775c:	ab03      	add	r3, sp, #12
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	462a      	mov	r2, r5
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <_svfiprintf_r+0x1f8>)
 8007764:	a904      	add	r1, sp, #16
 8007766:	4638      	mov	r0, r7
 8007768:	f7fc fcda 	bl	8004120 <_printf_i>
 800776c:	e7eb      	b.n	8007746 <_svfiprintf_r+0x1c2>
 800776e:	bf00      	nop
 8007770:	080087c4 	.word	0x080087c4
 8007774:	080087ce 	.word	0x080087ce
 8007778:	08003bd9 	.word	0x08003bd9
 800777c:	080074cd 	.word	0x080074cd
 8007780:	080087ca 	.word	0x080087ca
 8007784:	00000000 	.word	0x00000000

08007788 <nan>:
 8007788:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007790 <nan+0x8>
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	00000000 	.word	0x00000000
 8007794:	7ff80000 	.word	0x7ff80000

08007798 <_sbrk_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4d06      	ldr	r5, [pc, #24]	; (80077b4 <_sbrk_r+0x1c>)
 800779c:	2300      	movs	r3, #0
 800779e:	4604      	mov	r4, r0
 80077a0:	4608      	mov	r0, r1
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	f7f9 fbcc 	bl	8000f40 <_sbrk>
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	d102      	bne.n	80077b2 <_sbrk_r+0x1a>
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	b103      	cbz	r3, 80077b2 <_sbrk_r+0x1a>
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
 80077b4:	200002dc 	.word	0x200002dc

080077b8 <strncmp>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	b17a      	cbz	r2, 80077dc <strncmp+0x24>
 80077bc:	4603      	mov	r3, r0
 80077be:	3901      	subs	r1, #1
 80077c0:	1884      	adds	r4, r0, r2
 80077c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80077c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80077ca:	4290      	cmp	r0, r2
 80077cc:	d101      	bne.n	80077d2 <strncmp+0x1a>
 80077ce:	42a3      	cmp	r3, r4
 80077d0:	d101      	bne.n	80077d6 <strncmp+0x1e>
 80077d2:	1a80      	subs	r0, r0, r2
 80077d4:	bd10      	pop	{r4, pc}
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d1f3      	bne.n	80077c2 <strncmp+0xa>
 80077da:	e7fa      	b.n	80077d2 <strncmp+0x1a>
 80077dc:	4610      	mov	r0, r2
 80077de:	e7f9      	b.n	80077d4 <strncmp+0x1c>

080077e0 <__ascii_wctomb>:
 80077e0:	b149      	cbz	r1, 80077f6 <__ascii_wctomb+0x16>
 80077e2:	2aff      	cmp	r2, #255	; 0xff
 80077e4:	bf85      	ittet	hi
 80077e6:	238a      	movhi	r3, #138	; 0x8a
 80077e8:	6003      	strhi	r3, [r0, #0]
 80077ea:	700a      	strbls	r2, [r1, #0]
 80077ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80077f0:	bf98      	it	ls
 80077f2:	2001      	movls	r0, #1
 80077f4:	4770      	bx	lr
 80077f6:	4608      	mov	r0, r1
 80077f8:	4770      	bx	lr
	...

080077fc <__assert_func>:
 80077fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077fe:	4614      	mov	r4, r2
 8007800:	461a      	mov	r2, r3
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <__assert_func+0x2c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4605      	mov	r5, r0
 8007808:	68d8      	ldr	r0, [r3, #12]
 800780a:	b14c      	cbz	r4, 8007820 <__assert_func+0x24>
 800780c:	4b07      	ldr	r3, [pc, #28]	; (800782c <__assert_func+0x30>)
 800780e:	9100      	str	r1, [sp, #0]
 8007810:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007814:	4906      	ldr	r1, [pc, #24]	; (8007830 <__assert_func+0x34>)
 8007816:	462b      	mov	r3, r5
 8007818:	f000 f80e 	bl	8007838 <fiprintf>
 800781c:	f000 fa8c 	bl	8007d38 <abort>
 8007820:	4b04      	ldr	r3, [pc, #16]	; (8007834 <__assert_func+0x38>)
 8007822:	461c      	mov	r4, r3
 8007824:	e7f3      	b.n	800780e <__assert_func+0x12>
 8007826:	bf00      	nop
 8007828:	2000000c 	.word	0x2000000c
 800782c:	080087d5 	.word	0x080087d5
 8007830:	080087e2 	.word	0x080087e2
 8007834:	08008810 	.word	0x08008810

08007838 <fiprintf>:
 8007838:	b40e      	push	{r1, r2, r3}
 800783a:	b503      	push	{r0, r1, lr}
 800783c:	4601      	mov	r1, r0
 800783e:	ab03      	add	r3, sp, #12
 8007840:	4805      	ldr	r0, [pc, #20]	; (8007858 <fiprintf+0x20>)
 8007842:	f853 2b04 	ldr.w	r2, [r3], #4
 8007846:	6800      	ldr	r0, [r0, #0]
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	f000 f885 	bl	8007958 <_vfiprintf_r>
 800784e:	b002      	add	sp, #8
 8007850:	f85d eb04 	ldr.w	lr, [sp], #4
 8007854:	b003      	add	sp, #12
 8007856:	4770      	bx	lr
 8007858:	2000000c 	.word	0x2000000c

0800785c <memmove>:
 800785c:	4288      	cmp	r0, r1
 800785e:	b510      	push	{r4, lr}
 8007860:	eb01 0402 	add.w	r4, r1, r2
 8007864:	d902      	bls.n	800786c <memmove+0x10>
 8007866:	4284      	cmp	r4, r0
 8007868:	4623      	mov	r3, r4
 800786a:	d807      	bhi.n	800787c <memmove+0x20>
 800786c:	1e43      	subs	r3, r0, #1
 800786e:	42a1      	cmp	r1, r4
 8007870:	d008      	beq.n	8007884 <memmove+0x28>
 8007872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800787a:	e7f8      	b.n	800786e <memmove+0x12>
 800787c:	4402      	add	r2, r0
 800787e:	4601      	mov	r1, r0
 8007880:	428a      	cmp	r2, r1
 8007882:	d100      	bne.n	8007886 <memmove+0x2a>
 8007884:	bd10      	pop	{r4, pc}
 8007886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800788a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800788e:	e7f7      	b.n	8007880 <memmove+0x24>

08007890 <__malloc_lock>:
 8007890:	4801      	ldr	r0, [pc, #4]	; (8007898 <__malloc_lock+0x8>)
 8007892:	f000 bc11 	b.w	80080b8 <__retarget_lock_acquire_recursive>
 8007896:	bf00      	nop
 8007898:	200002e0 	.word	0x200002e0

0800789c <__malloc_unlock>:
 800789c:	4801      	ldr	r0, [pc, #4]	; (80078a4 <__malloc_unlock+0x8>)
 800789e:	f000 bc0c 	b.w	80080ba <__retarget_lock_release_recursive>
 80078a2:	bf00      	nop
 80078a4:	200002e0 	.word	0x200002e0

080078a8 <_realloc_r>:
 80078a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ac:	4680      	mov	r8, r0
 80078ae:	4614      	mov	r4, r2
 80078b0:	460e      	mov	r6, r1
 80078b2:	b921      	cbnz	r1, 80078be <_realloc_r+0x16>
 80078b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078b8:	4611      	mov	r1, r2
 80078ba:	f7ff bd93 	b.w	80073e4 <_malloc_r>
 80078be:	b92a      	cbnz	r2, 80078cc <_realloc_r+0x24>
 80078c0:	f7ff fd24 	bl	800730c <_free_r>
 80078c4:	4625      	mov	r5, r4
 80078c6:	4628      	mov	r0, r5
 80078c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078cc:	f000 fc5c 	bl	8008188 <_malloc_usable_size_r>
 80078d0:	4284      	cmp	r4, r0
 80078d2:	4607      	mov	r7, r0
 80078d4:	d802      	bhi.n	80078dc <_realloc_r+0x34>
 80078d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078da:	d812      	bhi.n	8007902 <_realloc_r+0x5a>
 80078dc:	4621      	mov	r1, r4
 80078de:	4640      	mov	r0, r8
 80078e0:	f7ff fd80 	bl	80073e4 <_malloc_r>
 80078e4:	4605      	mov	r5, r0
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d0ed      	beq.n	80078c6 <_realloc_r+0x1e>
 80078ea:	42bc      	cmp	r4, r7
 80078ec:	4622      	mov	r2, r4
 80078ee:	4631      	mov	r1, r6
 80078f0:	bf28      	it	cs
 80078f2:	463a      	movcs	r2, r7
 80078f4:	f7ff f824 	bl	8006940 <memcpy>
 80078f8:	4631      	mov	r1, r6
 80078fa:	4640      	mov	r0, r8
 80078fc:	f7ff fd06 	bl	800730c <_free_r>
 8007900:	e7e1      	b.n	80078c6 <_realloc_r+0x1e>
 8007902:	4635      	mov	r5, r6
 8007904:	e7df      	b.n	80078c6 <_realloc_r+0x1e>

08007906 <__sfputc_r>:
 8007906:	6893      	ldr	r3, [r2, #8]
 8007908:	3b01      	subs	r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	b410      	push	{r4}
 800790e:	6093      	str	r3, [r2, #8]
 8007910:	da08      	bge.n	8007924 <__sfputc_r+0x1e>
 8007912:	6994      	ldr	r4, [r2, #24]
 8007914:	42a3      	cmp	r3, r4
 8007916:	db01      	blt.n	800791c <__sfputc_r+0x16>
 8007918:	290a      	cmp	r1, #10
 800791a:	d103      	bne.n	8007924 <__sfputc_r+0x1e>
 800791c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007920:	f000 b94a 	b.w	8007bb8 <__swbuf_r>
 8007924:	6813      	ldr	r3, [r2, #0]
 8007926:	1c58      	adds	r0, r3, #1
 8007928:	6010      	str	r0, [r2, #0]
 800792a:	7019      	strb	r1, [r3, #0]
 800792c:	4608      	mov	r0, r1
 800792e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007932:	4770      	bx	lr

08007934 <__sfputs_r>:
 8007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007936:	4606      	mov	r6, r0
 8007938:	460f      	mov	r7, r1
 800793a:	4614      	mov	r4, r2
 800793c:	18d5      	adds	r5, r2, r3
 800793e:	42ac      	cmp	r4, r5
 8007940:	d101      	bne.n	8007946 <__sfputs_r+0x12>
 8007942:	2000      	movs	r0, #0
 8007944:	e007      	b.n	8007956 <__sfputs_r+0x22>
 8007946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800794a:	463a      	mov	r2, r7
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff ffda 	bl	8007906 <__sfputc_r>
 8007952:	1c43      	adds	r3, r0, #1
 8007954:	d1f3      	bne.n	800793e <__sfputs_r+0xa>
 8007956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007958 <_vfiprintf_r>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	460d      	mov	r5, r1
 800795e:	b09d      	sub	sp, #116	; 0x74
 8007960:	4614      	mov	r4, r2
 8007962:	4698      	mov	r8, r3
 8007964:	4606      	mov	r6, r0
 8007966:	b118      	cbz	r0, 8007970 <_vfiprintf_r+0x18>
 8007968:	6983      	ldr	r3, [r0, #24]
 800796a:	b90b      	cbnz	r3, 8007970 <_vfiprintf_r+0x18>
 800796c:	f000 fb06 	bl	8007f7c <__sinit>
 8007970:	4b89      	ldr	r3, [pc, #548]	; (8007b98 <_vfiprintf_r+0x240>)
 8007972:	429d      	cmp	r5, r3
 8007974:	d11b      	bne.n	80079ae <_vfiprintf_r+0x56>
 8007976:	6875      	ldr	r5, [r6, #4]
 8007978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800797a:	07d9      	lsls	r1, r3, #31
 800797c:	d405      	bmi.n	800798a <_vfiprintf_r+0x32>
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	059a      	lsls	r2, r3, #22
 8007982:	d402      	bmi.n	800798a <_vfiprintf_r+0x32>
 8007984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007986:	f000 fb97 	bl	80080b8 <__retarget_lock_acquire_recursive>
 800798a:	89ab      	ldrh	r3, [r5, #12]
 800798c:	071b      	lsls	r3, r3, #28
 800798e:	d501      	bpl.n	8007994 <_vfiprintf_r+0x3c>
 8007990:	692b      	ldr	r3, [r5, #16]
 8007992:	b9eb      	cbnz	r3, 80079d0 <_vfiprintf_r+0x78>
 8007994:	4629      	mov	r1, r5
 8007996:	4630      	mov	r0, r6
 8007998:	f000 f960 	bl	8007c5c <__swsetup_r>
 800799c:	b1c0      	cbz	r0, 80079d0 <_vfiprintf_r+0x78>
 800799e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079a0:	07dc      	lsls	r4, r3, #31
 80079a2:	d50e      	bpl.n	80079c2 <_vfiprintf_r+0x6a>
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079a8:	b01d      	add	sp, #116	; 0x74
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	4b7b      	ldr	r3, [pc, #492]	; (8007b9c <_vfiprintf_r+0x244>)
 80079b0:	429d      	cmp	r5, r3
 80079b2:	d101      	bne.n	80079b8 <_vfiprintf_r+0x60>
 80079b4:	68b5      	ldr	r5, [r6, #8]
 80079b6:	e7df      	b.n	8007978 <_vfiprintf_r+0x20>
 80079b8:	4b79      	ldr	r3, [pc, #484]	; (8007ba0 <_vfiprintf_r+0x248>)
 80079ba:	429d      	cmp	r5, r3
 80079bc:	bf08      	it	eq
 80079be:	68f5      	ldreq	r5, [r6, #12]
 80079c0:	e7da      	b.n	8007978 <_vfiprintf_r+0x20>
 80079c2:	89ab      	ldrh	r3, [r5, #12]
 80079c4:	0598      	lsls	r0, r3, #22
 80079c6:	d4ed      	bmi.n	80079a4 <_vfiprintf_r+0x4c>
 80079c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079ca:	f000 fb76 	bl	80080ba <__retarget_lock_release_recursive>
 80079ce:	e7e9      	b.n	80079a4 <_vfiprintf_r+0x4c>
 80079d0:	2300      	movs	r3, #0
 80079d2:	9309      	str	r3, [sp, #36]	; 0x24
 80079d4:	2320      	movs	r3, #32
 80079d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079da:	f8cd 800c 	str.w	r8, [sp, #12]
 80079de:	2330      	movs	r3, #48	; 0x30
 80079e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ba4 <_vfiprintf_r+0x24c>
 80079e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079e8:	f04f 0901 	mov.w	r9, #1
 80079ec:	4623      	mov	r3, r4
 80079ee:	469a      	mov	sl, r3
 80079f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079f4:	b10a      	cbz	r2, 80079fa <_vfiprintf_r+0xa2>
 80079f6:	2a25      	cmp	r2, #37	; 0x25
 80079f8:	d1f9      	bne.n	80079ee <_vfiprintf_r+0x96>
 80079fa:	ebba 0b04 	subs.w	fp, sl, r4
 80079fe:	d00b      	beq.n	8007a18 <_vfiprintf_r+0xc0>
 8007a00:	465b      	mov	r3, fp
 8007a02:	4622      	mov	r2, r4
 8007a04:	4629      	mov	r1, r5
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff ff94 	bl	8007934 <__sfputs_r>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	f000 80aa 	beq.w	8007b66 <_vfiprintf_r+0x20e>
 8007a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a14:	445a      	add	r2, fp
 8007a16:	9209      	str	r2, [sp, #36]	; 0x24
 8007a18:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80a2 	beq.w	8007b66 <_vfiprintf_r+0x20e>
 8007a22:	2300      	movs	r3, #0
 8007a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a2c:	f10a 0a01 	add.w	sl, sl, #1
 8007a30:	9304      	str	r3, [sp, #16]
 8007a32:	9307      	str	r3, [sp, #28]
 8007a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a38:	931a      	str	r3, [sp, #104]	; 0x68
 8007a3a:	4654      	mov	r4, sl
 8007a3c:	2205      	movs	r2, #5
 8007a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a42:	4858      	ldr	r0, [pc, #352]	; (8007ba4 <_vfiprintf_r+0x24c>)
 8007a44:	f7f8 fbcc 	bl	80001e0 <memchr>
 8007a48:	9a04      	ldr	r2, [sp, #16]
 8007a4a:	b9d8      	cbnz	r0, 8007a84 <_vfiprintf_r+0x12c>
 8007a4c:	06d1      	lsls	r1, r2, #27
 8007a4e:	bf44      	itt	mi
 8007a50:	2320      	movmi	r3, #32
 8007a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a56:	0713      	lsls	r3, r2, #28
 8007a58:	bf44      	itt	mi
 8007a5a:	232b      	movmi	r3, #43	; 0x2b
 8007a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a60:	f89a 3000 	ldrb.w	r3, [sl]
 8007a64:	2b2a      	cmp	r3, #42	; 0x2a
 8007a66:	d015      	beq.n	8007a94 <_vfiprintf_r+0x13c>
 8007a68:	9a07      	ldr	r2, [sp, #28]
 8007a6a:	4654      	mov	r4, sl
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f04f 0c0a 	mov.w	ip, #10
 8007a72:	4621      	mov	r1, r4
 8007a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a78:	3b30      	subs	r3, #48	; 0x30
 8007a7a:	2b09      	cmp	r3, #9
 8007a7c:	d94e      	bls.n	8007b1c <_vfiprintf_r+0x1c4>
 8007a7e:	b1b0      	cbz	r0, 8007aae <_vfiprintf_r+0x156>
 8007a80:	9207      	str	r2, [sp, #28]
 8007a82:	e014      	b.n	8007aae <_vfiprintf_r+0x156>
 8007a84:	eba0 0308 	sub.w	r3, r0, r8
 8007a88:	fa09 f303 	lsl.w	r3, r9, r3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	9304      	str	r3, [sp, #16]
 8007a90:	46a2      	mov	sl, r4
 8007a92:	e7d2      	b.n	8007a3a <_vfiprintf_r+0xe2>
 8007a94:	9b03      	ldr	r3, [sp, #12]
 8007a96:	1d19      	adds	r1, r3, #4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	9103      	str	r1, [sp, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bfbb      	ittet	lt
 8007aa0:	425b      	neglt	r3, r3
 8007aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8007aa6:	9307      	strge	r3, [sp, #28]
 8007aa8:	9307      	strlt	r3, [sp, #28]
 8007aaa:	bfb8      	it	lt
 8007aac:	9204      	strlt	r2, [sp, #16]
 8007aae:	7823      	ldrb	r3, [r4, #0]
 8007ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ab2:	d10c      	bne.n	8007ace <_vfiprintf_r+0x176>
 8007ab4:	7863      	ldrb	r3, [r4, #1]
 8007ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab8:	d135      	bne.n	8007b26 <_vfiprintf_r+0x1ce>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	1d1a      	adds	r2, r3, #4
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	9203      	str	r2, [sp, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bfb8      	it	lt
 8007ac6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007aca:	3402      	adds	r4, #2
 8007acc:	9305      	str	r3, [sp, #20]
 8007ace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007bb4 <_vfiprintf_r+0x25c>
 8007ad2:	7821      	ldrb	r1, [r4, #0]
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	4650      	mov	r0, sl
 8007ad8:	f7f8 fb82 	bl	80001e0 <memchr>
 8007adc:	b140      	cbz	r0, 8007af0 <_vfiprintf_r+0x198>
 8007ade:	2340      	movs	r3, #64	; 0x40
 8007ae0:	eba0 000a 	sub.w	r0, r0, sl
 8007ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8007ae8:	9b04      	ldr	r3, [sp, #16]
 8007aea:	4303      	orrs	r3, r0
 8007aec:	3401      	adds	r4, #1
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af4:	482c      	ldr	r0, [pc, #176]	; (8007ba8 <_vfiprintf_r+0x250>)
 8007af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007afa:	2206      	movs	r2, #6
 8007afc:	f7f8 fb70 	bl	80001e0 <memchr>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d03f      	beq.n	8007b84 <_vfiprintf_r+0x22c>
 8007b04:	4b29      	ldr	r3, [pc, #164]	; (8007bac <_vfiprintf_r+0x254>)
 8007b06:	bb1b      	cbnz	r3, 8007b50 <_vfiprintf_r+0x1f8>
 8007b08:	9b03      	ldr	r3, [sp, #12]
 8007b0a:	3307      	adds	r3, #7
 8007b0c:	f023 0307 	bic.w	r3, r3, #7
 8007b10:	3308      	adds	r3, #8
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b16:	443b      	add	r3, r7
 8007b18:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1a:	e767      	b.n	80079ec <_vfiprintf_r+0x94>
 8007b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b20:	460c      	mov	r4, r1
 8007b22:	2001      	movs	r0, #1
 8007b24:	e7a5      	b.n	8007a72 <_vfiprintf_r+0x11a>
 8007b26:	2300      	movs	r3, #0
 8007b28:	3401      	adds	r4, #1
 8007b2a:	9305      	str	r3, [sp, #20]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f04f 0c0a 	mov.w	ip, #10
 8007b32:	4620      	mov	r0, r4
 8007b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b38:	3a30      	subs	r2, #48	; 0x30
 8007b3a:	2a09      	cmp	r2, #9
 8007b3c:	d903      	bls.n	8007b46 <_vfiprintf_r+0x1ee>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0c5      	beq.n	8007ace <_vfiprintf_r+0x176>
 8007b42:	9105      	str	r1, [sp, #20]
 8007b44:	e7c3      	b.n	8007ace <_vfiprintf_r+0x176>
 8007b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e7f0      	b.n	8007b32 <_vfiprintf_r+0x1da>
 8007b50:	ab03      	add	r3, sp, #12
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	462a      	mov	r2, r5
 8007b56:	4b16      	ldr	r3, [pc, #88]	; (8007bb0 <_vfiprintf_r+0x258>)
 8007b58:	a904      	add	r1, sp, #16
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7fc f83c 	bl	8003bd8 <_printf_float>
 8007b60:	4607      	mov	r7, r0
 8007b62:	1c78      	adds	r0, r7, #1
 8007b64:	d1d6      	bne.n	8007b14 <_vfiprintf_r+0x1bc>
 8007b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b68:	07d9      	lsls	r1, r3, #31
 8007b6a:	d405      	bmi.n	8007b78 <_vfiprintf_r+0x220>
 8007b6c:	89ab      	ldrh	r3, [r5, #12]
 8007b6e:	059a      	lsls	r2, r3, #22
 8007b70:	d402      	bmi.n	8007b78 <_vfiprintf_r+0x220>
 8007b72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b74:	f000 faa1 	bl	80080ba <__retarget_lock_release_recursive>
 8007b78:	89ab      	ldrh	r3, [r5, #12]
 8007b7a:	065b      	lsls	r3, r3, #25
 8007b7c:	f53f af12 	bmi.w	80079a4 <_vfiprintf_r+0x4c>
 8007b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b82:	e711      	b.n	80079a8 <_vfiprintf_r+0x50>
 8007b84:	ab03      	add	r3, sp, #12
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	462a      	mov	r2, r5
 8007b8a:	4b09      	ldr	r3, [pc, #36]	; (8007bb0 <_vfiprintf_r+0x258>)
 8007b8c:	a904      	add	r1, sp, #16
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f7fc fac6 	bl	8004120 <_printf_i>
 8007b94:	e7e4      	b.n	8007b60 <_vfiprintf_r+0x208>
 8007b96:	bf00      	nop
 8007b98:	08008834 	.word	0x08008834
 8007b9c:	08008854 	.word	0x08008854
 8007ba0:	08008814 	.word	0x08008814
 8007ba4:	080087c4 	.word	0x080087c4
 8007ba8:	080087ce 	.word	0x080087ce
 8007bac:	08003bd9 	.word	0x08003bd9
 8007bb0:	08007935 	.word	0x08007935
 8007bb4:	080087ca 	.word	0x080087ca

08007bb8 <__swbuf_r>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	460e      	mov	r6, r1
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	b118      	cbz	r0, 8007bca <__swbuf_r+0x12>
 8007bc2:	6983      	ldr	r3, [r0, #24]
 8007bc4:	b90b      	cbnz	r3, 8007bca <__swbuf_r+0x12>
 8007bc6:	f000 f9d9 	bl	8007f7c <__sinit>
 8007bca:	4b21      	ldr	r3, [pc, #132]	; (8007c50 <__swbuf_r+0x98>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	d12b      	bne.n	8007c28 <__swbuf_r+0x70>
 8007bd0:	686c      	ldr	r4, [r5, #4]
 8007bd2:	69a3      	ldr	r3, [r4, #24]
 8007bd4:	60a3      	str	r3, [r4, #8]
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	071a      	lsls	r2, r3, #28
 8007bda:	d52f      	bpl.n	8007c3c <__swbuf_r+0x84>
 8007bdc:	6923      	ldr	r3, [r4, #16]
 8007bde:	b36b      	cbz	r3, 8007c3c <__swbuf_r+0x84>
 8007be0:	6923      	ldr	r3, [r4, #16]
 8007be2:	6820      	ldr	r0, [r4, #0]
 8007be4:	1ac0      	subs	r0, r0, r3
 8007be6:	6963      	ldr	r3, [r4, #20]
 8007be8:	b2f6      	uxtb	r6, r6
 8007bea:	4283      	cmp	r3, r0
 8007bec:	4637      	mov	r7, r6
 8007bee:	dc04      	bgt.n	8007bfa <__swbuf_r+0x42>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 f92e 	bl	8007e54 <_fflush_r>
 8007bf8:	bb30      	cbnz	r0, 8007c48 <__swbuf_r+0x90>
 8007bfa:	68a3      	ldr	r3, [r4, #8]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	60a3      	str	r3, [r4, #8]
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	6022      	str	r2, [r4, #0]
 8007c06:	701e      	strb	r6, [r3, #0]
 8007c08:	6963      	ldr	r3, [r4, #20]
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	4283      	cmp	r3, r0
 8007c0e:	d004      	beq.n	8007c1a <__swbuf_r+0x62>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	07db      	lsls	r3, r3, #31
 8007c14:	d506      	bpl.n	8007c24 <__swbuf_r+0x6c>
 8007c16:	2e0a      	cmp	r6, #10
 8007c18:	d104      	bne.n	8007c24 <__swbuf_r+0x6c>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f000 f919 	bl	8007e54 <_fflush_r>
 8007c22:	b988      	cbnz	r0, 8007c48 <__swbuf_r+0x90>
 8007c24:	4638      	mov	r0, r7
 8007c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <__swbuf_r+0x9c>)
 8007c2a:	429c      	cmp	r4, r3
 8007c2c:	d101      	bne.n	8007c32 <__swbuf_r+0x7a>
 8007c2e:	68ac      	ldr	r4, [r5, #8]
 8007c30:	e7cf      	b.n	8007bd2 <__swbuf_r+0x1a>
 8007c32:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <__swbuf_r+0xa0>)
 8007c34:	429c      	cmp	r4, r3
 8007c36:	bf08      	it	eq
 8007c38:	68ec      	ldreq	r4, [r5, #12]
 8007c3a:	e7ca      	b.n	8007bd2 <__swbuf_r+0x1a>
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 f80c 	bl	8007c5c <__swsetup_r>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d0cb      	beq.n	8007be0 <__swbuf_r+0x28>
 8007c48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007c4c:	e7ea      	b.n	8007c24 <__swbuf_r+0x6c>
 8007c4e:	bf00      	nop
 8007c50:	08008834 	.word	0x08008834
 8007c54:	08008854 	.word	0x08008854
 8007c58:	08008814 	.word	0x08008814

08007c5c <__swsetup_r>:
 8007c5c:	4b32      	ldr	r3, [pc, #200]	; (8007d28 <__swsetup_r+0xcc>)
 8007c5e:	b570      	push	{r4, r5, r6, lr}
 8007c60:	681d      	ldr	r5, [r3, #0]
 8007c62:	4606      	mov	r6, r0
 8007c64:	460c      	mov	r4, r1
 8007c66:	b125      	cbz	r5, 8007c72 <__swsetup_r+0x16>
 8007c68:	69ab      	ldr	r3, [r5, #24]
 8007c6a:	b913      	cbnz	r3, 8007c72 <__swsetup_r+0x16>
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f000 f985 	bl	8007f7c <__sinit>
 8007c72:	4b2e      	ldr	r3, [pc, #184]	; (8007d2c <__swsetup_r+0xd0>)
 8007c74:	429c      	cmp	r4, r3
 8007c76:	d10f      	bne.n	8007c98 <__swsetup_r+0x3c>
 8007c78:	686c      	ldr	r4, [r5, #4]
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c80:	0719      	lsls	r1, r3, #28
 8007c82:	d42c      	bmi.n	8007cde <__swsetup_r+0x82>
 8007c84:	06dd      	lsls	r5, r3, #27
 8007c86:	d411      	bmi.n	8007cac <__swsetup_r+0x50>
 8007c88:	2309      	movs	r3, #9
 8007c8a:	6033      	str	r3, [r6, #0]
 8007c8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c90:	81a3      	strh	r3, [r4, #12]
 8007c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c96:	e03e      	b.n	8007d16 <__swsetup_r+0xba>
 8007c98:	4b25      	ldr	r3, [pc, #148]	; (8007d30 <__swsetup_r+0xd4>)
 8007c9a:	429c      	cmp	r4, r3
 8007c9c:	d101      	bne.n	8007ca2 <__swsetup_r+0x46>
 8007c9e:	68ac      	ldr	r4, [r5, #8]
 8007ca0:	e7eb      	b.n	8007c7a <__swsetup_r+0x1e>
 8007ca2:	4b24      	ldr	r3, [pc, #144]	; (8007d34 <__swsetup_r+0xd8>)
 8007ca4:	429c      	cmp	r4, r3
 8007ca6:	bf08      	it	eq
 8007ca8:	68ec      	ldreq	r4, [r5, #12]
 8007caa:	e7e6      	b.n	8007c7a <__swsetup_r+0x1e>
 8007cac:	0758      	lsls	r0, r3, #29
 8007cae:	d512      	bpl.n	8007cd6 <__swsetup_r+0x7a>
 8007cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cb2:	b141      	cbz	r1, 8007cc6 <__swsetup_r+0x6a>
 8007cb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	d002      	beq.n	8007cc2 <__swsetup_r+0x66>
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff fb25 	bl	800730c <_free_r>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	6363      	str	r3, [r4, #52]	; 0x34
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ccc:	81a3      	strh	r3, [r4, #12]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	6063      	str	r3, [r4, #4]
 8007cd2:	6923      	ldr	r3, [r4, #16]
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f043 0308 	orr.w	r3, r3, #8
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	6923      	ldr	r3, [r4, #16]
 8007ce0:	b94b      	cbnz	r3, 8007cf6 <__swsetup_r+0x9a>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cec:	d003      	beq.n	8007cf6 <__swsetup_r+0x9a>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f000 fa09 	bl	8008108 <__smakebuf_r>
 8007cf6:	89a0      	ldrh	r0, [r4, #12]
 8007cf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cfc:	f010 0301 	ands.w	r3, r0, #1
 8007d00:	d00a      	beq.n	8007d18 <__swsetup_r+0xbc>
 8007d02:	2300      	movs	r3, #0
 8007d04:	60a3      	str	r3, [r4, #8]
 8007d06:	6963      	ldr	r3, [r4, #20]
 8007d08:	425b      	negs	r3, r3
 8007d0a:	61a3      	str	r3, [r4, #24]
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	b943      	cbnz	r3, 8007d22 <__swsetup_r+0xc6>
 8007d10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d14:	d1ba      	bne.n	8007c8c <__swsetup_r+0x30>
 8007d16:	bd70      	pop	{r4, r5, r6, pc}
 8007d18:	0781      	lsls	r1, r0, #30
 8007d1a:	bf58      	it	pl
 8007d1c:	6963      	ldrpl	r3, [r4, #20]
 8007d1e:	60a3      	str	r3, [r4, #8]
 8007d20:	e7f4      	b.n	8007d0c <__swsetup_r+0xb0>
 8007d22:	2000      	movs	r0, #0
 8007d24:	e7f7      	b.n	8007d16 <__swsetup_r+0xba>
 8007d26:	bf00      	nop
 8007d28:	2000000c 	.word	0x2000000c
 8007d2c:	08008834 	.word	0x08008834
 8007d30:	08008854 	.word	0x08008854
 8007d34:	08008814 	.word	0x08008814

08007d38 <abort>:
 8007d38:	b508      	push	{r3, lr}
 8007d3a:	2006      	movs	r0, #6
 8007d3c:	f000 fa54 	bl	80081e8 <raise>
 8007d40:	2001      	movs	r0, #1
 8007d42:	f7f9 f8a1 	bl	8000e88 <_exit>
	...

08007d48 <__sflush_r>:
 8007d48:	898a      	ldrh	r2, [r1, #12]
 8007d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4e:	4605      	mov	r5, r0
 8007d50:	0710      	lsls	r0, r2, #28
 8007d52:	460c      	mov	r4, r1
 8007d54:	d458      	bmi.n	8007e08 <__sflush_r+0xc0>
 8007d56:	684b      	ldr	r3, [r1, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	dc05      	bgt.n	8007d68 <__sflush_r+0x20>
 8007d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	dc02      	bgt.n	8007d68 <__sflush_r+0x20>
 8007d62:	2000      	movs	r0, #0
 8007d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d6a:	2e00      	cmp	r6, #0
 8007d6c:	d0f9      	beq.n	8007d62 <__sflush_r+0x1a>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d74:	682f      	ldr	r7, [r5, #0]
 8007d76:	602b      	str	r3, [r5, #0]
 8007d78:	d032      	beq.n	8007de0 <__sflush_r+0x98>
 8007d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	075a      	lsls	r2, r3, #29
 8007d80:	d505      	bpl.n	8007d8e <__sflush_r+0x46>
 8007d82:	6863      	ldr	r3, [r4, #4]
 8007d84:	1ac0      	subs	r0, r0, r3
 8007d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d88:	b10b      	cbz	r3, 8007d8e <__sflush_r+0x46>
 8007d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d8c:	1ac0      	subs	r0, r0, r3
 8007d8e:	2300      	movs	r3, #0
 8007d90:	4602      	mov	r2, r0
 8007d92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d94:	6a21      	ldr	r1, [r4, #32]
 8007d96:	4628      	mov	r0, r5
 8007d98:	47b0      	blx	r6
 8007d9a:	1c43      	adds	r3, r0, #1
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	d106      	bne.n	8007dae <__sflush_r+0x66>
 8007da0:	6829      	ldr	r1, [r5, #0]
 8007da2:	291d      	cmp	r1, #29
 8007da4:	d82c      	bhi.n	8007e00 <__sflush_r+0xb8>
 8007da6:	4a2a      	ldr	r2, [pc, #168]	; (8007e50 <__sflush_r+0x108>)
 8007da8:	40ca      	lsrs	r2, r1
 8007daa:	07d6      	lsls	r6, r2, #31
 8007dac:	d528      	bpl.n	8007e00 <__sflush_r+0xb8>
 8007dae:	2200      	movs	r2, #0
 8007db0:	6062      	str	r2, [r4, #4]
 8007db2:	04d9      	lsls	r1, r3, #19
 8007db4:	6922      	ldr	r2, [r4, #16]
 8007db6:	6022      	str	r2, [r4, #0]
 8007db8:	d504      	bpl.n	8007dc4 <__sflush_r+0x7c>
 8007dba:	1c42      	adds	r2, r0, #1
 8007dbc:	d101      	bne.n	8007dc2 <__sflush_r+0x7a>
 8007dbe:	682b      	ldr	r3, [r5, #0]
 8007dc0:	b903      	cbnz	r3, 8007dc4 <__sflush_r+0x7c>
 8007dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8007dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dc6:	602f      	str	r7, [r5, #0]
 8007dc8:	2900      	cmp	r1, #0
 8007dca:	d0ca      	beq.n	8007d62 <__sflush_r+0x1a>
 8007dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	d002      	beq.n	8007dda <__sflush_r+0x92>
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f7ff fa99 	bl	800730c <_free_r>
 8007dda:	2000      	movs	r0, #0
 8007ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8007dde:	e7c1      	b.n	8007d64 <__sflush_r+0x1c>
 8007de0:	6a21      	ldr	r1, [r4, #32]
 8007de2:	2301      	movs	r3, #1
 8007de4:	4628      	mov	r0, r5
 8007de6:	47b0      	blx	r6
 8007de8:	1c41      	adds	r1, r0, #1
 8007dea:	d1c7      	bne.n	8007d7c <__sflush_r+0x34>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0c4      	beq.n	8007d7c <__sflush_r+0x34>
 8007df2:	2b1d      	cmp	r3, #29
 8007df4:	d001      	beq.n	8007dfa <__sflush_r+0xb2>
 8007df6:	2b16      	cmp	r3, #22
 8007df8:	d101      	bne.n	8007dfe <__sflush_r+0xb6>
 8007dfa:	602f      	str	r7, [r5, #0]
 8007dfc:	e7b1      	b.n	8007d62 <__sflush_r+0x1a>
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	e7ad      	b.n	8007d64 <__sflush_r+0x1c>
 8007e08:	690f      	ldr	r7, [r1, #16]
 8007e0a:	2f00      	cmp	r7, #0
 8007e0c:	d0a9      	beq.n	8007d62 <__sflush_r+0x1a>
 8007e0e:	0793      	lsls	r3, r2, #30
 8007e10:	680e      	ldr	r6, [r1, #0]
 8007e12:	bf08      	it	eq
 8007e14:	694b      	ldreq	r3, [r1, #20]
 8007e16:	600f      	str	r7, [r1, #0]
 8007e18:	bf18      	it	ne
 8007e1a:	2300      	movne	r3, #0
 8007e1c:	eba6 0807 	sub.w	r8, r6, r7
 8007e20:	608b      	str	r3, [r1, #8]
 8007e22:	f1b8 0f00 	cmp.w	r8, #0
 8007e26:	dd9c      	ble.n	8007d62 <__sflush_r+0x1a>
 8007e28:	6a21      	ldr	r1, [r4, #32]
 8007e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e2c:	4643      	mov	r3, r8
 8007e2e:	463a      	mov	r2, r7
 8007e30:	4628      	mov	r0, r5
 8007e32:	47b0      	blx	r6
 8007e34:	2800      	cmp	r0, #0
 8007e36:	dc06      	bgt.n	8007e46 <__sflush_r+0xfe>
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e3e:	81a3      	strh	r3, [r4, #12]
 8007e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e44:	e78e      	b.n	8007d64 <__sflush_r+0x1c>
 8007e46:	4407      	add	r7, r0
 8007e48:	eba8 0800 	sub.w	r8, r8, r0
 8007e4c:	e7e9      	b.n	8007e22 <__sflush_r+0xda>
 8007e4e:	bf00      	nop
 8007e50:	20400001 	.word	0x20400001

08007e54 <_fflush_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	690b      	ldr	r3, [r1, #16]
 8007e58:	4605      	mov	r5, r0
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	b913      	cbnz	r3, 8007e64 <_fflush_r+0x10>
 8007e5e:	2500      	movs	r5, #0
 8007e60:	4628      	mov	r0, r5
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	b118      	cbz	r0, 8007e6e <_fflush_r+0x1a>
 8007e66:	6983      	ldr	r3, [r0, #24]
 8007e68:	b90b      	cbnz	r3, 8007e6e <_fflush_r+0x1a>
 8007e6a:	f000 f887 	bl	8007f7c <__sinit>
 8007e6e:	4b14      	ldr	r3, [pc, #80]	; (8007ec0 <_fflush_r+0x6c>)
 8007e70:	429c      	cmp	r4, r3
 8007e72:	d11b      	bne.n	8007eac <_fflush_r+0x58>
 8007e74:	686c      	ldr	r4, [r5, #4]
 8007e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0ef      	beq.n	8007e5e <_fflush_r+0xa>
 8007e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e80:	07d0      	lsls	r0, r2, #31
 8007e82:	d404      	bmi.n	8007e8e <_fflush_r+0x3a>
 8007e84:	0599      	lsls	r1, r3, #22
 8007e86:	d402      	bmi.n	8007e8e <_fflush_r+0x3a>
 8007e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e8a:	f000 f915 	bl	80080b8 <__retarget_lock_acquire_recursive>
 8007e8e:	4628      	mov	r0, r5
 8007e90:	4621      	mov	r1, r4
 8007e92:	f7ff ff59 	bl	8007d48 <__sflush_r>
 8007e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e98:	07da      	lsls	r2, r3, #31
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	d4e0      	bmi.n	8007e60 <_fflush_r+0xc>
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	059b      	lsls	r3, r3, #22
 8007ea2:	d4dd      	bmi.n	8007e60 <_fflush_r+0xc>
 8007ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea6:	f000 f908 	bl	80080ba <__retarget_lock_release_recursive>
 8007eaa:	e7d9      	b.n	8007e60 <_fflush_r+0xc>
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <_fflush_r+0x70>)
 8007eae:	429c      	cmp	r4, r3
 8007eb0:	d101      	bne.n	8007eb6 <_fflush_r+0x62>
 8007eb2:	68ac      	ldr	r4, [r5, #8]
 8007eb4:	e7df      	b.n	8007e76 <_fflush_r+0x22>
 8007eb6:	4b04      	ldr	r3, [pc, #16]	; (8007ec8 <_fflush_r+0x74>)
 8007eb8:	429c      	cmp	r4, r3
 8007eba:	bf08      	it	eq
 8007ebc:	68ec      	ldreq	r4, [r5, #12]
 8007ebe:	e7da      	b.n	8007e76 <_fflush_r+0x22>
 8007ec0:	08008834 	.word	0x08008834
 8007ec4:	08008854 	.word	0x08008854
 8007ec8:	08008814 	.word	0x08008814

08007ecc <std>:
 8007ecc:	2300      	movs	r3, #0
 8007ece:	b510      	push	{r4, lr}
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eda:	6083      	str	r3, [r0, #8]
 8007edc:	8181      	strh	r1, [r0, #12]
 8007ede:	6643      	str	r3, [r0, #100]	; 0x64
 8007ee0:	81c2      	strh	r2, [r0, #14]
 8007ee2:	6183      	str	r3, [r0, #24]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	2208      	movs	r2, #8
 8007ee8:	305c      	adds	r0, #92	; 0x5c
 8007eea:	f7fb fdcd 	bl	8003a88 <memset>
 8007eee:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <std+0x38>)
 8007ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <std+0x3c>)
 8007ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ef6:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <std+0x40>)
 8007ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007efa:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <std+0x44>)
 8007efc:	6224      	str	r4, [r4, #32]
 8007efe:	6323      	str	r3, [r4, #48]	; 0x30
 8007f00:	bd10      	pop	{r4, pc}
 8007f02:	bf00      	nop
 8007f04:	08008221 	.word	0x08008221
 8007f08:	08008243 	.word	0x08008243
 8007f0c:	0800827b 	.word	0x0800827b
 8007f10:	0800829f 	.word	0x0800829f

08007f14 <_cleanup_r>:
 8007f14:	4901      	ldr	r1, [pc, #4]	; (8007f1c <_cleanup_r+0x8>)
 8007f16:	f000 b8af 	b.w	8008078 <_fwalk_reent>
 8007f1a:	bf00      	nop
 8007f1c:	08007e55 	.word	0x08007e55

08007f20 <__sfmoreglue>:
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	2268      	movs	r2, #104	; 0x68
 8007f24:	1e4d      	subs	r5, r1, #1
 8007f26:	4355      	muls	r5, r2
 8007f28:	460e      	mov	r6, r1
 8007f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f2e:	f7ff fa59 	bl	80073e4 <_malloc_r>
 8007f32:	4604      	mov	r4, r0
 8007f34:	b140      	cbz	r0, 8007f48 <__sfmoreglue+0x28>
 8007f36:	2100      	movs	r1, #0
 8007f38:	e9c0 1600 	strd	r1, r6, [r0]
 8007f3c:	300c      	adds	r0, #12
 8007f3e:	60a0      	str	r0, [r4, #8]
 8007f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f44:	f7fb fda0 	bl	8003a88 <memset>
 8007f48:	4620      	mov	r0, r4
 8007f4a:	bd70      	pop	{r4, r5, r6, pc}

08007f4c <__sfp_lock_acquire>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	; (8007f54 <__sfp_lock_acquire+0x8>)
 8007f4e:	f000 b8b3 	b.w	80080b8 <__retarget_lock_acquire_recursive>
 8007f52:	bf00      	nop
 8007f54:	200002e1 	.word	0x200002e1

08007f58 <__sfp_lock_release>:
 8007f58:	4801      	ldr	r0, [pc, #4]	; (8007f60 <__sfp_lock_release+0x8>)
 8007f5a:	f000 b8ae 	b.w	80080ba <__retarget_lock_release_recursive>
 8007f5e:	bf00      	nop
 8007f60:	200002e1 	.word	0x200002e1

08007f64 <__sinit_lock_acquire>:
 8007f64:	4801      	ldr	r0, [pc, #4]	; (8007f6c <__sinit_lock_acquire+0x8>)
 8007f66:	f000 b8a7 	b.w	80080b8 <__retarget_lock_acquire_recursive>
 8007f6a:	bf00      	nop
 8007f6c:	200002e2 	.word	0x200002e2

08007f70 <__sinit_lock_release>:
 8007f70:	4801      	ldr	r0, [pc, #4]	; (8007f78 <__sinit_lock_release+0x8>)
 8007f72:	f000 b8a2 	b.w	80080ba <__retarget_lock_release_recursive>
 8007f76:	bf00      	nop
 8007f78:	200002e2 	.word	0x200002e2

08007f7c <__sinit>:
 8007f7c:	b510      	push	{r4, lr}
 8007f7e:	4604      	mov	r4, r0
 8007f80:	f7ff fff0 	bl	8007f64 <__sinit_lock_acquire>
 8007f84:	69a3      	ldr	r3, [r4, #24]
 8007f86:	b11b      	cbz	r3, 8007f90 <__sinit+0x14>
 8007f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f8c:	f7ff bff0 	b.w	8007f70 <__sinit_lock_release>
 8007f90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f94:	6523      	str	r3, [r4, #80]	; 0x50
 8007f96:	4b13      	ldr	r3, [pc, #76]	; (8007fe4 <__sinit+0x68>)
 8007f98:	4a13      	ldr	r2, [pc, #76]	; (8007fe8 <__sinit+0x6c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f9e:	42a3      	cmp	r3, r4
 8007fa0:	bf04      	itt	eq
 8007fa2:	2301      	moveq	r3, #1
 8007fa4:	61a3      	streq	r3, [r4, #24]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f000 f820 	bl	8007fec <__sfp>
 8007fac:	6060      	str	r0, [r4, #4]
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 f81c 	bl	8007fec <__sfp>
 8007fb4:	60a0      	str	r0, [r4, #8]
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f000 f818 	bl	8007fec <__sfp>
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	60e0      	str	r0, [r4, #12]
 8007fc0:	2104      	movs	r1, #4
 8007fc2:	6860      	ldr	r0, [r4, #4]
 8007fc4:	f7ff ff82 	bl	8007ecc <std>
 8007fc8:	68a0      	ldr	r0, [r4, #8]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	2109      	movs	r1, #9
 8007fce:	f7ff ff7d 	bl	8007ecc <std>
 8007fd2:	68e0      	ldr	r0, [r4, #12]
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	2112      	movs	r1, #18
 8007fd8:	f7ff ff78 	bl	8007ecc <std>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	61a3      	str	r3, [r4, #24]
 8007fe0:	e7d2      	b.n	8007f88 <__sinit+0xc>
 8007fe2:	bf00      	nop
 8007fe4:	080083d0 	.word	0x080083d0
 8007fe8:	08007f15 	.word	0x08007f15

08007fec <__sfp>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	4607      	mov	r7, r0
 8007ff0:	f7ff ffac 	bl	8007f4c <__sfp_lock_acquire>
 8007ff4:	4b1e      	ldr	r3, [pc, #120]	; (8008070 <__sfp+0x84>)
 8007ff6:	681e      	ldr	r6, [r3, #0]
 8007ff8:	69b3      	ldr	r3, [r6, #24]
 8007ffa:	b913      	cbnz	r3, 8008002 <__sfp+0x16>
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f7ff ffbd 	bl	8007f7c <__sinit>
 8008002:	3648      	adds	r6, #72	; 0x48
 8008004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008008:	3b01      	subs	r3, #1
 800800a:	d503      	bpl.n	8008014 <__sfp+0x28>
 800800c:	6833      	ldr	r3, [r6, #0]
 800800e:	b30b      	cbz	r3, 8008054 <__sfp+0x68>
 8008010:	6836      	ldr	r6, [r6, #0]
 8008012:	e7f7      	b.n	8008004 <__sfp+0x18>
 8008014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008018:	b9d5      	cbnz	r5, 8008050 <__sfp+0x64>
 800801a:	4b16      	ldr	r3, [pc, #88]	; (8008074 <__sfp+0x88>)
 800801c:	60e3      	str	r3, [r4, #12]
 800801e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008022:	6665      	str	r5, [r4, #100]	; 0x64
 8008024:	f000 f847 	bl	80080b6 <__retarget_lock_init_recursive>
 8008028:	f7ff ff96 	bl	8007f58 <__sfp_lock_release>
 800802c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008034:	6025      	str	r5, [r4, #0]
 8008036:	61a5      	str	r5, [r4, #24]
 8008038:	2208      	movs	r2, #8
 800803a:	4629      	mov	r1, r5
 800803c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008040:	f7fb fd22 	bl	8003a88 <memset>
 8008044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800804c:	4620      	mov	r0, r4
 800804e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008050:	3468      	adds	r4, #104	; 0x68
 8008052:	e7d9      	b.n	8008008 <__sfp+0x1c>
 8008054:	2104      	movs	r1, #4
 8008056:	4638      	mov	r0, r7
 8008058:	f7ff ff62 	bl	8007f20 <__sfmoreglue>
 800805c:	4604      	mov	r4, r0
 800805e:	6030      	str	r0, [r6, #0]
 8008060:	2800      	cmp	r0, #0
 8008062:	d1d5      	bne.n	8008010 <__sfp+0x24>
 8008064:	f7ff ff78 	bl	8007f58 <__sfp_lock_release>
 8008068:	230c      	movs	r3, #12
 800806a:	603b      	str	r3, [r7, #0]
 800806c:	e7ee      	b.n	800804c <__sfp+0x60>
 800806e:	bf00      	nop
 8008070:	080083d0 	.word	0x080083d0
 8008074:	ffff0001 	.word	0xffff0001

08008078 <_fwalk_reent>:
 8008078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800807c:	4606      	mov	r6, r0
 800807e:	4688      	mov	r8, r1
 8008080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008084:	2700      	movs	r7, #0
 8008086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800808a:	f1b9 0901 	subs.w	r9, r9, #1
 800808e:	d505      	bpl.n	800809c <_fwalk_reent+0x24>
 8008090:	6824      	ldr	r4, [r4, #0]
 8008092:	2c00      	cmp	r4, #0
 8008094:	d1f7      	bne.n	8008086 <_fwalk_reent+0xe>
 8008096:	4638      	mov	r0, r7
 8008098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800809c:	89ab      	ldrh	r3, [r5, #12]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d907      	bls.n	80080b2 <_fwalk_reent+0x3a>
 80080a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080a6:	3301      	adds	r3, #1
 80080a8:	d003      	beq.n	80080b2 <_fwalk_reent+0x3a>
 80080aa:	4629      	mov	r1, r5
 80080ac:	4630      	mov	r0, r6
 80080ae:	47c0      	blx	r8
 80080b0:	4307      	orrs	r7, r0
 80080b2:	3568      	adds	r5, #104	; 0x68
 80080b4:	e7e9      	b.n	800808a <_fwalk_reent+0x12>

080080b6 <__retarget_lock_init_recursive>:
 80080b6:	4770      	bx	lr

080080b8 <__retarget_lock_acquire_recursive>:
 80080b8:	4770      	bx	lr

080080ba <__retarget_lock_release_recursive>:
 80080ba:	4770      	bx	lr

080080bc <__swhatbuf_r>:
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	460e      	mov	r6, r1
 80080c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c4:	2900      	cmp	r1, #0
 80080c6:	b096      	sub	sp, #88	; 0x58
 80080c8:	4614      	mov	r4, r2
 80080ca:	461d      	mov	r5, r3
 80080cc:	da08      	bge.n	80080e0 <__swhatbuf_r+0x24>
 80080ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	602a      	str	r2, [r5, #0]
 80080d6:	061a      	lsls	r2, r3, #24
 80080d8:	d410      	bmi.n	80080fc <__swhatbuf_r+0x40>
 80080da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080de:	e00e      	b.n	80080fe <__swhatbuf_r+0x42>
 80080e0:	466a      	mov	r2, sp
 80080e2:	f000 f903 	bl	80082ec <_fstat_r>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	dbf1      	blt.n	80080ce <__swhatbuf_r+0x12>
 80080ea:	9a01      	ldr	r2, [sp, #4]
 80080ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080f4:	425a      	negs	r2, r3
 80080f6:	415a      	adcs	r2, r3
 80080f8:	602a      	str	r2, [r5, #0]
 80080fa:	e7ee      	b.n	80080da <__swhatbuf_r+0x1e>
 80080fc:	2340      	movs	r3, #64	; 0x40
 80080fe:	2000      	movs	r0, #0
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	b016      	add	sp, #88	; 0x58
 8008104:	bd70      	pop	{r4, r5, r6, pc}
	...

08008108 <__smakebuf_r>:
 8008108:	898b      	ldrh	r3, [r1, #12]
 800810a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800810c:	079d      	lsls	r5, r3, #30
 800810e:	4606      	mov	r6, r0
 8008110:	460c      	mov	r4, r1
 8008112:	d507      	bpl.n	8008124 <__smakebuf_r+0x1c>
 8008114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	6123      	str	r3, [r4, #16]
 800811c:	2301      	movs	r3, #1
 800811e:	6163      	str	r3, [r4, #20]
 8008120:	b002      	add	sp, #8
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	ab01      	add	r3, sp, #4
 8008126:	466a      	mov	r2, sp
 8008128:	f7ff ffc8 	bl	80080bc <__swhatbuf_r>
 800812c:	9900      	ldr	r1, [sp, #0]
 800812e:	4605      	mov	r5, r0
 8008130:	4630      	mov	r0, r6
 8008132:	f7ff f957 	bl	80073e4 <_malloc_r>
 8008136:	b948      	cbnz	r0, 800814c <__smakebuf_r+0x44>
 8008138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800813c:	059a      	lsls	r2, r3, #22
 800813e:	d4ef      	bmi.n	8008120 <__smakebuf_r+0x18>
 8008140:	f023 0303 	bic.w	r3, r3, #3
 8008144:	f043 0302 	orr.w	r3, r3, #2
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	e7e3      	b.n	8008114 <__smakebuf_r+0xc>
 800814c:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <__smakebuf_r+0x7c>)
 800814e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	6020      	str	r0, [r4, #0]
 8008154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008158:	81a3      	strh	r3, [r4, #12]
 800815a:	9b00      	ldr	r3, [sp, #0]
 800815c:	6163      	str	r3, [r4, #20]
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	6120      	str	r0, [r4, #16]
 8008162:	b15b      	cbz	r3, 800817c <__smakebuf_r+0x74>
 8008164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008168:	4630      	mov	r0, r6
 800816a:	f000 f8d1 	bl	8008310 <_isatty_r>
 800816e:	b128      	cbz	r0, 800817c <__smakebuf_r+0x74>
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	f043 0301 	orr.w	r3, r3, #1
 800817a:	81a3      	strh	r3, [r4, #12]
 800817c:	89a0      	ldrh	r0, [r4, #12]
 800817e:	4305      	orrs	r5, r0
 8008180:	81a5      	strh	r5, [r4, #12]
 8008182:	e7cd      	b.n	8008120 <__smakebuf_r+0x18>
 8008184:	08007f15 	.word	0x08007f15

08008188 <_malloc_usable_size_r>:
 8008188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800818c:	1f18      	subs	r0, r3, #4
 800818e:	2b00      	cmp	r3, #0
 8008190:	bfbc      	itt	lt
 8008192:	580b      	ldrlt	r3, [r1, r0]
 8008194:	18c0      	addlt	r0, r0, r3
 8008196:	4770      	bx	lr

08008198 <_raise_r>:
 8008198:	291f      	cmp	r1, #31
 800819a:	b538      	push	{r3, r4, r5, lr}
 800819c:	4604      	mov	r4, r0
 800819e:	460d      	mov	r5, r1
 80081a0:	d904      	bls.n	80081ac <_raise_r+0x14>
 80081a2:	2316      	movs	r3, #22
 80081a4:	6003      	str	r3, [r0, #0]
 80081a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081ae:	b112      	cbz	r2, 80081b6 <_raise_r+0x1e>
 80081b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081b4:	b94b      	cbnz	r3, 80081ca <_raise_r+0x32>
 80081b6:	4620      	mov	r0, r4
 80081b8:	f000 f830 	bl	800821c <_getpid_r>
 80081bc:	462a      	mov	r2, r5
 80081be:	4601      	mov	r1, r0
 80081c0:	4620      	mov	r0, r4
 80081c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c6:	f000 b817 	b.w	80081f8 <_kill_r>
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d00a      	beq.n	80081e4 <_raise_r+0x4c>
 80081ce:	1c59      	adds	r1, r3, #1
 80081d0:	d103      	bne.n	80081da <_raise_r+0x42>
 80081d2:	2316      	movs	r3, #22
 80081d4:	6003      	str	r3, [r0, #0]
 80081d6:	2001      	movs	r0, #1
 80081d8:	e7e7      	b.n	80081aa <_raise_r+0x12>
 80081da:	2400      	movs	r4, #0
 80081dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081e0:	4628      	mov	r0, r5
 80081e2:	4798      	blx	r3
 80081e4:	2000      	movs	r0, #0
 80081e6:	e7e0      	b.n	80081aa <_raise_r+0x12>

080081e8 <raise>:
 80081e8:	4b02      	ldr	r3, [pc, #8]	; (80081f4 <raise+0xc>)
 80081ea:	4601      	mov	r1, r0
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f7ff bfd3 	b.w	8008198 <_raise_r>
 80081f2:	bf00      	nop
 80081f4:	2000000c 	.word	0x2000000c

080081f8 <_kill_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	; (8008218 <_kill_r+0x20>)
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	f7f8 fe2f 	bl	8000e68 <_kill>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	d102      	bne.n	8008214 <_kill_r+0x1c>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	b103      	cbz	r3, 8008214 <_kill_r+0x1c>
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	bd38      	pop	{r3, r4, r5, pc}
 8008216:	bf00      	nop
 8008218:	200002dc 	.word	0x200002dc

0800821c <_getpid_r>:
 800821c:	f7f8 be1c 	b.w	8000e58 <_getpid>

08008220 <__sread>:
 8008220:	b510      	push	{r4, lr}
 8008222:	460c      	mov	r4, r1
 8008224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008228:	f000 f894 	bl	8008354 <_read_r>
 800822c:	2800      	cmp	r0, #0
 800822e:	bfab      	itete	ge
 8008230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008232:	89a3      	ldrhlt	r3, [r4, #12]
 8008234:	181b      	addge	r3, r3, r0
 8008236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800823a:	bfac      	ite	ge
 800823c:	6563      	strge	r3, [r4, #84]	; 0x54
 800823e:	81a3      	strhlt	r3, [r4, #12]
 8008240:	bd10      	pop	{r4, pc}

08008242 <__swrite>:
 8008242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008246:	461f      	mov	r7, r3
 8008248:	898b      	ldrh	r3, [r1, #12]
 800824a:	05db      	lsls	r3, r3, #23
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
 8008250:	4616      	mov	r6, r2
 8008252:	d505      	bpl.n	8008260 <__swrite+0x1e>
 8008254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008258:	2302      	movs	r3, #2
 800825a:	2200      	movs	r2, #0
 800825c:	f000 f868 	bl	8008330 <_lseek_r>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	4628      	mov	r0, r5
 8008272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008276:	f000 b817 	b.w	80082a8 <_write_r>

0800827a <__sseek>:
 800827a:	b510      	push	{r4, lr}
 800827c:	460c      	mov	r4, r1
 800827e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008282:	f000 f855 	bl	8008330 <_lseek_r>
 8008286:	1c43      	adds	r3, r0, #1
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	bf15      	itete	ne
 800828c:	6560      	strne	r0, [r4, #84]	; 0x54
 800828e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008296:	81a3      	strheq	r3, [r4, #12]
 8008298:	bf18      	it	ne
 800829a:	81a3      	strhne	r3, [r4, #12]
 800829c:	bd10      	pop	{r4, pc}

0800829e <__sclose>:
 800829e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a2:	f000 b813 	b.w	80082cc <_close_r>
	...

080082a8 <_write_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	; (80082c8 <_write_r+0x20>)
 80082ac:	4604      	mov	r4, r0
 80082ae:	4608      	mov	r0, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	602a      	str	r2, [r5, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f7f8 fd64 	bl	8000d84 <_write>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_write_r+0x1e>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_write_r+0x1e>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	200002dc 	.word	0x200002dc

080082cc <_close_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d06      	ldr	r5, [pc, #24]	; (80082e8 <_close_r+0x1c>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	f7f8 fdfd 	bl	8000ed6 <_close>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_close_r+0x1a>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_close_r+0x1a>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	200002dc 	.word	0x200002dc

080082ec <_fstat_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d07      	ldr	r5, [pc, #28]	; (800830c <_fstat_r+0x20>)
 80082f0:	2300      	movs	r3, #0
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	4611      	mov	r1, r2
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	f7f8 fdf8 	bl	8000eee <_fstat>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	d102      	bne.n	8008308 <_fstat_r+0x1c>
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	b103      	cbz	r3, 8008308 <_fstat_r+0x1c>
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	bd38      	pop	{r3, r4, r5, pc}
 800830a:	bf00      	nop
 800830c:	200002dc 	.word	0x200002dc

08008310 <_isatty_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d06      	ldr	r5, [pc, #24]	; (800832c <_isatty_r+0x1c>)
 8008314:	2300      	movs	r3, #0
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	602b      	str	r3, [r5, #0]
 800831c:	f7f8 fdf7 	bl	8000f0e <_isatty>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_isatty_r+0x1a>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_isatty_r+0x1a>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	200002dc 	.word	0x200002dc

08008330 <_lseek_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d07      	ldr	r5, [pc, #28]	; (8008350 <_lseek_r+0x20>)
 8008334:	4604      	mov	r4, r0
 8008336:	4608      	mov	r0, r1
 8008338:	4611      	mov	r1, r2
 800833a:	2200      	movs	r2, #0
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f7f8 fdf0 	bl	8000f24 <_lseek>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_lseek_r+0x1e>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_lseek_r+0x1e>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	200002dc 	.word	0x200002dc

08008354 <_read_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d07      	ldr	r5, [pc, #28]	; (8008374 <_read_r+0x20>)
 8008358:	4604      	mov	r4, r0
 800835a:	4608      	mov	r0, r1
 800835c:	4611      	mov	r1, r2
 800835e:	2200      	movs	r2, #0
 8008360:	602a      	str	r2, [r5, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	f7f8 fd9a 	bl	8000e9c <_read>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_read_r+0x1e>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_read_r+0x1e>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	200002dc 	.word	0x200002dc

08008378 <_init>:
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	bf00      	nop
 800837c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837e:	bc08      	pop	{r3}
 8008380:	469e      	mov	lr, r3
 8008382:	4770      	bx	lr

08008384 <_fini>:
 8008384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008386:	bf00      	nop
 8008388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838a:	bc08      	pop	{r3}
 800838c:	469e      	mov	lr, r3
 800838e:	4770      	bx	lr
