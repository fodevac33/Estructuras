
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08009868  08009868  00019868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d84  08009d84  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  08009d84  08009d84  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d84  08009d84  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d84  08009d84  00019d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d88  08009d88  00019d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200001f8  08009f84  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08009f84  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001209b  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002912  00000000  00000000  000322c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00034bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00035a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af2a  00000000  00000000  000367b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f41  00000000  00000000  000616da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b26  00000000  00000000  0007461b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017c141  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005034  00000000  00000000  0017c194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009850 	.word	0x08009850

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08009850 	.word	0x08009850

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
char row1[17];
char data[17];


int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b098      	sub	sp, #96	; 0x60
 8000cf8:	af08      	add	r7, sp, #32
  HAL_Init();
 8000cfa:	f000 fa87 	bl	800120c <HAL_Init>
  SysConfigClock();
 8000cfe:	f004 f8ae 	bl	8004e5e <SysConfigClock>
  Global_GPIO_Init();
 8000d02:	f003 fc49 	bl	8004598 <Global_GPIO_Init>

  LCD_Struct_t LCD_1602 = LCD_Create(LCD_Ports, LCD_Pins, RS_Port, RS_Pin, E_Port, E_Pin);
 8000d06:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d0e:	9302      	str	r3, [sp, #8]
 8000d10:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <main+0xfc>)
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <main+0xfc>)
 8000d1c:	4a35      	ldr	r2, [pc, #212]	; (8000df4 <main+0x100>)
 8000d1e:	4936      	ldr	r1, [pc, #216]	; (8000df8 <main+0x104>)
 8000d20:	f003 fef1 	bl	8004b06 <LCD_Create>

  LCD_XY(&LCD_1602, 0, 0);
 8000d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 f878 	bl	8004e22 <LCD_XY>
  LCD_String(&LCD_1602, "Joystick: ");
 8000d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d36:	4931      	ldr	r1, [pc, #196]	; (8000dfc <main+0x108>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 f853 	bl	8004de4 <LCD_String>

  Joystick_Struct_t Joystick = Joystick_Create(
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <main+0x10c>)
 8000d42:	9306      	str	r3, [sp, #24]
 8000d44:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <main+0x110>)
 8000d46:	9305      	str	r3, [sp, #20]
 8000d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4c:	9304      	str	r3, [sp, #16]
 8000d4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d52:	9303      	str	r3, [sp, #12]
 8000d54:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <main+0x114>)
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	2302      	movs	r3, #2
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <main+0x118>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d6a:	f003 fe1b 	bl	80049a4 <Joystick_Create>
		  JOYSTICK_BUTTON_Port, JOYSTICK_BUTTON_Pin,
		  &Joystick_ChannelConf, &Joystick_ADC_Handler);

  while (1)
  {
	  Joystick_Read(&Joystick, xy_joystick);
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4927      	ldr	r1, [pc, #156]	; (8000e10 <main+0x11c>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 fe74 	bl	8004a60 <Joystick_Read>
	  sprintf(data, "X: %hd, Y: %hd    ", xy_joystick[0], xy_joystick[1]);
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <main+0x11c>)
 8000d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <main+0x11c>)
 8000d82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d86:	4923      	ldr	r1, [pc, #140]	; (8000e14 <main+0x120>)
 8000d88:	4823      	ldr	r0, [pc, #140]	; (8000e18 <main+0x124>)
 8000d8a:	f004 ff71 	bl	8005c70 <siprintf>

	  LCD_XY(&LCD_1602, 1, 0);
 8000d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d92:	2200      	movs	r2, #0
 8000d94:	2101      	movs	r1, #1
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 f843 	bl	8004e22 <LCD_XY>
	  LCD_String(&LCD_1602, data);
 8000d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da0:	491d      	ldr	r1, [pc, #116]	; (8000e18 <main+0x124>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f004 f81e 	bl	8004de4 <LCD_String>

	  if (button_state == 1) {
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <main+0x128>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d10d      	bne.n	8000dcc <main+0xd8>
		  LCD_XY(&LCD_1602, 0, 0);
 8000db0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 f832 	bl	8004e22 <LCD_XY>
		  LCD_String(&LCD_1602, "Button: 1");
 8000dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc2:	4917      	ldr	r1, [pc, #92]	; (8000e20 <main+0x12c>)
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 f80d 	bl	8004de4 <LCD_String>
 8000dca:	e00c      	b.n	8000de6 <main+0xf2>
	  }
	  else {
		  LCD_XY(&LCD_1602, 0, 0);
 8000dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 f824 	bl	8004e22 <LCD_XY>
		  LCD_String(&LCD_1602, "Button: 0");
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	4911      	ldr	r1, [pc, #68]	; (8000e24 <main+0x130>)
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 ffff 	bl	8004de4 <LCD_String>
	  }

	  HAL_Delay(100);
 8000de6:	2064      	movs	r0, #100	; 0x64
 8000de8:	f000 fa8c 	bl	8001304 <HAL_Delay>
	  Joystick_Read(&Joystick, xy_joystick);
 8000dec:	e7bf      	b.n	8000d6e <main+0x7a>
 8000dee:	bf00      	nop
 8000df0:	48000400 	.word	0x48000400
 8000df4:	20000010 	.word	0x20000010
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	08009868 	.word	0x08009868
 8000e00:	2000022c 	.word	0x2000022c
 8000e04:	20000214 	.word	0x20000214
 8000e08:	19200040 	.word	0x19200040
 8000e0c:	14f00020 	.word	0x14f00020
 8000e10:	20000294 	.word	0x20000294
 8000e14:	08009874 	.word	0x08009874
 8000e18:	20000298 	.word	0x20000298
 8000e1c:	20000290 	.word	0x20000290
 8000e20:	08009888 	.word	0x08009888
 8000e24:	08009894 	.word	0x08009894

08000e28 <HAL_GPIO_EXTI_Callback>:
  }
}

//Joystick button interruption callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == JOYSTICK_BUTTON_Pin) {
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e38:	d109      	bne.n	8000e4e <HAL_GPIO_EXTI_Callback+0x26>
		button_state = (button_state == 0) ? 1 : 0;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_GPIO_EXTI_Callback+0x34>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf0c      	ite	eq
 8000e42:	2301      	moveq	r3, #1
 8000e44:	2300      	movne	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_GPIO_EXTI_Callback+0x34>)
 8000e4c:	601a      	str	r2, [r3, #0]
	}
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000290 	.word	0x20000290

08000e60 <__io_putchar>:

int __io_putchar(int ch);
int _write(int file, char *ptr, int len);


int __io_putchar(int ch) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&USART2_I, &c[0], 1, 100);
 8000e6e:	f107 010c 	add.w	r1, r7, #12
 8000e72:	2364      	movs	r3, #100	; 0x64
 8000e74:	2201      	movs	r2, #1
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <__io_putchar+0x28>)
 8000e78:	f003 fa36 	bl	80042e8 <HAL_UART_Transmit>
	return ch;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200002b4 	.word	0x200002b4

08000e8c <_write>:


int _write(int file, char *ptr, int len) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e009      	b.n	8000eb2 <_write+0x26>
		__io_putchar(*ptr++);
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	60ba      	str	r2, [r7, #8]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ffda 	bl	8000e60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	dbf1      	blt.n	8000e9e <_write+0x12>
	}

	return len;
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x44>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6593      	str	r3, [r2, #88]	; 0x58
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x44>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0ac      	sub	sp, #176	; 0xb0
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2288      	movs	r2, #136	; 0x88
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f004 f817 	bl	8004f60 <memset>
  if(hadc->Instance==ADC1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <HAL_ADC_MspInit+0xc8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d147      	bne.n	8000fcc <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f40:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f52:	2308      	movs	r3, #8
 8000f54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f56:	2307      	movs	r3, #7
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fcff 	bl	8003970 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000f78:	f003 ffc2 	bl	8004f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000f82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fac:	2301      	movs	r3, #1
 8000fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fb2:	230b      	movs	r3, #11
 8000fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc8:	f001 fccc 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	37b0      	adds	r7, #176	; 0xb0
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	50040000 	.word	0x50040000
 8000fd8:	40021000 	.word	0x40021000

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 f94c 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <EXTI9_5_IRQHandler>:
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(JOYSTICK_BUTTON_Pin);
 8001034:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001038:	f001 fe56 	bl	8002ce8 <HAL_GPIO_EXTI_IRQHandler>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return 1;
 8001044:	2301      	movs	r3, #1
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_kill>:

int _kill(int pid, int sig)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800105a:	f003 ff57 	bl	8004f0c <__errno>
 800105e:	4603      	mov	r3, r0
 8001060:	2216      	movs	r2, #22
 8001062:	601a      	str	r2, [r3, #0]
  return -1;
 8001064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_exit>:

void _exit (int status)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe7 	bl	8001050 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001082:	e7fe      	b.n	8001082 <_exit+0x12>

08001084 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e00a      	b.n	80010ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001096:	f3af 8000 	nop.w
 800109a:	4601      	mov	r1, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf0      	blt.n	8001096 <_read+0x12>
  }

  return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_close>:
  }
  return len;
}

int _close(int file)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e6:	605a      	str	r2, [r3, #4]
  return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_isatty>:

int _isatty(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	; (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f003 fed8 	bl	8004f0c <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20018000 	.word	0x20018000
 8001188:	00000400 	.word	0x00000400
 800118c:	200002ac 	.word	0x200002ac
 8001190:	20000348 	.word	0x20000348

08001194 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <SystemInit+0x20>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <SystemInit+0x20>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011bc:	f7ff ffea 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <LoopForever+0xe>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	; (8001204 <LoopForever+0x16>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e6:	f003 fe97 	bl	8004f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ea:	f7ff fd83 	bl	8000cf4 <main>

080011ee <LoopForever>:

LoopForever:
    b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80011fc:	08009d8c 	.word	0x08009d8c
  ldr r2, =_sbss
 8001200:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001204:	20000348 	.word	0x20000348

08001208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_2_IRQHandler>
	...

0800120c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_Init+0x3c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <HAL_Init+0x3c>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001220:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001222:	2003      	movs	r0, #3
 8001224:	f001 fb6a 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001228:	2000      	movs	r0, #0
 800122a:	f000 f80f 	bl	800124c <HAL_InitTick>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	e001      	b.n	800123e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800123a:	f7ff fe43 	bl	8000ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800123e:	79fb      	ldrb	r3, [r7, #7]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40022000 	.word	0x40022000

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_InitTick+0x6c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d023      	beq.n	80012a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_InitTick+0x70>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_InitTick+0x6c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fb67 	bl	800294a <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10f      	bne.n	80012a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d809      	bhi.n	800129c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001290:	f001 fb3f 	bl	8002912 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_InitTick+0x74>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e007      	b.n	80012ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e004      	b.n	80012ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e001      	b.n	80012ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000020 	.word	0x20000020
 80012bc:	20000018 	.word	0x20000018
 80012c0:	2000001c 	.word	0x2000001c

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000020 	.word	0x20000020
 80012e8:	200002b0 	.word	0x200002b0

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200002b0 	.word	0x200002b0

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000020 	.word	0x20000020

0800134c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	609a      	str	r2, [r3, #8]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3360      	adds	r3, #96	; 0x60
 80013c6:	461a      	mov	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <LL_ADC_SetOffset+0x44>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	4313      	orrs	r3, r2
 80013e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	03fff000 	.word	0x03fff000

080013fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3360      	adds	r3, #96	; 0x60
 800140a:	461a      	mov	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3360      	adds	r3, #96	; 0x60
 8001438:	461a      	mov	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	431a      	orrs	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001452:	bf00      	nop
 8001454:	371c      	adds	r7, #28
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3330      	adds	r3, #48	; 0x30
 8001494:	461a      	mov	r2, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	4413      	add	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	211f      	movs	r1, #31
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	401a      	ands	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	0e9b      	lsrs	r3, r3, #26
 80014bc:	f003 011f 	and.w	r1, r3, #31
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	f003 031f 	and.w	r3, r3, #31
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	431a      	orrs	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3314      	adds	r3, #20
 80014ec:	461a      	mov	r2, r3
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	0e5b      	lsrs	r3, r3, #25
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	0d1b      	lsrs	r3, r3, #20
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	2107      	movs	r1, #7
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	401a      	ands	r2, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	0d1b      	lsrs	r3, r3, #20
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	431a      	orrs	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001526:	bf00      	nop
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154c:	43db      	mvns	r3, r3
 800154e:	401a      	ands	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0318 	and.w	r3, r3, #24
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001558:	40d9      	lsrs	r1, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	400b      	ands	r3, r1
 800155e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001562:	431a      	orrs	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	0007ffff 	.word	0x0007ffff

0800157c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 031f 	and.w	r3, r3, #31
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6093      	str	r3, [r2, #8]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015ec:	d101      	bne.n	80015f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001610:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001614:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800163c:	d101      	bne.n	8001642 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001660:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <LL_ADC_IsEnabled+0x18>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <LL_ADC_IsEnabled+0x1a>
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016b2:	f043 0204 	orr.w	r2, r3, #4
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d101      	bne.n	80016de <LL_ADC_REG_IsConversionOngoing+0x18>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d101      	bne.n	8001704 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e136      	b.n	800199c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	2b00      	cmp	r3, #0
 800173a:	d109      	bne.n	8001750 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fbe5 	bl	8000f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff3f 	bl	80015d8 <LL_ADC_IsDeepPowerDownEnabled>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff25 	bl	80015b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff5a 	bl	8001628 <LL_ADC_IsInternalRegulatorEnabled>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d115      	bne.n	80017a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff3e 	bl	8001600 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001784:	4b87      	ldr	r3, [pc, #540]	; (80019a4 <HAL_ADC_Init+0x290>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	4a87      	ldr	r2, [pc, #540]	; (80019a8 <HAL_ADC_Init+0x294>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	3301      	adds	r3, #1
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001798:	e002      	b.n	80017a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	3b01      	subs	r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f9      	bne.n	800179a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff3c 	bl	8001628 <LL_ADC_IsInternalRegulatorEnabled>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10d      	bne.n	80017d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	f043 0210 	orr.w	r2, r3, #16
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f043 0201 	orr.w	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff75 	bl	80016c6 <LL_ADC_REG_IsConversionOngoing>
 80017dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 80cf 	bne.w	800198a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 80cb 	bne.w	800198a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017fc:	f043 0202 	orr.w	r2, r3, #2
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff35 	bl	8001678 <LL_ADC_IsEnabled>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d115      	bne.n	8001840 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001814:	4865      	ldr	r0, [pc, #404]	; (80019ac <HAL_ADC_Init+0x298>)
 8001816:	f7ff ff2f 	bl	8001678 <LL_ADC_IsEnabled>
 800181a:	4604      	mov	r4, r0
 800181c:	4864      	ldr	r0, [pc, #400]	; (80019b0 <HAL_ADC_Init+0x29c>)
 800181e:	f7ff ff2b 	bl	8001678 <LL_ADC_IsEnabled>
 8001822:	4603      	mov	r3, r0
 8001824:	431c      	orrs	r4, r3
 8001826:	4863      	ldr	r0, [pc, #396]	; (80019b4 <HAL_ADC_Init+0x2a0>)
 8001828:	f7ff ff26 	bl	8001678 <LL_ADC_IsEnabled>
 800182c:	4603      	mov	r3, r0
 800182e:	4323      	orrs	r3, r4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4619      	mov	r1, r3
 800183a:	485f      	ldr	r0, [pc, #380]	; (80019b8 <HAL_ADC_Init+0x2a4>)
 800183c:	f7ff fd86 	bl	800134c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7e5b      	ldrb	r3, [r3, #25]
 8001844:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800184a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001850:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001856:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d106      	bne.n	800187c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	3b01      	subs	r3, #1
 8001874:	045b      	lsls	r3, r3, #17
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_ADC_Init+0x2a8>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	69b9      	ldr	r1, [r7, #24]
 80018a8:	430b      	orrs	r3, r1
 80018aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff08 	bl	80016c6 <LL_ADC_REG_IsConversionOngoing>
 80018b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff15 	bl	80016ec <LL_ADC_INJ_IsConversionOngoing>
 80018c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d13d      	bne.n	8001946 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d13a      	bne.n	8001946 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018d4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018dc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ec:	f023 0302 	bic.w	r3, r3, #2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	69b9      	ldr	r1, [r7, #24]
 80018f6:	430b      	orrs	r3, r1
 80018f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001900:	2b01      	cmp	r3, #1
 8001902:	d118      	bne.n	8001936 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800190e:	f023 0304 	bic.w	r3, r3, #4
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800191a:	4311      	orrs	r1, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001920:	4311      	orrs	r1, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001926:	430a      	orrs	r2, r1
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	e007      	b.n	8001946 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0201 	bic.w	r2, r2, #1
 8001944:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d10c      	bne.n	8001968 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	f023 010f 	bic.w	r1, r3, #15
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	1e5a      	subs	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	631a      	str	r2, [r3, #48]	; 0x30
 8001966:	e007      	b.n	8001978 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 020f 	bic.w	r2, r2, #15
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f023 0303 	bic.w	r3, r3, #3
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	655a      	str	r2, [r3, #84]	; 0x54
 8001988:	e007      	b.n	800199a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198e:	f043 0210 	orr.w	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800199a:	7ffb      	ldrb	r3, [r7, #31]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3724      	adds	r7, #36	; 0x24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd90      	pop	{r4, r7, pc}
 80019a4:	20000018 	.word	0x20000018
 80019a8:	053e2d63 	.word	0x053e2d63
 80019ac:	50040000 	.word	0x50040000
 80019b0:	50040100 	.word	0x50040100
 80019b4:	50040200 	.word	0x50040200
 80019b8:	50040300 	.word	0x50040300
 80019bc:	fff0c007 	.word	0xfff0c007

080019c0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019c8:	4857      	ldr	r0, [pc, #348]	; (8001b28 <HAL_ADC_Start+0x168>)
 80019ca:	f7ff fdd7 	bl	800157c <LL_ADC_GetMultimode>
 80019ce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fe76 	bl	80016c6 <LL_ADC_REG_IsConversionOngoing>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f040 809c 	bne.w	8001b1a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_Start+0x30>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e097      	b.n	8001b20 <HAL_ADC_Start+0x160>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 fd71 	bl	80024e0 <ADC_Enable>
 80019fe:	4603      	mov	r3, r0
 8001a00:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f040 8083 	bne.w	8001b10 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a42      	ldr	r2, [pc, #264]	; (8001b2c <HAL_ADC_Start+0x16c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d002      	beq.n	8001a2e <HAL_ADC_Start+0x6e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	e000      	b.n	8001a30 <HAL_ADC_Start+0x70>
 8001a2e:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <HAL_ADC_Start+0x170>)
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d002      	beq.n	8001a3e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a56:	d106      	bne.n	8001a66 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	f023 0206 	bic.w	r2, r3, #6
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	659a      	str	r2, [r3, #88]	; 0x58
 8001a64:	e002      	b.n	8001a6c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	221c      	movs	r2, #28
 8001a72:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <HAL_ADC_Start+0x16c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d002      	beq.n	8001a8c <HAL_ADC_Start+0xcc>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	e000      	b.n	8001a8e <HAL_ADC_Start+0xce>
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <HAL_ADC_Start+0x170>)
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d008      	beq.n	8001aa8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d002      	beq.n	8001aa8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	d114      	bne.n	8001ad2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001abe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fde7 	bl	800169e <LL_ADC_REG_StartConversion>
 8001ad0:	e025      	b.n	8001b1e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_ADC_Start+0x16c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d002      	beq.n	8001aee <HAL_ADC_Start+0x12e>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	e000      	b.n	8001af0 <HAL_ADC_Start+0x130>
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_ADC_Start+0x170>)
 8001af0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00f      	beq.n	8001b1e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
 8001b0e:	e006      	b.n	8001b1e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b18:	e001      	b.n	8001b1e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	50040300 	.word	0x50040300
 8001b2c:	50040100 	.word	0x50040100
 8001b30:	50040000 	.word	0x50040000

08001b34 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b3e:	4866      	ldr	r0, [pc, #408]	; (8001cd8 <HAL_ADC_PollForConversion+0x1a4>)
 8001b40:	f7ff fd1c 	bl	800157c <LL_ADC_GetMultimode>
 8001b44:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d102      	bne.n	8001b54 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b4e:	2308      	movs	r3, #8
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	e02a      	b.n	8001baa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d005      	beq.n	8001b66 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d002      	beq.n	8001b66 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b09      	cmp	r3, #9
 8001b64:	d111      	bne.n	8001b8a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	f043 0220 	orr.w	r2, r3, #32
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0a4      	b.n	8001cce <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b84:	2304      	movs	r3, #4
 8001b86:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b88:	e00f      	b.n	8001baa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b8a:	4853      	ldr	r0, [pc, #332]	; (8001cd8 <HAL_ADC_PollForConversion+0x1a4>)
 8001b8c:	f7ff fd04 	bl	8001598 <LL_ADC_GetMultiDMATransfer>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	f043 0220 	orr.w	r2, r3, #32
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e093      	b.n	8001cce <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001baa:	f7ff fb9f 	bl	80012ec <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bb0:	e021      	b.n	8001bf6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb8:	d01d      	beq.n	8001bf6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001bba:	f7ff fb97 	bl	80012ec <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d302      	bcc.n	8001bd0 <HAL_ADC_PollForConversion+0x9c>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d112      	bne.n	8001bf6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	f043 0204 	orr.w	r2, r3, #4
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e06b      	b.n	8001cce <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0d6      	beq.n	8001bb2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fc22 	bl	800145e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01c      	beq.n	8001c5a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7e5b      	ldrb	r3, [r3, #25]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d118      	bne.n	8001c5a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d111      	bne.n	8001c5a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_ADC_PollForConversion+0x1a8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d002      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x136>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e000      	b.n	8001c6c <HAL_ADC_PollForConversion+0x138>
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_ADC_PollForConversion+0x1ac>)
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d008      	beq.n	8001c86 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d002      	beq.n	8001c86 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b09      	cmp	r3, #9
 8001c84:	d104      	bne.n	8001c90 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	e00c      	b.n	8001caa <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <HAL_ADC_PollForConversion+0x1a8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d002      	beq.n	8001ca0 <HAL_ADC_PollForConversion+0x16c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	e000      	b.n	8001ca2 <HAL_ADC_PollForConversion+0x16e>
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_ADC_PollForConversion+0x1ac>)
 8001ca2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d104      	bne.n	8001cba <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e008      	b.n	8001ccc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d103      	bne.n	8001ccc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	220c      	movs	r2, #12
 8001cca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3720      	adds	r7, #32
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	50040300 	.word	0x50040300
 8001cdc:	50040100 	.word	0x50040100
 8001ce0:	50040000 	.word	0x50040000

08001ce4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0b6      	sub	sp, #216	; 0xd8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x22>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e3c7      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x7b2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fcc9 	bl	80016c6 <LL_ADC_REG_IsConversionOngoing>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 83a8 	bne.w	800248c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d824      	bhi.n	8001d8e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	3b02      	subs	r3, #2
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d81b      	bhi.n	8001d86 <HAL_ADC_ConfigChannel+0x86>
 8001d4e:	a201      	add	r2, pc, #4	; (adr r2, 8001d54 <HAL_ADC_ConfigChannel+0x54>)
 8001d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d54:	08001d65 	.word	0x08001d65
 8001d58:	08001d6d 	.word	0x08001d6d
 8001d5c:	08001d75 	.word	0x08001d75
 8001d60:	08001d7d 	.word	0x08001d7d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	220c      	movs	r2, #12
 8001d68:	605a      	str	r2, [r3, #4]
          break;
 8001d6a:	e011      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2212      	movs	r2, #18
 8001d70:	605a      	str	r2, [r3, #4]
          break;
 8001d72:	e00d      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	2218      	movs	r2, #24
 8001d78:	605a      	str	r2, [r3, #4]
          break;
 8001d7a:	e009      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d82:	605a      	str	r2, [r3, #4]
          break;
 8001d84:	e004      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2206      	movs	r2, #6
 8001d8a:	605a      	str	r2, [r3, #4]
          break;
 8001d8c:	e000      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d8e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f7ff fb71 	bl	8001484 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fc8d 	bl	80016c6 <LL_ADC_REG_IsConversionOngoing>
 8001dac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fc99 	bl	80016ec <LL_ADC_INJ_IsConversionOngoing>
 8001dba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 81a6 	bne.w	8002114 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 81a1 	bne.w	8002114 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6819      	ldr	r1, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	461a      	mov	r2, r3
 8001de0:	f7ff fb7c 	bl	80014dc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	08db      	lsrs	r3, r3, #3
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d00a      	beq.n	8001e1c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6919      	ldr	r1, [r3, #16]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e16:	f7ff facd 	bl	80013b4 <LL_ADC_SetOffset>
 8001e1a:	e17b      	b.n	8002114 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff faea 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10a      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x148>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fadf 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	f003 021f 	and.w	r2, r3, #31
 8001e46:	e01e      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x186>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fad4 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e76:	2320      	movs	r3, #32
 8001e78:	e004      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001e7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d105      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x19e>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0e9b      	lsrs	r3, r3, #26
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	e018      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x1d0>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001eba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e004      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ec6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff faa3 	bl	8001428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fa87 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x20e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fa7c 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	e01e      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x24c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2101      	movs	r1, #1
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fa71 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f3c:	2320      	movs	r3, #32
 8001f3e:	e004      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001f40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x264>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0e9b      	lsrs	r3, r3, #26
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	e018      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x296>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001f88:	2320      	movs	r3, #32
 8001f8a:	e004      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001f8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d106      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fa40 	bl	8001428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2102      	movs	r1, #2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fa24 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x2d4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fa19 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	0e9b      	lsrs	r3, r3, #26
 8001fce:	f003 021f 	and.w	r2, r3, #31
 8001fd2:	e01e      	b.n	8002012 <HAL_ADC_ConfigChannel+0x312>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fa0e 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002002:	2320      	movs	r3, #32
 8002004:	e004      	b.n	8002010 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002006:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <HAL_ADC_ConfigChannel+0x32a>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	e016      	b.n	8002058 <HAL_ADC_ConfigChannel+0x358>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800203c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800203e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002042:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800204a:	2320      	movs	r3, #32
 800204c:	e004      	b.n	8002058 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800204e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002058:	429a      	cmp	r2, r3
 800205a:	d106      	bne.n	800206a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	2102      	movs	r1, #2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f9df 	bl	8001428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2103      	movs	r1, #3
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f9c3 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x396>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2103      	movs	r1, #3
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f9b8 	bl	80013fc <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	0e9b      	lsrs	r3, r3, #26
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	e017      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x3c6>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2103      	movs	r1, #3
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f9ad 	bl	80013fc <LL_ADC_GetOffsetChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80020ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80020b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80020b8:	2320      	movs	r3, #32
 80020ba:	e003      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80020bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <HAL_ADC_ConfigChannel+0x3de>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0e9b      	lsrs	r3, r3, #26
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	e011      	b.n	8002102 <HAL_ADC_ConfigChannel+0x402>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80020f6:	2320      	movs	r3, #32
 80020f8:	e003      	b.n	8002102 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80020fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002102:	429a      	cmp	r2, r3
 8002104:	d106      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	2103      	movs	r1, #3
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f98a 	bl	8001428 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff faad 	bl	8001678 <LL_ADC_IsEnabled>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	f040 813f 	bne.w	80023a4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6819      	ldr	r1, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	461a      	mov	r2, r3
 8002134:	f7ff f9fe 	bl	8001534 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a8e      	ldr	r2, [pc, #568]	; (8002378 <HAL_ADC_ConfigChannel+0x678>)
 800213e:	4293      	cmp	r3, r2
 8002140:	f040 8130 	bne.w	80023a4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10b      	bne.n	800216c <HAL_ADC_ConfigChannel+0x46c>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	3301      	adds	r3, #1
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2b09      	cmp	r3, #9
 8002162:	bf94      	ite	ls
 8002164:	2301      	movls	r3, #1
 8002166:	2300      	movhi	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	e019      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x4a0>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800217a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800217c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800217e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e003      	b.n	8002190 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3301      	adds	r3, #1
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2b09      	cmp	r3, #9
 8002198:	bf94      	ite	ls
 800219a:	2301      	movls	r3, #1
 800219c:	2300      	movhi	r3, #0
 800219e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d079      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x4c0>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	3301      	adds	r3, #1
 80021b8:	069b      	lsls	r3, r3, #26
 80021ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021be:	e015      	b.n	80021ec <HAL_ADC_ConfigChannel+0x4ec>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e003      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80021dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <HAL_ADC_ConfigChannel+0x50c>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	3301      	adds	r3, #1
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2101      	movs	r1, #1
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	e017      	b.n	800223c <HAL_ADC_ConfigChannel+0x53c>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800221a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800221c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800221e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	3301      	adds	r3, #1
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2101      	movs	r1, #1
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	ea42 0103 	orr.w	r1, r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x562>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	051b      	lsls	r3, r3, #20
 8002260:	e018      	b.n	8002294 <HAL_ADC_ConfigChannel+0x594>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800227a:	2320      	movs	r3, #32
 800227c:	e003      	b.n	8002286 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800227e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	3301      	adds	r3, #1
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002294:	430b      	orrs	r3, r1
 8002296:	e080      	b.n	800239a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x5b4>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	3301      	adds	r3, #1
 80022ac:	069b      	lsls	r3, r3, #26
 80022ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b2:	e015      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x5e0>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e003      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80022d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	069b      	lsls	r3, r3, #26
 80022dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x600>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	3301      	adds	r3, #1
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	e017      	b.n	8002330 <HAL_ADC_ConfigChannel+0x630>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	61fb      	str	r3, [r7, #28]
  return result;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e003      	b.n	8002324 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3301      	adds	r3, #1
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	ea42 0103 	orr.w	r1, r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10d      	bne.n	800235c <HAL_ADC_ConfigChannel+0x65c>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0e9b      	lsrs	r3, r3, #26
 8002346:	3301      	adds	r3, #1
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	3b1e      	subs	r3, #30
 8002354:	051b      	lsls	r3, r3, #20
 8002356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800235a:	e01d      	b.n	8002398 <HAL_ADC_ConfigChannel+0x698>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	613b      	str	r3, [r7, #16]
  return result;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d103      	bne.n	800237c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002374:	2320      	movs	r3, #32
 8002376:	e005      	b.n	8002384 <HAL_ADC_ConfigChannel+0x684>
 8002378:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	f003 021f 	and.w	r2, r3, #31
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	3b1e      	subs	r3, #30
 8002392:	051b      	lsls	r3, r3, #20
 8002394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002398:	430b      	orrs	r3, r1
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	6892      	ldr	r2, [r2, #8]
 800239e:	4619      	mov	r1, r3
 80023a0:	f7ff f89c 	bl	80014dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b44      	ldr	r3, [pc, #272]	; (80024bc <HAL_ADC_ConfigChannel+0x7bc>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d07a      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023b0:	4843      	ldr	r0, [pc, #268]	; (80024c0 <HAL_ADC_ConfigChannel+0x7c0>)
 80023b2:	f7fe fff1 	bl	8001398 <LL_ADC_GetCommonPathInternalCh>
 80023b6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a41      	ldr	r2, [pc, #260]	; (80024c4 <HAL_ADC_ConfigChannel+0x7c4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d12c      	bne.n	800241e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d126      	bne.n	800241e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a3c      	ldr	r2, [pc, #240]	; (80024c8 <HAL_ADC_ConfigChannel+0x7c8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0x6e4>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <HAL_ADC_ConfigChannel+0x7cc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d15d      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023ec:	4619      	mov	r1, r3
 80023ee:	4834      	ldr	r0, [pc, #208]	; (80024c0 <HAL_ADC_ConfigChannel+0x7c0>)
 80023f0:	f7fe ffbf 	bl	8001372 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023f4:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <HAL_ADC_ConfigChannel+0x7d0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	4a36      	ldr	r2, [pc, #216]	; (80024d4 <HAL_ADC_ConfigChannel+0x7d4>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800240e:	e002      	b.n	8002416 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3b01      	subs	r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f9      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800241c:	e040      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2d      	ldr	r2, [pc, #180]	; (80024d8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d118      	bne.n	800245a <HAL_ADC_ConfigChannel+0x75a>
 8002428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800242c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d112      	bne.n	800245a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a23      	ldr	r2, [pc, #140]	; (80024c8 <HAL_ADC_ConfigChannel+0x7c8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d004      	beq.n	8002448 <HAL_ADC_ConfigChannel+0x748>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a22      	ldr	r2, [pc, #136]	; (80024cc <HAL_ADC_ConfigChannel+0x7cc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d12d      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800244c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002450:	4619      	mov	r1, r3
 8002452:	481b      	ldr	r0, [pc, #108]	; (80024c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002454:	f7fe ff8d 	bl	8001372 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002458:	e024      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <HAL_ADC_ConfigChannel+0x7dc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d120      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002464:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d11a      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d115      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800247a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800247e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002482:	4619      	mov	r1, r3
 8002484:	480e      	ldr	r0, [pc, #56]	; (80024c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002486:	f7fe ff74 	bl	8001372 <LL_ADC_SetCommonPathInternalCh>
 800248a:	e00c      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f043 0220 	orr.w	r2, r3, #32
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800249e:	e002      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024a0:	bf00      	nop
 80024a2:	e000      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	37d8      	adds	r7, #216	; 0xd8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	80080000 	.word	0x80080000
 80024c0:	50040300 	.word	0x50040300
 80024c4:	c7520000 	.word	0xc7520000
 80024c8:	50040000 	.word	0x50040000
 80024cc:	50040200 	.word	0x50040200
 80024d0:	20000018 	.word	0x20000018
 80024d4:	053e2d63 	.word	0x053e2d63
 80024d8:	cb840000 	.word	0xcb840000
 80024dc:	80000001 	.word	0x80000001

080024e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff f8c1 	bl	8001678 <LL_ADC_IsEnabled>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d169      	bne.n	80025d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	4b36      	ldr	r3, [pc, #216]	; (80025dc <ADC_Enable+0xfc>)
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00d      	beq.n	8002526 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f043 0210 	orr.w	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	f043 0201 	orr.w	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e055      	b.n	80025d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f890 	bl	8001650 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002530:	482b      	ldr	r0, [pc, #172]	; (80025e0 <ADC_Enable+0x100>)
 8002532:	f7fe ff31 	bl	8001398 <LL_ADC_GetCommonPathInternalCh>
 8002536:	4603      	mov	r3, r0
 8002538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d013      	beq.n	8002568 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002540:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <ADC_Enable+0x104>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <ADC_Enable+0x108>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800255a:	e002      	b.n	8002562 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	3b01      	subs	r3, #1
 8002560:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f9      	bne.n	800255c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002568:	f7fe fec0 	bl	80012ec <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800256e:	e028      	b.n	80025c2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f87f 	bl	8001678 <LL_ADC_IsEnabled>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f863 	bl	8001650 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800258a:	f7fe feaf 	bl	80012ec <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d914      	bls.n	80025c2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d00d      	beq.n	80025c2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e007      	b.n	80025d2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d1cf      	bne.n	8002570 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	8000003f 	.word	0x8000003f
 80025e0:	50040300 	.word	0x50040300
 80025e4:	20000018 	.word	0x20000018
 80025e8:	053e2d63 	.word	0x053e2d63

080025ec <LL_ADC_IsEnabled>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <LL_ADC_IsEnabled+0x18>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <LL_ADC_IsEnabled+0x1a>
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_REG_IsConversionOngoing>:
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b04      	cmp	r3, #4
 8002624:	d101      	bne.n	800262a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b09f      	sub	sp, #124	; 0x7c
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002652:	2302      	movs	r3, #2
 8002654:	e093      	b.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800265e:	2300      	movs	r3, #0
 8002660:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002662:	2300      	movs	r3, #0
 8002664:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a47      	ldr	r2, [pc, #284]	; (8002788 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d102      	bne.n	8002676 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002670:	4b46      	ldr	r3, [pc, #280]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	e001      	b.n	800267a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10b      	bne.n	8002698 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	f043 0220 	orr.w	r2, r3, #32
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e072      	b.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ffb9 	bl	8002612 <LL_ADC_REG_IsConversionOngoing>
 80026a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ffb3 	bl	8002612 <LL_ADC_REG_IsConversionOngoing>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d154      	bne.n	800275c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d151      	bne.n	800275c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026b8:	4b35      	ldr	r3, [pc, #212]	; (8002790 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80026ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02c      	beq.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026d6:	035b      	lsls	r3, r3, #13
 80026d8:	430b      	orrs	r3, r1
 80026da:	431a      	orrs	r2, r3
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026e0:	4829      	ldr	r0, [pc, #164]	; (8002788 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026e2:	f7ff ff83 	bl	80025ec <LL_ADC_IsEnabled>
 80026e6:	4604      	mov	r4, r0
 80026e8:	4828      	ldr	r0, [pc, #160]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026ea:	f7ff ff7f 	bl	80025ec <LL_ADC_IsEnabled>
 80026ee:	4603      	mov	r3, r0
 80026f0:	431c      	orrs	r4, r3
 80026f2:	4828      	ldr	r0, [pc, #160]	; (8002794 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026f4:	f7ff ff7a 	bl	80025ec <LL_ADC_IsEnabled>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4323      	orrs	r3, r4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d137      	bne.n	8002770 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002708:	f023 030f 	bic.w	r3, r3, #15
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	6811      	ldr	r1, [r2, #0]
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	6892      	ldr	r2, [r2, #8]
 8002714:	430a      	orrs	r2, r1
 8002716:	431a      	orrs	r2, r3
 8002718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800271c:	e028      	b.n	8002770 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800271e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002728:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800272a:	4817      	ldr	r0, [pc, #92]	; (8002788 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800272c:	f7ff ff5e 	bl	80025ec <LL_ADC_IsEnabled>
 8002730:	4604      	mov	r4, r0
 8002732:	4816      	ldr	r0, [pc, #88]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002734:	f7ff ff5a 	bl	80025ec <LL_ADC_IsEnabled>
 8002738:	4603      	mov	r3, r0
 800273a:	431c      	orrs	r4, r3
 800273c:	4815      	ldr	r0, [pc, #84]	; (8002794 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800273e:	f7ff ff55 	bl	80025ec <LL_ADC_IsEnabled>
 8002742:	4603      	mov	r3, r0
 8002744:	4323      	orrs	r3, r4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d112      	bne.n	8002770 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800274a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002752:	f023 030f 	bic.w	r3, r3, #15
 8002756:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002758:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800275a:	e009      	b.n	8002770 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800276e:	e000      	b.n	8002772 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002770:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800277a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800277e:	4618      	mov	r0, r3
 8002780:	377c      	adds	r7, #124	; 0x7c
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}
 8002786:	bf00      	nop
 8002788:	50040000 	.word	0x50040000
 800278c:	50040100 	.word	0x50040100
 8002790:	50040300 	.word	0x50040300
 8002794:	50040200 	.word	0x50040200

08002798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff47 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff5c 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffb0 	bl	80028b8 <SysTick_Config>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002972:	e17f      	b.n	8002c74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8171 	beq.w	8002c6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d005      	beq.n	80029a4 <HAL_GPIO_Init+0x40>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d130      	bne.n	8002a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029da:	2201      	movs	r2, #1
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 0201 	and.w	r2, r3, #1
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d118      	bne.n	8002a44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a18:	2201      	movs	r2, #1
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	08db      	lsrs	r3, r3, #3
 8002a2e:	f003 0201 	and.w	r2, r3, #1
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d017      	beq.n	8002a80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d123      	bne.n	8002ad4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	08da      	lsrs	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3208      	adds	r2, #8
 8002ace:	6939      	ldr	r1, [r7, #16]
 8002ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80ac 	beq.w	8002c6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	4b5f      	ldr	r3, [pc, #380]	; (8002c94 <HAL_GPIO_Init+0x330>)
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	4a5e      	ldr	r2, [pc, #376]	; (8002c94 <HAL_GPIO_Init+0x330>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6613      	str	r3, [r2, #96]	; 0x60
 8002b22:	4b5c      	ldr	r3, [pc, #368]	; (8002c94 <HAL_GPIO_Init+0x330>)
 8002b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b2e:	4a5a      	ldr	r2, [pc, #360]	; (8002c98 <HAL_GPIO_Init+0x334>)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	3302      	adds	r3, #2
 8002b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	220f      	movs	r2, #15
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b58:	d025      	beq.n	8002ba6 <HAL_GPIO_Init+0x242>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4f      	ldr	r2, [pc, #316]	; (8002c9c <HAL_GPIO_Init+0x338>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01f      	beq.n	8002ba2 <HAL_GPIO_Init+0x23e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <HAL_GPIO_Init+0x33c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_GPIO_Init+0x23a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ca4 <HAL_GPIO_Init+0x340>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x236>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4c      	ldr	r2, [pc, #304]	; (8002ca8 <HAL_GPIO_Init+0x344>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x232>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	; (8002cac <HAL_GPIO_Init+0x348>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x22e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <HAL_GPIO_Init+0x34c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x22a>
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	e00c      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b8e:	2307      	movs	r3, #7
 8002b90:	e00a      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b92:	2305      	movs	r3, #5
 8002b94:	e008      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b96:	2304      	movs	r3, #4
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e004      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e002      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	f002 0203 	and.w	r2, r2, #3
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	4093      	lsls	r3, r2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bb8:	4937      	ldr	r1, [pc, #220]	; (8002c98 <HAL_GPIO_Init+0x334>)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bea:	4a32      	ldr	r2, [pc, #200]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c14:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c1a:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c68:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f47f ae78 	bne.w	8002974 <HAL_GPIO_Init+0x10>
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	48000400 	.word	0x48000400
 8002ca0:	48000800 	.word	0x48000800
 8002ca4:	48000c00 	.word	0x48000c00
 8002ca8:	48001000 	.word	0x48001000
 8002cac:	48001400 	.word	0x48001400
 8002cb0:	48001800 	.word	0x48001800
 8002cb4:	40010400 	.word	0x40010400

08002cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc8:	787b      	ldrb	r3, [r7, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cd4:	e002      	b.n	8002cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cfe:	4a05      	ldr	r2, [pc, #20]	; (8002d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe f88e 	bl	8000e28 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40010400 	.word	0x40010400

08002d18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40007000 	.word	0x40007000

08002d34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d42:	d130      	bne.n	8002da6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d44:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d50:	d038      	beq.n	8002dc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d5a:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2232      	movs	r2, #50	; 0x32
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	0c9b      	lsrs	r3, r3, #18
 8002d74:	3301      	adds	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d78:	e002      	b.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8c:	d102      	bne.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f2      	bne.n	8002d7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da0:	d110      	bne.n	8002dc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e00f      	b.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db2:	d007      	beq.n	8002dc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dbc:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40007000 	.word	0x40007000
 8002dd8:	20000018 	.word	0x20000018
 8002ddc:	431bde83 	.word	0x431bde83

08002de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e3ca      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df2:	4b97      	ldr	r3, [pc, #604]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dfc:	4b94      	ldr	r3, [pc, #592]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80e4 	beq.w	8002fdc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <HAL_RCC_OscConfig+0x4a>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	f040 808b 	bne.w	8002f38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	f040 8087 	bne.w	8002f38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e2a:	4b89      	ldr	r3, [pc, #548]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x62>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e3a2      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	4b82      	ldr	r3, [pc, #520]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <HAL_RCC_OscConfig+0x7c>
 8002e52:	4b7f      	ldr	r3, [pc, #508]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e5a:	e005      	b.n	8002e68 <HAL_RCC_OscConfig+0x88>
 8002e5c:	4b7c      	ldr	r3, [pc, #496]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d223      	bcs.n	8002eb4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fd1d 	bl	80038b0 <RCC_SetFlashLatencyFromMSIRange>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e383      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e80:	4b73      	ldr	r3, [pc, #460]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a72      	ldr	r2, [pc, #456]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002e86:	f043 0308 	orr.w	r3, r3, #8
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b70      	ldr	r3, [pc, #448]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	496d      	ldr	r1, [pc, #436]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e9e:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	4968      	ldr	r1, [pc, #416]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
 8002eb2:	e025      	b.n	8002f00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eb4:	4b66      	ldr	r3, [pc, #408]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a65      	ldr	r2, [pc, #404]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002eba:	f043 0308 	orr.w	r3, r3, #8
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4960      	ldr	r1, [pc, #384]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ed2:	4b5f      	ldr	r3, [pc, #380]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	495b      	ldr	r1, [pc, #364]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fcdd 	bl	80038b0 <RCC_SetFlashLatencyFromMSIRange>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e343      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f00:	f000 fc4a 	bl	8003798 <HAL_RCC_GetSysClockFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b52      	ldr	r3, [pc, #328]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	4950      	ldr	r1, [pc, #320]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1c:	4a4e      	ldr	r2, [pc, #312]	; (8003058 <HAL_RCC_OscConfig+0x278>)
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f20:	4b4e      	ldr	r3, [pc, #312]	; (800305c <HAL_RCC_OscConfig+0x27c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe f991 	bl	800124c <HAL_InitTick>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d052      	beq.n	8002fda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	e327      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d032      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f40:	4b43      	ldr	r3, [pc, #268]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a42      	ldr	r2, [pc, #264]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe f9ce 	bl	80012ec <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f54:	f7fe f9ca 	bl	80012ec <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e310      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f66:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f72:	4b37      	ldr	r3, [pc, #220]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a36      	ldr	r2, [pc, #216]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b34      	ldr	r3, [pc, #208]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4931      	ldr	r1, [pc, #196]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f90:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	492c      	ldr	r1, [pc, #176]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
 8002fa4:	e01a      	b.n	8002fdc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fa6:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a29      	ldr	r2, [pc, #164]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fb2:	f7fe f99b 	bl	80012ec <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fba:	f7fe f997 	bl	80012ec <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e2dd      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0x1da>
 8002fd8:	e000      	b.n	8002fdc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d074      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d005      	beq.n	8002ffa <HAL_RCC_OscConfig+0x21a>
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d10e      	bne.n	8003012 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d10b      	bne.n	8003012 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d064      	beq.n	80030d0 <HAL_RCC_OscConfig+0x2f0>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d160      	bne.n	80030d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e2ba      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x24a>
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8003022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	e026      	b.n	8003078 <HAL_RCC_OscConfig+0x298>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003032:	d115      	bne.n	8003060 <HAL_RCC_OscConfig+0x280>
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a05      	ldr	r2, [pc, #20]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 800303a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a02      	ldr	r2, [pc, #8]	; (8003050 <HAL_RCC_OscConfig+0x270>)
 8003046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	e014      	b.n	8003078 <HAL_RCC_OscConfig+0x298>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	080098a0 	.word	0x080098a0
 8003058:	20000018 	.word	0x20000018
 800305c:	2000001c 	.word	0x2000001c
 8003060:	4ba0      	ldr	r3, [pc, #640]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a9f      	ldr	r2, [pc, #636]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 8003066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b9d      	ldr	r3, [pc, #628]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a9c      	ldr	r2, [pc, #624]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 8003072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe f934 	bl	80012ec <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003088:	f7fe f930 	bl	80012ec <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e276      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309a:	4b92      	ldr	r3, [pc, #584]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x2a8>
 80030a6:	e014      	b.n	80030d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe f920 	bl	80012ec <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fe f91c 	bl	80012ec <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e262      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030c2:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x2d0>
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d060      	beq.n	80031a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_OscConfig+0x310>
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d119      	bne.n	800311e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d116      	bne.n	800311e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030f0:	4b7c      	ldr	r3, [pc, #496]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_OscConfig+0x328>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e23f      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003108:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	4973      	ldr	r1, [pc, #460]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800311c:	e040      	b.n	80031a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d023      	beq.n	800316e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003126:	4b6f      	ldr	r3, [pc, #444]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6e      	ldr	r2, [pc, #440]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fe f8db 	bl	80012ec <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313a:	f7fe f8d7 	bl	80012ec <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e21d      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800314c:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003158:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	495f      	ldr	r1, [pc, #380]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
 800316c:	e018      	b.n	80031a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316e:	4b5d      	ldr	r3, [pc, #372]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5c      	ldr	r2, [pc, #368]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 8003174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe f8b7 	bl	80012ec <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003182:	f7fe f8b3 	bl	80012ec <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e1f9      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f0      	bne.n	8003182 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d03c      	beq.n	8003226 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01c      	beq.n	80031ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b4:	4b4b      	ldr	r3, [pc, #300]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80031b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ba:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe f892 	bl	80012ec <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031cc:	f7fe f88e 	bl	80012ec <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e1d4      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80031e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ef      	beq.n	80031cc <HAL_RCC_OscConfig+0x3ec>
 80031ec:	e01b      	b.n	8003226 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80031f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f4:	4a3b      	ldr	r2, [pc, #236]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fe f875 	bl	80012ec <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003206:	f7fe f871 	bl	80012ec <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1b7      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003218:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 800321a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1ef      	bne.n	8003206 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80a6 	beq.w	8003380 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003234:	2300      	movs	r3, #0
 8003236:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10d      	bne.n	8003260 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 800324a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324e:	6593      	str	r3, [r2, #88]	; 0x58
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325c:	2301      	movs	r3, #1
 800325e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <HAL_RCC_OscConfig+0x508>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d118      	bne.n	800329e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800326c:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_RCC_OscConfig+0x508>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <HAL_RCC_OscConfig+0x508>)
 8003272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003276:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003278:	f7fe f838 	bl	80012ec <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003280:	f7fe f834 	bl	80012ec <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e17a      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_RCC_OscConfig+0x508>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d108      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4d8>
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	4a0d      	ldr	r2, [pc, #52]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b6:	e029      	b.n	800330c <HAL_RCC_OscConfig+0x52c>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b05      	cmp	r3, #5
 80032be:	d115      	bne.n	80032ec <HAL_RCC_OscConfig+0x50c>
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f043 0304 	orr.w	r3, r3, #4
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	4a03      	ldr	r2, [pc, #12]	; (80032e4 <HAL_RCC_OscConfig+0x504>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e0:	e014      	b.n	800330c <HAL_RCC_OscConfig+0x52c>
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
 80032ec:	4b9c      	ldr	r3, [pc, #624]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	4a9b      	ldr	r2, [pc, #620]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032fc:	4b98      	ldr	r3, [pc, #608]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	4a97      	ldr	r2, [pc, #604]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d016      	beq.n	8003342 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fd ffea 	bl	80012ec <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331a:	e00a      	b.n	8003332 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331c:	f7fd ffe6 	bl	80012ec <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e12a      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003332:	4b8b      	ldr	r3, [pc, #556]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ed      	beq.n	800331c <HAL_RCC_OscConfig+0x53c>
 8003340:	e015      	b.n	800336e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fd ffd3 	bl	80012ec <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fd ffcf 	bl	80012ec <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e113      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003360:	4b7f      	ldr	r3, [pc, #508]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1ed      	bne.n	800334a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336e:	7ffb      	ldrb	r3, [r7, #31]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003374:	4b7a      	ldr	r3, [pc, #488]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	4a79      	ldr	r2, [pc, #484]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 800337a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80fe 	beq.w	8003586 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	2b02      	cmp	r3, #2
 8003390:	f040 80d0 	bne.w	8003534 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003394:	4b72      	ldr	r3, [pc, #456]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 0203 	and.w	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d130      	bne.n	800340a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	3b01      	subs	r3, #1
 80033b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d127      	bne.n	800340a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d11f      	bne.n	800340a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033d4:	2a07      	cmp	r2, #7
 80033d6:	bf14      	ite	ne
 80033d8:	2201      	movne	r2, #1
 80033da:	2200      	moveq	r2, #0
 80033dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033de:	4293      	cmp	r3, r2
 80033e0:	d113      	bne.n	800340a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d109      	bne.n	800340a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d06e      	beq.n	80034e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b0c      	cmp	r3, #12
 800340e:	d069      	beq.n	80034e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003410:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0ad      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800342c:	4b4c      	ldr	r3, [pc, #304]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a4b      	ldr	r2, [pc, #300]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003438:	f7fd ff58 	bl	80012ec <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7fd ff54 	bl	80012ec <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e09a      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003452:	4b43      	ldr	r3, [pc, #268]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800345e:	4b40      	ldr	r3, [pc, #256]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	4b40      	ldr	r3, [pc, #256]	; (8003564 <HAL_RCC_OscConfig+0x784>)
 8003464:	4013      	ands	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800346e:	3a01      	subs	r2, #1
 8003470:	0112      	lsls	r2, r2, #4
 8003472:	4311      	orrs	r1, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003478:	0212      	lsls	r2, r2, #8
 800347a:	4311      	orrs	r1, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003480:	0852      	lsrs	r2, r2, #1
 8003482:	3a01      	subs	r2, #1
 8003484:	0552      	lsls	r2, r2, #21
 8003486:	4311      	orrs	r1, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800348c:	0852      	lsrs	r2, r2, #1
 800348e:	3a01      	subs	r2, #1
 8003490:	0652      	lsls	r2, r2, #25
 8003492:	4311      	orrs	r1, r2
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003498:	0912      	lsrs	r2, r2, #4
 800349a:	0452      	lsls	r2, r2, #17
 800349c:	430a      	orrs	r2, r1
 800349e:	4930      	ldr	r1, [pc, #192]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034a4:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2d      	ldr	r2, [pc, #180]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b0:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a2a      	ldr	r2, [pc, #168]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80034b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034bc:	f7fd ff16 	bl	80012ec <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fd ff12 	bl	80012ec <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e058      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	4b22      	ldr	r3, [pc, #136]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e2:	e050      	b.n	8003586 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e04f      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e8:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d148      	bne.n	8003586 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034f4:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a19      	ldr	r2, [pc, #100]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 80034fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003500:	4b17      	ldr	r3, [pc, #92]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4a16      	ldr	r2, [pc, #88]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800350a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800350c:	f7fd feee 	bl	80012ec <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003514:	f7fd feea 	bl	80012ec <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e030      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003526:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x734>
 8003532:	e028      	b.n	8003586 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d023      	beq.n	8003582 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a08      	ldr	r2, [pc, #32]	; (8003560 <HAL_RCC_OscConfig+0x780>)
 8003540:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7fd fed1 	bl	80012ec <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354c:	e00c      	b.n	8003568 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354e:	f7fd fecd 	bl	80012ec <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d905      	bls.n	8003568 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e013      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
 8003560:	40021000 	.word	0x40021000
 8003564:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCC_OscConfig+0x7b0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ec      	bne.n	800354e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCC_OscConfig+0x7b0>)
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	4905      	ldr	r1, [pc, #20]	; (8003590 <HAL_RCC_OscConfig+0x7b0>)
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_RCC_OscConfig+0x7b4>)
 800357c:	4013      	ands	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
 8003580:	e001      	b.n	8003586 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3720      	adds	r7, #32
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000
 8003594:	feeefffc 	.word	0xfeeefffc

08003598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0e7      	b.n	800377c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035ac:	4b75      	ldr	r3, [pc, #468]	; (8003784 <HAL_RCC_ClockConfig+0x1ec>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d910      	bls.n	80035dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ba:	4b72      	ldr	r3, [pc, #456]	; (8003784 <HAL_RCC_ClockConfig+0x1ec>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 0207 	bic.w	r2, r3, #7
 80035c2:	4970      	ldr	r1, [pc, #448]	; (8003784 <HAL_RCC_ClockConfig+0x1ec>)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b6e      	ldr	r3, [pc, #440]	; (8003784 <HAL_RCC_ClockConfig+0x1ec>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0cf      	b.n	800377c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d010      	beq.n	800360a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	4b66      	ldr	r3, [pc, #408]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d908      	bls.n	800360a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b63      	ldr	r3, [pc, #396]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4960      	ldr	r1, [pc, #384]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d04c      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361e:	4b5a      	ldr	r3, [pc, #360]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d121      	bne.n	800366e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0a6      	b.n	800377c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003636:	4b54      	ldr	r3, [pc, #336]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d115      	bne.n	800366e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e09a      	b.n	800377c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800364e:	4b4e      	ldr	r3, [pc, #312]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e08e      	b.n	800377c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800365e:	4b4a      	ldr	r3, [pc, #296]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e086      	b.n	800377c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800366e:	4b46      	ldr	r3, [pc, #280]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f023 0203 	bic.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4943      	ldr	r1, [pc, #268]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	4313      	orrs	r3, r2
 800367e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003680:	f7fd fe34 	bl	80012ec <HAL_GetTick>
 8003684:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	e00a      	b.n	800369e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003688:	f7fd fe30 	bl	80012ec <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e06e      	b.n	800377c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 020c 	and.w	r2, r3, #12
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d1eb      	bne.n	8003688 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	4b31      	ldr	r3, [pc, #196]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d208      	bcs.n	80036de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036cc:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	492b      	ldr	r1, [pc, #172]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <HAL_RCC_ClockConfig+0x1ec>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d210      	bcs.n	800370e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ec:	4b25      	ldr	r3, [pc, #148]	; (8003784 <HAL_RCC_ClockConfig+0x1ec>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 0207 	bic.w	r2, r3, #7
 80036f4:	4923      	ldr	r1, [pc, #140]	; (8003784 <HAL_RCC_ClockConfig+0x1ec>)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fc:	4b21      	ldr	r3, [pc, #132]	; (8003784 <HAL_RCC_ClockConfig+0x1ec>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d001      	beq.n	800370e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e036      	b.n	800377c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800371a:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	4918      	ldr	r1, [pc, #96]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 8003728:	4313      	orrs	r3, r2
 800372a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d009      	beq.n	800374c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003738:	4b13      	ldr	r3, [pc, #76]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4910      	ldr	r1, [pc, #64]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	4313      	orrs	r3, r2
 800374a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800374c:	f000 f824 	bl	8003798 <HAL_RCC_GetSysClockFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	490b      	ldr	r1, [pc, #44]	; (800378c <HAL_RCC_ClockConfig+0x1f4>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	4a09      	ldr	r2, [pc, #36]	; (8003790 <HAL_RCC_ClockConfig+0x1f8>)
 800376a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1fc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fd fd6b 	bl	800124c <HAL_InitTick>
 8003776:	4603      	mov	r3, r0
 8003778:	72fb      	strb	r3, [r7, #11]

  return status;
 800377a:	7afb      	ldrb	r3, [r7, #11]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40022000 	.word	0x40022000
 8003788:	40021000 	.word	0x40021000
 800378c:	080098a0 	.word	0x080098a0
 8003790:	20000018 	.word	0x20000018
 8003794:	2000001c 	.word	0x2000001c

08003798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003798:	b480      	push	{r7}
 800379a:	b089      	sub	sp, #36	; 0x24
 800379c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037a6:	4b3e      	ldr	r3, [pc, #248]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037b0:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x34>
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	d121      	bne.n	800380a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d11e      	bne.n	800380a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037cc:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037d8:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e005      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037e8:	4b2d      	ldr	r3, [pc, #180]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037f4:	4a2b      	ldr	r2, [pc, #172]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d102      	bne.n	8003816 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003810:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	e004      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d101      	bne.n	8003820 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800381c:	4b23      	ldr	r3, [pc, #140]	; (80038ac <HAL_RCC_GetSysClockFreq+0x114>)
 800381e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b0c      	cmp	r3, #12
 8003824:	d134      	bne.n	8003890 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003826:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d003      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0xa6>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b03      	cmp	r3, #3
 800383a:	d003      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0xac>
 800383c:	e005      	b.n	800384a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800383e:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003840:	617b      	str	r3, [r7, #20]
      break;
 8003842:	e005      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_RCC_GetSysClockFreq+0x114>)
 8003846:	617b      	str	r3, [r7, #20]
      break;
 8003848:	e002      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	617b      	str	r3, [r7, #20]
      break;
 800384e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	3301      	adds	r3, #1
 800385c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	fb03 f202 	mul.w	r2, r3, r2
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	0e5b      	lsrs	r3, r3, #25
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	3301      	adds	r3, #1
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	fbb2 f3f3 	udiv	r3, r2, r3
 800388e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003890:	69bb      	ldr	r3, [r7, #24]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3724      	adds	r7, #36	; 0x24
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	080098b0 	.word	0x080098b0
 80038a8:	00f42400 	.word	0x00f42400
 80038ac:	007a1200 	.word	0x007a1200

080038b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038c8:	f7ff fa26 	bl	8002d18 <HAL_PWREx_GetVoltageRange>
 80038cc:	6178      	str	r0, [r7, #20]
 80038ce:	e014      	b.n	80038fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038da:	6593      	str	r3, [r2, #88]	; 0x58
 80038dc:	4b22      	ldr	r3, [pc, #136]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038e8:	f7ff fa16 	bl	8002d18 <HAL_PWREx_GetVoltageRange>
 80038ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	4a1d      	ldr	r2, [pc, #116]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003900:	d10b      	bne.n	800391a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d919      	bls.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2ba0      	cmp	r3, #160	; 0xa0
 800390c:	d902      	bls.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800390e:	2302      	movs	r3, #2
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	e013      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003914:	2301      	movs	r3, #1
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	e010      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d902      	bls.n	8003926 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003920:	2303      	movs	r3, #3
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	e00a      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d102      	bne.n	8003932 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800392c:	2302      	movs	r3, #2
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	e004      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b70      	cmp	r3, #112	; 0x70
 8003936:	d101      	bne.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003938:	2301      	movs	r3, #1
 800393a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 0207 	bic.w	r2, r3, #7
 8003944:	4909      	ldr	r1, [pc, #36]	; (800396c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	429a      	cmp	r2, r3
 8003958:	d001      	beq.n	800395e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	40022000 	.word	0x40022000

08003970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003978:	2300      	movs	r3, #0
 800397a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800397c:	2300      	movs	r3, #0
 800397e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003988:	2b00      	cmp	r3, #0
 800398a:	d041      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003990:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003994:	d02a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003996:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800399a:	d824      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800399c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a0:	d008      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a6:	d81e      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b0:	d010      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039b2:	e018      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b4:	4b86      	ldr	r3, [pc, #536]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a85      	ldr	r2, [pc, #532]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039c0:	e015      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fabb 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039d2:	e00c      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3320      	adds	r3, #32
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fba6 	bl	800412c <RCCEx_PLLSAI2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e4:	e003      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	74fb      	strb	r3, [r7, #19]
      break;
 80039ea:	e000      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f4:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a02:	4973      	ldr	r1, [pc, #460]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a0a:	e001      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d041      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a24:	d02a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a2a:	d824      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a30:	d008      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a36:	d81e      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a40:	d010      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a42:	e018      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a44:	4b62      	ldr	r3, [pc, #392]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4a61      	ldr	r2, [pc, #388]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a50:	e015      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fa73 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a62:	e00c      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3320      	adds	r3, #32
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fb5e 	bl	800412c <RCCEx_PLLSAI2_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a74:	e003      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	74fb      	strb	r3, [r7, #19]
      break;
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a84:	4b52      	ldr	r3, [pc, #328]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a92:	494f      	ldr	r1, [pc, #316]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a9a:	e001      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80a0 	beq.w	8003bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ab2:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	4a40      	ldr	r2, [pc, #256]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad4:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae4:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3a      	ldr	r2, [pc, #232]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003af0:	f7fd fbfc 	bl	80012ec <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af6:	e009      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af8:	f7fd fbf8 	bl	80012ec <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d902      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	74fb      	strb	r3, [r7, #19]
        break;
 8003b0a:	e005      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b0c:	4b31      	ldr	r3, [pc, #196]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ef      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d15c      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b1e:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01f      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d019      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b3c:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	4a1c      	ldr	r2, [pc, #112]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fd fbb7 	bl	80012ec <HAL_GetTick>
 8003b7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b80:	e00b      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fd fbb3 	bl	80012ec <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d902      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	74fb      	strb	r3, [r7, #19]
            break;
 8003b98:	e006      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ec      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bbe:	4904      	ldr	r1, [pc, #16]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bc6:	e009      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
 8003bcc:	e006      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bdc:	7c7b      	ldrb	r3, [r7, #17]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b9e      	ldr	r3, [pc, #632]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be6:	4a9d      	ldr	r2, [pc, #628]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bfa:	4b98      	ldr	r3, [pc, #608]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f023 0203 	bic.w	r2, r3, #3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	4994      	ldr	r1, [pc, #592]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c1c:	4b8f      	ldr	r3, [pc, #572]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f023 020c 	bic.w	r2, r3, #12
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	498c      	ldr	r1, [pc, #560]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c3e:	4b87      	ldr	r3, [pc, #540]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	4983      	ldr	r1, [pc, #524]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c60:	4b7e      	ldr	r3, [pc, #504]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	497b      	ldr	r1, [pc, #492]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c82:	4b76      	ldr	r3, [pc, #472]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c90:	4972      	ldr	r1, [pc, #456]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ca4:	4b6d      	ldr	r3, [pc, #436]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb2:	496a      	ldr	r1, [pc, #424]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc6:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd4:	4961      	ldr	r1, [pc, #388]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce8:	4b5c      	ldr	r3, [pc, #368]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf6:	4959      	ldr	r1, [pc, #356]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d0a:	4b54      	ldr	r3, [pc, #336]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d18:	4950      	ldr	r1, [pc, #320]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	4948      	ldr	r1, [pc, #288]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d4e:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	493f      	ldr	r1, [pc, #252]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d028      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d70:	4b3a      	ldr	r3, [pc, #232]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7e:	4937      	ldr	r1, [pc, #220]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d90:	4b32      	ldr	r3, [pc, #200]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a31      	ldr	r2, [pc, #196]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d9a:	60d3      	str	r3, [r2, #12]
 8003d9c:	e011      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f8c8 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d028      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	491f      	ldr	r1, [pc, #124]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dec:	d106      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	4a1a      	ldr	r2, [pc, #104]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df8:	60d3      	str	r3, [r2, #12]
 8003dfa:	e011      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f899 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d02b      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3a:	4908      	ldr	r1, [pc, #32]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a02      	ldr	r2, [pc, #8]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e56:	60d3      	str	r3, [r2, #12]
 8003e58:	e014      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	2101      	movs	r1, #1
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f867 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d02f      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e90:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e9e:	4928      	ldr	r1, [pc, #160]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eae:	d10d      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f844 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d014      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	74bb      	strb	r3, [r7, #18]
 8003eca:	e011      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3320      	adds	r3, #32
 8003eda:	2102      	movs	r1, #2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f925 	bl	800412c <RCCEx_PLLSAI2_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ee6:	7cfb      	ldrb	r3, [r7, #19]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003efc:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f0a:	490d      	ldr	r1, [pc, #52]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f1e:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f2e:	4904      	ldr	r1, [pc, #16]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f36:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000

08003f44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f52:	4b75      	ldr	r3, [pc, #468]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d018      	beq.n	8003f90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f5e:	4b72      	ldr	r3, [pc, #456]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0203 	and.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d10d      	bne.n	8003f8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
       ||
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f76:	4b6c      	ldr	r3, [pc, #432]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
       ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d047      	beq.n	800401a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	e044      	b.n	800401a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d018      	beq.n	8003fca <RCCEx_PLLSAI1_Config+0x86>
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d825      	bhi.n	8003fe8 <RCCEx_PLLSAI1_Config+0xa4>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d002      	beq.n	8003fa6 <RCCEx_PLLSAI1_Config+0x62>
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d009      	beq.n	8003fb8 <RCCEx_PLLSAI1_Config+0x74>
 8003fa4:	e020      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fa6:	4b60      	ldr	r3, [pc, #384]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11d      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb6:	e01a      	b.n	8003fee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fb8:	4b5b      	ldr	r3, [pc, #364]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d116      	bne.n	8003ff2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc8:	e013      	b.n	8003ff2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fca:	4b57      	ldr	r3, [pc, #348]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fd6:	4b54      	ldr	r3, [pc, #336]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fe6:	e006      	b.n	8003ff6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
      break;
 8003fec:	e004      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e002      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e000      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10d      	bne.n	800401a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6819      	ldr	r1, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	430b      	orrs	r3, r1
 8004014:	4944      	ldr	r1, [pc, #272]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d17d      	bne.n	800411c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004020:	4b41      	ldr	r3, [pc, #260]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a40      	ldr	r2, [pc, #256]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004026:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800402a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402c:	f7fd f95e 	bl	80012ec <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004032:	e009      	b.n	8004048 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004034:	f7fd f95a 	bl	80012ec <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	73fb      	strb	r3, [r7, #15]
        break;
 8004046:	e005      	b.n	8004054 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004048:	4b37      	ldr	r3, [pc, #220]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1ef      	bne.n	8004034 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d160      	bne.n	800411c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d111      	bne.n	8004084 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004060:	4b31      	ldr	r3, [pc, #196]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6892      	ldr	r2, [r2, #8]
 8004070:	0211      	lsls	r1, r2, #8
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68d2      	ldr	r2, [r2, #12]
 8004076:	0912      	lsrs	r2, r2, #4
 8004078:	0452      	lsls	r2, r2, #17
 800407a:	430a      	orrs	r2, r1
 800407c:	492a      	ldr	r1, [pc, #168]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407e:	4313      	orrs	r3, r2
 8004080:	610b      	str	r3, [r1, #16]
 8004082:	e027      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d112      	bne.n	80040b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800408a:	4b27      	ldr	r3, [pc, #156]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004092:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6892      	ldr	r2, [r2, #8]
 800409a:	0211      	lsls	r1, r2, #8
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6912      	ldr	r2, [r2, #16]
 80040a0:	0852      	lsrs	r2, r2, #1
 80040a2:	3a01      	subs	r2, #1
 80040a4:	0552      	lsls	r2, r2, #21
 80040a6:	430a      	orrs	r2, r1
 80040a8:	491f      	ldr	r1, [pc, #124]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	610b      	str	r3, [r1, #16]
 80040ae:	e011      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040b0:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6892      	ldr	r2, [r2, #8]
 80040c0:	0211      	lsls	r1, r2, #8
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6952      	ldr	r2, [r2, #20]
 80040c6:	0852      	lsrs	r2, r2, #1
 80040c8:	3a01      	subs	r2, #1
 80040ca:	0652      	lsls	r2, r2, #25
 80040cc:	430a      	orrs	r2, r1
 80040ce:	4916      	ldr	r1, [pc, #88]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a13      	ldr	r2, [pc, #76]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fd f904 	bl	80012ec <HAL_GetTick>
 80040e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040e6:	e009      	b.n	80040fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e8:	f7fd f900 	bl	80012ec <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d902      	bls.n	80040fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	73fb      	strb	r3, [r7, #15]
          break;
 80040fa:	e005      	b.n	8004108 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ef      	beq.n	80040e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	4904      	ldr	r1, [pc, #16]	; (8004128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000

0800412c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800413a:	4b6a      	ldr	r3, [pc, #424]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d018      	beq.n	8004178 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004146:	4b67      	ldr	r3, [pc, #412]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0203 	and.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d10d      	bne.n	8004172 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
       ||
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800415e:	4b61      	ldr	r3, [pc, #388]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
       ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d047      	beq.n	8004202 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	e044      	b.n	8004202 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d018      	beq.n	80041b2 <RCCEx_PLLSAI2_Config+0x86>
 8004180:	2b03      	cmp	r3, #3
 8004182:	d825      	bhi.n	80041d0 <RCCEx_PLLSAI2_Config+0xa4>
 8004184:	2b01      	cmp	r3, #1
 8004186:	d002      	beq.n	800418e <RCCEx_PLLSAI2_Config+0x62>
 8004188:	2b02      	cmp	r3, #2
 800418a:	d009      	beq.n	80041a0 <RCCEx_PLLSAI2_Config+0x74>
 800418c:	e020      	b.n	80041d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800418e:	4b55      	ldr	r3, [pc, #340]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d11d      	bne.n	80041d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419e:	e01a      	b.n	80041d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d116      	bne.n	80041da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b0:	e013      	b.n	80041da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041b2:	4b4c      	ldr	r3, [pc, #304]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041be:	4b49      	ldr	r3, [pc, #292]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ce:	e006      	b.n	80041de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      break;
 80041d4:	e004      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041d6:	bf00      	nop
 80041d8:	e002      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041de:	bf00      	nop
    }

    if(status == HAL_OK)
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6819      	ldr	r1, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	430b      	orrs	r3, r1
 80041fc:	4939      	ldr	r1, [pc, #228]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d167      	bne.n	80042d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004208:	4b36      	ldr	r3, [pc, #216]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a35      	ldr	r2, [pc, #212]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004214:	f7fd f86a 	bl	80012ec <HAL_GetTick>
 8004218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800421a:	e009      	b.n	8004230 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800421c:	f7fd f866 	bl	80012ec <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d902      	bls.n	8004230 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	73fb      	strb	r3, [r7, #15]
        break;
 800422e:	e005      	b.n	800423c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004230:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ef      	bne.n	800421c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d14a      	bne.n	80042d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d111      	bne.n	800426c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004248:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6892      	ldr	r2, [r2, #8]
 8004258:	0211      	lsls	r1, r2, #8
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68d2      	ldr	r2, [r2, #12]
 800425e:	0912      	lsrs	r2, r2, #4
 8004260:	0452      	lsls	r2, r2, #17
 8004262:	430a      	orrs	r2, r1
 8004264:	491f      	ldr	r1, [pc, #124]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004266:	4313      	orrs	r3, r2
 8004268:	614b      	str	r3, [r1, #20]
 800426a:	e011      	b.n	8004290 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800426c:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004274:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6892      	ldr	r2, [r2, #8]
 800427c:	0211      	lsls	r1, r2, #8
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6912      	ldr	r2, [r2, #16]
 8004282:	0852      	lsrs	r2, r2, #1
 8004284:	3a01      	subs	r2, #1
 8004286:	0652      	lsls	r2, r2, #25
 8004288:	430a      	orrs	r2, r1
 800428a:	4916      	ldr	r1, [pc, #88]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428c:	4313      	orrs	r3, r2
 800428e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004290:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fd f826 	bl	80012ec <HAL_GetTick>
 80042a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042a2:	e009      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042a4:	f7fd f822 	bl	80012ec <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d902      	bls.n	80042b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	73fb      	strb	r3, [r7, #15]
          break;
 80042b6:	e005      	b.n	80042c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ef      	beq.n	80042a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	4904      	ldr	r1, [pc, #16]	; (80042e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000

080042e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	f040 8082 	bne.w	8004406 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_UART_Transmit+0x26>
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e07a      	b.n	8004408 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_UART_Transmit+0x38>
 800431c:	2302      	movs	r3, #2
 800431e:	e073      	b.n	8004408 <HAL_UART_Transmit+0x120>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2221      	movs	r2, #33	; 0x21
 8004334:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004336:	f7fc ffd9 	bl	80012ec <HAL_GetTick>
 800433a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004354:	d108      	bne.n	8004368 <HAL_UART_Transmit+0x80>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e003      	b.n	8004370 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800436c:	2300      	movs	r3, #0
 800436e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004378:	e02d      	b.n	80043d6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2200      	movs	r2, #0
 8004382:	2180      	movs	r1, #128	; 0x80
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f843 	bl	8004410 <UART_WaitOnFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e039      	b.n	8004408 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	881a      	ldrh	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043a6:	b292      	uxth	r2, r2
 80043a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	3302      	adds	r3, #2
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	e008      	b.n	80043c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	781a      	ldrb	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	b292      	uxth	r2, r2
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3301      	adds	r3, #1
 80043c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1cb      	bne.n	800437a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2200      	movs	r2, #0
 80043ea:	2140      	movs	r1, #64	; 0x40
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f80f 	bl	8004410 <UART_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e005      	b.n	8004408 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b09c      	sub	sp, #112	; 0x70
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004420:	e0a5      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004428:	f000 80a1 	beq.w	800456e <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442c:	f7fc ff5e 	bl	80012ec <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004438:	429a      	cmp	r2, r3
 800443a:	d302      	bcc.n	8004442 <UART_WaitOnFlagUntilTimeout+0x32>
 800443c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800443e:	2b00      	cmp	r3, #0
 8004440:	d13e      	bne.n	80044c0 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004452:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004456:	667b      	str	r3, [r7, #100]	; 0x64
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004462:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004466:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800446e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e6      	bne.n	8004442 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3308      	adds	r3, #8
 800447a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	663b      	str	r3, [r7, #96]	; 0x60
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004494:	64ba      	str	r2, [r7, #72]	; 0x48
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800449a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e5      	bne.n	8004474 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e067      	b.n	8004590 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d04f      	beq.n	800456e <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044dc:	d147      	bne.n	800456e <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e6:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
 8004508:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800450c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e6      	bne.n	80044e8 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3308      	adds	r3, #8
 8004520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	66bb      	str	r3, [r7, #104]	; 0x68
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3308      	adds	r3, #8
 8004538:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800453a:	623a      	str	r2, [r7, #32]
 800453c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	69f9      	ldr	r1, [r7, #28]
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	61bb      	str	r3, [r7, #24]
   return(result);
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e010      	b.n	8004590 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4013      	ands	r3, r2
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	bf0c      	ite	eq
 800457e:	2301      	moveq	r3, #1
 8004580:	2300      	movne	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	429a      	cmp	r2, r3
 800458a:	f43f af4a 	beq.w	8004422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3770      	adds	r7, #112	; 0x70
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <Global_GPIO_Init>:
 *      Author: felipe
 */
#include "GPIO.h"


void Global_GPIO_Init() {
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <Global_GPIO_Init+0x74>)
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	4a1a      	ldr	r2, [pc, #104]	; (800460c <Global_GPIO_Init+0x74>)
 80045a4:	f043 0304 	orr.w	r3, r3, #4
 80045a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045aa:	4b18      	ldr	r3, [pc, #96]	; (800460c <Global_GPIO_Init+0x74>)
 80045ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <Global_GPIO_Init+0x74>)
 80045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ba:	4a14      	ldr	r2, [pc, #80]	; (800460c <Global_GPIO_Init+0x74>)
 80045bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <Global_GPIO_Init+0x74>)
 80045c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <Global_GPIO_Init+0x74>)
 80045d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d2:	4a0e      	ldr	r2, [pc, #56]	; (800460c <Global_GPIO_Init+0x74>)
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045da:	4b0c      	ldr	r3, [pc, #48]	; (800460c <Global_GPIO_Init+0x74>)
 80045dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <Global_GPIO_Init+0x74>)
 80045e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ea:	4a08      	ldr	r2, [pc, #32]	; (800460c <Global_GPIO_Init+0x74>)
 80045ec:	f043 0302 	orr.w	r3, r3, #2
 80045f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <Global_GPIO_Init+0x74>)
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
}
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000

08004610 <__NVIC_EnableIRQ>:
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	2b00      	cmp	r3, #0
 8004620:	db0b      	blt.n	800463a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	4907      	ldr	r1, [pc, #28]	; (8004648 <__NVIC_EnableIRQ+0x38>)
 800462a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	2001      	movs	r0, #1
 8004632:	fa00 f202 	lsl.w	r2, r0, r2
 8004636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	e000e100 	.word	0xe000e100

0800464c <__NVIC_SetPriority>:
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	6039      	str	r1, [r7, #0]
 8004656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465c:	2b00      	cmp	r3, #0
 800465e:	db0a      	blt.n	8004676 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	490c      	ldr	r1, [pc, #48]	; (8004698 <__NVIC_SetPriority+0x4c>)
 8004666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466a:	0112      	lsls	r2, r2, #4
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	440b      	add	r3, r1
 8004670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004674:	e00a      	b.n	800468c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	4908      	ldr	r1, [pc, #32]	; (800469c <__NVIC_SetPriority+0x50>)
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	3b04      	subs	r3, #4
 8004684:	0112      	lsls	r2, r2, #4
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	440b      	add	r3, r1
 800468a:	761a      	strb	r2, [r3, #24]
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	e000e100 	.word	0xe000e100
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <Joystick_Button_Interrupt_Init>:
 */

#include "Joystick.h"


static void Joystick_Button_Interrupt_Init(GPIO_TypeDef* Port, uint16_t Pin) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef gpioInit = {0};
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	611a      	str	r2, [r3, #16]

	if (Port == GPIOA) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046c2:	d10c      	bne.n	80046de <Joystick_Button_Interrupt_Init+0x3e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80046c4:	4b23      	ldr	r3, [pc, #140]	; (8004754 <Joystick_Button_Interrupt_Init+0xb4>)
 80046c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c8:	4a22      	ldr	r2, [pc, #136]	; (8004754 <Joystick_Button_Interrupt_Init+0xb4>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046d0:	4b20      	ldr	r3, [pc, #128]	; (8004754 <Joystick_Button_Interrupt_Init+0xb4>)
 80046d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	e020      	b.n	8004720 <Joystick_Button_Interrupt_Init+0x80>
	}

	else if (Port == GPIOB) {
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1d      	ldr	r2, [pc, #116]	; (8004758 <Joystick_Button_Interrupt_Init+0xb8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d10c      	bne.n	8004700 <Joystick_Button_Interrupt_Init+0x60>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <Joystick_Button_Interrupt_Init+0xb4>)
 80046e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ea:	4a1a      	ldr	r2, [pc, #104]	; (8004754 <Joystick_Button_Interrupt_Init+0xb4>)
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046f2:	4b18      	ldr	r3, [pc, #96]	; (8004754 <Joystick_Button_Interrupt_Init+0xb4>)
 80046f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	e00f      	b.n	8004720 <Joystick_Button_Interrupt_Init+0x80>
	}

	else if (Port == GPIOC) {
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a16      	ldr	r2, [pc, #88]	; (800475c <Joystick_Button_Interrupt_Init+0xbc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d10b      	bne.n	8004720 <Joystick_Button_Interrupt_Init+0x80>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8004708:	4b12      	ldr	r3, [pc, #72]	; (8004754 <Joystick_Button_Interrupt_Init+0xb4>)
 800470a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470c:	4a11      	ldr	r2, [pc, #68]	; (8004754 <Joystick_Button_Interrupt_Init+0xb4>)
 800470e:	f043 0304 	orr.w	r3, r3, #4
 8004712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004714:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <Joystick_Button_Interrupt_Init+0xb4>)
 8004716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]
	}

	gpioInit.Pin = Pin;
 8004720:	887b      	ldrh	r3, [r7, #2]
 8004722:	617b      	str	r3, [r7, #20]
	gpioInit.Mode = GPIO_MODE_IT_RISING;  //Sets Interrupt on rising edge
 8004724:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004728:	61bb      	str	r3, [r7, #24]
	gpioInit.Pull = GPIO_PULLDOWN;
 800472a:	2302      	movs	r3, #2
 800472c:	61fb      	str	r3, [r7, #28]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 800472e:	2300      	movs	r3, #0
 8004730:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(Port, &gpioInit);
 8004732:	f107 0314 	add.w	r3, r7, #20
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7fe f913 	bl	8002964 <HAL_GPIO_Init>

	//ENABLE INTERRUPT
	NVIC_SetPriority(EXTI9_5_IRQn, 5);  //Sets priority of the interrupt to 5
 800473e:	2105      	movs	r1, #5
 8004740:	2017      	movs	r0, #23
 8004742:	f7ff ff83 	bl	800464c <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004746:	2017      	movs	r0, #23
 8004748:	f7ff ff62 	bl	8004610 <__NVIC_EnableIRQ>
}
 800474c:	bf00      	nop
 800474e:	3728      	adds	r7, #40	; 0x28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40021000 	.word	0x40021000
 8004758:	48000400 	.word	0x48000400
 800475c:	48000800 	.word	0x48000800

08004760 <Joystick_Gpio_XY>:


static void Joystick_Gpio_XY(GPIO_TypeDef* Port, uint16_t Pin) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
	//Intended for analog pins A0 - A5
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	611a      	str	r2, [r3, #16]

	if (Port == GPIOA) {
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004782:	d10c      	bne.n	800479e <Joystick_Gpio_XY+0x3e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8004784:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <Joystick_Gpio_XY+0xa0>)
 8004786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004788:	4a1d      	ldr	r2, [pc, #116]	; (8004800 <Joystick_Gpio_XY+0xa0>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004790:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <Joystick_Gpio_XY+0xa0>)
 8004792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	e020      	b.n	80047e0 <Joystick_Gpio_XY+0x80>
	}

	else if (Port == GPIOB) {
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a18      	ldr	r2, [pc, #96]	; (8004804 <Joystick_Gpio_XY+0xa4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d10c      	bne.n	80047c0 <Joystick_Gpio_XY+0x60>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80047a6:	4b16      	ldr	r3, [pc, #88]	; (8004800 <Joystick_Gpio_XY+0xa0>)
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047aa:	4a15      	ldr	r2, [pc, #84]	; (8004800 <Joystick_Gpio_XY+0xa0>)
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <Joystick_Gpio_XY+0xa0>)
 80047b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	e00f      	b.n	80047e0 <Joystick_Gpio_XY+0x80>
	}

	else if (Port == GPIOC) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a11      	ldr	r2, [pc, #68]	; (8004808 <Joystick_Gpio_XY+0xa8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10b      	bne.n	80047e0 <Joystick_Gpio_XY+0x80>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80047c8:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <Joystick_Gpio_XY+0xa0>)
 80047ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047cc:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <Joystick_Gpio_XY+0xa0>)
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <Joystick_Gpio_XY+0xa0>)
 80047d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]
	}

	GPIO_InitStruct.Pin = Pin;
 80047e0:	887b      	ldrh	r3, [r7, #2]
 80047e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80047e4:	230b      	movs	r3, #11
 80047e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Port, &GPIO_InitStruct);
 80047ec:	f107 0314 	add.w	r3, r7, #20
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fe f8b6 	bl	8002964 <HAL_GPIO_Init>
}
 80047f8:	bf00      	nop
 80047fa:	3728      	adds	r7, #40	; 0x28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000
 8004804:	48000400 	.word	0x48000400
 8004808:	48000800 	.word	0x48000800

0800480c <Joystick_ClkConfig>:


static void Joystick_ClkConfig() {
 800480c:	b580      	push	{r7, lr}
 800480e:	b0a4      	sub	sp, #144	; 0x90
 8004810:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004812:	f107 0308 	add.w	r3, r7, #8
 8004816:	2288      	movs	r2, #136	; 0x88
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fba0 	bl	8004f60 <memset>

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004820:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004824:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004826:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800482a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800482e:	2302      	movs	r3, #2
 8004830:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004836:	2308      	movs	r3, #8
 8004838:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800483a:	2307      	movs	r3, #7
 800483c:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800483e:	2302      	movs	r3, #2
 8004840:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004842:	2302      	movs	r3, #2
 8004844:	623b      	str	r3, [r7, #32]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004846:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800484a:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff f88d 	bl	8003970 <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_ADC_CLK_ENABLE();
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <Joystick_ClkConfig+0x6c>)
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485a:	4a07      	ldr	r2, [pc, #28]	; (8004878 <Joystick_ClkConfig+0x6c>)
 800485c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <Joystick_ClkConfig+0x6c>)
 8004864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800486a:	607b      	str	r3, [r7, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
}
 800486e:	bf00      	nop
 8004870:	3790      	adds	r7, #144	; 0x90
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000

0800487c <Joystick_Init>:


static void Joystick_Init(Joystick_Struct_t* Joystick) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	ADC_MultiModeTypeDef multimode = {0};
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]

	/** Common config
	 */
	Joystick->ADC_Handler->Instance = ADC1;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	4a42      	ldr	r2, [pc, #264]	; (80049a0 <Joystick_Init+0x124>)
 8004896:	601a      	str	r2, [r3, #0]
	Joystick->ADC_Handler->Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	2200      	movs	r2, #0
 800489e:	605a      	str	r2, [r3, #4]
	Joystick->ADC_Handler->Init.Resolution = ADC_RESOLUTION_12B;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2200      	movs	r2, #0
 80048a6:	609a      	str	r2, [r3, #8]
	Joystick->ADC_Handler->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	2200      	movs	r2, #0
 80048ae:	60da      	str	r2, [r3, #12]
	Joystick->ADC_Handler->Init.ScanConvMode = ADC_SCAN_DISABLE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	2200      	movs	r2, #0
 80048b6:	611a      	str	r2, [r3, #16]
	Joystick->ADC_Handler->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2204      	movs	r2, #4
 80048be:	615a      	str	r2, [r3, #20]
	Joystick->ADC_Handler->Init.LowPowerAutoWait = DISABLE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2200      	movs	r2, #0
 80048c6:	761a      	strb	r2, [r3, #24]
	Joystick->ADC_Handler->Init.ContinuousConvMode = DISABLE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	2200      	movs	r2, #0
 80048ce:	765a      	strb	r2, [r3, #25]
	Joystick->ADC_Handler->Init.NbrOfConversion = 1;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	2201      	movs	r2, #1
 80048d6:	61da      	str	r2, [r3, #28]
	Joystick->ADC_Handler->Init.DiscontinuousConvMode = DISABLE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2020 	strb.w	r2, [r3, #32]
	Joystick->ADC_Handler->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2200      	movs	r2, #0
 80048e8:	629a      	str	r2, [r3, #40]	; 0x28
	Joystick->ADC_Handler->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2200      	movs	r2, #0
 80048f0:	62da      	str	r2, [r3, #44]	; 0x2c
	Joystick->ADC_Handler->Init.DMAContinuousRequests = DISABLE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Joystick->ADC_Handler->Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2200      	movs	r2, #0
 8004902:	635a      	str	r2, [r3, #52]	; 0x34
	Joystick->ADC_Handler->Init.OversamplingMode = DISABLE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	HAL_ADC_Init(Joystick->ADC_Handler);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	4618      	mov	r0, r3
 8004914:	f7fc fefe 	bl	8001714 <HAL_ADC_Init>

	multimode.Mode = ADC_MODE_INDEPENDENT;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]

	HAL_ADCEx_MultiModeConfigChannel(Joystick->ADC_Handler, &multimode);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	f107 020c 	add.w	r2, r7, #12
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f7fd fe86 	bl	8002638 <HAL_ADCEx_MultiModeConfigChannel>


	Joystick->ChannelConf->Rank = ADC_REGULAR_RANK_1;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	2206      	movs	r2, #6
 8004932:	605a      	str	r2, [r3, #4]
	Joystick->ChannelConf->SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	2200      	movs	r2, #0
 800493a:	609a      	str	r2, [r3, #8]
	Joystick->ChannelConf->SingleDiff = ADC_SINGLE_ENDED;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	227f      	movs	r2, #127	; 0x7f
 8004942:	60da      	str	r2, [r3, #12]
	Joystick->ChannelConf->OffsetNumber = ADC_OFFSET_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	2204      	movs	r2, #4
 800494a:	611a      	str	r2, [r3, #16]
	Joystick->ChannelConf->Offset = 0;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	2200      	movs	r2, #0
 8004952:	615a      	str	r2, [r3, #20]

	HAL_ADC_ConfigChannel(Joystick->ADC_Handler, Joystick->ChannelConf);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f7fd f9ce 	bl	8001d00 <HAL_ADC_ConfigChannel>

	Joystick_ClkConfig();
 8004964:	f7ff ff52 	bl	800480c <Joystick_ClkConfig>

	Joystick_Gpio_XY(Joystick->X_Port, Joystick->X_Pin);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	889b      	ldrh	r3, [r3, #4]
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f7ff fef4 	bl	8004760 <Joystick_Gpio_XY>
	Joystick_Gpio_XY(Joystick->Y_Port, Joystick->Y_Pin);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8a1b      	ldrh	r3, [r3, #16]
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f7ff feec 	bl	8004760 <Joystick_Gpio_XY>

	Joystick_Button_Interrupt_Init(Joystick->But_Port, Joystick->But_Pin);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8b9b      	ldrh	r3, [r3, #28]
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f7ff fe84 	bl	80046a0 <Joystick_Button_Interrupt_Init>

}
 8004998:	bf00      	nop
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	50040000 	.word	0x50040000

080049a4 <Joystick_Create>:
	GPIO_TypeDef* x_port, uint16_t x_pin, uint32_t x_adc_channel,
	GPIO_TypeDef* y_port, uint16_t y_pin, uint32_t y_adc_channel,
	GPIO_TypeDef* but_port, uint16_t but_pin,
	ADC_ChannelConfTypeDef* channel_conf, ADC_HandleTypeDef* adc_handler
)
{
 80049a4:	b5b0      	push	{r4, r5, r7, lr}
 80049a6:	b08e      	sub	sp, #56	; 0x38
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	80fb      	strh	r3, [r7, #6]
	Joystick_Struct_t Joystick;

	Joystick.X_Port = x_port;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	613b      	str	r3, [r7, #16]
	Joystick.X_Pin = x_pin;
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	82bb      	strh	r3, [r7, #20]
	Joystick.Y_Port = y_port;
 80049bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049be:	61fb      	str	r3, [r7, #28]
	Joystick.Y_Pin = y_pin;
 80049c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80049c4:	843b      	strh	r3, [r7, #32]
	Joystick.But_Port = but_port;
 80049c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
	Joystick.But_Pin = but_pin;
 80049ca:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80049ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
	Joystick.X_ADC_Channel = x_adc_channel;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	61bb      	str	r3, [r7, #24]
	Joystick.Y_ADC_Channel = y_adc_channel;
 80049d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
	Joystick.ChannelConf = channel_conf;
 80049d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049da:	633b      	str	r3, [r7, #48]	; 0x30
	Joystick.ADC_Handler = adc_handler;
 80049dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049de:	637b      	str	r3, [r7, #52]	; 0x34

	Joystick_Init(&Joystick);
 80049e0:	f107 0310 	add.w	r3, r7, #16
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff ff49 	bl	800487c <Joystick_Init>

	return Joystick;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	461d      	mov	r5, r3
 80049ee:	f107 0410 	add.w	r4, r7, #16
 80049f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049fe:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	3738      	adds	r7, #56	; 0x38
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004a0c <ADC_To_Joystic>:


static int16_t ADC_To_Joystic(uint32_t adcValue) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
	return (int16_t)((adcValue * 100) / 4096.0 - 50);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2264      	movs	r2, #100	; 0x64
 8004a18:	fb02 f303 	mul.w	r3, r2, r3
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fb fd71 	bl	8000504 <__aeabi_ui2d>
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <ADC_To_Joystic+0x4c>)
 8004a28:	f7fb ff10 	bl	800084c <__aeabi_ddiv>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <ADC_To_Joystic+0x50>)
 8004a3a:	f7fb fc25 	bl	8000288 <__aeabi_dsub>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4610      	mov	r0, r2
 8004a44:	4619      	mov	r1, r3
 8004a46:	f7fc f887 	bl	8000b58 <__aeabi_d2iz>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	b21b      	sxth	r3, r3
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40b00000 	.word	0x40b00000
 8004a5c:	40490000 	.word	0x40490000

08004a60 <Joystick_Read>:


void Joystick_Read(Joystick_Struct_t* Joystick, int16_t* xy) {
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]

	//Configure and read from channel X
	Joystick->ChannelConf->Channel = Joystick->X_ADC_Channel;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6892      	ldr	r2, [r2, #8]
 8004a72:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(Joystick->ADC_Handler, Joystick->ChannelConf);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f7fd f93e 	bl	8001d00 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(Joystick->ADC_Handler);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fc ff99 	bl	80019c0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(Joystick->ADC_Handler, 100);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2164      	movs	r1, #100	; 0x64
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fd f84d 	bl	8001b34 <HAL_ADC_PollForConversion>

    xy[0] = ADC_To_Joystic(HAL_ADC_GetValue(Joystick->ADC_Handler));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fd f920 	bl	8001ce4 <HAL_ADC_GetValue>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff ffb0 	bl	8004a0c <ADC_To_Joystic>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461a      	mov	r2, r3
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	801a      	strh	r2, [r3, #0]

	//Configure and read from channel Y
	Joystick->ChannelConf->Channel = Joystick->Y_ADC_Channel;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6952      	ldr	r2, [r2, #20]
 8004abc:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(Joystick->ADC_Handler, Joystick->ChannelConf);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f7fd f919 	bl	8001d00 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(Joystick->ADC_Handler);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fc ff74 	bl	80019c0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(Joystick->ADC_Handler, 100);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	2164      	movs	r1, #100	; 0x64
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fd f828 	bl	8001b34 <HAL_ADC_PollForConversion>

    xy[1] = ADC_To_Joystic(HAL_ADC_GetValue(Joystick->ADC_Handler));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fd f8fb 	bl	8001ce4 <HAL_ADC_GetValue>
 8004aee:	4602      	mov	r2, r0
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	1c9c      	adds	r4, r3, #2
 8004af4:	4610      	mov	r0, r2
 8004af6:	f7ff ff89 	bl	8004a0c <ADC_To_Joystic>
 8004afa:	4603      	mov	r3, r0
 8004afc:	8023      	strh	r3, [r4, #0]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd90      	pop	{r4, r7, pc}

08004b06 <LCD_Create>:
LCD_Struct_t LCD_Create(
	LCD_PortType port[], LCD_PinType pin[],
	LCD_PortType rs_port, LCD_PinType rs_pin,
	LCD_PortType e_port, LCD_PinType e_pin
)
{
 8004b06:	b5b0      	push	{r4, r5, r7, lr}
 8004b08:	b08a      	sub	sp, #40	; 0x28
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	603b      	str	r3, [r7, #0]
	LCD_Struct_t LCD_1602;

	LCD_1602.datapin = pin;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	617b      	str	r3, [r7, #20]
	LCD_1602.dataport = port;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	613b      	str	r3, [r7, #16]

	LCD_1602.RS_pin = rs_pin;
 8004b1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b1e:	83bb      	strh	r3, [r7, #28]
	LCD_1602.RS_port = rs_port;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	61bb      	str	r3, [r7, #24]

	LCD_1602.E_pin = e_pin;
 8004b24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b28:	84bb      	strh	r3, [r7, #36]	; 0x24
	LCD_1602.E_port = e_port;
 8004b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2c:	623b      	str	r3, [r7, #32]

	LCD_Init(&LCD_1602);
 8004b2e:	f107 0310 	add.w	r3, r7, #16
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f80e 	bl	8004b54 <LCD_Init>

	return LCD_1602;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	461d      	mov	r5, r3
 8004b3c:	f107 0410 	add.w	r4, r7, #16
 8004b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b48:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	3728      	adds	r7, #40	; 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bdb0      	pop	{r4, r5, r7, pc}

08004b54 <LCD_Init>:


void LCD_Init(LCD_Struct_t *LCD_1602) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioInit = {0};
 8004b5c:	f107 030c 	add.w	r3, r7, #12
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	609a      	str	r2, [r3, #8]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	611a      	str	r2, [r3, #16]

	gpioInit.Pin = D4_Pin | D5_Pin | D6_Pin | D7_Pin | RS_Pin | E_Pin;
 8004b6c:	f64f 0302 	movw	r3, #63490	; 0xf802
 8004b70:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode = GPIO_MODE_OUTPUT_PP;
 8004b72:	2301      	movs	r3, #1
 8004b74:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(D4_Port, &gpioInit);
 8004b7e:	f107 030c 	add.w	r3, r7, #12
 8004b82:	4619      	mov	r1, r3
 8004b84:	4815      	ldr	r0, [pc, #84]	; (8004bdc <LCD_Init+0x88>)
 8004b86:	f7fd feed 	bl	8002964 <HAL_GPIO_Init>

	//Execute LCD initialization sequence
	HAL_Delay(100);
 8004b8a:	2064      	movs	r0, #100	; 0x64
 8004b8c:	f7fc fbba 	bl	8001304 <HAL_Delay>
	LCD_Command(LCD_1602, 0x30);
 8004b90:	2130      	movs	r1, #48	; 0x30
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f824 	bl	8004be0 <LCD_Command>
	HAL_Delay(5);
 8004b98:	2005      	movs	r0, #5
 8004b9a:	f7fc fbb3 	bl	8001304 <HAL_Delay>
	LCD_Command(LCD_1602, 0x30);
 8004b9e:	2130      	movs	r1, #48	; 0x30
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f81d 	bl	8004be0 <LCD_Command>
	HAL_Delay(1);
 8004ba6:	2001      	movs	r0, #1
 8004ba8:	f7fc fbac 	bl	8001304 <HAL_Delay>
	LCD_Command(LCD_1602, 0x32);
 8004bac:	2132      	movs	r1, #50	; 0x32
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f816 	bl	8004be0 <LCD_Command>
	LCD_Command(LCD_1602, 0x28);  //2 rows of 5x8 characters
 8004bb4:	2128      	movs	r1, #40	; 0x28
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f812 	bl	8004be0 <LCD_Command>
	LCD_Command(LCD_1602, 0x0C);  //Enable display, no cursor, no cursor blinking
 8004bbc:	210c      	movs	r1, #12
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f80e 	bl	8004be0 <LCD_Command>
	LCD_Command(LCD_1602, 0x01);  //Clears screen
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f80a 	bl	8004be0 <LCD_Command>
	LCD_Command(LCD_1602, 0x06);  //Increment DDRAM
 8004bcc:	2106      	movs	r1, #6
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f806 	bl	8004be0 <LCD_Command>
}
 8004bd4:	bf00      	nop
 8004bd6:	3720      	adds	r7, #32
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	48000400 	.word	0x48000400

08004be0 <LCD_Command>:


void LCD_Command(LCD_Struct_t *LCD_1602, char cmd){
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
	char command = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	737b      	strb	r3, [r7, #13]
	//RS has to be 0 before sending any command
	HAL_GPIO_WritePin(LCD_1602->RS_port, LCD_1602->RS_pin, GPIO_PIN_RESET);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6898      	ldr	r0, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	899b      	ldrh	r3, [r3, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f7fe f85c 	bl	8002cb8 <HAL_GPIO_WritePin>


	// Sending packets of 4 bits (get first 4 bits and set the last 4 to 0)
	command = (cmd>>4) & 0x0F;
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	091b      	lsrs	r3, r3, #4
 8004c04:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 4; i++){
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
 8004c0a:	e019      	b.n	8004c40 <LCD_Command+0x60>
		HAL_GPIO_WritePin(LCD_1602->dataport[i], LCD_1602->datapin[i], (command>>i) & 0x01);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	4413      	add	r3, r2
 8004c22:	8819      	ldrh	r1, [r3, #0]
 8004c24:	7b7a      	ldrb	r2, [r7, #13]
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	fa42 f303 	asr.w	r3, r2, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	f7fe f83f 	bl	8002cb8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++){
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d9e2      	bls.n	8004c0c <LCD_Command+0x2c>
		And so on...
		*/
	}

	// At the end of every command Enable has to be on for 1ms and then be turned off
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_SET);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6918      	ldr	r0, [r3, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8a9b      	ldrh	r3, [r3, #20]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	4619      	mov	r1, r3
 8004c52:	f7fe f831 	bl	8002cb8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004c56:	2001      	movs	r0, #1
 8004c58:	f7fc fb54 	bl	8001304 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_RESET);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6918      	ldr	r0, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8a9b      	ldrh	r3, [r3, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	4619      	mov	r1, r3
 8004c68:	f7fe f826 	bl	8002cb8 <HAL_GPIO_WritePin>

	//Repeats process for the last 4 bits

	command = cmd & 0x0F;
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 4; i++){
 8004c74:	2300      	movs	r3, #0
 8004c76:	73bb      	strb	r3, [r7, #14]
 8004c78:	e019      	b.n	8004cae <LCD_Command+0xce>
		HAL_GPIO_WritePin(LCD_1602->dataport[i], LCD_1602->datapin[i], (command>>i) & 0x01);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	7bbb      	ldrb	r3, [r7, #14]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	7bbb      	ldrb	r3, [r7, #14]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	4413      	add	r3, r2
 8004c90:	8819      	ldrh	r1, [r3, #0]
 8004c92:	7b7a      	ldrb	r2, [r7, #13]
 8004c94:	7bbb      	ldrb	r3, [r7, #14]
 8004c96:	fa42 f303 	asr.w	r3, r2, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f7fe f808 	bl	8002cb8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++){
 8004ca8:	7bbb      	ldrb	r3, [r7, #14]
 8004caa:	3301      	adds	r3, #1
 8004cac:	73bb      	strb	r3, [r7, #14]
 8004cae:	7bbb      	ldrb	r3, [r7, #14]
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d9e2      	bls.n	8004c7a <LCD_Command+0x9a>
	}

	// At the end of every command Enable has to be on for 1ms and then be turned off
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_SET);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6918      	ldr	r0, [r3, #16]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8a9b      	ldrh	r3, [r3, #20]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	f7fd fffa 	bl	8002cb8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f7fc fb1d 	bl	8001304 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_RESET);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6918      	ldr	r0, [r3, #16]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8a9b      	ldrh	r3, [r3, #20]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f7fd ffef 	bl	8002cb8 <HAL_GPIO_WritePin>
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <LCD_Character>:


void LCD_Character(LCD_Struct_t *LCD_1602, char data) {
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	70fb      	strb	r3, [r7, #3]
	char dat = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	737b      	strb	r3, [r7, #13]
	//RS has to be 1 before writing a character
	HAL_GPIO_WritePin(LCD_1602->RS_port, LCD_1602->RS_pin, GPIO_PIN_SET);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6898      	ldr	r0, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	899b      	ldrh	r3, [r3, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f7fd ffdb 	bl	8002cb8 <HAL_GPIO_WritePin>


	// Sending packets of 4 bits (get first 4 bits and set the last 4 to 0)
	dat = (data>>4) & 0x0F;
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	091b      	lsrs	r3, r3, #4
 8004d06:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 4; i++){
 8004d08:	2300      	movs	r3, #0
 8004d0a:	73fb      	strb	r3, [r7, #15]
 8004d0c:	e019      	b.n	8004d42 <LCD_Character+0x60>
		HAL_GPIO_WritePin(LCD_1602->dataport[i], LCD_1602->datapin[i], (dat>>i) & 0x01);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	8819      	ldrh	r1, [r3, #0]
 8004d26:	7b7a      	ldrb	r2, [r7, #13]
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	fa42 f303 	asr.w	r3, r2, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	f7fd ffbe 	bl	8002cb8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++){
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	73fb      	strb	r3, [r7, #15]
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d9e2      	bls.n	8004d0e <LCD_Character+0x2c>
	}

	// At the end of every command Enable has to be on for 1ms and then be turned off
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_SET);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6918      	ldr	r0, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8a9b      	ldrh	r3, [r3, #20]
 8004d50:	2201      	movs	r2, #1
 8004d52:	4619      	mov	r1, r3
 8004d54:	f7fd ffb0 	bl	8002cb8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004d58:	2001      	movs	r0, #1
 8004d5a:	f7fc fad3 	bl	8001304 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_RESET);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6918      	ldr	r0, [r3, #16]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8a9b      	ldrh	r3, [r3, #20]
 8004d66:	2200      	movs	r2, #0
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7fd ffa5 	bl	8002cb8 <HAL_GPIO_WritePin>

	//Repeats process for the last 4 bits

	dat = data & 0x0F;
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 4; i++){
 8004d76:	2300      	movs	r3, #0
 8004d78:	73bb      	strb	r3, [r7, #14]
 8004d7a:	e019      	b.n	8004db0 <LCD_Character+0xce>
		HAL_GPIO_WritePin(LCD_1602->dataport[i], LCD_1602->datapin[i], (dat>>i) & 0x01);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	7bbb      	ldrb	r3, [r7, #14]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	7bbb      	ldrb	r3, [r7, #14]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	8819      	ldrh	r1, [r3, #0]
 8004d94:	7b7a      	ldrb	r2, [r7, #13]
 8004d96:	7bbb      	ldrb	r3, [r7, #14]
 8004d98:	fa42 f303 	asr.w	r3, r2, r3
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	f7fd ff87 	bl	8002cb8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++){
 8004daa:	7bbb      	ldrb	r3, [r7, #14]
 8004dac:	3301      	adds	r3, #1
 8004dae:	73bb      	strb	r3, [r7, #14]
 8004db0:	7bbb      	ldrb	r3, [r7, #14]
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d9e2      	bls.n	8004d7c <LCD_Character+0x9a>
	}

	// At the end of every command Enable has to be on for 1ms and then be turned off
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_SET);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6918      	ldr	r0, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8a9b      	ldrh	r3, [r3, #20]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f7fd ff79 	bl	8002cb8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	f7fc fa9c 	bl	8001304 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_1602->E_port, LCD_1602->E_pin, GPIO_PIN_RESET);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6918      	ldr	r0, [r3, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8a9b      	ldrh	r3, [r3, #20]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	f7fd ff6e 	bl	8002cb8 <HAL_GPIO_WritePin>
}
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <LCD_String>:

//Writes a string into the current cursor position
void LCD_String(LCD_Struct_t *LCD_1602, char *string) {
 8004de4:	b590      	push	{r4, r7, lr}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++) {
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	e00a      	b.n	8004e0a <LCD_String+0x26>
		LCD_Character(LCD_1602, string[i]);
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	4413      	add	r3, r2
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff ff6f 	bl	8004ce2 <LCD_Character>
	for (uint8_t i = 0; i < strlen(string); i++) {
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	3301      	adds	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	7bfc      	ldrb	r4, [r7, #15]
 8004e0c:	6838      	ldr	r0, [r7, #0]
 8004e0e:	f7fb f9df 	bl	80001d0 <strlen>
 8004e12:	4603      	mov	r3, r0
 8004e14:	429c      	cmp	r4, r3
 8004e16:	d3ed      	bcc.n	8004df4 <LCD_String+0x10>
	}
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}

08004e22 <LCD_XY>:

//Sets the cursor in position (x, y)
void LCD_XY(LCD_Struct_t *LCD_1602, char x, char y) {
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	70fb      	strb	r3, [r7, #3]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	70bb      	strb	r3, [r7, #2]
	if (x > 0) {
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <LCD_XY+0x26>
		LCD_Command(LCD_1602, 0xC0 + y);
 8004e38:	78bb      	ldrb	r3, [r7, #2]
 8004e3a:	3b40      	subs	r3, #64	; 0x40
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff fecd 	bl	8004be0 <LCD_Command>
	}
	else {
		LCD_Command(LCD_1602, 0x80 + y);
	}
}
 8004e46:	e006      	b.n	8004e56 <LCD_XY+0x34>
		LCD_Command(LCD_1602, 0x80 + y);
 8004e48:	78bb      	ldrb	r3, [r7, #2]
 8004e4a:	3b80      	subs	r3, #128	; 0x80
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff fec5 	bl	8004be0 <LCD_Command>
}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <SysConfigClock>:
 */

#include "SysConfig.h"


void SysConfigClock(void){
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b096      	sub	sp, #88	; 0x58
 8004e62:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e64:	f107 0314 	add.w	r3, r7, #20
 8004e68:	2244      	movs	r2, #68	; 0x44
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f877 	bl	8004f60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e72:	463b      	mov	r3, r7
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	605a      	str	r2, [r3, #4]
 8004e7a:	609a      	str	r2, [r3, #8]
 8004e7c:	60da      	str	r2, [r3, #12]
 8004e7e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004e80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e84:	f7fd ff56 	bl	8002d34 <HAL_PWREx_ControlVoltageScaling>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <SysConfigClock+0x34>
	{
		Error_Handler();
 8004e8e:	f000 f837 	bl	8004f00 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e92:	2302      	movs	r3, #2
 8004e94:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e9a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8004eac:	230a      	movs	r3, #10
 8004eae:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004eb0:	2307      	movs	r3, #7
 8004eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ebc:	f107 0314 	add.w	r3, r7, #20
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fd ff8d 	bl	8002de0 <HAL_RCC_OscConfig>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <SysConfigClock+0x72>
	{
		Error_Handler();
 8004ecc:	f000 f818 	bl	8004f00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ed0:	230f      	movs	r3, #15
 8004ed2:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004ee4:	463b      	mov	r3, r7
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe fb55 	bl	8003598 <HAL_RCC_ClockConfig>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <SysConfigClock+0x9a>
	{
		Error_Handler();
 8004ef4:	f000 f804 	bl	8004f00 <Error_Handler>
	}
}
 8004ef8:	bf00      	nop
 8004efa:	3758      	adds	r7, #88	; 0x58
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <Error_Handler>:



void Error_Handler(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004f04:	b672      	cpsid	i
}
 8004f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f08:	e7fe      	b.n	8004f08 <Error_Handler+0x8>
	...

08004f0c <__errno>:
 8004f0c:	4b01      	ldr	r3, [pc, #4]	; (8004f14 <__errno+0x8>)
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000024 	.word	0x20000024

08004f18 <__libc_init_array>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	4d0d      	ldr	r5, [pc, #52]	; (8004f50 <__libc_init_array+0x38>)
 8004f1c:	4c0d      	ldr	r4, [pc, #52]	; (8004f54 <__libc_init_array+0x3c>)
 8004f1e:	1b64      	subs	r4, r4, r5
 8004f20:	10a4      	asrs	r4, r4, #2
 8004f22:	2600      	movs	r6, #0
 8004f24:	42a6      	cmp	r6, r4
 8004f26:	d109      	bne.n	8004f3c <__libc_init_array+0x24>
 8004f28:	4d0b      	ldr	r5, [pc, #44]	; (8004f58 <__libc_init_array+0x40>)
 8004f2a:	4c0c      	ldr	r4, [pc, #48]	; (8004f5c <__libc_init_array+0x44>)
 8004f2c:	f004 fc90 	bl	8009850 <_init>
 8004f30:	1b64      	subs	r4, r4, r5
 8004f32:	10a4      	asrs	r4, r4, #2
 8004f34:	2600      	movs	r6, #0
 8004f36:	42a6      	cmp	r6, r4
 8004f38:	d105      	bne.n	8004f46 <__libc_init_array+0x2e>
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f40:	4798      	blx	r3
 8004f42:	3601      	adds	r6, #1
 8004f44:	e7ee      	b.n	8004f24 <__libc_init_array+0xc>
 8004f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4a:	4798      	blx	r3
 8004f4c:	3601      	adds	r6, #1
 8004f4e:	e7f2      	b.n	8004f36 <__libc_init_array+0x1e>
 8004f50:	08009d84 	.word	0x08009d84
 8004f54:	08009d84 	.word	0x08009d84
 8004f58:	08009d84 	.word	0x08009d84
 8004f5c:	08009d88 	.word	0x08009d88

08004f60 <memset>:
 8004f60:	4402      	add	r2, r0
 8004f62:	4603      	mov	r3, r0
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d100      	bne.n	8004f6a <memset+0xa>
 8004f68:	4770      	bx	lr
 8004f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f6e:	e7f9      	b.n	8004f64 <memset+0x4>

08004f70 <__cvt>:
 8004f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f74:	ec55 4b10 	vmov	r4, r5, d0
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	460e      	mov	r6, r1
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	462b      	mov	r3, r5
 8004f80:	bfbb      	ittet	lt
 8004f82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f86:	461d      	movlt	r5, r3
 8004f88:	2300      	movge	r3, #0
 8004f8a:	232d      	movlt	r3, #45	; 0x2d
 8004f8c:	700b      	strb	r3, [r1, #0]
 8004f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f94:	4691      	mov	r9, r2
 8004f96:	f023 0820 	bic.w	r8, r3, #32
 8004f9a:	bfbc      	itt	lt
 8004f9c:	4622      	movlt	r2, r4
 8004f9e:	4614      	movlt	r4, r2
 8004fa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fa4:	d005      	beq.n	8004fb2 <__cvt+0x42>
 8004fa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004faa:	d100      	bne.n	8004fae <__cvt+0x3e>
 8004fac:	3601      	adds	r6, #1
 8004fae:	2102      	movs	r1, #2
 8004fb0:	e000      	b.n	8004fb4 <__cvt+0x44>
 8004fb2:	2103      	movs	r1, #3
 8004fb4:	ab03      	add	r3, sp, #12
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	ab02      	add	r3, sp, #8
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	ec45 4b10 	vmov	d0, r4, r5
 8004fc0:	4653      	mov	r3, sl
 8004fc2:	4632      	mov	r2, r6
 8004fc4:	f001 fdac 	bl	8006b20 <_dtoa_r>
 8004fc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fcc:	4607      	mov	r7, r0
 8004fce:	d102      	bne.n	8004fd6 <__cvt+0x66>
 8004fd0:	f019 0f01 	tst.w	r9, #1
 8004fd4:	d022      	beq.n	800501c <__cvt+0xac>
 8004fd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fda:	eb07 0906 	add.w	r9, r7, r6
 8004fde:	d110      	bne.n	8005002 <__cvt+0x92>
 8004fe0:	783b      	ldrb	r3, [r7, #0]
 8004fe2:	2b30      	cmp	r3, #48	; 0x30
 8004fe4:	d10a      	bne.n	8004ffc <__cvt+0x8c>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4620      	mov	r0, r4
 8004fec:	4629      	mov	r1, r5
 8004fee:	f7fb fd6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ff2:	b918      	cbnz	r0, 8004ffc <__cvt+0x8c>
 8004ff4:	f1c6 0601 	rsb	r6, r6, #1
 8004ff8:	f8ca 6000 	str.w	r6, [sl]
 8004ffc:	f8da 3000 	ldr.w	r3, [sl]
 8005000:	4499      	add	r9, r3
 8005002:	2200      	movs	r2, #0
 8005004:	2300      	movs	r3, #0
 8005006:	4620      	mov	r0, r4
 8005008:	4629      	mov	r1, r5
 800500a:	f7fb fd5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800500e:	b108      	cbz	r0, 8005014 <__cvt+0xa4>
 8005010:	f8cd 900c 	str.w	r9, [sp, #12]
 8005014:	2230      	movs	r2, #48	; 0x30
 8005016:	9b03      	ldr	r3, [sp, #12]
 8005018:	454b      	cmp	r3, r9
 800501a:	d307      	bcc.n	800502c <__cvt+0xbc>
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005020:	1bdb      	subs	r3, r3, r7
 8005022:	4638      	mov	r0, r7
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	b004      	add	sp, #16
 8005028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502c:	1c59      	adds	r1, r3, #1
 800502e:	9103      	str	r1, [sp, #12]
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	e7f0      	b.n	8005016 <__cvt+0xa6>

08005034 <__exponent>:
 8005034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005036:	4603      	mov	r3, r0
 8005038:	2900      	cmp	r1, #0
 800503a:	bfb8      	it	lt
 800503c:	4249      	neglt	r1, r1
 800503e:	f803 2b02 	strb.w	r2, [r3], #2
 8005042:	bfb4      	ite	lt
 8005044:	222d      	movlt	r2, #45	; 0x2d
 8005046:	222b      	movge	r2, #43	; 0x2b
 8005048:	2909      	cmp	r1, #9
 800504a:	7042      	strb	r2, [r0, #1]
 800504c:	dd2a      	ble.n	80050a4 <__exponent+0x70>
 800504e:	f10d 0407 	add.w	r4, sp, #7
 8005052:	46a4      	mov	ip, r4
 8005054:	270a      	movs	r7, #10
 8005056:	46a6      	mov	lr, r4
 8005058:	460a      	mov	r2, r1
 800505a:	fb91 f6f7 	sdiv	r6, r1, r7
 800505e:	fb07 1516 	mls	r5, r7, r6, r1
 8005062:	3530      	adds	r5, #48	; 0x30
 8005064:	2a63      	cmp	r2, #99	; 0x63
 8005066:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800506a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800506e:	4631      	mov	r1, r6
 8005070:	dcf1      	bgt.n	8005056 <__exponent+0x22>
 8005072:	3130      	adds	r1, #48	; 0x30
 8005074:	f1ae 0502 	sub.w	r5, lr, #2
 8005078:	f804 1c01 	strb.w	r1, [r4, #-1]
 800507c:	1c44      	adds	r4, r0, #1
 800507e:	4629      	mov	r1, r5
 8005080:	4561      	cmp	r1, ip
 8005082:	d30a      	bcc.n	800509a <__exponent+0x66>
 8005084:	f10d 0209 	add.w	r2, sp, #9
 8005088:	eba2 020e 	sub.w	r2, r2, lr
 800508c:	4565      	cmp	r5, ip
 800508e:	bf88      	it	hi
 8005090:	2200      	movhi	r2, #0
 8005092:	4413      	add	r3, r2
 8005094:	1a18      	subs	r0, r3, r0
 8005096:	b003      	add	sp, #12
 8005098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800509a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800509e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80050a2:	e7ed      	b.n	8005080 <__exponent+0x4c>
 80050a4:	2330      	movs	r3, #48	; 0x30
 80050a6:	3130      	adds	r1, #48	; 0x30
 80050a8:	7083      	strb	r3, [r0, #2]
 80050aa:	70c1      	strb	r1, [r0, #3]
 80050ac:	1d03      	adds	r3, r0, #4
 80050ae:	e7f1      	b.n	8005094 <__exponent+0x60>

080050b0 <_printf_float>:
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	ed2d 8b02 	vpush	{d8}
 80050b8:	b08d      	sub	sp, #52	; 0x34
 80050ba:	460c      	mov	r4, r1
 80050bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050c0:	4616      	mov	r6, r2
 80050c2:	461f      	mov	r7, r3
 80050c4:	4605      	mov	r5, r0
 80050c6:	f002 fe89 	bl	8007ddc <_localeconv_r>
 80050ca:	f8d0 a000 	ldr.w	sl, [r0]
 80050ce:	4650      	mov	r0, sl
 80050d0:	f7fb f87e 	bl	80001d0 <strlen>
 80050d4:	2300      	movs	r3, #0
 80050d6:	930a      	str	r3, [sp, #40]	; 0x28
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	9305      	str	r3, [sp, #20]
 80050dc:	f8d8 3000 	ldr.w	r3, [r8]
 80050e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80050e4:	3307      	adds	r3, #7
 80050e6:	f023 0307 	bic.w	r3, r3, #7
 80050ea:	f103 0208 	add.w	r2, r3, #8
 80050ee:	f8c8 2000 	str.w	r2, [r8]
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80050fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005102:	9307      	str	r3, [sp, #28]
 8005104:	f8cd 8018 	str.w	r8, [sp, #24]
 8005108:	ee08 0a10 	vmov	s16, r0
 800510c:	4b9f      	ldr	r3, [pc, #636]	; (800538c <_printf_float+0x2dc>)
 800510e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005116:	f7fb fd09 	bl	8000b2c <__aeabi_dcmpun>
 800511a:	bb88      	cbnz	r0, 8005180 <_printf_float+0xd0>
 800511c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005120:	4b9a      	ldr	r3, [pc, #616]	; (800538c <_printf_float+0x2dc>)
 8005122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005126:	f7fb fce3 	bl	8000af0 <__aeabi_dcmple>
 800512a:	bb48      	cbnz	r0, 8005180 <_printf_float+0xd0>
 800512c:	2200      	movs	r2, #0
 800512e:	2300      	movs	r3, #0
 8005130:	4640      	mov	r0, r8
 8005132:	4649      	mov	r1, r9
 8005134:	f7fb fcd2 	bl	8000adc <__aeabi_dcmplt>
 8005138:	b110      	cbz	r0, 8005140 <_printf_float+0x90>
 800513a:	232d      	movs	r3, #45	; 0x2d
 800513c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005140:	4b93      	ldr	r3, [pc, #588]	; (8005390 <_printf_float+0x2e0>)
 8005142:	4894      	ldr	r0, [pc, #592]	; (8005394 <_printf_float+0x2e4>)
 8005144:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005148:	bf94      	ite	ls
 800514a:	4698      	movls	r8, r3
 800514c:	4680      	movhi	r8, r0
 800514e:	2303      	movs	r3, #3
 8005150:	6123      	str	r3, [r4, #16]
 8005152:	9b05      	ldr	r3, [sp, #20]
 8005154:	f023 0204 	bic.w	r2, r3, #4
 8005158:	6022      	str	r2, [r4, #0]
 800515a:	f04f 0900 	mov.w	r9, #0
 800515e:	9700      	str	r7, [sp, #0]
 8005160:	4633      	mov	r3, r6
 8005162:	aa0b      	add	r2, sp, #44	; 0x2c
 8005164:	4621      	mov	r1, r4
 8005166:	4628      	mov	r0, r5
 8005168:	f000 f9d8 	bl	800551c <_printf_common>
 800516c:	3001      	adds	r0, #1
 800516e:	f040 8090 	bne.w	8005292 <_printf_float+0x1e2>
 8005172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005176:	b00d      	add	sp, #52	; 0x34
 8005178:	ecbd 8b02 	vpop	{d8}
 800517c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005180:	4642      	mov	r2, r8
 8005182:	464b      	mov	r3, r9
 8005184:	4640      	mov	r0, r8
 8005186:	4649      	mov	r1, r9
 8005188:	f7fb fcd0 	bl	8000b2c <__aeabi_dcmpun>
 800518c:	b140      	cbz	r0, 80051a0 <_printf_float+0xf0>
 800518e:	464b      	mov	r3, r9
 8005190:	2b00      	cmp	r3, #0
 8005192:	bfbc      	itt	lt
 8005194:	232d      	movlt	r3, #45	; 0x2d
 8005196:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800519a:	487f      	ldr	r0, [pc, #508]	; (8005398 <_printf_float+0x2e8>)
 800519c:	4b7f      	ldr	r3, [pc, #508]	; (800539c <_printf_float+0x2ec>)
 800519e:	e7d1      	b.n	8005144 <_printf_float+0x94>
 80051a0:	6863      	ldr	r3, [r4, #4]
 80051a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051a6:	9206      	str	r2, [sp, #24]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	d13f      	bne.n	800522c <_printf_float+0x17c>
 80051ac:	2306      	movs	r3, #6
 80051ae:	6063      	str	r3, [r4, #4]
 80051b0:	9b05      	ldr	r3, [sp, #20]
 80051b2:	6861      	ldr	r1, [r4, #4]
 80051b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051b8:	2300      	movs	r3, #0
 80051ba:	9303      	str	r3, [sp, #12]
 80051bc:	ab0a      	add	r3, sp, #40	; 0x28
 80051be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80051c2:	ab09      	add	r3, sp, #36	; 0x24
 80051c4:	ec49 8b10 	vmov	d0, r8, r9
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	6022      	str	r2, [r4, #0]
 80051cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051d0:	4628      	mov	r0, r5
 80051d2:	f7ff fecd 	bl	8004f70 <__cvt>
 80051d6:	9b06      	ldr	r3, [sp, #24]
 80051d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051da:	2b47      	cmp	r3, #71	; 0x47
 80051dc:	4680      	mov	r8, r0
 80051de:	d108      	bne.n	80051f2 <_printf_float+0x142>
 80051e0:	1cc8      	adds	r0, r1, #3
 80051e2:	db02      	blt.n	80051ea <_printf_float+0x13a>
 80051e4:	6863      	ldr	r3, [r4, #4]
 80051e6:	4299      	cmp	r1, r3
 80051e8:	dd41      	ble.n	800526e <_printf_float+0x1be>
 80051ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80051ee:	fa5f fb8b 	uxtb.w	fp, fp
 80051f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051f6:	d820      	bhi.n	800523a <_printf_float+0x18a>
 80051f8:	3901      	subs	r1, #1
 80051fa:	465a      	mov	r2, fp
 80051fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005200:	9109      	str	r1, [sp, #36]	; 0x24
 8005202:	f7ff ff17 	bl	8005034 <__exponent>
 8005206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005208:	1813      	adds	r3, r2, r0
 800520a:	2a01      	cmp	r2, #1
 800520c:	4681      	mov	r9, r0
 800520e:	6123      	str	r3, [r4, #16]
 8005210:	dc02      	bgt.n	8005218 <_printf_float+0x168>
 8005212:	6822      	ldr	r2, [r4, #0]
 8005214:	07d2      	lsls	r2, r2, #31
 8005216:	d501      	bpl.n	800521c <_printf_float+0x16c>
 8005218:	3301      	adds	r3, #1
 800521a:	6123      	str	r3, [r4, #16]
 800521c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005220:	2b00      	cmp	r3, #0
 8005222:	d09c      	beq.n	800515e <_printf_float+0xae>
 8005224:	232d      	movs	r3, #45	; 0x2d
 8005226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800522a:	e798      	b.n	800515e <_printf_float+0xae>
 800522c:	9a06      	ldr	r2, [sp, #24]
 800522e:	2a47      	cmp	r2, #71	; 0x47
 8005230:	d1be      	bne.n	80051b0 <_printf_float+0x100>
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1bc      	bne.n	80051b0 <_printf_float+0x100>
 8005236:	2301      	movs	r3, #1
 8005238:	e7b9      	b.n	80051ae <_printf_float+0xfe>
 800523a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800523e:	d118      	bne.n	8005272 <_printf_float+0x1c2>
 8005240:	2900      	cmp	r1, #0
 8005242:	6863      	ldr	r3, [r4, #4]
 8005244:	dd0b      	ble.n	800525e <_printf_float+0x1ae>
 8005246:	6121      	str	r1, [r4, #16]
 8005248:	b913      	cbnz	r3, 8005250 <_printf_float+0x1a0>
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	07d0      	lsls	r0, r2, #31
 800524e:	d502      	bpl.n	8005256 <_printf_float+0x1a6>
 8005250:	3301      	adds	r3, #1
 8005252:	440b      	add	r3, r1
 8005254:	6123      	str	r3, [r4, #16]
 8005256:	65a1      	str	r1, [r4, #88]	; 0x58
 8005258:	f04f 0900 	mov.w	r9, #0
 800525c:	e7de      	b.n	800521c <_printf_float+0x16c>
 800525e:	b913      	cbnz	r3, 8005266 <_printf_float+0x1b6>
 8005260:	6822      	ldr	r2, [r4, #0]
 8005262:	07d2      	lsls	r2, r2, #31
 8005264:	d501      	bpl.n	800526a <_printf_float+0x1ba>
 8005266:	3302      	adds	r3, #2
 8005268:	e7f4      	b.n	8005254 <_printf_float+0x1a4>
 800526a:	2301      	movs	r3, #1
 800526c:	e7f2      	b.n	8005254 <_printf_float+0x1a4>
 800526e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005274:	4299      	cmp	r1, r3
 8005276:	db05      	blt.n	8005284 <_printf_float+0x1d4>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	6121      	str	r1, [r4, #16]
 800527c:	07d8      	lsls	r0, r3, #31
 800527e:	d5ea      	bpl.n	8005256 <_printf_float+0x1a6>
 8005280:	1c4b      	adds	r3, r1, #1
 8005282:	e7e7      	b.n	8005254 <_printf_float+0x1a4>
 8005284:	2900      	cmp	r1, #0
 8005286:	bfd4      	ite	le
 8005288:	f1c1 0202 	rsble	r2, r1, #2
 800528c:	2201      	movgt	r2, #1
 800528e:	4413      	add	r3, r2
 8005290:	e7e0      	b.n	8005254 <_printf_float+0x1a4>
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	055a      	lsls	r2, r3, #21
 8005296:	d407      	bmi.n	80052a8 <_printf_float+0x1f8>
 8005298:	6923      	ldr	r3, [r4, #16]
 800529a:	4642      	mov	r2, r8
 800529c:	4631      	mov	r1, r6
 800529e:	4628      	mov	r0, r5
 80052a0:	47b8      	blx	r7
 80052a2:	3001      	adds	r0, #1
 80052a4:	d12c      	bne.n	8005300 <_printf_float+0x250>
 80052a6:	e764      	b.n	8005172 <_printf_float+0xc2>
 80052a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052ac:	f240 80e0 	bls.w	8005470 <_printf_float+0x3c0>
 80052b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052b4:	2200      	movs	r2, #0
 80052b6:	2300      	movs	r3, #0
 80052b8:	f7fb fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d034      	beq.n	800532a <_printf_float+0x27a>
 80052c0:	4a37      	ldr	r2, [pc, #220]	; (80053a0 <_printf_float+0x2f0>)
 80052c2:	2301      	movs	r3, #1
 80052c4:	4631      	mov	r1, r6
 80052c6:	4628      	mov	r0, r5
 80052c8:	47b8      	blx	r7
 80052ca:	3001      	adds	r0, #1
 80052cc:	f43f af51 	beq.w	8005172 <_printf_float+0xc2>
 80052d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052d4:	429a      	cmp	r2, r3
 80052d6:	db02      	blt.n	80052de <_printf_float+0x22e>
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	07d8      	lsls	r0, r3, #31
 80052dc:	d510      	bpl.n	8005300 <_printf_float+0x250>
 80052de:	ee18 3a10 	vmov	r3, s16
 80052e2:	4652      	mov	r2, sl
 80052e4:	4631      	mov	r1, r6
 80052e6:	4628      	mov	r0, r5
 80052e8:	47b8      	blx	r7
 80052ea:	3001      	adds	r0, #1
 80052ec:	f43f af41 	beq.w	8005172 <_printf_float+0xc2>
 80052f0:	f04f 0800 	mov.w	r8, #0
 80052f4:	f104 091a 	add.w	r9, r4, #26
 80052f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052fa:	3b01      	subs	r3, #1
 80052fc:	4543      	cmp	r3, r8
 80052fe:	dc09      	bgt.n	8005314 <_printf_float+0x264>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	079b      	lsls	r3, r3, #30
 8005304:	f100 8105 	bmi.w	8005512 <_printf_float+0x462>
 8005308:	68e0      	ldr	r0, [r4, #12]
 800530a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800530c:	4298      	cmp	r0, r3
 800530e:	bfb8      	it	lt
 8005310:	4618      	movlt	r0, r3
 8005312:	e730      	b.n	8005176 <_printf_float+0xc6>
 8005314:	2301      	movs	r3, #1
 8005316:	464a      	mov	r2, r9
 8005318:	4631      	mov	r1, r6
 800531a:	4628      	mov	r0, r5
 800531c:	47b8      	blx	r7
 800531e:	3001      	adds	r0, #1
 8005320:	f43f af27 	beq.w	8005172 <_printf_float+0xc2>
 8005324:	f108 0801 	add.w	r8, r8, #1
 8005328:	e7e6      	b.n	80052f8 <_printf_float+0x248>
 800532a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	dc39      	bgt.n	80053a4 <_printf_float+0x2f4>
 8005330:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <_printf_float+0x2f0>)
 8005332:	2301      	movs	r3, #1
 8005334:	4631      	mov	r1, r6
 8005336:	4628      	mov	r0, r5
 8005338:	47b8      	blx	r7
 800533a:	3001      	adds	r0, #1
 800533c:	f43f af19 	beq.w	8005172 <_printf_float+0xc2>
 8005340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005344:	4313      	orrs	r3, r2
 8005346:	d102      	bne.n	800534e <_printf_float+0x29e>
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	07d9      	lsls	r1, r3, #31
 800534c:	d5d8      	bpl.n	8005300 <_printf_float+0x250>
 800534e:	ee18 3a10 	vmov	r3, s16
 8005352:	4652      	mov	r2, sl
 8005354:	4631      	mov	r1, r6
 8005356:	4628      	mov	r0, r5
 8005358:	47b8      	blx	r7
 800535a:	3001      	adds	r0, #1
 800535c:	f43f af09 	beq.w	8005172 <_printf_float+0xc2>
 8005360:	f04f 0900 	mov.w	r9, #0
 8005364:	f104 0a1a 	add.w	sl, r4, #26
 8005368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536a:	425b      	negs	r3, r3
 800536c:	454b      	cmp	r3, r9
 800536e:	dc01      	bgt.n	8005374 <_printf_float+0x2c4>
 8005370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005372:	e792      	b.n	800529a <_printf_float+0x1ea>
 8005374:	2301      	movs	r3, #1
 8005376:	4652      	mov	r2, sl
 8005378:	4631      	mov	r1, r6
 800537a:	4628      	mov	r0, r5
 800537c:	47b8      	blx	r7
 800537e:	3001      	adds	r0, #1
 8005380:	f43f aef7 	beq.w	8005172 <_printf_float+0xc2>
 8005384:	f109 0901 	add.w	r9, r9, #1
 8005388:	e7ee      	b.n	8005368 <_printf_float+0x2b8>
 800538a:	bf00      	nop
 800538c:	7fefffff 	.word	0x7fefffff
 8005390:	080098e4 	.word	0x080098e4
 8005394:	080098e8 	.word	0x080098e8
 8005398:	080098f0 	.word	0x080098f0
 800539c:	080098ec 	.word	0x080098ec
 80053a0:	080098f4 	.word	0x080098f4
 80053a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053a8:	429a      	cmp	r2, r3
 80053aa:	bfa8      	it	ge
 80053ac:	461a      	movge	r2, r3
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	4691      	mov	r9, r2
 80053b2:	dc37      	bgt.n	8005424 <_printf_float+0x374>
 80053b4:	f04f 0b00 	mov.w	fp, #0
 80053b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053bc:	f104 021a 	add.w	r2, r4, #26
 80053c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053c2:	9305      	str	r3, [sp, #20]
 80053c4:	eba3 0309 	sub.w	r3, r3, r9
 80053c8:	455b      	cmp	r3, fp
 80053ca:	dc33      	bgt.n	8005434 <_printf_float+0x384>
 80053cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053d0:	429a      	cmp	r2, r3
 80053d2:	db3b      	blt.n	800544c <_printf_float+0x39c>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	07da      	lsls	r2, r3, #31
 80053d8:	d438      	bmi.n	800544c <_printf_float+0x39c>
 80053da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053dc:	9a05      	ldr	r2, [sp, #20]
 80053de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053e0:	1a9a      	subs	r2, r3, r2
 80053e2:	eba3 0901 	sub.w	r9, r3, r1
 80053e6:	4591      	cmp	r9, r2
 80053e8:	bfa8      	it	ge
 80053ea:	4691      	movge	r9, r2
 80053ec:	f1b9 0f00 	cmp.w	r9, #0
 80053f0:	dc35      	bgt.n	800545e <_printf_float+0x3ae>
 80053f2:	f04f 0800 	mov.w	r8, #0
 80053f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053fa:	f104 0a1a 	add.w	sl, r4, #26
 80053fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	eba3 0309 	sub.w	r3, r3, r9
 8005408:	4543      	cmp	r3, r8
 800540a:	f77f af79 	ble.w	8005300 <_printf_float+0x250>
 800540e:	2301      	movs	r3, #1
 8005410:	4652      	mov	r2, sl
 8005412:	4631      	mov	r1, r6
 8005414:	4628      	mov	r0, r5
 8005416:	47b8      	blx	r7
 8005418:	3001      	adds	r0, #1
 800541a:	f43f aeaa 	beq.w	8005172 <_printf_float+0xc2>
 800541e:	f108 0801 	add.w	r8, r8, #1
 8005422:	e7ec      	b.n	80053fe <_printf_float+0x34e>
 8005424:	4613      	mov	r3, r2
 8005426:	4631      	mov	r1, r6
 8005428:	4642      	mov	r2, r8
 800542a:	4628      	mov	r0, r5
 800542c:	47b8      	blx	r7
 800542e:	3001      	adds	r0, #1
 8005430:	d1c0      	bne.n	80053b4 <_printf_float+0x304>
 8005432:	e69e      	b.n	8005172 <_printf_float+0xc2>
 8005434:	2301      	movs	r3, #1
 8005436:	4631      	mov	r1, r6
 8005438:	4628      	mov	r0, r5
 800543a:	9205      	str	r2, [sp, #20]
 800543c:	47b8      	blx	r7
 800543e:	3001      	adds	r0, #1
 8005440:	f43f ae97 	beq.w	8005172 <_printf_float+0xc2>
 8005444:	9a05      	ldr	r2, [sp, #20]
 8005446:	f10b 0b01 	add.w	fp, fp, #1
 800544a:	e7b9      	b.n	80053c0 <_printf_float+0x310>
 800544c:	ee18 3a10 	vmov	r3, s16
 8005450:	4652      	mov	r2, sl
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	d1be      	bne.n	80053da <_printf_float+0x32a>
 800545c:	e689      	b.n	8005172 <_printf_float+0xc2>
 800545e:	9a05      	ldr	r2, [sp, #20]
 8005460:	464b      	mov	r3, r9
 8005462:	4442      	add	r2, r8
 8005464:	4631      	mov	r1, r6
 8005466:	4628      	mov	r0, r5
 8005468:	47b8      	blx	r7
 800546a:	3001      	adds	r0, #1
 800546c:	d1c1      	bne.n	80053f2 <_printf_float+0x342>
 800546e:	e680      	b.n	8005172 <_printf_float+0xc2>
 8005470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005472:	2a01      	cmp	r2, #1
 8005474:	dc01      	bgt.n	800547a <_printf_float+0x3ca>
 8005476:	07db      	lsls	r3, r3, #31
 8005478:	d538      	bpl.n	80054ec <_printf_float+0x43c>
 800547a:	2301      	movs	r3, #1
 800547c:	4642      	mov	r2, r8
 800547e:	4631      	mov	r1, r6
 8005480:	4628      	mov	r0, r5
 8005482:	47b8      	blx	r7
 8005484:	3001      	adds	r0, #1
 8005486:	f43f ae74 	beq.w	8005172 <_printf_float+0xc2>
 800548a:	ee18 3a10 	vmov	r3, s16
 800548e:	4652      	mov	r2, sl
 8005490:	4631      	mov	r1, r6
 8005492:	4628      	mov	r0, r5
 8005494:	47b8      	blx	r7
 8005496:	3001      	adds	r0, #1
 8005498:	f43f ae6b 	beq.w	8005172 <_printf_float+0xc2>
 800549c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054a0:	2200      	movs	r2, #0
 80054a2:	2300      	movs	r3, #0
 80054a4:	f7fb fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 80054a8:	b9d8      	cbnz	r0, 80054e2 <_printf_float+0x432>
 80054aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ac:	f108 0201 	add.w	r2, r8, #1
 80054b0:	3b01      	subs	r3, #1
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b8      	blx	r7
 80054b8:	3001      	adds	r0, #1
 80054ba:	d10e      	bne.n	80054da <_printf_float+0x42a>
 80054bc:	e659      	b.n	8005172 <_printf_float+0xc2>
 80054be:	2301      	movs	r3, #1
 80054c0:	4652      	mov	r2, sl
 80054c2:	4631      	mov	r1, r6
 80054c4:	4628      	mov	r0, r5
 80054c6:	47b8      	blx	r7
 80054c8:	3001      	adds	r0, #1
 80054ca:	f43f ae52 	beq.w	8005172 <_printf_float+0xc2>
 80054ce:	f108 0801 	add.w	r8, r8, #1
 80054d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d4:	3b01      	subs	r3, #1
 80054d6:	4543      	cmp	r3, r8
 80054d8:	dcf1      	bgt.n	80054be <_printf_float+0x40e>
 80054da:	464b      	mov	r3, r9
 80054dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054e0:	e6dc      	b.n	800529c <_printf_float+0x1ec>
 80054e2:	f04f 0800 	mov.w	r8, #0
 80054e6:	f104 0a1a 	add.w	sl, r4, #26
 80054ea:	e7f2      	b.n	80054d2 <_printf_float+0x422>
 80054ec:	2301      	movs	r3, #1
 80054ee:	4642      	mov	r2, r8
 80054f0:	e7df      	b.n	80054b2 <_printf_float+0x402>
 80054f2:	2301      	movs	r3, #1
 80054f4:	464a      	mov	r2, r9
 80054f6:	4631      	mov	r1, r6
 80054f8:	4628      	mov	r0, r5
 80054fa:	47b8      	blx	r7
 80054fc:	3001      	adds	r0, #1
 80054fe:	f43f ae38 	beq.w	8005172 <_printf_float+0xc2>
 8005502:	f108 0801 	add.w	r8, r8, #1
 8005506:	68e3      	ldr	r3, [r4, #12]
 8005508:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800550a:	1a5b      	subs	r3, r3, r1
 800550c:	4543      	cmp	r3, r8
 800550e:	dcf0      	bgt.n	80054f2 <_printf_float+0x442>
 8005510:	e6fa      	b.n	8005308 <_printf_float+0x258>
 8005512:	f04f 0800 	mov.w	r8, #0
 8005516:	f104 0919 	add.w	r9, r4, #25
 800551a:	e7f4      	b.n	8005506 <_printf_float+0x456>

0800551c <_printf_common>:
 800551c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005520:	4616      	mov	r6, r2
 8005522:	4699      	mov	r9, r3
 8005524:	688a      	ldr	r2, [r1, #8]
 8005526:	690b      	ldr	r3, [r1, #16]
 8005528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800552c:	4293      	cmp	r3, r2
 800552e:	bfb8      	it	lt
 8005530:	4613      	movlt	r3, r2
 8005532:	6033      	str	r3, [r6, #0]
 8005534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005538:	4607      	mov	r7, r0
 800553a:	460c      	mov	r4, r1
 800553c:	b10a      	cbz	r2, 8005542 <_printf_common+0x26>
 800553e:	3301      	adds	r3, #1
 8005540:	6033      	str	r3, [r6, #0]
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	0699      	lsls	r1, r3, #26
 8005546:	bf42      	ittt	mi
 8005548:	6833      	ldrmi	r3, [r6, #0]
 800554a:	3302      	addmi	r3, #2
 800554c:	6033      	strmi	r3, [r6, #0]
 800554e:	6825      	ldr	r5, [r4, #0]
 8005550:	f015 0506 	ands.w	r5, r5, #6
 8005554:	d106      	bne.n	8005564 <_printf_common+0x48>
 8005556:	f104 0a19 	add.w	sl, r4, #25
 800555a:	68e3      	ldr	r3, [r4, #12]
 800555c:	6832      	ldr	r2, [r6, #0]
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	42ab      	cmp	r3, r5
 8005562:	dc26      	bgt.n	80055b2 <_printf_common+0x96>
 8005564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005568:	1e13      	subs	r3, r2, #0
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	bf18      	it	ne
 800556e:	2301      	movne	r3, #1
 8005570:	0692      	lsls	r2, r2, #26
 8005572:	d42b      	bmi.n	80055cc <_printf_common+0xb0>
 8005574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005578:	4649      	mov	r1, r9
 800557a:	4638      	mov	r0, r7
 800557c:	47c0      	blx	r8
 800557e:	3001      	adds	r0, #1
 8005580:	d01e      	beq.n	80055c0 <_printf_common+0xa4>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	68e5      	ldr	r5, [r4, #12]
 8005586:	6832      	ldr	r2, [r6, #0]
 8005588:	f003 0306 	and.w	r3, r3, #6
 800558c:	2b04      	cmp	r3, #4
 800558e:	bf08      	it	eq
 8005590:	1aad      	subeq	r5, r5, r2
 8005592:	68a3      	ldr	r3, [r4, #8]
 8005594:	6922      	ldr	r2, [r4, #16]
 8005596:	bf0c      	ite	eq
 8005598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800559c:	2500      	movne	r5, #0
 800559e:	4293      	cmp	r3, r2
 80055a0:	bfc4      	itt	gt
 80055a2:	1a9b      	subgt	r3, r3, r2
 80055a4:	18ed      	addgt	r5, r5, r3
 80055a6:	2600      	movs	r6, #0
 80055a8:	341a      	adds	r4, #26
 80055aa:	42b5      	cmp	r5, r6
 80055ac:	d11a      	bne.n	80055e4 <_printf_common+0xc8>
 80055ae:	2000      	movs	r0, #0
 80055b0:	e008      	b.n	80055c4 <_printf_common+0xa8>
 80055b2:	2301      	movs	r3, #1
 80055b4:	4652      	mov	r2, sl
 80055b6:	4649      	mov	r1, r9
 80055b8:	4638      	mov	r0, r7
 80055ba:	47c0      	blx	r8
 80055bc:	3001      	adds	r0, #1
 80055be:	d103      	bne.n	80055c8 <_printf_common+0xac>
 80055c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c8:	3501      	adds	r5, #1
 80055ca:	e7c6      	b.n	800555a <_printf_common+0x3e>
 80055cc:	18e1      	adds	r1, r4, r3
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	2030      	movs	r0, #48	; 0x30
 80055d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055d6:	4422      	add	r2, r4
 80055d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055e0:	3302      	adds	r3, #2
 80055e2:	e7c7      	b.n	8005574 <_printf_common+0x58>
 80055e4:	2301      	movs	r3, #1
 80055e6:	4622      	mov	r2, r4
 80055e8:	4649      	mov	r1, r9
 80055ea:	4638      	mov	r0, r7
 80055ec:	47c0      	blx	r8
 80055ee:	3001      	adds	r0, #1
 80055f0:	d0e6      	beq.n	80055c0 <_printf_common+0xa4>
 80055f2:	3601      	adds	r6, #1
 80055f4:	e7d9      	b.n	80055aa <_printf_common+0x8e>
	...

080055f8 <_printf_i>:
 80055f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055fc:	7e0f      	ldrb	r7, [r1, #24]
 80055fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005600:	2f78      	cmp	r7, #120	; 0x78
 8005602:	4691      	mov	r9, r2
 8005604:	4680      	mov	r8, r0
 8005606:	460c      	mov	r4, r1
 8005608:	469a      	mov	sl, r3
 800560a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800560e:	d807      	bhi.n	8005620 <_printf_i+0x28>
 8005610:	2f62      	cmp	r7, #98	; 0x62
 8005612:	d80a      	bhi.n	800562a <_printf_i+0x32>
 8005614:	2f00      	cmp	r7, #0
 8005616:	f000 80d8 	beq.w	80057ca <_printf_i+0x1d2>
 800561a:	2f58      	cmp	r7, #88	; 0x58
 800561c:	f000 80a3 	beq.w	8005766 <_printf_i+0x16e>
 8005620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005628:	e03a      	b.n	80056a0 <_printf_i+0xa8>
 800562a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800562e:	2b15      	cmp	r3, #21
 8005630:	d8f6      	bhi.n	8005620 <_printf_i+0x28>
 8005632:	a101      	add	r1, pc, #4	; (adr r1, 8005638 <_printf_i+0x40>)
 8005634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005638:	08005691 	.word	0x08005691
 800563c:	080056a5 	.word	0x080056a5
 8005640:	08005621 	.word	0x08005621
 8005644:	08005621 	.word	0x08005621
 8005648:	08005621 	.word	0x08005621
 800564c:	08005621 	.word	0x08005621
 8005650:	080056a5 	.word	0x080056a5
 8005654:	08005621 	.word	0x08005621
 8005658:	08005621 	.word	0x08005621
 800565c:	08005621 	.word	0x08005621
 8005660:	08005621 	.word	0x08005621
 8005664:	080057b1 	.word	0x080057b1
 8005668:	080056d5 	.word	0x080056d5
 800566c:	08005793 	.word	0x08005793
 8005670:	08005621 	.word	0x08005621
 8005674:	08005621 	.word	0x08005621
 8005678:	080057d3 	.word	0x080057d3
 800567c:	08005621 	.word	0x08005621
 8005680:	080056d5 	.word	0x080056d5
 8005684:	08005621 	.word	0x08005621
 8005688:	08005621 	.word	0x08005621
 800568c:	0800579b 	.word	0x0800579b
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	1d1a      	adds	r2, r3, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	602a      	str	r2, [r5, #0]
 8005698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800569c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0a3      	b.n	80057ec <_printf_i+0x1f4>
 80056a4:	6820      	ldr	r0, [r4, #0]
 80056a6:	6829      	ldr	r1, [r5, #0]
 80056a8:	0606      	lsls	r6, r0, #24
 80056aa:	f101 0304 	add.w	r3, r1, #4
 80056ae:	d50a      	bpl.n	80056c6 <_printf_i+0xce>
 80056b0:	680e      	ldr	r6, [r1, #0]
 80056b2:	602b      	str	r3, [r5, #0]
 80056b4:	2e00      	cmp	r6, #0
 80056b6:	da03      	bge.n	80056c0 <_printf_i+0xc8>
 80056b8:	232d      	movs	r3, #45	; 0x2d
 80056ba:	4276      	negs	r6, r6
 80056bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056c0:	485e      	ldr	r0, [pc, #376]	; (800583c <_printf_i+0x244>)
 80056c2:	230a      	movs	r3, #10
 80056c4:	e019      	b.n	80056fa <_printf_i+0x102>
 80056c6:	680e      	ldr	r6, [r1, #0]
 80056c8:	602b      	str	r3, [r5, #0]
 80056ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056ce:	bf18      	it	ne
 80056d0:	b236      	sxthne	r6, r6
 80056d2:	e7ef      	b.n	80056b4 <_printf_i+0xbc>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	6820      	ldr	r0, [r4, #0]
 80056d8:	1d19      	adds	r1, r3, #4
 80056da:	6029      	str	r1, [r5, #0]
 80056dc:	0601      	lsls	r1, r0, #24
 80056de:	d501      	bpl.n	80056e4 <_printf_i+0xec>
 80056e0:	681e      	ldr	r6, [r3, #0]
 80056e2:	e002      	b.n	80056ea <_printf_i+0xf2>
 80056e4:	0646      	lsls	r6, r0, #25
 80056e6:	d5fb      	bpl.n	80056e0 <_printf_i+0xe8>
 80056e8:	881e      	ldrh	r6, [r3, #0]
 80056ea:	4854      	ldr	r0, [pc, #336]	; (800583c <_printf_i+0x244>)
 80056ec:	2f6f      	cmp	r7, #111	; 0x6f
 80056ee:	bf0c      	ite	eq
 80056f0:	2308      	moveq	r3, #8
 80056f2:	230a      	movne	r3, #10
 80056f4:	2100      	movs	r1, #0
 80056f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056fa:	6865      	ldr	r5, [r4, #4]
 80056fc:	60a5      	str	r5, [r4, #8]
 80056fe:	2d00      	cmp	r5, #0
 8005700:	bfa2      	ittt	ge
 8005702:	6821      	ldrge	r1, [r4, #0]
 8005704:	f021 0104 	bicge.w	r1, r1, #4
 8005708:	6021      	strge	r1, [r4, #0]
 800570a:	b90e      	cbnz	r6, 8005710 <_printf_i+0x118>
 800570c:	2d00      	cmp	r5, #0
 800570e:	d04d      	beq.n	80057ac <_printf_i+0x1b4>
 8005710:	4615      	mov	r5, r2
 8005712:	fbb6 f1f3 	udiv	r1, r6, r3
 8005716:	fb03 6711 	mls	r7, r3, r1, r6
 800571a:	5dc7      	ldrb	r7, [r0, r7]
 800571c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005720:	4637      	mov	r7, r6
 8005722:	42bb      	cmp	r3, r7
 8005724:	460e      	mov	r6, r1
 8005726:	d9f4      	bls.n	8005712 <_printf_i+0x11a>
 8005728:	2b08      	cmp	r3, #8
 800572a:	d10b      	bne.n	8005744 <_printf_i+0x14c>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	07de      	lsls	r6, r3, #31
 8005730:	d508      	bpl.n	8005744 <_printf_i+0x14c>
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	6861      	ldr	r1, [r4, #4]
 8005736:	4299      	cmp	r1, r3
 8005738:	bfde      	ittt	le
 800573a:	2330      	movle	r3, #48	; 0x30
 800573c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005740:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005744:	1b52      	subs	r2, r2, r5
 8005746:	6122      	str	r2, [r4, #16]
 8005748:	f8cd a000 	str.w	sl, [sp]
 800574c:	464b      	mov	r3, r9
 800574e:	aa03      	add	r2, sp, #12
 8005750:	4621      	mov	r1, r4
 8005752:	4640      	mov	r0, r8
 8005754:	f7ff fee2 	bl	800551c <_printf_common>
 8005758:	3001      	adds	r0, #1
 800575a:	d14c      	bne.n	80057f6 <_printf_i+0x1fe>
 800575c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005760:	b004      	add	sp, #16
 8005762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005766:	4835      	ldr	r0, [pc, #212]	; (800583c <_printf_i+0x244>)
 8005768:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800576c:	6829      	ldr	r1, [r5, #0]
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	f851 6b04 	ldr.w	r6, [r1], #4
 8005774:	6029      	str	r1, [r5, #0]
 8005776:	061d      	lsls	r5, r3, #24
 8005778:	d514      	bpl.n	80057a4 <_printf_i+0x1ac>
 800577a:	07df      	lsls	r7, r3, #31
 800577c:	bf44      	itt	mi
 800577e:	f043 0320 	orrmi.w	r3, r3, #32
 8005782:	6023      	strmi	r3, [r4, #0]
 8005784:	b91e      	cbnz	r6, 800578e <_printf_i+0x196>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	f023 0320 	bic.w	r3, r3, #32
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	2310      	movs	r3, #16
 8005790:	e7b0      	b.n	80056f4 <_printf_i+0xfc>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	f043 0320 	orr.w	r3, r3, #32
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	2378      	movs	r3, #120	; 0x78
 800579c:	4828      	ldr	r0, [pc, #160]	; (8005840 <_printf_i+0x248>)
 800579e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057a2:	e7e3      	b.n	800576c <_printf_i+0x174>
 80057a4:	0659      	lsls	r1, r3, #25
 80057a6:	bf48      	it	mi
 80057a8:	b2b6      	uxthmi	r6, r6
 80057aa:	e7e6      	b.n	800577a <_printf_i+0x182>
 80057ac:	4615      	mov	r5, r2
 80057ae:	e7bb      	b.n	8005728 <_printf_i+0x130>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	6826      	ldr	r6, [r4, #0]
 80057b4:	6961      	ldr	r1, [r4, #20]
 80057b6:	1d18      	adds	r0, r3, #4
 80057b8:	6028      	str	r0, [r5, #0]
 80057ba:	0635      	lsls	r5, r6, #24
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	d501      	bpl.n	80057c4 <_printf_i+0x1cc>
 80057c0:	6019      	str	r1, [r3, #0]
 80057c2:	e002      	b.n	80057ca <_printf_i+0x1d2>
 80057c4:	0670      	lsls	r0, r6, #25
 80057c6:	d5fb      	bpl.n	80057c0 <_printf_i+0x1c8>
 80057c8:	8019      	strh	r1, [r3, #0]
 80057ca:	2300      	movs	r3, #0
 80057cc:	6123      	str	r3, [r4, #16]
 80057ce:	4615      	mov	r5, r2
 80057d0:	e7ba      	b.n	8005748 <_printf_i+0x150>
 80057d2:	682b      	ldr	r3, [r5, #0]
 80057d4:	1d1a      	adds	r2, r3, #4
 80057d6:	602a      	str	r2, [r5, #0]
 80057d8:	681d      	ldr	r5, [r3, #0]
 80057da:	6862      	ldr	r2, [r4, #4]
 80057dc:	2100      	movs	r1, #0
 80057de:	4628      	mov	r0, r5
 80057e0:	f7fa fcfe 	bl	80001e0 <memchr>
 80057e4:	b108      	cbz	r0, 80057ea <_printf_i+0x1f2>
 80057e6:	1b40      	subs	r0, r0, r5
 80057e8:	6060      	str	r0, [r4, #4]
 80057ea:	6863      	ldr	r3, [r4, #4]
 80057ec:	6123      	str	r3, [r4, #16]
 80057ee:	2300      	movs	r3, #0
 80057f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f4:	e7a8      	b.n	8005748 <_printf_i+0x150>
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	462a      	mov	r2, r5
 80057fa:	4649      	mov	r1, r9
 80057fc:	4640      	mov	r0, r8
 80057fe:	47d0      	blx	sl
 8005800:	3001      	adds	r0, #1
 8005802:	d0ab      	beq.n	800575c <_printf_i+0x164>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	079b      	lsls	r3, r3, #30
 8005808:	d413      	bmi.n	8005832 <_printf_i+0x23a>
 800580a:	68e0      	ldr	r0, [r4, #12]
 800580c:	9b03      	ldr	r3, [sp, #12]
 800580e:	4298      	cmp	r0, r3
 8005810:	bfb8      	it	lt
 8005812:	4618      	movlt	r0, r3
 8005814:	e7a4      	b.n	8005760 <_printf_i+0x168>
 8005816:	2301      	movs	r3, #1
 8005818:	4632      	mov	r2, r6
 800581a:	4649      	mov	r1, r9
 800581c:	4640      	mov	r0, r8
 800581e:	47d0      	blx	sl
 8005820:	3001      	adds	r0, #1
 8005822:	d09b      	beq.n	800575c <_printf_i+0x164>
 8005824:	3501      	adds	r5, #1
 8005826:	68e3      	ldr	r3, [r4, #12]
 8005828:	9903      	ldr	r1, [sp, #12]
 800582a:	1a5b      	subs	r3, r3, r1
 800582c:	42ab      	cmp	r3, r5
 800582e:	dcf2      	bgt.n	8005816 <_printf_i+0x21e>
 8005830:	e7eb      	b.n	800580a <_printf_i+0x212>
 8005832:	2500      	movs	r5, #0
 8005834:	f104 0619 	add.w	r6, r4, #25
 8005838:	e7f5      	b.n	8005826 <_printf_i+0x22e>
 800583a:	bf00      	nop
 800583c:	080098f6 	.word	0x080098f6
 8005840:	08009907 	.word	0x08009907

08005844 <_scanf_float>:
 8005844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005848:	b087      	sub	sp, #28
 800584a:	4617      	mov	r7, r2
 800584c:	9303      	str	r3, [sp, #12]
 800584e:	688b      	ldr	r3, [r1, #8]
 8005850:	1e5a      	subs	r2, r3, #1
 8005852:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005856:	bf83      	ittte	hi
 8005858:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800585c:	195b      	addhi	r3, r3, r5
 800585e:	9302      	strhi	r3, [sp, #8]
 8005860:	2300      	movls	r3, #0
 8005862:	bf86      	itte	hi
 8005864:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005868:	608b      	strhi	r3, [r1, #8]
 800586a:	9302      	strls	r3, [sp, #8]
 800586c:	680b      	ldr	r3, [r1, #0]
 800586e:	468b      	mov	fp, r1
 8005870:	2500      	movs	r5, #0
 8005872:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005876:	f84b 3b1c 	str.w	r3, [fp], #28
 800587a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800587e:	4680      	mov	r8, r0
 8005880:	460c      	mov	r4, r1
 8005882:	465e      	mov	r6, fp
 8005884:	46aa      	mov	sl, r5
 8005886:	46a9      	mov	r9, r5
 8005888:	9501      	str	r5, [sp, #4]
 800588a:	68a2      	ldr	r2, [r4, #8]
 800588c:	b152      	cbz	r2, 80058a4 <_scanf_float+0x60>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b4e      	cmp	r3, #78	; 0x4e
 8005894:	d864      	bhi.n	8005960 <_scanf_float+0x11c>
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d83c      	bhi.n	8005914 <_scanf_float+0xd0>
 800589a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800589e:	b2c8      	uxtb	r0, r1
 80058a0:	280e      	cmp	r0, #14
 80058a2:	d93a      	bls.n	800591a <_scanf_float+0xd6>
 80058a4:	f1b9 0f00 	cmp.w	r9, #0
 80058a8:	d003      	beq.n	80058b2 <_scanf_float+0x6e>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80058b6:	f1ba 0f01 	cmp.w	sl, #1
 80058ba:	f200 8113 	bhi.w	8005ae4 <_scanf_float+0x2a0>
 80058be:	455e      	cmp	r6, fp
 80058c0:	f200 8105 	bhi.w	8005ace <_scanf_float+0x28a>
 80058c4:	2501      	movs	r5, #1
 80058c6:	4628      	mov	r0, r5
 80058c8:	b007      	add	sp, #28
 80058ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80058d2:	2a0d      	cmp	r2, #13
 80058d4:	d8e6      	bhi.n	80058a4 <_scanf_float+0x60>
 80058d6:	a101      	add	r1, pc, #4	; (adr r1, 80058dc <_scanf_float+0x98>)
 80058d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80058dc:	08005a1b 	.word	0x08005a1b
 80058e0:	080058a5 	.word	0x080058a5
 80058e4:	080058a5 	.word	0x080058a5
 80058e8:	080058a5 	.word	0x080058a5
 80058ec:	08005a7b 	.word	0x08005a7b
 80058f0:	08005a53 	.word	0x08005a53
 80058f4:	080058a5 	.word	0x080058a5
 80058f8:	080058a5 	.word	0x080058a5
 80058fc:	08005a29 	.word	0x08005a29
 8005900:	080058a5 	.word	0x080058a5
 8005904:	080058a5 	.word	0x080058a5
 8005908:	080058a5 	.word	0x080058a5
 800590c:	080058a5 	.word	0x080058a5
 8005910:	080059e1 	.word	0x080059e1
 8005914:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005918:	e7db      	b.n	80058d2 <_scanf_float+0x8e>
 800591a:	290e      	cmp	r1, #14
 800591c:	d8c2      	bhi.n	80058a4 <_scanf_float+0x60>
 800591e:	a001      	add	r0, pc, #4	; (adr r0, 8005924 <_scanf_float+0xe0>)
 8005920:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005924:	080059d3 	.word	0x080059d3
 8005928:	080058a5 	.word	0x080058a5
 800592c:	080059d3 	.word	0x080059d3
 8005930:	08005a67 	.word	0x08005a67
 8005934:	080058a5 	.word	0x080058a5
 8005938:	08005981 	.word	0x08005981
 800593c:	080059bd 	.word	0x080059bd
 8005940:	080059bd 	.word	0x080059bd
 8005944:	080059bd 	.word	0x080059bd
 8005948:	080059bd 	.word	0x080059bd
 800594c:	080059bd 	.word	0x080059bd
 8005950:	080059bd 	.word	0x080059bd
 8005954:	080059bd 	.word	0x080059bd
 8005958:	080059bd 	.word	0x080059bd
 800595c:	080059bd 	.word	0x080059bd
 8005960:	2b6e      	cmp	r3, #110	; 0x6e
 8005962:	d809      	bhi.n	8005978 <_scanf_float+0x134>
 8005964:	2b60      	cmp	r3, #96	; 0x60
 8005966:	d8b2      	bhi.n	80058ce <_scanf_float+0x8a>
 8005968:	2b54      	cmp	r3, #84	; 0x54
 800596a:	d077      	beq.n	8005a5c <_scanf_float+0x218>
 800596c:	2b59      	cmp	r3, #89	; 0x59
 800596e:	d199      	bne.n	80058a4 <_scanf_float+0x60>
 8005970:	2d07      	cmp	r5, #7
 8005972:	d197      	bne.n	80058a4 <_scanf_float+0x60>
 8005974:	2508      	movs	r5, #8
 8005976:	e029      	b.n	80059cc <_scanf_float+0x188>
 8005978:	2b74      	cmp	r3, #116	; 0x74
 800597a:	d06f      	beq.n	8005a5c <_scanf_float+0x218>
 800597c:	2b79      	cmp	r3, #121	; 0x79
 800597e:	e7f6      	b.n	800596e <_scanf_float+0x12a>
 8005980:	6821      	ldr	r1, [r4, #0]
 8005982:	05c8      	lsls	r0, r1, #23
 8005984:	d51a      	bpl.n	80059bc <_scanf_float+0x178>
 8005986:	9b02      	ldr	r3, [sp, #8]
 8005988:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800598c:	6021      	str	r1, [r4, #0]
 800598e:	f109 0901 	add.w	r9, r9, #1
 8005992:	b11b      	cbz	r3, 800599c <_scanf_float+0x158>
 8005994:	3b01      	subs	r3, #1
 8005996:	3201      	adds	r2, #1
 8005998:	9302      	str	r3, [sp, #8]
 800599a:	60a2      	str	r2, [r4, #8]
 800599c:	68a3      	ldr	r3, [r4, #8]
 800599e:	3b01      	subs	r3, #1
 80059a0:	60a3      	str	r3, [r4, #8]
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	3301      	adds	r3, #1
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	f340 8084 	ble.w	8005abc <_scanf_float+0x278>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	3301      	adds	r3, #1
 80059b8:	603b      	str	r3, [r7, #0]
 80059ba:	e766      	b.n	800588a <_scanf_float+0x46>
 80059bc:	eb1a 0f05 	cmn.w	sl, r5
 80059c0:	f47f af70 	bne.w	80058a4 <_scanf_float+0x60>
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	f806 3b01 	strb.w	r3, [r6], #1
 80059d0:	e7e4      	b.n	800599c <_scanf_float+0x158>
 80059d2:	6822      	ldr	r2, [r4, #0]
 80059d4:	0610      	lsls	r0, r2, #24
 80059d6:	f57f af65 	bpl.w	80058a4 <_scanf_float+0x60>
 80059da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059de:	e7f4      	b.n	80059ca <_scanf_float+0x186>
 80059e0:	f1ba 0f00 	cmp.w	sl, #0
 80059e4:	d10e      	bne.n	8005a04 <_scanf_float+0x1c0>
 80059e6:	f1b9 0f00 	cmp.w	r9, #0
 80059ea:	d10e      	bne.n	8005a0a <_scanf_float+0x1c6>
 80059ec:	6822      	ldr	r2, [r4, #0]
 80059ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80059f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80059f6:	d108      	bne.n	8005a0a <_scanf_float+0x1c6>
 80059f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80059fc:	6022      	str	r2, [r4, #0]
 80059fe:	f04f 0a01 	mov.w	sl, #1
 8005a02:	e7e3      	b.n	80059cc <_scanf_float+0x188>
 8005a04:	f1ba 0f02 	cmp.w	sl, #2
 8005a08:	d055      	beq.n	8005ab6 <_scanf_float+0x272>
 8005a0a:	2d01      	cmp	r5, #1
 8005a0c:	d002      	beq.n	8005a14 <_scanf_float+0x1d0>
 8005a0e:	2d04      	cmp	r5, #4
 8005a10:	f47f af48 	bne.w	80058a4 <_scanf_float+0x60>
 8005a14:	3501      	adds	r5, #1
 8005a16:	b2ed      	uxtb	r5, r5
 8005a18:	e7d8      	b.n	80059cc <_scanf_float+0x188>
 8005a1a:	f1ba 0f01 	cmp.w	sl, #1
 8005a1e:	f47f af41 	bne.w	80058a4 <_scanf_float+0x60>
 8005a22:	f04f 0a02 	mov.w	sl, #2
 8005a26:	e7d1      	b.n	80059cc <_scanf_float+0x188>
 8005a28:	b97d      	cbnz	r5, 8005a4a <_scanf_float+0x206>
 8005a2a:	f1b9 0f00 	cmp.w	r9, #0
 8005a2e:	f47f af3c 	bne.w	80058aa <_scanf_float+0x66>
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005a38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005a3c:	f47f af39 	bne.w	80058b2 <_scanf_float+0x6e>
 8005a40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a44:	6022      	str	r2, [r4, #0]
 8005a46:	2501      	movs	r5, #1
 8005a48:	e7c0      	b.n	80059cc <_scanf_float+0x188>
 8005a4a:	2d03      	cmp	r5, #3
 8005a4c:	d0e2      	beq.n	8005a14 <_scanf_float+0x1d0>
 8005a4e:	2d05      	cmp	r5, #5
 8005a50:	e7de      	b.n	8005a10 <_scanf_float+0x1cc>
 8005a52:	2d02      	cmp	r5, #2
 8005a54:	f47f af26 	bne.w	80058a4 <_scanf_float+0x60>
 8005a58:	2503      	movs	r5, #3
 8005a5a:	e7b7      	b.n	80059cc <_scanf_float+0x188>
 8005a5c:	2d06      	cmp	r5, #6
 8005a5e:	f47f af21 	bne.w	80058a4 <_scanf_float+0x60>
 8005a62:	2507      	movs	r5, #7
 8005a64:	e7b2      	b.n	80059cc <_scanf_float+0x188>
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	0591      	lsls	r1, r2, #22
 8005a6a:	f57f af1b 	bpl.w	80058a4 <_scanf_float+0x60>
 8005a6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005a72:	6022      	str	r2, [r4, #0]
 8005a74:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a78:	e7a8      	b.n	80059cc <_scanf_float+0x188>
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005a80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005a84:	d006      	beq.n	8005a94 <_scanf_float+0x250>
 8005a86:	0550      	lsls	r0, r2, #21
 8005a88:	f57f af0c 	bpl.w	80058a4 <_scanf_float+0x60>
 8005a8c:	f1b9 0f00 	cmp.w	r9, #0
 8005a90:	f43f af0f 	beq.w	80058b2 <_scanf_float+0x6e>
 8005a94:	0591      	lsls	r1, r2, #22
 8005a96:	bf58      	it	pl
 8005a98:	9901      	ldrpl	r1, [sp, #4]
 8005a9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a9e:	bf58      	it	pl
 8005aa0:	eba9 0101 	subpl.w	r1, r9, r1
 8005aa4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005aa8:	bf58      	it	pl
 8005aaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005aae:	6022      	str	r2, [r4, #0]
 8005ab0:	f04f 0900 	mov.w	r9, #0
 8005ab4:	e78a      	b.n	80059cc <_scanf_float+0x188>
 8005ab6:	f04f 0a03 	mov.w	sl, #3
 8005aba:	e787      	b.n	80059cc <_scanf_float+0x188>
 8005abc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4798      	blx	r3
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	f43f aedf 	beq.w	800588a <_scanf_float+0x46>
 8005acc:	e6ea      	b.n	80058a4 <_scanf_float+0x60>
 8005ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ad2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ad6:	463a      	mov	r2, r7
 8005ad8:	4640      	mov	r0, r8
 8005ada:	4798      	blx	r3
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	6123      	str	r3, [r4, #16]
 8005ae2:	e6ec      	b.n	80058be <_scanf_float+0x7a>
 8005ae4:	1e6b      	subs	r3, r5, #1
 8005ae6:	2b06      	cmp	r3, #6
 8005ae8:	d825      	bhi.n	8005b36 <_scanf_float+0x2f2>
 8005aea:	2d02      	cmp	r5, #2
 8005aec:	d836      	bhi.n	8005b5c <_scanf_float+0x318>
 8005aee:	455e      	cmp	r6, fp
 8005af0:	f67f aee8 	bls.w	80058c4 <_scanf_float+0x80>
 8005af4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005af8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005afc:	463a      	mov	r2, r7
 8005afe:	4640      	mov	r0, r8
 8005b00:	4798      	blx	r3
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	6123      	str	r3, [r4, #16]
 8005b08:	e7f1      	b.n	8005aee <_scanf_float+0x2aa>
 8005b0a:	9802      	ldr	r0, [sp, #8]
 8005b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005b14:	9002      	str	r0, [sp, #8]
 8005b16:	463a      	mov	r2, r7
 8005b18:	4640      	mov	r0, r8
 8005b1a:	4798      	blx	r3
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	6123      	str	r3, [r4, #16]
 8005b22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b26:	fa5f fa8a 	uxtb.w	sl, sl
 8005b2a:	f1ba 0f02 	cmp.w	sl, #2
 8005b2e:	d1ec      	bne.n	8005b0a <_scanf_float+0x2c6>
 8005b30:	3d03      	subs	r5, #3
 8005b32:	b2ed      	uxtb	r5, r5
 8005b34:	1b76      	subs	r6, r6, r5
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	05da      	lsls	r2, r3, #23
 8005b3a:	d52f      	bpl.n	8005b9c <_scanf_float+0x358>
 8005b3c:	055b      	lsls	r3, r3, #21
 8005b3e:	d510      	bpl.n	8005b62 <_scanf_float+0x31e>
 8005b40:	455e      	cmp	r6, fp
 8005b42:	f67f aebf 	bls.w	80058c4 <_scanf_float+0x80>
 8005b46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b4e:	463a      	mov	r2, r7
 8005b50:	4640      	mov	r0, r8
 8005b52:	4798      	blx	r3
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	e7f1      	b.n	8005b40 <_scanf_float+0x2fc>
 8005b5c:	46aa      	mov	sl, r5
 8005b5e:	9602      	str	r6, [sp, #8]
 8005b60:	e7df      	b.n	8005b22 <_scanf_float+0x2de>
 8005b62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	2965      	cmp	r1, #101	; 0x65
 8005b6a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005b6e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005b72:	6123      	str	r3, [r4, #16]
 8005b74:	d00c      	beq.n	8005b90 <_scanf_float+0x34c>
 8005b76:	2945      	cmp	r1, #69	; 0x45
 8005b78:	d00a      	beq.n	8005b90 <_scanf_float+0x34c>
 8005b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b7e:	463a      	mov	r2, r7
 8005b80:	4640      	mov	r0, r8
 8005b82:	4798      	blx	r3
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	1eb5      	subs	r5, r6, #2
 8005b8e:	6123      	str	r3, [r4, #16]
 8005b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b94:	463a      	mov	r2, r7
 8005b96:	4640      	mov	r0, r8
 8005b98:	4798      	blx	r3
 8005b9a:	462e      	mov	r6, r5
 8005b9c:	6825      	ldr	r5, [r4, #0]
 8005b9e:	f015 0510 	ands.w	r5, r5, #16
 8005ba2:	d159      	bne.n	8005c58 <_scanf_float+0x414>
 8005ba4:	7035      	strb	r5, [r6, #0]
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb0:	d11b      	bne.n	8005bea <_scanf_float+0x3a6>
 8005bb2:	9b01      	ldr	r3, [sp, #4]
 8005bb4:	454b      	cmp	r3, r9
 8005bb6:	eba3 0209 	sub.w	r2, r3, r9
 8005bba:	d123      	bne.n	8005c04 <_scanf_float+0x3c0>
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4659      	mov	r1, fp
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	f000 fe97 	bl	80068f4 <_strtod_r>
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	9b03      	ldr	r3, [sp, #12]
 8005bca:	f012 0f02 	tst.w	r2, #2
 8005bce:	ec57 6b10 	vmov	r6, r7, d0
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	d021      	beq.n	8005c1a <_scanf_float+0x3d6>
 8005bd6:	9903      	ldr	r1, [sp, #12]
 8005bd8:	1d1a      	adds	r2, r3, #4
 8005bda:	600a      	str	r2, [r1, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	e9c3 6700 	strd	r6, r7, [r3]
 8005be2:	68e3      	ldr	r3, [r4, #12]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60e3      	str	r3, [r4, #12]
 8005be8:	e66d      	b.n	80058c6 <_scanf_float+0x82>
 8005bea:	9b04      	ldr	r3, [sp, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0e5      	beq.n	8005bbc <_scanf_float+0x378>
 8005bf0:	9905      	ldr	r1, [sp, #20]
 8005bf2:	230a      	movs	r3, #10
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	3101      	adds	r1, #1
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	f000 ff03 	bl	8006a04 <_strtol_r>
 8005bfe:	9b04      	ldr	r3, [sp, #16]
 8005c00:	9e05      	ldr	r6, [sp, #20]
 8005c02:	1ac2      	subs	r2, r0, r3
 8005c04:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005c08:	429e      	cmp	r6, r3
 8005c0a:	bf28      	it	cs
 8005c0c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005c10:	4912      	ldr	r1, [pc, #72]	; (8005c5c <_scanf_float+0x418>)
 8005c12:	4630      	mov	r0, r6
 8005c14:	f000 f82c 	bl	8005c70 <siprintf>
 8005c18:	e7d0      	b.n	8005bbc <_scanf_float+0x378>
 8005c1a:	9903      	ldr	r1, [sp, #12]
 8005c1c:	f012 0f04 	tst.w	r2, #4
 8005c20:	f103 0204 	add.w	r2, r3, #4
 8005c24:	600a      	str	r2, [r1, #0]
 8005c26:	d1d9      	bne.n	8005bdc <_scanf_float+0x398>
 8005c28:	f8d3 8000 	ldr.w	r8, [r3]
 8005c2c:	ee10 2a10 	vmov	r2, s0
 8005c30:	ee10 0a10 	vmov	r0, s0
 8005c34:	463b      	mov	r3, r7
 8005c36:	4639      	mov	r1, r7
 8005c38:	f7fa ff78 	bl	8000b2c <__aeabi_dcmpun>
 8005c3c:	b128      	cbz	r0, 8005c4a <_scanf_float+0x406>
 8005c3e:	4808      	ldr	r0, [pc, #32]	; (8005c60 <_scanf_float+0x41c>)
 8005c40:	f000 f810 	bl	8005c64 <nanf>
 8005c44:	ed88 0a00 	vstr	s0, [r8]
 8005c48:	e7cb      	b.n	8005be2 <_scanf_float+0x39e>
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	f7fa ffcb 	bl	8000be8 <__aeabi_d2f>
 8005c52:	f8c8 0000 	str.w	r0, [r8]
 8005c56:	e7c4      	b.n	8005be2 <_scanf_float+0x39e>
 8005c58:	2500      	movs	r5, #0
 8005c5a:	e634      	b.n	80058c6 <_scanf_float+0x82>
 8005c5c:	08009918 	.word	0x08009918
 8005c60:	08009d20 	.word	0x08009d20

08005c64 <nanf>:
 8005c64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005c6c <nanf+0x8>
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	7fc00000 	.word	0x7fc00000

08005c70 <siprintf>:
 8005c70:	b40e      	push	{r1, r2, r3}
 8005c72:	b500      	push	{lr}
 8005c74:	b09c      	sub	sp, #112	; 0x70
 8005c76:	ab1d      	add	r3, sp, #116	; 0x74
 8005c78:	9002      	str	r0, [sp, #8]
 8005c7a:	9006      	str	r0, [sp, #24]
 8005c7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c80:	4809      	ldr	r0, [pc, #36]	; (8005ca8 <siprintf+0x38>)
 8005c82:	9107      	str	r1, [sp, #28]
 8005c84:	9104      	str	r1, [sp, #16]
 8005c86:	4909      	ldr	r1, [pc, #36]	; (8005cac <siprintf+0x3c>)
 8005c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c8c:	9105      	str	r1, [sp, #20]
 8005c8e:	6800      	ldr	r0, [r0, #0]
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	a902      	add	r1, sp, #8
 8005c94:	f002 fee2 	bl	8008a5c <_svfiprintf_r>
 8005c98:	9b02      	ldr	r3, [sp, #8]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	b01c      	add	sp, #112	; 0x70
 8005ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ca4:	b003      	add	sp, #12
 8005ca6:	4770      	bx	lr
 8005ca8:	20000024 	.word	0x20000024
 8005cac:	ffff0208 	.word	0xffff0208

08005cb0 <sulp>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	460d      	mov	r5, r1
 8005cb6:	ec45 4b10 	vmov	d0, r4, r5
 8005cba:	4616      	mov	r6, r2
 8005cbc:	f002 fc2c 	bl	8008518 <__ulp>
 8005cc0:	ec51 0b10 	vmov	r0, r1, d0
 8005cc4:	b17e      	cbz	r6, 8005ce6 <sulp+0x36>
 8005cc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005cca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dd09      	ble.n	8005ce6 <sulp+0x36>
 8005cd2:	051b      	lsls	r3, r3, #20
 8005cd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005cd8:	2400      	movs	r4, #0
 8005cda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005cde:	4622      	mov	r2, r4
 8005ce0:	462b      	mov	r3, r5
 8005ce2:	f7fa fc89 	bl	80005f8 <__aeabi_dmul>
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}

08005ce8 <_strtod_l>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	ed2d 8b02 	vpush	{d8}
 8005cf0:	b09d      	sub	sp, #116	; 0x74
 8005cf2:	461f      	mov	r7, r3
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9318      	str	r3, [sp, #96]	; 0x60
 8005cf8:	4ba2      	ldr	r3, [pc, #648]	; (8005f84 <_strtod_l+0x29c>)
 8005cfa:	9213      	str	r2, [sp, #76]	; 0x4c
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	9305      	str	r3, [sp, #20]
 8005d00:	4604      	mov	r4, r0
 8005d02:	4618      	mov	r0, r3
 8005d04:	4688      	mov	r8, r1
 8005d06:	f7fa fa63 	bl	80001d0 <strlen>
 8005d0a:	f04f 0a00 	mov.w	sl, #0
 8005d0e:	4605      	mov	r5, r0
 8005d10:	f04f 0b00 	mov.w	fp, #0
 8005d14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005d18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	2a2b      	cmp	r2, #43	; 0x2b
 8005d1e:	d04e      	beq.n	8005dbe <_strtod_l+0xd6>
 8005d20:	d83b      	bhi.n	8005d9a <_strtod_l+0xb2>
 8005d22:	2a0d      	cmp	r2, #13
 8005d24:	d834      	bhi.n	8005d90 <_strtod_l+0xa8>
 8005d26:	2a08      	cmp	r2, #8
 8005d28:	d834      	bhi.n	8005d94 <_strtod_l+0xac>
 8005d2a:	2a00      	cmp	r2, #0
 8005d2c:	d03e      	beq.n	8005dac <_strtod_l+0xc4>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	930a      	str	r3, [sp, #40]	; 0x28
 8005d32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005d34:	7833      	ldrb	r3, [r6, #0]
 8005d36:	2b30      	cmp	r3, #48	; 0x30
 8005d38:	f040 80b0 	bne.w	8005e9c <_strtod_l+0x1b4>
 8005d3c:	7873      	ldrb	r3, [r6, #1]
 8005d3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d42:	2b58      	cmp	r3, #88	; 0x58
 8005d44:	d168      	bne.n	8005e18 <_strtod_l+0x130>
 8005d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	ab18      	add	r3, sp, #96	; 0x60
 8005d4c:	9702      	str	r7, [sp, #8]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	4a8d      	ldr	r2, [pc, #564]	; (8005f88 <_strtod_l+0x2a0>)
 8005d52:	ab19      	add	r3, sp, #100	; 0x64
 8005d54:	a917      	add	r1, sp, #92	; 0x5c
 8005d56:	4620      	mov	r0, r4
 8005d58:	f001 fd38 	bl	80077cc <__gethex>
 8005d5c:	f010 0707 	ands.w	r7, r0, #7
 8005d60:	4605      	mov	r5, r0
 8005d62:	d005      	beq.n	8005d70 <_strtod_l+0x88>
 8005d64:	2f06      	cmp	r7, #6
 8005d66:	d12c      	bne.n	8005dc2 <_strtod_l+0xda>
 8005d68:	3601      	adds	r6, #1
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9617      	str	r6, [sp, #92]	; 0x5c
 8005d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f040 8590 	bne.w	8006898 <_strtod_l+0xbb0>
 8005d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d7a:	b1eb      	cbz	r3, 8005db8 <_strtod_l+0xd0>
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d82:	ec43 2b10 	vmov	d0, r2, r3
 8005d86:	b01d      	add	sp, #116	; 0x74
 8005d88:	ecbd 8b02 	vpop	{d8}
 8005d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d90:	2a20      	cmp	r2, #32
 8005d92:	d1cc      	bne.n	8005d2e <_strtod_l+0x46>
 8005d94:	3301      	adds	r3, #1
 8005d96:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d98:	e7be      	b.n	8005d18 <_strtod_l+0x30>
 8005d9a:	2a2d      	cmp	r2, #45	; 0x2d
 8005d9c:	d1c7      	bne.n	8005d2e <_strtod_l+0x46>
 8005d9e:	2201      	movs	r2, #1
 8005da0:	920a      	str	r2, [sp, #40]	; 0x28
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1c2      	bne.n	8005d32 <_strtod_l+0x4a>
 8005dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005dae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f040 856e 	bne.w	8006894 <_strtod_l+0xbac>
 8005db8:	4652      	mov	r2, sl
 8005dba:	465b      	mov	r3, fp
 8005dbc:	e7e1      	b.n	8005d82 <_strtod_l+0x9a>
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	e7ee      	b.n	8005da0 <_strtod_l+0xb8>
 8005dc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005dc4:	b13a      	cbz	r2, 8005dd6 <_strtod_l+0xee>
 8005dc6:	2135      	movs	r1, #53	; 0x35
 8005dc8:	a81a      	add	r0, sp, #104	; 0x68
 8005dca:	f002 fcb0 	bl	800872e <__copybits>
 8005dce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f002 f86f 	bl	8007eb4 <_Bfree>
 8005dd6:	3f01      	subs	r7, #1
 8005dd8:	2f04      	cmp	r7, #4
 8005dda:	d806      	bhi.n	8005dea <_strtod_l+0x102>
 8005ddc:	e8df f007 	tbb	[pc, r7]
 8005de0:	1714030a 	.word	0x1714030a
 8005de4:	0a          	.byte	0x0a
 8005de5:	00          	.byte	0x00
 8005de6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005dea:	0728      	lsls	r0, r5, #28
 8005dec:	d5c0      	bpl.n	8005d70 <_strtod_l+0x88>
 8005dee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005df2:	e7bd      	b.n	8005d70 <_strtod_l+0x88>
 8005df4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005df8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005dfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005dfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005e02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005e06:	e7f0      	b.n	8005dea <_strtod_l+0x102>
 8005e08:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005f8c <_strtod_l+0x2a4>
 8005e0c:	e7ed      	b.n	8005dea <_strtod_l+0x102>
 8005e0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005e12:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005e16:	e7e8      	b.n	8005dea <_strtod_l+0x102>
 8005e18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b30      	cmp	r3, #48	; 0x30
 8005e22:	d0f9      	beq.n	8005e18 <_strtod_l+0x130>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0a3      	beq.n	8005d70 <_strtod_l+0x88>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f04f 0900 	mov.w	r9, #0
 8005e2e:	9304      	str	r3, [sp, #16]
 8005e30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e32:	9308      	str	r3, [sp, #32]
 8005e34:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e38:	464f      	mov	r7, r9
 8005e3a:	220a      	movs	r2, #10
 8005e3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005e3e:	7806      	ldrb	r6, [r0, #0]
 8005e40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005e44:	b2d9      	uxtb	r1, r3
 8005e46:	2909      	cmp	r1, #9
 8005e48:	d92a      	bls.n	8005ea0 <_strtod_l+0x1b8>
 8005e4a:	9905      	ldr	r1, [sp, #20]
 8005e4c:	462a      	mov	r2, r5
 8005e4e:	f002 ff1f 	bl	8008c90 <strncmp>
 8005e52:	b398      	cbz	r0, 8005ebc <_strtod_l+0x1d4>
 8005e54:	2000      	movs	r0, #0
 8005e56:	4632      	mov	r2, r6
 8005e58:	463d      	mov	r5, r7
 8005e5a:	9005      	str	r0, [sp, #20]
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2a65      	cmp	r2, #101	; 0x65
 8005e60:	d001      	beq.n	8005e66 <_strtod_l+0x17e>
 8005e62:	2a45      	cmp	r2, #69	; 0x45
 8005e64:	d118      	bne.n	8005e98 <_strtod_l+0x1b0>
 8005e66:	b91d      	cbnz	r5, 8005e70 <_strtod_l+0x188>
 8005e68:	9a04      	ldr	r2, [sp, #16]
 8005e6a:	4302      	orrs	r2, r0
 8005e6c:	d09e      	beq.n	8005dac <_strtod_l+0xc4>
 8005e6e:	2500      	movs	r5, #0
 8005e70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005e74:	f108 0201 	add.w	r2, r8, #1
 8005e78:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005e7e:	2a2b      	cmp	r2, #43	; 0x2b
 8005e80:	d075      	beq.n	8005f6e <_strtod_l+0x286>
 8005e82:	2a2d      	cmp	r2, #45	; 0x2d
 8005e84:	d07b      	beq.n	8005f7e <_strtod_l+0x296>
 8005e86:	f04f 0c00 	mov.w	ip, #0
 8005e8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005e8e:	2909      	cmp	r1, #9
 8005e90:	f240 8082 	bls.w	8005f98 <_strtod_l+0x2b0>
 8005e94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005e98:	2600      	movs	r6, #0
 8005e9a:	e09d      	b.n	8005fd8 <_strtod_l+0x2f0>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e7c4      	b.n	8005e2a <_strtod_l+0x142>
 8005ea0:	2f08      	cmp	r7, #8
 8005ea2:	bfd8      	it	le
 8005ea4:	9907      	ldrle	r1, [sp, #28]
 8005ea6:	f100 0001 	add.w	r0, r0, #1
 8005eaa:	bfda      	itte	le
 8005eac:	fb02 3301 	mlale	r3, r2, r1, r3
 8005eb0:	9307      	strle	r3, [sp, #28]
 8005eb2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005eb6:	3701      	adds	r7, #1
 8005eb8:	9017      	str	r0, [sp, #92]	; 0x5c
 8005eba:	e7bf      	b.n	8005e3c <_strtod_l+0x154>
 8005ebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ebe:	195a      	adds	r2, r3, r5
 8005ec0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ec2:	5d5a      	ldrb	r2, [r3, r5]
 8005ec4:	2f00      	cmp	r7, #0
 8005ec6:	d037      	beq.n	8005f38 <_strtod_l+0x250>
 8005ec8:	9005      	str	r0, [sp, #20]
 8005eca:	463d      	mov	r5, r7
 8005ecc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005ed0:	2b09      	cmp	r3, #9
 8005ed2:	d912      	bls.n	8005efa <_strtod_l+0x212>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e7c2      	b.n	8005e5e <_strtod_l+0x176>
 8005ed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ede:	785a      	ldrb	r2, [r3, #1]
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	2a30      	cmp	r2, #48	; 0x30
 8005ee4:	d0f8      	beq.n	8005ed8 <_strtod_l+0x1f0>
 8005ee6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	f200 84d9 	bhi.w	80068a2 <_strtod_l+0xbba>
 8005ef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ef2:	9005      	str	r0, [sp, #20]
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	9308      	str	r3, [sp, #32]
 8005ef8:	4605      	mov	r5, r0
 8005efa:	3a30      	subs	r2, #48	; 0x30
 8005efc:	f100 0301 	add.w	r3, r0, #1
 8005f00:	d014      	beq.n	8005f2c <_strtod_l+0x244>
 8005f02:	9905      	ldr	r1, [sp, #20]
 8005f04:	4419      	add	r1, r3
 8005f06:	9105      	str	r1, [sp, #20]
 8005f08:	462b      	mov	r3, r5
 8005f0a:	eb00 0e05 	add.w	lr, r0, r5
 8005f0e:	210a      	movs	r1, #10
 8005f10:	4573      	cmp	r3, lr
 8005f12:	d113      	bne.n	8005f3c <_strtod_l+0x254>
 8005f14:	182b      	adds	r3, r5, r0
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	f105 0501 	add.w	r5, r5, #1
 8005f1c:	4405      	add	r5, r0
 8005f1e:	dc1c      	bgt.n	8005f5a <_strtod_l+0x272>
 8005f20:	9907      	ldr	r1, [sp, #28]
 8005f22:	230a      	movs	r3, #10
 8005f24:	fb03 2301 	mla	r3, r3, r1, r2
 8005f28:	9307      	str	r3, [sp, #28]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f2e:	1c51      	adds	r1, r2, #1
 8005f30:	9117      	str	r1, [sp, #92]	; 0x5c
 8005f32:	7852      	ldrb	r2, [r2, #1]
 8005f34:	4618      	mov	r0, r3
 8005f36:	e7c9      	b.n	8005ecc <_strtod_l+0x1e4>
 8005f38:	4638      	mov	r0, r7
 8005f3a:	e7d2      	b.n	8005ee2 <_strtod_l+0x1fa>
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	dc04      	bgt.n	8005f4a <_strtod_l+0x262>
 8005f40:	9e07      	ldr	r6, [sp, #28]
 8005f42:	434e      	muls	r6, r1
 8005f44:	9607      	str	r6, [sp, #28]
 8005f46:	3301      	adds	r3, #1
 8005f48:	e7e2      	b.n	8005f10 <_strtod_l+0x228>
 8005f4a:	f103 0c01 	add.w	ip, r3, #1
 8005f4e:	f1bc 0f10 	cmp.w	ip, #16
 8005f52:	bfd8      	it	le
 8005f54:	fb01 f909 	mulle.w	r9, r1, r9
 8005f58:	e7f5      	b.n	8005f46 <_strtod_l+0x25e>
 8005f5a:	2d10      	cmp	r5, #16
 8005f5c:	bfdc      	itt	le
 8005f5e:	230a      	movle	r3, #10
 8005f60:	fb03 2909 	mlale	r9, r3, r9, r2
 8005f64:	e7e1      	b.n	8005f2a <_strtod_l+0x242>
 8005f66:	2300      	movs	r3, #0
 8005f68:	9305      	str	r3, [sp, #20]
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e77c      	b.n	8005e68 <_strtod_l+0x180>
 8005f6e:	f04f 0c00 	mov.w	ip, #0
 8005f72:	f108 0202 	add.w	r2, r8, #2
 8005f76:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f78:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005f7c:	e785      	b.n	8005e8a <_strtod_l+0x1a2>
 8005f7e:	f04f 0c01 	mov.w	ip, #1
 8005f82:	e7f6      	b.n	8005f72 <_strtod_l+0x28a>
 8005f84:	08009b68 	.word	0x08009b68
 8005f88:	08009920 	.word	0x08009920
 8005f8c:	7ff00000 	.word	0x7ff00000
 8005f90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f92:	1c51      	adds	r1, r2, #1
 8005f94:	9117      	str	r1, [sp, #92]	; 0x5c
 8005f96:	7852      	ldrb	r2, [r2, #1]
 8005f98:	2a30      	cmp	r2, #48	; 0x30
 8005f9a:	d0f9      	beq.n	8005f90 <_strtod_l+0x2a8>
 8005f9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005fa0:	2908      	cmp	r1, #8
 8005fa2:	f63f af79 	bhi.w	8005e98 <_strtod_l+0x1b0>
 8005fa6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005faa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005fac:	9206      	str	r2, [sp, #24]
 8005fae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005fb0:	1c51      	adds	r1, r2, #1
 8005fb2:	9117      	str	r1, [sp, #92]	; 0x5c
 8005fb4:	7852      	ldrb	r2, [r2, #1]
 8005fb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005fba:	2e09      	cmp	r6, #9
 8005fbc:	d937      	bls.n	800602e <_strtod_l+0x346>
 8005fbe:	9e06      	ldr	r6, [sp, #24]
 8005fc0:	1b89      	subs	r1, r1, r6
 8005fc2:	2908      	cmp	r1, #8
 8005fc4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005fc8:	dc02      	bgt.n	8005fd0 <_strtod_l+0x2e8>
 8005fca:	4576      	cmp	r6, lr
 8005fcc:	bfa8      	it	ge
 8005fce:	4676      	movge	r6, lr
 8005fd0:	f1bc 0f00 	cmp.w	ip, #0
 8005fd4:	d000      	beq.n	8005fd8 <_strtod_l+0x2f0>
 8005fd6:	4276      	negs	r6, r6
 8005fd8:	2d00      	cmp	r5, #0
 8005fda:	d14d      	bne.n	8006078 <_strtod_l+0x390>
 8005fdc:	9904      	ldr	r1, [sp, #16]
 8005fde:	4301      	orrs	r1, r0
 8005fe0:	f47f aec6 	bne.w	8005d70 <_strtod_l+0x88>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f47f aee1 	bne.w	8005dac <_strtod_l+0xc4>
 8005fea:	2a69      	cmp	r2, #105	; 0x69
 8005fec:	d027      	beq.n	800603e <_strtod_l+0x356>
 8005fee:	dc24      	bgt.n	800603a <_strtod_l+0x352>
 8005ff0:	2a49      	cmp	r2, #73	; 0x49
 8005ff2:	d024      	beq.n	800603e <_strtod_l+0x356>
 8005ff4:	2a4e      	cmp	r2, #78	; 0x4e
 8005ff6:	f47f aed9 	bne.w	8005dac <_strtod_l+0xc4>
 8005ffa:	499f      	ldr	r1, [pc, #636]	; (8006278 <_strtod_l+0x590>)
 8005ffc:	a817      	add	r0, sp, #92	; 0x5c
 8005ffe:	f001 fe3d 	bl	8007c7c <__match>
 8006002:	2800      	cmp	r0, #0
 8006004:	f43f aed2 	beq.w	8005dac <_strtod_l+0xc4>
 8006008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b28      	cmp	r3, #40	; 0x28
 800600e:	d12d      	bne.n	800606c <_strtod_l+0x384>
 8006010:	499a      	ldr	r1, [pc, #616]	; (800627c <_strtod_l+0x594>)
 8006012:	aa1a      	add	r2, sp, #104	; 0x68
 8006014:	a817      	add	r0, sp, #92	; 0x5c
 8006016:	f001 fe45 	bl	8007ca4 <__hexnan>
 800601a:	2805      	cmp	r0, #5
 800601c:	d126      	bne.n	800606c <_strtod_l+0x384>
 800601e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006020:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006024:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006028:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800602c:	e6a0      	b.n	8005d70 <_strtod_l+0x88>
 800602e:	210a      	movs	r1, #10
 8006030:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006034:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006038:	e7b9      	b.n	8005fae <_strtod_l+0x2c6>
 800603a:	2a6e      	cmp	r2, #110	; 0x6e
 800603c:	e7db      	b.n	8005ff6 <_strtod_l+0x30e>
 800603e:	4990      	ldr	r1, [pc, #576]	; (8006280 <_strtod_l+0x598>)
 8006040:	a817      	add	r0, sp, #92	; 0x5c
 8006042:	f001 fe1b 	bl	8007c7c <__match>
 8006046:	2800      	cmp	r0, #0
 8006048:	f43f aeb0 	beq.w	8005dac <_strtod_l+0xc4>
 800604c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800604e:	498d      	ldr	r1, [pc, #564]	; (8006284 <_strtod_l+0x59c>)
 8006050:	3b01      	subs	r3, #1
 8006052:	a817      	add	r0, sp, #92	; 0x5c
 8006054:	9317      	str	r3, [sp, #92]	; 0x5c
 8006056:	f001 fe11 	bl	8007c7c <__match>
 800605a:	b910      	cbnz	r0, 8006062 <_strtod_l+0x37a>
 800605c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800605e:	3301      	adds	r3, #1
 8006060:	9317      	str	r3, [sp, #92]	; 0x5c
 8006062:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006294 <_strtod_l+0x5ac>
 8006066:	f04f 0a00 	mov.w	sl, #0
 800606a:	e681      	b.n	8005d70 <_strtod_l+0x88>
 800606c:	4886      	ldr	r0, [pc, #536]	; (8006288 <_strtod_l+0x5a0>)
 800606e:	f002 fdf7 	bl	8008c60 <nan>
 8006072:	ec5b ab10 	vmov	sl, fp, d0
 8006076:	e67b      	b.n	8005d70 <_strtod_l+0x88>
 8006078:	9b05      	ldr	r3, [sp, #20]
 800607a:	9807      	ldr	r0, [sp, #28]
 800607c:	1af3      	subs	r3, r6, r3
 800607e:	2f00      	cmp	r7, #0
 8006080:	bf08      	it	eq
 8006082:	462f      	moveq	r7, r5
 8006084:	2d10      	cmp	r5, #16
 8006086:	9306      	str	r3, [sp, #24]
 8006088:	46a8      	mov	r8, r5
 800608a:	bfa8      	it	ge
 800608c:	f04f 0810 	movge.w	r8, #16
 8006090:	f7fa fa38 	bl	8000504 <__aeabi_ui2d>
 8006094:	2d09      	cmp	r5, #9
 8006096:	4682      	mov	sl, r0
 8006098:	468b      	mov	fp, r1
 800609a:	dd13      	ble.n	80060c4 <_strtod_l+0x3dc>
 800609c:	4b7b      	ldr	r3, [pc, #492]	; (800628c <_strtod_l+0x5a4>)
 800609e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80060a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80060a6:	f7fa faa7 	bl	80005f8 <__aeabi_dmul>
 80060aa:	4682      	mov	sl, r0
 80060ac:	4648      	mov	r0, r9
 80060ae:	468b      	mov	fp, r1
 80060b0:	f7fa fa28 	bl	8000504 <__aeabi_ui2d>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4650      	mov	r0, sl
 80060ba:	4659      	mov	r1, fp
 80060bc:	f7fa f8e6 	bl	800028c <__adddf3>
 80060c0:	4682      	mov	sl, r0
 80060c2:	468b      	mov	fp, r1
 80060c4:	2d0f      	cmp	r5, #15
 80060c6:	dc38      	bgt.n	800613a <_strtod_l+0x452>
 80060c8:	9b06      	ldr	r3, [sp, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f43f ae50 	beq.w	8005d70 <_strtod_l+0x88>
 80060d0:	dd24      	ble.n	800611c <_strtod_l+0x434>
 80060d2:	2b16      	cmp	r3, #22
 80060d4:	dc0b      	bgt.n	80060ee <_strtod_l+0x406>
 80060d6:	496d      	ldr	r1, [pc, #436]	; (800628c <_strtod_l+0x5a4>)
 80060d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060e0:	4652      	mov	r2, sl
 80060e2:	465b      	mov	r3, fp
 80060e4:	f7fa fa88 	bl	80005f8 <__aeabi_dmul>
 80060e8:	4682      	mov	sl, r0
 80060ea:	468b      	mov	fp, r1
 80060ec:	e640      	b.n	8005d70 <_strtod_l+0x88>
 80060ee:	9a06      	ldr	r2, [sp, #24]
 80060f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80060f4:	4293      	cmp	r3, r2
 80060f6:	db20      	blt.n	800613a <_strtod_l+0x452>
 80060f8:	4c64      	ldr	r4, [pc, #400]	; (800628c <_strtod_l+0x5a4>)
 80060fa:	f1c5 050f 	rsb	r5, r5, #15
 80060fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006102:	4652      	mov	r2, sl
 8006104:	465b      	mov	r3, fp
 8006106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800610a:	f7fa fa75 	bl	80005f8 <__aeabi_dmul>
 800610e:	9b06      	ldr	r3, [sp, #24]
 8006110:	1b5d      	subs	r5, r3, r5
 8006112:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006116:	e9d4 2300 	ldrd	r2, r3, [r4]
 800611a:	e7e3      	b.n	80060e4 <_strtod_l+0x3fc>
 800611c:	9b06      	ldr	r3, [sp, #24]
 800611e:	3316      	adds	r3, #22
 8006120:	db0b      	blt.n	800613a <_strtod_l+0x452>
 8006122:	9b05      	ldr	r3, [sp, #20]
 8006124:	1b9e      	subs	r6, r3, r6
 8006126:	4b59      	ldr	r3, [pc, #356]	; (800628c <_strtod_l+0x5a4>)
 8006128:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800612c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006130:	4650      	mov	r0, sl
 8006132:	4659      	mov	r1, fp
 8006134:	f7fa fb8a 	bl	800084c <__aeabi_ddiv>
 8006138:	e7d6      	b.n	80060e8 <_strtod_l+0x400>
 800613a:	9b06      	ldr	r3, [sp, #24]
 800613c:	eba5 0808 	sub.w	r8, r5, r8
 8006140:	4498      	add	r8, r3
 8006142:	f1b8 0f00 	cmp.w	r8, #0
 8006146:	dd74      	ble.n	8006232 <_strtod_l+0x54a>
 8006148:	f018 030f 	ands.w	r3, r8, #15
 800614c:	d00a      	beq.n	8006164 <_strtod_l+0x47c>
 800614e:	494f      	ldr	r1, [pc, #316]	; (800628c <_strtod_l+0x5a4>)
 8006150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006154:	4652      	mov	r2, sl
 8006156:	465b      	mov	r3, fp
 8006158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800615c:	f7fa fa4c 	bl	80005f8 <__aeabi_dmul>
 8006160:	4682      	mov	sl, r0
 8006162:	468b      	mov	fp, r1
 8006164:	f038 080f 	bics.w	r8, r8, #15
 8006168:	d04f      	beq.n	800620a <_strtod_l+0x522>
 800616a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800616e:	dd22      	ble.n	80061b6 <_strtod_l+0x4ce>
 8006170:	2500      	movs	r5, #0
 8006172:	462e      	mov	r6, r5
 8006174:	9507      	str	r5, [sp, #28]
 8006176:	9505      	str	r5, [sp, #20]
 8006178:	2322      	movs	r3, #34	; 0x22
 800617a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006294 <_strtod_l+0x5ac>
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	f04f 0a00 	mov.w	sl, #0
 8006184:	9b07      	ldr	r3, [sp, #28]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f43f adf2 	beq.w	8005d70 <_strtod_l+0x88>
 800618c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800618e:	4620      	mov	r0, r4
 8006190:	f001 fe90 	bl	8007eb4 <_Bfree>
 8006194:	9905      	ldr	r1, [sp, #20]
 8006196:	4620      	mov	r0, r4
 8006198:	f001 fe8c 	bl	8007eb4 <_Bfree>
 800619c:	4631      	mov	r1, r6
 800619e:	4620      	mov	r0, r4
 80061a0:	f001 fe88 	bl	8007eb4 <_Bfree>
 80061a4:	9907      	ldr	r1, [sp, #28]
 80061a6:	4620      	mov	r0, r4
 80061a8:	f001 fe84 	bl	8007eb4 <_Bfree>
 80061ac:	4629      	mov	r1, r5
 80061ae:	4620      	mov	r0, r4
 80061b0:	f001 fe80 	bl	8007eb4 <_Bfree>
 80061b4:	e5dc      	b.n	8005d70 <_strtod_l+0x88>
 80061b6:	4b36      	ldr	r3, [pc, #216]	; (8006290 <_strtod_l+0x5a8>)
 80061b8:	9304      	str	r3, [sp, #16]
 80061ba:	2300      	movs	r3, #0
 80061bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80061c0:	4650      	mov	r0, sl
 80061c2:	4659      	mov	r1, fp
 80061c4:	4699      	mov	r9, r3
 80061c6:	f1b8 0f01 	cmp.w	r8, #1
 80061ca:	dc21      	bgt.n	8006210 <_strtod_l+0x528>
 80061cc:	b10b      	cbz	r3, 80061d2 <_strtod_l+0x4ea>
 80061ce:	4682      	mov	sl, r0
 80061d0:	468b      	mov	fp, r1
 80061d2:	4b2f      	ldr	r3, [pc, #188]	; (8006290 <_strtod_l+0x5a8>)
 80061d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80061d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80061dc:	4652      	mov	r2, sl
 80061de:	465b      	mov	r3, fp
 80061e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80061e4:	f7fa fa08 	bl	80005f8 <__aeabi_dmul>
 80061e8:	4b2a      	ldr	r3, [pc, #168]	; (8006294 <_strtod_l+0x5ac>)
 80061ea:	460a      	mov	r2, r1
 80061ec:	400b      	ands	r3, r1
 80061ee:	492a      	ldr	r1, [pc, #168]	; (8006298 <_strtod_l+0x5b0>)
 80061f0:	428b      	cmp	r3, r1
 80061f2:	4682      	mov	sl, r0
 80061f4:	d8bc      	bhi.n	8006170 <_strtod_l+0x488>
 80061f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80061fa:	428b      	cmp	r3, r1
 80061fc:	bf86      	itte	hi
 80061fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800629c <_strtod_l+0x5b4>
 8006202:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006206:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800620a:	2300      	movs	r3, #0
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	e084      	b.n	800631a <_strtod_l+0x632>
 8006210:	f018 0f01 	tst.w	r8, #1
 8006214:	d005      	beq.n	8006222 <_strtod_l+0x53a>
 8006216:	9b04      	ldr	r3, [sp, #16]
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f7fa f9ec 	bl	80005f8 <__aeabi_dmul>
 8006220:	2301      	movs	r3, #1
 8006222:	9a04      	ldr	r2, [sp, #16]
 8006224:	3208      	adds	r2, #8
 8006226:	f109 0901 	add.w	r9, r9, #1
 800622a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800622e:	9204      	str	r2, [sp, #16]
 8006230:	e7c9      	b.n	80061c6 <_strtod_l+0x4de>
 8006232:	d0ea      	beq.n	800620a <_strtod_l+0x522>
 8006234:	f1c8 0800 	rsb	r8, r8, #0
 8006238:	f018 020f 	ands.w	r2, r8, #15
 800623c:	d00a      	beq.n	8006254 <_strtod_l+0x56c>
 800623e:	4b13      	ldr	r3, [pc, #76]	; (800628c <_strtod_l+0x5a4>)
 8006240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006244:	4650      	mov	r0, sl
 8006246:	4659      	mov	r1, fp
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	f7fa fafe 	bl	800084c <__aeabi_ddiv>
 8006250:	4682      	mov	sl, r0
 8006252:	468b      	mov	fp, r1
 8006254:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006258:	d0d7      	beq.n	800620a <_strtod_l+0x522>
 800625a:	f1b8 0f1f 	cmp.w	r8, #31
 800625e:	dd1f      	ble.n	80062a0 <_strtod_l+0x5b8>
 8006260:	2500      	movs	r5, #0
 8006262:	462e      	mov	r6, r5
 8006264:	9507      	str	r5, [sp, #28]
 8006266:	9505      	str	r5, [sp, #20]
 8006268:	2322      	movs	r3, #34	; 0x22
 800626a:	f04f 0a00 	mov.w	sl, #0
 800626e:	f04f 0b00 	mov.w	fp, #0
 8006272:	6023      	str	r3, [r4, #0]
 8006274:	e786      	b.n	8006184 <_strtod_l+0x49c>
 8006276:	bf00      	nop
 8006278:	080098f1 	.word	0x080098f1
 800627c:	08009934 	.word	0x08009934
 8006280:	080098e9 	.word	0x080098e9
 8006284:	08009a74 	.word	0x08009a74
 8006288:	08009d20 	.word	0x08009d20
 800628c:	08009c00 	.word	0x08009c00
 8006290:	08009bd8 	.word	0x08009bd8
 8006294:	7ff00000 	.word	0x7ff00000
 8006298:	7ca00000 	.word	0x7ca00000
 800629c:	7fefffff 	.word	0x7fefffff
 80062a0:	f018 0310 	ands.w	r3, r8, #16
 80062a4:	bf18      	it	ne
 80062a6:	236a      	movne	r3, #106	; 0x6a
 80062a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006658 <_strtod_l+0x970>
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	4650      	mov	r0, sl
 80062b0:	4659      	mov	r1, fp
 80062b2:	2300      	movs	r3, #0
 80062b4:	f018 0f01 	tst.w	r8, #1
 80062b8:	d004      	beq.n	80062c4 <_strtod_l+0x5dc>
 80062ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80062be:	f7fa f99b 	bl	80005f8 <__aeabi_dmul>
 80062c2:	2301      	movs	r3, #1
 80062c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80062c8:	f109 0908 	add.w	r9, r9, #8
 80062cc:	d1f2      	bne.n	80062b4 <_strtod_l+0x5cc>
 80062ce:	b10b      	cbz	r3, 80062d4 <_strtod_l+0x5ec>
 80062d0:	4682      	mov	sl, r0
 80062d2:	468b      	mov	fp, r1
 80062d4:	9b04      	ldr	r3, [sp, #16]
 80062d6:	b1c3      	cbz	r3, 800630a <_strtod_l+0x622>
 80062d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80062dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	4659      	mov	r1, fp
 80062e4:	dd11      	ble.n	800630a <_strtod_l+0x622>
 80062e6:	2b1f      	cmp	r3, #31
 80062e8:	f340 8124 	ble.w	8006534 <_strtod_l+0x84c>
 80062ec:	2b34      	cmp	r3, #52	; 0x34
 80062ee:	bfde      	ittt	le
 80062f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80062f4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80062f8:	fa03 f202 	lslle.w	r2, r3, r2
 80062fc:	f04f 0a00 	mov.w	sl, #0
 8006300:	bfcc      	ite	gt
 8006302:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006306:	ea02 0b01 	andle.w	fp, r2, r1
 800630a:	2200      	movs	r2, #0
 800630c:	2300      	movs	r3, #0
 800630e:	4650      	mov	r0, sl
 8006310:	4659      	mov	r1, fp
 8006312:	f7fa fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006316:	2800      	cmp	r0, #0
 8006318:	d1a2      	bne.n	8006260 <_strtod_l+0x578>
 800631a:	9b07      	ldr	r3, [sp, #28]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	9908      	ldr	r1, [sp, #32]
 8006320:	462b      	mov	r3, r5
 8006322:	463a      	mov	r2, r7
 8006324:	4620      	mov	r0, r4
 8006326:	f001 fe2d 	bl	8007f84 <__s2b>
 800632a:	9007      	str	r0, [sp, #28]
 800632c:	2800      	cmp	r0, #0
 800632e:	f43f af1f 	beq.w	8006170 <_strtod_l+0x488>
 8006332:	9b05      	ldr	r3, [sp, #20]
 8006334:	1b9e      	subs	r6, r3, r6
 8006336:	9b06      	ldr	r3, [sp, #24]
 8006338:	2b00      	cmp	r3, #0
 800633a:	bfb4      	ite	lt
 800633c:	4633      	movlt	r3, r6
 800633e:	2300      	movge	r3, #0
 8006340:	930c      	str	r3, [sp, #48]	; 0x30
 8006342:	9b06      	ldr	r3, [sp, #24]
 8006344:	2500      	movs	r5, #0
 8006346:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800634a:	9312      	str	r3, [sp, #72]	; 0x48
 800634c:	462e      	mov	r6, r5
 800634e:	9b07      	ldr	r3, [sp, #28]
 8006350:	4620      	mov	r0, r4
 8006352:	6859      	ldr	r1, [r3, #4]
 8006354:	f001 fd6e 	bl	8007e34 <_Balloc>
 8006358:	9005      	str	r0, [sp, #20]
 800635a:	2800      	cmp	r0, #0
 800635c:	f43f af0c 	beq.w	8006178 <_strtod_l+0x490>
 8006360:	9b07      	ldr	r3, [sp, #28]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	3202      	adds	r2, #2
 8006366:	f103 010c 	add.w	r1, r3, #12
 800636a:	0092      	lsls	r2, r2, #2
 800636c:	300c      	adds	r0, #12
 800636e:	f001 fd53 	bl	8007e18 <memcpy>
 8006372:	ec4b ab10 	vmov	d0, sl, fp
 8006376:	aa1a      	add	r2, sp, #104	; 0x68
 8006378:	a919      	add	r1, sp, #100	; 0x64
 800637a:	4620      	mov	r0, r4
 800637c:	f002 f948 	bl	8008610 <__d2b>
 8006380:	ec4b ab18 	vmov	d8, sl, fp
 8006384:	9018      	str	r0, [sp, #96]	; 0x60
 8006386:	2800      	cmp	r0, #0
 8006388:	f43f aef6 	beq.w	8006178 <_strtod_l+0x490>
 800638c:	2101      	movs	r1, #1
 800638e:	4620      	mov	r0, r4
 8006390:	f001 fe92 	bl	80080b8 <__i2b>
 8006394:	4606      	mov	r6, r0
 8006396:	2800      	cmp	r0, #0
 8006398:	f43f aeee 	beq.w	8006178 <_strtod_l+0x490>
 800639c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800639e:	9904      	ldr	r1, [sp, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bfab      	itete	ge
 80063a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80063a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80063a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80063aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80063ae:	bfac      	ite	ge
 80063b0:	eb03 0902 	addge.w	r9, r3, r2
 80063b4:	1ad7      	sublt	r7, r2, r3
 80063b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80063b8:	eba3 0801 	sub.w	r8, r3, r1
 80063bc:	4490      	add	r8, r2
 80063be:	4ba1      	ldr	r3, [pc, #644]	; (8006644 <_strtod_l+0x95c>)
 80063c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80063c4:	4598      	cmp	r8, r3
 80063c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80063ca:	f280 80c7 	bge.w	800655c <_strtod_l+0x874>
 80063ce:	eba3 0308 	sub.w	r3, r3, r8
 80063d2:	2b1f      	cmp	r3, #31
 80063d4:	eba2 0203 	sub.w	r2, r2, r3
 80063d8:	f04f 0101 	mov.w	r1, #1
 80063dc:	f300 80b1 	bgt.w	8006542 <_strtod_l+0x85a>
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	930d      	str	r3, [sp, #52]	; 0x34
 80063e6:	2300      	movs	r3, #0
 80063e8:	9308      	str	r3, [sp, #32]
 80063ea:	eb09 0802 	add.w	r8, r9, r2
 80063ee:	9b04      	ldr	r3, [sp, #16]
 80063f0:	45c1      	cmp	r9, r8
 80063f2:	4417      	add	r7, r2
 80063f4:	441f      	add	r7, r3
 80063f6:	464b      	mov	r3, r9
 80063f8:	bfa8      	it	ge
 80063fa:	4643      	movge	r3, r8
 80063fc:	42bb      	cmp	r3, r7
 80063fe:	bfa8      	it	ge
 8006400:	463b      	movge	r3, r7
 8006402:	2b00      	cmp	r3, #0
 8006404:	bfc2      	ittt	gt
 8006406:	eba8 0803 	subgt.w	r8, r8, r3
 800640a:	1aff      	subgt	r7, r7, r3
 800640c:	eba9 0903 	subgt.w	r9, r9, r3
 8006410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006412:	2b00      	cmp	r3, #0
 8006414:	dd17      	ble.n	8006446 <_strtod_l+0x75e>
 8006416:	4631      	mov	r1, r6
 8006418:	461a      	mov	r2, r3
 800641a:	4620      	mov	r0, r4
 800641c:	f001 ff0c 	bl	8008238 <__pow5mult>
 8006420:	4606      	mov	r6, r0
 8006422:	2800      	cmp	r0, #0
 8006424:	f43f aea8 	beq.w	8006178 <_strtod_l+0x490>
 8006428:	4601      	mov	r1, r0
 800642a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800642c:	4620      	mov	r0, r4
 800642e:	f001 fe59 	bl	80080e4 <__multiply>
 8006432:	900b      	str	r0, [sp, #44]	; 0x2c
 8006434:	2800      	cmp	r0, #0
 8006436:	f43f ae9f 	beq.w	8006178 <_strtod_l+0x490>
 800643a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800643c:	4620      	mov	r0, r4
 800643e:	f001 fd39 	bl	8007eb4 <_Bfree>
 8006442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006444:	9318      	str	r3, [sp, #96]	; 0x60
 8006446:	f1b8 0f00 	cmp.w	r8, #0
 800644a:	f300 808c 	bgt.w	8006566 <_strtod_l+0x87e>
 800644e:	9b06      	ldr	r3, [sp, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	dd08      	ble.n	8006466 <_strtod_l+0x77e>
 8006454:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006456:	9905      	ldr	r1, [sp, #20]
 8006458:	4620      	mov	r0, r4
 800645a:	f001 feed 	bl	8008238 <__pow5mult>
 800645e:	9005      	str	r0, [sp, #20]
 8006460:	2800      	cmp	r0, #0
 8006462:	f43f ae89 	beq.w	8006178 <_strtod_l+0x490>
 8006466:	2f00      	cmp	r7, #0
 8006468:	dd08      	ble.n	800647c <_strtod_l+0x794>
 800646a:	9905      	ldr	r1, [sp, #20]
 800646c:	463a      	mov	r2, r7
 800646e:	4620      	mov	r0, r4
 8006470:	f001 ff3c 	bl	80082ec <__lshift>
 8006474:	9005      	str	r0, [sp, #20]
 8006476:	2800      	cmp	r0, #0
 8006478:	f43f ae7e 	beq.w	8006178 <_strtod_l+0x490>
 800647c:	f1b9 0f00 	cmp.w	r9, #0
 8006480:	dd08      	ble.n	8006494 <_strtod_l+0x7ac>
 8006482:	4631      	mov	r1, r6
 8006484:	464a      	mov	r2, r9
 8006486:	4620      	mov	r0, r4
 8006488:	f001 ff30 	bl	80082ec <__lshift>
 800648c:	4606      	mov	r6, r0
 800648e:	2800      	cmp	r0, #0
 8006490:	f43f ae72 	beq.w	8006178 <_strtod_l+0x490>
 8006494:	9a05      	ldr	r2, [sp, #20]
 8006496:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006498:	4620      	mov	r0, r4
 800649a:	f001 ffb3 	bl	8008404 <__mdiff>
 800649e:	4605      	mov	r5, r0
 80064a0:	2800      	cmp	r0, #0
 80064a2:	f43f ae69 	beq.w	8006178 <_strtod_l+0x490>
 80064a6:	68c3      	ldr	r3, [r0, #12]
 80064a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80064aa:	2300      	movs	r3, #0
 80064ac:	60c3      	str	r3, [r0, #12]
 80064ae:	4631      	mov	r1, r6
 80064b0:	f001 ff8c 	bl	80083cc <__mcmp>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	da60      	bge.n	800657a <_strtod_l+0x892>
 80064b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ba:	ea53 030a 	orrs.w	r3, r3, sl
 80064be:	f040 8082 	bne.w	80065c6 <_strtod_l+0x8de>
 80064c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d17d      	bne.n	80065c6 <_strtod_l+0x8de>
 80064ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80064ce:	0d1b      	lsrs	r3, r3, #20
 80064d0:	051b      	lsls	r3, r3, #20
 80064d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80064d6:	d976      	bls.n	80065c6 <_strtod_l+0x8de>
 80064d8:	696b      	ldr	r3, [r5, #20]
 80064da:	b913      	cbnz	r3, 80064e2 <_strtod_l+0x7fa>
 80064dc:	692b      	ldr	r3, [r5, #16]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	dd71      	ble.n	80065c6 <_strtod_l+0x8de>
 80064e2:	4629      	mov	r1, r5
 80064e4:	2201      	movs	r2, #1
 80064e6:	4620      	mov	r0, r4
 80064e8:	f001 ff00 	bl	80082ec <__lshift>
 80064ec:	4631      	mov	r1, r6
 80064ee:	4605      	mov	r5, r0
 80064f0:	f001 ff6c 	bl	80083cc <__mcmp>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	dd66      	ble.n	80065c6 <_strtod_l+0x8de>
 80064f8:	9904      	ldr	r1, [sp, #16]
 80064fa:	4a53      	ldr	r2, [pc, #332]	; (8006648 <_strtod_l+0x960>)
 80064fc:	465b      	mov	r3, fp
 80064fe:	2900      	cmp	r1, #0
 8006500:	f000 8081 	beq.w	8006606 <_strtod_l+0x91e>
 8006504:	ea02 010b 	and.w	r1, r2, fp
 8006508:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800650c:	dc7b      	bgt.n	8006606 <_strtod_l+0x91e>
 800650e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006512:	f77f aea9 	ble.w	8006268 <_strtod_l+0x580>
 8006516:	4b4d      	ldr	r3, [pc, #308]	; (800664c <_strtod_l+0x964>)
 8006518:	4650      	mov	r0, sl
 800651a:	4659      	mov	r1, fp
 800651c:	2200      	movs	r2, #0
 800651e:	f7fa f86b 	bl	80005f8 <__aeabi_dmul>
 8006522:	460b      	mov	r3, r1
 8006524:	4303      	orrs	r3, r0
 8006526:	bf08      	it	eq
 8006528:	2322      	moveq	r3, #34	; 0x22
 800652a:	4682      	mov	sl, r0
 800652c:	468b      	mov	fp, r1
 800652e:	bf08      	it	eq
 8006530:	6023      	streq	r3, [r4, #0]
 8006532:	e62b      	b.n	800618c <_strtod_l+0x4a4>
 8006534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006538:	fa02 f303 	lsl.w	r3, r2, r3
 800653c:	ea03 0a0a 	and.w	sl, r3, sl
 8006540:	e6e3      	b.n	800630a <_strtod_l+0x622>
 8006542:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006546:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800654a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800654e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006552:	fa01 f308 	lsl.w	r3, r1, r8
 8006556:	9308      	str	r3, [sp, #32]
 8006558:	910d      	str	r1, [sp, #52]	; 0x34
 800655a:	e746      	b.n	80063ea <_strtod_l+0x702>
 800655c:	2300      	movs	r3, #0
 800655e:	9308      	str	r3, [sp, #32]
 8006560:	2301      	movs	r3, #1
 8006562:	930d      	str	r3, [sp, #52]	; 0x34
 8006564:	e741      	b.n	80063ea <_strtod_l+0x702>
 8006566:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006568:	4642      	mov	r2, r8
 800656a:	4620      	mov	r0, r4
 800656c:	f001 febe 	bl	80082ec <__lshift>
 8006570:	9018      	str	r0, [sp, #96]	; 0x60
 8006572:	2800      	cmp	r0, #0
 8006574:	f47f af6b 	bne.w	800644e <_strtod_l+0x766>
 8006578:	e5fe      	b.n	8006178 <_strtod_l+0x490>
 800657a:	465f      	mov	r7, fp
 800657c:	d16e      	bne.n	800665c <_strtod_l+0x974>
 800657e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006580:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006584:	b342      	cbz	r2, 80065d8 <_strtod_l+0x8f0>
 8006586:	4a32      	ldr	r2, [pc, #200]	; (8006650 <_strtod_l+0x968>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d128      	bne.n	80065de <_strtod_l+0x8f6>
 800658c:	9b04      	ldr	r3, [sp, #16]
 800658e:	4651      	mov	r1, sl
 8006590:	b1eb      	cbz	r3, 80065ce <_strtod_l+0x8e6>
 8006592:	4b2d      	ldr	r3, [pc, #180]	; (8006648 <_strtod_l+0x960>)
 8006594:	403b      	ands	r3, r7
 8006596:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800659a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800659e:	d819      	bhi.n	80065d4 <_strtod_l+0x8ec>
 80065a0:	0d1b      	lsrs	r3, r3, #20
 80065a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	4299      	cmp	r1, r3
 80065ac:	d117      	bne.n	80065de <_strtod_l+0x8f6>
 80065ae:	4b29      	ldr	r3, [pc, #164]	; (8006654 <_strtod_l+0x96c>)
 80065b0:	429f      	cmp	r7, r3
 80065b2:	d102      	bne.n	80065ba <_strtod_l+0x8d2>
 80065b4:	3101      	adds	r1, #1
 80065b6:	f43f addf 	beq.w	8006178 <_strtod_l+0x490>
 80065ba:	4b23      	ldr	r3, [pc, #140]	; (8006648 <_strtod_l+0x960>)
 80065bc:	403b      	ands	r3, r7
 80065be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80065c2:	f04f 0a00 	mov.w	sl, #0
 80065c6:	9b04      	ldr	r3, [sp, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1a4      	bne.n	8006516 <_strtod_l+0x82e>
 80065cc:	e5de      	b.n	800618c <_strtod_l+0x4a4>
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065d2:	e7ea      	b.n	80065aa <_strtod_l+0x8c2>
 80065d4:	4613      	mov	r3, r2
 80065d6:	e7e8      	b.n	80065aa <_strtod_l+0x8c2>
 80065d8:	ea53 030a 	orrs.w	r3, r3, sl
 80065dc:	d08c      	beq.n	80064f8 <_strtod_l+0x810>
 80065de:	9b08      	ldr	r3, [sp, #32]
 80065e0:	b1db      	cbz	r3, 800661a <_strtod_l+0x932>
 80065e2:	423b      	tst	r3, r7
 80065e4:	d0ef      	beq.n	80065c6 <_strtod_l+0x8de>
 80065e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065e8:	9a04      	ldr	r2, [sp, #16]
 80065ea:	4650      	mov	r0, sl
 80065ec:	4659      	mov	r1, fp
 80065ee:	b1c3      	cbz	r3, 8006622 <_strtod_l+0x93a>
 80065f0:	f7ff fb5e 	bl	8005cb0 <sulp>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	ec51 0b18 	vmov	r0, r1, d8
 80065fc:	f7f9 fe46 	bl	800028c <__adddf3>
 8006600:	4682      	mov	sl, r0
 8006602:	468b      	mov	fp, r1
 8006604:	e7df      	b.n	80065c6 <_strtod_l+0x8de>
 8006606:	4013      	ands	r3, r2
 8006608:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800660c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006610:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006614:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006618:	e7d5      	b.n	80065c6 <_strtod_l+0x8de>
 800661a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800661c:	ea13 0f0a 	tst.w	r3, sl
 8006620:	e7e0      	b.n	80065e4 <_strtod_l+0x8fc>
 8006622:	f7ff fb45 	bl	8005cb0 <sulp>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	ec51 0b18 	vmov	r0, r1, d8
 800662e:	f7f9 fe2b 	bl	8000288 <__aeabi_dsub>
 8006632:	2200      	movs	r2, #0
 8006634:	2300      	movs	r3, #0
 8006636:	4682      	mov	sl, r0
 8006638:	468b      	mov	fp, r1
 800663a:	f7fa fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 800663e:	2800      	cmp	r0, #0
 8006640:	d0c1      	beq.n	80065c6 <_strtod_l+0x8de>
 8006642:	e611      	b.n	8006268 <_strtod_l+0x580>
 8006644:	fffffc02 	.word	0xfffffc02
 8006648:	7ff00000 	.word	0x7ff00000
 800664c:	39500000 	.word	0x39500000
 8006650:	000fffff 	.word	0x000fffff
 8006654:	7fefffff 	.word	0x7fefffff
 8006658:	08009948 	.word	0x08009948
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	f002 f832 	bl	80086c8 <__ratio>
 8006664:	ec59 8b10 	vmov	r8, r9, d0
 8006668:	ee10 0a10 	vmov	r0, s0
 800666c:	2200      	movs	r2, #0
 800666e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006672:	4649      	mov	r1, r9
 8006674:	f7fa fa3c 	bl	8000af0 <__aeabi_dcmple>
 8006678:	2800      	cmp	r0, #0
 800667a:	d07a      	beq.n	8006772 <_strtod_l+0xa8a>
 800667c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d04a      	beq.n	8006718 <_strtod_l+0xa30>
 8006682:	4b95      	ldr	r3, [pc, #596]	; (80068d8 <_strtod_l+0xbf0>)
 8006684:	2200      	movs	r2, #0
 8006686:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800668a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80068d8 <_strtod_l+0xbf0>
 800668e:	f04f 0800 	mov.w	r8, #0
 8006692:	4b92      	ldr	r3, [pc, #584]	; (80068dc <_strtod_l+0xbf4>)
 8006694:	403b      	ands	r3, r7
 8006696:	930d      	str	r3, [sp, #52]	; 0x34
 8006698:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800669a:	4b91      	ldr	r3, [pc, #580]	; (80068e0 <_strtod_l+0xbf8>)
 800669c:	429a      	cmp	r2, r3
 800669e:	f040 80b0 	bne.w	8006802 <_strtod_l+0xb1a>
 80066a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80066a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80066aa:	ec4b ab10 	vmov	d0, sl, fp
 80066ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066b2:	f001 ff31 	bl	8008518 <__ulp>
 80066b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80066ba:	ec53 2b10 	vmov	r2, r3, d0
 80066be:	f7f9 ff9b 	bl	80005f8 <__aeabi_dmul>
 80066c2:	4652      	mov	r2, sl
 80066c4:	465b      	mov	r3, fp
 80066c6:	f7f9 fde1 	bl	800028c <__adddf3>
 80066ca:	460b      	mov	r3, r1
 80066cc:	4983      	ldr	r1, [pc, #524]	; (80068dc <_strtod_l+0xbf4>)
 80066ce:	4a85      	ldr	r2, [pc, #532]	; (80068e4 <_strtod_l+0xbfc>)
 80066d0:	4019      	ands	r1, r3
 80066d2:	4291      	cmp	r1, r2
 80066d4:	4682      	mov	sl, r0
 80066d6:	d960      	bls.n	800679a <_strtod_l+0xab2>
 80066d8:	ee18 3a90 	vmov	r3, s17
 80066dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d104      	bne.n	80066ee <_strtod_l+0xa06>
 80066e4:	ee18 3a10 	vmov	r3, s16
 80066e8:	3301      	adds	r3, #1
 80066ea:	f43f ad45 	beq.w	8006178 <_strtod_l+0x490>
 80066ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80068f0 <_strtod_l+0xc08>
 80066f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80066f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066f8:	4620      	mov	r0, r4
 80066fa:	f001 fbdb 	bl	8007eb4 <_Bfree>
 80066fe:	9905      	ldr	r1, [sp, #20]
 8006700:	4620      	mov	r0, r4
 8006702:	f001 fbd7 	bl	8007eb4 <_Bfree>
 8006706:	4631      	mov	r1, r6
 8006708:	4620      	mov	r0, r4
 800670a:	f001 fbd3 	bl	8007eb4 <_Bfree>
 800670e:	4629      	mov	r1, r5
 8006710:	4620      	mov	r0, r4
 8006712:	f001 fbcf 	bl	8007eb4 <_Bfree>
 8006716:	e61a      	b.n	800634e <_strtod_l+0x666>
 8006718:	f1ba 0f00 	cmp.w	sl, #0
 800671c:	d11b      	bne.n	8006756 <_strtod_l+0xa6e>
 800671e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006722:	b9f3      	cbnz	r3, 8006762 <_strtod_l+0xa7a>
 8006724:	4b6c      	ldr	r3, [pc, #432]	; (80068d8 <_strtod_l+0xbf0>)
 8006726:	2200      	movs	r2, #0
 8006728:	4640      	mov	r0, r8
 800672a:	4649      	mov	r1, r9
 800672c:	f7fa f9d6 	bl	8000adc <__aeabi_dcmplt>
 8006730:	b9d0      	cbnz	r0, 8006768 <_strtod_l+0xa80>
 8006732:	4640      	mov	r0, r8
 8006734:	4649      	mov	r1, r9
 8006736:	4b6c      	ldr	r3, [pc, #432]	; (80068e8 <_strtod_l+0xc00>)
 8006738:	2200      	movs	r2, #0
 800673a:	f7f9 ff5d 	bl	80005f8 <__aeabi_dmul>
 800673e:	4680      	mov	r8, r0
 8006740:	4689      	mov	r9, r1
 8006742:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006746:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800674a:	9315      	str	r3, [sp, #84]	; 0x54
 800674c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006750:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006754:	e79d      	b.n	8006692 <_strtod_l+0x9aa>
 8006756:	f1ba 0f01 	cmp.w	sl, #1
 800675a:	d102      	bne.n	8006762 <_strtod_l+0xa7a>
 800675c:	2f00      	cmp	r7, #0
 800675e:	f43f ad83 	beq.w	8006268 <_strtod_l+0x580>
 8006762:	4b62      	ldr	r3, [pc, #392]	; (80068ec <_strtod_l+0xc04>)
 8006764:	2200      	movs	r2, #0
 8006766:	e78e      	b.n	8006686 <_strtod_l+0x99e>
 8006768:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80068e8 <_strtod_l+0xc00>
 800676c:	f04f 0800 	mov.w	r8, #0
 8006770:	e7e7      	b.n	8006742 <_strtod_l+0xa5a>
 8006772:	4b5d      	ldr	r3, [pc, #372]	; (80068e8 <_strtod_l+0xc00>)
 8006774:	4640      	mov	r0, r8
 8006776:	4649      	mov	r1, r9
 8006778:	2200      	movs	r2, #0
 800677a:	f7f9 ff3d 	bl	80005f8 <__aeabi_dmul>
 800677e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006780:	4680      	mov	r8, r0
 8006782:	4689      	mov	r9, r1
 8006784:	b933      	cbnz	r3, 8006794 <_strtod_l+0xaac>
 8006786:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800678a:	900e      	str	r0, [sp, #56]	; 0x38
 800678c:	930f      	str	r3, [sp, #60]	; 0x3c
 800678e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006792:	e7dd      	b.n	8006750 <_strtod_l+0xa68>
 8006794:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006798:	e7f9      	b.n	800678e <_strtod_l+0xaa6>
 800679a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800679e:	9b04      	ldr	r3, [sp, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1a8      	bne.n	80066f6 <_strtod_l+0xa0e>
 80067a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80067a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067aa:	0d1b      	lsrs	r3, r3, #20
 80067ac:	051b      	lsls	r3, r3, #20
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d1a1      	bne.n	80066f6 <_strtod_l+0xa0e>
 80067b2:	4640      	mov	r0, r8
 80067b4:	4649      	mov	r1, r9
 80067b6:	f7fa fa67 	bl	8000c88 <__aeabi_d2lz>
 80067ba:	f7f9 feef 	bl	800059c <__aeabi_l2d>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	4640      	mov	r0, r8
 80067c4:	4649      	mov	r1, r9
 80067c6:	f7f9 fd5f 	bl	8000288 <__aeabi_dsub>
 80067ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067d0:	ea43 030a 	orr.w	r3, r3, sl
 80067d4:	4313      	orrs	r3, r2
 80067d6:	4680      	mov	r8, r0
 80067d8:	4689      	mov	r9, r1
 80067da:	d055      	beq.n	8006888 <_strtod_l+0xba0>
 80067dc:	a336      	add	r3, pc, #216	; (adr r3, 80068b8 <_strtod_l+0xbd0>)
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	f7fa f97b 	bl	8000adc <__aeabi_dcmplt>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	f47f acd0 	bne.w	800618c <_strtod_l+0x4a4>
 80067ec:	a334      	add	r3, pc, #208	; (adr r3, 80068c0 <_strtod_l+0xbd8>)
 80067ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f2:	4640      	mov	r0, r8
 80067f4:	4649      	mov	r1, r9
 80067f6:	f7fa f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	f43f af7b 	beq.w	80066f6 <_strtod_l+0xa0e>
 8006800:	e4c4      	b.n	800618c <_strtod_l+0x4a4>
 8006802:	9b04      	ldr	r3, [sp, #16]
 8006804:	b333      	cbz	r3, 8006854 <_strtod_l+0xb6c>
 8006806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006808:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800680c:	d822      	bhi.n	8006854 <_strtod_l+0xb6c>
 800680e:	a32e      	add	r3, pc, #184	; (adr r3, 80068c8 <_strtod_l+0xbe0>)
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	4640      	mov	r0, r8
 8006816:	4649      	mov	r1, r9
 8006818:	f7fa f96a 	bl	8000af0 <__aeabi_dcmple>
 800681c:	b1a0      	cbz	r0, 8006848 <_strtod_l+0xb60>
 800681e:	4649      	mov	r1, r9
 8006820:	4640      	mov	r0, r8
 8006822:	f7fa f9c1 	bl	8000ba8 <__aeabi_d2uiz>
 8006826:	2801      	cmp	r0, #1
 8006828:	bf38      	it	cc
 800682a:	2001      	movcc	r0, #1
 800682c:	f7f9 fe6a 	bl	8000504 <__aeabi_ui2d>
 8006830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006832:	4680      	mov	r8, r0
 8006834:	4689      	mov	r9, r1
 8006836:	bb23      	cbnz	r3, 8006882 <_strtod_l+0xb9a>
 8006838:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800683c:	9010      	str	r0, [sp, #64]	; 0x40
 800683e:	9311      	str	r3, [sp, #68]	; 0x44
 8006840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006844:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800684c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	9309      	str	r3, [sp, #36]	; 0x24
 8006854:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006858:	eeb0 0a48 	vmov.f32	s0, s16
 800685c:	eef0 0a68 	vmov.f32	s1, s17
 8006860:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006864:	f001 fe58 	bl	8008518 <__ulp>
 8006868:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800686c:	ec53 2b10 	vmov	r2, r3, d0
 8006870:	f7f9 fec2 	bl	80005f8 <__aeabi_dmul>
 8006874:	ec53 2b18 	vmov	r2, r3, d8
 8006878:	f7f9 fd08 	bl	800028c <__adddf3>
 800687c:	4682      	mov	sl, r0
 800687e:	468b      	mov	fp, r1
 8006880:	e78d      	b.n	800679e <_strtod_l+0xab6>
 8006882:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006886:	e7db      	b.n	8006840 <_strtod_l+0xb58>
 8006888:	a311      	add	r3, pc, #68	; (adr r3, 80068d0 <_strtod_l+0xbe8>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7fa f925 	bl	8000adc <__aeabi_dcmplt>
 8006892:	e7b2      	b.n	80067fa <_strtod_l+0xb12>
 8006894:	2300      	movs	r3, #0
 8006896:	930a      	str	r3, [sp, #40]	; 0x28
 8006898:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800689a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	f7ff ba6b 	b.w	8005d78 <_strtod_l+0x90>
 80068a2:	2a65      	cmp	r2, #101	; 0x65
 80068a4:	f43f ab5f 	beq.w	8005f66 <_strtod_l+0x27e>
 80068a8:	2a45      	cmp	r2, #69	; 0x45
 80068aa:	f43f ab5c 	beq.w	8005f66 <_strtod_l+0x27e>
 80068ae:	2301      	movs	r3, #1
 80068b0:	f7ff bb94 	b.w	8005fdc <_strtod_l+0x2f4>
 80068b4:	f3af 8000 	nop.w
 80068b8:	94a03595 	.word	0x94a03595
 80068bc:	3fdfffff 	.word	0x3fdfffff
 80068c0:	35afe535 	.word	0x35afe535
 80068c4:	3fe00000 	.word	0x3fe00000
 80068c8:	ffc00000 	.word	0xffc00000
 80068cc:	41dfffff 	.word	0x41dfffff
 80068d0:	94a03595 	.word	0x94a03595
 80068d4:	3fcfffff 	.word	0x3fcfffff
 80068d8:	3ff00000 	.word	0x3ff00000
 80068dc:	7ff00000 	.word	0x7ff00000
 80068e0:	7fe00000 	.word	0x7fe00000
 80068e4:	7c9fffff 	.word	0x7c9fffff
 80068e8:	3fe00000 	.word	0x3fe00000
 80068ec:	bff00000 	.word	0xbff00000
 80068f0:	7fefffff 	.word	0x7fefffff

080068f4 <_strtod_r>:
 80068f4:	4b01      	ldr	r3, [pc, #4]	; (80068fc <_strtod_r+0x8>)
 80068f6:	f7ff b9f7 	b.w	8005ce8 <_strtod_l>
 80068fa:	bf00      	nop
 80068fc:	2000008c 	.word	0x2000008c

08006900 <_strtol_l.constprop.0>:
 8006900:	2b01      	cmp	r3, #1
 8006902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006906:	d001      	beq.n	800690c <_strtol_l.constprop.0+0xc>
 8006908:	2b24      	cmp	r3, #36	; 0x24
 800690a:	d906      	bls.n	800691a <_strtol_l.constprop.0+0x1a>
 800690c:	f7fe fafe 	bl	8004f0c <__errno>
 8006910:	2316      	movs	r3, #22
 8006912:	6003      	str	r3, [r0, #0]
 8006914:	2000      	movs	r0, #0
 8006916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006a00 <_strtol_l.constprop.0+0x100>
 800691e:	460d      	mov	r5, r1
 8006920:	462e      	mov	r6, r5
 8006922:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006926:	f814 700c 	ldrb.w	r7, [r4, ip]
 800692a:	f017 0708 	ands.w	r7, r7, #8
 800692e:	d1f7      	bne.n	8006920 <_strtol_l.constprop.0+0x20>
 8006930:	2c2d      	cmp	r4, #45	; 0x2d
 8006932:	d132      	bne.n	800699a <_strtol_l.constprop.0+0x9a>
 8006934:	782c      	ldrb	r4, [r5, #0]
 8006936:	2701      	movs	r7, #1
 8006938:	1cb5      	adds	r5, r6, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d05b      	beq.n	80069f6 <_strtol_l.constprop.0+0xf6>
 800693e:	2b10      	cmp	r3, #16
 8006940:	d109      	bne.n	8006956 <_strtol_l.constprop.0+0x56>
 8006942:	2c30      	cmp	r4, #48	; 0x30
 8006944:	d107      	bne.n	8006956 <_strtol_l.constprop.0+0x56>
 8006946:	782c      	ldrb	r4, [r5, #0]
 8006948:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800694c:	2c58      	cmp	r4, #88	; 0x58
 800694e:	d14d      	bne.n	80069ec <_strtol_l.constprop.0+0xec>
 8006950:	786c      	ldrb	r4, [r5, #1]
 8006952:	2310      	movs	r3, #16
 8006954:	3502      	adds	r5, #2
 8006956:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800695a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800695e:	f04f 0c00 	mov.w	ip, #0
 8006962:	fbb8 f9f3 	udiv	r9, r8, r3
 8006966:	4666      	mov	r6, ip
 8006968:	fb03 8a19 	mls	sl, r3, r9, r8
 800696c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006970:	f1be 0f09 	cmp.w	lr, #9
 8006974:	d816      	bhi.n	80069a4 <_strtol_l.constprop.0+0xa4>
 8006976:	4674      	mov	r4, lr
 8006978:	42a3      	cmp	r3, r4
 800697a:	dd24      	ble.n	80069c6 <_strtol_l.constprop.0+0xc6>
 800697c:	f1bc 0f00 	cmp.w	ip, #0
 8006980:	db1e      	blt.n	80069c0 <_strtol_l.constprop.0+0xc0>
 8006982:	45b1      	cmp	r9, r6
 8006984:	d31c      	bcc.n	80069c0 <_strtol_l.constprop.0+0xc0>
 8006986:	d101      	bne.n	800698c <_strtol_l.constprop.0+0x8c>
 8006988:	45a2      	cmp	sl, r4
 800698a:	db19      	blt.n	80069c0 <_strtol_l.constprop.0+0xc0>
 800698c:	fb06 4603 	mla	r6, r6, r3, r4
 8006990:	f04f 0c01 	mov.w	ip, #1
 8006994:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006998:	e7e8      	b.n	800696c <_strtol_l.constprop.0+0x6c>
 800699a:	2c2b      	cmp	r4, #43	; 0x2b
 800699c:	bf04      	itt	eq
 800699e:	782c      	ldrbeq	r4, [r5, #0]
 80069a0:	1cb5      	addeq	r5, r6, #2
 80069a2:	e7ca      	b.n	800693a <_strtol_l.constprop.0+0x3a>
 80069a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80069a8:	f1be 0f19 	cmp.w	lr, #25
 80069ac:	d801      	bhi.n	80069b2 <_strtol_l.constprop.0+0xb2>
 80069ae:	3c37      	subs	r4, #55	; 0x37
 80069b0:	e7e2      	b.n	8006978 <_strtol_l.constprop.0+0x78>
 80069b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80069b6:	f1be 0f19 	cmp.w	lr, #25
 80069ba:	d804      	bhi.n	80069c6 <_strtol_l.constprop.0+0xc6>
 80069bc:	3c57      	subs	r4, #87	; 0x57
 80069be:	e7db      	b.n	8006978 <_strtol_l.constprop.0+0x78>
 80069c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80069c4:	e7e6      	b.n	8006994 <_strtol_l.constprop.0+0x94>
 80069c6:	f1bc 0f00 	cmp.w	ip, #0
 80069ca:	da05      	bge.n	80069d8 <_strtol_l.constprop.0+0xd8>
 80069cc:	2322      	movs	r3, #34	; 0x22
 80069ce:	6003      	str	r3, [r0, #0]
 80069d0:	4646      	mov	r6, r8
 80069d2:	b942      	cbnz	r2, 80069e6 <_strtol_l.constprop.0+0xe6>
 80069d4:	4630      	mov	r0, r6
 80069d6:	e79e      	b.n	8006916 <_strtol_l.constprop.0+0x16>
 80069d8:	b107      	cbz	r7, 80069dc <_strtol_l.constprop.0+0xdc>
 80069da:	4276      	negs	r6, r6
 80069dc:	2a00      	cmp	r2, #0
 80069de:	d0f9      	beq.n	80069d4 <_strtol_l.constprop.0+0xd4>
 80069e0:	f1bc 0f00 	cmp.w	ip, #0
 80069e4:	d000      	beq.n	80069e8 <_strtol_l.constprop.0+0xe8>
 80069e6:	1e69      	subs	r1, r5, #1
 80069e8:	6011      	str	r1, [r2, #0]
 80069ea:	e7f3      	b.n	80069d4 <_strtol_l.constprop.0+0xd4>
 80069ec:	2430      	movs	r4, #48	; 0x30
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1b1      	bne.n	8006956 <_strtol_l.constprop.0+0x56>
 80069f2:	2308      	movs	r3, #8
 80069f4:	e7af      	b.n	8006956 <_strtol_l.constprop.0+0x56>
 80069f6:	2c30      	cmp	r4, #48	; 0x30
 80069f8:	d0a5      	beq.n	8006946 <_strtol_l.constprop.0+0x46>
 80069fa:	230a      	movs	r3, #10
 80069fc:	e7ab      	b.n	8006956 <_strtol_l.constprop.0+0x56>
 80069fe:	bf00      	nop
 8006a00:	08009971 	.word	0x08009971

08006a04 <_strtol_r>:
 8006a04:	f7ff bf7c 	b.w	8006900 <_strtol_l.constprop.0>

08006a08 <quorem>:
 8006a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0c:	6903      	ldr	r3, [r0, #16]
 8006a0e:	690c      	ldr	r4, [r1, #16]
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	4607      	mov	r7, r0
 8006a14:	f2c0 8081 	blt.w	8006b1a <quorem+0x112>
 8006a18:	3c01      	subs	r4, #1
 8006a1a:	f101 0814 	add.w	r8, r1, #20
 8006a1e:	f100 0514 	add.w	r5, r0, #20
 8006a22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a30:	3301      	adds	r3, #1
 8006a32:	429a      	cmp	r2, r3
 8006a34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a40:	d331      	bcc.n	8006aa6 <quorem+0x9e>
 8006a42:	f04f 0e00 	mov.w	lr, #0
 8006a46:	4640      	mov	r0, r8
 8006a48:	46ac      	mov	ip, r5
 8006a4a:	46f2      	mov	sl, lr
 8006a4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a50:	b293      	uxth	r3, r2
 8006a52:	fb06 e303 	mla	r3, r6, r3, lr
 8006a56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	ebaa 0303 	sub.w	r3, sl, r3
 8006a60:	f8dc a000 	ldr.w	sl, [ip]
 8006a64:	0c12      	lsrs	r2, r2, #16
 8006a66:	fa13 f38a 	uxtah	r3, r3, sl
 8006a6a:	fb06 e202 	mla	r2, r6, r2, lr
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	9b00      	ldr	r3, [sp, #0]
 8006a72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a76:	b292      	uxth	r2, r2
 8006a78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a80:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a84:	4581      	cmp	r9, r0
 8006a86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a8a:	f84c 3b04 	str.w	r3, [ip], #4
 8006a8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a92:	d2db      	bcs.n	8006a4c <quorem+0x44>
 8006a94:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a98:	b92b      	cbnz	r3, 8006aa6 <quorem+0x9e>
 8006a9a:	9b01      	ldr	r3, [sp, #4]
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	429d      	cmp	r5, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	d32e      	bcc.n	8006b02 <quorem+0xfa>
 8006aa4:	613c      	str	r4, [r7, #16]
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	f001 fc90 	bl	80083cc <__mcmp>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	db24      	blt.n	8006afa <quorem+0xf2>
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f04f 0c00 	mov.w	ip, #0
 8006ab8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006abc:	f8d0 e000 	ldr.w	lr, [r0]
 8006ac0:	b293      	uxth	r3, r2
 8006ac2:	ebac 0303 	sub.w	r3, ip, r3
 8006ac6:	0c12      	lsrs	r2, r2, #16
 8006ac8:	fa13 f38e 	uxtah	r3, r3, lr
 8006acc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ad0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ada:	45c1      	cmp	r9, r8
 8006adc:	f840 3b04 	str.w	r3, [r0], #4
 8006ae0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ae4:	d2e8      	bcs.n	8006ab8 <quorem+0xb0>
 8006ae6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aee:	b922      	cbnz	r2, 8006afa <quorem+0xf2>
 8006af0:	3b04      	subs	r3, #4
 8006af2:	429d      	cmp	r5, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	d30a      	bcc.n	8006b0e <quorem+0x106>
 8006af8:	613c      	str	r4, [r7, #16]
 8006afa:	4630      	mov	r0, r6
 8006afc:	b003      	add	sp, #12
 8006afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	3b04      	subs	r3, #4
 8006b06:	2a00      	cmp	r2, #0
 8006b08:	d1cc      	bne.n	8006aa4 <quorem+0x9c>
 8006b0a:	3c01      	subs	r4, #1
 8006b0c:	e7c7      	b.n	8006a9e <quorem+0x96>
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	3b04      	subs	r3, #4
 8006b12:	2a00      	cmp	r2, #0
 8006b14:	d1f0      	bne.n	8006af8 <quorem+0xf0>
 8006b16:	3c01      	subs	r4, #1
 8006b18:	e7eb      	b.n	8006af2 <quorem+0xea>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e7ee      	b.n	8006afc <quorem+0xf4>
	...

08006b20 <_dtoa_r>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	ed2d 8b04 	vpush	{d8-d9}
 8006b28:	ec57 6b10 	vmov	r6, r7, d0
 8006b2c:	b093      	sub	sp, #76	; 0x4c
 8006b2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b34:	9106      	str	r1, [sp, #24]
 8006b36:	ee10 aa10 	vmov	sl, s0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b3e:	930c      	str	r3, [sp, #48]	; 0x30
 8006b40:	46bb      	mov	fp, r7
 8006b42:	b975      	cbnz	r5, 8006b62 <_dtoa_r+0x42>
 8006b44:	2010      	movs	r0, #16
 8006b46:	f001 f94d 	bl	8007de4 <malloc>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	6260      	str	r0, [r4, #36]	; 0x24
 8006b4e:	b920      	cbnz	r0, 8006b5a <_dtoa_r+0x3a>
 8006b50:	4ba7      	ldr	r3, [pc, #668]	; (8006df0 <_dtoa_r+0x2d0>)
 8006b52:	21ea      	movs	r1, #234	; 0xea
 8006b54:	48a7      	ldr	r0, [pc, #668]	; (8006df4 <_dtoa_r+0x2d4>)
 8006b56:	f002 f8bd 	bl	8008cd4 <__assert_func>
 8006b5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b5e:	6005      	str	r5, [r0, #0]
 8006b60:	60c5      	str	r5, [r0, #12]
 8006b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b64:	6819      	ldr	r1, [r3, #0]
 8006b66:	b151      	cbz	r1, 8006b7e <_dtoa_r+0x5e>
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	604a      	str	r2, [r1, #4]
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4093      	lsls	r3, r2
 8006b70:	608b      	str	r3, [r1, #8]
 8006b72:	4620      	mov	r0, r4
 8006b74:	f001 f99e 	bl	8007eb4 <_Bfree>
 8006b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	1e3b      	subs	r3, r7, #0
 8006b80:	bfaa      	itet	ge
 8006b82:	2300      	movge	r3, #0
 8006b84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006b88:	f8c8 3000 	strge.w	r3, [r8]
 8006b8c:	4b9a      	ldr	r3, [pc, #616]	; (8006df8 <_dtoa_r+0x2d8>)
 8006b8e:	bfbc      	itt	lt
 8006b90:	2201      	movlt	r2, #1
 8006b92:	f8c8 2000 	strlt.w	r2, [r8]
 8006b96:	ea33 030b 	bics.w	r3, r3, fp
 8006b9a:	d11b      	bne.n	8006bd4 <_dtoa_r+0xb4>
 8006b9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ba8:	4333      	orrs	r3, r6
 8006baa:	f000 8592 	beq.w	80076d2 <_dtoa_r+0xbb2>
 8006bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bb0:	b963      	cbnz	r3, 8006bcc <_dtoa_r+0xac>
 8006bb2:	4b92      	ldr	r3, [pc, #584]	; (8006dfc <_dtoa_r+0x2dc>)
 8006bb4:	e022      	b.n	8006bfc <_dtoa_r+0xdc>
 8006bb6:	4b92      	ldr	r3, [pc, #584]	; (8006e00 <_dtoa_r+0x2e0>)
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	9801      	ldr	r0, [sp, #4]
 8006bc2:	b013      	add	sp, #76	; 0x4c
 8006bc4:	ecbd 8b04 	vpop	{d8-d9}
 8006bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bcc:	4b8b      	ldr	r3, [pc, #556]	; (8006dfc <_dtoa_r+0x2dc>)
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	3303      	adds	r3, #3
 8006bd2:	e7f3      	b.n	8006bbc <_dtoa_r+0x9c>
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	4650      	mov	r0, sl
 8006bda:	4659      	mov	r1, fp
 8006bdc:	f7f9 ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 8006be0:	ec4b ab19 	vmov	d9, sl, fp
 8006be4:	4680      	mov	r8, r0
 8006be6:	b158      	cbz	r0, 8006c00 <_dtoa_r+0xe0>
 8006be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bea:	2301      	movs	r3, #1
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 856b 	beq.w	80076cc <_dtoa_r+0xbac>
 8006bf6:	4883      	ldr	r0, [pc, #524]	; (8006e04 <_dtoa_r+0x2e4>)
 8006bf8:	6018      	str	r0, [r3, #0]
 8006bfa:	1e43      	subs	r3, r0, #1
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	e7df      	b.n	8006bc0 <_dtoa_r+0xa0>
 8006c00:	ec4b ab10 	vmov	d0, sl, fp
 8006c04:	aa10      	add	r2, sp, #64	; 0x40
 8006c06:	a911      	add	r1, sp, #68	; 0x44
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f001 fd01 	bl	8008610 <__d2b>
 8006c0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c12:	ee08 0a10 	vmov	s16, r0
 8006c16:	2d00      	cmp	r5, #0
 8006c18:	f000 8084 	beq.w	8006d24 <_dtoa_r+0x204>
 8006c1c:	ee19 3a90 	vmov	r3, s19
 8006c20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c28:	4656      	mov	r6, sl
 8006c2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c36:	4b74      	ldr	r3, [pc, #464]	; (8006e08 <_dtoa_r+0x2e8>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	f7f9 fb23 	bl	8000288 <__aeabi_dsub>
 8006c42:	a365      	add	r3, pc, #404	; (adr r3, 8006dd8 <_dtoa_r+0x2b8>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 fcd6 	bl	80005f8 <__aeabi_dmul>
 8006c4c:	a364      	add	r3, pc, #400	; (adr r3, 8006de0 <_dtoa_r+0x2c0>)
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f7f9 fb1b 	bl	800028c <__adddf3>
 8006c56:	4606      	mov	r6, r0
 8006c58:	4628      	mov	r0, r5
 8006c5a:	460f      	mov	r7, r1
 8006c5c:	f7f9 fc62 	bl	8000524 <__aeabi_i2d>
 8006c60:	a361      	add	r3, pc, #388	; (adr r3, 8006de8 <_dtoa_r+0x2c8>)
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f7f9 fcc7 	bl	80005f8 <__aeabi_dmul>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4630      	mov	r0, r6
 8006c70:	4639      	mov	r1, r7
 8006c72:	f7f9 fb0b 	bl	800028c <__adddf3>
 8006c76:	4606      	mov	r6, r0
 8006c78:	460f      	mov	r7, r1
 8006c7a:	f7f9 ff6d 	bl	8000b58 <__aeabi_d2iz>
 8006c7e:	2200      	movs	r2, #0
 8006c80:	9000      	str	r0, [sp, #0]
 8006c82:	2300      	movs	r3, #0
 8006c84:	4630      	mov	r0, r6
 8006c86:	4639      	mov	r1, r7
 8006c88:	f7f9 ff28 	bl	8000adc <__aeabi_dcmplt>
 8006c8c:	b150      	cbz	r0, 8006ca4 <_dtoa_r+0x184>
 8006c8e:	9800      	ldr	r0, [sp, #0]
 8006c90:	f7f9 fc48 	bl	8000524 <__aeabi_i2d>
 8006c94:	4632      	mov	r2, r6
 8006c96:	463b      	mov	r3, r7
 8006c98:	f7f9 ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c9c:	b910      	cbnz	r0, 8006ca4 <_dtoa_r+0x184>
 8006c9e:	9b00      	ldr	r3, [sp, #0]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	9b00      	ldr	r3, [sp, #0]
 8006ca6:	2b16      	cmp	r3, #22
 8006ca8:	d85a      	bhi.n	8006d60 <_dtoa_r+0x240>
 8006caa:	9a00      	ldr	r2, [sp, #0]
 8006cac:	4b57      	ldr	r3, [pc, #348]	; (8006e0c <_dtoa_r+0x2ec>)
 8006cae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	ec51 0b19 	vmov	r0, r1, d9
 8006cba:	f7f9 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d050      	beq.n	8006d64 <_dtoa_r+0x244>
 8006cc2:	9b00      	ldr	r3, [sp, #0]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cce:	1b5d      	subs	r5, r3, r5
 8006cd0:	1e6b      	subs	r3, r5, #1
 8006cd2:	9305      	str	r3, [sp, #20]
 8006cd4:	bf45      	ittet	mi
 8006cd6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006cda:	9304      	strmi	r3, [sp, #16]
 8006cdc:	2300      	movpl	r3, #0
 8006cde:	2300      	movmi	r3, #0
 8006ce0:	bf4c      	ite	mi
 8006ce2:	9305      	strmi	r3, [sp, #20]
 8006ce4:	9304      	strpl	r3, [sp, #16]
 8006ce6:	9b00      	ldr	r3, [sp, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	db3d      	blt.n	8006d68 <_dtoa_r+0x248>
 8006cec:	9b05      	ldr	r3, [sp, #20]
 8006cee:	9a00      	ldr	r2, [sp, #0]
 8006cf0:	920a      	str	r2, [sp, #40]	; 0x28
 8006cf2:	4413      	add	r3, r2
 8006cf4:	9305      	str	r3, [sp, #20]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9307      	str	r3, [sp, #28]
 8006cfa:	9b06      	ldr	r3, [sp, #24]
 8006cfc:	2b09      	cmp	r3, #9
 8006cfe:	f200 8089 	bhi.w	8006e14 <_dtoa_r+0x2f4>
 8006d02:	2b05      	cmp	r3, #5
 8006d04:	bfc4      	itt	gt
 8006d06:	3b04      	subgt	r3, #4
 8006d08:	9306      	strgt	r3, [sp, #24]
 8006d0a:	9b06      	ldr	r3, [sp, #24]
 8006d0c:	f1a3 0302 	sub.w	r3, r3, #2
 8006d10:	bfcc      	ite	gt
 8006d12:	2500      	movgt	r5, #0
 8006d14:	2501      	movle	r5, #1
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	f200 8087 	bhi.w	8006e2a <_dtoa_r+0x30a>
 8006d1c:	e8df f003 	tbb	[pc, r3]
 8006d20:	59383a2d 	.word	0x59383a2d
 8006d24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d28:	441d      	add	r5, r3
 8006d2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	bfc1      	itttt	gt
 8006d32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006d3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d42:	bfda      	itte	le
 8006d44:	f1c3 0320 	rsble	r3, r3, #32
 8006d48:	fa06 f003 	lslle.w	r0, r6, r3
 8006d4c:	4318      	orrgt	r0, r3
 8006d4e:	f7f9 fbd9 	bl	8000504 <__aeabi_ui2d>
 8006d52:	2301      	movs	r3, #1
 8006d54:	4606      	mov	r6, r0
 8006d56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d5a:	3d01      	subs	r5, #1
 8006d5c:	930e      	str	r3, [sp, #56]	; 0x38
 8006d5e:	e76a      	b.n	8006c36 <_dtoa_r+0x116>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e7b2      	b.n	8006cca <_dtoa_r+0x1aa>
 8006d64:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d66:	e7b1      	b.n	8006ccc <_dtoa_r+0x1ac>
 8006d68:	9b04      	ldr	r3, [sp, #16]
 8006d6a:	9a00      	ldr	r2, [sp, #0]
 8006d6c:	1a9b      	subs	r3, r3, r2
 8006d6e:	9304      	str	r3, [sp, #16]
 8006d70:	4253      	negs	r3, r2
 8006d72:	9307      	str	r3, [sp, #28]
 8006d74:	2300      	movs	r3, #0
 8006d76:	930a      	str	r3, [sp, #40]	; 0x28
 8006d78:	e7bf      	b.n	8006cfa <_dtoa_r+0x1da>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	9308      	str	r3, [sp, #32]
 8006d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	dc55      	bgt.n	8006e30 <_dtoa_r+0x310>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d8e:	e00c      	b.n	8006daa <_dtoa_r+0x28a>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e7f3      	b.n	8006d7c <_dtoa_r+0x25c>
 8006d94:	2300      	movs	r3, #0
 8006d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d98:	9308      	str	r3, [sp, #32]
 8006d9a:	9b00      	ldr	r3, [sp, #0]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	9302      	str	r3, [sp, #8]
 8006da0:	3301      	adds	r3, #1
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	9303      	str	r3, [sp, #12]
 8006da6:	bfb8      	it	lt
 8006da8:	2301      	movlt	r3, #1
 8006daa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006dac:	2200      	movs	r2, #0
 8006dae:	6042      	str	r2, [r0, #4]
 8006db0:	2204      	movs	r2, #4
 8006db2:	f102 0614 	add.w	r6, r2, #20
 8006db6:	429e      	cmp	r6, r3
 8006db8:	6841      	ldr	r1, [r0, #4]
 8006dba:	d93d      	bls.n	8006e38 <_dtoa_r+0x318>
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f001 f839 	bl	8007e34 <_Balloc>
 8006dc2:	9001      	str	r0, [sp, #4]
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d13b      	bne.n	8006e40 <_dtoa_r+0x320>
 8006dc8:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <_dtoa_r+0x2f0>)
 8006dca:	4602      	mov	r2, r0
 8006dcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006dd0:	e6c0      	b.n	8006b54 <_dtoa_r+0x34>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e7df      	b.n	8006d96 <_dtoa_r+0x276>
 8006dd6:	bf00      	nop
 8006dd8:	636f4361 	.word	0x636f4361
 8006ddc:	3fd287a7 	.word	0x3fd287a7
 8006de0:	8b60c8b3 	.word	0x8b60c8b3
 8006de4:	3fc68a28 	.word	0x3fc68a28
 8006de8:	509f79fb 	.word	0x509f79fb
 8006dec:	3fd34413 	.word	0x3fd34413
 8006df0:	08009a7e 	.word	0x08009a7e
 8006df4:	08009a95 	.word	0x08009a95
 8006df8:	7ff00000 	.word	0x7ff00000
 8006dfc:	08009a7a 	.word	0x08009a7a
 8006e00:	08009a71 	.word	0x08009a71
 8006e04:	080098f5 	.word	0x080098f5
 8006e08:	3ff80000 	.word	0x3ff80000
 8006e0c:	08009c00 	.word	0x08009c00
 8006e10:	08009af0 	.word	0x08009af0
 8006e14:	2501      	movs	r5, #1
 8006e16:	2300      	movs	r3, #0
 8006e18:	9306      	str	r3, [sp, #24]
 8006e1a:	9508      	str	r5, [sp, #32]
 8006e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e24:	2200      	movs	r2, #0
 8006e26:	2312      	movs	r3, #18
 8006e28:	e7b0      	b.n	8006d8c <_dtoa_r+0x26c>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	9308      	str	r3, [sp, #32]
 8006e2e:	e7f5      	b.n	8006e1c <_dtoa_r+0x2fc>
 8006e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e36:	e7b8      	b.n	8006daa <_dtoa_r+0x28a>
 8006e38:	3101      	adds	r1, #1
 8006e3a:	6041      	str	r1, [r0, #4]
 8006e3c:	0052      	lsls	r2, r2, #1
 8006e3e:	e7b8      	b.n	8006db2 <_dtoa_r+0x292>
 8006e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e42:	9a01      	ldr	r2, [sp, #4]
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	9b03      	ldr	r3, [sp, #12]
 8006e48:	2b0e      	cmp	r3, #14
 8006e4a:	f200 809d 	bhi.w	8006f88 <_dtoa_r+0x468>
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	f000 809a 	beq.w	8006f88 <_dtoa_r+0x468>
 8006e54:	9b00      	ldr	r3, [sp, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	dd32      	ble.n	8006ec0 <_dtoa_r+0x3a0>
 8006e5a:	4ab7      	ldr	r2, [pc, #732]	; (8007138 <_dtoa_r+0x618>)
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e68:	9b00      	ldr	r3, [sp, #0]
 8006e6a:	05d8      	lsls	r0, r3, #23
 8006e6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006e70:	d516      	bpl.n	8006ea0 <_dtoa_r+0x380>
 8006e72:	4bb2      	ldr	r3, [pc, #712]	; (800713c <_dtoa_r+0x61c>)
 8006e74:	ec51 0b19 	vmov	r0, r1, d9
 8006e78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e7c:	f7f9 fce6 	bl	800084c <__aeabi_ddiv>
 8006e80:	f007 070f 	and.w	r7, r7, #15
 8006e84:	4682      	mov	sl, r0
 8006e86:	468b      	mov	fp, r1
 8006e88:	2503      	movs	r5, #3
 8006e8a:	4eac      	ldr	r6, [pc, #688]	; (800713c <_dtoa_r+0x61c>)
 8006e8c:	b957      	cbnz	r7, 8006ea4 <_dtoa_r+0x384>
 8006e8e:	4642      	mov	r2, r8
 8006e90:	464b      	mov	r3, r9
 8006e92:	4650      	mov	r0, sl
 8006e94:	4659      	mov	r1, fp
 8006e96:	f7f9 fcd9 	bl	800084c <__aeabi_ddiv>
 8006e9a:	4682      	mov	sl, r0
 8006e9c:	468b      	mov	fp, r1
 8006e9e:	e028      	b.n	8006ef2 <_dtoa_r+0x3d2>
 8006ea0:	2502      	movs	r5, #2
 8006ea2:	e7f2      	b.n	8006e8a <_dtoa_r+0x36a>
 8006ea4:	07f9      	lsls	r1, r7, #31
 8006ea6:	d508      	bpl.n	8006eba <_dtoa_r+0x39a>
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4649      	mov	r1, r9
 8006eac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006eb0:	f7f9 fba2 	bl	80005f8 <__aeabi_dmul>
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	4680      	mov	r8, r0
 8006eb8:	4689      	mov	r9, r1
 8006eba:	107f      	asrs	r7, r7, #1
 8006ebc:	3608      	adds	r6, #8
 8006ebe:	e7e5      	b.n	8006e8c <_dtoa_r+0x36c>
 8006ec0:	f000 809b 	beq.w	8006ffa <_dtoa_r+0x4da>
 8006ec4:	9b00      	ldr	r3, [sp, #0]
 8006ec6:	4f9d      	ldr	r7, [pc, #628]	; (800713c <_dtoa_r+0x61c>)
 8006ec8:	425e      	negs	r6, r3
 8006eca:	4b9b      	ldr	r3, [pc, #620]	; (8007138 <_dtoa_r+0x618>)
 8006ecc:	f006 020f 	and.w	r2, r6, #15
 8006ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	ec51 0b19 	vmov	r0, r1, d9
 8006edc:	f7f9 fb8c 	bl	80005f8 <__aeabi_dmul>
 8006ee0:	1136      	asrs	r6, r6, #4
 8006ee2:	4682      	mov	sl, r0
 8006ee4:	468b      	mov	fp, r1
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	2502      	movs	r5, #2
 8006eea:	2e00      	cmp	r6, #0
 8006eec:	d17a      	bne.n	8006fe4 <_dtoa_r+0x4c4>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1d3      	bne.n	8006e9a <_dtoa_r+0x37a>
 8006ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 8082 	beq.w	8006ffe <_dtoa_r+0x4de>
 8006efa:	4b91      	ldr	r3, [pc, #580]	; (8007140 <_dtoa_r+0x620>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	4650      	mov	r0, sl
 8006f00:	4659      	mov	r1, fp
 8006f02:	f7f9 fdeb 	bl	8000adc <__aeabi_dcmplt>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d079      	beq.n	8006ffe <_dtoa_r+0x4de>
 8006f0a:	9b03      	ldr	r3, [sp, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d076      	beq.n	8006ffe <_dtoa_r+0x4de>
 8006f10:	9b02      	ldr	r3, [sp, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dd36      	ble.n	8006f84 <_dtoa_r+0x464>
 8006f16:	9b00      	ldr	r3, [sp, #0]
 8006f18:	4650      	mov	r0, sl
 8006f1a:	4659      	mov	r1, fp
 8006f1c:	1e5f      	subs	r7, r3, #1
 8006f1e:	2200      	movs	r2, #0
 8006f20:	4b88      	ldr	r3, [pc, #544]	; (8007144 <_dtoa_r+0x624>)
 8006f22:	f7f9 fb69 	bl	80005f8 <__aeabi_dmul>
 8006f26:	9e02      	ldr	r6, [sp, #8]
 8006f28:	4682      	mov	sl, r0
 8006f2a:	468b      	mov	fp, r1
 8006f2c:	3501      	adds	r5, #1
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f7f9 faf8 	bl	8000524 <__aeabi_i2d>
 8006f34:	4652      	mov	r2, sl
 8006f36:	465b      	mov	r3, fp
 8006f38:	f7f9 fb5e 	bl	80005f8 <__aeabi_dmul>
 8006f3c:	4b82      	ldr	r3, [pc, #520]	; (8007148 <_dtoa_r+0x628>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f7f9 f9a4 	bl	800028c <__adddf3>
 8006f44:	46d0      	mov	r8, sl
 8006f46:	46d9      	mov	r9, fp
 8006f48:	4682      	mov	sl, r0
 8006f4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006f4e:	2e00      	cmp	r6, #0
 8006f50:	d158      	bne.n	8007004 <_dtoa_r+0x4e4>
 8006f52:	4b7e      	ldr	r3, [pc, #504]	; (800714c <_dtoa_r+0x62c>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	4640      	mov	r0, r8
 8006f58:	4649      	mov	r1, r9
 8006f5a:	f7f9 f995 	bl	8000288 <__aeabi_dsub>
 8006f5e:	4652      	mov	r2, sl
 8006f60:	465b      	mov	r3, fp
 8006f62:	4680      	mov	r8, r0
 8006f64:	4689      	mov	r9, r1
 8006f66:	f7f9 fdd7 	bl	8000b18 <__aeabi_dcmpgt>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	f040 8295 	bne.w	800749a <_dtoa_r+0x97a>
 8006f70:	4652      	mov	r2, sl
 8006f72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f76:	4640      	mov	r0, r8
 8006f78:	4649      	mov	r1, r9
 8006f7a:	f7f9 fdaf 	bl	8000adc <__aeabi_dcmplt>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f040 8289 	bne.w	8007496 <_dtoa_r+0x976>
 8006f84:	ec5b ab19 	vmov	sl, fp, d9
 8006f88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f2c0 8148 	blt.w	8007220 <_dtoa_r+0x700>
 8006f90:	9a00      	ldr	r2, [sp, #0]
 8006f92:	2a0e      	cmp	r2, #14
 8006f94:	f300 8144 	bgt.w	8007220 <_dtoa_r+0x700>
 8006f98:	4b67      	ldr	r3, [pc, #412]	; (8007138 <_dtoa_r+0x618>)
 8006f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f280 80d5 	bge.w	8007154 <_dtoa_r+0x634>
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f300 80d1 	bgt.w	8007154 <_dtoa_r+0x634>
 8006fb2:	f040 826f 	bne.w	8007494 <_dtoa_r+0x974>
 8006fb6:	4b65      	ldr	r3, [pc, #404]	; (800714c <_dtoa_r+0x62c>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4640      	mov	r0, r8
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	f7f9 fb1b 	bl	80005f8 <__aeabi_dmul>
 8006fc2:	4652      	mov	r2, sl
 8006fc4:	465b      	mov	r3, fp
 8006fc6:	f7f9 fd9d 	bl	8000b04 <__aeabi_dcmpge>
 8006fca:	9e03      	ldr	r6, [sp, #12]
 8006fcc:	4637      	mov	r7, r6
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f040 8245 	bne.w	800745e <_dtoa_r+0x93e>
 8006fd4:	9d01      	ldr	r5, [sp, #4]
 8006fd6:	2331      	movs	r3, #49	; 0x31
 8006fd8:	f805 3b01 	strb.w	r3, [r5], #1
 8006fdc:	9b00      	ldr	r3, [sp, #0]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	e240      	b.n	8007466 <_dtoa_r+0x946>
 8006fe4:	07f2      	lsls	r2, r6, #31
 8006fe6:	d505      	bpl.n	8006ff4 <_dtoa_r+0x4d4>
 8006fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fec:	f7f9 fb04 	bl	80005f8 <__aeabi_dmul>
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	1076      	asrs	r6, r6, #1
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	e777      	b.n	8006eea <_dtoa_r+0x3ca>
 8006ffa:	2502      	movs	r5, #2
 8006ffc:	e779      	b.n	8006ef2 <_dtoa_r+0x3d2>
 8006ffe:	9f00      	ldr	r7, [sp, #0]
 8007000:	9e03      	ldr	r6, [sp, #12]
 8007002:	e794      	b.n	8006f2e <_dtoa_r+0x40e>
 8007004:	9901      	ldr	r1, [sp, #4]
 8007006:	4b4c      	ldr	r3, [pc, #304]	; (8007138 <_dtoa_r+0x618>)
 8007008:	4431      	add	r1, r6
 800700a:	910d      	str	r1, [sp, #52]	; 0x34
 800700c:	9908      	ldr	r1, [sp, #32]
 800700e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007012:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007016:	2900      	cmp	r1, #0
 8007018:	d043      	beq.n	80070a2 <_dtoa_r+0x582>
 800701a:	494d      	ldr	r1, [pc, #308]	; (8007150 <_dtoa_r+0x630>)
 800701c:	2000      	movs	r0, #0
 800701e:	f7f9 fc15 	bl	800084c <__aeabi_ddiv>
 8007022:	4652      	mov	r2, sl
 8007024:	465b      	mov	r3, fp
 8007026:	f7f9 f92f 	bl	8000288 <__aeabi_dsub>
 800702a:	9d01      	ldr	r5, [sp, #4]
 800702c:	4682      	mov	sl, r0
 800702e:	468b      	mov	fp, r1
 8007030:	4649      	mov	r1, r9
 8007032:	4640      	mov	r0, r8
 8007034:	f7f9 fd90 	bl	8000b58 <__aeabi_d2iz>
 8007038:	4606      	mov	r6, r0
 800703a:	f7f9 fa73 	bl	8000524 <__aeabi_i2d>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4640      	mov	r0, r8
 8007044:	4649      	mov	r1, r9
 8007046:	f7f9 f91f 	bl	8000288 <__aeabi_dsub>
 800704a:	3630      	adds	r6, #48	; 0x30
 800704c:	f805 6b01 	strb.w	r6, [r5], #1
 8007050:	4652      	mov	r2, sl
 8007052:	465b      	mov	r3, fp
 8007054:	4680      	mov	r8, r0
 8007056:	4689      	mov	r9, r1
 8007058:	f7f9 fd40 	bl	8000adc <__aeabi_dcmplt>
 800705c:	2800      	cmp	r0, #0
 800705e:	d163      	bne.n	8007128 <_dtoa_r+0x608>
 8007060:	4642      	mov	r2, r8
 8007062:	464b      	mov	r3, r9
 8007064:	4936      	ldr	r1, [pc, #216]	; (8007140 <_dtoa_r+0x620>)
 8007066:	2000      	movs	r0, #0
 8007068:	f7f9 f90e 	bl	8000288 <__aeabi_dsub>
 800706c:	4652      	mov	r2, sl
 800706e:	465b      	mov	r3, fp
 8007070:	f7f9 fd34 	bl	8000adc <__aeabi_dcmplt>
 8007074:	2800      	cmp	r0, #0
 8007076:	f040 80b5 	bne.w	80071e4 <_dtoa_r+0x6c4>
 800707a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800707c:	429d      	cmp	r5, r3
 800707e:	d081      	beq.n	8006f84 <_dtoa_r+0x464>
 8007080:	4b30      	ldr	r3, [pc, #192]	; (8007144 <_dtoa_r+0x624>)
 8007082:	2200      	movs	r2, #0
 8007084:	4650      	mov	r0, sl
 8007086:	4659      	mov	r1, fp
 8007088:	f7f9 fab6 	bl	80005f8 <__aeabi_dmul>
 800708c:	4b2d      	ldr	r3, [pc, #180]	; (8007144 <_dtoa_r+0x624>)
 800708e:	4682      	mov	sl, r0
 8007090:	468b      	mov	fp, r1
 8007092:	4640      	mov	r0, r8
 8007094:	4649      	mov	r1, r9
 8007096:	2200      	movs	r2, #0
 8007098:	f7f9 faae 	bl	80005f8 <__aeabi_dmul>
 800709c:	4680      	mov	r8, r0
 800709e:	4689      	mov	r9, r1
 80070a0:	e7c6      	b.n	8007030 <_dtoa_r+0x510>
 80070a2:	4650      	mov	r0, sl
 80070a4:	4659      	mov	r1, fp
 80070a6:	f7f9 faa7 	bl	80005f8 <__aeabi_dmul>
 80070aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ac:	9d01      	ldr	r5, [sp, #4]
 80070ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80070b0:	4682      	mov	sl, r0
 80070b2:	468b      	mov	fp, r1
 80070b4:	4649      	mov	r1, r9
 80070b6:	4640      	mov	r0, r8
 80070b8:	f7f9 fd4e 	bl	8000b58 <__aeabi_d2iz>
 80070bc:	4606      	mov	r6, r0
 80070be:	f7f9 fa31 	bl	8000524 <__aeabi_i2d>
 80070c2:	3630      	adds	r6, #48	; 0x30
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4640      	mov	r0, r8
 80070ca:	4649      	mov	r1, r9
 80070cc:	f7f9 f8dc 	bl	8000288 <__aeabi_dsub>
 80070d0:	f805 6b01 	strb.w	r6, [r5], #1
 80070d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070d6:	429d      	cmp	r5, r3
 80070d8:	4680      	mov	r8, r0
 80070da:	4689      	mov	r9, r1
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	d124      	bne.n	800712c <_dtoa_r+0x60c>
 80070e2:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <_dtoa_r+0x630>)
 80070e4:	4650      	mov	r0, sl
 80070e6:	4659      	mov	r1, fp
 80070e8:	f7f9 f8d0 	bl	800028c <__adddf3>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4640      	mov	r0, r8
 80070f2:	4649      	mov	r1, r9
 80070f4:	f7f9 fd10 	bl	8000b18 <__aeabi_dcmpgt>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d173      	bne.n	80071e4 <_dtoa_r+0x6c4>
 80070fc:	4652      	mov	r2, sl
 80070fe:	465b      	mov	r3, fp
 8007100:	4913      	ldr	r1, [pc, #76]	; (8007150 <_dtoa_r+0x630>)
 8007102:	2000      	movs	r0, #0
 8007104:	f7f9 f8c0 	bl	8000288 <__aeabi_dsub>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4640      	mov	r0, r8
 800710e:	4649      	mov	r1, r9
 8007110:	f7f9 fce4 	bl	8000adc <__aeabi_dcmplt>
 8007114:	2800      	cmp	r0, #0
 8007116:	f43f af35 	beq.w	8006f84 <_dtoa_r+0x464>
 800711a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800711c:	1e6b      	subs	r3, r5, #1
 800711e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007120:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007124:	2b30      	cmp	r3, #48	; 0x30
 8007126:	d0f8      	beq.n	800711a <_dtoa_r+0x5fa>
 8007128:	9700      	str	r7, [sp, #0]
 800712a:	e049      	b.n	80071c0 <_dtoa_r+0x6a0>
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <_dtoa_r+0x624>)
 800712e:	f7f9 fa63 	bl	80005f8 <__aeabi_dmul>
 8007132:	4680      	mov	r8, r0
 8007134:	4689      	mov	r9, r1
 8007136:	e7bd      	b.n	80070b4 <_dtoa_r+0x594>
 8007138:	08009c00 	.word	0x08009c00
 800713c:	08009bd8 	.word	0x08009bd8
 8007140:	3ff00000 	.word	0x3ff00000
 8007144:	40240000 	.word	0x40240000
 8007148:	401c0000 	.word	0x401c0000
 800714c:	40140000 	.word	0x40140000
 8007150:	3fe00000 	.word	0x3fe00000
 8007154:	9d01      	ldr	r5, [sp, #4]
 8007156:	4656      	mov	r6, sl
 8007158:	465f      	mov	r7, fp
 800715a:	4642      	mov	r2, r8
 800715c:	464b      	mov	r3, r9
 800715e:	4630      	mov	r0, r6
 8007160:	4639      	mov	r1, r7
 8007162:	f7f9 fb73 	bl	800084c <__aeabi_ddiv>
 8007166:	f7f9 fcf7 	bl	8000b58 <__aeabi_d2iz>
 800716a:	4682      	mov	sl, r0
 800716c:	f7f9 f9da 	bl	8000524 <__aeabi_i2d>
 8007170:	4642      	mov	r2, r8
 8007172:	464b      	mov	r3, r9
 8007174:	f7f9 fa40 	bl	80005f8 <__aeabi_dmul>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4630      	mov	r0, r6
 800717e:	4639      	mov	r1, r7
 8007180:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007184:	f7f9 f880 	bl	8000288 <__aeabi_dsub>
 8007188:	f805 6b01 	strb.w	r6, [r5], #1
 800718c:	9e01      	ldr	r6, [sp, #4]
 800718e:	9f03      	ldr	r7, [sp, #12]
 8007190:	1bae      	subs	r6, r5, r6
 8007192:	42b7      	cmp	r7, r6
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	d135      	bne.n	8007206 <_dtoa_r+0x6e6>
 800719a:	f7f9 f877 	bl	800028c <__adddf3>
 800719e:	4642      	mov	r2, r8
 80071a0:	464b      	mov	r3, r9
 80071a2:	4606      	mov	r6, r0
 80071a4:	460f      	mov	r7, r1
 80071a6:	f7f9 fcb7 	bl	8000b18 <__aeabi_dcmpgt>
 80071aa:	b9d0      	cbnz	r0, 80071e2 <_dtoa_r+0x6c2>
 80071ac:	4642      	mov	r2, r8
 80071ae:	464b      	mov	r3, r9
 80071b0:	4630      	mov	r0, r6
 80071b2:	4639      	mov	r1, r7
 80071b4:	f7f9 fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 80071b8:	b110      	cbz	r0, 80071c0 <_dtoa_r+0x6a0>
 80071ba:	f01a 0f01 	tst.w	sl, #1
 80071be:	d110      	bne.n	80071e2 <_dtoa_r+0x6c2>
 80071c0:	4620      	mov	r0, r4
 80071c2:	ee18 1a10 	vmov	r1, s16
 80071c6:	f000 fe75 	bl	8007eb4 <_Bfree>
 80071ca:	2300      	movs	r3, #0
 80071cc:	9800      	ldr	r0, [sp, #0]
 80071ce:	702b      	strb	r3, [r5, #0]
 80071d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071d2:	3001      	adds	r0, #1
 80071d4:	6018      	str	r0, [r3, #0]
 80071d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f43f acf1 	beq.w	8006bc0 <_dtoa_r+0xa0>
 80071de:	601d      	str	r5, [r3, #0]
 80071e0:	e4ee      	b.n	8006bc0 <_dtoa_r+0xa0>
 80071e2:	9f00      	ldr	r7, [sp, #0]
 80071e4:	462b      	mov	r3, r5
 80071e6:	461d      	mov	r5, r3
 80071e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071ec:	2a39      	cmp	r2, #57	; 0x39
 80071ee:	d106      	bne.n	80071fe <_dtoa_r+0x6de>
 80071f0:	9a01      	ldr	r2, [sp, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d1f7      	bne.n	80071e6 <_dtoa_r+0x6c6>
 80071f6:	9901      	ldr	r1, [sp, #4]
 80071f8:	2230      	movs	r2, #48	; 0x30
 80071fa:	3701      	adds	r7, #1
 80071fc:	700a      	strb	r2, [r1, #0]
 80071fe:	781a      	ldrb	r2, [r3, #0]
 8007200:	3201      	adds	r2, #1
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	e790      	b.n	8007128 <_dtoa_r+0x608>
 8007206:	4ba6      	ldr	r3, [pc, #664]	; (80074a0 <_dtoa_r+0x980>)
 8007208:	2200      	movs	r2, #0
 800720a:	f7f9 f9f5 	bl	80005f8 <__aeabi_dmul>
 800720e:	2200      	movs	r2, #0
 8007210:	2300      	movs	r3, #0
 8007212:	4606      	mov	r6, r0
 8007214:	460f      	mov	r7, r1
 8007216:	f7f9 fc57 	bl	8000ac8 <__aeabi_dcmpeq>
 800721a:	2800      	cmp	r0, #0
 800721c:	d09d      	beq.n	800715a <_dtoa_r+0x63a>
 800721e:	e7cf      	b.n	80071c0 <_dtoa_r+0x6a0>
 8007220:	9a08      	ldr	r2, [sp, #32]
 8007222:	2a00      	cmp	r2, #0
 8007224:	f000 80d7 	beq.w	80073d6 <_dtoa_r+0x8b6>
 8007228:	9a06      	ldr	r2, [sp, #24]
 800722a:	2a01      	cmp	r2, #1
 800722c:	f300 80ba 	bgt.w	80073a4 <_dtoa_r+0x884>
 8007230:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007232:	2a00      	cmp	r2, #0
 8007234:	f000 80b2 	beq.w	800739c <_dtoa_r+0x87c>
 8007238:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800723c:	9e07      	ldr	r6, [sp, #28]
 800723e:	9d04      	ldr	r5, [sp, #16]
 8007240:	9a04      	ldr	r2, [sp, #16]
 8007242:	441a      	add	r2, r3
 8007244:	9204      	str	r2, [sp, #16]
 8007246:	9a05      	ldr	r2, [sp, #20]
 8007248:	2101      	movs	r1, #1
 800724a:	441a      	add	r2, r3
 800724c:	4620      	mov	r0, r4
 800724e:	9205      	str	r2, [sp, #20]
 8007250:	f000 ff32 	bl	80080b8 <__i2b>
 8007254:	4607      	mov	r7, r0
 8007256:	2d00      	cmp	r5, #0
 8007258:	dd0c      	ble.n	8007274 <_dtoa_r+0x754>
 800725a:	9b05      	ldr	r3, [sp, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	dd09      	ble.n	8007274 <_dtoa_r+0x754>
 8007260:	42ab      	cmp	r3, r5
 8007262:	9a04      	ldr	r2, [sp, #16]
 8007264:	bfa8      	it	ge
 8007266:	462b      	movge	r3, r5
 8007268:	1ad2      	subs	r2, r2, r3
 800726a:	9204      	str	r2, [sp, #16]
 800726c:	9a05      	ldr	r2, [sp, #20]
 800726e:	1aed      	subs	r5, r5, r3
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	9305      	str	r3, [sp, #20]
 8007274:	9b07      	ldr	r3, [sp, #28]
 8007276:	b31b      	cbz	r3, 80072c0 <_dtoa_r+0x7a0>
 8007278:	9b08      	ldr	r3, [sp, #32]
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80af 	beq.w	80073de <_dtoa_r+0x8be>
 8007280:	2e00      	cmp	r6, #0
 8007282:	dd13      	ble.n	80072ac <_dtoa_r+0x78c>
 8007284:	4639      	mov	r1, r7
 8007286:	4632      	mov	r2, r6
 8007288:	4620      	mov	r0, r4
 800728a:	f000 ffd5 	bl	8008238 <__pow5mult>
 800728e:	ee18 2a10 	vmov	r2, s16
 8007292:	4601      	mov	r1, r0
 8007294:	4607      	mov	r7, r0
 8007296:	4620      	mov	r0, r4
 8007298:	f000 ff24 	bl	80080e4 <__multiply>
 800729c:	ee18 1a10 	vmov	r1, s16
 80072a0:	4680      	mov	r8, r0
 80072a2:	4620      	mov	r0, r4
 80072a4:	f000 fe06 	bl	8007eb4 <_Bfree>
 80072a8:	ee08 8a10 	vmov	s16, r8
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	1b9a      	subs	r2, r3, r6
 80072b0:	d006      	beq.n	80072c0 <_dtoa_r+0x7a0>
 80072b2:	ee18 1a10 	vmov	r1, s16
 80072b6:	4620      	mov	r0, r4
 80072b8:	f000 ffbe 	bl	8008238 <__pow5mult>
 80072bc:	ee08 0a10 	vmov	s16, r0
 80072c0:	2101      	movs	r1, #1
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 fef8 	bl	80080b8 <__i2b>
 80072c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	4606      	mov	r6, r0
 80072ce:	f340 8088 	ble.w	80073e2 <_dtoa_r+0x8c2>
 80072d2:	461a      	mov	r2, r3
 80072d4:	4601      	mov	r1, r0
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 ffae 	bl	8008238 <__pow5mult>
 80072dc:	9b06      	ldr	r3, [sp, #24]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	4606      	mov	r6, r0
 80072e2:	f340 8081 	ble.w	80073e8 <_dtoa_r+0x8c8>
 80072e6:	f04f 0800 	mov.w	r8, #0
 80072ea:	6933      	ldr	r3, [r6, #16]
 80072ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072f0:	6918      	ldr	r0, [r3, #16]
 80072f2:	f000 fe91 	bl	8008018 <__hi0bits>
 80072f6:	f1c0 0020 	rsb	r0, r0, #32
 80072fa:	9b05      	ldr	r3, [sp, #20]
 80072fc:	4418      	add	r0, r3
 80072fe:	f010 001f 	ands.w	r0, r0, #31
 8007302:	f000 8092 	beq.w	800742a <_dtoa_r+0x90a>
 8007306:	f1c0 0320 	rsb	r3, r0, #32
 800730a:	2b04      	cmp	r3, #4
 800730c:	f340 808a 	ble.w	8007424 <_dtoa_r+0x904>
 8007310:	f1c0 001c 	rsb	r0, r0, #28
 8007314:	9b04      	ldr	r3, [sp, #16]
 8007316:	4403      	add	r3, r0
 8007318:	9304      	str	r3, [sp, #16]
 800731a:	9b05      	ldr	r3, [sp, #20]
 800731c:	4403      	add	r3, r0
 800731e:	4405      	add	r5, r0
 8007320:	9305      	str	r3, [sp, #20]
 8007322:	9b04      	ldr	r3, [sp, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	dd07      	ble.n	8007338 <_dtoa_r+0x818>
 8007328:	ee18 1a10 	vmov	r1, s16
 800732c:	461a      	mov	r2, r3
 800732e:	4620      	mov	r0, r4
 8007330:	f000 ffdc 	bl	80082ec <__lshift>
 8007334:	ee08 0a10 	vmov	s16, r0
 8007338:	9b05      	ldr	r3, [sp, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	dd05      	ble.n	800734a <_dtoa_r+0x82a>
 800733e:	4631      	mov	r1, r6
 8007340:	461a      	mov	r2, r3
 8007342:	4620      	mov	r0, r4
 8007344:	f000 ffd2 	bl	80082ec <__lshift>
 8007348:	4606      	mov	r6, r0
 800734a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d06e      	beq.n	800742e <_dtoa_r+0x90e>
 8007350:	ee18 0a10 	vmov	r0, s16
 8007354:	4631      	mov	r1, r6
 8007356:	f001 f839 	bl	80083cc <__mcmp>
 800735a:	2800      	cmp	r0, #0
 800735c:	da67      	bge.n	800742e <_dtoa_r+0x90e>
 800735e:	9b00      	ldr	r3, [sp, #0]
 8007360:	3b01      	subs	r3, #1
 8007362:	ee18 1a10 	vmov	r1, s16
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	220a      	movs	r2, #10
 800736a:	2300      	movs	r3, #0
 800736c:	4620      	mov	r0, r4
 800736e:	f000 fdc3 	bl	8007ef8 <__multadd>
 8007372:	9b08      	ldr	r3, [sp, #32]
 8007374:	ee08 0a10 	vmov	s16, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 81b1 	beq.w	80076e0 <_dtoa_r+0xbc0>
 800737e:	2300      	movs	r3, #0
 8007380:	4639      	mov	r1, r7
 8007382:	220a      	movs	r2, #10
 8007384:	4620      	mov	r0, r4
 8007386:	f000 fdb7 	bl	8007ef8 <__multadd>
 800738a:	9b02      	ldr	r3, [sp, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	4607      	mov	r7, r0
 8007390:	f300 808e 	bgt.w	80074b0 <_dtoa_r+0x990>
 8007394:	9b06      	ldr	r3, [sp, #24]
 8007396:	2b02      	cmp	r3, #2
 8007398:	dc51      	bgt.n	800743e <_dtoa_r+0x91e>
 800739a:	e089      	b.n	80074b0 <_dtoa_r+0x990>
 800739c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800739e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073a2:	e74b      	b.n	800723c <_dtoa_r+0x71c>
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	1e5e      	subs	r6, r3, #1
 80073a8:	9b07      	ldr	r3, [sp, #28]
 80073aa:	42b3      	cmp	r3, r6
 80073ac:	bfbf      	itttt	lt
 80073ae:	9b07      	ldrlt	r3, [sp, #28]
 80073b0:	9607      	strlt	r6, [sp, #28]
 80073b2:	1af2      	sublt	r2, r6, r3
 80073b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80073b6:	bfb6      	itet	lt
 80073b8:	189b      	addlt	r3, r3, r2
 80073ba:	1b9e      	subge	r6, r3, r6
 80073bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	bfb8      	it	lt
 80073c2:	2600      	movlt	r6, #0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	bfb7      	itett	lt
 80073c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80073cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80073d0:	1a9d      	sublt	r5, r3, r2
 80073d2:	2300      	movlt	r3, #0
 80073d4:	e734      	b.n	8007240 <_dtoa_r+0x720>
 80073d6:	9e07      	ldr	r6, [sp, #28]
 80073d8:	9d04      	ldr	r5, [sp, #16]
 80073da:	9f08      	ldr	r7, [sp, #32]
 80073dc:	e73b      	b.n	8007256 <_dtoa_r+0x736>
 80073de:	9a07      	ldr	r2, [sp, #28]
 80073e0:	e767      	b.n	80072b2 <_dtoa_r+0x792>
 80073e2:	9b06      	ldr	r3, [sp, #24]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	dc18      	bgt.n	800741a <_dtoa_r+0x8fa>
 80073e8:	f1ba 0f00 	cmp.w	sl, #0
 80073ec:	d115      	bne.n	800741a <_dtoa_r+0x8fa>
 80073ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073f2:	b993      	cbnz	r3, 800741a <_dtoa_r+0x8fa>
 80073f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073f8:	0d1b      	lsrs	r3, r3, #20
 80073fa:	051b      	lsls	r3, r3, #20
 80073fc:	b183      	cbz	r3, 8007420 <_dtoa_r+0x900>
 80073fe:	9b04      	ldr	r3, [sp, #16]
 8007400:	3301      	adds	r3, #1
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	9b05      	ldr	r3, [sp, #20]
 8007406:	3301      	adds	r3, #1
 8007408:	9305      	str	r3, [sp, #20]
 800740a:	f04f 0801 	mov.w	r8, #1
 800740e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007410:	2b00      	cmp	r3, #0
 8007412:	f47f af6a 	bne.w	80072ea <_dtoa_r+0x7ca>
 8007416:	2001      	movs	r0, #1
 8007418:	e76f      	b.n	80072fa <_dtoa_r+0x7da>
 800741a:	f04f 0800 	mov.w	r8, #0
 800741e:	e7f6      	b.n	800740e <_dtoa_r+0x8ee>
 8007420:	4698      	mov	r8, r3
 8007422:	e7f4      	b.n	800740e <_dtoa_r+0x8ee>
 8007424:	f43f af7d 	beq.w	8007322 <_dtoa_r+0x802>
 8007428:	4618      	mov	r0, r3
 800742a:	301c      	adds	r0, #28
 800742c:	e772      	b.n	8007314 <_dtoa_r+0x7f4>
 800742e:	9b03      	ldr	r3, [sp, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	dc37      	bgt.n	80074a4 <_dtoa_r+0x984>
 8007434:	9b06      	ldr	r3, [sp, #24]
 8007436:	2b02      	cmp	r3, #2
 8007438:	dd34      	ble.n	80074a4 <_dtoa_r+0x984>
 800743a:	9b03      	ldr	r3, [sp, #12]
 800743c:	9302      	str	r3, [sp, #8]
 800743e:	9b02      	ldr	r3, [sp, #8]
 8007440:	b96b      	cbnz	r3, 800745e <_dtoa_r+0x93e>
 8007442:	4631      	mov	r1, r6
 8007444:	2205      	movs	r2, #5
 8007446:	4620      	mov	r0, r4
 8007448:	f000 fd56 	bl	8007ef8 <__multadd>
 800744c:	4601      	mov	r1, r0
 800744e:	4606      	mov	r6, r0
 8007450:	ee18 0a10 	vmov	r0, s16
 8007454:	f000 ffba 	bl	80083cc <__mcmp>
 8007458:	2800      	cmp	r0, #0
 800745a:	f73f adbb 	bgt.w	8006fd4 <_dtoa_r+0x4b4>
 800745e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007460:	9d01      	ldr	r5, [sp, #4]
 8007462:	43db      	mvns	r3, r3
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	f04f 0800 	mov.w	r8, #0
 800746a:	4631      	mov	r1, r6
 800746c:	4620      	mov	r0, r4
 800746e:	f000 fd21 	bl	8007eb4 <_Bfree>
 8007472:	2f00      	cmp	r7, #0
 8007474:	f43f aea4 	beq.w	80071c0 <_dtoa_r+0x6a0>
 8007478:	f1b8 0f00 	cmp.w	r8, #0
 800747c:	d005      	beq.n	800748a <_dtoa_r+0x96a>
 800747e:	45b8      	cmp	r8, r7
 8007480:	d003      	beq.n	800748a <_dtoa_r+0x96a>
 8007482:	4641      	mov	r1, r8
 8007484:	4620      	mov	r0, r4
 8007486:	f000 fd15 	bl	8007eb4 <_Bfree>
 800748a:	4639      	mov	r1, r7
 800748c:	4620      	mov	r0, r4
 800748e:	f000 fd11 	bl	8007eb4 <_Bfree>
 8007492:	e695      	b.n	80071c0 <_dtoa_r+0x6a0>
 8007494:	2600      	movs	r6, #0
 8007496:	4637      	mov	r7, r6
 8007498:	e7e1      	b.n	800745e <_dtoa_r+0x93e>
 800749a:	9700      	str	r7, [sp, #0]
 800749c:	4637      	mov	r7, r6
 800749e:	e599      	b.n	8006fd4 <_dtoa_r+0x4b4>
 80074a0:	40240000 	.word	0x40240000
 80074a4:	9b08      	ldr	r3, [sp, #32]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 80ca 	beq.w	8007640 <_dtoa_r+0xb20>
 80074ac:	9b03      	ldr	r3, [sp, #12]
 80074ae:	9302      	str	r3, [sp, #8]
 80074b0:	2d00      	cmp	r5, #0
 80074b2:	dd05      	ble.n	80074c0 <_dtoa_r+0x9a0>
 80074b4:	4639      	mov	r1, r7
 80074b6:	462a      	mov	r2, r5
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 ff17 	bl	80082ec <__lshift>
 80074be:	4607      	mov	r7, r0
 80074c0:	f1b8 0f00 	cmp.w	r8, #0
 80074c4:	d05b      	beq.n	800757e <_dtoa_r+0xa5e>
 80074c6:	6879      	ldr	r1, [r7, #4]
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fcb3 	bl	8007e34 <_Balloc>
 80074ce:	4605      	mov	r5, r0
 80074d0:	b928      	cbnz	r0, 80074de <_dtoa_r+0x9be>
 80074d2:	4b87      	ldr	r3, [pc, #540]	; (80076f0 <_dtoa_r+0xbd0>)
 80074d4:	4602      	mov	r2, r0
 80074d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80074da:	f7ff bb3b 	b.w	8006b54 <_dtoa_r+0x34>
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	3202      	adds	r2, #2
 80074e2:	0092      	lsls	r2, r2, #2
 80074e4:	f107 010c 	add.w	r1, r7, #12
 80074e8:	300c      	adds	r0, #12
 80074ea:	f000 fc95 	bl	8007e18 <memcpy>
 80074ee:	2201      	movs	r2, #1
 80074f0:	4629      	mov	r1, r5
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 fefa 	bl	80082ec <__lshift>
 80074f8:	9b01      	ldr	r3, [sp, #4]
 80074fa:	f103 0901 	add.w	r9, r3, #1
 80074fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007502:	4413      	add	r3, r2
 8007504:	9305      	str	r3, [sp, #20]
 8007506:	f00a 0301 	and.w	r3, sl, #1
 800750a:	46b8      	mov	r8, r7
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	4607      	mov	r7, r0
 8007510:	4631      	mov	r1, r6
 8007512:	ee18 0a10 	vmov	r0, s16
 8007516:	f7ff fa77 	bl	8006a08 <quorem>
 800751a:	4641      	mov	r1, r8
 800751c:	9002      	str	r0, [sp, #8]
 800751e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007522:	ee18 0a10 	vmov	r0, s16
 8007526:	f000 ff51 	bl	80083cc <__mcmp>
 800752a:	463a      	mov	r2, r7
 800752c:	9003      	str	r0, [sp, #12]
 800752e:	4631      	mov	r1, r6
 8007530:	4620      	mov	r0, r4
 8007532:	f000 ff67 	bl	8008404 <__mdiff>
 8007536:	68c2      	ldr	r2, [r0, #12]
 8007538:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800753c:	4605      	mov	r5, r0
 800753e:	bb02      	cbnz	r2, 8007582 <_dtoa_r+0xa62>
 8007540:	4601      	mov	r1, r0
 8007542:	ee18 0a10 	vmov	r0, s16
 8007546:	f000 ff41 	bl	80083cc <__mcmp>
 800754a:	4602      	mov	r2, r0
 800754c:	4629      	mov	r1, r5
 800754e:	4620      	mov	r0, r4
 8007550:	9207      	str	r2, [sp, #28]
 8007552:	f000 fcaf 	bl	8007eb4 <_Bfree>
 8007556:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800755a:	ea43 0102 	orr.w	r1, r3, r2
 800755e:	9b04      	ldr	r3, [sp, #16]
 8007560:	430b      	orrs	r3, r1
 8007562:	464d      	mov	r5, r9
 8007564:	d10f      	bne.n	8007586 <_dtoa_r+0xa66>
 8007566:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800756a:	d02a      	beq.n	80075c2 <_dtoa_r+0xaa2>
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	dd02      	ble.n	8007578 <_dtoa_r+0xa58>
 8007572:	9b02      	ldr	r3, [sp, #8]
 8007574:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007578:	f88b a000 	strb.w	sl, [fp]
 800757c:	e775      	b.n	800746a <_dtoa_r+0x94a>
 800757e:	4638      	mov	r0, r7
 8007580:	e7ba      	b.n	80074f8 <_dtoa_r+0x9d8>
 8007582:	2201      	movs	r2, #1
 8007584:	e7e2      	b.n	800754c <_dtoa_r+0xa2c>
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	db04      	blt.n	8007596 <_dtoa_r+0xa76>
 800758c:	9906      	ldr	r1, [sp, #24]
 800758e:	430b      	orrs	r3, r1
 8007590:	9904      	ldr	r1, [sp, #16]
 8007592:	430b      	orrs	r3, r1
 8007594:	d122      	bne.n	80075dc <_dtoa_r+0xabc>
 8007596:	2a00      	cmp	r2, #0
 8007598:	ddee      	ble.n	8007578 <_dtoa_r+0xa58>
 800759a:	ee18 1a10 	vmov	r1, s16
 800759e:	2201      	movs	r2, #1
 80075a0:	4620      	mov	r0, r4
 80075a2:	f000 fea3 	bl	80082ec <__lshift>
 80075a6:	4631      	mov	r1, r6
 80075a8:	ee08 0a10 	vmov	s16, r0
 80075ac:	f000 ff0e 	bl	80083cc <__mcmp>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	dc03      	bgt.n	80075bc <_dtoa_r+0xa9c>
 80075b4:	d1e0      	bne.n	8007578 <_dtoa_r+0xa58>
 80075b6:	f01a 0f01 	tst.w	sl, #1
 80075ba:	d0dd      	beq.n	8007578 <_dtoa_r+0xa58>
 80075bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075c0:	d1d7      	bne.n	8007572 <_dtoa_r+0xa52>
 80075c2:	2339      	movs	r3, #57	; 0x39
 80075c4:	f88b 3000 	strb.w	r3, [fp]
 80075c8:	462b      	mov	r3, r5
 80075ca:	461d      	mov	r5, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075d2:	2a39      	cmp	r2, #57	; 0x39
 80075d4:	d071      	beq.n	80076ba <_dtoa_r+0xb9a>
 80075d6:	3201      	adds	r2, #1
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	e746      	b.n	800746a <_dtoa_r+0x94a>
 80075dc:	2a00      	cmp	r2, #0
 80075de:	dd07      	ble.n	80075f0 <_dtoa_r+0xad0>
 80075e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075e4:	d0ed      	beq.n	80075c2 <_dtoa_r+0xaa2>
 80075e6:	f10a 0301 	add.w	r3, sl, #1
 80075ea:	f88b 3000 	strb.w	r3, [fp]
 80075ee:	e73c      	b.n	800746a <_dtoa_r+0x94a>
 80075f0:	9b05      	ldr	r3, [sp, #20]
 80075f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80075f6:	4599      	cmp	r9, r3
 80075f8:	d047      	beq.n	800768a <_dtoa_r+0xb6a>
 80075fa:	ee18 1a10 	vmov	r1, s16
 80075fe:	2300      	movs	r3, #0
 8007600:	220a      	movs	r2, #10
 8007602:	4620      	mov	r0, r4
 8007604:	f000 fc78 	bl	8007ef8 <__multadd>
 8007608:	45b8      	cmp	r8, r7
 800760a:	ee08 0a10 	vmov	s16, r0
 800760e:	f04f 0300 	mov.w	r3, #0
 8007612:	f04f 020a 	mov.w	r2, #10
 8007616:	4641      	mov	r1, r8
 8007618:	4620      	mov	r0, r4
 800761a:	d106      	bne.n	800762a <_dtoa_r+0xb0a>
 800761c:	f000 fc6c 	bl	8007ef8 <__multadd>
 8007620:	4680      	mov	r8, r0
 8007622:	4607      	mov	r7, r0
 8007624:	f109 0901 	add.w	r9, r9, #1
 8007628:	e772      	b.n	8007510 <_dtoa_r+0x9f0>
 800762a:	f000 fc65 	bl	8007ef8 <__multadd>
 800762e:	4639      	mov	r1, r7
 8007630:	4680      	mov	r8, r0
 8007632:	2300      	movs	r3, #0
 8007634:	220a      	movs	r2, #10
 8007636:	4620      	mov	r0, r4
 8007638:	f000 fc5e 	bl	8007ef8 <__multadd>
 800763c:	4607      	mov	r7, r0
 800763e:	e7f1      	b.n	8007624 <_dtoa_r+0xb04>
 8007640:	9b03      	ldr	r3, [sp, #12]
 8007642:	9302      	str	r3, [sp, #8]
 8007644:	9d01      	ldr	r5, [sp, #4]
 8007646:	ee18 0a10 	vmov	r0, s16
 800764a:	4631      	mov	r1, r6
 800764c:	f7ff f9dc 	bl	8006a08 <quorem>
 8007650:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007654:	9b01      	ldr	r3, [sp, #4]
 8007656:	f805 ab01 	strb.w	sl, [r5], #1
 800765a:	1aea      	subs	r2, r5, r3
 800765c:	9b02      	ldr	r3, [sp, #8]
 800765e:	4293      	cmp	r3, r2
 8007660:	dd09      	ble.n	8007676 <_dtoa_r+0xb56>
 8007662:	ee18 1a10 	vmov	r1, s16
 8007666:	2300      	movs	r3, #0
 8007668:	220a      	movs	r2, #10
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fc44 	bl	8007ef8 <__multadd>
 8007670:	ee08 0a10 	vmov	s16, r0
 8007674:	e7e7      	b.n	8007646 <_dtoa_r+0xb26>
 8007676:	9b02      	ldr	r3, [sp, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	bfc8      	it	gt
 800767c:	461d      	movgt	r5, r3
 800767e:	9b01      	ldr	r3, [sp, #4]
 8007680:	bfd8      	it	le
 8007682:	2501      	movle	r5, #1
 8007684:	441d      	add	r5, r3
 8007686:	f04f 0800 	mov.w	r8, #0
 800768a:	ee18 1a10 	vmov	r1, s16
 800768e:	2201      	movs	r2, #1
 8007690:	4620      	mov	r0, r4
 8007692:	f000 fe2b 	bl	80082ec <__lshift>
 8007696:	4631      	mov	r1, r6
 8007698:	ee08 0a10 	vmov	s16, r0
 800769c:	f000 fe96 	bl	80083cc <__mcmp>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	dc91      	bgt.n	80075c8 <_dtoa_r+0xaa8>
 80076a4:	d102      	bne.n	80076ac <_dtoa_r+0xb8c>
 80076a6:	f01a 0f01 	tst.w	sl, #1
 80076aa:	d18d      	bne.n	80075c8 <_dtoa_r+0xaa8>
 80076ac:	462b      	mov	r3, r5
 80076ae:	461d      	mov	r5, r3
 80076b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076b4:	2a30      	cmp	r2, #48	; 0x30
 80076b6:	d0fa      	beq.n	80076ae <_dtoa_r+0xb8e>
 80076b8:	e6d7      	b.n	800746a <_dtoa_r+0x94a>
 80076ba:	9a01      	ldr	r2, [sp, #4]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d184      	bne.n	80075ca <_dtoa_r+0xaaa>
 80076c0:	9b00      	ldr	r3, [sp, #0]
 80076c2:	3301      	adds	r3, #1
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	2331      	movs	r3, #49	; 0x31
 80076c8:	7013      	strb	r3, [r2, #0]
 80076ca:	e6ce      	b.n	800746a <_dtoa_r+0x94a>
 80076cc:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <_dtoa_r+0xbd4>)
 80076ce:	f7ff ba95 	b.w	8006bfc <_dtoa_r+0xdc>
 80076d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f47f aa6e 	bne.w	8006bb6 <_dtoa_r+0x96>
 80076da:	4b07      	ldr	r3, [pc, #28]	; (80076f8 <_dtoa_r+0xbd8>)
 80076dc:	f7ff ba8e 	b.w	8006bfc <_dtoa_r+0xdc>
 80076e0:	9b02      	ldr	r3, [sp, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dcae      	bgt.n	8007644 <_dtoa_r+0xb24>
 80076e6:	9b06      	ldr	r3, [sp, #24]
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	f73f aea8 	bgt.w	800743e <_dtoa_r+0x91e>
 80076ee:	e7a9      	b.n	8007644 <_dtoa_r+0xb24>
 80076f0:	08009af0 	.word	0x08009af0
 80076f4:	080098f4 	.word	0x080098f4
 80076f8:	08009a71 	.word	0x08009a71

080076fc <rshift>:
 80076fc:	6903      	ldr	r3, [r0, #16]
 80076fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007702:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007706:	ea4f 1261 	mov.w	r2, r1, asr #5
 800770a:	f100 0414 	add.w	r4, r0, #20
 800770e:	dd45      	ble.n	800779c <rshift+0xa0>
 8007710:	f011 011f 	ands.w	r1, r1, #31
 8007714:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007718:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800771c:	d10c      	bne.n	8007738 <rshift+0x3c>
 800771e:	f100 0710 	add.w	r7, r0, #16
 8007722:	4629      	mov	r1, r5
 8007724:	42b1      	cmp	r1, r6
 8007726:	d334      	bcc.n	8007792 <rshift+0x96>
 8007728:	1a9b      	subs	r3, r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	1eea      	subs	r2, r5, #3
 800772e:	4296      	cmp	r6, r2
 8007730:	bf38      	it	cc
 8007732:	2300      	movcc	r3, #0
 8007734:	4423      	add	r3, r4
 8007736:	e015      	b.n	8007764 <rshift+0x68>
 8007738:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800773c:	f1c1 0820 	rsb	r8, r1, #32
 8007740:	40cf      	lsrs	r7, r1
 8007742:	f105 0e04 	add.w	lr, r5, #4
 8007746:	46a1      	mov	r9, r4
 8007748:	4576      	cmp	r6, lr
 800774a:	46f4      	mov	ip, lr
 800774c:	d815      	bhi.n	800777a <rshift+0x7e>
 800774e:	1a9a      	subs	r2, r3, r2
 8007750:	0092      	lsls	r2, r2, #2
 8007752:	3a04      	subs	r2, #4
 8007754:	3501      	adds	r5, #1
 8007756:	42ae      	cmp	r6, r5
 8007758:	bf38      	it	cc
 800775a:	2200      	movcc	r2, #0
 800775c:	18a3      	adds	r3, r4, r2
 800775e:	50a7      	str	r7, [r4, r2]
 8007760:	b107      	cbz	r7, 8007764 <rshift+0x68>
 8007762:	3304      	adds	r3, #4
 8007764:	1b1a      	subs	r2, r3, r4
 8007766:	42a3      	cmp	r3, r4
 8007768:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800776c:	bf08      	it	eq
 800776e:	2300      	moveq	r3, #0
 8007770:	6102      	str	r2, [r0, #16]
 8007772:	bf08      	it	eq
 8007774:	6143      	streq	r3, [r0, #20]
 8007776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800777a:	f8dc c000 	ldr.w	ip, [ip]
 800777e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007782:	ea4c 0707 	orr.w	r7, ip, r7
 8007786:	f849 7b04 	str.w	r7, [r9], #4
 800778a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800778e:	40cf      	lsrs	r7, r1
 8007790:	e7da      	b.n	8007748 <rshift+0x4c>
 8007792:	f851 cb04 	ldr.w	ip, [r1], #4
 8007796:	f847 cf04 	str.w	ip, [r7, #4]!
 800779a:	e7c3      	b.n	8007724 <rshift+0x28>
 800779c:	4623      	mov	r3, r4
 800779e:	e7e1      	b.n	8007764 <rshift+0x68>

080077a0 <__hexdig_fun>:
 80077a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80077a4:	2b09      	cmp	r3, #9
 80077a6:	d802      	bhi.n	80077ae <__hexdig_fun+0xe>
 80077a8:	3820      	subs	r0, #32
 80077aa:	b2c0      	uxtb	r0, r0
 80077ac:	4770      	bx	lr
 80077ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	d801      	bhi.n	80077ba <__hexdig_fun+0x1a>
 80077b6:	3847      	subs	r0, #71	; 0x47
 80077b8:	e7f7      	b.n	80077aa <__hexdig_fun+0xa>
 80077ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80077be:	2b05      	cmp	r3, #5
 80077c0:	d801      	bhi.n	80077c6 <__hexdig_fun+0x26>
 80077c2:	3827      	subs	r0, #39	; 0x27
 80077c4:	e7f1      	b.n	80077aa <__hexdig_fun+0xa>
 80077c6:	2000      	movs	r0, #0
 80077c8:	4770      	bx	lr
	...

080077cc <__gethex>:
 80077cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	ed2d 8b02 	vpush	{d8}
 80077d4:	b089      	sub	sp, #36	; 0x24
 80077d6:	ee08 0a10 	vmov	s16, r0
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	4bb4      	ldr	r3, [pc, #720]	; (8007ab0 <__gethex+0x2e4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	4618      	mov	r0, r3
 80077e4:	468b      	mov	fp, r1
 80077e6:	4690      	mov	r8, r2
 80077e8:	f7f8 fcf2 	bl	80001d0 <strlen>
 80077ec:	9b01      	ldr	r3, [sp, #4]
 80077ee:	f8db 2000 	ldr.w	r2, [fp]
 80077f2:	4403      	add	r3, r0
 80077f4:	4682      	mov	sl, r0
 80077f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80077fa:	9305      	str	r3, [sp, #20]
 80077fc:	1c93      	adds	r3, r2, #2
 80077fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007802:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007806:	32fe      	adds	r2, #254	; 0xfe
 8007808:	18d1      	adds	r1, r2, r3
 800780a:	461f      	mov	r7, r3
 800780c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007810:	9100      	str	r1, [sp, #0]
 8007812:	2830      	cmp	r0, #48	; 0x30
 8007814:	d0f8      	beq.n	8007808 <__gethex+0x3c>
 8007816:	f7ff ffc3 	bl	80077a0 <__hexdig_fun>
 800781a:	4604      	mov	r4, r0
 800781c:	2800      	cmp	r0, #0
 800781e:	d13a      	bne.n	8007896 <__gethex+0xca>
 8007820:	9901      	ldr	r1, [sp, #4]
 8007822:	4652      	mov	r2, sl
 8007824:	4638      	mov	r0, r7
 8007826:	f001 fa33 	bl	8008c90 <strncmp>
 800782a:	4605      	mov	r5, r0
 800782c:	2800      	cmp	r0, #0
 800782e:	d168      	bne.n	8007902 <__gethex+0x136>
 8007830:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007834:	eb07 060a 	add.w	r6, r7, sl
 8007838:	f7ff ffb2 	bl	80077a0 <__hexdig_fun>
 800783c:	2800      	cmp	r0, #0
 800783e:	d062      	beq.n	8007906 <__gethex+0x13a>
 8007840:	4633      	mov	r3, r6
 8007842:	7818      	ldrb	r0, [r3, #0]
 8007844:	2830      	cmp	r0, #48	; 0x30
 8007846:	461f      	mov	r7, r3
 8007848:	f103 0301 	add.w	r3, r3, #1
 800784c:	d0f9      	beq.n	8007842 <__gethex+0x76>
 800784e:	f7ff ffa7 	bl	80077a0 <__hexdig_fun>
 8007852:	2301      	movs	r3, #1
 8007854:	fab0 f480 	clz	r4, r0
 8007858:	0964      	lsrs	r4, r4, #5
 800785a:	4635      	mov	r5, r6
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	463a      	mov	r2, r7
 8007860:	4616      	mov	r6, r2
 8007862:	3201      	adds	r2, #1
 8007864:	7830      	ldrb	r0, [r6, #0]
 8007866:	f7ff ff9b 	bl	80077a0 <__hexdig_fun>
 800786a:	2800      	cmp	r0, #0
 800786c:	d1f8      	bne.n	8007860 <__gethex+0x94>
 800786e:	9901      	ldr	r1, [sp, #4]
 8007870:	4652      	mov	r2, sl
 8007872:	4630      	mov	r0, r6
 8007874:	f001 fa0c 	bl	8008c90 <strncmp>
 8007878:	b980      	cbnz	r0, 800789c <__gethex+0xd0>
 800787a:	b94d      	cbnz	r5, 8007890 <__gethex+0xc4>
 800787c:	eb06 050a 	add.w	r5, r6, sl
 8007880:	462a      	mov	r2, r5
 8007882:	4616      	mov	r6, r2
 8007884:	3201      	adds	r2, #1
 8007886:	7830      	ldrb	r0, [r6, #0]
 8007888:	f7ff ff8a 	bl	80077a0 <__hexdig_fun>
 800788c:	2800      	cmp	r0, #0
 800788e:	d1f8      	bne.n	8007882 <__gethex+0xb6>
 8007890:	1bad      	subs	r5, r5, r6
 8007892:	00ad      	lsls	r5, r5, #2
 8007894:	e004      	b.n	80078a0 <__gethex+0xd4>
 8007896:	2400      	movs	r4, #0
 8007898:	4625      	mov	r5, r4
 800789a:	e7e0      	b.n	800785e <__gethex+0x92>
 800789c:	2d00      	cmp	r5, #0
 800789e:	d1f7      	bne.n	8007890 <__gethex+0xc4>
 80078a0:	7833      	ldrb	r3, [r6, #0]
 80078a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078a6:	2b50      	cmp	r3, #80	; 0x50
 80078a8:	d13b      	bne.n	8007922 <__gethex+0x156>
 80078aa:	7873      	ldrb	r3, [r6, #1]
 80078ac:	2b2b      	cmp	r3, #43	; 0x2b
 80078ae:	d02c      	beq.n	800790a <__gethex+0x13e>
 80078b0:	2b2d      	cmp	r3, #45	; 0x2d
 80078b2:	d02e      	beq.n	8007912 <__gethex+0x146>
 80078b4:	1c71      	adds	r1, r6, #1
 80078b6:	f04f 0900 	mov.w	r9, #0
 80078ba:	7808      	ldrb	r0, [r1, #0]
 80078bc:	f7ff ff70 	bl	80077a0 <__hexdig_fun>
 80078c0:	1e43      	subs	r3, r0, #1
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b18      	cmp	r3, #24
 80078c6:	d82c      	bhi.n	8007922 <__gethex+0x156>
 80078c8:	f1a0 0210 	sub.w	r2, r0, #16
 80078cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078d0:	f7ff ff66 	bl	80077a0 <__hexdig_fun>
 80078d4:	1e43      	subs	r3, r0, #1
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b18      	cmp	r3, #24
 80078da:	d91d      	bls.n	8007918 <__gethex+0x14c>
 80078dc:	f1b9 0f00 	cmp.w	r9, #0
 80078e0:	d000      	beq.n	80078e4 <__gethex+0x118>
 80078e2:	4252      	negs	r2, r2
 80078e4:	4415      	add	r5, r2
 80078e6:	f8cb 1000 	str.w	r1, [fp]
 80078ea:	b1e4      	cbz	r4, 8007926 <__gethex+0x15a>
 80078ec:	9b00      	ldr	r3, [sp, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bf14      	ite	ne
 80078f2:	2700      	movne	r7, #0
 80078f4:	2706      	moveq	r7, #6
 80078f6:	4638      	mov	r0, r7
 80078f8:	b009      	add	sp, #36	; 0x24
 80078fa:	ecbd 8b02 	vpop	{d8}
 80078fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007902:	463e      	mov	r6, r7
 8007904:	4625      	mov	r5, r4
 8007906:	2401      	movs	r4, #1
 8007908:	e7ca      	b.n	80078a0 <__gethex+0xd4>
 800790a:	f04f 0900 	mov.w	r9, #0
 800790e:	1cb1      	adds	r1, r6, #2
 8007910:	e7d3      	b.n	80078ba <__gethex+0xee>
 8007912:	f04f 0901 	mov.w	r9, #1
 8007916:	e7fa      	b.n	800790e <__gethex+0x142>
 8007918:	230a      	movs	r3, #10
 800791a:	fb03 0202 	mla	r2, r3, r2, r0
 800791e:	3a10      	subs	r2, #16
 8007920:	e7d4      	b.n	80078cc <__gethex+0x100>
 8007922:	4631      	mov	r1, r6
 8007924:	e7df      	b.n	80078e6 <__gethex+0x11a>
 8007926:	1bf3      	subs	r3, r6, r7
 8007928:	3b01      	subs	r3, #1
 800792a:	4621      	mov	r1, r4
 800792c:	2b07      	cmp	r3, #7
 800792e:	dc0b      	bgt.n	8007948 <__gethex+0x17c>
 8007930:	ee18 0a10 	vmov	r0, s16
 8007934:	f000 fa7e 	bl	8007e34 <_Balloc>
 8007938:	4604      	mov	r4, r0
 800793a:	b940      	cbnz	r0, 800794e <__gethex+0x182>
 800793c:	4b5d      	ldr	r3, [pc, #372]	; (8007ab4 <__gethex+0x2e8>)
 800793e:	4602      	mov	r2, r0
 8007940:	21de      	movs	r1, #222	; 0xde
 8007942:	485d      	ldr	r0, [pc, #372]	; (8007ab8 <__gethex+0x2ec>)
 8007944:	f001 f9c6 	bl	8008cd4 <__assert_func>
 8007948:	3101      	adds	r1, #1
 800794a:	105b      	asrs	r3, r3, #1
 800794c:	e7ee      	b.n	800792c <__gethex+0x160>
 800794e:	f100 0914 	add.w	r9, r0, #20
 8007952:	f04f 0b00 	mov.w	fp, #0
 8007956:	f1ca 0301 	rsb	r3, sl, #1
 800795a:	f8cd 9008 	str.w	r9, [sp, #8]
 800795e:	f8cd b000 	str.w	fp, [sp]
 8007962:	9306      	str	r3, [sp, #24]
 8007964:	42b7      	cmp	r7, r6
 8007966:	d340      	bcc.n	80079ea <__gethex+0x21e>
 8007968:	9802      	ldr	r0, [sp, #8]
 800796a:	9b00      	ldr	r3, [sp, #0]
 800796c:	f840 3b04 	str.w	r3, [r0], #4
 8007970:	eba0 0009 	sub.w	r0, r0, r9
 8007974:	1080      	asrs	r0, r0, #2
 8007976:	0146      	lsls	r6, r0, #5
 8007978:	6120      	str	r0, [r4, #16]
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fb4c 	bl	8008018 <__hi0bits>
 8007980:	1a30      	subs	r0, r6, r0
 8007982:	f8d8 6000 	ldr.w	r6, [r8]
 8007986:	42b0      	cmp	r0, r6
 8007988:	dd63      	ble.n	8007a52 <__gethex+0x286>
 800798a:	1b87      	subs	r7, r0, r6
 800798c:	4639      	mov	r1, r7
 800798e:	4620      	mov	r0, r4
 8007990:	f000 fef0 	bl	8008774 <__any_on>
 8007994:	4682      	mov	sl, r0
 8007996:	b1a8      	cbz	r0, 80079c4 <__gethex+0x1f8>
 8007998:	1e7b      	subs	r3, r7, #1
 800799a:	1159      	asrs	r1, r3, #5
 800799c:	f003 021f 	and.w	r2, r3, #31
 80079a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80079a4:	f04f 0a01 	mov.w	sl, #1
 80079a8:	fa0a f202 	lsl.w	r2, sl, r2
 80079ac:	420a      	tst	r2, r1
 80079ae:	d009      	beq.n	80079c4 <__gethex+0x1f8>
 80079b0:	4553      	cmp	r3, sl
 80079b2:	dd05      	ble.n	80079c0 <__gethex+0x1f4>
 80079b4:	1eb9      	subs	r1, r7, #2
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 fedc 	bl	8008774 <__any_on>
 80079bc:	2800      	cmp	r0, #0
 80079be:	d145      	bne.n	8007a4c <__gethex+0x280>
 80079c0:	f04f 0a02 	mov.w	sl, #2
 80079c4:	4639      	mov	r1, r7
 80079c6:	4620      	mov	r0, r4
 80079c8:	f7ff fe98 	bl	80076fc <rshift>
 80079cc:	443d      	add	r5, r7
 80079ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079d2:	42ab      	cmp	r3, r5
 80079d4:	da4c      	bge.n	8007a70 <__gethex+0x2a4>
 80079d6:	ee18 0a10 	vmov	r0, s16
 80079da:	4621      	mov	r1, r4
 80079dc:	f000 fa6a 	bl	8007eb4 <_Bfree>
 80079e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079e2:	2300      	movs	r3, #0
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	27a3      	movs	r7, #163	; 0xa3
 80079e8:	e785      	b.n	80078f6 <__gethex+0x12a>
 80079ea:	1e73      	subs	r3, r6, #1
 80079ec:	9a05      	ldr	r2, [sp, #20]
 80079ee:	9303      	str	r3, [sp, #12]
 80079f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d019      	beq.n	8007a2c <__gethex+0x260>
 80079f8:	f1bb 0f20 	cmp.w	fp, #32
 80079fc:	d107      	bne.n	8007a0e <__gethex+0x242>
 80079fe:	9b02      	ldr	r3, [sp, #8]
 8007a00:	9a00      	ldr	r2, [sp, #0]
 8007a02:	f843 2b04 	str.w	r2, [r3], #4
 8007a06:	9302      	str	r3, [sp, #8]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	469b      	mov	fp, r3
 8007a0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007a12:	f7ff fec5 	bl	80077a0 <__hexdig_fun>
 8007a16:	9b00      	ldr	r3, [sp, #0]
 8007a18:	f000 000f 	and.w	r0, r0, #15
 8007a1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007a20:	4303      	orrs	r3, r0
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	f10b 0b04 	add.w	fp, fp, #4
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	e00d      	b.n	8007a48 <__gethex+0x27c>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	9a06      	ldr	r2, [sp, #24]
 8007a30:	4413      	add	r3, r2
 8007a32:	42bb      	cmp	r3, r7
 8007a34:	d3e0      	bcc.n	80079f8 <__gethex+0x22c>
 8007a36:	4618      	mov	r0, r3
 8007a38:	9901      	ldr	r1, [sp, #4]
 8007a3a:	9307      	str	r3, [sp, #28]
 8007a3c:	4652      	mov	r2, sl
 8007a3e:	f001 f927 	bl	8008c90 <strncmp>
 8007a42:	9b07      	ldr	r3, [sp, #28]
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d1d7      	bne.n	80079f8 <__gethex+0x22c>
 8007a48:	461e      	mov	r6, r3
 8007a4a:	e78b      	b.n	8007964 <__gethex+0x198>
 8007a4c:	f04f 0a03 	mov.w	sl, #3
 8007a50:	e7b8      	b.n	80079c4 <__gethex+0x1f8>
 8007a52:	da0a      	bge.n	8007a6a <__gethex+0x29e>
 8007a54:	1a37      	subs	r7, r6, r0
 8007a56:	4621      	mov	r1, r4
 8007a58:	ee18 0a10 	vmov	r0, s16
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	f000 fc45 	bl	80082ec <__lshift>
 8007a62:	1bed      	subs	r5, r5, r7
 8007a64:	4604      	mov	r4, r0
 8007a66:	f100 0914 	add.w	r9, r0, #20
 8007a6a:	f04f 0a00 	mov.w	sl, #0
 8007a6e:	e7ae      	b.n	80079ce <__gethex+0x202>
 8007a70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a74:	42a8      	cmp	r0, r5
 8007a76:	dd72      	ble.n	8007b5e <__gethex+0x392>
 8007a78:	1b45      	subs	r5, r0, r5
 8007a7a:	42ae      	cmp	r6, r5
 8007a7c:	dc36      	bgt.n	8007aec <__gethex+0x320>
 8007a7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d02a      	beq.n	8007adc <__gethex+0x310>
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d02c      	beq.n	8007ae4 <__gethex+0x318>
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d11c      	bne.n	8007ac8 <__gethex+0x2fc>
 8007a8e:	42ae      	cmp	r6, r5
 8007a90:	d11a      	bne.n	8007ac8 <__gethex+0x2fc>
 8007a92:	2e01      	cmp	r6, #1
 8007a94:	d112      	bne.n	8007abc <__gethex+0x2f0>
 8007a96:	9a04      	ldr	r2, [sp, #16]
 8007a98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	6123      	str	r3, [r4, #16]
 8007aa2:	f8c9 3000 	str.w	r3, [r9]
 8007aa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007aa8:	2762      	movs	r7, #98	; 0x62
 8007aaa:	601c      	str	r4, [r3, #0]
 8007aac:	e723      	b.n	80078f6 <__gethex+0x12a>
 8007aae:	bf00      	nop
 8007ab0:	08009b68 	.word	0x08009b68
 8007ab4:	08009af0 	.word	0x08009af0
 8007ab8:	08009b01 	.word	0x08009b01
 8007abc:	1e71      	subs	r1, r6, #1
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f000 fe58 	bl	8008774 <__any_on>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d1e6      	bne.n	8007a96 <__gethex+0x2ca>
 8007ac8:	ee18 0a10 	vmov	r0, s16
 8007acc:	4621      	mov	r1, r4
 8007ace:	f000 f9f1 	bl	8007eb4 <_Bfree>
 8007ad2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	2750      	movs	r7, #80	; 0x50
 8007ada:	e70c      	b.n	80078f6 <__gethex+0x12a>
 8007adc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f2      	bne.n	8007ac8 <__gethex+0x2fc>
 8007ae2:	e7d8      	b.n	8007a96 <__gethex+0x2ca>
 8007ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1d5      	bne.n	8007a96 <__gethex+0x2ca>
 8007aea:	e7ed      	b.n	8007ac8 <__gethex+0x2fc>
 8007aec:	1e6f      	subs	r7, r5, #1
 8007aee:	f1ba 0f00 	cmp.w	sl, #0
 8007af2:	d131      	bne.n	8007b58 <__gethex+0x38c>
 8007af4:	b127      	cbz	r7, 8007b00 <__gethex+0x334>
 8007af6:	4639      	mov	r1, r7
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 fe3b 	bl	8008774 <__any_on>
 8007afe:	4682      	mov	sl, r0
 8007b00:	117b      	asrs	r3, r7, #5
 8007b02:	2101      	movs	r1, #1
 8007b04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007b08:	f007 071f 	and.w	r7, r7, #31
 8007b0c:	fa01 f707 	lsl.w	r7, r1, r7
 8007b10:	421f      	tst	r7, r3
 8007b12:	4629      	mov	r1, r5
 8007b14:	4620      	mov	r0, r4
 8007b16:	bf18      	it	ne
 8007b18:	f04a 0a02 	orrne.w	sl, sl, #2
 8007b1c:	1b76      	subs	r6, r6, r5
 8007b1e:	f7ff fded 	bl	80076fc <rshift>
 8007b22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b26:	2702      	movs	r7, #2
 8007b28:	f1ba 0f00 	cmp.w	sl, #0
 8007b2c:	d048      	beq.n	8007bc0 <__gethex+0x3f4>
 8007b2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d015      	beq.n	8007b62 <__gethex+0x396>
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d017      	beq.n	8007b6a <__gethex+0x39e>
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d109      	bne.n	8007b52 <__gethex+0x386>
 8007b3e:	f01a 0f02 	tst.w	sl, #2
 8007b42:	d006      	beq.n	8007b52 <__gethex+0x386>
 8007b44:	f8d9 0000 	ldr.w	r0, [r9]
 8007b48:	ea4a 0a00 	orr.w	sl, sl, r0
 8007b4c:	f01a 0f01 	tst.w	sl, #1
 8007b50:	d10e      	bne.n	8007b70 <__gethex+0x3a4>
 8007b52:	f047 0710 	orr.w	r7, r7, #16
 8007b56:	e033      	b.n	8007bc0 <__gethex+0x3f4>
 8007b58:	f04f 0a01 	mov.w	sl, #1
 8007b5c:	e7d0      	b.n	8007b00 <__gethex+0x334>
 8007b5e:	2701      	movs	r7, #1
 8007b60:	e7e2      	b.n	8007b28 <__gethex+0x35c>
 8007b62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b64:	f1c3 0301 	rsb	r3, r3, #1
 8007b68:	9315      	str	r3, [sp, #84]	; 0x54
 8007b6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0f0      	beq.n	8007b52 <__gethex+0x386>
 8007b70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b74:	f104 0314 	add.w	r3, r4, #20
 8007b78:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b7c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b80:	f04f 0c00 	mov.w	ip, #0
 8007b84:	4618      	mov	r0, r3
 8007b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b8a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007b8e:	d01c      	beq.n	8007bca <__gethex+0x3fe>
 8007b90:	3201      	adds	r2, #1
 8007b92:	6002      	str	r2, [r0, #0]
 8007b94:	2f02      	cmp	r7, #2
 8007b96:	f104 0314 	add.w	r3, r4, #20
 8007b9a:	d13f      	bne.n	8007c1c <__gethex+0x450>
 8007b9c:	f8d8 2000 	ldr.w	r2, [r8]
 8007ba0:	3a01      	subs	r2, #1
 8007ba2:	42b2      	cmp	r2, r6
 8007ba4:	d10a      	bne.n	8007bbc <__gethex+0x3f0>
 8007ba6:	1171      	asrs	r1, r6, #5
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007bae:	f006 061f 	and.w	r6, r6, #31
 8007bb2:	fa02 f606 	lsl.w	r6, r2, r6
 8007bb6:	421e      	tst	r6, r3
 8007bb8:	bf18      	it	ne
 8007bba:	4617      	movne	r7, r2
 8007bbc:	f047 0720 	orr.w	r7, r7, #32
 8007bc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bc2:	601c      	str	r4, [r3, #0]
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	601d      	str	r5, [r3, #0]
 8007bc8:	e695      	b.n	80078f6 <__gethex+0x12a>
 8007bca:	4299      	cmp	r1, r3
 8007bcc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007bd0:	d8d8      	bhi.n	8007b84 <__gethex+0x3b8>
 8007bd2:	68a3      	ldr	r3, [r4, #8]
 8007bd4:	459b      	cmp	fp, r3
 8007bd6:	db19      	blt.n	8007c0c <__gethex+0x440>
 8007bd8:	6861      	ldr	r1, [r4, #4]
 8007bda:	ee18 0a10 	vmov	r0, s16
 8007bde:	3101      	adds	r1, #1
 8007be0:	f000 f928 	bl	8007e34 <_Balloc>
 8007be4:	4681      	mov	r9, r0
 8007be6:	b918      	cbnz	r0, 8007bf0 <__gethex+0x424>
 8007be8:	4b1a      	ldr	r3, [pc, #104]	; (8007c54 <__gethex+0x488>)
 8007bea:	4602      	mov	r2, r0
 8007bec:	2184      	movs	r1, #132	; 0x84
 8007bee:	e6a8      	b.n	8007942 <__gethex+0x176>
 8007bf0:	6922      	ldr	r2, [r4, #16]
 8007bf2:	3202      	adds	r2, #2
 8007bf4:	f104 010c 	add.w	r1, r4, #12
 8007bf8:	0092      	lsls	r2, r2, #2
 8007bfa:	300c      	adds	r0, #12
 8007bfc:	f000 f90c 	bl	8007e18 <memcpy>
 8007c00:	4621      	mov	r1, r4
 8007c02:	ee18 0a10 	vmov	r0, s16
 8007c06:	f000 f955 	bl	8007eb4 <_Bfree>
 8007c0a:	464c      	mov	r4, r9
 8007c0c:	6923      	ldr	r3, [r4, #16]
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c14:	6122      	str	r2, [r4, #16]
 8007c16:	2201      	movs	r2, #1
 8007c18:	615a      	str	r2, [r3, #20]
 8007c1a:	e7bb      	b.n	8007b94 <__gethex+0x3c8>
 8007c1c:	6922      	ldr	r2, [r4, #16]
 8007c1e:	455a      	cmp	r2, fp
 8007c20:	dd0b      	ble.n	8007c3a <__gethex+0x46e>
 8007c22:	2101      	movs	r1, #1
 8007c24:	4620      	mov	r0, r4
 8007c26:	f7ff fd69 	bl	80076fc <rshift>
 8007c2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c2e:	3501      	adds	r5, #1
 8007c30:	42ab      	cmp	r3, r5
 8007c32:	f6ff aed0 	blt.w	80079d6 <__gethex+0x20a>
 8007c36:	2701      	movs	r7, #1
 8007c38:	e7c0      	b.n	8007bbc <__gethex+0x3f0>
 8007c3a:	f016 061f 	ands.w	r6, r6, #31
 8007c3e:	d0fa      	beq.n	8007c36 <__gethex+0x46a>
 8007c40:	4453      	add	r3, sl
 8007c42:	f1c6 0620 	rsb	r6, r6, #32
 8007c46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007c4a:	f000 f9e5 	bl	8008018 <__hi0bits>
 8007c4e:	42b0      	cmp	r0, r6
 8007c50:	dbe7      	blt.n	8007c22 <__gethex+0x456>
 8007c52:	e7f0      	b.n	8007c36 <__gethex+0x46a>
 8007c54:	08009af0 	.word	0x08009af0

08007c58 <L_shift>:
 8007c58:	f1c2 0208 	rsb	r2, r2, #8
 8007c5c:	0092      	lsls	r2, r2, #2
 8007c5e:	b570      	push	{r4, r5, r6, lr}
 8007c60:	f1c2 0620 	rsb	r6, r2, #32
 8007c64:	6843      	ldr	r3, [r0, #4]
 8007c66:	6804      	ldr	r4, [r0, #0]
 8007c68:	fa03 f506 	lsl.w	r5, r3, r6
 8007c6c:	432c      	orrs	r4, r5
 8007c6e:	40d3      	lsrs	r3, r2
 8007c70:	6004      	str	r4, [r0, #0]
 8007c72:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c76:	4288      	cmp	r0, r1
 8007c78:	d3f4      	bcc.n	8007c64 <L_shift+0xc>
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}

08007c7c <__match>:
 8007c7c:	b530      	push	{r4, r5, lr}
 8007c7e:	6803      	ldr	r3, [r0, #0]
 8007c80:	3301      	adds	r3, #1
 8007c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c86:	b914      	cbnz	r4, 8007c8e <__match+0x12>
 8007c88:	6003      	str	r3, [r0, #0]
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	bd30      	pop	{r4, r5, pc}
 8007c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007c96:	2d19      	cmp	r5, #25
 8007c98:	bf98      	it	ls
 8007c9a:	3220      	addls	r2, #32
 8007c9c:	42a2      	cmp	r2, r4
 8007c9e:	d0f0      	beq.n	8007c82 <__match+0x6>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	e7f3      	b.n	8007c8c <__match+0x10>

08007ca4 <__hexnan>:
 8007ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	680b      	ldr	r3, [r1, #0]
 8007caa:	115e      	asrs	r6, r3, #5
 8007cac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007cb0:	f013 031f 	ands.w	r3, r3, #31
 8007cb4:	b087      	sub	sp, #28
 8007cb6:	bf18      	it	ne
 8007cb8:	3604      	addne	r6, #4
 8007cba:	2500      	movs	r5, #0
 8007cbc:	1f37      	subs	r7, r6, #4
 8007cbe:	4690      	mov	r8, r2
 8007cc0:	6802      	ldr	r2, [r0, #0]
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	4682      	mov	sl, r0
 8007cc6:	f846 5c04 	str.w	r5, [r6, #-4]
 8007cca:	46b9      	mov	r9, r7
 8007ccc:	463c      	mov	r4, r7
 8007cce:	9502      	str	r5, [sp, #8]
 8007cd0:	46ab      	mov	fp, r5
 8007cd2:	7851      	ldrb	r1, [r2, #1]
 8007cd4:	1c53      	adds	r3, r2, #1
 8007cd6:	9303      	str	r3, [sp, #12]
 8007cd8:	b341      	cbz	r1, 8007d2c <__hexnan+0x88>
 8007cda:	4608      	mov	r0, r1
 8007cdc:	9205      	str	r2, [sp, #20]
 8007cde:	9104      	str	r1, [sp, #16]
 8007ce0:	f7ff fd5e 	bl	80077a0 <__hexdig_fun>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d14f      	bne.n	8007d88 <__hexnan+0xe4>
 8007ce8:	9904      	ldr	r1, [sp, #16]
 8007cea:	9a05      	ldr	r2, [sp, #20]
 8007cec:	2920      	cmp	r1, #32
 8007cee:	d818      	bhi.n	8007d22 <__hexnan+0x7e>
 8007cf0:	9b02      	ldr	r3, [sp, #8]
 8007cf2:	459b      	cmp	fp, r3
 8007cf4:	dd13      	ble.n	8007d1e <__hexnan+0x7a>
 8007cf6:	454c      	cmp	r4, r9
 8007cf8:	d206      	bcs.n	8007d08 <__hexnan+0x64>
 8007cfa:	2d07      	cmp	r5, #7
 8007cfc:	dc04      	bgt.n	8007d08 <__hexnan+0x64>
 8007cfe:	462a      	mov	r2, r5
 8007d00:	4649      	mov	r1, r9
 8007d02:	4620      	mov	r0, r4
 8007d04:	f7ff ffa8 	bl	8007c58 <L_shift>
 8007d08:	4544      	cmp	r4, r8
 8007d0a:	d950      	bls.n	8007dae <__hexnan+0x10a>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f1a4 0904 	sub.w	r9, r4, #4
 8007d12:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d16:	f8cd b008 	str.w	fp, [sp, #8]
 8007d1a:	464c      	mov	r4, r9
 8007d1c:	461d      	mov	r5, r3
 8007d1e:	9a03      	ldr	r2, [sp, #12]
 8007d20:	e7d7      	b.n	8007cd2 <__hexnan+0x2e>
 8007d22:	2929      	cmp	r1, #41	; 0x29
 8007d24:	d156      	bne.n	8007dd4 <__hexnan+0x130>
 8007d26:	3202      	adds	r2, #2
 8007d28:	f8ca 2000 	str.w	r2, [sl]
 8007d2c:	f1bb 0f00 	cmp.w	fp, #0
 8007d30:	d050      	beq.n	8007dd4 <__hexnan+0x130>
 8007d32:	454c      	cmp	r4, r9
 8007d34:	d206      	bcs.n	8007d44 <__hexnan+0xa0>
 8007d36:	2d07      	cmp	r5, #7
 8007d38:	dc04      	bgt.n	8007d44 <__hexnan+0xa0>
 8007d3a:	462a      	mov	r2, r5
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f7ff ff8a 	bl	8007c58 <L_shift>
 8007d44:	4544      	cmp	r4, r8
 8007d46:	d934      	bls.n	8007db2 <__hexnan+0x10e>
 8007d48:	f1a8 0204 	sub.w	r2, r8, #4
 8007d4c:	4623      	mov	r3, r4
 8007d4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d52:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d56:	429f      	cmp	r7, r3
 8007d58:	d2f9      	bcs.n	8007d4e <__hexnan+0xaa>
 8007d5a:	1b3b      	subs	r3, r7, r4
 8007d5c:	f023 0303 	bic.w	r3, r3, #3
 8007d60:	3304      	adds	r3, #4
 8007d62:	3401      	adds	r4, #1
 8007d64:	3e03      	subs	r6, #3
 8007d66:	42b4      	cmp	r4, r6
 8007d68:	bf88      	it	hi
 8007d6a:	2304      	movhi	r3, #4
 8007d6c:	4443      	add	r3, r8
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f843 2b04 	str.w	r2, [r3], #4
 8007d74:	429f      	cmp	r7, r3
 8007d76:	d2fb      	bcs.n	8007d70 <__hexnan+0xcc>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	b91b      	cbnz	r3, 8007d84 <__hexnan+0xe0>
 8007d7c:	4547      	cmp	r7, r8
 8007d7e:	d127      	bne.n	8007dd0 <__hexnan+0x12c>
 8007d80:	2301      	movs	r3, #1
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	2005      	movs	r0, #5
 8007d86:	e026      	b.n	8007dd6 <__hexnan+0x132>
 8007d88:	3501      	adds	r5, #1
 8007d8a:	2d08      	cmp	r5, #8
 8007d8c:	f10b 0b01 	add.w	fp, fp, #1
 8007d90:	dd06      	ble.n	8007da0 <__hexnan+0xfc>
 8007d92:	4544      	cmp	r4, r8
 8007d94:	d9c3      	bls.n	8007d1e <__hexnan+0x7a>
 8007d96:	2300      	movs	r3, #0
 8007d98:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d9c:	2501      	movs	r5, #1
 8007d9e:	3c04      	subs	r4, #4
 8007da0:	6822      	ldr	r2, [r4, #0]
 8007da2:	f000 000f 	and.w	r0, r0, #15
 8007da6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007daa:	6022      	str	r2, [r4, #0]
 8007dac:	e7b7      	b.n	8007d1e <__hexnan+0x7a>
 8007dae:	2508      	movs	r5, #8
 8007db0:	e7b5      	b.n	8007d1e <__hexnan+0x7a>
 8007db2:	9b01      	ldr	r3, [sp, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d0df      	beq.n	8007d78 <__hexnan+0xd4>
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dbc:	f1c3 0320 	rsb	r3, r3, #32
 8007dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007dc8:	401a      	ands	r2, r3
 8007dca:	f846 2c04 	str.w	r2, [r6, #-4]
 8007dce:	e7d3      	b.n	8007d78 <__hexnan+0xd4>
 8007dd0:	3f04      	subs	r7, #4
 8007dd2:	e7d1      	b.n	8007d78 <__hexnan+0xd4>
 8007dd4:	2004      	movs	r0, #4
 8007dd6:	b007      	add	sp, #28
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ddc <_localeconv_r>:
 8007ddc:	4800      	ldr	r0, [pc, #0]	; (8007de0 <_localeconv_r+0x4>)
 8007dde:	4770      	bx	lr
 8007de0:	2000017c 	.word	0x2000017c

08007de4 <malloc>:
 8007de4:	4b02      	ldr	r3, [pc, #8]	; (8007df0 <malloc+0xc>)
 8007de6:	4601      	mov	r1, r0
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	f000 bd67 	b.w	80088bc <_malloc_r>
 8007dee:	bf00      	nop
 8007df0:	20000024 	.word	0x20000024

08007df4 <__ascii_mbtowc>:
 8007df4:	b082      	sub	sp, #8
 8007df6:	b901      	cbnz	r1, 8007dfa <__ascii_mbtowc+0x6>
 8007df8:	a901      	add	r1, sp, #4
 8007dfa:	b142      	cbz	r2, 8007e0e <__ascii_mbtowc+0x1a>
 8007dfc:	b14b      	cbz	r3, 8007e12 <__ascii_mbtowc+0x1e>
 8007dfe:	7813      	ldrb	r3, [r2, #0]
 8007e00:	600b      	str	r3, [r1, #0]
 8007e02:	7812      	ldrb	r2, [r2, #0]
 8007e04:	1e10      	subs	r0, r2, #0
 8007e06:	bf18      	it	ne
 8007e08:	2001      	movne	r0, #1
 8007e0a:	b002      	add	sp, #8
 8007e0c:	4770      	bx	lr
 8007e0e:	4610      	mov	r0, r2
 8007e10:	e7fb      	b.n	8007e0a <__ascii_mbtowc+0x16>
 8007e12:	f06f 0001 	mvn.w	r0, #1
 8007e16:	e7f8      	b.n	8007e0a <__ascii_mbtowc+0x16>

08007e18 <memcpy>:
 8007e18:	440a      	add	r2, r1
 8007e1a:	4291      	cmp	r1, r2
 8007e1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007e20:	d100      	bne.n	8007e24 <memcpy+0xc>
 8007e22:	4770      	bx	lr
 8007e24:	b510      	push	{r4, lr}
 8007e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e2e:	4291      	cmp	r1, r2
 8007e30:	d1f9      	bne.n	8007e26 <memcpy+0xe>
 8007e32:	bd10      	pop	{r4, pc}

08007e34 <_Balloc>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e38:	4604      	mov	r4, r0
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	b976      	cbnz	r6, 8007e5c <_Balloc+0x28>
 8007e3e:	2010      	movs	r0, #16
 8007e40:	f7ff ffd0 	bl	8007de4 <malloc>
 8007e44:	4602      	mov	r2, r0
 8007e46:	6260      	str	r0, [r4, #36]	; 0x24
 8007e48:	b920      	cbnz	r0, 8007e54 <_Balloc+0x20>
 8007e4a:	4b18      	ldr	r3, [pc, #96]	; (8007eac <_Balloc+0x78>)
 8007e4c:	4818      	ldr	r0, [pc, #96]	; (8007eb0 <_Balloc+0x7c>)
 8007e4e:	2166      	movs	r1, #102	; 0x66
 8007e50:	f000 ff40 	bl	8008cd4 <__assert_func>
 8007e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e58:	6006      	str	r6, [r0, #0]
 8007e5a:	60c6      	str	r6, [r0, #12]
 8007e5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e5e:	68f3      	ldr	r3, [r6, #12]
 8007e60:	b183      	cbz	r3, 8007e84 <_Balloc+0x50>
 8007e62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e6a:	b9b8      	cbnz	r0, 8007e9c <_Balloc+0x68>
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	fa01 f605 	lsl.w	r6, r1, r5
 8007e72:	1d72      	adds	r2, r6, #5
 8007e74:	0092      	lsls	r2, r2, #2
 8007e76:	4620      	mov	r0, r4
 8007e78:	f000 fc9d 	bl	80087b6 <_calloc_r>
 8007e7c:	b160      	cbz	r0, 8007e98 <_Balloc+0x64>
 8007e7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e82:	e00e      	b.n	8007ea2 <_Balloc+0x6e>
 8007e84:	2221      	movs	r2, #33	; 0x21
 8007e86:	2104      	movs	r1, #4
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 fc94 	bl	80087b6 <_calloc_r>
 8007e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e90:	60f0      	str	r0, [r6, #12]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e4      	bne.n	8007e62 <_Balloc+0x2e>
 8007e98:	2000      	movs	r0, #0
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	6802      	ldr	r2, [r0, #0]
 8007e9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ea8:	e7f7      	b.n	8007e9a <_Balloc+0x66>
 8007eaa:	bf00      	nop
 8007eac:	08009a7e 	.word	0x08009a7e
 8007eb0:	08009b7c 	.word	0x08009b7c

08007eb4 <_Bfree>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007eb8:	4605      	mov	r5, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	b976      	cbnz	r6, 8007edc <_Bfree+0x28>
 8007ebe:	2010      	movs	r0, #16
 8007ec0:	f7ff ff90 	bl	8007de4 <malloc>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6268      	str	r0, [r5, #36]	; 0x24
 8007ec8:	b920      	cbnz	r0, 8007ed4 <_Bfree+0x20>
 8007eca:	4b09      	ldr	r3, [pc, #36]	; (8007ef0 <_Bfree+0x3c>)
 8007ecc:	4809      	ldr	r0, [pc, #36]	; (8007ef4 <_Bfree+0x40>)
 8007ece:	218a      	movs	r1, #138	; 0x8a
 8007ed0:	f000 ff00 	bl	8008cd4 <__assert_func>
 8007ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ed8:	6006      	str	r6, [r0, #0]
 8007eda:	60c6      	str	r6, [r0, #12]
 8007edc:	b13c      	cbz	r4, 8007eee <_Bfree+0x3a>
 8007ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ee0:	6862      	ldr	r2, [r4, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ee8:	6021      	str	r1, [r4, #0]
 8007eea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	08009a7e 	.word	0x08009a7e
 8007ef4:	08009b7c 	.word	0x08009b7c

08007ef8 <__multadd>:
 8007ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efc:	690d      	ldr	r5, [r1, #16]
 8007efe:	4607      	mov	r7, r0
 8007f00:	460c      	mov	r4, r1
 8007f02:	461e      	mov	r6, r3
 8007f04:	f101 0c14 	add.w	ip, r1, #20
 8007f08:	2000      	movs	r0, #0
 8007f0a:	f8dc 3000 	ldr.w	r3, [ip]
 8007f0e:	b299      	uxth	r1, r3
 8007f10:	fb02 6101 	mla	r1, r2, r1, r6
 8007f14:	0c1e      	lsrs	r6, r3, #16
 8007f16:	0c0b      	lsrs	r3, r1, #16
 8007f18:	fb02 3306 	mla	r3, r2, r6, r3
 8007f1c:	b289      	uxth	r1, r1
 8007f1e:	3001      	adds	r0, #1
 8007f20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f24:	4285      	cmp	r5, r0
 8007f26:	f84c 1b04 	str.w	r1, [ip], #4
 8007f2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f2e:	dcec      	bgt.n	8007f0a <__multadd+0x12>
 8007f30:	b30e      	cbz	r6, 8007f76 <__multadd+0x7e>
 8007f32:	68a3      	ldr	r3, [r4, #8]
 8007f34:	42ab      	cmp	r3, r5
 8007f36:	dc19      	bgt.n	8007f6c <__multadd+0x74>
 8007f38:	6861      	ldr	r1, [r4, #4]
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	3101      	adds	r1, #1
 8007f3e:	f7ff ff79 	bl	8007e34 <_Balloc>
 8007f42:	4680      	mov	r8, r0
 8007f44:	b928      	cbnz	r0, 8007f52 <__multadd+0x5a>
 8007f46:	4602      	mov	r2, r0
 8007f48:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <__multadd+0x84>)
 8007f4a:	480d      	ldr	r0, [pc, #52]	; (8007f80 <__multadd+0x88>)
 8007f4c:	21b5      	movs	r1, #181	; 0xb5
 8007f4e:	f000 fec1 	bl	8008cd4 <__assert_func>
 8007f52:	6922      	ldr	r2, [r4, #16]
 8007f54:	3202      	adds	r2, #2
 8007f56:	f104 010c 	add.w	r1, r4, #12
 8007f5a:	0092      	lsls	r2, r2, #2
 8007f5c:	300c      	adds	r0, #12
 8007f5e:	f7ff ff5b 	bl	8007e18 <memcpy>
 8007f62:	4621      	mov	r1, r4
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7ff ffa5 	bl	8007eb4 <_Bfree>
 8007f6a:	4644      	mov	r4, r8
 8007f6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f70:	3501      	adds	r5, #1
 8007f72:	615e      	str	r6, [r3, #20]
 8007f74:	6125      	str	r5, [r4, #16]
 8007f76:	4620      	mov	r0, r4
 8007f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f7c:	08009af0 	.word	0x08009af0
 8007f80:	08009b7c 	.word	0x08009b7c

08007f84 <__s2b>:
 8007f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f88:	460c      	mov	r4, r1
 8007f8a:	4615      	mov	r5, r2
 8007f8c:	461f      	mov	r7, r3
 8007f8e:	2209      	movs	r2, #9
 8007f90:	3308      	adds	r3, #8
 8007f92:	4606      	mov	r6, r0
 8007f94:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f98:	2100      	movs	r1, #0
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	db09      	blt.n	8007fb4 <__s2b+0x30>
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f7ff ff47 	bl	8007e34 <_Balloc>
 8007fa6:	b940      	cbnz	r0, 8007fba <__s2b+0x36>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	4b19      	ldr	r3, [pc, #100]	; (8008010 <__s2b+0x8c>)
 8007fac:	4819      	ldr	r0, [pc, #100]	; (8008014 <__s2b+0x90>)
 8007fae:	21ce      	movs	r1, #206	; 0xce
 8007fb0:	f000 fe90 	bl	8008cd4 <__assert_func>
 8007fb4:	0052      	lsls	r2, r2, #1
 8007fb6:	3101      	adds	r1, #1
 8007fb8:	e7f0      	b.n	8007f9c <__s2b+0x18>
 8007fba:	9b08      	ldr	r3, [sp, #32]
 8007fbc:	6143      	str	r3, [r0, #20]
 8007fbe:	2d09      	cmp	r5, #9
 8007fc0:	f04f 0301 	mov.w	r3, #1
 8007fc4:	6103      	str	r3, [r0, #16]
 8007fc6:	dd16      	ble.n	8007ff6 <__s2b+0x72>
 8007fc8:	f104 0909 	add.w	r9, r4, #9
 8007fcc:	46c8      	mov	r8, r9
 8007fce:	442c      	add	r4, r5
 8007fd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	3b30      	subs	r3, #48	; 0x30
 8007fd8:	220a      	movs	r2, #10
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7ff ff8c 	bl	8007ef8 <__multadd>
 8007fe0:	45a0      	cmp	r8, r4
 8007fe2:	d1f5      	bne.n	8007fd0 <__s2b+0x4c>
 8007fe4:	f1a5 0408 	sub.w	r4, r5, #8
 8007fe8:	444c      	add	r4, r9
 8007fea:	1b2d      	subs	r5, r5, r4
 8007fec:	1963      	adds	r3, r4, r5
 8007fee:	42bb      	cmp	r3, r7
 8007ff0:	db04      	blt.n	8007ffc <__s2b+0x78>
 8007ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ff6:	340a      	adds	r4, #10
 8007ff8:	2509      	movs	r5, #9
 8007ffa:	e7f6      	b.n	8007fea <__s2b+0x66>
 8007ffc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008000:	4601      	mov	r1, r0
 8008002:	3b30      	subs	r3, #48	; 0x30
 8008004:	220a      	movs	r2, #10
 8008006:	4630      	mov	r0, r6
 8008008:	f7ff ff76 	bl	8007ef8 <__multadd>
 800800c:	e7ee      	b.n	8007fec <__s2b+0x68>
 800800e:	bf00      	nop
 8008010:	08009af0 	.word	0x08009af0
 8008014:	08009b7c 	.word	0x08009b7c

08008018 <__hi0bits>:
 8008018:	0c03      	lsrs	r3, r0, #16
 800801a:	041b      	lsls	r3, r3, #16
 800801c:	b9d3      	cbnz	r3, 8008054 <__hi0bits+0x3c>
 800801e:	0400      	lsls	r0, r0, #16
 8008020:	2310      	movs	r3, #16
 8008022:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008026:	bf04      	itt	eq
 8008028:	0200      	lsleq	r0, r0, #8
 800802a:	3308      	addeq	r3, #8
 800802c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008030:	bf04      	itt	eq
 8008032:	0100      	lsleq	r0, r0, #4
 8008034:	3304      	addeq	r3, #4
 8008036:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800803a:	bf04      	itt	eq
 800803c:	0080      	lsleq	r0, r0, #2
 800803e:	3302      	addeq	r3, #2
 8008040:	2800      	cmp	r0, #0
 8008042:	db05      	blt.n	8008050 <__hi0bits+0x38>
 8008044:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008048:	f103 0301 	add.w	r3, r3, #1
 800804c:	bf08      	it	eq
 800804e:	2320      	moveq	r3, #32
 8008050:	4618      	mov	r0, r3
 8008052:	4770      	bx	lr
 8008054:	2300      	movs	r3, #0
 8008056:	e7e4      	b.n	8008022 <__hi0bits+0xa>

08008058 <__lo0bits>:
 8008058:	6803      	ldr	r3, [r0, #0]
 800805a:	f013 0207 	ands.w	r2, r3, #7
 800805e:	4601      	mov	r1, r0
 8008060:	d00b      	beq.n	800807a <__lo0bits+0x22>
 8008062:	07da      	lsls	r2, r3, #31
 8008064:	d423      	bmi.n	80080ae <__lo0bits+0x56>
 8008066:	0798      	lsls	r0, r3, #30
 8008068:	bf49      	itett	mi
 800806a:	085b      	lsrmi	r3, r3, #1
 800806c:	089b      	lsrpl	r3, r3, #2
 800806e:	2001      	movmi	r0, #1
 8008070:	600b      	strmi	r3, [r1, #0]
 8008072:	bf5c      	itt	pl
 8008074:	600b      	strpl	r3, [r1, #0]
 8008076:	2002      	movpl	r0, #2
 8008078:	4770      	bx	lr
 800807a:	b298      	uxth	r0, r3
 800807c:	b9a8      	cbnz	r0, 80080aa <__lo0bits+0x52>
 800807e:	0c1b      	lsrs	r3, r3, #16
 8008080:	2010      	movs	r0, #16
 8008082:	b2da      	uxtb	r2, r3
 8008084:	b90a      	cbnz	r2, 800808a <__lo0bits+0x32>
 8008086:	3008      	adds	r0, #8
 8008088:	0a1b      	lsrs	r3, r3, #8
 800808a:	071a      	lsls	r2, r3, #28
 800808c:	bf04      	itt	eq
 800808e:	091b      	lsreq	r3, r3, #4
 8008090:	3004      	addeq	r0, #4
 8008092:	079a      	lsls	r2, r3, #30
 8008094:	bf04      	itt	eq
 8008096:	089b      	lsreq	r3, r3, #2
 8008098:	3002      	addeq	r0, #2
 800809a:	07da      	lsls	r2, r3, #31
 800809c:	d403      	bmi.n	80080a6 <__lo0bits+0x4e>
 800809e:	085b      	lsrs	r3, r3, #1
 80080a0:	f100 0001 	add.w	r0, r0, #1
 80080a4:	d005      	beq.n	80080b2 <__lo0bits+0x5a>
 80080a6:	600b      	str	r3, [r1, #0]
 80080a8:	4770      	bx	lr
 80080aa:	4610      	mov	r0, r2
 80080ac:	e7e9      	b.n	8008082 <__lo0bits+0x2a>
 80080ae:	2000      	movs	r0, #0
 80080b0:	4770      	bx	lr
 80080b2:	2020      	movs	r0, #32
 80080b4:	4770      	bx	lr
	...

080080b8 <__i2b>:
 80080b8:	b510      	push	{r4, lr}
 80080ba:	460c      	mov	r4, r1
 80080bc:	2101      	movs	r1, #1
 80080be:	f7ff feb9 	bl	8007e34 <_Balloc>
 80080c2:	4602      	mov	r2, r0
 80080c4:	b928      	cbnz	r0, 80080d2 <__i2b+0x1a>
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <__i2b+0x24>)
 80080c8:	4805      	ldr	r0, [pc, #20]	; (80080e0 <__i2b+0x28>)
 80080ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080ce:	f000 fe01 	bl	8008cd4 <__assert_func>
 80080d2:	2301      	movs	r3, #1
 80080d4:	6144      	str	r4, [r0, #20]
 80080d6:	6103      	str	r3, [r0, #16]
 80080d8:	bd10      	pop	{r4, pc}
 80080da:	bf00      	nop
 80080dc:	08009af0 	.word	0x08009af0
 80080e0:	08009b7c 	.word	0x08009b7c

080080e4 <__multiply>:
 80080e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	4691      	mov	r9, r2
 80080ea:	690a      	ldr	r2, [r1, #16]
 80080ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	bfb8      	it	lt
 80080f4:	460b      	movlt	r3, r1
 80080f6:	460c      	mov	r4, r1
 80080f8:	bfbc      	itt	lt
 80080fa:	464c      	movlt	r4, r9
 80080fc:	4699      	movlt	r9, r3
 80080fe:	6927      	ldr	r7, [r4, #16]
 8008100:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008104:	68a3      	ldr	r3, [r4, #8]
 8008106:	6861      	ldr	r1, [r4, #4]
 8008108:	eb07 060a 	add.w	r6, r7, sl
 800810c:	42b3      	cmp	r3, r6
 800810e:	b085      	sub	sp, #20
 8008110:	bfb8      	it	lt
 8008112:	3101      	addlt	r1, #1
 8008114:	f7ff fe8e 	bl	8007e34 <_Balloc>
 8008118:	b930      	cbnz	r0, 8008128 <__multiply+0x44>
 800811a:	4602      	mov	r2, r0
 800811c:	4b44      	ldr	r3, [pc, #272]	; (8008230 <__multiply+0x14c>)
 800811e:	4845      	ldr	r0, [pc, #276]	; (8008234 <__multiply+0x150>)
 8008120:	f240 115d 	movw	r1, #349	; 0x15d
 8008124:	f000 fdd6 	bl	8008cd4 <__assert_func>
 8008128:	f100 0514 	add.w	r5, r0, #20
 800812c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008130:	462b      	mov	r3, r5
 8008132:	2200      	movs	r2, #0
 8008134:	4543      	cmp	r3, r8
 8008136:	d321      	bcc.n	800817c <__multiply+0x98>
 8008138:	f104 0314 	add.w	r3, r4, #20
 800813c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008140:	f109 0314 	add.w	r3, r9, #20
 8008144:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008148:	9202      	str	r2, [sp, #8]
 800814a:	1b3a      	subs	r2, r7, r4
 800814c:	3a15      	subs	r2, #21
 800814e:	f022 0203 	bic.w	r2, r2, #3
 8008152:	3204      	adds	r2, #4
 8008154:	f104 0115 	add.w	r1, r4, #21
 8008158:	428f      	cmp	r7, r1
 800815a:	bf38      	it	cc
 800815c:	2204      	movcc	r2, #4
 800815e:	9201      	str	r2, [sp, #4]
 8008160:	9a02      	ldr	r2, [sp, #8]
 8008162:	9303      	str	r3, [sp, #12]
 8008164:	429a      	cmp	r2, r3
 8008166:	d80c      	bhi.n	8008182 <__multiply+0x9e>
 8008168:	2e00      	cmp	r6, #0
 800816a:	dd03      	ble.n	8008174 <__multiply+0x90>
 800816c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008170:	2b00      	cmp	r3, #0
 8008172:	d05a      	beq.n	800822a <__multiply+0x146>
 8008174:	6106      	str	r6, [r0, #16]
 8008176:	b005      	add	sp, #20
 8008178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817c:	f843 2b04 	str.w	r2, [r3], #4
 8008180:	e7d8      	b.n	8008134 <__multiply+0x50>
 8008182:	f8b3 a000 	ldrh.w	sl, [r3]
 8008186:	f1ba 0f00 	cmp.w	sl, #0
 800818a:	d024      	beq.n	80081d6 <__multiply+0xf2>
 800818c:	f104 0e14 	add.w	lr, r4, #20
 8008190:	46a9      	mov	r9, r5
 8008192:	f04f 0c00 	mov.w	ip, #0
 8008196:	f85e 2b04 	ldr.w	r2, [lr], #4
 800819a:	f8d9 1000 	ldr.w	r1, [r9]
 800819e:	fa1f fb82 	uxth.w	fp, r2
 80081a2:	b289      	uxth	r1, r1
 80081a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80081a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081ac:	f8d9 2000 	ldr.w	r2, [r9]
 80081b0:	4461      	add	r1, ip
 80081b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80081ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081be:	b289      	uxth	r1, r1
 80081c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081c4:	4577      	cmp	r7, lr
 80081c6:	f849 1b04 	str.w	r1, [r9], #4
 80081ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081ce:	d8e2      	bhi.n	8008196 <__multiply+0xb2>
 80081d0:	9a01      	ldr	r2, [sp, #4]
 80081d2:	f845 c002 	str.w	ip, [r5, r2]
 80081d6:	9a03      	ldr	r2, [sp, #12]
 80081d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081dc:	3304      	adds	r3, #4
 80081de:	f1b9 0f00 	cmp.w	r9, #0
 80081e2:	d020      	beq.n	8008226 <__multiply+0x142>
 80081e4:	6829      	ldr	r1, [r5, #0]
 80081e6:	f104 0c14 	add.w	ip, r4, #20
 80081ea:	46ae      	mov	lr, r5
 80081ec:	f04f 0a00 	mov.w	sl, #0
 80081f0:	f8bc b000 	ldrh.w	fp, [ip]
 80081f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80081f8:	fb09 220b 	mla	r2, r9, fp, r2
 80081fc:	4492      	add	sl, r2
 80081fe:	b289      	uxth	r1, r1
 8008200:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008204:	f84e 1b04 	str.w	r1, [lr], #4
 8008208:	f85c 2b04 	ldr.w	r2, [ip], #4
 800820c:	f8be 1000 	ldrh.w	r1, [lr]
 8008210:	0c12      	lsrs	r2, r2, #16
 8008212:	fb09 1102 	mla	r1, r9, r2, r1
 8008216:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800821a:	4567      	cmp	r7, ip
 800821c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008220:	d8e6      	bhi.n	80081f0 <__multiply+0x10c>
 8008222:	9a01      	ldr	r2, [sp, #4]
 8008224:	50a9      	str	r1, [r5, r2]
 8008226:	3504      	adds	r5, #4
 8008228:	e79a      	b.n	8008160 <__multiply+0x7c>
 800822a:	3e01      	subs	r6, #1
 800822c:	e79c      	b.n	8008168 <__multiply+0x84>
 800822e:	bf00      	nop
 8008230:	08009af0 	.word	0x08009af0
 8008234:	08009b7c 	.word	0x08009b7c

08008238 <__pow5mult>:
 8008238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800823c:	4615      	mov	r5, r2
 800823e:	f012 0203 	ands.w	r2, r2, #3
 8008242:	4606      	mov	r6, r0
 8008244:	460f      	mov	r7, r1
 8008246:	d007      	beq.n	8008258 <__pow5mult+0x20>
 8008248:	4c25      	ldr	r4, [pc, #148]	; (80082e0 <__pow5mult+0xa8>)
 800824a:	3a01      	subs	r2, #1
 800824c:	2300      	movs	r3, #0
 800824e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008252:	f7ff fe51 	bl	8007ef8 <__multadd>
 8008256:	4607      	mov	r7, r0
 8008258:	10ad      	asrs	r5, r5, #2
 800825a:	d03d      	beq.n	80082d8 <__pow5mult+0xa0>
 800825c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800825e:	b97c      	cbnz	r4, 8008280 <__pow5mult+0x48>
 8008260:	2010      	movs	r0, #16
 8008262:	f7ff fdbf 	bl	8007de4 <malloc>
 8008266:	4602      	mov	r2, r0
 8008268:	6270      	str	r0, [r6, #36]	; 0x24
 800826a:	b928      	cbnz	r0, 8008278 <__pow5mult+0x40>
 800826c:	4b1d      	ldr	r3, [pc, #116]	; (80082e4 <__pow5mult+0xac>)
 800826e:	481e      	ldr	r0, [pc, #120]	; (80082e8 <__pow5mult+0xb0>)
 8008270:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008274:	f000 fd2e 	bl	8008cd4 <__assert_func>
 8008278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800827c:	6004      	str	r4, [r0, #0]
 800827e:	60c4      	str	r4, [r0, #12]
 8008280:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008288:	b94c      	cbnz	r4, 800829e <__pow5mult+0x66>
 800828a:	f240 2171 	movw	r1, #625	; 0x271
 800828e:	4630      	mov	r0, r6
 8008290:	f7ff ff12 	bl	80080b8 <__i2b>
 8008294:	2300      	movs	r3, #0
 8008296:	f8c8 0008 	str.w	r0, [r8, #8]
 800829a:	4604      	mov	r4, r0
 800829c:	6003      	str	r3, [r0, #0]
 800829e:	f04f 0900 	mov.w	r9, #0
 80082a2:	07eb      	lsls	r3, r5, #31
 80082a4:	d50a      	bpl.n	80082bc <__pow5mult+0x84>
 80082a6:	4639      	mov	r1, r7
 80082a8:	4622      	mov	r2, r4
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7ff ff1a 	bl	80080e4 <__multiply>
 80082b0:	4639      	mov	r1, r7
 80082b2:	4680      	mov	r8, r0
 80082b4:	4630      	mov	r0, r6
 80082b6:	f7ff fdfd 	bl	8007eb4 <_Bfree>
 80082ba:	4647      	mov	r7, r8
 80082bc:	106d      	asrs	r5, r5, #1
 80082be:	d00b      	beq.n	80082d8 <__pow5mult+0xa0>
 80082c0:	6820      	ldr	r0, [r4, #0]
 80082c2:	b938      	cbnz	r0, 80082d4 <__pow5mult+0x9c>
 80082c4:	4622      	mov	r2, r4
 80082c6:	4621      	mov	r1, r4
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7ff ff0b 	bl	80080e4 <__multiply>
 80082ce:	6020      	str	r0, [r4, #0]
 80082d0:	f8c0 9000 	str.w	r9, [r0]
 80082d4:	4604      	mov	r4, r0
 80082d6:	e7e4      	b.n	80082a2 <__pow5mult+0x6a>
 80082d8:	4638      	mov	r0, r7
 80082da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082de:	bf00      	nop
 80082e0:	08009cc8 	.word	0x08009cc8
 80082e4:	08009a7e 	.word	0x08009a7e
 80082e8:	08009b7c 	.word	0x08009b7c

080082ec <__lshift>:
 80082ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f0:	460c      	mov	r4, r1
 80082f2:	6849      	ldr	r1, [r1, #4]
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082fa:	68a3      	ldr	r3, [r4, #8]
 80082fc:	4607      	mov	r7, r0
 80082fe:	4691      	mov	r9, r2
 8008300:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008304:	f108 0601 	add.w	r6, r8, #1
 8008308:	42b3      	cmp	r3, r6
 800830a:	db0b      	blt.n	8008324 <__lshift+0x38>
 800830c:	4638      	mov	r0, r7
 800830e:	f7ff fd91 	bl	8007e34 <_Balloc>
 8008312:	4605      	mov	r5, r0
 8008314:	b948      	cbnz	r0, 800832a <__lshift+0x3e>
 8008316:	4602      	mov	r2, r0
 8008318:	4b2a      	ldr	r3, [pc, #168]	; (80083c4 <__lshift+0xd8>)
 800831a:	482b      	ldr	r0, [pc, #172]	; (80083c8 <__lshift+0xdc>)
 800831c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008320:	f000 fcd8 	bl	8008cd4 <__assert_func>
 8008324:	3101      	adds	r1, #1
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	e7ee      	b.n	8008308 <__lshift+0x1c>
 800832a:	2300      	movs	r3, #0
 800832c:	f100 0114 	add.w	r1, r0, #20
 8008330:	f100 0210 	add.w	r2, r0, #16
 8008334:	4618      	mov	r0, r3
 8008336:	4553      	cmp	r3, sl
 8008338:	db37      	blt.n	80083aa <__lshift+0xbe>
 800833a:	6920      	ldr	r0, [r4, #16]
 800833c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008340:	f104 0314 	add.w	r3, r4, #20
 8008344:	f019 091f 	ands.w	r9, r9, #31
 8008348:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800834c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008350:	d02f      	beq.n	80083b2 <__lshift+0xc6>
 8008352:	f1c9 0e20 	rsb	lr, r9, #32
 8008356:	468a      	mov	sl, r1
 8008358:	f04f 0c00 	mov.w	ip, #0
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	fa02 f209 	lsl.w	r2, r2, r9
 8008362:	ea42 020c 	orr.w	r2, r2, ip
 8008366:	f84a 2b04 	str.w	r2, [sl], #4
 800836a:	f853 2b04 	ldr.w	r2, [r3], #4
 800836e:	4298      	cmp	r0, r3
 8008370:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008374:	d8f2      	bhi.n	800835c <__lshift+0x70>
 8008376:	1b03      	subs	r3, r0, r4
 8008378:	3b15      	subs	r3, #21
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	3304      	adds	r3, #4
 8008380:	f104 0215 	add.w	r2, r4, #21
 8008384:	4290      	cmp	r0, r2
 8008386:	bf38      	it	cc
 8008388:	2304      	movcc	r3, #4
 800838a:	f841 c003 	str.w	ip, [r1, r3]
 800838e:	f1bc 0f00 	cmp.w	ip, #0
 8008392:	d001      	beq.n	8008398 <__lshift+0xac>
 8008394:	f108 0602 	add.w	r6, r8, #2
 8008398:	3e01      	subs	r6, #1
 800839a:	4638      	mov	r0, r7
 800839c:	612e      	str	r6, [r5, #16]
 800839e:	4621      	mov	r1, r4
 80083a0:	f7ff fd88 	bl	8007eb4 <_Bfree>
 80083a4:	4628      	mov	r0, r5
 80083a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80083ae:	3301      	adds	r3, #1
 80083b0:	e7c1      	b.n	8008336 <__lshift+0x4a>
 80083b2:	3904      	subs	r1, #4
 80083b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80083bc:	4298      	cmp	r0, r3
 80083be:	d8f9      	bhi.n	80083b4 <__lshift+0xc8>
 80083c0:	e7ea      	b.n	8008398 <__lshift+0xac>
 80083c2:	bf00      	nop
 80083c4:	08009af0 	.word	0x08009af0
 80083c8:	08009b7c 	.word	0x08009b7c

080083cc <__mcmp>:
 80083cc:	b530      	push	{r4, r5, lr}
 80083ce:	6902      	ldr	r2, [r0, #16]
 80083d0:	690c      	ldr	r4, [r1, #16]
 80083d2:	1b12      	subs	r2, r2, r4
 80083d4:	d10e      	bne.n	80083f4 <__mcmp+0x28>
 80083d6:	f100 0314 	add.w	r3, r0, #20
 80083da:	3114      	adds	r1, #20
 80083dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80083e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80083e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80083ec:	42a5      	cmp	r5, r4
 80083ee:	d003      	beq.n	80083f8 <__mcmp+0x2c>
 80083f0:	d305      	bcc.n	80083fe <__mcmp+0x32>
 80083f2:	2201      	movs	r2, #1
 80083f4:	4610      	mov	r0, r2
 80083f6:	bd30      	pop	{r4, r5, pc}
 80083f8:	4283      	cmp	r3, r0
 80083fa:	d3f3      	bcc.n	80083e4 <__mcmp+0x18>
 80083fc:	e7fa      	b.n	80083f4 <__mcmp+0x28>
 80083fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008402:	e7f7      	b.n	80083f4 <__mcmp+0x28>

08008404 <__mdiff>:
 8008404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008408:	460c      	mov	r4, r1
 800840a:	4606      	mov	r6, r0
 800840c:	4611      	mov	r1, r2
 800840e:	4620      	mov	r0, r4
 8008410:	4690      	mov	r8, r2
 8008412:	f7ff ffdb 	bl	80083cc <__mcmp>
 8008416:	1e05      	subs	r5, r0, #0
 8008418:	d110      	bne.n	800843c <__mdiff+0x38>
 800841a:	4629      	mov	r1, r5
 800841c:	4630      	mov	r0, r6
 800841e:	f7ff fd09 	bl	8007e34 <_Balloc>
 8008422:	b930      	cbnz	r0, 8008432 <__mdiff+0x2e>
 8008424:	4b3a      	ldr	r3, [pc, #232]	; (8008510 <__mdiff+0x10c>)
 8008426:	4602      	mov	r2, r0
 8008428:	f240 2132 	movw	r1, #562	; 0x232
 800842c:	4839      	ldr	r0, [pc, #228]	; (8008514 <__mdiff+0x110>)
 800842e:	f000 fc51 	bl	8008cd4 <__assert_func>
 8008432:	2301      	movs	r3, #1
 8008434:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800843c:	bfa4      	itt	ge
 800843e:	4643      	movge	r3, r8
 8008440:	46a0      	movge	r8, r4
 8008442:	4630      	mov	r0, r6
 8008444:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008448:	bfa6      	itte	ge
 800844a:	461c      	movge	r4, r3
 800844c:	2500      	movge	r5, #0
 800844e:	2501      	movlt	r5, #1
 8008450:	f7ff fcf0 	bl	8007e34 <_Balloc>
 8008454:	b920      	cbnz	r0, 8008460 <__mdiff+0x5c>
 8008456:	4b2e      	ldr	r3, [pc, #184]	; (8008510 <__mdiff+0x10c>)
 8008458:	4602      	mov	r2, r0
 800845a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800845e:	e7e5      	b.n	800842c <__mdiff+0x28>
 8008460:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008464:	6926      	ldr	r6, [r4, #16]
 8008466:	60c5      	str	r5, [r0, #12]
 8008468:	f104 0914 	add.w	r9, r4, #20
 800846c:	f108 0514 	add.w	r5, r8, #20
 8008470:	f100 0e14 	add.w	lr, r0, #20
 8008474:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008478:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800847c:	f108 0210 	add.w	r2, r8, #16
 8008480:	46f2      	mov	sl, lr
 8008482:	2100      	movs	r1, #0
 8008484:	f859 3b04 	ldr.w	r3, [r9], #4
 8008488:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800848c:	fa1f f883 	uxth.w	r8, r3
 8008490:	fa11 f18b 	uxtah	r1, r1, fp
 8008494:	0c1b      	lsrs	r3, r3, #16
 8008496:	eba1 0808 	sub.w	r8, r1, r8
 800849a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800849e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80084a2:	fa1f f888 	uxth.w	r8, r8
 80084a6:	1419      	asrs	r1, r3, #16
 80084a8:	454e      	cmp	r6, r9
 80084aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084ae:	f84a 3b04 	str.w	r3, [sl], #4
 80084b2:	d8e7      	bhi.n	8008484 <__mdiff+0x80>
 80084b4:	1b33      	subs	r3, r6, r4
 80084b6:	3b15      	subs	r3, #21
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	3304      	adds	r3, #4
 80084be:	3415      	adds	r4, #21
 80084c0:	42a6      	cmp	r6, r4
 80084c2:	bf38      	it	cc
 80084c4:	2304      	movcc	r3, #4
 80084c6:	441d      	add	r5, r3
 80084c8:	4473      	add	r3, lr
 80084ca:	469e      	mov	lr, r3
 80084cc:	462e      	mov	r6, r5
 80084ce:	4566      	cmp	r6, ip
 80084d0:	d30e      	bcc.n	80084f0 <__mdiff+0xec>
 80084d2:	f10c 0203 	add.w	r2, ip, #3
 80084d6:	1b52      	subs	r2, r2, r5
 80084d8:	f022 0203 	bic.w	r2, r2, #3
 80084dc:	3d03      	subs	r5, #3
 80084de:	45ac      	cmp	ip, r5
 80084e0:	bf38      	it	cc
 80084e2:	2200      	movcc	r2, #0
 80084e4:	441a      	add	r2, r3
 80084e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80084ea:	b17b      	cbz	r3, 800850c <__mdiff+0x108>
 80084ec:	6107      	str	r7, [r0, #16]
 80084ee:	e7a3      	b.n	8008438 <__mdiff+0x34>
 80084f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80084f4:	fa11 f288 	uxtah	r2, r1, r8
 80084f8:	1414      	asrs	r4, r2, #16
 80084fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80084fe:	b292      	uxth	r2, r2
 8008500:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008504:	f84e 2b04 	str.w	r2, [lr], #4
 8008508:	1421      	asrs	r1, r4, #16
 800850a:	e7e0      	b.n	80084ce <__mdiff+0xca>
 800850c:	3f01      	subs	r7, #1
 800850e:	e7ea      	b.n	80084e6 <__mdiff+0xe2>
 8008510:	08009af0 	.word	0x08009af0
 8008514:	08009b7c 	.word	0x08009b7c

08008518 <__ulp>:
 8008518:	b082      	sub	sp, #8
 800851a:	ed8d 0b00 	vstr	d0, [sp]
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	4912      	ldr	r1, [pc, #72]	; (800856c <__ulp+0x54>)
 8008522:	4019      	ands	r1, r3
 8008524:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008528:	2900      	cmp	r1, #0
 800852a:	dd05      	ble.n	8008538 <__ulp+0x20>
 800852c:	2200      	movs	r2, #0
 800852e:	460b      	mov	r3, r1
 8008530:	ec43 2b10 	vmov	d0, r2, r3
 8008534:	b002      	add	sp, #8
 8008536:	4770      	bx	lr
 8008538:	4249      	negs	r1, r1
 800853a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800853e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008542:	f04f 0200 	mov.w	r2, #0
 8008546:	f04f 0300 	mov.w	r3, #0
 800854a:	da04      	bge.n	8008556 <__ulp+0x3e>
 800854c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008550:	fa41 f300 	asr.w	r3, r1, r0
 8008554:	e7ec      	b.n	8008530 <__ulp+0x18>
 8008556:	f1a0 0114 	sub.w	r1, r0, #20
 800855a:	291e      	cmp	r1, #30
 800855c:	bfda      	itte	le
 800855e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008562:	fa20 f101 	lsrle.w	r1, r0, r1
 8008566:	2101      	movgt	r1, #1
 8008568:	460a      	mov	r2, r1
 800856a:	e7e1      	b.n	8008530 <__ulp+0x18>
 800856c:	7ff00000 	.word	0x7ff00000

08008570 <__b2d>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	6905      	ldr	r5, [r0, #16]
 8008574:	f100 0714 	add.w	r7, r0, #20
 8008578:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800857c:	1f2e      	subs	r6, r5, #4
 800857e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008582:	4620      	mov	r0, r4
 8008584:	f7ff fd48 	bl	8008018 <__hi0bits>
 8008588:	f1c0 0320 	rsb	r3, r0, #32
 800858c:	280a      	cmp	r0, #10
 800858e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800860c <__b2d+0x9c>
 8008592:	600b      	str	r3, [r1, #0]
 8008594:	dc14      	bgt.n	80085c0 <__b2d+0x50>
 8008596:	f1c0 0e0b 	rsb	lr, r0, #11
 800859a:	fa24 f10e 	lsr.w	r1, r4, lr
 800859e:	42b7      	cmp	r7, r6
 80085a0:	ea41 030c 	orr.w	r3, r1, ip
 80085a4:	bf34      	ite	cc
 80085a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80085aa:	2100      	movcs	r1, #0
 80085ac:	3015      	adds	r0, #21
 80085ae:	fa04 f000 	lsl.w	r0, r4, r0
 80085b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80085b6:	ea40 0201 	orr.w	r2, r0, r1
 80085ba:	ec43 2b10 	vmov	d0, r2, r3
 80085be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085c0:	42b7      	cmp	r7, r6
 80085c2:	bf3a      	itte	cc
 80085c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80085c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80085cc:	2100      	movcs	r1, #0
 80085ce:	380b      	subs	r0, #11
 80085d0:	d017      	beq.n	8008602 <__b2d+0x92>
 80085d2:	f1c0 0c20 	rsb	ip, r0, #32
 80085d6:	fa04 f500 	lsl.w	r5, r4, r0
 80085da:	42be      	cmp	r6, r7
 80085dc:	fa21 f40c 	lsr.w	r4, r1, ip
 80085e0:	ea45 0504 	orr.w	r5, r5, r4
 80085e4:	bf8c      	ite	hi
 80085e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80085ea:	2400      	movls	r4, #0
 80085ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80085f0:	fa01 f000 	lsl.w	r0, r1, r0
 80085f4:	fa24 f40c 	lsr.w	r4, r4, ip
 80085f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80085fc:	ea40 0204 	orr.w	r2, r0, r4
 8008600:	e7db      	b.n	80085ba <__b2d+0x4a>
 8008602:	ea44 030c 	orr.w	r3, r4, ip
 8008606:	460a      	mov	r2, r1
 8008608:	e7d7      	b.n	80085ba <__b2d+0x4a>
 800860a:	bf00      	nop
 800860c:	3ff00000 	.word	0x3ff00000

08008610 <__d2b>:
 8008610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008614:	4689      	mov	r9, r1
 8008616:	2101      	movs	r1, #1
 8008618:	ec57 6b10 	vmov	r6, r7, d0
 800861c:	4690      	mov	r8, r2
 800861e:	f7ff fc09 	bl	8007e34 <_Balloc>
 8008622:	4604      	mov	r4, r0
 8008624:	b930      	cbnz	r0, 8008634 <__d2b+0x24>
 8008626:	4602      	mov	r2, r0
 8008628:	4b25      	ldr	r3, [pc, #148]	; (80086c0 <__d2b+0xb0>)
 800862a:	4826      	ldr	r0, [pc, #152]	; (80086c4 <__d2b+0xb4>)
 800862c:	f240 310a 	movw	r1, #778	; 0x30a
 8008630:	f000 fb50 	bl	8008cd4 <__assert_func>
 8008634:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800863c:	bb35      	cbnz	r5, 800868c <__d2b+0x7c>
 800863e:	2e00      	cmp	r6, #0
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	d028      	beq.n	8008696 <__d2b+0x86>
 8008644:	4668      	mov	r0, sp
 8008646:	9600      	str	r6, [sp, #0]
 8008648:	f7ff fd06 	bl	8008058 <__lo0bits>
 800864c:	9900      	ldr	r1, [sp, #0]
 800864e:	b300      	cbz	r0, 8008692 <__d2b+0x82>
 8008650:	9a01      	ldr	r2, [sp, #4]
 8008652:	f1c0 0320 	rsb	r3, r0, #32
 8008656:	fa02 f303 	lsl.w	r3, r2, r3
 800865a:	430b      	orrs	r3, r1
 800865c:	40c2      	lsrs	r2, r0
 800865e:	6163      	str	r3, [r4, #20]
 8008660:	9201      	str	r2, [sp, #4]
 8008662:	9b01      	ldr	r3, [sp, #4]
 8008664:	61a3      	str	r3, [r4, #24]
 8008666:	2b00      	cmp	r3, #0
 8008668:	bf14      	ite	ne
 800866a:	2202      	movne	r2, #2
 800866c:	2201      	moveq	r2, #1
 800866e:	6122      	str	r2, [r4, #16]
 8008670:	b1d5      	cbz	r5, 80086a8 <__d2b+0x98>
 8008672:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008676:	4405      	add	r5, r0
 8008678:	f8c9 5000 	str.w	r5, [r9]
 800867c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008680:	f8c8 0000 	str.w	r0, [r8]
 8008684:	4620      	mov	r0, r4
 8008686:	b003      	add	sp, #12
 8008688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800868c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008690:	e7d5      	b.n	800863e <__d2b+0x2e>
 8008692:	6161      	str	r1, [r4, #20]
 8008694:	e7e5      	b.n	8008662 <__d2b+0x52>
 8008696:	a801      	add	r0, sp, #4
 8008698:	f7ff fcde 	bl	8008058 <__lo0bits>
 800869c:	9b01      	ldr	r3, [sp, #4]
 800869e:	6163      	str	r3, [r4, #20]
 80086a0:	2201      	movs	r2, #1
 80086a2:	6122      	str	r2, [r4, #16]
 80086a4:	3020      	adds	r0, #32
 80086a6:	e7e3      	b.n	8008670 <__d2b+0x60>
 80086a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086b0:	f8c9 0000 	str.w	r0, [r9]
 80086b4:	6918      	ldr	r0, [r3, #16]
 80086b6:	f7ff fcaf 	bl	8008018 <__hi0bits>
 80086ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086be:	e7df      	b.n	8008680 <__d2b+0x70>
 80086c0:	08009af0 	.word	0x08009af0
 80086c4:	08009b7c 	.word	0x08009b7c

080086c8 <__ratio>:
 80086c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086cc:	4688      	mov	r8, r1
 80086ce:	4669      	mov	r1, sp
 80086d0:	4681      	mov	r9, r0
 80086d2:	f7ff ff4d 	bl	8008570 <__b2d>
 80086d6:	a901      	add	r1, sp, #4
 80086d8:	4640      	mov	r0, r8
 80086da:	ec55 4b10 	vmov	r4, r5, d0
 80086de:	f7ff ff47 	bl	8008570 <__b2d>
 80086e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80086ea:	eba3 0c02 	sub.w	ip, r3, r2
 80086ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80086f2:	1a9b      	subs	r3, r3, r2
 80086f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80086f8:	ec51 0b10 	vmov	r0, r1, d0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	bfd6      	itet	le
 8008700:	460a      	movle	r2, r1
 8008702:	462a      	movgt	r2, r5
 8008704:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008708:	468b      	mov	fp, r1
 800870a:	462f      	mov	r7, r5
 800870c:	bfd4      	ite	le
 800870e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008712:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008716:	4620      	mov	r0, r4
 8008718:	ee10 2a10 	vmov	r2, s0
 800871c:	465b      	mov	r3, fp
 800871e:	4639      	mov	r1, r7
 8008720:	f7f8 f894 	bl	800084c <__aeabi_ddiv>
 8008724:	ec41 0b10 	vmov	d0, r0, r1
 8008728:	b003      	add	sp, #12
 800872a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800872e <__copybits>:
 800872e:	3901      	subs	r1, #1
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	1149      	asrs	r1, r1, #5
 8008734:	6914      	ldr	r4, [r2, #16]
 8008736:	3101      	adds	r1, #1
 8008738:	f102 0314 	add.w	r3, r2, #20
 800873c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008740:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008744:	1f05      	subs	r5, r0, #4
 8008746:	42a3      	cmp	r3, r4
 8008748:	d30c      	bcc.n	8008764 <__copybits+0x36>
 800874a:	1aa3      	subs	r3, r4, r2
 800874c:	3b11      	subs	r3, #17
 800874e:	f023 0303 	bic.w	r3, r3, #3
 8008752:	3211      	adds	r2, #17
 8008754:	42a2      	cmp	r2, r4
 8008756:	bf88      	it	hi
 8008758:	2300      	movhi	r3, #0
 800875a:	4418      	add	r0, r3
 800875c:	2300      	movs	r3, #0
 800875e:	4288      	cmp	r0, r1
 8008760:	d305      	bcc.n	800876e <__copybits+0x40>
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	f853 6b04 	ldr.w	r6, [r3], #4
 8008768:	f845 6f04 	str.w	r6, [r5, #4]!
 800876c:	e7eb      	b.n	8008746 <__copybits+0x18>
 800876e:	f840 3b04 	str.w	r3, [r0], #4
 8008772:	e7f4      	b.n	800875e <__copybits+0x30>

08008774 <__any_on>:
 8008774:	f100 0214 	add.w	r2, r0, #20
 8008778:	6900      	ldr	r0, [r0, #16]
 800877a:	114b      	asrs	r3, r1, #5
 800877c:	4298      	cmp	r0, r3
 800877e:	b510      	push	{r4, lr}
 8008780:	db11      	blt.n	80087a6 <__any_on+0x32>
 8008782:	dd0a      	ble.n	800879a <__any_on+0x26>
 8008784:	f011 011f 	ands.w	r1, r1, #31
 8008788:	d007      	beq.n	800879a <__any_on+0x26>
 800878a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800878e:	fa24 f001 	lsr.w	r0, r4, r1
 8008792:	fa00 f101 	lsl.w	r1, r0, r1
 8008796:	428c      	cmp	r4, r1
 8008798:	d10b      	bne.n	80087b2 <__any_on+0x3e>
 800879a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800879e:	4293      	cmp	r3, r2
 80087a0:	d803      	bhi.n	80087aa <__any_on+0x36>
 80087a2:	2000      	movs	r0, #0
 80087a4:	bd10      	pop	{r4, pc}
 80087a6:	4603      	mov	r3, r0
 80087a8:	e7f7      	b.n	800879a <__any_on+0x26>
 80087aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087ae:	2900      	cmp	r1, #0
 80087b0:	d0f5      	beq.n	800879e <__any_on+0x2a>
 80087b2:	2001      	movs	r0, #1
 80087b4:	e7f6      	b.n	80087a4 <__any_on+0x30>

080087b6 <_calloc_r>:
 80087b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087b8:	fba1 2402 	umull	r2, r4, r1, r2
 80087bc:	b94c      	cbnz	r4, 80087d2 <_calloc_r+0x1c>
 80087be:	4611      	mov	r1, r2
 80087c0:	9201      	str	r2, [sp, #4]
 80087c2:	f000 f87b 	bl	80088bc <_malloc_r>
 80087c6:	9a01      	ldr	r2, [sp, #4]
 80087c8:	4605      	mov	r5, r0
 80087ca:	b930      	cbnz	r0, 80087da <_calloc_r+0x24>
 80087cc:	4628      	mov	r0, r5
 80087ce:	b003      	add	sp, #12
 80087d0:	bd30      	pop	{r4, r5, pc}
 80087d2:	220c      	movs	r2, #12
 80087d4:	6002      	str	r2, [r0, #0]
 80087d6:	2500      	movs	r5, #0
 80087d8:	e7f8      	b.n	80087cc <_calloc_r+0x16>
 80087da:	4621      	mov	r1, r4
 80087dc:	f7fc fbc0 	bl	8004f60 <memset>
 80087e0:	e7f4      	b.n	80087cc <_calloc_r+0x16>
	...

080087e4 <_free_r>:
 80087e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087e6:	2900      	cmp	r1, #0
 80087e8:	d044      	beq.n	8008874 <_free_r+0x90>
 80087ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ee:	9001      	str	r0, [sp, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f1a1 0404 	sub.w	r4, r1, #4
 80087f6:	bfb8      	it	lt
 80087f8:	18e4      	addlt	r4, r4, r3
 80087fa:	f000 fab5 	bl	8008d68 <__malloc_lock>
 80087fe:	4a1e      	ldr	r2, [pc, #120]	; (8008878 <_free_r+0x94>)
 8008800:	9801      	ldr	r0, [sp, #4]
 8008802:	6813      	ldr	r3, [r2, #0]
 8008804:	b933      	cbnz	r3, 8008814 <_free_r+0x30>
 8008806:	6063      	str	r3, [r4, #4]
 8008808:	6014      	str	r4, [r2, #0]
 800880a:	b003      	add	sp, #12
 800880c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008810:	f000 bab0 	b.w	8008d74 <__malloc_unlock>
 8008814:	42a3      	cmp	r3, r4
 8008816:	d908      	bls.n	800882a <_free_r+0x46>
 8008818:	6825      	ldr	r5, [r4, #0]
 800881a:	1961      	adds	r1, r4, r5
 800881c:	428b      	cmp	r3, r1
 800881e:	bf01      	itttt	eq
 8008820:	6819      	ldreq	r1, [r3, #0]
 8008822:	685b      	ldreq	r3, [r3, #4]
 8008824:	1949      	addeq	r1, r1, r5
 8008826:	6021      	streq	r1, [r4, #0]
 8008828:	e7ed      	b.n	8008806 <_free_r+0x22>
 800882a:	461a      	mov	r2, r3
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	b10b      	cbz	r3, 8008834 <_free_r+0x50>
 8008830:	42a3      	cmp	r3, r4
 8008832:	d9fa      	bls.n	800882a <_free_r+0x46>
 8008834:	6811      	ldr	r1, [r2, #0]
 8008836:	1855      	adds	r5, r2, r1
 8008838:	42a5      	cmp	r5, r4
 800883a:	d10b      	bne.n	8008854 <_free_r+0x70>
 800883c:	6824      	ldr	r4, [r4, #0]
 800883e:	4421      	add	r1, r4
 8008840:	1854      	adds	r4, r2, r1
 8008842:	42a3      	cmp	r3, r4
 8008844:	6011      	str	r1, [r2, #0]
 8008846:	d1e0      	bne.n	800880a <_free_r+0x26>
 8008848:	681c      	ldr	r4, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	6053      	str	r3, [r2, #4]
 800884e:	4421      	add	r1, r4
 8008850:	6011      	str	r1, [r2, #0]
 8008852:	e7da      	b.n	800880a <_free_r+0x26>
 8008854:	d902      	bls.n	800885c <_free_r+0x78>
 8008856:	230c      	movs	r3, #12
 8008858:	6003      	str	r3, [r0, #0]
 800885a:	e7d6      	b.n	800880a <_free_r+0x26>
 800885c:	6825      	ldr	r5, [r4, #0]
 800885e:	1961      	adds	r1, r4, r5
 8008860:	428b      	cmp	r3, r1
 8008862:	bf04      	itt	eq
 8008864:	6819      	ldreq	r1, [r3, #0]
 8008866:	685b      	ldreq	r3, [r3, #4]
 8008868:	6063      	str	r3, [r4, #4]
 800886a:	bf04      	itt	eq
 800886c:	1949      	addeq	r1, r1, r5
 800886e:	6021      	streq	r1, [r4, #0]
 8008870:	6054      	str	r4, [r2, #4]
 8008872:	e7ca      	b.n	800880a <_free_r+0x26>
 8008874:	b003      	add	sp, #12
 8008876:	bd30      	pop	{r4, r5, pc}
 8008878:	20000338 	.word	0x20000338

0800887c <sbrk_aligned>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	4e0e      	ldr	r6, [pc, #56]	; (80088b8 <sbrk_aligned+0x3c>)
 8008880:	460c      	mov	r4, r1
 8008882:	6831      	ldr	r1, [r6, #0]
 8008884:	4605      	mov	r5, r0
 8008886:	b911      	cbnz	r1, 800888e <sbrk_aligned+0x12>
 8008888:	f000 f9f2 	bl	8008c70 <_sbrk_r>
 800888c:	6030      	str	r0, [r6, #0]
 800888e:	4621      	mov	r1, r4
 8008890:	4628      	mov	r0, r5
 8008892:	f000 f9ed 	bl	8008c70 <_sbrk_r>
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	d00a      	beq.n	80088b0 <sbrk_aligned+0x34>
 800889a:	1cc4      	adds	r4, r0, #3
 800889c:	f024 0403 	bic.w	r4, r4, #3
 80088a0:	42a0      	cmp	r0, r4
 80088a2:	d007      	beq.n	80088b4 <sbrk_aligned+0x38>
 80088a4:	1a21      	subs	r1, r4, r0
 80088a6:	4628      	mov	r0, r5
 80088a8:	f000 f9e2 	bl	8008c70 <_sbrk_r>
 80088ac:	3001      	adds	r0, #1
 80088ae:	d101      	bne.n	80088b4 <sbrk_aligned+0x38>
 80088b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80088b4:	4620      	mov	r0, r4
 80088b6:	bd70      	pop	{r4, r5, r6, pc}
 80088b8:	2000033c 	.word	0x2000033c

080088bc <_malloc_r>:
 80088bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c0:	1ccd      	adds	r5, r1, #3
 80088c2:	f025 0503 	bic.w	r5, r5, #3
 80088c6:	3508      	adds	r5, #8
 80088c8:	2d0c      	cmp	r5, #12
 80088ca:	bf38      	it	cc
 80088cc:	250c      	movcc	r5, #12
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	4607      	mov	r7, r0
 80088d2:	db01      	blt.n	80088d8 <_malloc_r+0x1c>
 80088d4:	42a9      	cmp	r1, r5
 80088d6:	d905      	bls.n	80088e4 <_malloc_r+0x28>
 80088d8:	230c      	movs	r3, #12
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	2600      	movs	r6, #0
 80088de:	4630      	mov	r0, r6
 80088e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e4:	4e2e      	ldr	r6, [pc, #184]	; (80089a0 <_malloc_r+0xe4>)
 80088e6:	f000 fa3f 	bl	8008d68 <__malloc_lock>
 80088ea:	6833      	ldr	r3, [r6, #0]
 80088ec:	461c      	mov	r4, r3
 80088ee:	bb34      	cbnz	r4, 800893e <_malloc_r+0x82>
 80088f0:	4629      	mov	r1, r5
 80088f2:	4638      	mov	r0, r7
 80088f4:	f7ff ffc2 	bl	800887c <sbrk_aligned>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	4604      	mov	r4, r0
 80088fc:	d14d      	bne.n	800899a <_malloc_r+0xde>
 80088fe:	6834      	ldr	r4, [r6, #0]
 8008900:	4626      	mov	r6, r4
 8008902:	2e00      	cmp	r6, #0
 8008904:	d140      	bne.n	8008988 <_malloc_r+0xcc>
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	4631      	mov	r1, r6
 800890a:	4638      	mov	r0, r7
 800890c:	eb04 0803 	add.w	r8, r4, r3
 8008910:	f000 f9ae 	bl	8008c70 <_sbrk_r>
 8008914:	4580      	cmp	r8, r0
 8008916:	d13a      	bne.n	800898e <_malloc_r+0xd2>
 8008918:	6821      	ldr	r1, [r4, #0]
 800891a:	3503      	adds	r5, #3
 800891c:	1a6d      	subs	r5, r5, r1
 800891e:	f025 0503 	bic.w	r5, r5, #3
 8008922:	3508      	adds	r5, #8
 8008924:	2d0c      	cmp	r5, #12
 8008926:	bf38      	it	cc
 8008928:	250c      	movcc	r5, #12
 800892a:	4629      	mov	r1, r5
 800892c:	4638      	mov	r0, r7
 800892e:	f7ff ffa5 	bl	800887c <sbrk_aligned>
 8008932:	3001      	adds	r0, #1
 8008934:	d02b      	beq.n	800898e <_malloc_r+0xd2>
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	442b      	add	r3, r5
 800893a:	6023      	str	r3, [r4, #0]
 800893c:	e00e      	b.n	800895c <_malloc_r+0xa0>
 800893e:	6822      	ldr	r2, [r4, #0]
 8008940:	1b52      	subs	r2, r2, r5
 8008942:	d41e      	bmi.n	8008982 <_malloc_r+0xc6>
 8008944:	2a0b      	cmp	r2, #11
 8008946:	d916      	bls.n	8008976 <_malloc_r+0xba>
 8008948:	1961      	adds	r1, r4, r5
 800894a:	42a3      	cmp	r3, r4
 800894c:	6025      	str	r5, [r4, #0]
 800894e:	bf18      	it	ne
 8008950:	6059      	strne	r1, [r3, #4]
 8008952:	6863      	ldr	r3, [r4, #4]
 8008954:	bf08      	it	eq
 8008956:	6031      	streq	r1, [r6, #0]
 8008958:	5162      	str	r2, [r4, r5]
 800895a:	604b      	str	r3, [r1, #4]
 800895c:	4638      	mov	r0, r7
 800895e:	f104 060b 	add.w	r6, r4, #11
 8008962:	f000 fa07 	bl	8008d74 <__malloc_unlock>
 8008966:	f026 0607 	bic.w	r6, r6, #7
 800896a:	1d23      	adds	r3, r4, #4
 800896c:	1af2      	subs	r2, r6, r3
 800896e:	d0b6      	beq.n	80088de <_malloc_r+0x22>
 8008970:	1b9b      	subs	r3, r3, r6
 8008972:	50a3      	str	r3, [r4, r2]
 8008974:	e7b3      	b.n	80088de <_malloc_r+0x22>
 8008976:	6862      	ldr	r2, [r4, #4]
 8008978:	42a3      	cmp	r3, r4
 800897a:	bf0c      	ite	eq
 800897c:	6032      	streq	r2, [r6, #0]
 800897e:	605a      	strne	r2, [r3, #4]
 8008980:	e7ec      	b.n	800895c <_malloc_r+0xa0>
 8008982:	4623      	mov	r3, r4
 8008984:	6864      	ldr	r4, [r4, #4]
 8008986:	e7b2      	b.n	80088ee <_malloc_r+0x32>
 8008988:	4634      	mov	r4, r6
 800898a:	6876      	ldr	r6, [r6, #4]
 800898c:	e7b9      	b.n	8008902 <_malloc_r+0x46>
 800898e:	230c      	movs	r3, #12
 8008990:	603b      	str	r3, [r7, #0]
 8008992:	4638      	mov	r0, r7
 8008994:	f000 f9ee 	bl	8008d74 <__malloc_unlock>
 8008998:	e7a1      	b.n	80088de <_malloc_r+0x22>
 800899a:	6025      	str	r5, [r4, #0]
 800899c:	e7de      	b.n	800895c <_malloc_r+0xa0>
 800899e:	bf00      	nop
 80089a0:	20000338 	.word	0x20000338

080089a4 <__ssputs_r>:
 80089a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a8:	688e      	ldr	r6, [r1, #8]
 80089aa:	429e      	cmp	r6, r3
 80089ac:	4682      	mov	sl, r0
 80089ae:	460c      	mov	r4, r1
 80089b0:	4690      	mov	r8, r2
 80089b2:	461f      	mov	r7, r3
 80089b4:	d838      	bhi.n	8008a28 <__ssputs_r+0x84>
 80089b6:	898a      	ldrh	r2, [r1, #12]
 80089b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089bc:	d032      	beq.n	8008a24 <__ssputs_r+0x80>
 80089be:	6825      	ldr	r5, [r4, #0]
 80089c0:	6909      	ldr	r1, [r1, #16]
 80089c2:	eba5 0901 	sub.w	r9, r5, r1
 80089c6:	6965      	ldr	r5, [r4, #20]
 80089c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089d0:	3301      	adds	r3, #1
 80089d2:	444b      	add	r3, r9
 80089d4:	106d      	asrs	r5, r5, #1
 80089d6:	429d      	cmp	r5, r3
 80089d8:	bf38      	it	cc
 80089da:	461d      	movcc	r5, r3
 80089dc:	0553      	lsls	r3, r2, #21
 80089de:	d531      	bpl.n	8008a44 <__ssputs_r+0xa0>
 80089e0:	4629      	mov	r1, r5
 80089e2:	f7ff ff6b 	bl	80088bc <_malloc_r>
 80089e6:	4606      	mov	r6, r0
 80089e8:	b950      	cbnz	r0, 8008a00 <__ssputs_r+0x5c>
 80089ea:	230c      	movs	r3, #12
 80089ec:	f8ca 3000 	str.w	r3, [sl]
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f6:	81a3      	strh	r3, [r4, #12]
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a00:	6921      	ldr	r1, [r4, #16]
 8008a02:	464a      	mov	r2, r9
 8008a04:	f7ff fa08 	bl	8007e18 <memcpy>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	6126      	str	r6, [r4, #16]
 8008a16:	6165      	str	r5, [r4, #20]
 8008a18:	444e      	add	r6, r9
 8008a1a:	eba5 0509 	sub.w	r5, r5, r9
 8008a1e:	6026      	str	r6, [r4, #0]
 8008a20:	60a5      	str	r5, [r4, #8]
 8008a22:	463e      	mov	r6, r7
 8008a24:	42be      	cmp	r6, r7
 8008a26:	d900      	bls.n	8008a2a <__ssputs_r+0x86>
 8008a28:	463e      	mov	r6, r7
 8008a2a:	6820      	ldr	r0, [r4, #0]
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	4641      	mov	r1, r8
 8008a30:	f000 f980 	bl	8008d34 <memmove>
 8008a34:	68a3      	ldr	r3, [r4, #8]
 8008a36:	1b9b      	subs	r3, r3, r6
 8008a38:	60a3      	str	r3, [r4, #8]
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	4433      	add	r3, r6
 8008a3e:	6023      	str	r3, [r4, #0]
 8008a40:	2000      	movs	r0, #0
 8008a42:	e7db      	b.n	80089fc <__ssputs_r+0x58>
 8008a44:	462a      	mov	r2, r5
 8008a46:	f000 f99b 	bl	8008d80 <_realloc_r>
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d1e1      	bne.n	8008a14 <__ssputs_r+0x70>
 8008a50:	6921      	ldr	r1, [r4, #16]
 8008a52:	4650      	mov	r0, sl
 8008a54:	f7ff fec6 	bl	80087e4 <_free_r>
 8008a58:	e7c7      	b.n	80089ea <__ssputs_r+0x46>
	...

08008a5c <_svfiprintf_r>:
 8008a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a60:	4698      	mov	r8, r3
 8008a62:	898b      	ldrh	r3, [r1, #12]
 8008a64:	061b      	lsls	r3, r3, #24
 8008a66:	b09d      	sub	sp, #116	; 0x74
 8008a68:	4607      	mov	r7, r0
 8008a6a:	460d      	mov	r5, r1
 8008a6c:	4614      	mov	r4, r2
 8008a6e:	d50e      	bpl.n	8008a8e <_svfiprintf_r+0x32>
 8008a70:	690b      	ldr	r3, [r1, #16]
 8008a72:	b963      	cbnz	r3, 8008a8e <_svfiprintf_r+0x32>
 8008a74:	2140      	movs	r1, #64	; 0x40
 8008a76:	f7ff ff21 	bl	80088bc <_malloc_r>
 8008a7a:	6028      	str	r0, [r5, #0]
 8008a7c:	6128      	str	r0, [r5, #16]
 8008a7e:	b920      	cbnz	r0, 8008a8a <_svfiprintf_r+0x2e>
 8008a80:	230c      	movs	r3, #12
 8008a82:	603b      	str	r3, [r7, #0]
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a88:	e0d1      	b.n	8008c2e <_svfiprintf_r+0x1d2>
 8008a8a:	2340      	movs	r3, #64	; 0x40
 8008a8c:	616b      	str	r3, [r5, #20]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9309      	str	r3, [sp, #36]	; 0x24
 8008a92:	2320      	movs	r3, #32
 8008a94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a98:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a9c:	2330      	movs	r3, #48	; 0x30
 8008a9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c48 <_svfiprintf_r+0x1ec>
 8008aa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aa6:	f04f 0901 	mov.w	r9, #1
 8008aaa:	4623      	mov	r3, r4
 8008aac:	469a      	mov	sl, r3
 8008aae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ab2:	b10a      	cbz	r2, 8008ab8 <_svfiprintf_r+0x5c>
 8008ab4:	2a25      	cmp	r2, #37	; 0x25
 8008ab6:	d1f9      	bne.n	8008aac <_svfiprintf_r+0x50>
 8008ab8:	ebba 0b04 	subs.w	fp, sl, r4
 8008abc:	d00b      	beq.n	8008ad6 <_svfiprintf_r+0x7a>
 8008abe:	465b      	mov	r3, fp
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f7ff ff6d 	bl	80089a4 <__ssputs_r>
 8008aca:	3001      	adds	r0, #1
 8008acc:	f000 80aa 	beq.w	8008c24 <_svfiprintf_r+0x1c8>
 8008ad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ad2:	445a      	add	r2, fp
 8008ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 80a2 	beq.w	8008c24 <_svfiprintf_r+0x1c8>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aea:	f10a 0a01 	add.w	sl, sl, #1
 8008aee:	9304      	str	r3, [sp, #16]
 8008af0:	9307      	str	r3, [sp, #28]
 8008af2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008af6:	931a      	str	r3, [sp, #104]	; 0x68
 8008af8:	4654      	mov	r4, sl
 8008afa:	2205      	movs	r2, #5
 8008afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b00:	4851      	ldr	r0, [pc, #324]	; (8008c48 <_svfiprintf_r+0x1ec>)
 8008b02:	f7f7 fb6d 	bl	80001e0 <memchr>
 8008b06:	9a04      	ldr	r2, [sp, #16]
 8008b08:	b9d8      	cbnz	r0, 8008b42 <_svfiprintf_r+0xe6>
 8008b0a:	06d0      	lsls	r0, r2, #27
 8008b0c:	bf44      	itt	mi
 8008b0e:	2320      	movmi	r3, #32
 8008b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b14:	0711      	lsls	r1, r2, #28
 8008b16:	bf44      	itt	mi
 8008b18:	232b      	movmi	r3, #43	; 0x2b
 8008b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b22:	2b2a      	cmp	r3, #42	; 0x2a
 8008b24:	d015      	beq.n	8008b52 <_svfiprintf_r+0xf6>
 8008b26:	9a07      	ldr	r2, [sp, #28]
 8008b28:	4654      	mov	r4, sl
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	f04f 0c0a 	mov.w	ip, #10
 8008b30:	4621      	mov	r1, r4
 8008b32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b36:	3b30      	subs	r3, #48	; 0x30
 8008b38:	2b09      	cmp	r3, #9
 8008b3a:	d94e      	bls.n	8008bda <_svfiprintf_r+0x17e>
 8008b3c:	b1b0      	cbz	r0, 8008b6c <_svfiprintf_r+0x110>
 8008b3e:	9207      	str	r2, [sp, #28]
 8008b40:	e014      	b.n	8008b6c <_svfiprintf_r+0x110>
 8008b42:	eba0 0308 	sub.w	r3, r0, r8
 8008b46:	fa09 f303 	lsl.w	r3, r9, r3
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	46a2      	mov	sl, r4
 8008b50:	e7d2      	b.n	8008af8 <_svfiprintf_r+0x9c>
 8008b52:	9b03      	ldr	r3, [sp, #12]
 8008b54:	1d19      	adds	r1, r3, #4
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	9103      	str	r1, [sp, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	bfbb      	ittet	lt
 8008b5e:	425b      	neglt	r3, r3
 8008b60:	f042 0202 	orrlt.w	r2, r2, #2
 8008b64:	9307      	strge	r3, [sp, #28]
 8008b66:	9307      	strlt	r3, [sp, #28]
 8008b68:	bfb8      	it	lt
 8008b6a:	9204      	strlt	r2, [sp, #16]
 8008b6c:	7823      	ldrb	r3, [r4, #0]
 8008b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b70:	d10c      	bne.n	8008b8c <_svfiprintf_r+0x130>
 8008b72:	7863      	ldrb	r3, [r4, #1]
 8008b74:	2b2a      	cmp	r3, #42	; 0x2a
 8008b76:	d135      	bne.n	8008be4 <_svfiprintf_r+0x188>
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	1d1a      	adds	r2, r3, #4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	9203      	str	r2, [sp, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bfb8      	it	lt
 8008b84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b88:	3402      	adds	r4, #2
 8008b8a:	9305      	str	r3, [sp, #20]
 8008b8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c58 <_svfiprintf_r+0x1fc>
 8008b90:	7821      	ldrb	r1, [r4, #0]
 8008b92:	2203      	movs	r2, #3
 8008b94:	4650      	mov	r0, sl
 8008b96:	f7f7 fb23 	bl	80001e0 <memchr>
 8008b9a:	b140      	cbz	r0, 8008bae <_svfiprintf_r+0x152>
 8008b9c:	2340      	movs	r3, #64	; 0x40
 8008b9e:	eba0 000a 	sub.w	r0, r0, sl
 8008ba2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	4303      	orrs	r3, r0
 8008baa:	3401      	adds	r4, #1
 8008bac:	9304      	str	r3, [sp, #16]
 8008bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb2:	4826      	ldr	r0, [pc, #152]	; (8008c4c <_svfiprintf_r+0x1f0>)
 8008bb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bb8:	2206      	movs	r2, #6
 8008bba:	f7f7 fb11 	bl	80001e0 <memchr>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d038      	beq.n	8008c34 <_svfiprintf_r+0x1d8>
 8008bc2:	4b23      	ldr	r3, [pc, #140]	; (8008c50 <_svfiprintf_r+0x1f4>)
 8008bc4:	bb1b      	cbnz	r3, 8008c0e <_svfiprintf_r+0x1b2>
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	3307      	adds	r3, #7
 8008bca:	f023 0307 	bic.w	r3, r3, #7
 8008bce:	3308      	adds	r3, #8
 8008bd0:	9303      	str	r3, [sp, #12]
 8008bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd4:	4433      	add	r3, r6
 8008bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd8:	e767      	b.n	8008aaa <_svfiprintf_r+0x4e>
 8008bda:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bde:	460c      	mov	r4, r1
 8008be0:	2001      	movs	r0, #1
 8008be2:	e7a5      	b.n	8008b30 <_svfiprintf_r+0xd4>
 8008be4:	2300      	movs	r3, #0
 8008be6:	3401      	adds	r4, #1
 8008be8:	9305      	str	r3, [sp, #20]
 8008bea:	4619      	mov	r1, r3
 8008bec:	f04f 0c0a 	mov.w	ip, #10
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bf6:	3a30      	subs	r2, #48	; 0x30
 8008bf8:	2a09      	cmp	r2, #9
 8008bfa:	d903      	bls.n	8008c04 <_svfiprintf_r+0x1a8>
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0c5      	beq.n	8008b8c <_svfiprintf_r+0x130>
 8008c00:	9105      	str	r1, [sp, #20]
 8008c02:	e7c3      	b.n	8008b8c <_svfiprintf_r+0x130>
 8008c04:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c08:	4604      	mov	r4, r0
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e7f0      	b.n	8008bf0 <_svfiprintf_r+0x194>
 8008c0e:	ab03      	add	r3, sp, #12
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	462a      	mov	r2, r5
 8008c14:	4b0f      	ldr	r3, [pc, #60]	; (8008c54 <_svfiprintf_r+0x1f8>)
 8008c16:	a904      	add	r1, sp, #16
 8008c18:	4638      	mov	r0, r7
 8008c1a:	f7fc fa49 	bl	80050b0 <_printf_float>
 8008c1e:	1c42      	adds	r2, r0, #1
 8008c20:	4606      	mov	r6, r0
 8008c22:	d1d6      	bne.n	8008bd2 <_svfiprintf_r+0x176>
 8008c24:	89ab      	ldrh	r3, [r5, #12]
 8008c26:	065b      	lsls	r3, r3, #25
 8008c28:	f53f af2c 	bmi.w	8008a84 <_svfiprintf_r+0x28>
 8008c2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c2e:	b01d      	add	sp, #116	; 0x74
 8008c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c34:	ab03      	add	r3, sp, #12
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	462a      	mov	r2, r5
 8008c3a:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <_svfiprintf_r+0x1f8>)
 8008c3c:	a904      	add	r1, sp, #16
 8008c3e:	4638      	mov	r0, r7
 8008c40:	f7fc fcda 	bl	80055f8 <_printf_i>
 8008c44:	e7eb      	b.n	8008c1e <_svfiprintf_r+0x1c2>
 8008c46:	bf00      	nop
 8008c48:	08009cd4 	.word	0x08009cd4
 8008c4c:	08009cde 	.word	0x08009cde
 8008c50:	080050b1 	.word	0x080050b1
 8008c54:	080089a5 	.word	0x080089a5
 8008c58:	08009cda 	.word	0x08009cda
 8008c5c:	00000000 	.word	0x00000000

08008c60 <nan>:
 8008c60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008c68 <nan+0x8>
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	00000000 	.word	0x00000000
 8008c6c:	7ff80000 	.word	0x7ff80000

08008c70 <_sbrk_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4d06      	ldr	r5, [pc, #24]	; (8008c8c <_sbrk_r+0x1c>)
 8008c74:	2300      	movs	r3, #0
 8008c76:	4604      	mov	r4, r0
 8008c78:	4608      	mov	r0, r1
 8008c7a:	602b      	str	r3, [r5, #0]
 8008c7c:	f7f8 fa54 	bl	8001128 <_sbrk>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d102      	bne.n	8008c8a <_sbrk_r+0x1a>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	b103      	cbz	r3, 8008c8a <_sbrk_r+0x1a>
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	20000340 	.word	0x20000340

08008c90 <strncmp>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	b17a      	cbz	r2, 8008cb4 <strncmp+0x24>
 8008c94:	4603      	mov	r3, r0
 8008c96:	3901      	subs	r1, #1
 8008c98:	1884      	adds	r4, r0, r2
 8008c9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008ca2:	4290      	cmp	r0, r2
 8008ca4:	d101      	bne.n	8008caa <strncmp+0x1a>
 8008ca6:	42a3      	cmp	r3, r4
 8008ca8:	d101      	bne.n	8008cae <strncmp+0x1e>
 8008caa:	1a80      	subs	r0, r0, r2
 8008cac:	bd10      	pop	{r4, pc}
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d1f3      	bne.n	8008c9a <strncmp+0xa>
 8008cb2:	e7fa      	b.n	8008caa <strncmp+0x1a>
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	e7f9      	b.n	8008cac <strncmp+0x1c>

08008cb8 <__ascii_wctomb>:
 8008cb8:	b149      	cbz	r1, 8008cce <__ascii_wctomb+0x16>
 8008cba:	2aff      	cmp	r2, #255	; 0xff
 8008cbc:	bf85      	ittet	hi
 8008cbe:	238a      	movhi	r3, #138	; 0x8a
 8008cc0:	6003      	strhi	r3, [r0, #0]
 8008cc2:	700a      	strbls	r2, [r1, #0]
 8008cc4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008cc8:	bf98      	it	ls
 8008cca:	2001      	movls	r0, #1
 8008ccc:	4770      	bx	lr
 8008cce:	4608      	mov	r0, r1
 8008cd0:	4770      	bx	lr
	...

08008cd4 <__assert_func>:
 8008cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cd6:	4614      	mov	r4, r2
 8008cd8:	461a      	mov	r2, r3
 8008cda:	4b09      	ldr	r3, [pc, #36]	; (8008d00 <__assert_func+0x2c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4605      	mov	r5, r0
 8008ce0:	68d8      	ldr	r0, [r3, #12]
 8008ce2:	b14c      	cbz	r4, 8008cf8 <__assert_func+0x24>
 8008ce4:	4b07      	ldr	r3, [pc, #28]	; (8008d04 <__assert_func+0x30>)
 8008ce6:	9100      	str	r1, [sp, #0]
 8008ce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cec:	4906      	ldr	r1, [pc, #24]	; (8008d08 <__assert_func+0x34>)
 8008cee:	462b      	mov	r3, r5
 8008cf0:	f000 f80e 	bl	8008d10 <fiprintf>
 8008cf4:	f000 fa8c 	bl	8009210 <abort>
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <__assert_func+0x38>)
 8008cfa:	461c      	mov	r4, r3
 8008cfc:	e7f3      	b.n	8008ce6 <__assert_func+0x12>
 8008cfe:	bf00      	nop
 8008d00:	20000024 	.word	0x20000024
 8008d04:	08009ce5 	.word	0x08009ce5
 8008d08:	08009cf2 	.word	0x08009cf2
 8008d0c:	08009d20 	.word	0x08009d20

08008d10 <fiprintf>:
 8008d10:	b40e      	push	{r1, r2, r3}
 8008d12:	b503      	push	{r0, r1, lr}
 8008d14:	4601      	mov	r1, r0
 8008d16:	ab03      	add	r3, sp, #12
 8008d18:	4805      	ldr	r0, [pc, #20]	; (8008d30 <fiprintf+0x20>)
 8008d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d1e:	6800      	ldr	r0, [r0, #0]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	f000 f885 	bl	8008e30 <_vfiprintf_r>
 8008d26:	b002      	add	sp, #8
 8008d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d2c:	b003      	add	sp, #12
 8008d2e:	4770      	bx	lr
 8008d30:	20000024 	.word	0x20000024

08008d34 <memmove>:
 8008d34:	4288      	cmp	r0, r1
 8008d36:	b510      	push	{r4, lr}
 8008d38:	eb01 0402 	add.w	r4, r1, r2
 8008d3c:	d902      	bls.n	8008d44 <memmove+0x10>
 8008d3e:	4284      	cmp	r4, r0
 8008d40:	4623      	mov	r3, r4
 8008d42:	d807      	bhi.n	8008d54 <memmove+0x20>
 8008d44:	1e43      	subs	r3, r0, #1
 8008d46:	42a1      	cmp	r1, r4
 8008d48:	d008      	beq.n	8008d5c <memmove+0x28>
 8008d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d52:	e7f8      	b.n	8008d46 <memmove+0x12>
 8008d54:	4402      	add	r2, r0
 8008d56:	4601      	mov	r1, r0
 8008d58:	428a      	cmp	r2, r1
 8008d5a:	d100      	bne.n	8008d5e <memmove+0x2a>
 8008d5c:	bd10      	pop	{r4, pc}
 8008d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d66:	e7f7      	b.n	8008d58 <memmove+0x24>

08008d68 <__malloc_lock>:
 8008d68:	4801      	ldr	r0, [pc, #4]	; (8008d70 <__malloc_lock+0x8>)
 8008d6a:	f000 bc11 	b.w	8009590 <__retarget_lock_acquire_recursive>
 8008d6e:	bf00      	nop
 8008d70:	20000344 	.word	0x20000344

08008d74 <__malloc_unlock>:
 8008d74:	4801      	ldr	r0, [pc, #4]	; (8008d7c <__malloc_unlock+0x8>)
 8008d76:	f000 bc0c 	b.w	8009592 <__retarget_lock_release_recursive>
 8008d7a:	bf00      	nop
 8008d7c:	20000344 	.word	0x20000344

08008d80 <_realloc_r>:
 8008d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d84:	4680      	mov	r8, r0
 8008d86:	4614      	mov	r4, r2
 8008d88:	460e      	mov	r6, r1
 8008d8a:	b921      	cbnz	r1, 8008d96 <_realloc_r+0x16>
 8008d8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d90:	4611      	mov	r1, r2
 8008d92:	f7ff bd93 	b.w	80088bc <_malloc_r>
 8008d96:	b92a      	cbnz	r2, 8008da4 <_realloc_r+0x24>
 8008d98:	f7ff fd24 	bl	80087e4 <_free_r>
 8008d9c:	4625      	mov	r5, r4
 8008d9e:	4628      	mov	r0, r5
 8008da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da4:	f000 fc5c 	bl	8009660 <_malloc_usable_size_r>
 8008da8:	4284      	cmp	r4, r0
 8008daa:	4607      	mov	r7, r0
 8008dac:	d802      	bhi.n	8008db4 <_realloc_r+0x34>
 8008dae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008db2:	d812      	bhi.n	8008dda <_realloc_r+0x5a>
 8008db4:	4621      	mov	r1, r4
 8008db6:	4640      	mov	r0, r8
 8008db8:	f7ff fd80 	bl	80088bc <_malloc_r>
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d0ed      	beq.n	8008d9e <_realloc_r+0x1e>
 8008dc2:	42bc      	cmp	r4, r7
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	bf28      	it	cs
 8008dca:	463a      	movcs	r2, r7
 8008dcc:	f7ff f824 	bl	8007e18 <memcpy>
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	f7ff fd06 	bl	80087e4 <_free_r>
 8008dd8:	e7e1      	b.n	8008d9e <_realloc_r+0x1e>
 8008dda:	4635      	mov	r5, r6
 8008ddc:	e7df      	b.n	8008d9e <_realloc_r+0x1e>

08008dde <__sfputc_r>:
 8008dde:	6893      	ldr	r3, [r2, #8]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	b410      	push	{r4}
 8008de6:	6093      	str	r3, [r2, #8]
 8008de8:	da08      	bge.n	8008dfc <__sfputc_r+0x1e>
 8008dea:	6994      	ldr	r4, [r2, #24]
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	db01      	blt.n	8008df4 <__sfputc_r+0x16>
 8008df0:	290a      	cmp	r1, #10
 8008df2:	d103      	bne.n	8008dfc <__sfputc_r+0x1e>
 8008df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008df8:	f000 b94a 	b.w	8009090 <__swbuf_r>
 8008dfc:	6813      	ldr	r3, [r2, #0]
 8008dfe:	1c58      	adds	r0, r3, #1
 8008e00:	6010      	str	r0, [r2, #0]
 8008e02:	7019      	strb	r1, [r3, #0]
 8008e04:	4608      	mov	r0, r1
 8008e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <__sfputs_r>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	4606      	mov	r6, r0
 8008e10:	460f      	mov	r7, r1
 8008e12:	4614      	mov	r4, r2
 8008e14:	18d5      	adds	r5, r2, r3
 8008e16:	42ac      	cmp	r4, r5
 8008e18:	d101      	bne.n	8008e1e <__sfputs_r+0x12>
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	e007      	b.n	8008e2e <__sfputs_r+0x22>
 8008e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e22:	463a      	mov	r2, r7
 8008e24:	4630      	mov	r0, r6
 8008e26:	f7ff ffda 	bl	8008dde <__sfputc_r>
 8008e2a:	1c43      	adds	r3, r0, #1
 8008e2c:	d1f3      	bne.n	8008e16 <__sfputs_r+0xa>
 8008e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e30 <_vfiprintf_r>:
 8008e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e34:	460d      	mov	r5, r1
 8008e36:	b09d      	sub	sp, #116	; 0x74
 8008e38:	4614      	mov	r4, r2
 8008e3a:	4698      	mov	r8, r3
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	b118      	cbz	r0, 8008e48 <_vfiprintf_r+0x18>
 8008e40:	6983      	ldr	r3, [r0, #24]
 8008e42:	b90b      	cbnz	r3, 8008e48 <_vfiprintf_r+0x18>
 8008e44:	f000 fb06 	bl	8009454 <__sinit>
 8008e48:	4b89      	ldr	r3, [pc, #548]	; (8009070 <_vfiprintf_r+0x240>)
 8008e4a:	429d      	cmp	r5, r3
 8008e4c:	d11b      	bne.n	8008e86 <_vfiprintf_r+0x56>
 8008e4e:	6875      	ldr	r5, [r6, #4]
 8008e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e52:	07d9      	lsls	r1, r3, #31
 8008e54:	d405      	bmi.n	8008e62 <_vfiprintf_r+0x32>
 8008e56:	89ab      	ldrh	r3, [r5, #12]
 8008e58:	059a      	lsls	r2, r3, #22
 8008e5a:	d402      	bmi.n	8008e62 <_vfiprintf_r+0x32>
 8008e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e5e:	f000 fb97 	bl	8009590 <__retarget_lock_acquire_recursive>
 8008e62:	89ab      	ldrh	r3, [r5, #12]
 8008e64:	071b      	lsls	r3, r3, #28
 8008e66:	d501      	bpl.n	8008e6c <_vfiprintf_r+0x3c>
 8008e68:	692b      	ldr	r3, [r5, #16]
 8008e6a:	b9eb      	cbnz	r3, 8008ea8 <_vfiprintf_r+0x78>
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f000 f960 	bl	8009134 <__swsetup_r>
 8008e74:	b1c0      	cbz	r0, 8008ea8 <_vfiprintf_r+0x78>
 8008e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e78:	07dc      	lsls	r4, r3, #31
 8008e7a:	d50e      	bpl.n	8008e9a <_vfiprintf_r+0x6a>
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e80:	b01d      	add	sp, #116	; 0x74
 8008e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e86:	4b7b      	ldr	r3, [pc, #492]	; (8009074 <_vfiprintf_r+0x244>)
 8008e88:	429d      	cmp	r5, r3
 8008e8a:	d101      	bne.n	8008e90 <_vfiprintf_r+0x60>
 8008e8c:	68b5      	ldr	r5, [r6, #8]
 8008e8e:	e7df      	b.n	8008e50 <_vfiprintf_r+0x20>
 8008e90:	4b79      	ldr	r3, [pc, #484]	; (8009078 <_vfiprintf_r+0x248>)
 8008e92:	429d      	cmp	r5, r3
 8008e94:	bf08      	it	eq
 8008e96:	68f5      	ldreq	r5, [r6, #12]
 8008e98:	e7da      	b.n	8008e50 <_vfiprintf_r+0x20>
 8008e9a:	89ab      	ldrh	r3, [r5, #12]
 8008e9c:	0598      	lsls	r0, r3, #22
 8008e9e:	d4ed      	bmi.n	8008e7c <_vfiprintf_r+0x4c>
 8008ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ea2:	f000 fb76 	bl	8009592 <__retarget_lock_release_recursive>
 8008ea6:	e7e9      	b.n	8008e7c <_vfiprintf_r+0x4c>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8008eac:	2320      	movs	r3, #32
 8008eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb6:	2330      	movs	r3, #48	; 0x30
 8008eb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800907c <_vfiprintf_r+0x24c>
 8008ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ec0:	f04f 0901 	mov.w	r9, #1
 8008ec4:	4623      	mov	r3, r4
 8008ec6:	469a      	mov	sl, r3
 8008ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ecc:	b10a      	cbz	r2, 8008ed2 <_vfiprintf_r+0xa2>
 8008ece:	2a25      	cmp	r2, #37	; 0x25
 8008ed0:	d1f9      	bne.n	8008ec6 <_vfiprintf_r+0x96>
 8008ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed6:	d00b      	beq.n	8008ef0 <_vfiprintf_r+0xc0>
 8008ed8:	465b      	mov	r3, fp
 8008eda:	4622      	mov	r2, r4
 8008edc:	4629      	mov	r1, r5
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f7ff ff94 	bl	8008e0c <__sfputs_r>
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	f000 80aa 	beq.w	800903e <_vfiprintf_r+0x20e>
 8008eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eec:	445a      	add	r2, fp
 8008eee:	9209      	str	r2, [sp, #36]	; 0x24
 8008ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 80a2 	beq.w	800903e <_vfiprintf_r+0x20e>
 8008efa:	2300      	movs	r3, #0
 8008efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f04:	f10a 0a01 	add.w	sl, sl, #1
 8008f08:	9304      	str	r3, [sp, #16]
 8008f0a:	9307      	str	r3, [sp, #28]
 8008f0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f10:	931a      	str	r3, [sp, #104]	; 0x68
 8008f12:	4654      	mov	r4, sl
 8008f14:	2205      	movs	r2, #5
 8008f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f1a:	4858      	ldr	r0, [pc, #352]	; (800907c <_vfiprintf_r+0x24c>)
 8008f1c:	f7f7 f960 	bl	80001e0 <memchr>
 8008f20:	9a04      	ldr	r2, [sp, #16]
 8008f22:	b9d8      	cbnz	r0, 8008f5c <_vfiprintf_r+0x12c>
 8008f24:	06d1      	lsls	r1, r2, #27
 8008f26:	bf44      	itt	mi
 8008f28:	2320      	movmi	r3, #32
 8008f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f2e:	0713      	lsls	r3, r2, #28
 8008f30:	bf44      	itt	mi
 8008f32:	232b      	movmi	r3, #43	; 0x2b
 8008f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f38:	f89a 3000 	ldrb.w	r3, [sl]
 8008f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f3e:	d015      	beq.n	8008f6c <_vfiprintf_r+0x13c>
 8008f40:	9a07      	ldr	r2, [sp, #28]
 8008f42:	4654      	mov	r4, sl
 8008f44:	2000      	movs	r0, #0
 8008f46:	f04f 0c0a 	mov.w	ip, #10
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f50:	3b30      	subs	r3, #48	; 0x30
 8008f52:	2b09      	cmp	r3, #9
 8008f54:	d94e      	bls.n	8008ff4 <_vfiprintf_r+0x1c4>
 8008f56:	b1b0      	cbz	r0, 8008f86 <_vfiprintf_r+0x156>
 8008f58:	9207      	str	r2, [sp, #28]
 8008f5a:	e014      	b.n	8008f86 <_vfiprintf_r+0x156>
 8008f5c:	eba0 0308 	sub.w	r3, r0, r8
 8008f60:	fa09 f303 	lsl.w	r3, r9, r3
 8008f64:	4313      	orrs	r3, r2
 8008f66:	9304      	str	r3, [sp, #16]
 8008f68:	46a2      	mov	sl, r4
 8008f6a:	e7d2      	b.n	8008f12 <_vfiprintf_r+0xe2>
 8008f6c:	9b03      	ldr	r3, [sp, #12]
 8008f6e:	1d19      	adds	r1, r3, #4
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	9103      	str	r1, [sp, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bfbb      	ittet	lt
 8008f78:	425b      	neglt	r3, r3
 8008f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f7e:	9307      	strge	r3, [sp, #28]
 8008f80:	9307      	strlt	r3, [sp, #28]
 8008f82:	bfb8      	it	lt
 8008f84:	9204      	strlt	r2, [sp, #16]
 8008f86:	7823      	ldrb	r3, [r4, #0]
 8008f88:	2b2e      	cmp	r3, #46	; 0x2e
 8008f8a:	d10c      	bne.n	8008fa6 <_vfiprintf_r+0x176>
 8008f8c:	7863      	ldrb	r3, [r4, #1]
 8008f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f90:	d135      	bne.n	8008ffe <_vfiprintf_r+0x1ce>
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	1d1a      	adds	r2, r3, #4
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	9203      	str	r2, [sp, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	bfb8      	it	lt
 8008f9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008fa2:	3402      	adds	r4, #2
 8008fa4:	9305      	str	r3, [sp, #20]
 8008fa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800908c <_vfiprintf_r+0x25c>
 8008faa:	7821      	ldrb	r1, [r4, #0]
 8008fac:	2203      	movs	r2, #3
 8008fae:	4650      	mov	r0, sl
 8008fb0:	f7f7 f916 	bl	80001e0 <memchr>
 8008fb4:	b140      	cbz	r0, 8008fc8 <_vfiprintf_r+0x198>
 8008fb6:	2340      	movs	r3, #64	; 0x40
 8008fb8:	eba0 000a 	sub.w	r0, r0, sl
 8008fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8008fc0:	9b04      	ldr	r3, [sp, #16]
 8008fc2:	4303      	orrs	r3, r0
 8008fc4:	3401      	adds	r4, #1
 8008fc6:	9304      	str	r3, [sp, #16]
 8008fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fcc:	482c      	ldr	r0, [pc, #176]	; (8009080 <_vfiprintf_r+0x250>)
 8008fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fd2:	2206      	movs	r2, #6
 8008fd4:	f7f7 f904 	bl	80001e0 <memchr>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d03f      	beq.n	800905c <_vfiprintf_r+0x22c>
 8008fdc:	4b29      	ldr	r3, [pc, #164]	; (8009084 <_vfiprintf_r+0x254>)
 8008fde:	bb1b      	cbnz	r3, 8009028 <_vfiprintf_r+0x1f8>
 8008fe0:	9b03      	ldr	r3, [sp, #12]
 8008fe2:	3307      	adds	r3, #7
 8008fe4:	f023 0307 	bic.w	r3, r3, #7
 8008fe8:	3308      	adds	r3, #8
 8008fea:	9303      	str	r3, [sp, #12]
 8008fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fee:	443b      	add	r3, r7
 8008ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff2:	e767      	b.n	8008ec4 <_vfiprintf_r+0x94>
 8008ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	e7a5      	b.n	8008f4a <_vfiprintf_r+0x11a>
 8008ffe:	2300      	movs	r3, #0
 8009000:	3401      	adds	r4, #1
 8009002:	9305      	str	r3, [sp, #20]
 8009004:	4619      	mov	r1, r3
 8009006:	f04f 0c0a 	mov.w	ip, #10
 800900a:	4620      	mov	r0, r4
 800900c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009010:	3a30      	subs	r2, #48	; 0x30
 8009012:	2a09      	cmp	r2, #9
 8009014:	d903      	bls.n	800901e <_vfiprintf_r+0x1ee>
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0c5      	beq.n	8008fa6 <_vfiprintf_r+0x176>
 800901a:	9105      	str	r1, [sp, #20]
 800901c:	e7c3      	b.n	8008fa6 <_vfiprintf_r+0x176>
 800901e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009022:	4604      	mov	r4, r0
 8009024:	2301      	movs	r3, #1
 8009026:	e7f0      	b.n	800900a <_vfiprintf_r+0x1da>
 8009028:	ab03      	add	r3, sp, #12
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	462a      	mov	r2, r5
 800902e:	4b16      	ldr	r3, [pc, #88]	; (8009088 <_vfiprintf_r+0x258>)
 8009030:	a904      	add	r1, sp, #16
 8009032:	4630      	mov	r0, r6
 8009034:	f7fc f83c 	bl	80050b0 <_printf_float>
 8009038:	4607      	mov	r7, r0
 800903a:	1c78      	adds	r0, r7, #1
 800903c:	d1d6      	bne.n	8008fec <_vfiprintf_r+0x1bc>
 800903e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009040:	07d9      	lsls	r1, r3, #31
 8009042:	d405      	bmi.n	8009050 <_vfiprintf_r+0x220>
 8009044:	89ab      	ldrh	r3, [r5, #12]
 8009046:	059a      	lsls	r2, r3, #22
 8009048:	d402      	bmi.n	8009050 <_vfiprintf_r+0x220>
 800904a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800904c:	f000 faa1 	bl	8009592 <__retarget_lock_release_recursive>
 8009050:	89ab      	ldrh	r3, [r5, #12]
 8009052:	065b      	lsls	r3, r3, #25
 8009054:	f53f af12 	bmi.w	8008e7c <_vfiprintf_r+0x4c>
 8009058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800905a:	e711      	b.n	8008e80 <_vfiprintf_r+0x50>
 800905c:	ab03      	add	r3, sp, #12
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	462a      	mov	r2, r5
 8009062:	4b09      	ldr	r3, [pc, #36]	; (8009088 <_vfiprintf_r+0x258>)
 8009064:	a904      	add	r1, sp, #16
 8009066:	4630      	mov	r0, r6
 8009068:	f7fc fac6 	bl	80055f8 <_printf_i>
 800906c:	e7e4      	b.n	8009038 <_vfiprintf_r+0x208>
 800906e:	bf00      	nop
 8009070:	08009d44 	.word	0x08009d44
 8009074:	08009d64 	.word	0x08009d64
 8009078:	08009d24 	.word	0x08009d24
 800907c:	08009cd4 	.word	0x08009cd4
 8009080:	08009cde 	.word	0x08009cde
 8009084:	080050b1 	.word	0x080050b1
 8009088:	08008e0d 	.word	0x08008e0d
 800908c:	08009cda 	.word	0x08009cda

08009090 <__swbuf_r>:
 8009090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009092:	460e      	mov	r6, r1
 8009094:	4614      	mov	r4, r2
 8009096:	4605      	mov	r5, r0
 8009098:	b118      	cbz	r0, 80090a2 <__swbuf_r+0x12>
 800909a:	6983      	ldr	r3, [r0, #24]
 800909c:	b90b      	cbnz	r3, 80090a2 <__swbuf_r+0x12>
 800909e:	f000 f9d9 	bl	8009454 <__sinit>
 80090a2:	4b21      	ldr	r3, [pc, #132]	; (8009128 <__swbuf_r+0x98>)
 80090a4:	429c      	cmp	r4, r3
 80090a6:	d12b      	bne.n	8009100 <__swbuf_r+0x70>
 80090a8:	686c      	ldr	r4, [r5, #4]
 80090aa:	69a3      	ldr	r3, [r4, #24]
 80090ac:	60a3      	str	r3, [r4, #8]
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	071a      	lsls	r2, r3, #28
 80090b2:	d52f      	bpl.n	8009114 <__swbuf_r+0x84>
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	b36b      	cbz	r3, 8009114 <__swbuf_r+0x84>
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	6820      	ldr	r0, [r4, #0]
 80090bc:	1ac0      	subs	r0, r0, r3
 80090be:	6963      	ldr	r3, [r4, #20]
 80090c0:	b2f6      	uxtb	r6, r6
 80090c2:	4283      	cmp	r3, r0
 80090c4:	4637      	mov	r7, r6
 80090c6:	dc04      	bgt.n	80090d2 <__swbuf_r+0x42>
 80090c8:	4621      	mov	r1, r4
 80090ca:	4628      	mov	r0, r5
 80090cc:	f000 f92e 	bl	800932c <_fflush_r>
 80090d0:	bb30      	cbnz	r0, 8009120 <__swbuf_r+0x90>
 80090d2:	68a3      	ldr	r3, [r4, #8]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	60a3      	str	r3, [r4, #8]
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	6022      	str	r2, [r4, #0]
 80090de:	701e      	strb	r6, [r3, #0]
 80090e0:	6963      	ldr	r3, [r4, #20]
 80090e2:	3001      	adds	r0, #1
 80090e4:	4283      	cmp	r3, r0
 80090e6:	d004      	beq.n	80090f2 <__swbuf_r+0x62>
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	07db      	lsls	r3, r3, #31
 80090ec:	d506      	bpl.n	80090fc <__swbuf_r+0x6c>
 80090ee:	2e0a      	cmp	r6, #10
 80090f0:	d104      	bne.n	80090fc <__swbuf_r+0x6c>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f000 f919 	bl	800932c <_fflush_r>
 80090fa:	b988      	cbnz	r0, 8009120 <__swbuf_r+0x90>
 80090fc:	4638      	mov	r0, r7
 80090fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009100:	4b0a      	ldr	r3, [pc, #40]	; (800912c <__swbuf_r+0x9c>)
 8009102:	429c      	cmp	r4, r3
 8009104:	d101      	bne.n	800910a <__swbuf_r+0x7a>
 8009106:	68ac      	ldr	r4, [r5, #8]
 8009108:	e7cf      	b.n	80090aa <__swbuf_r+0x1a>
 800910a:	4b09      	ldr	r3, [pc, #36]	; (8009130 <__swbuf_r+0xa0>)
 800910c:	429c      	cmp	r4, r3
 800910e:	bf08      	it	eq
 8009110:	68ec      	ldreq	r4, [r5, #12]
 8009112:	e7ca      	b.n	80090aa <__swbuf_r+0x1a>
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f000 f80c 	bl	8009134 <__swsetup_r>
 800911c:	2800      	cmp	r0, #0
 800911e:	d0cb      	beq.n	80090b8 <__swbuf_r+0x28>
 8009120:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009124:	e7ea      	b.n	80090fc <__swbuf_r+0x6c>
 8009126:	bf00      	nop
 8009128:	08009d44 	.word	0x08009d44
 800912c:	08009d64 	.word	0x08009d64
 8009130:	08009d24 	.word	0x08009d24

08009134 <__swsetup_r>:
 8009134:	4b32      	ldr	r3, [pc, #200]	; (8009200 <__swsetup_r+0xcc>)
 8009136:	b570      	push	{r4, r5, r6, lr}
 8009138:	681d      	ldr	r5, [r3, #0]
 800913a:	4606      	mov	r6, r0
 800913c:	460c      	mov	r4, r1
 800913e:	b125      	cbz	r5, 800914a <__swsetup_r+0x16>
 8009140:	69ab      	ldr	r3, [r5, #24]
 8009142:	b913      	cbnz	r3, 800914a <__swsetup_r+0x16>
 8009144:	4628      	mov	r0, r5
 8009146:	f000 f985 	bl	8009454 <__sinit>
 800914a:	4b2e      	ldr	r3, [pc, #184]	; (8009204 <__swsetup_r+0xd0>)
 800914c:	429c      	cmp	r4, r3
 800914e:	d10f      	bne.n	8009170 <__swsetup_r+0x3c>
 8009150:	686c      	ldr	r4, [r5, #4]
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009158:	0719      	lsls	r1, r3, #28
 800915a:	d42c      	bmi.n	80091b6 <__swsetup_r+0x82>
 800915c:	06dd      	lsls	r5, r3, #27
 800915e:	d411      	bmi.n	8009184 <__swsetup_r+0x50>
 8009160:	2309      	movs	r3, #9
 8009162:	6033      	str	r3, [r6, #0]
 8009164:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009168:	81a3      	strh	r3, [r4, #12]
 800916a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800916e:	e03e      	b.n	80091ee <__swsetup_r+0xba>
 8009170:	4b25      	ldr	r3, [pc, #148]	; (8009208 <__swsetup_r+0xd4>)
 8009172:	429c      	cmp	r4, r3
 8009174:	d101      	bne.n	800917a <__swsetup_r+0x46>
 8009176:	68ac      	ldr	r4, [r5, #8]
 8009178:	e7eb      	b.n	8009152 <__swsetup_r+0x1e>
 800917a:	4b24      	ldr	r3, [pc, #144]	; (800920c <__swsetup_r+0xd8>)
 800917c:	429c      	cmp	r4, r3
 800917e:	bf08      	it	eq
 8009180:	68ec      	ldreq	r4, [r5, #12]
 8009182:	e7e6      	b.n	8009152 <__swsetup_r+0x1e>
 8009184:	0758      	lsls	r0, r3, #29
 8009186:	d512      	bpl.n	80091ae <__swsetup_r+0x7a>
 8009188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800918a:	b141      	cbz	r1, 800919e <__swsetup_r+0x6a>
 800918c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009190:	4299      	cmp	r1, r3
 8009192:	d002      	beq.n	800919a <__swsetup_r+0x66>
 8009194:	4630      	mov	r0, r6
 8009196:	f7ff fb25 	bl	80087e4 <_free_r>
 800919a:	2300      	movs	r3, #0
 800919c:	6363      	str	r3, [r4, #52]	; 0x34
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091a4:	81a3      	strh	r3, [r4, #12]
 80091a6:	2300      	movs	r3, #0
 80091a8:	6063      	str	r3, [r4, #4]
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f043 0308 	orr.w	r3, r3, #8
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	6923      	ldr	r3, [r4, #16]
 80091b8:	b94b      	cbnz	r3, 80091ce <__swsetup_r+0x9a>
 80091ba:	89a3      	ldrh	r3, [r4, #12]
 80091bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091c4:	d003      	beq.n	80091ce <__swsetup_r+0x9a>
 80091c6:	4621      	mov	r1, r4
 80091c8:	4630      	mov	r0, r6
 80091ca:	f000 fa09 	bl	80095e0 <__smakebuf_r>
 80091ce:	89a0      	ldrh	r0, [r4, #12]
 80091d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091d4:	f010 0301 	ands.w	r3, r0, #1
 80091d8:	d00a      	beq.n	80091f0 <__swsetup_r+0xbc>
 80091da:	2300      	movs	r3, #0
 80091dc:	60a3      	str	r3, [r4, #8]
 80091de:	6963      	ldr	r3, [r4, #20]
 80091e0:	425b      	negs	r3, r3
 80091e2:	61a3      	str	r3, [r4, #24]
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	b943      	cbnz	r3, 80091fa <__swsetup_r+0xc6>
 80091e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091ec:	d1ba      	bne.n	8009164 <__swsetup_r+0x30>
 80091ee:	bd70      	pop	{r4, r5, r6, pc}
 80091f0:	0781      	lsls	r1, r0, #30
 80091f2:	bf58      	it	pl
 80091f4:	6963      	ldrpl	r3, [r4, #20]
 80091f6:	60a3      	str	r3, [r4, #8]
 80091f8:	e7f4      	b.n	80091e4 <__swsetup_r+0xb0>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e7f7      	b.n	80091ee <__swsetup_r+0xba>
 80091fe:	bf00      	nop
 8009200:	20000024 	.word	0x20000024
 8009204:	08009d44 	.word	0x08009d44
 8009208:	08009d64 	.word	0x08009d64
 800920c:	08009d24 	.word	0x08009d24

08009210 <abort>:
 8009210:	b508      	push	{r3, lr}
 8009212:	2006      	movs	r0, #6
 8009214:	f000 fa54 	bl	80096c0 <raise>
 8009218:	2001      	movs	r0, #1
 800921a:	f7f7 ff29 	bl	8001070 <_exit>
	...

08009220 <__sflush_r>:
 8009220:	898a      	ldrh	r2, [r1, #12]
 8009222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009226:	4605      	mov	r5, r0
 8009228:	0710      	lsls	r0, r2, #28
 800922a:	460c      	mov	r4, r1
 800922c:	d458      	bmi.n	80092e0 <__sflush_r+0xc0>
 800922e:	684b      	ldr	r3, [r1, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	dc05      	bgt.n	8009240 <__sflush_r+0x20>
 8009234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	dc02      	bgt.n	8009240 <__sflush_r+0x20>
 800923a:	2000      	movs	r0, #0
 800923c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009242:	2e00      	cmp	r6, #0
 8009244:	d0f9      	beq.n	800923a <__sflush_r+0x1a>
 8009246:	2300      	movs	r3, #0
 8009248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800924c:	682f      	ldr	r7, [r5, #0]
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	d032      	beq.n	80092b8 <__sflush_r+0x98>
 8009252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	075a      	lsls	r2, r3, #29
 8009258:	d505      	bpl.n	8009266 <__sflush_r+0x46>
 800925a:	6863      	ldr	r3, [r4, #4]
 800925c:	1ac0      	subs	r0, r0, r3
 800925e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009260:	b10b      	cbz	r3, 8009266 <__sflush_r+0x46>
 8009262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009264:	1ac0      	subs	r0, r0, r3
 8009266:	2300      	movs	r3, #0
 8009268:	4602      	mov	r2, r0
 800926a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800926c:	6a21      	ldr	r1, [r4, #32]
 800926e:	4628      	mov	r0, r5
 8009270:	47b0      	blx	r6
 8009272:	1c43      	adds	r3, r0, #1
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	d106      	bne.n	8009286 <__sflush_r+0x66>
 8009278:	6829      	ldr	r1, [r5, #0]
 800927a:	291d      	cmp	r1, #29
 800927c:	d82c      	bhi.n	80092d8 <__sflush_r+0xb8>
 800927e:	4a2a      	ldr	r2, [pc, #168]	; (8009328 <__sflush_r+0x108>)
 8009280:	40ca      	lsrs	r2, r1
 8009282:	07d6      	lsls	r6, r2, #31
 8009284:	d528      	bpl.n	80092d8 <__sflush_r+0xb8>
 8009286:	2200      	movs	r2, #0
 8009288:	6062      	str	r2, [r4, #4]
 800928a:	04d9      	lsls	r1, r3, #19
 800928c:	6922      	ldr	r2, [r4, #16]
 800928e:	6022      	str	r2, [r4, #0]
 8009290:	d504      	bpl.n	800929c <__sflush_r+0x7c>
 8009292:	1c42      	adds	r2, r0, #1
 8009294:	d101      	bne.n	800929a <__sflush_r+0x7a>
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	b903      	cbnz	r3, 800929c <__sflush_r+0x7c>
 800929a:	6560      	str	r0, [r4, #84]	; 0x54
 800929c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800929e:	602f      	str	r7, [r5, #0]
 80092a0:	2900      	cmp	r1, #0
 80092a2:	d0ca      	beq.n	800923a <__sflush_r+0x1a>
 80092a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092a8:	4299      	cmp	r1, r3
 80092aa:	d002      	beq.n	80092b2 <__sflush_r+0x92>
 80092ac:	4628      	mov	r0, r5
 80092ae:	f7ff fa99 	bl	80087e4 <_free_r>
 80092b2:	2000      	movs	r0, #0
 80092b4:	6360      	str	r0, [r4, #52]	; 0x34
 80092b6:	e7c1      	b.n	800923c <__sflush_r+0x1c>
 80092b8:	6a21      	ldr	r1, [r4, #32]
 80092ba:	2301      	movs	r3, #1
 80092bc:	4628      	mov	r0, r5
 80092be:	47b0      	blx	r6
 80092c0:	1c41      	adds	r1, r0, #1
 80092c2:	d1c7      	bne.n	8009254 <__sflush_r+0x34>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d0c4      	beq.n	8009254 <__sflush_r+0x34>
 80092ca:	2b1d      	cmp	r3, #29
 80092cc:	d001      	beq.n	80092d2 <__sflush_r+0xb2>
 80092ce:	2b16      	cmp	r3, #22
 80092d0:	d101      	bne.n	80092d6 <__sflush_r+0xb6>
 80092d2:	602f      	str	r7, [r5, #0]
 80092d4:	e7b1      	b.n	800923a <__sflush_r+0x1a>
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	e7ad      	b.n	800923c <__sflush_r+0x1c>
 80092e0:	690f      	ldr	r7, [r1, #16]
 80092e2:	2f00      	cmp	r7, #0
 80092e4:	d0a9      	beq.n	800923a <__sflush_r+0x1a>
 80092e6:	0793      	lsls	r3, r2, #30
 80092e8:	680e      	ldr	r6, [r1, #0]
 80092ea:	bf08      	it	eq
 80092ec:	694b      	ldreq	r3, [r1, #20]
 80092ee:	600f      	str	r7, [r1, #0]
 80092f0:	bf18      	it	ne
 80092f2:	2300      	movne	r3, #0
 80092f4:	eba6 0807 	sub.w	r8, r6, r7
 80092f8:	608b      	str	r3, [r1, #8]
 80092fa:	f1b8 0f00 	cmp.w	r8, #0
 80092fe:	dd9c      	ble.n	800923a <__sflush_r+0x1a>
 8009300:	6a21      	ldr	r1, [r4, #32]
 8009302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009304:	4643      	mov	r3, r8
 8009306:	463a      	mov	r2, r7
 8009308:	4628      	mov	r0, r5
 800930a:	47b0      	blx	r6
 800930c:	2800      	cmp	r0, #0
 800930e:	dc06      	bgt.n	800931e <__sflush_r+0xfe>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009316:	81a3      	strh	r3, [r4, #12]
 8009318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800931c:	e78e      	b.n	800923c <__sflush_r+0x1c>
 800931e:	4407      	add	r7, r0
 8009320:	eba8 0800 	sub.w	r8, r8, r0
 8009324:	e7e9      	b.n	80092fa <__sflush_r+0xda>
 8009326:	bf00      	nop
 8009328:	20400001 	.word	0x20400001

0800932c <_fflush_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	690b      	ldr	r3, [r1, #16]
 8009330:	4605      	mov	r5, r0
 8009332:	460c      	mov	r4, r1
 8009334:	b913      	cbnz	r3, 800933c <_fflush_r+0x10>
 8009336:	2500      	movs	r5, #0
 8009338:	4628      	mov	r0, r5
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	b118      	cbz	r0, 8009346 <_fflush_r+0x1a>
 800933e:	6983      	ldr	r3, [r0, #24]
 8009340:	b90b      	cbnz	r3, 8009346 <_fflush_r+0x1a>
 8009342:	f000 f887 	bl	8009454 <__sinit>
 8009346:	4b14      	ldr	r3, [pc, #80]	; (8009398 <_fflush_r+0x6c>)
 8009348:	429c      	cmp	r4, r3
 800934a:	d11b      	bne.n	8009384 <_fflush_r+0x58>
 800934c:	686c      	ldr	r4, [r5, #4]
 800934e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0ef      	beq.n	8009336 <_fflush_r+0xa>
 8009356:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009358:	07d0      	lsls	r0, r2, #31
 800935a:	d404      	bmi.n	8009366 <_fflush_r+0x3a>
 800935c:	0599      	lsls	r1, r3, #22
 800935e:	d402      	bmi.n	8009366 <_fflush_r+0x3a>
 8009360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009362:	f000 f915 	bl	8009590 <__retarget_lock_acquire_recursive>
 8009366:	4628      	mov	r0, r5
 8009368:	4621      	mov	r1, r4
 800936a:	f7ff ff59 	bl	8009220 <__sflush_r>
 800936e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009370:	07da      	lsls	r2, r3, #31
 8009372:	4605      	mov	r5, r0
 8009374:	d4e0      	bmi.n	8009338 <_fflush_r+0xc>
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	059b      	lsls	r3, r3, #22
 800937a:	d4dd      	bmi.n	8009338 <_fflush_r+0xc>
 800937c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800937e:	f000 f908 	bl	8009592 <__retarget_lock_release_recursive>
 8009382:	e7d9      	b.n	8009338 <_fflush_r+0xc>
 8009384:	4b05      	ldr	r3, [pc, #20]	; (800939c <_fflush_r+0x70>)
 8009386:	429c      	cmp	r4, r3
 8009388:	d101      	bne.n	800938e <_fflush_r+0x62>
 800938a:	68ac      	ldr	r4, [r5, #8]
 800938c:	e7df      	b.n	800934e <_fflush_r+0x22>
 800938e:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <_fflush_r+0x74>)
 8009390:	429c      	cmp	r4, r3
 8009392:	bf08      	it	eq
 8009394:	68ec      	ldreq	r4, [r5, #12]
 8009396:	e7da      	b.n	800934e <_fflush_r+0x22>
 8009398:	08009d44 	.word	0x08009d44
 800939c:	08009d64 	.word	0x08009d64
 80093a0:	08009d24 	.word	0x08009d24

080093a4 <std>:
 80093a4:	2300      	movs	r3, #0
 80093a6:	b510      	push	{r4, lr}
 80093a8:	4604      	mov	r4, r0
 80093aa:	e9c0 3300 	strd	r3, r3, [r0]
 80093ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093b2:	6083      	str	r3, [r0, #8]
 80093b4:	8181      	strh	r1, [r0, #12]
 80093b6:	6643      	str	r3, [r0, #100]	; 0x64
 80093b8:	81c2      	strh	r2, [r0, #14]
 80093ba:	6183      	str	r3, [r0, #24]
 80093bc:	4619      	mov	r1, r3
 80093be:	2208      	movs	r2, #8
 80093c0:	305c      	adds	r0, #92	; 0x5c
 80093c2:	f7fb fdcd 	bl	8004f60 <memset>
 80093c6:	4b05      	ldr	r3, [pc, #20]	; (80093dc <std+0x38>)
 80093c8:	6263      	str	r3, [r4, #36]	; 0x24
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <std+0x3c>)
 80093cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80093ce:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <std+0x40>)
 80093d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093d2:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <std+0x44>)
 80093d4:	6224      	str	r4, [r4, #32]
 80093d6:	6323      	str	r3, [r4, #48]	; 0x30
 80093d8:	bd10      	pop	{r4, pc}
 80093da:	bf00      	nop
 80093dc:	080096f9 	.word	0x080096f9
 80093e0:	0800971b 	.word	0x0800971b
 80093e4:	08009753 	.word	0x08009753
 80093e8:	08009777 	.word	0x08009777

080093ec <_cleanup_r>:
 80093ec:	4901      	ldr	r1, [pc, #4]	; (80093f4 <_cleanup_r+0x8>)
 80093ee:	f000 b8af 	b.w	8009550 <_fwalk_reent>
 80093f2:	bf00      	nop
 80093f4:	0800932d 	.word	0x0800932d

080093f8 <__sfmoreglue>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	2268      	movs	r2, #104	; 0x68
 80093fc:	1e4d      	subs	r5, r1, #1
 80093fe:	4355      	muls	r5, r2
 8009400:	460e      	mov	r6, r1
 8009402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009406:	f7ff fa59 	bl	80088bc <_malloc_r>
 800940a:	4604      	mov	r4, r0
 800940c:	b140      	cbz	r0, 8009420 <__sfmoreglue+0x28>
 800940e:	2100      	movs	r1, #0
 8009410:	e9c0 1600 	strd	r1, r6, [r0]
 8009414:	300c      	adds	r0, #12
 8009416:	60a0      	str	r0, [r4, #8]
 8009418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800941c:	f7fb fda0 	bl	8004f60 <memset>
 8009420:	4620      	mov	r0, r4
 8009422:	bd70      	pop	{r4, r5, r6, pc}

08009424 <__sfp_lock_acquire>:
 8009424:	4801      	ldr	r0, [pc, #4]	; (800942c <__sfp_lock_acquire+0x8>)
 8009426:	f000 b8b3 	b.w	8009590 <__retarget_lock_acquire_recursive>
 800942a:	bf00      	nop
 800942c:	20000345 	.word	0x20000345

08009430 <__sfp_lock_release>:
 8009430:	4801      	ldr	r0, [pc, #4]	; (8009438 <__sfp_lock_release+0x8>)
 8009432:	f000 b8ae 	b.w	8009592 <__retarget_lock_release_recursive>
 8009436:	bf00      	nop
 8009438:	20000345 	.word	0x20000345

0800943c <__sinit_lock_acquire>:
 800943c:	4801      	ldr	r0, [pc, #4]	; (8009444 <__sinit_lock_acquire+0x8>)
 800943e:	f000 b8a7 	b.w	8009590 <__retarget_lock_acquire_recursive>
 8009442:	bf00      	nop
 8009444:	20000346 	.word	0x20000346

08009448 <__sinit_lock_release>:
 8009448:	4801      	ldr	r0, [pc, #4]	; (8009450 <__sinit_lock_release+0x8>)
 800944a:	f000 b8a2 	b.w	8009592 <__retarget_lock_release_recursive>
 800944e:	bf00      	nop
 8009450:	20000346 	.word	0x20000346

08009454 <__sinit>:
 8009454:	b510      	push	{r4, lr}
 8009456:	4604      	mov	r4, r0
 8009458:	f7ff fff0 	bl	800943c <__sinit_lock_acquire>
 800945c:	69a3      	ldr	r3, [r4, #24]
 800945e:	b11b      	cbz	r3, 8009468 <__sinit+0x14>
 8009460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009464:	f7ff bff0 	b.w	8009448 <__sinit_lock_release>
 8009468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800946c:	6523      	str	r3, [r4, #80]	; 0x50
 800946e:	4b13      	ldr	r3, [pc, #76]	; (80094bc <__sinit+0x68>)
 8009470:	4a13      	ldr	r2, [pc, #76]	; (80094c0 <__sinit+0x6c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	62a2      	str	r2, [r4, #40]	; 0x28
 8009476:	42a3      	cmp	r3, r4
 8009478:	bf04      	itt	eq
 800947a:	2301      	moveq	r3, #1
 800947c:	61a3      	streq	r3, [r4, #24]
 800947e:	4620      	mov	r0, r4
 8009480:	f000 f820 	bl	80094c4 <__sfp>
 8009484:	6060      	str	r0, [r4, #4]
 8009486:	4620      	mov	r0, r4
 8009488:	f000 f81c 	bl	80094c4 <__sfp>
 800948c:	60a0      	str	r0, [r4, #8]
 800948e:	4620      	mov	r0, r4
 8009490:	f000 f818 	bl	80094c4 <__sfp>
 8009494:	2200      	movs	r2, #0
 8009496:	60e0      	str	r0, [r4, #12]
 8009498:	2104      	movs	r1, #4
 800949a:	6860      	ldr	r0, [r4, #4]
 800949c:	f7ff ff82 	bl	80093a4 <std>
 80094a0:	68a0      	ldr	r0, [r4, #8]
 80094a2:	2201      	movs	r2, #1
 80094a4:	2109      	movs	r1, #9
 80094a6:	f7ff ff7d 	bl	80093a4 <std>
 80094aa:	68e0      	ldr	r0, [r4, #12]
 80094ac:	2202      	movs	r2, #2
 80094ae:	2112      	movs	r1, #18
 80094b0:	f7ff ff78 	bl	80093a4 <std>
 80094b4:	2301      	movs	r3, #1
 80094b6:	61a3      	str	r3, [r4, #24]
 80094b8:	e7d2      	b.n	8009460 <__sinit+0xc>
 80094ba:	bf00      	nop
 80094bc:	080098e0 	.word	0x080098e0
 80094c0:	080093ed 	.word	0x080093ed

080094c4 <__sfp>:
 80094c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c6:	4607      	mov	r7, r0
 80094c8:	f7ff ffac 	bl	8009424 <__sfp_lock_acquire>
 80094cc:	4b1e      	ldr	r3, [pc, #120]	; (8009548 <__sfp+0x84>)
 80094ce:	681e      	ldr	r6, [r3, #0]
 80094d0:	69b3      	ldr	r3, [r6, #24]
 80094d2:	b913      	cbnz	r3, 80094da <__sfp+0x16>
 80094d4:	4630      	mov	r0, r6
 80094d6:	f7ff ffbd 	bl	8009454 <__sinit>
 80094da:	3648      	adds	r6, #72	; 0x48
 80094dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	d503      	bpl.n	80094ec <__sfp+0x28>
 80094e4:	6833      	ldr	r3, [r6, #0]
 80094e6:	b30b      	cbz	r3, 800952c <__sfp+0x68>
 80094e8:	6836      	ldr	r6, [r6, #0]
 80094ea:	e7f7      	b.n	80094dc <__sfp+0x18>
 80094ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094f0:	b9d5      	cbnz	r5, 8009528 <__sfp+0x64>
 80094f2:	4b16      	ldr	r3, [pc, #88]	; (800954c <__sfp+0x88>)
 80094f4:	60e3      	str	r3, [r4, #12]
 80094f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094fa:	6665      	str	r5, [r4, #100]	; 0x64
 80094fc:	f000 f847 	bl	800958e <__retarget_lock_init_recursive>
 8009500:	f7ff ff96 	bl	8009430 <__sfp_lock_release>
 8009504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800950c:	6025      	str	r5, [r4, #0]
 800950e:	61a5      	str	r5, [r4, #24]
 8009510:	2208      	movs	r2, #8
 8009512:	4629      	mov	r1, r5
 8009514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009518:	f7fb fd22 	bl	8004f60 <memset>
 800951c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009524:	4620      	mov	r0, r4
 8009526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009528:	3468      	adds	r4, #104	; 0x68
 800952a:	e7d9      	b.n	80094e0 <__sfp+0x1c>
 800952c:	2104      	movs	r1, #4
 800952e:	4638      	mov	r0, r7
 8009530:	f7ff ff62 	bl	80093f8 <__sfmoreglue>
 8009534:	4604      	mov	r4, r0
 8009536:	6030      	str	r0, [r6, #0]
 8009538:	2800      	cmp	r0, #0
 800953a:	d1d5      	bne.n	80094e8 <__sfp+0x24>
 800953c:	f7ff ff78 	bl	8009430 <__sfp_lock_release>
 8009540:	230c      	movs	r3, #12
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	e7ee      	b.n	8009524 <__sfp+0x60>
 8009546:	bf00      	nop
 8009548:	080098e0 	.word	0x080098e0
 800954c:	ffff0001 	.word	0xffff0001

08009550 <_fwalk_reent>:
 8009550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009554:	4606      	mov	r6, r0
 8009556:	4688      	mov	r8, r1
 8009558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800955c:	2700      	movs	r7, #0
 800955e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009562:	f1b9 0901 	subs.w	r9, r9, #1
 8009566:	d505      	bpl.n	8009574 <_fwalk_reent+0x24>
 8009568:	6824      	ldr	r4, [r4, #0]
 800956a:	2c00      	cmp	r4, #0
 800956c:	d1f7      	bne.n	800955e <_fwalk_reent+0xe>
 800956e:	4638      	mov	r0, r7
 8009570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009574:	89ab      	ldrh	r3, [r5, #12]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d907      	bls.n	800958a <_fwalk_reent+0x3a>
 800957a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800957e:	3301      	adds	r3, #1
 8009580:	d003      	beq.n	800958a <_fwalk_reent+0x3a>
 8009582:	4629      	mov	r1, r5
 8009584:	4630      	mov	r0, r6
 8009586:	47c0      	blx	r8
 8009588:	4307      	orrs	r7, r0
 800958a:	3568      	adds	r5, #104	; 0x68
 800958c:	e7e9      	b.n	8009562 <_fwalk_reent+0x12>

0800958e <__retarget_lock_init_recursive>:
 800958e:	4770      	bx	lr

08009590 <__retarget_lock_acquire_recursive>:
 8009590:	4770      	bx	lr

08009592 <__retarget_lock_release_recursive>:
 8009592:	4770      	bx	lr

08009594 <__swhatbuf_r>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	460e      	mov	r6, r1
 8009598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800959c:	2900      	cmp	r1, #0
 800959e:	b096      	sub	sp, #88	; 0x58
 80095a0:	4614      	mov	r4, r2
 80095a2:	461d      	mov	r5, r3
 80095a4:	da08      	bge.n	80095b8 <__swhatbuf_r+0x24>
 80095a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	602a      	str	r2, [r5, #0]
 80095ae:	061a      	lsls	r2, r3, #24
 80095b0:	d410      	bmi.n	80095d4 <__swhatbuf_r+0x40>
 80095b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b6:	e00e      	b.n	80095d6 <__swhatbuf_r+0x42>
 80095b8:	466a      	mov	r2, sp
 80095ba:	f000 f903 	bl	80097c4 <_fstat_r>
 80095be:	2800      	cmp	r0, #0
 80095c0:	dbf1      	blt.n	80095a6 <__swhatbuf_r+0x12>
 80095c2:	9a01      	ldr	r2, [sp, #4]
 80095c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095cc:	425a      	negs	r2, r3
 80095ce:	415a      	adcs	r2, r3
 80095d0:	602a      	str	r2, [r5, #0]
 80095d2:	e7ee      	b.n	80095b2 <__swhatbuf_r+0x1e>
 80095d4:	2340      	movs	r3, #64	; 0x40
 80095d6:	2000      	movs	r0, #0
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	b016      	add	sp, #88	; 0x58
 80095dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080095e0 <__smakebuf_r>:
 80095e0:	898b      	ldrh	r3, [r1, #12]
 80095e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095e4:	079d      	lsls	r5, r3, #30
 80095e6:	4606      	mov	r6, r0
 80095e8:	460c      	mov	r4, r1
 80095ea:	d507      	bpl.n	80095fc <__smakebuf_r+0x1c>
 80095ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	6123      	str	r3, [r4, #16]
 80095f4:	2301      	movs	r3, #1
 80095f6:	6163      	str	r3, [r4, #20]
 80095f8:	b002      	add	sp, #8
 80095fa:	bd70      	pop	{r4, r5, r6, pc}
 80095fc:	ab01      	add	r3, sp, #4
 80095fe:	466a      	mov	r2, sp
 8009600:	f7ff ffc8 	bl	8009594 <__swhatbuf_r>
 8009604:	9900      	ldr	r1, [sp, #0]
 8009606:	4605      	mov	r5, r0
 8009608:	4630      	mov	r0, r6
 800960a:	f7ff f957 	bl	80088bc <_malloc_r>
 800960e:	b948      	cbnz	r0, 8009624 <__smakebuf_r+0x44>
 8009610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009614:	059a      	lsls	r2, r3, #22
 8009616:	d4ef      	bmi.n	80095f8 <__smakebuf_r+0x18>
 8009618:	f023 0303 	bic.w	r3, r3, #3
 800961c:	f043 0302 	orr.w	r3, r3, #2
 8009620:	81a3      	strh	r3, [r4, #12]
 8009622:	e7e3      	b.n	80095ec <__smakebuf_r+0xc>
 8009624:	4b0d      	ldr	r3, [pc, #52]	; (800965c <__smakebuf_r+0x7c>)
 8009626:	62b3      	str	r3, [r6, #40]	; 0x28
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	6020      	str	r0, [r4, #0]
 800962c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009630:	81a3      	strh	r3, [r4, #12]
 8009632:	9b00      	ldr	r3, [sp, #0]
 8009634:	6163      	str	r3, [r4, #20]
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	6120      	str	r0, [r4, #16]
 800963a:	b15b      	cbz	r3, 8009654 <__smakebuf_r+0x74>
 800963c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009640:	4630      	mov	r0, r6
 8009642:	f000 f8d1 	bl	80097e8 <_isatty_r>
 8009646:	b128      	cbz	r0, 8009654 <__smakebuf_r+0x74>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f023 0303 	bic.w	r3, r3, #3
 800964e:	f043 0301 	orr.w	r3, r3, #1
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	89a0      	ldrh	r0, [r4, #12]
 8009656:	4305      	orrs	r5, r0
 8009658:	81a5      	strh	r5, [r4, #12]
 800965a:	e7cd      	b.n	80095f8 <__smakebuf_r+0x18>
 800965c:	080093ed 	.word	0x080093ed

08009660 <_malloc_usable_size_r>:
 8009660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009664:	1f18      	subs	r0, r3, #4
 8009666:	2b00      	cmp	r3, #0
 8009668:	bfbc      	itt	lt
 800966a:	580b      	ldrlt	r3, [r1, r0]
 800966c:	18c0      	addlt	r0, r0, r3
 800966e:	4770      	bx	lr

08009670 <_raise_r>:
 8009670:	291f      	cmp	r1, #31
 8009672:	b538      	push	{r3, r4, r5, lr}
 8009674:	4604      	mov	r4, r0
 8009676:	460d      	mov	r5, r1
 8009678:	d904      	bls.n	8009684 <_raise_r+0x14>
 800967a:	2316      	movs	r3, #22
 800967c:	6003      	str	r3, [r0, #0]
 800967e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009686:	b112      	cbz	r2, 800968e <_raise_r+0x1e>
 8009688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800968c:	b94b      	cbnz	r3, 80096a2 <_raise_r+0x32>
 800968e:	4620      	mov	r0, r4
 8009690:	f000 f830 	bl	80096f4 <_getpid_r>
 8009694:	462a      	mov	r2, r5
 8009696:	4601      	mov	r1, r0
 8009698:	4620      	mov	r0, r4
 800969a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800969e:	f000 b817 	b.w	80096d0 <_kill_r>
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d00a      	beq.n	80096bc <_raise_r+0x4c>
 80096a6:	1c59      	adds	r1, r3, #1
 80096a8:	d103      	bne.n	80096b2 <_raise_r+0x42>
 80096aa:	2316      	movs	r3, #22
 80096ac:	6003      	str	r3, [r0, #0]
 80096ae:	2001      	movs	r0, #1
 80096b0:	e7e7      	b.n	8009682 <_raise_r+0x12>
 80096b2:	2400      	movs	r4, #0
 80096b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096b8:	4628      	mov	r0, r5
 80096ba:	4798      	blx	r3
 80096bc:	2000      	movs	r0, #0
 80096be:	e7e0      	b.n	8009682 <_raise_r+0x12>

080096c0 <raise>:
 80096c0:	4b02      	ldr	r3, [pc, #8]	; (80096cc <raise+0xc>)
 80096c2:	4601      	mov	r1, r0
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	f7ff bfd3 	b.w	8009670 <_raise_r>
 80096ca:	bf00      	nop
 80096cc:	20000024 	.word	0x20000024

080096d0 <_kill_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	4d07      	ldr	r5, [pc, #28]	; (80096f0 <_kill_r+0x20>)
 80096d4:	2300      	movs	r3, #0
 80096d6:	4604      	mov	r4, r0
 80096d8:	4608      	mov	r0, r1
 80096da:	4611      	mov	r1, r2
 80096dc:	602b      	str	r3, [r5, #0]
 80096de:	f7f7 fcb7 	bl	8001050 <_kill>
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	d102      	bne.n	80096ec <_kill_r+0x1c>
 80096e6:	682b      	ldr	r3, [r5, #0]
 80096e8:	b103      	cbz	r3, 80096ec <_kill_r+0x1c>
 80096ea:	6023      	str	r3, [r4, #0]
 80096ec:	bd38      	pop	{r3, r4, r5, pc}
 80096ee:	bf00      	nop
 80096f0:	20000340 	.word	0x20000340

080096f4 <_getpid_r>:
 80096f4:	f7f7 bca4 	b.w	8001040 <_getpid>

080096f8 <__sread>:
 80096f8:	b510      	push	{r4, lr}
 80096fa:	460c      	mov	r4, r1
 80096fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009700:	f000 f894 	bl	800982c <_read_r>
 8009704:	2800      	cmp	r0, #0
 8009706:	bfab      	itete	ge
 8009708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800970a:	89a3      	ldrhlt	r3, [r4, #12]
 800970c:	181b      	addge	r3, r3, r0
 800970e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009712:	bfac      	ite	ge
 8009714:	6563      	strge	r3, [r4, #84]	; 0x54
 8009716:	81a3      	strhlt	r3, [r4, #12]
 8009718:	bd10      	pop	{r4, pc}

0800971a <__swrite>:
 800971a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971e:	461f      	mov	r7, r3
 8009720:	898b      	ldrh	r3, [r1, #12]
 8009722:	05db      	lsls	r3, r3, #23
 8009724:	4605      	mov	r5, r0
 8009726:	460c      	mov	r4, r1
 8009728:	4616      	mov	r6, r2
 800972a:	d505      	bpl.n	8009738 <__swrite+0x1e>
 800972c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009730:	2302      	movs	r3, #2
 8009732:	2200      	movs	r2, #0
 8009734:	f000 f868 	bl	8009808 <_lseek_r>
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800973e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	4632      	mov	r2, r6
 8009746:	463b      	mov	r3, r7
 8009748:	4628      	mov	r0, r5
 800974a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800974e:	f000 b817 	b.w	8009780 <_write_r>

08009752 <__sseek>:
 8009752:	b510      	push	{r4, lr}
 8009754:	460c      	mov	r4, r1
 8009756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975a:	f000 f855 	bl	8009808 <_lseek_r>
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	bf15      	itete	ne
 8009764:	6560      	strne	r0, [r4, #84]	; 0x54
 8009766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800976a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800976e:	81a3      	strheq	r3, [r4, #12]
 8009770:	bf18      	it	ne
 8009772:	81a3      	strhne	r3, [r4, #12]
 8009774:	bd10      	pop	{r4, pc}

08009776 <__sclose>:
 8009776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977a:	f000 b813 	b.w	80097a4 <_close_r>
	...

08009780 <_write_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4d07      	ldr	r5, [pc, #28]	; (80097a0 <_write_r+0x20>)
 8009784:	4604      	mov	r4, r0
 8009786:	4608      	mov	r0, r1
 8009788:	4611      	mov	r1, r2
 800978a:	2200      	movs	r2, #0
 800978c:	602a      	str	r2, [r5, #0]
 800978e:	461a      	mov	r2, r3
 8009790:	f7f7 fb7c 	bl	8000e8c <_write>
 8009794:	1c43      	adds	r3, r0, #1
 8009796:	d102      	bne.n	800979e <_write_r+0x1e>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	b103      	cbz	r3, 800979e <_write_r+0x1e>
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	20000340 	.word	0x20000340

080097a4 <_close_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	4d06      	ldr	r5, [pc, #24]	; (80097c0 <_close_r+0x1c>)
 80097a8:	2300      	movs	r3, #0
 80097aa:	4604      	mov	r4, r0
 80097ac:	4608      	mov	r0, r1
 80097ae:	602b      	str	r3, [r5, #0]
 80097b0:	f7f7 fc85 	bl	80010be <_close>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_close_r+0x1a>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	b103      	cbz	r3, 80097be <_close_r+0x1a>
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	20000340 	.word	0x20000340

080097c4 <_fstat_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4d07      	ldr	r5, [pc, #28]	; (80097e4 <_fstat_r+0x20>)
 80097c8:	2300      	movs	r3, #0
 80097ca:	4604      	mov	r4, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	4611      	mov	r1, r2
 80097d0:	602b      	str	r3, [r5, #0]
 80097d2:	f7f7 fc80 	bl	80010d6 <_fstat>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	d102      	bne.n	80097e0 <_fstat_r+0x1c>
 80097da:	682b      	ldr	r3, [r5, #0]
 80097dc:	b103      	cbz	r3, 80097e0 <_fstat_r+0x1c>
 80097de:	6023      	str	r3, [r4, #0]
 80097e0:	bd38      	pop	{r3, r4, r5, pc}
 80097e2:	bf00      	nop
 80097e4:	20000340 	.word	0x20000340

080097e8 <_isatty_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4d06      	ldr	r5, [pc, #24]	; (8009804 <_isatty_r+0x1c>)
 80097ec:	2300      	movs	r3, #0
 80097ee:	4604      	mov	r4, r0
 80097f0:	4608      	mov	r0, r1
 80097f2:	602b      	str	r3, [r5, #0]
 80097f4:	f7f7 fc7f 	bl	80010f6 <_isatty>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d102      	bne.n	8009802 <_isatty_r+0x1a>
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	b103      	cbz	r3, 8009802 <_isatty_r+0x1a>
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	20000340 	.word	0x20000340

08009808 <_lseek_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4d07      	ldr	r5, [pc, #28]	; (8009828 <_lseek_r+0x20>)
 800980c:	4604      	mov	r4, r0
 800980e:	4608      	mov	r0, r1
 8009810:	4611      	mov	r1, r2
 8009812:	2200      	movs	r2, #0
 8009814:	602a      	str	r2, [r5, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	f7f7 fc78 	bl	800110c <_lseek>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_lseek_r+0x1e>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_lseek_r+0x1e>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	20000340 	.word	0x20000340

0800982c <_read_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d07      	ldr	r5, [pc, #28]	; (800984c <_read_r+0x20>)
 8009830:	4604      	mov	r4, r0
 8009832:	4608      	mov	r0, r1
 8009834:	4611      	mov	r1, r2
 8009836:	2200      	movs	r2, #0
 8009838:	602a      	str	r2, [r5, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	f7f7 fc22 	bl	8001084 <_read>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d102      	bne.n	800984a <_read_r+0x1e>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	b103      	cbz	r3, 800984a <_read_r+0x1e>
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	20000340 	.word	0x20000340

08009850 <_init>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	bf00      	nop
 8009854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009856:	bc08      	pop	{r3}
 8009858:	469e      	mov	lr, r3
 800985a:	4770      	bx	lr

0800985c <_fini>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr
